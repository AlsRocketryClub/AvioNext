
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b158  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0801b428  0801b428  0002b428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ba20  0801ba20  0002ba20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ba28  0801ba28  0002ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ba2c  0801ba2c  0002ba2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801ba30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031ac  240002c8  0801bcf8  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003474  0801bcf8  00033474  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   000359f4  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063e0  00000000  00000000  00065d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b70  00000000  00000000  0006c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021ab  00000000  00000000  0006ec80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ec42  00000000  00000000  00070e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b089  00000000  00000000  000afa6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ef4b  00000000  00000000  000eaaf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000cfbc  00000000  00000000  00269a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00276a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b410 	.word	0x0801b410

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801b410 	.word	0x0801b410

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HG2_Write_Register+0x48>)
 8000abc:	f007 f9fe 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac0:	1df9      	adds	r1, r7, #7
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ac8:	f00d ff7a 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000acc:	1db9      	adds	r1, r7, #6
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ad4:	f00d ff74 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <HG2_Write_Register+0x48>)
 8000ae0:	f007 f9ec 	bl	8007ebc <HAL_GPIO_WritePin>

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	24001138 	.word	0x24001138

08000af4 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b10:	f007 f9d4 	bl	8007ebc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b14:	1df9      	adds	r1, r7, #7
 8000b16:	2364      	movs	r3, #100	; 0x64
 8000b18:	2201      	movs	r2, #1
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b1c:	f00d ff50 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b20:	f107 010f 	add.w	r1, r7, #15
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	2201      	movs	r2, #1
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b2a:	f00e f945 	bl	800edb8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b36:	f007 f9c1 	bl	8007ebc <HAL_GPIO_WritePin>

	return reg_value;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	24001138 	.word	0x24001138

08000b4c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b64:	f007 f9aa 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b68:	1df9      	adds	r1, r7, #7
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b70:	f00d ff26 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b74:	1db9      	adds	r1, r7, #6
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b7c:	f00d ff20 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b88:	f007 f998 	bl	8007ebc <HAL_GPIO_WritePin>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58020c00 	.word	0x58020c00
 8000b98:	24001138 	.word	0x24001138

08000b9c <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000ba2:	2022      	movs	r0, #34	; 0x22
 8000ba4:	f7ff ffa6 	bl	8000af4 <LG2_Read_Register>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bac:	2023      	movs	r0, #35	; 0x23
 8000bae:	f7ff ffa1 	bl	8000af4 <LG2_Read_Register>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000bc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000bf4 <LG2_Get_Gyro_X+0x58>
 8000bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000bf8 <LG2_Get_Gyro_X+0x5c>
 8000bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000be0:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	ee07 3a90 	vmov	s15, r3
}
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	46fffe00 	.word	0x46fffe00
 8000bf8:	437a0000 	.word	0x437a0000

08000bfc <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c02:	2024      	movs	r0, #36	; 0x24
 8000c04:	f7ff ff76 	bl	8000af4 <LG2_Read_Register>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c0c:	2025      	movs	r0, #37	; 0x25
 8000c0e:	f7ff ff71 	bl	8000af4 <LG2_Read_Register>
 8000c12:	4603      	mov	r3, r0
 8000c14:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000c24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c30:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c54 <LG2_Get_Gyro_Y+0x58>
 8000c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c38:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c58 <LG2_Get_Gyro_Y+0x5c>
 8000c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c40:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
}
 8000c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	46fffe00 	.word	0x46fffe00
 8000c58:	437a0000 	.word	0x437a0000
 8000c5c:	00000000 	.word	0x00000000

08000c60 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c66:	2026      	movs	r0, #38	; 0x26
 8000c68:	f7ff ff44 	bl	8000af4 <LG2_Read_Register>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c70:	2027      	movs	r0, #39	; 0x27
 8000c72:	f7ff ff3f 	bl	8000af4 <LG2_Read_Register>
 8000c76:	4603      	mov	r3, r0
 8000c78:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000c88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c98:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000cc0 <LG2_Get_Gyro_Z+0x60>
 8000c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000cc8 <LG2_Get_Gyro_Z+0x68>
 8000ca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cac:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	ee07 3a90 	vmov	s15, r3
}
 8000cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40dfffc0 	.word	0x40dfffc0
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	406f4000 	.word	0x406f4000

08000cd0 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000cdc:	ed97 7a00 	vldr	s14, [r7]
 8000ce0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d50 <setServo+0x80>
 8000ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d54 <setServo+0x84>
 8000cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d58 <setServo+0x88>
 8000cf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfc:	ee17 3a90 	vmov	r3, s15
 8000d00:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d81a      	bhi.n	8000d40 <setServo+0x70>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <setServo+0x40>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d21 	.word	0x08000d21
 8000d14:	08000d29 	.word	0x08000d29
 8000d18:	08000d31 	.word	0x08000d31
 8000d1c:	08000d39 	.word	0x08000d39
		case 1:
			TIM4->CCR4 = timerVal;
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <setServo+0x8c>)
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000d26:	e00c      	b.n	8000d42 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <setServo+0x8c>)
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000d2e:	e008      	b.n	8000d42 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <setServo+0x8c>)
 8000d32:	89fb      	ldrh	r3, [r7, #14]
 8000d34:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000d36:	e004      	b.n	8000d42 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <setServo+0x8c>)
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000d3e:	e000      	b.n	8000d42 <setServo+0x72>

		default:
			break;
 8000d40:	bf00      	nop
	}
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	43340000 	.word	0x43340000
 8000d54:	457a0000 	.word	0x457a0000
 8000d58:	453b8000 	.word	0x453b8000
 8000d5c:	40000800 	.word	0x40000800

08000d60 <setLEDs>:

void setLEDs(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
 8000d6a:	e181      	b.n	8001070 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000d6c:	4aa1      	ldr	r2, [pc, #644]	; (8000ff4 <setLEDs+0x294>)
 8000d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	f200 8177 	bhi.w	8001068 <setLEDs+0x308>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <setLEDs+0x20>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000e41 	.word	0x08000e41
 8000d88:	08000ef1 	.word	0x08000ef1
 8000d8c:	08000fa1 	.word	0x08000fa1
		case 0:
			for (int j = 0; j < 3; j++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	e042      	b.n	8000e1c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9a:	e039      	b.n	8000e10 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000d9c:	4996      	ldr	r1, [pc, #600]	; (8000ff8 <setLEDs+0x298>)
 8000d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da8:	4413      	add	r3, r2
 8000daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000db2:	fa41 f202 	asr.w	r2, r1, r2
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d013      	beq.n	8000de4 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	00da      	lsls	r2, r3, #3
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	18d1      	adds	r1, r2, r3
 8000dc4:	4a8b      	ldr	r2, [pc, #556]	; (8000ff4 <setLEDs+0x294>)
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	4a88      	ldr	r2, [pc, #544]	; (8000ffc <setLEDs+0x29c>)
 8000ddc:	213c      	movs	r1, #60	; 0x3c
 8000dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000de2:	e012      	b.n	8000e0a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de6:	00da      	lsls	r2, r3, #3
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	18d1      	adds	r1, r2, r3
 8000dec:	4a81      	ldr	r2, [pc, #516]	; (8000ff4 <setLEDs+0x294>)
 8000dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	3308      	adds	r3, #8
 8000e02:	4a7e      	ldr	r2, [pc, #504]	; (8000ffc <setLEDs+0x29c>)
 8000e04:	211e      	movs	r1, #30
 8000e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	2b07      	cmp	r3, #7
 8000e14:	ddc2      	ble.n	8000d9c <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	3301      	adds	r3, #1
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	ddb9      	ble.n	8000d96 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e26:	e007      	b.n	8000e38 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000e28:	4a74      	ldr	r2, [pc, #464]	; (8000ffc <setLEDs+0x29c>)
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e34:	3301      	adds	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e3a:	2bb1      	cmp	r3, #177	; 0xb1
 8000e3c:	ddf4      	ble.n	8000e28 <setLEDs+0xc8>
			}
			break;
 8000e3e:	e114      	b.n	800106a <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
 8000e44:	e042      	b.n	8000ecc <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	e039      	b.n	8000ec0 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000e4c:	496a      	ldr	r1, [pc, #424]	; (8000ff8 <setLEDs+0x298>)
 8000e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e58:	4413      	add	r3, r2
 8000e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	6a3a      	ldr	r2, [r7, #32]
 8000e62:	fa41 f202 	asr.w	r2, r1, r2
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	00da      	lsls	r2, r3, #3
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	18d1      	adds	r1, r2, r3
 8000e74:	4a5f      	ldr	r2, [pc, #380]	; (8000ff4 <setLEDs+0x294>)
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	440b      	add	r3, r1
 8000e88:	3308      	adds	r3, #8
 8000e8a:	4a5d      	ldr	r2, [pc, #372]	; (8001000 <setLEDs+0x2a0>)
 8000e8c:	213c      	movs	r1, #60	; 0x3c
 8000e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e92:	e012      	b.n	8000eba <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	00da      	lsls	r2, r3, #3
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	18d1      	adds	r1, r2, r3
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <setLEDs+0x294>)
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	4a53      	ldr	r2, [pc, #332]	; (8001000 <setLEDs+0x2a0>)
 8000eb4:	211e      	movs	r1, #30
 8000eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	ddc2      	ble.n	8000e4c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3301      	adds	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	ddb9      	ble.n	8000e46 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	e007      	b.n	8000ee8 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <setLEDs+0x2a0>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	2100      	movs	r1, #0
 8000ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2bb1      	cmp	r3, #177	; 0xb1
 8000eec:	ddf4      	ble.n	8000ed8 <setLEDs+0x178>
			}
			break;
 8000eee:	e0bc      	b.n	800106a <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	e042      	b.n	8000f7c <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e039      	b.n	8000f70 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000efc:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <setLEDs+0x298>)
 8000efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4413      	add	r3, r2
 8000f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	fa41 f202 	asr.w	r2, r1, r2
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d013      	beq.n	8000f44 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	00da      	lsls	r2, r3, #3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	18d1      	adds	r1, r2, r3
 8000f24:	4a33      	ldr	r2, [pc, #204]	; (8000ff4 <setLEDs+0x294>)
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	3308      	adds	r3, #8
 8000f3a:	4a32      	ldr	r2, [pc, #200]	; (8001004 <setLEDs+0x2a4>)
 8000f3c:	213c      	movs	r1, #60	; 0x3c
 8000f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f42:	e012      	b.n	8000f6a <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	00da      	lsls	r2, r3, #3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	18d1      	adds	r1, r2, r3
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <setLEDs+0x294>)
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	440b      	add	r3, r1
 8000f60:	3308      	adds	r3, #8
 8000f62:	4a28      	ldr	r2, [pc, #160]	; (8001004 <setLEDs+0x2a4>)
 8000f64:	211e      	movs	r1, #30
 8000f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b07      	cmp	r3, #7
 8000f74:	ddc2      	ble.n	8000efc <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	ddb9      	ble.n	8000ef6 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000f82:	2338      	movs	r3, #56	; 0x38
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e007      	b.n	8000f98 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <setLEDs+0x2a4>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3301      	adds	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b69      	cmp	r3, #105	; 0x69
 8000f9c:	ddf4      	ble.n	8000f88 <setLEDs+0x228>
			}
			break;
 8000f9e:	e064      	b.n	800106a <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e04e      	b.n	8001044 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	e045      	b.n	8001038 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000fac:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <setLEDs+0x298>)
 8000fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fbe:	2180      	movs	r1, #128	; 0x80
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	fa41 f202 	asr.w	r2, r1, r2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d01f      	beq.n	800100c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	00da      	lsls	r2, r3, #3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	18d1      	adds	r1, r2, r3
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <setLEDs+0x294>)
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3308      	adds	r3, #8
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <setLEDs+0x2a8>)
 8000fec:	213c      	movs	r1, #60	; 0x3c
 8000fee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ff2:	e01e      	b.n	8001032 <setLEDs+0x2d2>
 8000ff4:	0801b534 	.word	0x0801b534
 8000ff8:	24000cc8 	.word	0x24000cc8
 8000ffc:	240003e8 	.word	0x240003e8
 8001000:	240006b0 	.word	0x240006b0
 8001004:	24000978 	.word	0x24000978
 8001008:	24000b20 	.word	0x24000b20
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	00da      	lsls	r2, r3, #3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	18d1      	adds	r1, r2, r3
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <setLEDs+0x350>)
 8001016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3308      	adds	r3, #8
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <setLEDs+0x354>)
 800102c:	211e      	movs	r1, #30
 800102e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b07      	cmp	r3, #7
 800103c:	ddb6      	ble.n	8000fac <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b02      	cmp	r3, #2
 8001048:	ddad      	ble.n	8000fa6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800104a:	2338      	movs	r3, #56	; 0x38
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	e007      	b.n	8001060 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <setLEDs+0x354>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2100      	movs	r1, #0
 8001056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b69      	cmp	r3, #105	; 0x69
 8001064:	ddf4      	ble.n	8001050 <setLEDs+0x2f0>
			}
			break;
 8001066:	e000      	b.n	800106a <setLEDs+0x30a>
		default:
			break;
 8001068:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	3301      	adds	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
 8001070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001072:	2b0d      	cmp	r3, #13
 8001074:	f77f ae7a 	ble.w	8000d6c <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8001078:	23b2      	movs	r3, #178	; 0xb2
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <setLEDs+0x358>)
 800107c:	210c      	movs	r1, #12
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <setLEDs+0x35c>)
 8001080:	f00e fa86 	bl	800f590 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8001084:	23b2      	movs	r3, #178	; 0xb2
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <setLEDs+0x360>)
 8001088:	2108      	movs	r1, #8
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <setLEDs+0x364>)
 800108c:	f00e fa80 	bl	800f590 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8001090:	236a      	movs	r3, #106	; 0x6a
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <setLEDs+0x368>)
 8001094:	2104      	movs	r1, #4
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <setLEDs+0x36c>)
 8001098:	f00e fa7a 	bl	800f590 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 800109c:	236a      	movs	r3, #106	; 0x6a
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <setLEDs+0x354>)
 80010a0:	2100      	movs	r1, #0
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <setLEDs+0x36c>)
 80010a4:	f00e fa74 	bl	800f590 <HAL_TIM_PWM_Start_DMA>

}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	0801b534 	.word	0x0801b534
 80010b4:	24000b20 	.word	0x24000b20
 80010b8:	240003e8 	.word	0x240003e8
 80010bc:	2400132c 	.word	0x2400132c
 80010c0:	240006b0 	.word	0x240006b0
 80010c4:	24001248 	.word	0x24001248
 80010c8:	24000978 	.word	0x24000978
 80010cc:	24001294 	.word	0x24001294

080010d0 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoRA_Read_Register+0x48>)
 80010e2:	f006 feeb 	bl	8007ebc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 80010e6:	1df9      	adds	r1, r7, #7
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2201      	movs	r2, #1
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoRA_Read_Register+0x4c>)
 80010ee:	f00d fc67 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 80010f2:	f107 010f 	add.w	r1, r7, #15
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	2201      	movs	r2, #1
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <LoRA_Read_Register+0x4c>)
 80010fc:	f00d fe5c 	bl	800edb8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001106:	4804      	ldr	r0, [pc, #16]	; (8001118 <LoRA_Read_Register+0x48>)
 8001108:	f006 fed8 	bl	8007ebc <HAL_GPIO_WritePin>

	return reg_value;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	58020000 	.word	0x58020000
 800111c:	240011c0 	.word	0x240011c0

08001120 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001136:	b2db      	uxtb	r3, r3
 8001138:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoRA_Write_Register+0x54>)
 8001142:	f006 febb 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8001146:	1df9      	adds	r1, r7, #7
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	2201      	movs	r2, #1
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <LoRA_Write_Register+0x58>)
 800114e:	f00d fc37 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8001152:	1db9      	adds	r1, r7, #6
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	2201      	movs	r2, #1
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <LoRA_Write_Register+0x58>)
 800115a:	f00d fc31 	bl	800e9c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <LoRA_Write_Register+0x54>)
 8001166:	f006 fea9 	bl	8007ebc <HAL_GPIO_WritePin>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58020000 	.word	0x58020000
 8001178:	240011c0 	.word	0x240011c0

0800117c <LoRA_sleep>:


void LoRA_sleep(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff ffcc 	bl	8001120 <LoRA_Write_Register>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	17c8      	asrs	r0, r1, #31
 8001198:	460a      	mov	r2, r1
 800119a:	4603      	mov	r3, r0
 800119c:	1355      	asrs	r5, r2, #13
 800119e:	04d4      	lsls	r4, r2, #19
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <LoRA_set_frequency+0x78>)
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	4620      	mov	r0, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	f7ff fac5 	bl	8000738 <__aeabi_uldivmod>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80011b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	0c02      	lsrs	r2, r0, #16
 80011c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011c8:	0c0b      	lsrs	r3, r1, #16
 80011ca:	b2d3      	uxtb	r3, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff ffa6 	bl	8001120 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 80011d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	0a02      	lsrs	r2, r0, #8
 80011e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80011e6:	0a0b      	lsrs	r3, r1, #8
 80011e8:	b2d3      	uxtb	r3, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	2007      	movs	r0, #7
 80011ee:	f7ff ff97 	bl	8001120 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 80011f2:	7a3b      	ldrb	r3, [r7, #8]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff ff92 	bl	8001120 <LoRA_Write_Register>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bdb0      	pop	{r4, r5, r7, pc}
 8001204:	01e84800 	.word	0x01e84800

08001208 <LoRA_idle>:

void LoRA_idle(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800120c:	2181      	movs	r1, #129	; 0x81
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff ff86 	bl	8001120 <LoRA_Write_Register>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8001222:	231b      	movs	r3, #27
 8001224:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b78      	cmp	r3, #120	; 0x78
 800122a:	d809      	bhi.n	8001240 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3b2d      	subs	r3, #45	; 0x2d
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <LoRA_setOCP+0x60>)
 8001232:	fb82 1203 	smull	r1, r2, r2, r3
 8001236:	1052      	asrs	r2, r2, #1
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e00b      	b.n	8001258 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2bf0      	cmp	r3, #240	; 0xf0
 8001244:	d808      	bhi.n	8001258 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	331e      	adds	r3, #30
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoRA_setOCP+0x60>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	1092      	asrs	r2, r2, #2
 8001252:	17db      	asrs	r3, r3, #31
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f003 031f 	and.w	r3, r3, #31
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	200b      	movs	r0, #11
 800126a:	f7ff ff59 	bl	8001120 <LoRA_Write_Register>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	66666667 	.word	0x66666667

0800127c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b11      	cmp	r3, #17
 8001288:	dd0f      	ble.n	80012aa <LoRA_setTxPower+0x2e>
      if (level > 20) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b14      	cmp	r3, #20
 800128e:	dd01      	ble.n	8001294 <LoRA_setTxPower+0x18>
        level = 20;
 8001290:	2314      	movs	r3, #20
 8001292:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b03      	subs	r3, #3
 8001298:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 800129a:	2187      	movs	r1, #135	; 0x87
 800129c:	204d      	movs	r0, #77	; 0x4d
 800129e:	f7ff ff3f 	bl	8001120 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80012a2:	208c      	movs	r0, #140	; 0x8c
 80012a4:	f7ff ffb8 	bl	8001218 <LoRA_setOCP>
 80012a8:	e00b      	b.n	80012c2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	dc01      	bgt.n	80012b4 <LoRA_setTxPower+0x38>
        level = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80012b4:	2184      	movs	r1, #132	; 0x84
 80012b6:	204d      	movs	r0, #77	; 0x4d
 80012b8:	f7ff ff32 	bl	8001120 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f7ff ffab 	bl	8001218 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3b02      	subs	r3, #2
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	2009      	movs	r0, #9
 80012d8:	f7ff ff22 	bl	8001120 <LoRA_Write_Register>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80012e8:	201d      	movs	r0, #29
 80012ea:	f7ff fef1 	bl	80010d0 <LoRA_Read_Register>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4619      	mov	r1, r3
 80012f8:	201d      	movs	r0, #29
 80012fa:	f7ff ff11 	bl	8001120 <LoRA_Write_Register>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <LoRA_begin>:

void LoRA_begin(long frequency){
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	; 0x70
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800130c:	2201      	movs	r2, #1
 800130e:	2101      	movs	r1, #1
 8001310:	4822      	ldr	r0, [pc, #136]	; (800139c <LoRA_begin+0x98>)
 8001312:	f006 fdd3 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <LoRA_begin+0x9c>)
 800131e:	f006 fdcd 	bl	8007ebc <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001322:	2042      	movs	r0, #66	; 0x42
 8001324:	f7ff fed4 	bl	80010d0 <LoRA_Read_Register>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 800132e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	491b      	ldr	r1, [pc, #108]	; (80013a4 <LoRA_begin+0xa0>)
 8001338:	4618      	mov	r0, r3
 800133a:	f016 fc95 	bl	8017c68 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f834 	bl	80003b0 <strlen>
 8001348:	4602      	mov	r2, r0
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f015 f935 	bl	80165c0 <CDC_Transmit_HS>

	LoRA_sleep();
 8001356:	f7ff ff11 	bl	800117c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <LoRA_begin+0xa4>)
 800135c:	f7ff ff16 	bl	800118c <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff fedc 	bl	8001120 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	200e      	movs	r0, #14
 800136c:	f7ff fed8 	bl	8001120 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001370:	200c      	movs	r0, #12
 8001372:	f7ff fead 	bl	80010d0 <LoRA_Read_Register>
 8001376:	4603      	mov	r3, r0
 8001378:	f043 0303 	orr.w	r3, r3, #3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	200c      	movs	r0, #12
 8001382:	f7ff fecd 	bl	8001120 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001386:	2104      	movs	r1, #4
 8001388:	2026      	movs	r0, #38	; 0x26
 800138a:	f7ff fec9 	bl	8001120 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800138e:	2011      	movs	r0, #17
 8001390:	f7ff ff74 	bl	800127c <LoRA_setTxPower>

}
 8001394:	bf00      	nop
 8001396:	3770      	adds	r7, #112	; 0x70
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58020c00 	.word	0x58020c00
 80013a0:	58020000 	.word	0x58020000
 80013a4:	0801b428 	.word	0x0801b428
 80013a8:	33bca100 	.word	0x33bca100

080013ac <LoRA_parsePacket>:
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}


int LoRA_parsePacket(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80013b6:	2012      	movs	r0, #18
 80013b8:	f7ff fe8a 	bl	80010d0 <LoRA_Read_Register>
 80013bc:	4603      	mov	r3, r0
 80013be:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80013c0:	f7ff ff90 	bl	80012e4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4619      	mov	r1, r3
 80013ca:	2012      	movs	r0, #18
 80013cc:	f7ff fea8 	bl	8001120 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d014      	beq.n	8001404 <LoRA_parsePacket+0x58>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10f      	bne.n	8001404 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80013e4:	2013      	movs	r0, #19
 80013e6:	f7ff fe73 	bl	80010d0 <LoRA_Read_Register>
 80013ea:	4603      	mov	r3, r0
 80013ec:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80013ee:	2010      	movs	r0, #16
 80013f0:	f7ff fe6e 	bl	80010d0 <LoRA_Read_Register>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4619      	mov	r1, r3
 80013f8:	200d      	movs	r0, #13
 80013fa:	f7ff fe91 	bl	8001120 <LoRA_Write_Register>
		LoRA_idle();
 80013fe:	f7ff ff03 	bl	8001208 <LoRA_idle>
 8001402:	e00d      	b.n	8001420 <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fe63 	bl	80010d0 <LoRA_Read_Register>
 800140a:	4603      	mov	r3, r0
 800140c:	2b86      	cmp	r3, #134	; 0x86
 800140e:	d007      	beq.n	8001420 <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001410:	2100      	movs	r1, #0
 8001412:	200d      	movs	r0, #13
 8001414:	f7ff fe84 	bl	8001120 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001418:	2186      	movs	r1, #134	; 0x86
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fe80 	bl	8001120 <LoRA_Write_Register>
	}
	return packetLenght;
 8001420:	687b      	ldr	r3, [r7, #4]

}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2102      	movs	r1, #2
 8001438:	4827      	ldr	r0, [pc, #156]	; (80014d8 <disarm+0xac>)
 800143a:	f006 fd3f 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2104      	movs	r1, #4
 8001442:	4825      	ldr	r0, [pc, #148]	; (80014d8 <disarm+0xac>)
 8001444:	f006 fd3a 	bl	8007ebc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2102      	movs	r1, #2
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <disarm+0xb0>)
 800144e:	f006 fd35 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	4821      	ldr	r0, [pc, #132]	; (80014e0 <disarm+0xb4>)
 800145a:	f006 fd2f 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	481e      	ldr	r0, [pc, #120]	; (80014e0 <disarm+0xb4>)
 8001466:	f006 fd29 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001470:	481b      	ldr	r0, [pc, #108]	; (80014e0 <disarm+0xb4>)
 8001472:	f006 fd23 	bl	8007ebc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2102      	movs	r1, #2
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <disarm+0xb8>)
 800147c:	f006 fd1e 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <disarm+0xbc>)
 8001488:	f006 fd18 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <disarm+0xbc>)
 8001494:	f006 fd12 	bl	8007ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <disarm+0xbc>)
 80014a0:	f006 fd0c 	bl	8007ebc <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <disarm+0xc0>)
 80014a6:	22ff      	movs	r2, #255	; 0xff
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <disarm+0xc0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <disarm+0xc0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80014b6:	f7ff fc53 	bl	8000d60 <setLEDs>

  strcpy(state,"DISARMED");
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <disarm+0xc4>)
 80014be:	461a      	mov	r2, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	cb03      	ldmia	r3!, {r0, r1}
 80014c4:	6010      	str	r0, [r2, #0]
 80014c6:	6051      	str	r1, [r2, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	7213      	strb	r3, [r2, #8]
  return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	58020000 	.word	0x58020000
 80014dc:	58020400 	.word	0x58020400
 80014e0:	58021400 	.word	0x58021400
 80014e4:	58021800 	.word	0x58021800
 80014e8:	58021000 	.word	0x58021000
 80014ec:	24000cc8 	.word	0x24000cc8
 80014f0:	0801b42c 	.word	0x0801b42c

080014f4 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 80014fe:	f7ff ff55 	bl	80013ac <LoRA_parsePacket>
 8001502:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	dc01      	bgt.n	8001510 <recv_packet+0x1c>
  {
    return 0;
 800150c:	2300      	movs	r3, #0
 800150e:	e01c      	b.n	800154a <recv_packet+0x56>
  }
  if(packet_length){
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d018      	beq.n	8001548 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e00a      	b.n	8001532 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	18d4      	adds	r4, r2, r3
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fdd4 	bl	80010d0 <LoRA_Read_Register>
 8001528:	4603      	mov	r3, r0
 800152a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf0      	blt.n	800151c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	e000      	b.n	800154a <recv_packet+0x56>
  }
  else{
    return 0;
 8001548:	2300      	movs	r3, #0
  }
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	0000      	movs	r0, r0
 8001554:	0000      	movs	r0, r0
	...

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001560:	4bc9      	ldr	r3, [pc, #804]	; (8001888 <main+0x330>)
 8001562:	f607 248c 	addw	r4, r7, #2700	; 0xa8c
 8001566:	461d      	mov	r5, r3
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001570:	c403      	stmia	r4!, {r0, r1}
 8001572:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f002 f95e 	bl	8003834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f99e 	bl	80018b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800157c:	f000 fa18 	bl	80019b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001580:	f000 ff7c 	bl	800247c <MX_GPIO_Init>
  MX_DMA_Init();
 8001584:	f000 ff1a 	bl	80023bc <MX_DMA_Init>
  MX_SPI3_Init();
 8001588:	f000 fc98 	bl	8001ebc <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800158c:	f000 fb28 	bl	8001be0 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001590:	f000 fec8 	bl	8002324 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001594:	f000 fa3e 	bl	8001a14 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001598:	f000 fda2 	bl	80020e0 <MX_TIM4_Init>
  MX_ADC3_Init();
 800159c:	f000 fab2 	bl	8001b04 <MX_ADC3_Init>
  MX_SPI2_Init();
 80015a0:	f000 fc36 	bl	8001e10 <MX_SPI2_Init>
  MX_I2C2_Init();
 80015a4:	f000 fb80 	bl	8001ca8 <MX_I2C2_Init>
  MX_TIM2_Init();
 80015a8:	f000 fcde 	bl	8001f68 <MX_TIM2_Init>
  MX_TIM5_Init();
 80015ac:	f000 fe14 	bl	80021d8 <MX_TIM5_Init>
  MX_TIM3_Init();
 80015b0:	f000 fd32 	bl	8002018 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80015b4:	f014 ff2e 	bl	8016414 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80015b8:	f000 fbd4 	bl	8001d64 <MX_SPI1_Init>
  MX_UART4_Init();
 80015bc:	f000 fe66 	bl	800228c <MX_UART4_Init>
  MX_FATFS_Init();
 80015c0:	f012 fcbc 	bl	8013f3c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80015c4:	f000 fbb0 	bl	8001d28 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80015c8:	2332      	movs	r3, #50	; 0x32
 80015ca:	f8c7 3af4 	str.w	r3, [r7, #2804]	; 0xaf4
	const double SPEED = 2.0/2000;
 80015ce:	a3ac      	add	r3, pc, #688	; (adr r3, 8001880 <main+0x328>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80015d8:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4ba6      	ldr	r3, [pc, #664]	; (800188c <main+0x334>)
 80015f2:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80015f6:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001602:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8001606:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800160a:	213c      	movs	r1, #60	; 0x3c
 800160c:	2010      	movs	r0, #16
 800160e:	f7ff fa9d 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001612:	2130      	movs	r1, #48	; 0x30
 8001614:	2011      	movs	r0, #17
 8001616:	f7ff fa99 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800161a:	2104      	movs	r1, #4
 800161c:	2013      	movs	r0, #19
 800161e:	f7ff fa95 	bl	8000b4c <LG2_Write_Register>

	HAL_Delay(3000);
 8001622:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001626:	f002 f997 	bl	8003958 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800162a:	21bf      	movs	r1, #191	; 0xbf
 800162c:	201c      	movs	r0, #28
 800162e:	f7ff fa39 	bl	8000aa4 <HG2_Write_Register>
	HAL_Delay(2);
 8001632:	2002      	movs	r0, #2
 8001634:	f002 f990 	bl	8003958 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001638:	2158      	movs	r1, #88	; 0x58
 800163a:	201b      	movs	r0, #27
 800163c:	f7ff fa32 	bl	8000aa4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001640:	21d8      	movs	r1, #216	; 0xd8
 8001642:	201b      	movs	r0, #27
 8001644:	f7ff fa2e 	bl	8000aa4 <HG2_Write_Register>

	float rotZ = 0;
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	f607 22cc 	addw	r2, r7, #2764	; 0xacc
 8001650:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3ac8 	str.w	r3, [r7, #2760]	; 0xac8

	float calOmegaX = 0;
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8001660:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	f607 22fc 	addw	r2, r7, #2812	; 0xafc
 800166a:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f607 22f8 	addw	r2, r7, #2808	; 0xaf8
 8001674:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 800167c:	e02e      	b.n	80016dc <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 800167e:	f7ff fa8d 	bl	8000b9c <LG2_Get_Gyro_X>
 8001682:	eeb0 7a40 	vmov.f32	s14, s0
 8001686:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001692:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001696:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800169a:	f7ff faaf 	bl	8000bfc <LG2_Get_Gyro_Y>
 800169e:	eeb0 7a40 	vmov.f32	s14, s0
 80016a2:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ae:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 80016b2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80016b6:	f7ff fad3 	bl	8000c60 <LG2_Get_Gyro_Z>
 80016ba:	eeb0 7a40 	vmov.f32	s14, s0
 80016be:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ca:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80016ce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80016d2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80016d6:	3301      	adds	r3, #1
 80016d8:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 80016dc:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80016e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016e4:	dbcb      	blt.n	800167e <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80016e6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001890 <main+0x338>
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80016fa:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80016fe:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001890 <main+0x338>
 800170a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800170e:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8001712:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001716:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800171a:	ed93 7a00 	vldr	s14, [r3]
 800171e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001890 <main+0x338>
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800172a:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800172e:	2201      	movs	r2, #1
 8001730:	2101      	movs	r1, #1
 8001732:	4858      	ldr	r0, [pc, #352]	; (8001894 <main+0x33c>)
 8001734:	f006 fbc2 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001738:	20c8      	movs	r0, #200	; 0xc8
 800173a:	f002 f90d 	bl	8003958 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	4854      	ldr	r0, [pc, #336]	; (8001894 <main+0x33c>)
 8001744:	f006 fbba 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001748:	20c8      	movs	r0, #200	; 0xc8
 800174a:	f002 f905 	bl	8003958 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	2101      	movs	r1, #1
 8001752:	4850      	ldr	r0, [pc, #320]	; (8001894 <main+0x33c>)
 8001754:	f006 fbb2 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f002 f8fd 	bl	8003958 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2104      	movs	r1, #4
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <main+0x340>)
 8001764:	f006 fbaa 	bl	8007ebc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	2108      	movs	r1, #8
 800176c:	484a      	ldr	r0, [pc, #296]	; (8001898 <main+0x340>)
 800176e:	f006 fba5 	bl	8007ebc <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001772:	2100      	movs	r1, #0
 8001774:	4849      	ldr	r0, [pc, #292]	; (800189c <main+0x344>)
 8001776:	f00d fdef 	bl	800f358 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800177a:	2104      	movs	r1, #4
 800177c:	4847      	ldr	r0, [pc, #284]	; (800189c <main+0x344>)
 800177e:	f00d fdeb 	bl	800f358 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001782:	2108      	movs	r1, #8
 8001784:	4845      	ldr	r0, [pc, #276]	; (800189c <main+0x344>)
 8001786:	f00d fde7 	bl	800f358 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800178a:	210c      	movs	r1, #12
 800178c:	4843      	ldr	r0, [pc, #268]	; (800189c <main+0x344>)
 800178e:	f00d fde3 	bl	800f358 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001792:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80018a0 <main+0x348>
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fa9a 	bl	8000cd0 <setServo>
    setServo(2, 180);
 800179c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80018a4 <main+0x34c>
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7ff fa95 	bl	8000cd0 <setServo>
    setServo(3, 0);
 80017a6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80018a8 <main+0x350>
 80017aa:	2003      	movs	r0, #3
 80017ac:	f7ff fa90 	bl	8000cd0 <setServo>
    setServo(4, 45);
 80017b0:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80018ac <main+0x354>
 80017b4:	2004      	movs	r0, #4
 80017b6:	f7ff fa8b 	bl	8000cd0 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 80017ba:	483d      	ldr	r0, [pc, #244]	; (80018b0 <main+0x358>)
 80017bc:	f7ff fda2 	bl	8001304 <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
	long last_packet = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
	int ARMED = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80017d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80017d6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
  char state[MAX_PAYLOAD_LENGHT] = "";
 80017e4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80017e8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	3304      	adds	r3, #4
 80017f2:	22f6      	movs	r2, #246	; 0xf6
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f016 fa99 	bl	8017d2e <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
  int packets_streamed = 50;
 8001802:	2332      	movs	r3, #50	; 0x32
 8001804:	f8c7 3ab0 	str.w	r3, [r7, #2736]	; 0xab0
  int packetId;
  int have_recieved_anything = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
  char communication_state[50] = "SENDING RELIABLE";
 800180e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001812:	f6a3 16fc 	subw	r6, r3, #2556	; 0x9fc
 8001816:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <main+0x35c>)
 8001818:	4634      	mov	r4, r6
 800181a:	461d      	mov	r5, r3
 800181c:	6828      	ldr	r0, [r5, #0]
 800181e:	6869      	ldr	r1, [r5, #4]
 8001820:	68aa      	ldr	r2, [r5, #8]
 8001822:	68eb      	ldr	r3, [r5, #12]
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	7c2b      	ldrb	r3, [r5, #16]
 8001828:	7023      	strb	r3, [r4, #0]
 800182a:	f106 0311 	add.w	r3, r6, #17
 800182e:	2221      	movs	r2, #33	; 0x21
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f016 fa7b 	bl	8017d2e <memset>
  uint32_t previousTime = HAL_GetTick();
 8001838:	f002 f882 	bl	8003940 <HAL_GetTick>
 800183c:	f8c7 0aa8 	str.w	r0, [r7, #2728]	; 0xaa8
  disarm(state);
 8001840:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fdf1 	bl	800142c <disarm>
  LoRA_begin(868000000);
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <main+0x358>)
 800184c:	f7ff fd5a 	bl	8001304 <LoRA_begin>

while (1) {
	if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001850:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001854:	21fa      	movs	r1, #250	; 0xfa
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe4c 	bl	80014f4 <recv_packet>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f6      	beq.n	8001850 <main+0x2f8>
	{
		CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001862:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fda2 	bl	80003b0 <strlen>
 800186c:	4602      	mov	r2, r0
 800186e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f014 fea3 	bl	80165c0 <CDC_Transmit_HS>
	if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800187a:	e7e9      	b.n	8001850 <main+0x2f8>
 800187c:	f3af 8000 	nop.w
 8001880:	d2f1a9fc 	.word	0xd2f1a9fc
 8001884:	3f50624d 	.word	0x3f50624d
 8001888:	0801b478 	.word	0x0801b478
 800188c:	3ff00000 	.word	0x3ff00000
 8001890:	43fa0000 	.word	0x43fa0000
 8001894:	58020c00 	.word	0x58020c00
 8001898:	58021800 	.word	0x58021800
 800189c:	240012e0 	.word	0x240012e0
 80018a0:	42b40000 	.word	0x42b40000
 80018a4:	43340000 	.word	0x43340000
 80018a8:	00000000 	.word	0x00000000
 80018ac:	42340000 	.word	0x42340000
 80018b0:	33bca100 	.word	0x33bca100
 80018b4:	0801b494 	.word	0x0801b494

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09c      	sub	sp, #112	; 0x70
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	224c      	movs	r2, #76	; 0x4c
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f016 fa31 	bl	8017d2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2220      	movs	r2, #32
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f016 fa2b 	bl	8017d2e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018d8:	2002      	movs	r0, #2
 80018da:	f007 fee9 	bl	80096b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <SystemClock_Config+0xf4>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018ea:	4a30      	ldr	r2, [pc, #192]	; (80019ac <SystemClock_Config+0xf4>)
 80018ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <SystemClock_Config+0xf4>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018fe:	bf00      	nop
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <SystemClock_Config+0xf4>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190c:	d1f8      	bne.n	8001900 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800190e:	2323      	movs	r3, #35	; 0x23
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001918:	2301      	movs	r3, #1
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800192c:	2304      	movs	r3, #4
 800192e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001930:	230c      	movs	r3, #12
 8001932:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001938:	230c      	movs	r3, #12
 800193a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800193c:	2302      	movs	r3, #2
 800193e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001940:	230c      	movs	r3, #12
 8001942:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001944:	2300      	movs	r3, #0
 8001946:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4618      	mov	r0, r3
 8001952:	f007 fef7 	bl	8009744 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800195c:	f000 ff02 	bl	8002764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	233f      	movs	r3, #63	; 0x3f
 8001962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001964:	2303      	movs	r3, #3
 8001966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800196c:	2308      	movs	r3, #8
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001974:	2340      	movs	r3, #64	; 0x40
 8001976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800197e:	2340      	movs	r3, #64	; 0x40
 8001980:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f008 fab6 	bl	8009ef8 <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001992:	f000 fee7 	bl	8002764 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001996:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f008 fc61 	bl	800a264 <HAL_RCC_MCOConfig>
}
 80019a2:	bf00      	nop
 80019a4:	3770      	adds	r7, #112	; 0x70
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	58024800 	.word	0x58024800

080019b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0ae      	sub	sp, #184	; 0xb8
 80019b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	22b8      	movs	r2, #184	; 0xb8
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f016 f9b6 	bl	8017d2e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80019c2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80019d2:	230c      	movs	r3, #12
 80019d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80019d6:	2304      	movs	r3, #4
 80019d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80019da:	2302      	movs	r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80019e2:	23c0      	movs	r3, #192	; 0xc0
 80019e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80019ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4618      	mov	r0, r3
 80019fe:	f008 fe71 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001a08:	f000 feac 	bl	8002764 <Error_Handler>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	37b8      	adds	r7, #184	; 0xb8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2224      	movs	r2, #36	; 0x24
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f016 f97e 	bl	8017d2e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <MX_ADC1_Init+0xe8>)
 8001a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a3a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001a3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a92:	4819      	ldr	r0, [pc, #100]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001a94:	f002 f9e0 	bl	8003e58 <HAL_ADC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a9e:	f000 fe61 	bl	8002764 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4812      	ldr	r0, [pc, #72]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001aae:	f003 fa1b 	bl	8004ee8 <HAL_ADCEx_MultiModeConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001ab8:	f000 fe54 	bl	8002764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_ADC1_Init+0xec>)
 8001abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ac8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001acc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_ADC1_Init+0xe4>)
 8001ae2:	f002 fbc1 	bl	8004268 <HAL_ADC_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001aec:	f000 fe3a 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	; 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000d70 	.word	0x24000d70
 8001afc:	40022000 	.word	0x40022000
 8001b00:	2a000400 	.word	0x2a000400

08001b04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2224      	movs	r2, #36	; 0x24
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f016 f90c 	bl	8017d2e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <MX_ADC3_Init+0xd4>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b1e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001b22:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b38:	2204      	movs	r2, #4
 8001b3a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b8a:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001b8c:	f002 f964 	bl	8003e58 <HAL_ADC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001b96:	f000 fde5 	bl	8002764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_ADC3_Init+0xd8>)
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b9e:	2306      	movs	r3, #6
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ba6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001baa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bac:	2304      	movs	r3, #4
 8001bae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_ADC3_Init+0xd0>)
 8001bbe:	f002 fb53 	bl	8004268 <HAL_ADC_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001bc8:	f000 fdcc 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	24000de0 	.word	0x24000de0
 8001bd8:	58026000 	.word	0x58026000
 8001bdc:	04300002 	.word	0x04300002

08001be0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001be6:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <MX_FDCAN3_Init+0xc4>)
 8001be8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c16:	2202      	movs	r2, #2
 8001c18:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_FDCAN3_Init+0xc0>)
 8001c8e:	f005 fbf1 	bl	8007474 <HAL_FDCAN_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001c98:	f000 fd64 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	24000f40 	.word	0x24000f40
 8001ca4:	4000d400 	.word	0x4000d400

08001ca8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <MX_I2C2_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <MX_I2C2_Init+0x7c>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001ce4:	f006 f904 	bl	8007ef0 <HAL_I2C_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cee:	f000 fd39 	bl	8002764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001cf6:	f006 f98b 	bl	8008010 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d00:	f000 fd30 	bl	8002764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_I2C2_Init+0x74>)
 8001d08:	f006 f9cd 	bl	80080a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 fd27 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	24000fe0 	.word	0x24000fe0
 8001d20:	40005800 	.word	0x40005800
 8001d24:	20303e5d 	.word	0x20303e5d

08001d28 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <MX_SDMMC2_SD_Init+0x38>)
 8001d30:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d44:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <MX_SDMMC2_SD_Init+0x34>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	24001034 	.word	0x24001034
 8001d60:	48022400 	.word	0x48022400

08001d64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <MX_SPI1_Init+0xa8>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d7e:	2207      	movs	r2, #7
 8001d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001d98:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_SPI1_Init+0xa4>)
 8001df6:	f00c fcbf 	bl	800e778 <HAL_SPI_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001e00:	f000 fcb0 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	240010b0 	.word	0x240010b0
 8001e0c:	40013000 	.word	0x40013000

08001e10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <MX_SPI2_Init+0xa8>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e44:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <MX_SPI2_Init+0xa4>)
 8001ea2:	f00c fc69 	bl	800e778 <HAL_SPI_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001eac:	f000 fc5a 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	24001138 	.word	0x24001138
 8001eb8:	40003800 	.word	0x40003800

08001ebc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <MX_SPI3_Init+0xa8>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ee8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ef0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ef4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_SPI3_Init+0xa4>)
 8001f4e:	f00c fc13 	bl	800e778 <HAL_SPI_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001f58:	f000 fc04 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	240011c0 	.word	0x240011c0
 8001f64:	40003c00 	.word	0x40003c00

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_TIM2_Init+0xac>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fa2:	225a      	movs	r2, #90	; 0x5a
 8001fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fb4:	f00d f979 	bl	800f2aa <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 fbd1 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_TIM2_Init+0xac>)
 8001fd2:	f00e fbff 	bl	80107d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001fdc:	f000 fbc2 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM2_Init+0xac>)
 8001ff8:	f00d fe1e 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002002:	f000 fbaf 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM2_Init+0xac>)
 8002008:	f001 f8a0 	bl	800314c <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	24001248 	.word	0x24001248

08002018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <MX_TIM3_Init+0xc0>)
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <MX_TIM3_Init+0xc4>)
 8002040:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <MX_TIM3_Init+0xc0>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <MX_TIM3_Init+0xc0>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <MX_TIM3_Init+0xc0>)
 8002050:	225a      	movs	r2, #90	; 0x5a
 8002052:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <MX_TIM3_Init+0xc0>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <MX_TIM3_Init+0xc0>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002060:	481d      	ldr	r0, [pc, #116]	; (80020d8 <MX_TIM3_Init+0xc0>)
 8002062:	f00d f922 	bl	800f2aa <HAL_TIM_PWM_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800206c:	f000 fb7a 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4816      	ldr	r0, [pc, #88]	; (80020d8 <MX_TIM3_Init+0xc0>)
 8002080:	f00e fba8 	bl	80107d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800208a:	f000 fb6b 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208e:	2360      	movs	r3, #96	; 0x60
 8002090:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <MX_TIM3_Init+0xc0>)
 80020a6:	f00d fdc7 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80020b0:	f000 fb58 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	2204      	movs	r2, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <MX_TIM3_Init+0xc0>)
 80020bc:	f00d fdbc 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020c6:	f000 fb4d 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <MX_TIM3_Init+0xc0>)
 80020cc:	f001 f83e 	bl	800314c <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	24001294 	.word	0x24001294
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	463b      	mov	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <MX_TIM4_Init+0xf4>)
 8002108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800210c:	221c      	movs	r2, #28
 800210e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002118:	f242 720f 	movw	r2, #9999	; 0x270f
 800211c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800212a:	4829      	ldr	r0, [pc, #164]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800212c:	f00d f8bd 	bl	800f2aa <HAL_TIM_PWM_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002136:	f000 fb15 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4821      	ldr	r0, [pc, #132]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800214a:	f00e fb43 	bl	80107d4 <HAL_TIMEx_MasterConfigSynchronization>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002154:	f000 fb06 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002158:	2360      	movs	r3, #96	; 0x60
 800215a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	4619      	mov	r1, r3
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002170:	f00d fd62 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800217a:	f000 faf3 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	2204      	movs	r2, #4
 8002182:	4619      	mov	r1, r3
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_TIM4_Init+0xf0>)
 8002186:	f00d fd57 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002190:	f000 fae8 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	2208      	movs	r2, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM4_Init+0xf0>)
 800219c:	f00d fd4c 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80021a6:	f000 fadd 	bl	8002764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	220c      	movs	r2, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM4_Init+0xf0>)
 80021b2:	f00d fd41 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80021bc:	f000 fad2 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM4_Init+0xf0>)
 80021c2:	f000 ffc3 	bl	800314c <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	240012e0 	.word	0x240012e0
 80021d4:	40000800 	.word	0x40000800

080021d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ea:	463b      	mov	r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MX_TIM5_Init+0xac>)
 80021fe:	4a22      	ldr	r2, [pc, #136]	; (8002288 <MX_TIM5_Init+0xb0>)
 8002200:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <MX_TIM5_Init+0xac>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_TIM5_Init+0xac>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MX_TIM5_Init+0xac>)
 8002210:	225a      	movs	r2, #90	; 0x5a
 8002212:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_TIM5_Init+0xac>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_TIM5_Init+0xac>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002220:	4818      	ldr	r0, [pc, #96]	; (8002284 <MX_TIM5_Init+0xac>)
 8002222:	f00d f842 	bl	800f2aa <HAL_TIM_PWM_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800222c:	f000 fa9a 	bl	8002764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_TIM5_Init+0xac>)
 8002240:	f00e fac8 	bl	80107d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800224a:	f000 fa8b 	bl	8002764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224e:	2360      	movs	r3, #96	; 0x60
 8002250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800225e:	463b      	mov	r3, r7
 8002260:	220c      	movs	r2, #12
 8002262:	4619      	mov	r1, r3
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <MX_TIM5_Init+0xac>)
 8002266:	f00d fce7 	bl	800fc38 <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002270:	f000 fa78 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <MX_TIM5_Init+0xac>)
 8002276:	f000 ff69 	bl	800314c <HAL_TIM_MspPostInit>

}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2400132c 	.word	0x2400132c
 8002288:	40000c00 	.word	0x40000c00

0800228c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <MX_UART4_Init+0x90>)
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <MX_UART4_Init+0x94>)
 8002294:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <MX_UART4_Init+0x90>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_UART4_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_UART4_Init+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_UART4_Init+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_UART4_Init+0x90>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_UART4_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_UART4_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_UART4_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_UART4_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_UART4_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022d4:	4811      	ldr	r0, [pc, #68]	; (800231c <MX_UART4_Init+0x90>)
 80022d6:	f00e fb37 	bl	8010948 <HAL_UART_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80022e0:	f000 fa40 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e4:	2100      	movs	r1, #0
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_UART4_Init+0x90>)
 80022e8:	f00f fc3d 	bl	8011b66 <HAL_UARTEx_SetTxFifoThreshold>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80022f2:	f000 fa37 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f6:	2100      	movs	r1, #0
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <MX_UART4_Init+0x90>)
 80022fa:	f00f fc72 	bl	8011be2 <HAL_UARTEx_SetRxFifoThreshold>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002304:	f000 fa2e 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <MX_UART4_Init+0x90>)
 800230a:	f00f fbf3 	bl	8011af4 <HAL_UARTEx_DisableFifoMode>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002314:	f000 fa26 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	240015d0 	.word	0x240015d0
 8002320:	40004c00 	.word	0x40004c00

08002324 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <MX_USART6_UART_Init+0x94>)
 800232c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800236c:	4811      	ldr	r0, [pc, #68]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 800236e:	f00e faeb 	bl	8010948 <HAL_UART_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002378:	f000 f9f4 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002380:	f00f fbf1 	bl	8011b66 <HAL_UARTEx_SetTxFifoThreshold>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800238a:	f000 f9eb 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4808      	ldr	r0, [pc, #32]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 8002392:	f00f fc26 	bl	8011be2 <HAL_UARTEx_SetRxFifoThreshold>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800239c:	f000 f9e2 	bl	8002764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <MX_USART6_UART_Init+0x90>)
 80023a2:	f00f fba7 	bl	8011af4 <HAL_UARTEx_DisableFifoMode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80023ac:	f000 f9da 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	24001664 	.word	0x24001664
 80023b8:	40011400 	.word	0x40011400

080023bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <MX_DMA_Init+0xbc>)
 80023c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <MX_DMA_Init+0xbc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <MX_DMA_Init+0xbc>)
 80023d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <MX_DMA_Init+0xbc>)
 80023e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <MX_DMA_Init+0xbc>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <MX_DMA_Init+0xbc>)
 80023f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	200b      	movs	r0, #11
 8002404:	f002 ff2d 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002408:	200b      	movs	r0, #11
 800240a:	f002 ff44 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	200c      	movs	r0, #12
 8002414:	f002 ff25 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002418:	200c      	movs	r0, #12
 800241a:	f002 ff3c 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	200d      	movs	r0, #13
 8002424:	f002 ff1d 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002428:	200d      	movs	r0, #13
 800242a:	f002 ff34 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	200e      	movs	r0, #14
 8002434:	f002 ff15 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002438:	200e      	movs	r0, #14
 800243a:	f002 ff2c 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	200f      	movs	r0, #15
 8002444:	f002 ff0d 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002448:	200f      	movs	r0, #15
 800244a:	f002 ff24 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2010      	movs	r0, #16
 8002454:	f002 ff05 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002458:	2010      	movs	r0, #16
 800245a:	f002 ff1c 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2046      	movs	r0, #70	; 0x46
 8002464:	f002 fefd 	bl	8005262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002468:	2046      	movs	r0, #70	; 0x46
 800246a:	f002 ff14 	bl	8005296 <HAL_NVIC_EnableIRQ>

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	58024400 	.word	0x58024400

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	4bac      	ldr	r3, [pc, #688]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4aaa      	ldr	r2, [pc, #680]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4ba8      	ldr	r3, [pc, #672]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024b0:	4ba4      	ldr	r3, [pc, #656]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	4aa3      	ldr	r2, [pc, #652]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ce:	4b9d      	ldr	r3, [pc, #628]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	4a9b      	ldr	r2, [pc, #620]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024de:	4b99      	ldr	r3, [pc, #612]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ec:	4b95      	ldr	r3, [pc, #596]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	4a94      	ldr	r2, [pc, #592]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fc:	4b91      	ldr	r3, [pc, #580]	; (8002744 <MX_GPIO_Init+0x2c8>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b8e      	ldr	r3, [pc, #568]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a8c      	ldr	r2, [pc, #560]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	4b86      	ldr	r3, [pc, #536]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	4a85      	ldr	r2, [pc, #532]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002538:	4b82      	ldr	r3, [pc, #520]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002546:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	4a7d      	ldr	r2, [pc, #500]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800254e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002556:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002564:	4b77      	ldr	r3, [pc, #476]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <MX_GPIO_Init+0x2c8>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002574:	4b73      	ldr	r3, [pc, #460]	; (8002744 <MX_GPIO_Init+0x2c8>)
 8002576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f241 5104 	movw	r1, #5380	; 0x1504
 8002588:	486f      	ldr	r0, [pc, #444]	; (8002748 <MX_GPIO_Init+0x2cc>)
 800258a:	f005 fc97 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f248 0106 	movw	r1, #32774	; 0x8006
 8002594:	486d      	ldr	r0, [pc, #436]	; (800274c <MX_GPIO_Init+0x2d0>)
 8002596:	f005 fc91 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	2130      	movs	r1, #48	; 0x30
 800259e:	486c      	ldr	r0, [pc, #432]	; (8002750 <MX_GPIO_Init+0x2d4>)
 80025a0:	f005 fc8c 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2102      	movs	r1, #2
 80025a8:	486a      	ldr	r0, [pc, #424]	; (8002754 <MX_GPIO_Init+0x2d8>)
 80025aa:	f005 fc87 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80025b4:	4868      	ldr	r0, [pc, #416]	; (8002758 <MX_GPIO_Init+0x2dc>)
 80025b6:	f005 fc81 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80025ba:	2200      	movs	r2, #0
 80025bc:	210e      	movs	r1, #14
 80025be:	4867      	ldr	r0, [pc, #412]	; (800275c <MX_GPIO_Init+0x2e0>)
 80025c0:	f005 fc7c 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f240 3101 	movw	r1, #769	; 0x301
 80025ca:	4865      	ldr	r0, [pc, #404]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80025cc:	f005 fc76 	bl	8007ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80025d0:	f241 5304 	movw	r3, #5380	; 0x1504
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	4857      	ldr	r0, [pc, #348]	; (8002748 <MX_GPIO_Init+0x2cc>)
 80025ea:	f005 faa7 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80025ee:	f248 0306 	movw	r3, #32774	; 0x8006
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002604:	4619      	mov	r1, r3
 8002606:	4851      	ldr	r0, [pc, #324]	; (800274c <MX_GPIO_Init+0x2d0>)
 8002608:	f005 fa98 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800260c:	2330      	movs	r3, #48	; 0x30
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	484b      	ldr	r0, [pc, #300]	; (8002750 <MX_GPIO_Init+0x2d4>)
 8002624:	f005 fa8a 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002628:	2302      	movs	r3, #2
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	2301      	movs	r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	4845      	ldr	r0, [pc, #276]	; (8002754 <MX_GPIO_Init+0x2d8>)
 8002640:	f005 fa7c 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002644:	2304      	movs	r3, #4
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	4619      	mov	r1, r3
 8002656:	483f      	ldr	r0, [pc, #252]	; (8002754 <MX_GPIO_Init+0x2d8>)
 8002658:	f005 fa70 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800265c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	2301      	movs	r3, #1
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2300      	movs	r3, #0
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800266e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002672:	4619      	mov	r1, r3
 8002674:	4838      	ldr	r0, [pc, #224]	; (8002758 <MX_GPIO_Init+0x2dc>)
 8002676:	f005 fa61 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800267a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002684:	2301      	movs	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	4832      	ldr	r0, [pc, #200]	; (8002758 <MX_GPIO_Init+0x2dc>)
 8002690:	f005 fa54 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002694:	2301      	movs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	482d      	ldr	r0, [pc, #180]	; (800275c <MX_GPIO_Init+0x2e0>)
 80026a8:	f005 fa48 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80026ac:	230e      	movs	r3, #14
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c0:	4619      	mov	r1, r3
 80026c2:	4826      	ldr	r0, [pc, #152]	; (800275c <MX_GPIO_Init+0x2e0>)
 80026c4:	f005 fa3a 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80026c8:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	481a      	ldr	r0, [pc, #104]	; (8002748 <MX_GPIO_Init+0x2cc>)
 80026de:	f005 fa2d 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80026e2:	f240 3301 	movw	r3, #769	; 0x301
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	4819      	ldr	r0, [pc, #100]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80026fc:	f005 fa1e 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002700:	2310      	movs	r3, #16
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002710:	4619      	mov	r1, r3
 8002712:	4812      	ldr	r0, [pc, #72]	; (800275c <MX_GPIO_Init+0x2e0>)
 8002714:	f005 fa12 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800272a:	2300      	movs	r3, #0
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	; (800274c <MX_GPIO_Init+0x2d0>)
 8002736:	f005 fa01 	bl	8007b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800273a:	bf00      	nop
 800273c:	3738      	adds	r7, #56	; 0x38
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	58024400 	.word	0x58024400
 8002748:	58021000 	.word	0x58021000
 800274c:	58020000 	.word	0x58020000
 8002750:	58020800 	.word	0x58020800
 8002754:	58020400 	.word	0x58020400
 8002758:	58021400 	.word	0x58021400
 800275c:	58021800 	.word	0x58021800
 8002760:	58020c00 	.word	0x58020c00

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002768:	b672      	cpsid	i
}
 800276a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800276c:	e7fe      	b.n	800276c <Error_Handler+0x8>
	...

08002770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_MspInit+0x30>)
 8002778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_MspInit+0x30>)
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_MspInit+0x30>)
 8002788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	58024400 	.word	0x58024400

080027a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	; 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_ADC_MspInit+0x194>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d159      	bne.n	800287a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027cc:	4a5b      	ldr	r2, [pc, #364]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027d6:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ea:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f4:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_ADC_MspInit+0x198>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002802:	2301      	movs	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	484a      	ldr	r0, [pc, #296]	; (8002940 <HAL_ADC_MspInit+0x19c>)
 8002816:	f005 f991 	bl	8007b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 800281c:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_ADC_MspInit+0x1a4>)
 800281e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002822:	2209      	movs	r2, #9
 8002824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002838:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283a:	4b42      	ldr	r3, [pc, #264]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 800283c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002840:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002842:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 800284c:	2200      	movs	r2, #0
 800284e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002850:	4b3c      	ldr	r3, [pc, #240]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800285c:	4839      	ldr	r0, [pc, #228]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 800285e:	f002 fd35 	bl	80052cc <HAL_DMA_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002868:	f7ff ff7c 	bl	8002764 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a35      	ldr	r2, [pc, #212]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002870:	659a      	str	r2, [r3, #88]	; 0x58
 8002872:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_ADC_MspInit+0x1a0>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002878:	e059      	b.n	800292e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_ADC_MspInit+0x1a8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d154      	bne.n	800292e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_ADC_MspInit+0x198>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <HAL_ADC_MspInit+0x198>)
 800288c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_ADC_MspInit+0x198>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_ADC_MspInit+0x198>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_ADC_MspInit+0x198>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_ADC_MspInit+0x198>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80028c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80028c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028c8:	f001 f86a 	bl	80039a0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028ce:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_ADC_MspInit+0x1b0>)
 80028d0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028d4:	2273      	movs	r2, #115	; 0x73
 80028d6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ea:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 80028fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002902:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 8002906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800290a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002912:	480f      	ldr	r0, [pc, #60]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 8002914:	f002 fcda 	bl	80052cc <HAL_DMA_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800291e:	f7ff ff21 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 8002926:	659a      	str	r2, [r3, #88]	; 0x58
 8002928:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_ADC_MspInit+0x1ac>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	; 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	58024400 	.word	0x58024400
 8002940:	58020800 	.word	0x58020800
 8002944:	24000e50 	.word	0x24000e50
 8002948:	40020088 	.word	0x40020088
 800294c:	58026000 	.word	0x58026000
 8002950:	24000ec8 	.word	0x24000ec8
 8002954:	400204b8 	.word	0x400204b8

08002958 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0b8      	sub	sp, #224	; 0xe0
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	22b8      	movs	r2, #184	; 0xb8
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f015 f9d8 	bl	8017d2e <memset>
  if(hfdcan->Instance==FDCAN3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_FDCAN_MspInit+0xc4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d144      	bne.n	8002a12 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002988:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002994:	2300      	movs	r3, #0
 8002996:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f007 fea1 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80029a8:	f7ff fedc 	bl	8002764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_FDCAN_MspInit+0xc8>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <HAL_FDCAN_MspInit+0xcc>)
 8002a0e:	f005 f895 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002a12:	bf00      	nop
 8002a14:	37e0      	adds	r7, #224	; 0xe0
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	4000d400 	.word	0x4000d400
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58021400 	.word	0x58021400

08002a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b0b8      	sub	sp, #224	; 0xe0
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	22b8      	movs	r2, #184	; 0xb8
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f015 f970 	bl	8017d2e <memset>
  if(hi2c->Instance==I2C2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_I2C_MspInit+0xc4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d145      	bne.n	8002ae4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a58:	f04f 0208 	mov.w	r2, #8
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f007 fe38 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a7a:	f7ff fe73 	bl	8002764 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a84:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002a86:	f043 0320 	orr.w	r3, r3, #32
 8002a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa2:	2312      	movs	r3, #18
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002abe:	4619      	mov	r1, r3
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <HAL_I2C_MspInit+0xcc>)
 8002ac2:	f005 f83b 	bl	8007b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_I2C_MspInit+0xc8>)
 8002ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	37e0      	adds	r7, #224	; 0xe0
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40005800 	.word	0x40005800
 8002af0:	58024400 	.word	0x58024400
 8002af4:	58021400 	.word	0x58021400

08002af8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0ba      	sub	sp, #232	; 0xe8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b10:	f107 0318 	add.w	r3, r7, #24
 8002b14:	22b8      	movs	r2, #184	; 0xb8
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f015 f908 	bl	8017d2e <memset>
  if(hsd->Instance==SDMMC2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5d      	ldr	r2, [pc, #372]	; (8002c98 <HAL_SD_MspInit+0x1a0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f040 80b3 	bne.w	8002c90 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002b2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f007 fdd0 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002b4a:	f7ff fe0b 	bl	8002764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002b4e:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b54:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002b5e:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b72:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b7c:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b8a:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b90:	4a42      	ldr	r2, [pc, #264]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b9a:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_SD_MspInit+0x1a4>)
 8002b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba8:	2340      	movs	r3, #64	; 0x40
 8002baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bc0:	230b      	movs	r3, #11
 8002bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4834      	ldr	r0, [pc, #208]	; (8002ca0 <HAL_SD_MspInit+0x1a8>)
 8002bce:	f004 ffb5 	bl	8007b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bea:	230b      	movs	r3, #11
 8002bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	482a      	ldr	r0, [pc, #168]	; (8002ca0 <HAL_SD_MspInit+0x1a8>)
 8002bf8:	f004 ffa0 	bl	8007b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c16:	230b      	movs	r3, #11
 8002c18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <HAL_SD_MspInit+0x1ac>)
 8002c24:	f004 ff8a 	bl	8007b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c42:	230b      	movs	r3, #11
 8002c44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4815      	ldr	r0, [pc, #84]	; (8002ca4 <HAL_SD_MspInit+0x1ac>)
 8002c50:	f004 ff74 	bl	8007b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c6e:	230a      	movs	r3, #10
 8002c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <HAL_SD_MspInit+0x1ac>)
 8002c7c:	f004 ff5e 	bl	8007b3c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	207c      	movs	r0, #124	; 0x7c
 8002c86:	f002 faec 	bl	8005262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002c8a:	207c      	movs	r0, #124	; 0x7c
 8002c8c:	f002 fb03 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002c90:	bf00      	nop
 8002c92:	37e8      	adds	r7, #232	; 0xe8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	48022400 	.word	0x48022400
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58020c00 	.word	0x58020c00
 8002ca4:	58021800 	.word	0x58021800

08002ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a4f      	ldr	r2, [pc, #316]	; (8002e04 <HAL_SPI_MspInit+0x15c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12e      	bne.n	8002d28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cca:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d06:	23e0      	movs	r3, #224	; 0xe0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d16:	2305      	movs	r3, #5
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1e:	4619      	mov	r1, r3
 8002d20:	483a      	ldr	r0, [pc, #232]	; (8002e0c <HAL_SPI_MspInit+0x164>)
 8002d22:	f004 ff0b 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d26:	e068      	b.n	8002dfa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a38      	ldr	r2, [pc, #224]	; (8002e10 <HAL_SPI_MspInit+0x168>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d12f      	bne.n	8002d92 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d38:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d56:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d80:	2305      	movs	r3, #5
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4822      	ldr	r0, [pc, #136]	; (8002e14 <HAL_SPI_MspInit+0x16c>)
 8002d8c:	f004 fed6 	bl	8007b3c <HAL_GPIO_Init>
}
 8002d90:	e033      	b.n	8002dfa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <HAL_SPI_MspInit+0x170>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d12e      	bne.n	8002dfa <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_SPI_MspInit+0x160>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002dd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	2300      	movs	r3, #0
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dea:	2306      	movs	r3, #6
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	4809      	ldr	r0, [pc, #36]	; (8002e1c <HAL_SPI_MspInit+0x174>)
 8002df6:	f004 fea1 	bl	8007b3c <HAL_GPIO_Init>
}
 8002dfa:	bf00      	nop
 8002dfc:	3738      	adds	r7, #56	; 0x38
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40013000 	.word	0x40013000
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58020000 	.word	0x58020000
 8002e10:	40003800 	.word	0x40003800
 8002e14:	58020400 	.word	0x58020400
 8002e18:	40003c00 	.word	0x40003c00
 8002e1c:	58020800 	.word	0x58020800

08002e20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d15d      	bne.n	8002efe <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e48:	4a8c      	ldr	r2, [pc, #560]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e52:	4b8a      	ldr	r3, [pc, #552]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b86      	ldr	r3, [pc, #536]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e66:	4a85      	ldr	r2, [pc, #532]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e70:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4879      	ldr	r0, [pc, #484]	; (8003080 <HAL_TIM_PWM_MspInit+0x260>)
 8002e9a:	f004 fe4f 	bl	8007b3c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002e9e:	4b79      	ldr	r3, [pc, #484]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ea0:	4a79      	ldr	r2, [pc, #484]	; (8003088 <HAL_TIM_PWM_MspInit+0x268>)
 8002ea2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002ea4:	4b77      	ldr	r3, [pc, #476]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ea6:	2214      	movs	r2, #20
 8002ea8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002eac:	2240      	movs	r2, #64	; 0x40
 8002eae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb0:	4b74      	ldr	r3, [pc, #464]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ebc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ebe:	4b71      	ldr	r3, [pc, #452]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ec4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ecc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002ed4:	4b6b      	ldr	r3, [pc, #428]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eda:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002ee0:	4868      	ldr	r0, [pc, #416]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ee2:	f002 f9f3 	bl	80052cc <HAL_DMA_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002eec:	f7ff fc3a 	bl	8002764 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a64      	ldr	r2, [pc, #400]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ef6:	4a63      	ldr	r2, [pc, #396]	; (8003084 <HAL_TIM_PWM_MspInit+0x264>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002efc:	e119      	b.n	8003132 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a62      	ldr	r2, [pc, #392]	; (800308c <HAL_TIM_PWM_MspInit+0x26c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d16d      	bne.n	8002fe4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f08:	4b5c      	ldr	r3, [pc, #368]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f0e:	4a5b      	ldr	r2, [pc, #364]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f18:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002f26:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f28:	4a5a      	ldr	r2, [pc, #360]	; (8003094 <HAL_TIM_PWM_MspInit+0x274>)
 8002f2a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f2e:	2218      	movs	r2, #24
 8002f30:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f44:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f4c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f4e:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f54:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f62:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002f68:	4849      	ldr	r0, [pc, #292]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f6a:	f002 f9af 	bl	80052cc <HAL_DMA_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002f74:	f7ff fbf6 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a45      	ldr	r2, [pc, #276]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f7e:	4a44      	ldr	r2, [pc, #272]	; (8003090 <HAL_TIM_PWM_MspInit+0x270>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002f84:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002f86:	4a45      	ldr	r2, [pc, #276]	; (800309c <HAL_TIM_PWM_MspInit+0x27c>)
 8002f88:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002f8a:	4b43      	ldr	r3, [pc, #268]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002f8c:	2217      	movs	r2, #23
 8002f8e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f96:	4b40      	ldr	r3, [pc, #256]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002faa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002fc6:	4834      	ldr	r0, [pc, #208]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fc8:	f002 f980 	bl	80052cc <HAL_DMA_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002fd2:	f7ff fbc7 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24
 8002fdc:	4a2e      	ldr	r2, [pc, #184]	; (8003098 <HAL_TIM_PWM_MspInit+0x278>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fe2:	e0a6      	b.n	8003132 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <HAL_TIM_PWM_MspInit+0x280>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d15e      	bne.n	80030ac <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff4:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_TIM_PWM_MspInit+0x25c>)
 8003000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_TIM_PWM_MspInit+0x288>)
 8003010:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003014:	221f      	movs	r2, #31
 8003016:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800302a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 800302e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003032:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 800303e:	2200      	movs	r2, #0
 8003040:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800304e:	4815      	ldr	r0, [pc, #84]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003050:	f002 f93c 	bl	80052cc <HAL_DMA_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800305a:	f7ff fb83 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	201e      	movs	r0, #30
 8003070:	f002 f8f7 	bl	8005262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003074:	201e      	movs	r0, #30
 8003076:	f002 f90e 	bl	8005296 <HAL_NVIC_EnableIRQ>
}
 800307a:	e05a      	b.n	8003132 <HAL_TIM_PWM_MspInit+0x312>
 800307c:	58024400 	.word	0x58024400
 8003080:	58020000 	.word	0x58020000
 8003084:	24001378 	.word	0x24001378
 8003088:	40020028 	.word	0x40020028
 800308c:	40000400 	.word	0x40000400
 8003090:	240013f0 	.word	0x240013f0
 8003094:	40020058 	.word	0x40020058
 8003098:	24001468 	.word	0x24001468
 800309c:	40020070 	.word	0x40020070
 80030a0:	40000800 	.word	0x40000800
 80030a4:	240014e0 	.word	0x240014e0
 80030a8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <HAL_TIM_PWM_MspInit+0x31c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d13d      	bne.n	8003132 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_TIM_PWM_MspInit+0x320>)
 80030b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_TIM_PWM_MspInit+0x320>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_TIM_PWM_MspInit+0x320>)
 80030c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_TIM_PWM_MspInit+0x328>)
 80030d8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030dc:	223a      	movs	r2, #58	; 0x3a
 80030de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e0:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030f4:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 80030fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003102:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 800310c:	2200      	movs	r2, #0
 800310e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 8003112:	2200      	movs	r2, #0
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003116:	480b      	ldr	r0, [pc, #44]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 8003118:	f002 f8d8 	bl	80052cc <HAL_DMA_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003122:	f7ff fb1f 	bl	8002764 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_TIM_PWM_MspInit+0x324>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003132:	bf00      	nop
 8003134:	3730      	adds	r7, #48	; 0x30
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40000c00 	.word	0x40000c00
 8003140:	58024400 	.word	0x58024400
 8003144:	24001558 	.word	0x24001558
 8003148:	40020040 	.word	0x40020040

0800314c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d120      	bne.n	80031b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800317e:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800318c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003196:	2302      	movs	r3, #2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800319e:	2301      	movs	r3, #1
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4619      	mov	r1, r3
 80031a8:	4844      	ldr	r0, [pc, #272]	; (80032bc <HAL_TIM_MspPostInit+0x170>)
 80031aa:	f004 fcc7 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80031ae:	e07f      	b.n	80032b0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <HAL_TIM_MspPostInit+0x174>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d11f      	bne.n	80031fa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031d8:	2330      	movs	r3, #48	; 0x30
 80031da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031e0:	2302      	movs	r3, #2
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 031c 	add.w	r3, r7, #28
 80031f0:	4619      	mov	r1, r3
 80031f2:	4832      	ldr	r0, [pc, #200]	; (80032bc <HAL_TIM_MspPostInit+0x170>)
 80031f4:	f004 fca2 	bl	8007b3c <HAL_GPIO_Init>
}
 80031f8:	e05a      	b.n	80032b0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a31      	ldr	r2, [pc, #196]	; (80032c4 <HAL_TIM_MspPostInit+0x178>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d131      	bne.n	8003268 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320a:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003222:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003234:	2302      	movs	r3, #2
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	4619      	mov	r1, r3
 800323e:	4822      	ldr	r0, [pc, #136]	; (80032c8 <HAL_TIM_MspPostInit+0x17c>)
 8003240:	f004 fc7c 	bl	8007b3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800324e:	2302      	movs	r3, #2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003256:	2302      	movs	r3, #2
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	4819      	ldr	r0, [pc, #100]	; (80032c8 <HAL_TIM_MspPostInit+0x17c>)
 8003262:	f004 fc6b 	bl	8007b3c <HAL_GPIO_Init>
}
 8003266:	e023      	b.n	80032b0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_TIM_MspPostInit+0x180>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d11e      	bne.n	80032b0 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_TIM_MspPostInit+0x16c>)
 8003284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003290:	2308      	movs	r3, #8
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003298:	2302      	movs	r3, #2
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032a0:	2302      	movs	r3, #2
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	4619      	mov	r1, r3
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <HAL_TIM_MspPostInit+0x184>)
 80032ac:	f004 fc46 	bl	8007b3c <HAL_GPIO_Init>
}
 80032b0:	bf00      	nop
 80032b2:	3730      	adds	r7, #48	; 0x30
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	58024400 	.word	0x58024400
 80032bc:	58020400 	.word	0x58020400
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	58020c00 	.word	0x58020c00
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	58020000 	.word	0x58020000

080032d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b0ba      	sub	sp, #232	; 0xe8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ec:	f107 0318 	add.w	r3, r7, #24
 80032f0:	22b8      	movs	r2, #184	; 0xb8
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f014 fd1a 	bl	8017d2e <memset>
  if(huart->Instance==UART4)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_UART_MspInit+0x160>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d147      	bne.n	8003394 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003304:	f04f 0202 	mov.w	r2, #2
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003316:	f107 0318 	add.w	r3, r7, #24
 800331a:	4618      	mov	r0, r3
 800331c:	f007 f9e2 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003326:	f7ff fa1d 	bl	8002764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_UART_MspInit+0x164>)
 800332c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003330:	4a41      	ldr	r2, [pc, #260]	; (8003438 <HAL_UART_MspInit+0x164>)
 8003332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_UART_MspInit+0x164>)
 800333c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_UART_MspInit+0x164>)
 800334a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334e:	4a3a      	ldr	r2, [pc, #232]	; (8003438 <HAL_UART_MspInit+0x164>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003358:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_UART_MspInit+0x164>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003380:	2308      	movs	r3, #8
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800338a:	4619      	mov	r1, r3
 800338c:	482b      	ldr	r0, [pc, #172]	; (800343c <HAL_UART_MspInit+0x168>)
 800338e:	f004 fbd5 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003392:	e04a      	b.n	800342a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_UART_MspInit+0x16c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d145      	bne.n	800342a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800339e:	f04f 0201 	mov.w	r2, #1
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b0:	f107 0318 	add.w	r3, r7, #24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f007 f995 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80033c0:	f7ff f9d0 	bl	8002764 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033c4:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_UART_MspInit+0x164>)
 80033f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003418:	2307      	movs	r3, #7
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003422:	4619      	mov	r1, r3
 8003424:	4807      	ldr	r0, [pc, #28]	; (8003444 <HAL_UART_MspInit+0x170>)
 8003426:	f004 fb89 	bl	8007b3c <HAL_GPIO_Init>
}
 800342a:	bf00      	nop
 800342c:	37e8      	adds	r7, #232	; 0xe8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40004c00 	.word	0x40004c00
 8003438:	58024400 	.word	0x58024400
 800343c:	58020400 	.word	0x58020400
 8003440:	40011400 	.word	0x40011400
 8003444:	58020800 	.word	0x58020800

08003448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800344c:	e7fe      	b.n	800344c <NMI_Handler+0x4>

0800344e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003452:	e7fe      	b.n	8003452 <HardFault_Handler+0x4>

08003454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003458:	e7fe      	b.n	8003458 <MemManage_Handler+0x4>

0800345a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345e:	e7fe      	b.n	800345e <BusFault_Handler+0x4>

08003460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003464:	e7fe      	b.n	8003464 <UsageFault_Handler+0x4>

08003466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003494:	f000 fa40 	bl	8003918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}

0800349c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <DMA1_Stream0_IRQHandler+0x10>)
 80034a2:	f002 fcd5 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	240014e0 	.word	0x240014e0

080034b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA1_Stream1_IRQHandler+0x10>)
 80034b6:	f002 fccb 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	24001378 	.word	0x24001378

080034c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA1_Stream2_IRQHandler+0x10>)
 80034ca:	f002 fcc1 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	24001558 	.word	0x24001558

080034d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <DMA1_Stream3_IRQHandler+0x10>)
 80034de:	f002 fcb7 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	240013f0 	.word	0x240013f0

080034ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <DMA1_Stream4_IRQHandler+0x10>)
 80034f2:	f002 fcad 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	24001468 	.word	0x24001468

08003500 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA1_Stream5_IRQHandler+0x10>)
 8003506:	f002 fca3 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	24000e50 	.word	0x24000e50

08003514 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <TIM4_IRQHandler+0x10>)
 800351a:	f00c fa6d 	bl	800f9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	240012e0 	.word	0x240012e0

08003528 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA2_Stream7_IRQHandler+0x10>)
 800352e:	f002 fc8f 	bl	8005e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000ec8 	.word	0x24000ec8

0800353c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <OTG_HS_IRQHandler+0x10>)
 8003542:	f004 ff55 	bl	80083f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	24002bfc 	.word	0x24002bfc

08003550 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <SDMMC2_IRQHandler+0x10>)
 8003556:	f009 ff1b 	bl	800d390 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	24001034 	.word	0x24001034

08003564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return 1;
 8003568:	2301      	movs	r3, #1
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_kill>:

int _kill(int pid, int sig)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800357e:	f014 fc29 	bl	8017dd4 <__errno>
 8003582:	4603      	mov	r3, r0
 8003584:	2216      	movs	r2, #22
 8003586:	601a      	str	r2, [r3, #0]
  return -1;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_exit>:

void _exit (int status)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ffe7 	bl	8003574 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035a6:	e7fe      	b.n	80035a6 <_exit+0x12>

080035a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e00a      	b.n	80035d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ba:	f3af 8000 	nop.w
 80035be:	4601      	mov	r1, r0
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	60ba      	str	r2, [r7, #8]
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dbf0      	blt.n	80035ba <_read+0x12>
  }

  return len;
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e009      	b.n	8003608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	60ba      	str	r2, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3301      	adds	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	dbf1      	blt.n	80035f4 <_write+0x12>
  }
  return len;
 8003610:	687b      	ldr	r3, [r7, #4]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_close>:

int _close(int file)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003642:	605a      	str	r2, [r3, #4]
  return 0;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_isatty>:

int _isatty(int file)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800365a:	2301      	movs	r3, #1
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b4:	f014 fb8e 	bl	8017dd4 <__errno>
 80036b8:	4603      	mov	r3, r0
 80036ba:	220c      	movs	r2, #12
 80036bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	24050000 	.word	0x24050000
 80036e4:	00000800 	.word	0x00000800
 80036e8:	240016f8 	.word	0x240016f8
 80036ec:	24003478 	.word	0x24003478

080036f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <SystemInit+0xd0>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <SystemInit+0xd0>)
 80036fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <SystemInit+0xd4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	2b06      	cmp	r3, #6
 800370e:	d807      	bhi.n	8003720 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003710:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <SystemInit+0xd4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <SystemInit+0xd4>)
 800371a:	f043 0307 	orr.w	r3, r3, #7
 800371e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003720:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <SystemInit+0xd8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a28      	ldr	r2, [pc, #160]	; (80037c8 <SystemInit+0xd8>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800372c:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <SystemInit+0xd8>)
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <SystemInit+0xd8>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4924      	ldr	r1, [pc, #144]	; (80037c8 <SystemInit+0xd8>)
 8003738:	4b24      	ldr	r3, [pc, #144]	; (80037cc <SystemInit+0xdc>)
 800373a:	4013      	ands	r3, r2
 800373c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <SystemInit+0xd4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <SystemInit+0xd4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 030f 	bic.w	r3, r3, #15
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <SystemInit+0xd4>)
 8003754:	f043 0307 	orr.w	r3, r3, #7
 8003758:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <SystemInit+0xd8>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <SystemInit+0xd8>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <SystemInit+0xd8>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <SystemInit+0xd8>)
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <SystemInit+0xe0>)
 8003770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <SystemInit+0xd8>)
 8003774:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <SystemInit+0xe4>)
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SystemInit+0xd8>)
 800377a:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <SystemInit+0xe8>)
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <SystemInit+0xd8>)
 8003780:	2200      	movs	r2, #0
 8003782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <SystemInit+0xd8>)
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <SystemInit+0xe8>)
 8003788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <SystemInit+0xd8>)
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <SystemInit+0xd8>)
 8003792:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <SystemInit+0xe8>)
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <SystemInit+0xd8>)
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <SystemInit+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <SystemInit+0xd8>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <SystemInit+0xd8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <SystemInit+0xec>)
 80037b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80037b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00
 80037c4:	52002000 	.word	0x52002000
 80037c8:	58024400 	.word	0x58024400
 80037cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80037d0:	02020200 	.word	0x02020200
 80037d4:	01ff0000 	.word	0x01ff0000
 80037d8:	01010280 	.word	0x01010280
 80037dc:	52004000 	.word	0x52004000

080037e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80037e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037e4:	f7ff ff84 	bl	80036f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037e8:	480c      	ldr	r0, [pc, #48]	; (800381c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ea:	490d      	ldr	r1, [pc, #52]	; (8003820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f0:	e002      	b.n	80037f8 <LoopCopyDataInit>

080037f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037f6:	3304      	adds	r3, #4

080037f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037fc:	d3f9      	bcc.n	80037f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003800:	4c0a      	ldr	r4, [pc, #40]	; (800382c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003804:	e001      	b.n	800380a <LoopFillZerobss>

08003806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003808:	3204      	adds	r2, #4

0800380a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800380a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800380c:	d3fb      	bcc.n	8003806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800380e:	f014 fae7 	bl	8017de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003812:	f7fd fea1 	bl	8001558 <main>
  bx  lr
 8003816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003818:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800381c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003820:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003824:	0801ba30 	.word	0x0801ba30
  ldr r2, =_sbss
 8003828:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 800382c:	24003474 	.word	0x24003474

08003830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003830:	e7fe      	b.n	8003830 <ADC3_IRQHandler>
	...

08003834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800383a:	2003      	movs	r0, #3
 800383c:	f001 fd06 	bl	800524c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003840:	f006 fd7a 	bl	800a338 <HAL_RCC_GetSysClockFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_Init+0x68>)
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	4913      	ldr	r1, [pc, #76]	; (80038a0 <HAL_Init+0x6c>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_Init+0x68>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_Init+0x6c>)
 8003868:	5cd3      	ldrb	r3, [r2, r3]
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <HAL_Init+0x70>)
 8003876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003878:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <HAL_Init+0x74>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387e:	200f      	movs	r0, #15
 8003880:	f000 f814 	bl	80038ac <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e002      	b.n	8003894 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800388e:	f7fe ff6f 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	58024400 	.word	0x58024400
 80038a0:	0801b5a4 	.word	0x0801b5a4
 80038a4:	24000004 	.word	0x24000004
 80038a8:	24000000 	.word	0x24000000

080038ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_InitTick+0x60>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e021      	b.n	8003904 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_InitTick+0x64>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_InitTick+0x60>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fceb 	bl	80052b2 <HAL_SYSTICK_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e00e      	b.n	8003904 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0f      	cmp	r3, #15
 80038ea:	d80a      	bhi.n	8003902 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038ec:	2200      	movs	r2, #0
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	f001 fcb5 	bl	8005262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <HAL_InitTick+0x68>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2400000c 	.word	0x2400000c
 8003910:	24000000 	.word	0x24000000
 8003914:	24000008 	.word	0x24000008

08003918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2400000c 	.word	0x2400000c
 800393c:	240016fc 	.word	0x240016fc

08003940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	240016fc 	.word	0x240016fc

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff ffee 	bl	8003940 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397e:	bf00      	nop
 8003980:	f7ff ffde 	bl	8003940 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2400000c 	.word	0x2400000c

080039a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	58000400 	.word	0x58000400

080039cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3360      	adds	r3, #96	; 0x60
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <LL_ADC_SetOffset+0x60>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10b      	bne.n	8003a70 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a6e:	e00b      	b.n	8003a88 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	601a      	str	r2, [r3, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	58026000 	.word	0x58026000

08003a98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3360      	adds	r3, #96	; 0x60
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	611a      	str	r2, [r3, #16]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3360      	adds	r3, #96	; 0x60
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58026000 	.word	0x58026000

08003b3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <LL_ADC_SetOffsetSaturation+0x40>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10e      	bne.n	8003b6e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3360      	adds	r3, #96	; 0x60
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	58026000 	.word	0x58026000

08003b80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <LL_ADC_SetOffsetSign+0x40>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10e      	bne.n	8003bb2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3360      	adds	r3, #96	; 0x60
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	58026000 	.word	0x58026000

08003bc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	; (8003c14 <LL_ADC_SetOffsetState+0x50>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003bf6:	e007      	b.n	8003c08 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	58026000 	.word	0x58026000

08003c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3330      	adds	r3, #48	; 0x30
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	4413      	add	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	211f      	movs	r1, #31
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	f003 011f 	and.w	r1, r3, #31
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	0e5b      	lsrs	r3, r3, #25
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	0d1b      	lsrs	r3, r3, #20
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2107      	movs	r1, #7
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d115      	bne.n	8003d08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	401a      	ands	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0318 	and.w	r3, r3, #24
 8003cf2:	4914      	ldr	r1, [pc, #80]	; (8003d44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003cf4:	40d9      	lsrs	r1, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	400b      	ands	r3, r1
 8003cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d06:	e014      	b.n	8003d32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d14:	43db      	mvns	r3, r3
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f003 0318 	and.w	r3, r3, #24
 8003d1e:	4909      	ldr	r1, [pc, #36]	; (8003d44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d20:	40d9      	lsrs	r1, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	400b      	ands	r3, r1
 8003d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	58026000 	.word	0x58026000
 8003d44:	000fffff 	.word	0x000fffff

08003d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6093      	str	r3, [r2, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	5fffffc0 	.word	0x5fffffc0

08003d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d80:	d101      	bne.n	8003d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	6fffffc0 	.word	0x6fffffc0

08003dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd0:	d101      	bne.n	8003dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <LL_ADC_IsEnabled+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_ADC_IsEnabled+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d101      	bne.n	8003e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d101      	bne.n	8003e48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1ee      	b.n	8004250 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fe fc8f 	bl	80027a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff67 	bl	8003d6c <LL_ADC_IsDeepPowerDownEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff4d 	bl	8003d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff82 	bl	8003dbc <LL_ADC_IsInternalRegulatorEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d114      	bne.n	8003ee8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff66 	bl	8003d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec8:	4b8e      	ldr	r3, [pc, #568]	; (8004104 <HAL_ADC_Init+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	4a8e      	ldr	r2, [pc, #568]	; (8004108 <HAL_ADC_Init+0x2b0>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff65 	bl	8003dbc <LL_ADC_IsInternalRegulatorEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f043 0210 	orr.w	r2, r3, #16
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff76 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 8003f1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 8188 	bne.w	800423e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8184 	bne.w	800423e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff4a 	bl	8003de4 <LL_ADC_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d136      	bne.n	8003fc4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6c      	ldr	r2, [pc, #432]	; (800410c <HAL_ADC_Init+0x2b4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_ADC_Init+0x112>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <HAL_ADC_Init+0x2b8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10e      	bne.n	8003f88 <HAL_ADC_Init+0x130>
 8003f6a:	4868      	ldr	r0, [pc, #416]	; (800410c <HAL_ADC_Init+0x2b4>)
 8003f6c:	f7ff ff3a 	bl	8003de4 <LL_ADC_IsEnabled>
 8003f70:	4604      	mov	r4, r0
 8003f72:	4867      	ldr	r0, [pc, #412]	; (8004110 <HAL_ADC_Init+0x2b8>)
 8003f74:	f7ff ff36 	bl	8003de4 <LL_ADC_IsEnabled>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4323      	orrs	r3, r4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <HAL_ADC_Init+0x142>
 8003f88:	4862      	ldr	r0, [pc, #392]	; (8004114 <HAL_ADC_Init+0x2bc>)
 8003f8a:	f7ff ff2b 	bl	8003de4 <LL_ADC_IsEnabled>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5a      	ldr	r2, [pc, #360]	; (800410c <HAL_ADC_Init+0x2b4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_ADC_Init+0x15a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_ADC_Init+0x2b8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x15e>
 8003fb2:	4a59      	ldr	r2, [pc, #356]	; (8004118 <HAL_ADC_Init+0x2c0>)
 8003fb4:	e000      	b.n	8003fb8 <HAL_ADC_Init+0x160>
 8003fb6:	4a59      	ldr	r2, [pc, #356]	; (800411c <HAL_ADC_Init+0x2c4>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7ff fd04 	bl	80039cc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_ADC_Init+0x2bc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d129      	bne.n	8004022 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7e5b      	ldrb	r3, [r3, #25]
 8003fd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fd8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003fde:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d013      	beq.n	8004010 <HAL_ADC_Init+0x1b8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	d00d      	beq.n	800400c <HAL_ADC_Init+0x1b4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b1c      	cmp	r3, #28
 8003ff6:	d007      	beq.n	8004008 <HAL_ADC_Init+0x1b0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b18      	cmp	r3, #24
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_Init+0x1ac>
 8004000:	2318      	movs	r3, #24
 8004002:	e006      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004004:	2300      	movs	r3, #0
 8004006:	e004      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004008:	2310      	movs	r3, #16
 800400a:	e002      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 800400c:	2308      	movs	r3, #8
 800400e:	e000      	b.n	8004012 <HAL_ADC_Init+0x1ba>
 8004010:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004012:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	e00e      	b.n	8004040 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7e5b      	ldrb	r3, [r3, #25]
 8004026:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800402c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004032:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d106      	bne.n	8004058 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	3b01      	subs	r3, #1
 8004050:	045b      	lsls	r3, r3, #17
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a26      	ldr	r2, [pc, #152]	; (8004114 <HAL_ADC_Init+0x2bc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d115      	bne.n	80040aa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_ADC_Init+0x2c8>)
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	430b      	orrs	r3, r1
 8004090:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	611a      	str	r2, [r3, #16]
 80040a8:	e009      	b.n	80040be <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <HAL_ADC_Init+0x2cc>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	69b9      	ldr	r1, [r7, #24]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fea1 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 80040c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff feae 	bl	8003e30 <LL_ADC_INJ_IsConversionOngoing>
 80040d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 808e 	bne.w	80041fa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 808a 	bne.w	80041fa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_ADC_Init+0x2bc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d11b      	bne.n	8004128 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e1b      	ldrb	r3, [r3, #24]
 80040f4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040fc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e018      	b.n	8004136 <HAL_ADC_Init+0x2de>
 8004104:	24000000 	.word	0x24000000
 8004108:	053e2d63 	.word	0x053e2d63
 800410c:	40022000 	.word	0x40022000
 8004110:	40022100 	.word	0x40022100
 8004114:	58026000 	.word	0x58026000
 8004118:	40022300 	.word	0x40022300
 800411c:	58026300 	.word	0x58026300
 8004120:	fff04007 	.word	0xfff04007
 8004124:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7e1b      	ldrb	r3, [r3, #24]
 800412c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <HAL_ADC_Init+0x400>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	69b9      	ldr	r1, [r7, #24]
 8004146:	430b      	orrs	r3, r1
 8004148:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004150:	2b01      	cmp	r3, #1
 8004152:	d137      	bne.n	80041c4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3f      	ldr	r2, [pc, #252]	; (800425c <HAL_ADC_Init+0x404>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d116      	bne.n	8004192 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <HAL_ADC_Init+0x408>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004182:	430a      	orrs	r2, r1
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	611a      	str	r2, [r3, #16]
 8004190:	e020      	b.n	80041d4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_ADC_Init+0x40c>)
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041a0:	3a01      	subs	r2, #1
 80041a2:	0411      	lsls	r1, r2, #16
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041a8:	4311      	orrs	r1, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ae:	4311      	orrs	r1, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041b4:	430a      	orrs	r2, r1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e007      	b.n	80041d4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_ADC_Init+0x404>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d002      	beq.n	80041fa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fd63 	bl	8004cc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10c      	bne.n	800421c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f023 010f 	bic.w	r1, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	1e5a      	subs	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
 800421a:	e007      	b.n	800422c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 020f 	bic.w	r2, r2, #15
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f023 0303 	bic.w	r3, r3, #3
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
 800423c:	e007      	b.n	800424e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	f043 0210 	orr.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800424e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3724      	adds	r7, #36	; 0x24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	ffffbffc 	.word	0xffffbffc
 800425c:	58026000 	.word	0x58026000
 8004260:	fc00f81f 	.word	0xfc00f81f
 8004264:	fc00f81e 	.word	0xfc00f81e

08004268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b0b9      	sub	sp, #228	; 0xe4
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004282:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4aa9      	ldr	r2, [pc, #676]	; (8004530 <HAL_ADC_ConfigChannel+0x2c8>)
 800428a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_ADC_ConfigChannel+0x34>
 8004296:	2302      	movs	r3, #2
 8004298:	f000 bcfa 	b.w	8004c90 <HAL_ADC_ConfigChannel+0xa28>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fdae 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 84de 	bne.w	8004c72 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a9e      	ldr	r2, [pc, #632]	; (8004534 <HAL_ADC_ConfigChannel+0x2cc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d033      	beq.n	8004328 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <HAL_ADC_ConfigChannel+0x76>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	e01d      	b.n	800431a <HAL_ADC_ConfigChannel+0xb2>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2201      	movs	r2, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	69d1      	ldr	r1, [r2, #28]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	430b      	orrs	r3, r1
 8004326:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	f7ff fc6f 	bl	8003c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fd63 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 8004344:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fd6f 	bl	8003e30 <LL_ADC_INJ_IsConversionOngoing>
 8004352:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8270 	bne.w	8004840 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004360:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 826b 	bne.w	8004840 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	461a      	mov	r2, r3
 8004378:	f7ff fc7a 	bl	8003c70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6c      	ldr	r2, [pc, #432]	; (8004534 <HAL_ADC_ConfigChannel+0x2cc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10d      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043a0:	e032      	b.n	8004408 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043a2:	4b65      	ldr	r3, [pc, #404]	; (8004538 <HAL_ADC_ConfigChannel+0x2d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ae:	d10b      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x160>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	e01d      	b.n	8004404 <HAL_ADC_ConfigChannel+0x19c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x186>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	e00a      	b.n	8004404 <HAL_ADC_ConfigChannel+0x19c>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d048      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004420:	f7ff fb08 	bl	8003a34 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a42      	ldr	r2, [pc, #264]	; (8004534 <HAL_ADC_ConfigChannel+0x2cc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d119      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	461a      	mov	r2, r3
 800443c:	f7ff fba0 	bl	8003b80 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6919      	ldr	r1, [r3, #16]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d102      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1f0>
 8004452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004456:	e000      	b.n	800445a <HAL_ADC_ConfigChannel+0x1f2>
 8004458:	2300      	movs	r3, #0
 800445a:	461a      	mov	r2, r3
 800445c:	f7ff fb6e 	bl	8003b3c <LL_ADC_SetOffsetSaturation>
 8004460:	e1ee      	b.n	8004840 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_ADC_ConfigChannel+0x212>
 8004474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004478:	e000      	b.n	800447c <HAL_ADC_ConfigChannel+0x214>
 800447a:	2300      	movs	r3, #0
 800447c:	461a      	mov	r2, r3
 800447e:	f7ff fb3b 	bl	8003af8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6919      	ldr	r1, [r3, #16]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	7e1b      	ldrb	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x230>
 8004492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004496:	e000      	b.n	800449a <HAL_ADC_ConfigChannel+0x232>
 8004498:	2300      	movs	r3, #0
 800449a:	461a      	mov	r2, r3
 800449c:	f7ff fb12 	bl	8003ac4 <LL_ADC_SetDataRightShift>
 80044a0:	e1ce      	b.n	8004840 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_ADC_ConfigChannel+0x2cc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 8181 	bne.w	80047b0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff faef 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <HAL_ADC_ConfigChannel+0x272>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fae4 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 80044d0:	4603      	mov	r3, r0
 80044d2:	0e9b      	lsrs	r3, r3, #26
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	e01e      	b.n	8004518 <HAL_ADC_ConfigChannel+0x2b0>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fad9 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80044f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004508:	2320      	movs	r3, #32
 800450a:	e004      	b.n	8004516 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800450c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_ADC_ConfigChannel+0x2d4>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	e01e      	b.n	800456e <HAL_ADC_ConfigChannel+0x306>
 8004530:	47ff0000 	.word	0x47ff0000
 8004534:	58026000 	.word	0x58026000
 8004538:	5c001000 	.word	0x5c001000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e004      	b.n	800456e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	429a      	cmp	r2, r3
 8004570:	d106      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fb22 	bl	8003bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fa86 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 800458c:	4603      	mov	r3, r0
 800458e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x344>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2101      	movs	r1, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fa7b 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 80045a2:	4603      	mov	r3, r0
 80045a4:	0e9b      	lsrs	r3, r3, #26
 80045a6:	f003 021f 	and.w	r2, r3, #31
 80045aa:	e01e      	b.n	80045ea <HAL_ADC_ConfigChannel+0x382>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fa70 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80045ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80045d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80045da:	2320      	movs	r3, #32
 80045dc:	e004      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80045de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x39a>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0e9b      	lsrs	r3, r3, #26
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	e018      	b.n	8004634 <HAL_ADC_ConfigChannel+0x3cc>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800461a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800461e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004626:	2320      	movs	r3, #32
 8004628:	e004      	b.n	8004634 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800462a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	429a      	cmp	r2, r3
 8004636:	d106      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	2101      	movs	r1, #1
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fabf 	bl	8003bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2102      	movs	r1, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fa23 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x40a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fa18 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	0e9b      	lsrs	r3, r3, #26
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	e01e      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x448>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fa0d 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e004      	b.n	80046ae <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80046a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x460>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0e9b      	lsrs	r3, r3, #26
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	e014      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x48a>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80046d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80046dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80046e4:	2320      	movs	r3, #32
 80046e6:	e004      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80046e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d106      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fa60 	bl	8003bc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2103      	movs	r1, #3
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff f9c4 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 8004710:	4603      	mov	r3, r0
 8004712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x4c8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2103      	movs	r1, #3
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f9b9 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	0e9b      	lsrs	r3, r3, #26
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	e017      	b.n	8004760 <HAL_ADC_ConfigChannel+0x4f8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2103      	movs	r1, #3
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff f9ae 	bl	8003a98 <LL_ADC_GetOffsetChannel>
 800473c:	4603      	mov	r3, r0
 800473e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800474c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004752:	2320      	movs	r3, #32
 8004754:	e003      	b.n	800475e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004768:	2b00      	cmp	r3, #0
 800476a:	d105      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x510>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	0e9b      	lsrs	r3, r3, #26
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	e011      	b.n	800479c <HAL_ADC_ConfigChannel+0x534>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004788:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800478a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004790:	2320      	movs	r3, #32
 8004792:	e003      	b.n	800479c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	429a      	cmp	r2, r3
 800479e:	d14f      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2103      	movs	r1, #3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fa0b 	bl	8003bc4 <LL_ADC_SetOffsetState>
 80047ae:	e047      	b.n	8004840 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	069b      	lsls	r3, r3, #26
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	069b      	lsls	r3, r3, #26
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047f6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	429a      	cmp	r2, r3
 800480a:	d107      	bne.n	800481c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	069b      	lsls	r3, r3, #26
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800483e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff facd 	bl	8003de4 <LL_ADC_IsEnabled>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8219 	bne.w	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	461a      	mov	r2, r3
 8004860:	f7ff fa32 	bl	8003cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4aa1      	ldr	r2, [pc, #644]	; (8004af0 <HAL_ADC_ConfigChannel+0x888>)
 800486a:	4293      	cmp	r3, r2
 800486c:	f040 812e 	bne.w	8004acc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x630>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0e9b      	lsrs	r3, r3, #26
 8004886:	3301      	adds	r3, #1
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2b09      	cmp	r3, #9
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e019      	b.n	80048cc <HAL_ADC_ConfigChannel+0x664>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80048b0:	2320      	movs	r3, #32
 80048b2:	e003      	b.n	80048bc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80048b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2b09      	cmp	r3, #9
 80048c4:	bf94      	ite	ls
 80048c6:	2301      	movls	r3, #1
 80048c8:	2300      	movhi	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d079      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x684>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	3301      	adds	r3, #1
 80048e4:	069b      	lsls	r3, r3, #26
 80048e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ea:	e015      	b.n	8004918 <HAL_ADC_ConfigChannel+0x6b0>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004904:	2320      	movs	r3, #32
 8004906:	e003      	b.n	8004910 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	fab3 f383 	clz	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	3301      	adds	r3, #1
 8004912:	069b      	lsls	r3, r3, #26
 8004914:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x6d0>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	3301      	adds	r3, #1
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	e017      	b.n	8004968 <HAL_ADC_ConfigChannel+0x700>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800494a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e003      	b.n	800495c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004956:	fab3 f383 	clz	r3, r3
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	ea42 0103 	orr.w	r1, r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <HAL_ADC_ConfigChannel+0x726>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	3301      	adds	r3, #1
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	4613      	mov	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	051b      	lsls	r3, r3, #20
 800498c:	e018      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x758>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80049a6:	2320      	movs	r3, #32
 80049a8:	e003      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	fab3 f383 	clz	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f003 021f 	and.w	r2, r3, #31
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c0:	430b      	orrs	r3, r1
 80049c2:	e07e      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x778>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0e9b      	lsrs	r3, r3, #26
 80049d6:	3301      	adds	r3, #1
 80049d8:	069b      	lsls	r3, r3, #26
 80049da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049de:	e015      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x7a4>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3301      	adds	r3, #1
 8004a06:	069b      	lsls	r3, r3, #26
 8004a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x7c4>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0e9b      	lsrs	r3, r3, #26
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	e017      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x7f4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	61bb      	str	r3, [r7, #24]
  return result;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e003      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	ea42 0103 	orr.w	r1, r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x820>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0e9b      	lsrs	r3, r3, #26
 8004a72:	3301      	adds	r3, #1
 8004a74:	f003 021f 	and.w	r2, r3, #31
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3b1e      	subs	r3, #30
 8004a80:	051b      	lsls	r3, r3, #20
 8004a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a86:	e01b      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x858>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	60fb      	str	r3, [r7, #12]
  return result;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	e003      	b.n	8004aac <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3301      	adds	r3, #1
 8004aae:	f003 021f 	and.w	r2, r3, #31
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b1e      	subs	r3, #30
 8004aba:	051b      	lsls	r3, r3, #20
 8004abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	6892      	ldr	r2, [r2, #8]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f7ff f8d2 	bl	8003c70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f280 80d7 	bge.w	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <HAL_ADC_ConfigChannel+0x88c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_ADC_ConfigChannel+0x882>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <HAL_ADC_ConfigChannel+0x890>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10a      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x898>
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_ADC_ConfigChannel+0x894>)
 8004aec:	e009      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x89a>
 8004aee:	bf00      	nop
 8004af0:	47ff0000 	.word	0x47ff0000
 8004af4:	40022000 	.word	0x40022000
 8004af8:	40022100 	.word	0x40022100
 8004afc:	40022300 	.word	0x40022300
 8004b00:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_ADC_ConfigChannel+0xa30>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe ff88 	bl	8003a18 <LL_ADC_GetCommonPathInternalCh>
 8004b08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a62      	ldr	r2, [pc, #392]	; (8004c9c <HAL_ADC_ConfigChannel+0xa34>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_ADC_ConfigChannel+0x8b8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a61      	ldr	r2, [pc, #388]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10e      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x8d6>
 8004b20:	485e      	ldr	r0, [pc, #376]	; (8004c9c <HAL_ADC_ConfigChannel+0xa34>)
 8004b22:	f7ff f95f 	bl	8003de4 <LL_ADC_IsEnabled>
 8004b26:	4604      	mov	r4, r0
 8004b28:	485d      	ldr	r0, [pc, #372]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8004b2a:	f7ff f95b 	bl	8003de4 <LL_ADC_IsEnabled>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4323      	orrs	r3, r4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e008      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x8e8>
 8004b3e:	4859      	ldr	r0, [pc, #356]	; (8004ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b40:	f7ff f950 	bl	8003de4 <LL_ADC_IsEnabled>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8084 	beq.w	8004c5e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a53      	ldr	r2, [pc, #332]	; (8004ca8 <HAL_ADC_ConfigChannel+0xa40>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d132      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x95e>
 8004b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d12c      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a4c      	ldr	r2, [pc, #304]	; (8004ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	f040 8086 	bne.w	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a47      	ldr	r2, [pc, #284]	; (8004c9c <HAL_ADC_ConfigChannel+0xa34>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x924>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a46      	ldr	r2, [pc, #280]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x928>
 8004b8c:	4a47      	ldr	r2, [pc, #284]	; (8004cac <HAL_ADC_ConfigChannel+0xa44>)
 8004b8e:	e000      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x92a>
 8004b90:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <HAL_ADC_ConfigChannel+0xa30>)
 8004b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fe ff28 	bl	80039f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba2:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <HAL_ADC_ConfigChannel+0xa48>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	4a42      	ldr	r2, [pc, #264]	; (8004cb4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bb6:	e002      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f9      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bc4:	e05e      	b.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3b      	ldr	r2, [pc, #236]	; (8004cb8 <HAL_ADC_ConfigChannel+0xa50>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d120      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x9aa>
 8004bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11a      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a30      	ldr	r2, [pc, #192]	; (8004ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d14e      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <HAL_ADC_ConfigChannel+0xa34>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_ADC_ConfigChannel+0x992>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x996>
 8004bfa:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <HAL_ADC_ConfigChannel+0xa44>)
 8004bfc:	e000      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x998>
 8004bfe:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <HAL_ADC_ConfigChannel+0xa30>)
 8004c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe fef1 	bl	80039f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c10:	e038      	b.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <HAL_ADC_ConfigChannel+0xa54>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d133      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d12d      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d128      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_ADC_ConfigChannel+0xa34>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_ADC_ConfigChannel+0x9de>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x9e2>
 8004c46:	4a19      	ldr	r2, [pc, #100]	; (8004cac <HAL_ADC_ConfigChannel+0xa44>)
 8004c48:	e000      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x9e4>
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <HAL_ADC_ConfigChannel+0xa30>)
 8004c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f7fe fecb 	bl	80039f2 <LL_ADC_SetCommonPathInternalCh>
 8004c5c:	e012      	b.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004c70:	e008      	b.n	8004c84 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c8c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	37e4      	adds	r7, #228	; 0xe4
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	58026300 	.word	0x58026300
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	40022100 	.word	0x40022100
 8004ca4:	58026000 	.word	0x58026000
 8004ca8:	c7520000 	.word	0xc7520000
 8004cac:	40022300 	.word	0x40022300
 8004cb0:	24000000 	.word	0x24000000
 8004cb4:	053e2d63 	.word	0x053e2d63
 8004cb8:	c3210000 	.word	0xc3210000
 8004cbc:	cb840000 	.word	0xcb840000

08004cc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6c      	ldr	r2, [pc, #432]	; (8004e80 <ADC_ConfigureBoostMode+0x1c0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <ADC_ConfigureBoostMode+0x1c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a6b      	ldr	r2, [pc, #428]	; (8004e84 <ADC_ConfigureBoostMode+0x1c4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d109      	bne.n	8004cf0 <ADC_ConfigureBoostMode+0x30>
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	; (8004e88 <ADC_ConfigureBoostMode+0x1c8>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e008      	b.n	8004d02 <ADC_ConfigureBoostMode+0x42>
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <ADC_ConfigureBoostMode+0x1cc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01c      	beq.n	8004d40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d06:	f005 fc91 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 8004d0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d14:	d010      	beq.n	8004d38 <ADC_ConfigureBoostMode+0x78>
 8004d16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d1a:	d873      	bhi.n	8004e04 <ADC_ConfigureBoostMode+0x144>
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d002      	beq.n	8004d28 <ADC_ConfigureBoostMode+0x68>
 8004d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d26:	d16d      	bne.n	8004e04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	60fb      	str	r3, [r7, #12]
        break;
 8004d36:	e068      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	60fb      	str	r3, [r7, #12]
        break;
 8004d3e:	e064      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	f006 fe6c 	bl	800ba24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d56:	d051      	beq.n	8004dfc <ADC_ConfigureBoostMode+0x13c>
 8004d58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d5c:	d854      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d62:	d047      	beq.n	8004df4 <ADC_ConfigureBoostMode+0x134>
 8004d64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d68:	d84e      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d6e:	d03d      	beq.n	8004dec <ADC_ConfigureBoostMode+0x12c>
 8004d70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d74:	d848      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d7a:	d033      	beq.n	8004de4 <ADC_ConfigureBoostMode+0x124>
 8004d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d80:	d842      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d86:	d029      	beq.n	8004ddc <ADC_ConfigureBoostMode+0x11c>
 8004d88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d8c:	d83c      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d92:	d01a      	beq.n	8004dca <ADC_ConfigureBoostMode+0x10a>
 8004d94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d98:	d836      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004d9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d9e:	d014      	beq.n	8004dca <ADC_ConfigureBoostMode+0x10a>
 8004da0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004da4:	d830      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004daa:	d00e      	beq.n	8004dca <ADC_ConfigureBoostMode+0x10a>
 8004dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db0:	d82a      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004db2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004db6:	d008      	beq.n	8004dca <ADC_ConfigureBoostMode+0x10a>
 8004db8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dbc:	d824      	bhi.n	8004e08 <ADC_ConfigureBoostMode+0x148>
 8004dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc2:	d002      	beq.n	8004dca <ADC_ConfigureBoostMode+0x10a>
 8004dc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dc8:	d11e      	bne.n	8004e08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	0c9b      	lsrs	r3, r3, #18
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	60fb      	str	r3, [r7, #12]
        break;
 8004dda:	e016      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
        break;
 8004de2:	e012      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	60fb      	str	r3, [r7, #12]
        break;
 8004dea:	e00e      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	60fb      	str	r3, [r7, #12]
        break;
 8004df2:	e00a      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	09db      	lsrs	r3, r3, #7
 8004df8:	60fb      	str	r3, [r7, #12]
        break;
 8004dfa:	e006      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	60fb      	str	r3, [r7, #12]
        break;
 8004e02:	e002      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e04:	bf00      	nop
 8004e06:	e000      	b.n	8004e0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <ADC_ConfigureBoostMode+0x1d0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d808      	bhi.n	8004e2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e28:	e025      	b.n	8004e76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <ADC_ConfigureBoostMode+0x1d4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d80a      	bhi.n	8004e48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e44:	609a      	str	r2, [r3, #8]
}
 8004e46:	e016      	b.n	8004e76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <ADC_ConfigureBoostMode+0x1d8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d80a      	bhi.n	8004e66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e62:	609a      	str	r2, [r3, #8]
}
 8004e64:	e007      	b.n	8004e76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40022000 	.word	0x40022000
 8004e84:	40022100 	.word	0x40022100
 8004e88:	40022300 	.word	0x40022300
 8004e8c:	58026300 	.word	0x58026300
 8004e90:	005f5e10 	.word	0x005f5e10
 8004e94:	00bebc20 	.word	0x00bebc20
 8004e98:	017d7840 	.word	0x017d7840

08004e9c <LL_ADC_IsEnabled>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <LL_ADC_IsEnabled+0x18>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <LL_ADC_IsEnabled+0x1a>
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d101      	bne.n	8004eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b0a3      	sub	sp, #140	; 0x8c
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0c1      	b.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5e      	ldr	r2, [pc, #376]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d102      	bne.n	8004f26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f20:	4b5d      	ldr	r3, [pc, #372]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e001      	b.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0a0      	b.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ffb9 	bl	8004ec2 <LL_ADC_REG_IsConversionOngoing>
 8004f50:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff ffb2 	bl	8004ec2 <LL_ADC_REG_IsConversionOngoing>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8081 	bne.w	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d17c      	bne.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a48      	ldr	r2, [pc, #288]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a46      	ldr	r2, [pc, #280]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f84:	e000      	b.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004f86:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f88:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d039      	beq.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3a      	ldr	r2, [pc, #232]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004fb8:	4836      	ldr	r0, [pc, #216]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fba:	f7ff ff6f 	bl	8004e9c <LL_ADC_IsEnabled>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4835      	ldr	r0, [pc, #212]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fc2:	f7ff ff6b 	bl	8004e9c <LL_ADC_IsEnabled>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4323      	orrs	r3, r4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e008      	b.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004fd6:	4833      	ldr	r0, [pc, #204]	; (80050a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004fd8:	f7ff ff60 	bl	8004e9c <LL_ADC_IsEnabled>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d047      	beq.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	6811      	ldr	r1, [r2, #0]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	6892      	ldr	r2, [r2, #8]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	431a      	orrs	r2, r3
 8005000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005002:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005004:	e03a      	b.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800500e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005010:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10e      	bne.n	8005044 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005026:	481b      	ldr	r0, [pc, #108]	; (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005028:	f7ff ff38 	bl	8004e9c <LL_ADC_IsEnabled>
 800502c:	4604      	mov	r4, r0
 800502e:	481a      	ldr	r0, [pc, #104]	; (8005098 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005030:	f7ff ff34 	bl	8004e9c <LL_ADC_IsEnabled>
 8005034:	4603      	mov	r3, r0
 8005036:	4323      	orrs	r3, r4
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e008      	b.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005044:	4817      	ldr	r0, [pc, #92]	; (80050a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005046:	f7ff ff29 	bl	8004e9c <LL_ADC_IsEnabled>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d010      	beq.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800505a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005060:	4013      	ands	r3, r2
 8005062:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005064:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005066:	e009      	b.n	800507c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800507a:	e000      	b.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800507c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005086:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800508a:	4618      	mov	r0, r3
 800508c:	378c      	adds	r7, #140	; 0x8c
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	40022000 	.word	0x40022000
 8005098:	40022100 	.word	0x40022100
 800509c:	40022300 	.word	0x40022300
 80050a0:	58026300 	.word	0x58026300
 80050a4:	58026000 	.word	0x58026000
 80050a8:	fffff0e0 	.word	0xfffff0e0

080050ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <__NVIC_SetPriorityGrouping+0x40>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050c8:	4013      	ands	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <__NVIC_SetPriorityGrouping+0x44>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050da:	4a04      	ldr	r2, [pc, #16]	; (80050ec <__NVIC_SetPriorityGrouping+0x40>)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	60d3      	str	r3, [r2, #12]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000ed00 	.word	0xe000ed00
 80050f0:	05fa0000 	.word	0x05fa0000

080050f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <__NVIC_GetPriorityGrouping+0x18>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	f003 0307 	and.w	r3, r3, #7
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	e000ed00 	.word	0xe000ed00

08005110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800511a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	db0b      	blt.n	800513a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	f003 021f 	and.w	r2, r3, #31
 8005128:	4907      	ldr	r1, [pc, #28]	; (8005148 <__NVIC_EnableIRQ+0x38>)
 800512a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2001      	movs	r0, #1
 8005132:	fa00 f202 	lsl.w	r2, r0, r2
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	e000e100 	.word	0xe000e100

0800514c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800515c:	2b00      	cmp	r3, #0
 800515e:	db0a      	blt.n	8005176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	490c      	ldr	r1, [pc, #48]	; (8005198 <__NVIC_SetPriority+0x4c>)
 8005166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	440b      	add	r3, r1
 8005170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005174:	e00a      	b.n	800518c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4908      	ldr	r1, [pc, #32]	; (800519c <__NVIC_SetPriority+0x50>)
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	3b04      	subs	r3, #4
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	440b      	add	r3, r1
 800518a:	761a      	strb	r2, [r3, #24]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000e100 	.word	0xe000e100
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f1c3 0307 	rsb	r3, r3, #7
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	bf28      	it	cs
 80051be:	2304      	movcs	r3, #4
 80051c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d902      	bls.n	80051d0 <NVIC_EncodePriority+0x30>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3b03      	subs	r3, #3
 80051ce:	e000      	b.n	80051d2 <NVIC_EncodePriority+0x32>
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	401a      	ands	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	43d9      	mvns	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	4313      	orrs	r3, r2
         );
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3b01      	subs	r3, #1
 8005214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005218:	d301      	bcc.n	800521e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800521a:	2301      	movs	r3, #1
 800521c:	e00f      	b.n	800523e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800521e:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <SysTick_Config+0x40>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005226:	210f      	movs	r1, #15
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	f7ff ff8e 	bl	800514c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <SysTick_Config+0x40>)
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005236:	4b04      	ldr	r3, [pc, #16]	; (8005248 <SysTick_Config+0x40>)
 8005238:	2207      	movs	r2, #7
 800523a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	e000e010 	.word	0xe000e010

0800524c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ff29 	bl	80050ac <__NVIC_SetPriorityGrouping>
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af00      	add	r7, sp, #0
 8005268:	4603      	mov	r3, r0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005270:	f7ff ff40 	bl	80050f4 <__NVIC_GetPriorityGrouping>
 8005274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f7ff ff90 	bl	80051a0 <NVIC_EncodePriority>
 8005280:	4602      	mov	r2, r0
 8005282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff5f 	bl	800514c <__NVIC_SetPriority>
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	4603      	mov	r3, r0
 800529e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff33 	bl	8005110 <__NVIC_EnableIRQ>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff ffa4 	bl	8005208 <SysTick_Config>
 80052c0:	4603      	mov	r3, r0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80052d4:	f7fe fb34 	bl	8003940 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e312      	b.n	800590a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a66      	ldr	r2, [pc, #408]	; (8005484 <HAL_DMA_Init+0x1b8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04a      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a65      	ldr	r2, [pc, #404]	; (8005488 <HAL_DMA_Init+0x1bc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d045      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a63      	ldr	r2, [pc, #396]	; (800548c <HAL_DMA_Init+0x1c0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d040      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a62      	ldr	r2, [pc, #392]	; (8005490 <HAL_DMA_Init+0x1c4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d03b      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a60      	ldr	r2, [pc, #384]	; (8005494 <HAL_DMA_Init+0x1c8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d036      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5f      	ldr	r2, [pc, #380]	; (8005498 <HAL_DMA_Init+0x1cc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d031      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_DMA_Init+0x1d0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d02c      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_DMA_Init+0x1d4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d027      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5a      	ldr	r2, [pc, #360]	; (80054a4 <HAL_DMA_Init+0x1d8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <HAL_DMA_Init+0x1dc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d01d      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_DMA_Init+0x1e0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <HAL_DMA_Init+0x1e4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a54      	ldr	r2, [pc, #336]	; (80054b4 <HAL_DMA_Init+0x1e8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a53      	ldr	r2, [pc, #332]	; (80054b8 <HAL_DMA_Init+0x1ec>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a51      	ldr	r2, [pc, #324]	; (80054bc <HAL_DMA_Init+0x1f0>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <HAL_DMA_Init+0xb8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a50      	ldr	r2, [pc, #320]	; (80054c0 <HAL_DMA_Init+0x1f4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d101      	bne.n	8005388 <HAL_DMA_Init+0xbc>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_DMA_Init+0xbe>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 813c 	beq.w	8005608 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a37      	ldr	r2, [pc, #220]	; (8005484 <HAL_DMA_Init+0x1b8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a36      	ldr	r2, [pc, #216]	; (8005488 <HAL_DMA_Init+0x1bc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a34      	ldr	r2, [pc, #208]	; (800548c <HAL_DMA_Init+0x1c0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a33      	ldr	r2, [pc, #204]	; (8005490 <HAL_DMA_Init+0x1c4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a31      	ldr	r2, [pc, #196]	; (8005494 <HAL_DMA_Init+0x1c8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a30      	ldr	r2, [pc, #192]	; (8005498 <HAL_DMA_Init+0x1cc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2e      	ldr	r2, [pc, #184]	; (800549c <HAL_DMA_Init+0x1d0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <HAL_DMA_Init+0x1d4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <HAL_DMA_Init+0x1d8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_Init+0x174>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2a      	ldr	r2, [pc, #168]	; (80054a8 <HAL_DMA_Init+0x1dc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_Init+0x174>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a28      	ldr	r2, [pc, #160]	; (80054ac <HAL_DMA_Init+0x1e0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_Init+0x174>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <HAL_DMA_Init+0x1e4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_Init+0x174>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <HAL_DMA_Init+0x1e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_Init+0x174>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <HAL_DMA_Init+0x1ec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_Init+0x174>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_DMA_Init+0x1f0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_Init+0x174>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_DMA_Init+0x1f4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <HAL_DMA_Init+0x186>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e007      	b.n	8005462 <HAL_DMA_Init+0x196>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005462:	e02f      	b.n	80054c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005464:	f7fe fa6c 	bl	8003940 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b05      	cmp	r3, #5
 8005470:	d928      	bls.n	80054c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2203      	movs	r2, #3
 800547c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e242      	b.n	800590a <HAL_DMA_Init+0x63e>
 8005484:	40020010 	.word	0x40020010
 8005488:	40020028 	.word	0x40020028
 800548c:	40020040 	.word	0x40020040
 8005490:	40020058 	.word	0x40020058
 8005494:	40020070 	.word	0x40020070
 8005498:	40020088 	.word	0x40020088
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400200b8 	.word	0x400200b8
 80054a4:	40020410 	.word	0x40020410
 80054a8:	40020428 	.word	0x40020428
 80054ac:	40020440 	.word	0x40020440
 80054b0:	40020458 	.word	0x40020458
 80054b4:	40020470 	.word	0x40020470
 80054b8:	40020488 	.word	0x40020488
 80054bc:	400204a0 	.word	0x400204a0
 80054c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1c8      	bne.n	8005464 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4b83      	ldr	r3, [pc, #524]	; (80056ec <HAL_DMA_Init+0x420>)
 80054de:	4013      	ands	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80054ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005502:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b04      	cmp	r3, #4
 8005516:	d107      	bne.n	8005528 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	4313      	orrs	r3, r2
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b28      	cmp	r3, #40	; 0x28
 800552e:	d903      	bls.n	8005538 <HAL_DMA_Init+0x26c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b2e      	cmp	r3, #46	; 0x2e
 8005536:	d91f      	bls.n	8005578 <HAL_DMA_Init+0x2ac>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b3e      	cmp	r3, #62	; 0x3e
 800553e:	d903      	bls.n	8005548 <HAL_DMA_Init+0x27c>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b42      	cmp	r3, #66	; 0x42
 8005546:	d917      	bls.n	8005578 <HAL_DMA_Init+0x2ac>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b46      	cmp	r3, #70	; 0x46
 800554e:	d903      	bls.n	8005558 <HAL_DMA_Init+0x28c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b48      	cmp	r3, #72	; 0x48
 8005556:	d90f      	bls.n	8005578 <HAL_DMA_Init+0x2ac>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b4e      	cmp	r3, #78	; 0x4e
 800555e:	d903      	bls.n	8005568 <HAL_DMA_Init+0x29c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b52      	cmp	r3, #82	; 0x52
 8005566:	d907      	bls.n	8005578 <HAL_DMA_Init+0x2ac>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b73      	cmp	r3, #115	; 0x73
 800556e:	d905      	bls.n	800557c <HAL_DMA_Init+0x2b0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b77      	cmp	r3, #119	; 0x77
 8005576:	d801      	bhi.n	800557c <HAL_DMA_Init+0x2b0>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <HAL_DMA_Init+0x2b2>
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005588:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0307 	bic.w	r3, r3, #7
 80055a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d117      	bne.n	80055e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00e      	beq.n	80055e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fdca 	bl	8007160 <DMA_CheckFifoParam>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2240      	movs	r2, #64	; 0x40
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e192      	b.n	800590a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fd05 	bl	8006ffc <DMA_CalcBaseAndBitshift>
 80055f2:	4603      	mov	r3, r0
 80055f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	223f      	movs	r2, #63	; 0x3f
 8005600:	409a      	lsls	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	e0c8      	b.n	800579a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a38      	ldr	r2, [pc, #224]	; (80056f0 <HAL_DMA_Init+0x424>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d022      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_DMA_Init+0x428>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01d      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a35      	ldr	r2, [pc, #212]	; (80056f8 <HAL_DMA_Init+0x42c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d018      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_DMA_Init+0x430>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a32      	ldr	r2, [pc, #200]	; (8005700 <HAL_DMA_Init+0x434>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00e      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_DMA_Init+0x438>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d009      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <HAL_DMA_Init+0x43c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_DMA_Init+0x38c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_DMA_Init+0x440>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_DMA_Init+0x390>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_DMA_Init+0x392>
 800565c:	2300      	movs	r3, #0
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8092 	beq.w	8005788 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_DMA_Init+0x424>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d021      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a20      	ldr	r2, [pc, #128]	; (80056f4 <HAL_DMA_Init+0x428>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01c      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <HAL_DMA_Init+0x42c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d017      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <HAL_DMA_Init+0x430>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d012      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <HAL_DMA_Init+0x434>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00d      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <HAL_DMA_Init+0x438>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d008      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_DMA_Init+0x43c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <HAL_DMA_Init+0x3e6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a17      	ldr	r2, [pc, #92]	; (800570c <HAL_DMA_Init+0x440>)
 80056b0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_DMA_Init+0x444>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d01c      	beq.n	8005714 <HAL_DMA_Init+0x448>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d102      	bne.n	80056e8 <HAL_DMA_Init+0x41c>
 80056e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056e6:	e016      	b.n	8005716 <HAL_DMA_Init+0x44a>
 80056e8:	2300      	movs	r3, #0
 80056ea:	e014      	b.n	8005716 <HAL_DMA_Init+0x44a>
 80056ec:	fe10803f 	.word	0xfe10803f
 80056f0:	58025408 	.word	0x58025408
 80056f4:	5802541c 	.word	0x5802541c
 80056f8:	58025430 	.word	0x58025430
 80056fc:	58025444 	.word	0x58025444
 8005700:	58025458 	.word	0x58025458
 8005704:	5802546c 	.word	0x5802546c
 8005708:	58025480 	.word	0x58025480
 800570c:	58025494 	.word	0x58025494
 8005710:	fffe000f 	.word	0xfffe000f
 8005714:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68d2      	ldr	r2, [r2, #12]
 800571a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800571c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800572c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800573c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005744:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <HAL_DMA_Init+0x648>)
 800575c:	4413      	add	r3, r2
 800575e:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_DMA_Init+0x64c>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	009a      	lsls	r2, r3, #2
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 fc45 	bl	8006ffc <DMA_CalcBaseAndBitshift>
 8005772:	4603      	mov	r3, r0
 8005774:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e008      	b.n	800579a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2240      	movs	r2, #64	; 0x40
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0b7      	b.n	800590a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a5f      	ldr	r2, [pc, #380]	; (800591c <HAL_DMA_Init+0x650>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d072      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5d      	ldr	r2, [pc, #372]	; (8005920 <HAL_DMA_Init+0x654>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d06d      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5c      	ldr	r2, [pc, #368]	; (8005924 <HAL_DMA_Init+0x658>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d068      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5a      	ldr	r2, [pc, #360]	; (8005928 <HAL_DMA_Init+0x65c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d063      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a59      	ldr	r2, [pc, #356]	; (800592c <HAL_DMA_Init+0x660>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d05e      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a57      	ldr	r2, [pc, #348]	; (8005930 <HAL_DMA_Init+0x664>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d059      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a56      	ldr	r2, [pc, #344]	; (8005934 <HAL_DMA_Init+0x668>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d054      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a54      	ldr	r2, [pc, #336]	; (8005938 <HAL_DMA_Init+0x66c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04f      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a53      	ldr	r2, [pc, #332]	; (800593c <HAL_DMA_Init+0x670>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a51      	ldr	r2, [pc, #324]	; (8005940 <HAL_DMA_Init+0x674>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_Init+0x5be>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a50      	ldr	r2, [pc, #320]	; (8005944 <HAL_DMA_Init+0x678>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a4e      	ldr	r2, [pc, #312]	; (8005948 <HAL_DMA_Init+0x67c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a4d      	ldr	r2, [pc, #308]	; (800594c <HAL_DMA_Init+0x680>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_Init+0x5be>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a4b      	ldr	r2, [pc, #300]	; (8005950 <HAL_DMA_Init+0x684>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a4a      	ldr	r2, [pc, #296]	; (8005954 <HAL_DMA_Init+0x688>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a48      	ldr	r2, [pc, #288]	; (8005958 <HAL_DMA_Init+0x68c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_Init+0x5be>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a47      	ldr	r2, [pc, #284]	; (800595c <HAL_DMA_Init+0x690>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a45      	ldr	r2, [pc, #276]	; (8005960 <HAL_DMA_Init+0x694>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_Init+0x5be>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a44      	ldr	r2, [pc, #272]	; (8005964 <HAL_DMA_Init+0x698>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a42      	ldr	r2, [pc, #264]	; (8005968 <HAL_DMA_Init+0x69c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a41      	ldr	r2, [pc, #260]	; (800596c <HAL_DMA_Init+0x6a0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_Init+0x5be>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3f      	ldr	r2, [pc, #252]	; (8005970 <HAL_DMA_Init+0x6a4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a3e      	ldr	r2, [pc, #248]	; (8005974 <HAL_DMA_Init+0x6a8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_Init+0x5be>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <HAL_DMA_Init+0x6ac>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d101      	bne.n	800588e <HAL_DMA_Init+0x5c2>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_DMA_Init+0x5c4>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d032      	beq.n	80058fa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fcdf 	bl	8007258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d102      	bne.n	80058a8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d010      	beq.n	80058e8 <HAL_DMA_Init+0x61c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d80c      	bhi.n	80058e8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fd5c 	bl	800738c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058e4:	605a      	str	r2, [r3, #4]
 80058e6:	e008      	b.n	80058fa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	a7fdabf8 	.word	0xa7fdabf8
 8005918:	cccccccd 	.word	0xcccccccd
 800591c:	40020010 	.word	0x40020010
 8005920:	40020028 	.word	0x40020028
 8005924:	40020040 	.word	0x40020040
 8005928:	40020058 	.word	0x40020058
 800592c:	40020070 	.word	0x40020070
 8005930:	40020088 	.word	0x40020088
 8005934:	400200a0 	.word	0x400200a0
 8005938:	400200b8 	.word	0x400200b8
 800593c:	40020410 	.word	0x40020410
 8005940:	40020428 	.word	0x40020428
 8005944:	40020440 	.word	0x40020440
 8005948:	40020458 	.word	0x40020458
 800594c:	40020470 	.word	0x40020470
 8005950:	40020488 	.word	0x40020488
 8005954:	400204a0 	.word	0x400204a0
 8005958:	400204b8 	.word	0x400204b8
 800595c:	58025408 	.word	0x58025408
 8005960:	5802541c 	.word	0x5802541c
 8005964:	58025430 	.word	0x58025430
 8005968:	58025444 	.word	0x58025444
 800596c:	58025458 	.word	0x58025458
 8005970:	5802546c 	.word	0x5802546c
 8005974:	58025480 	.word	0x58025480
 8005978:	58025494 	.word	0x58025494

0800597c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e226      	b.n	8005de6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_DMA_Start_IT+0x2a>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e21f      	b.n	8005de6 <HAL_DMA_Start_IT+0x46a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	f040 820a 	bne.w	8005dd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a68      	ldr	r2, [pc, #416]	; (8005b70 <HAL_DMA_Start_IT+0x1f4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d04a      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a66      	ldr	r2, [pc, #408]	; (8005b74 <HAL_DMA_Start_IT+0x1f8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d045      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <HAL_DMA_Start_IT+0x1fc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d040      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a63      	ldr	r2, [pc, #396]	; (8005b7c <HAL_DMA_Start_IT+0x200>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d03b      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a62      	ldr	r2, [pc, #392]	; (8005b80 <HAL_DMA_Start_IT+0x204>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d036      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a60      	ldr	r2, [pc, #384]	; (8005b84 <HAL_DMA_Start_IT+0x208>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d031      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a5f      	ldr	r2, [pc, #380]	; (8005b88 <HAL_DMA_Start_IT+0x20c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d02c      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5d      	ldr	r2, [pc, #372]	; (8005b8c <HAL_DMA_Start_IT+0x210>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d027      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <HAL_DMA_Start_IT+0x214>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5a      	ldr	r2, [pc, #360]	; (8005b94 <HAL_DMA_Start_IT+0x218>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a59      	ldr	r2, [pc, #356]	; (8005b98 <HAL_DMA_Start_IT+0x21c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d018      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a57      	ldr	r2, [pc, #348]	; (8005b9c <HAL_DMA_Start_IT+0x220>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a56      	ldr	r2, [pc, #344]	; (8005ba0 <HAL_DMA_Start_IT+0x224>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a54      	ldr	r2, [pc, #336]	; (8005ba4 <HAL_DMA_Start_IT+0x228>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a53      	ldr	r2, [pc, #332]	; (8005ba8 <HAL_DMA_Start_IT+0x22c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_DMA_Start_IT+0xee>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a51      	ldr	r2, [pc, #324]	; (8005bac <HAL_DMA_Start_IT+0x230>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d108      	bne.n	8005a7c <HAL_DMA_Start_IT+0x100>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e007      	b.n	8005a8c <HAL_DMA_Start_IT+0x110>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 f906 	bl	8006ca4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a34      	ldr	r2, [pc, #208]	; (8005b70 <HAL_DMA_Start_IT+0x1f4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d04a      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a33      	ldr	r2, [pc, #204]	; (8005b74 <HAL_DMA_Start_IT+0x1f8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d045      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a31      	ldr	r2, [pc, #196]	; (8005b78 <HAL_DMA_Start_IT+0x1fc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d040      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a30      	ldr	r2, [pc, #192]	; (8005b7c <HAL_DMA_Start_IT+0x200>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d03b      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2e      	ldr	r2, [pc, #184]	; (8005b80 <HAL_DMA_Start_IT+0x204>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d036      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <HAL_DMA_Start_IT+0x208>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d031      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2b      	ldr	r2, [pc, #172]	; (8005b88 <HAL_DMA_Start_IT+0x20c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d02c      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <HAL_DMA_Start_IT+0x210>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d027      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a28      	ldr	r2, [pc, #160]	; (8005b90 <HAL_DMA_Start_IT+0x214>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d022      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <HAL_DMA_Start_IT+0x218>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d01d      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <HAL_DMA_Start_IT+0x21c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d018      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <HAL_DMA_Start_IT+0x220>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <HAL_DMA_Start_IT+0x224>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <HAL_DMA_Start_IT+0x228>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <HAL_DMA_Start_IT+0x22c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_DMA_Start_IT+0x1bc>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <HAL_DMA_Start_IT+0x230>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_DMA_Start_IT+0x1c0>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <HAL_DMA_Start_IT+0x1c2>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d036      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f023 021e 	bic.w	r2, r3, #30
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0216 	orr.w	r2, r2, #22
 8005b54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d03e      	beq.n	8005bdc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0208 	orr.w	r2, r2, #8
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e035      	b.n	8005bdc <HAL_DMA_Start_IT+0x260>
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f023 020e 	bic.w	r2, r3, #14
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 020a 	orr.w	r2, r2, #10
 8005bc2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0204 	orr.w	r2, r2, #4
 8005bda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a83      	ldr	r2, [pc, #524]	; (8005df0 <HAL_DMA_Start_IT+0x474>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d072      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a82      	ldr	r2, [pc, #520]	; (8005df4 <HAL_DMA_Start_IT+0x478>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d06d      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a80      	ldr	r2, [pc, #512]	; (8005df8 <HAL_DMA_Start_IT+0x47c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d068      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a7f      	ldr	r2, [pc, #508]	; (8005dfc <HAL_DMA_Start_IT+0x480>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d063      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a7d      	ldr	r2, [pc, #500]	; (8005e00 <HAL_DMA_Start_IT+0x484>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d05e      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a7c      	ldr	r2, [pc, #496]	; (8005e04 <HAL_DMA_Start_IT+0x488>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d059      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7a      	ldr	r2, [pc, #488]	; (8005e08 <HAL_DMA_Start_IT+0x48c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d054      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a79      	ldr	r2, [pc, #484]	; (8005e0c <HAL_DMA_Start_IT+0x490>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04f      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a77      	ldr	r2, [pc, #476]	; (8005e10 <HAL_DMA_Start_IT+0x494>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d04a      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a76      	ldr	r2, [pc, #472]	; (8005e14 <HAL_DMA_Start_IT+0x498>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d045      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a74      	ldr	r2, [pc, #464]	; (8005e18 <HAL_DMA_Start_IT+0x49c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d040      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a73      	ldr	r2, [pc, #460]	; (8005e1c <HAL_DMA_Start_IT+0x4a0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d03b      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a71      	ldr	r2, [pc, #452]	; (8005e20 <HAL_DMA_Start_IT+0x4a4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d036      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a70      	ldr	r2, [pc, #448]	; (8005e24 <HAL_DMA_Start_IT+0x4a8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d031      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a6e      	ldr	r2, [pc, #440]	; (8005e28 <HAL_DMA_Start_IT+0x4ac>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02c      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a6d      	ldr	r2, [pc, #436]	; (8005e2c <HAL_DMA_Start_IT+0x4b0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d027      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6b      	ldr	r2, [pc, #428]	; (8005e30 <HAL_DMA_Start_IT+0x4b4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d022      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6a      	ldr	r2, [pc, #424]	; (8005e34 <HAL_DMA_Start_IT+0x4b8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d01d      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a68      	ldr	r2, [pc, #416]	; (8005e38 <HAL_DMA_Start_IT+0x4bc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a67      	ldr	r2, [pc, #412]	; (8005e3c <HAL_DMA_Start_IT+0x4c0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a65      	ldr	r2, [pc, #404]	; (8005e40 <HAL_DMA_Start_IT+0x4c4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a64      	ldr	r2, [pc, #400]	; (8005e44 <HAL_DMA_Start_IT+0x4c8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a62      	ldr	r2, [pc, #392]	; (8005e48 <HAL_DMA_Start_IT+0x4cc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_DMA_Start_IT+0x350>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a61      	ldr	r2, [pc, #388]	; (8005e4c <HAL_DMA_Start_IT+0x4d0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d101      	bne.n	8005cd0 <HAL_DMA_Start_IT+0x354>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e000      	b.n	8005cd2 <HAL_DMA_Start_IT+0x356>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01a      	beq.n	8005d0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a37      	ldr	r2, [pc, #220]	; (8005df0 <HAL_DMA_Start_IT+0x474>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04a      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <HAL_DMA_Start_IT+0x478>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d045      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a34      	ldr	r2, [pc, #208]	; (8005df8 <HAL_DMA_Start_IT+0x47c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d040      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a33      	ldr	r2, [pc, #204]	; (8005dfc <HAL_DMA_Start_IT+0x480>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d03b      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a31      	ldr	r2, [pc, #196]	; (8005e00 <HAL_DMA_Start_IT+0x484>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d036      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <HAL_DMA_Start_IT+0x488>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d031      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2e      	ldr	r2, [pc, #184]	; (8005e08 <HAL_DMA_Start_IT+0x48c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02c      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2d      	ldr	r2, [pc, #180]	; (8005e0c <HAL_DMA_Start_IT+0x490>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d027      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2b      	ldr	r2, [pc, #172]	; (8005e10 <HAL_DMA_Start_IT+0x494>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <HAL_DMA_Start_IT+0x498>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d01d      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <HAL_DMA_Start_IT+0x49c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <HAL_DMA_Start_IT+0x4a0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a25      	ldr	r2, [pc, #148]	; (8005e20 <HAL_DMA_Start_IT+0x4a4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a24      	ldr	r2, [pc, #144]	; (8005e24 <HAL_DMA_Start_IT+0x4a8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_DMA_Start_IT+0x4ac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_DMA_Start_IT+0x430>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_DMA_Start_IT+0x4b0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <HAL_DMA_Start_IT+0x442>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e012      	b.n	8005de4 <HAL_DMA_Start_IT+0x468>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e009      	b.n	8005de4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40020010 	.word	0x40020010
 8005df4:	40020028 	.word	0x40020028
 8005df8:	40020040 	.word	0x40020040
 8005dfc:	40020058 	.word	0x40020058
 8005e00:	40020070 	.word	0x40020070
 8005e04:	40020088 	.word	0x40020088
 8005e08:	400200a0 	.word	0x400200a0
 8005e0c:	400200b8 	.word	0x400200b8
 8005e10:	40020410 	.word	0x40020410
 8005e14:	40020428 	.word	0x40020428
 8005e18:	40020440 	.word	0x40020440
 8005e1c:	40020458 	.word	0x40020458
 8005e20:	40020470 	.word	0x40020470
 8005e24:	40020488 	.word	0x40020488
 8005e28:	400204a0 	.word	0x400204a0
 8005e2c:	400204b8 	.word	0x400204b8
 8005e30:	58025408 	.word	0x58025408
 8005e34:	5802541c 	.word	0x5802541c
 8005e38:	58025430 	.word	0x58025430
 8005e3c:	58025444 	.word	0x58025444
 8005e40:	58025458 	.word	0x58025458
 8005e44:	5802546c 	.word	0x5802546c
 8005e48:	58025480 	.word	0x58025480
 8005e4c:	58025494 	.word	0x58025494

08005e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e5c:	4b67      	ldr	r3, [pc, #412]	; (8005ffc <HAL_DMA_IRQHandler+0x1ac>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a67      	ldr	r2, [pc, #412]	; (8006000 <HAL_DMA_IRQHandler+0x1b0>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0a9b      	lsrs	r3, r3, #10
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5f      	ldr	r2, [pc, #380]	; (8006004 <HAL_DMA_IRQHandler+0x1b4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d04a      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5d      	ldr	r2, [pc, #372]	; (8006008 <HAL_DMA_IRQHandler+0x1b8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d045      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5c      	ldr	r2, [pc, #368]	; (800600c <HAL_DMA_IRQHandler+0x1bc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d040      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5a      	ldr	r2, [pc, #360]	; (8006010 <HAL_DMA_IRQHandler+0x1c0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d03b      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a59      	ldr	r2, [pc, #356]	; (8006014 <HAL_DMA_IRQHandler+0x1c4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d036      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a57      	ldr	r2, [pc, #348]	; (8006018 <HAL_DMA_IRQHandler+0x1c8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d031      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a56      	ldr	r2, [pc, #344]	; (800601c <HAL_DMA_IRQHandler+0x1cc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d02c      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <HAL_DMA_IRQHandler+0x1d0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d027      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a53      	ldr	r2, [pc, #332]	; (8006024 <HAL_DMA_IRQHandler+0x1d4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a51      	ldr	r2, [pc, #324]	; (8006028 <HAL_DMA_IRQHandler+0x1d8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a50      	ldr	r2, [pc, #320]	; (800602c <HAL_DMA_IRQHandler+0x1dc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a4e      	ldr	r2, [pc, #312]	; (8006030 <HAL_DMA_IRQHandler+0x1e0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4d      	ldr	r2, [pc, #308]	; (8006034 <HAL_DMA_IRQHandler+0x1e4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a4b      	ldr	r2, [pc, #300]	; (8006038 <HAL_DMA_IRQHandler+0x1e8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a4a      	ldr	r2, [pc, #296]	; (800603c <HAL_DMA_IRQHandler+0x1ec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_IRQHandler+0xd2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a48      	ldr	r2, [pc, #288]	; (8006040 <HAL_DMA_IRQHandler+0x1f0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_DMA_IRQHandler+0xd6>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_DMA_IRQHandler+0xd8>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 842b 	beq.w	8006784 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2208      	movs	r2, #8
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80a2 	beq.w	8006088 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2e      	ldr	r2, [pc, #184]	; (8006004 <HAL_DMA_IRQHandler+0x1b4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2d      	ldr	r2, [pc, #180]	; (8006008 <HAL_DMA_IRQHandler+0x1b8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <HAL_DMA_IRQHandler+0x1bc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <HAL_DMA_IRQHandler+0x1c0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a28      	ldr	r2, [pc, #160]	; (8006014 <HAL_DMA_IRQHandler+0x1c4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a27      	ldr	r2, [pc, #156]	; (8006018 <HAL_DMA_IRQHandler+0x1c8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a25      	ldr	r2, [pc, #148]	; (800601c <HAL_DMA_IRQHandler+0x1cc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a24      	ldr	r2, [pc, #144]	; (8006020 <HAL_DMA_IRQHandler+0x1d0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a22      	ldr	r2, [pc, #136]	; (8006024 <HAL_DMA_IRQHandler+0x1d4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <HAL_DMA_IRQHandler+0x1d8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1f      	ldr	r2, [pc, #124]	; (800602c <HAL_DMA_IRQHandler+0x1dc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <HAL_DMA_IRQHandler+0x1e0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <HAL_DMA_IRQHandler+0x1e4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <HAL_DMA_IRQHandler+0x1e8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a19      	ldr	r2, [pc, #100]	; (800603c <HAL_DMA_IRQHandler+0x1ec>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x194>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <HAL_DMA_IRQHandler+0x1f0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d12f      	bne.n	8006044 <HAL_DMA_IRQHandler+0x1f4>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	e02e      	b.n	8006058 <HAL_DMA_IRQHandler+0x208>
 8005ffa:	bf00      	nop
 8005ffc:	24000000 	.word	0x24000000
 8006000:	1b4e81b5 	.word	0x1b4e81b5
 8006004:	40020010 	.word	0x40020010
 8006008:	40020028 	.word	0x40020028
 800600c:	40020040 	.word	0x40020040
 8006010:	40020058 	.word	0x40020058
 8006014:	40020070 	.word	0x40020070
 8006018:	40020088 	.word	0x40020088
 800601c:	400200a0 	.word	0x400200a0
 8006020:	400200b8 	.word	0x400200b8
 8006024:	40020410 	.word	0x40020410
 8006028:	40020428 	.word	0x40020428
 800602c:	40020440 	.word	0x40020440
 8006030:	40020458 	.word	0x40020458
 8006034:	40020470 	.word	0x40020470
 8006038:	40020488 	.word	0x40020488
 800603c:	400204a0 	.word	0x400204a0
 8006040:	400204b8 	.word	0x400204b8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0204 	bic.w	r2, r2, #4
 800606a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2208      	movs	r2, #8
 8006076:	409a      	lsls	r2, r3
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	fa22 f303 	lsr.w	r3, r2, r3
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d06e      	beq.n	800617c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a69      	ldr	r2, [pc, #420]	; (8006248 <HAL_DMA_IRQHandler+0x3f8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04a      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a67      	ldr	r2, [pc, #412]	; (800624c <HAL_DMA_IRQHandler+0x3fc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d045      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a66      	ldr	r2, [pc, #408]	; (8006250 <HAL_DMA_IRQHandler+0x400>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d040      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a64      	ldr	r2, [pc, #400]	; (8006254 <HAL_DMA_IRQHandler+0x404>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a63      	ldr	r2, [pc, #396]	; (8006258 <HAL_DMA_IRQHandler+0x408>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d036      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a61      	ldr	r2, [pc, #388]	; (800625c <HAL_DMA_IRQHandler+0x40c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a60      	ldr	r2, [pc, #384]	; (8006260 <HAL_DMA_IRQHandler+0x410>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02c      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5e      	ldr	r2, [pc, #376]	; (8006264 <HAL_DMA_IRQHandler+0x414>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5d      	ldr	r2, [pc, #372]	; (8006268 <HAL_DMA_IRQHandler+0x418>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5b      	ldr	r2, [pc, #364]	; (800626c <HAL_DMA_IRQHandler+0x41c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5a      	ldr	r2, [pc, #360]	; (8006270 <HAL_DMA_IRQHandler+0x420>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a58      	ldr	r2, [pc, #352]	; (8006274 <HAL_DMA_IRQHandler+0x424>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a57      	ldr	r2, [pc, #348]	; (8006278 <HAL_DMA_IRQHandler+0x428>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a55      	ldr	r2, [pc, #340]	; (800627c <HAL_DMA_IRQHandler+0x42c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a54      	ldr	r2, [pc, #336]	; (8006280 <HAL_DMA_IRQHandler+0x430>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_DMA_IRQHandler+0x2ee>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a52      	ldr	r2, [pc, #328]	; (8006284 <HAL_DMA_IRQHandler+0x434>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10a      	bne.n	8006154 <HAL_DMA_IRQHandler+0x304>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e003      	b.n	800615c <HAL_DMA_IRQHandler+0x30c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	f043 0202 	orr.w	r2, r3, #2
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2204      	movs	r2, #4
 8006186:	409a      	lsls	r2, r3
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 808f 	beq.w	80062b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <HAL_DMA_IRQHandler+0x3f8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_IRQHandler+0x3fc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a29      	ldr	r2, [pc, #164]	; (8006250 <HAL_DMA_IRQHandler+0x400>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_DMA_IRQHandler+0x404>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a26      	ldr	r2, [pc, #152]	; (8006258 <HAL_DMA_IRQHandler+0x408>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DMA_IRQHandler+0x40c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a23      	ldr	r2, [pc, #140]	; (8006260 <HAL_DMA_IRQHandler+0x410>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_DMA_IRQHandler+0x414>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a20      	ldr	r2, [pc, #128]	; (8006268 <HAL_DMA_IRQHandler+0x418>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_DMA_IRQHandler+0x41c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_DMA_IRQHandler+0x420>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_DMA_IRQHandler+0x424>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_DMA_IRQHandler+0x428>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_DMA_IRQHandler+0x42c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a17      	ldr	r2, [pc, #92]	; (8006280 <HAL_DMA_IRQHandler+0x430>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_IRQHandler+0x3e2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a15      	ldr	r2, [pc, #84]	; (8006284 <HAL_DMA_IRQHandler+0x434>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d12a      	bne.n	8006288 <HAL_DMA_IRQHandler+0x438>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e023      	b.n	8006290 <HAL_DMA_IRQHandler+0x440>
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2204      	movs	r2, #4
 800629e:	409a      	lsls	r2, r3
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a8:	f043 0204 	orr.w	r2, r3, #4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2210      	movs	r2, #16
 80062ba:	409a      	lsls	r2, r3
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a6 	beq.w	8006412 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a85      	ldr	r2, [pc, #532]	; (80064e0 <HAL_DMA_IRQHandler+0x690>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d04a      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a83      	ldr	r2, [pc, #524]	; (80064e4 <HAL_DMA_IRQHandler+0x694>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d045      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a82      	ldr	r2, [pc, #520]	; (80064e8 <HAL_DMA_IRQHandler+0x698>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d040      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a80      	ldr	r2, [pc, #512]	; (80064ec <HAL_DMA_IRQHandler+0x69c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d03b      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a7f      	ldr	r2, [pc, #508]	; (80064f0 <HAL_DMA_IRQHandler+0x6a0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d036      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a7d      	ldr	r2, [pc, #500]	; (80064f4 <HAL_DMA_IRQHandler+0x6a4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d031      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7c      	ldr	r2, [pc, #496]	; (80064f8 <HAL_DMA_IRQHandler+0x6a8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d02c      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7a      	ldr	r2, [pc, #488]	; (80064fc <HAL_DMA_IRQHandler+0x6ac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d027      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a79      	ldr	r2, [pc, #484]	; (8006500 <HAL_DMA_IRQHandler+0x6b0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d022      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a77      	ldr	r2, [pc, #476]	; (8006504 <HAL_DMA_IRQHandler+0x6b4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d01d      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a76      	ldr	r2, [pc, #472]	; (8006508 <HAL_DMA_IRQHandler+0x6b8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d018      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a74      	ldr	r2, [pc, #464]	; (800650c <HAL_DMA_IRQHandler+0x6bc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a73      	ldr	r2, [pc, #460]	; (8006510 <HAL_DMA_IRQHandler+0x6c0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a71      	ldr	r2, [pc, #452]	; (8006514 <HAL_DMA_IRQHandler+0x6c4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a70      	ldr	r2, [pc, #448]	; (8006518 <HAL_DMA_IRQHandler+0x6c8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_DMA_IRQHandler+0x516>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a6e      	ldr	r2, [pc, #440]	; (800651c <HAL_DMA_IRQHandler+0x6cc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10a      	bne.n	800637c <HAL_DMA_IRQHandler+0x52c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e009      	b.n	8006390 <HAL_DMA_IRQHandler+0x540>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf14      	ite	ne
 800638a:	2301      	movne	r3, #1
 800638c:	2300      	moveq	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d03e      	beq.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2210      	movs	r2, #16
 800639e:	409a      	lsls	r2, r3
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d018      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d108      	bne.n	80063d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d024      	beq.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
 80063d0:	e01f      	b.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01b      	beq.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
 80063e2:	e016      	b.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0208 	bic.w	r2, r2, #8
 8006400:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2220      	movs	r2, #32
 800641c:	409a      	lsls	r2, r3
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8110 	beq.w	8006648 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_DMA_IRQHandler+0x690>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2b      	ldr	r2, [pc, #172]	; (80064e4 <HAL_DMA_IRQHandler+0x694>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a29      	ldr	r2, [pc, #164]	; (80064e8 <HAL_DMA_IRQHandler+0x698>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a28      	ldr	r2, [pc, #160]	; (80064ec <HAL_DMA_IRQHandler+0x69c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <HAL_DMA_IRQHandler+0x6a0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <HAL_DMA_IRQHandler+0x6a4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a23      	ldr	r2, [pc, #140]	; (80064f8 <HAL_DMA_IRQHandler+0x6a8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a22      	ldr	r2, [pc, #136]	; (80064fc <HAL_DMA_IRQHandler+0x6ac>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <HAL_DMA_IRQHandler+0x6b0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <HAL_DMA_IRQHandler+0x6b4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_DMA_IRQHandler+0x6b8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_DMA_IRQHandler+0x6bc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_DMA_IRQHandler+0x6c0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a19      	ldr	r2, [pc, #100]	; (8006514 <HAL_DMA_IRQHandler+0x6c4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a17      	ldr	r2, [pc, #92]	; (8006518 <HAL_DMA_IRQHandler+0x6c8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x678>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a16      	ldr	r2, [pc, #88]	; (800651c <HAL_DMA_IRQHandler+0x6cc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d12b      	bne.n	8006520 <HAL_DMA_IRQHandler+0x6d0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e02a      	b.n	8006534 <HAL_DMA_IRQHandler+0x6e4>
 80064de:	bf00      	nop
 80064e0:	40020010 	.word	0x40020010
 80064e4:	40020028 	.word	0x40020028
 80064e8:	40020040 	.word	0x40020040
 80064ec:	40020058 	.word	0x40020058
 80064f0:	40020070 	.word	0x40020070
 80064f4:	40020088 	.word	0x40020088
 80064f8:	400200a0 	.word	0x400200a0
 80064fc:	400200b8 	.word	0x400200b8
 8006500:	40020410 	.word	0x40020410
 8006504:	40020428 	.word	0x40020428
 8006508:	40020440 	.word	0x40020440
 800650c:	40020458 	.word	0x40020458
 8006510:	40020470 	.word	0x40020470
 8006514:	40020488 	.word	0x40020488
 8006518:	400204a0 	.word	0x400204a0
 800651c:	400204b8 	.word	0x400204b8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8087 	beq.w	8006648 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2220      	movs	r2, #32
 8006544:	409a      	lsls	r2, r3
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b04      	cmp	r3, #4
 8006554:	d139      	bne.n	80065ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0216 	bic.w	r2, r2, #22
 8006564:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006574:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <HAL_DMA_IRQHandler+0x736>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0208 	bic.w	r2, r2, #8
 8006594:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	223f      	movs	r2, #63	; 0x3f
 80065a0:	409a      	lsls	r2, r3
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 834a 	beq.w	8006c54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
          }
          return;
 80065c8:	e344      	b.n	8006c54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d018      	beq.n	800660a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d108      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02c      	beq.n	8006648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	e027      	b.n	8006648 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d023      	beq.n	8006648 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	e01e      	b.n	8006648 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10f      	bne.n	8006638 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0210 	bic.w	r2, r2, #16
 8006626:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8306 	beq.w	8006c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8088 	beq.w	8006770 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2204      	movs	r2, #4
 8006664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a7a      	ldr	r2, [pc, #488]	; (8006858 <HAL_DMA_IRQHandler+0xa08>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d04a      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a79      	ldr	r2, [pc, #484]	; (800685c <HAL_DMA_IRQHandler+0xa0c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d045      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a77      	ldr	r2, [pc, #476]	; (8006860 <HAL_DMA_IRQHandler+0xa10>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d040      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a76      	ldr	r2, [pc, #472]	; (8006864 <HAL_DMA_IRQHandler+0xa14>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d03b      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a74      	ldr	r2, [pc, #464]	; (8006868 <HAL_DMA_IRQHandler+0xa18>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d036      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a73      	ldr	r2, [pc, #460]	; (800686c <HAL_DMA_IRQHandler+0xa1c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d031      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a71      	ldr	r2, [pc, #452]	; (8006870 <HAL_DMA_IRQHandler+0xa20>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d02c      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a70      	ldr	r2, [pc, #448]	; (8006874 <HAL_DMA_IRQHandler+0xa24>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d027      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a6e      	ldr	r2, [pc, #440]	; (8006878 <HAL_DMA_IRQHandler+0xa28>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d022      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a6d      	ldr	r2, [pc, #436]	; (800687c <HAL_DMA_IRQHandler+0xa2c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d01d      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a6b      	ldr	r2, [pc, #428]	; (8006880 <HAL_DMA_IRQHandler+0xa30>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d018      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a6a      	ldr	r2, [pc, #424]	; (8006884 <HAL_DMA_IRQHandler+0xa34>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a68      	ldr	r2, [pc, #416]	; (8006888 <HAL_DMA_IRQHandler+0xa38>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00e      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a67      	ldr	r2, [pc, #412]	; (800688c <HAL_DMA_IRQHandler+0xa3c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d009      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a65      	ldr	r2, [pc, #404]	; (8006890 <HAL_DMA_IRQHandler+0xa40>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_DMA_IRQHandler+0x8b8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a64      	ldr	r2, [pc, #400]	; (8006894 <HAL_DMA_IRQHandler+0xa44>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d108      	bne.n	800671a <HAL_DMA_IRQHandler+0x8ca>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e007      	b.n	800672a <HAL_DMA_IRQHandler+0x8da>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d307      	bcc.n	8006746 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f2      	bne.n	800672a <HAL_DMA_IRQHandler+0x8da>
 8006744:	e000      	b.n	8006748 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006746:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2203      	movs	r2, #3
 800675a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800675e:	e003      	b.n	8006768 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8272 	beq.w	8006c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	e26c      	b.n	8006c5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a43      	ldr	r2, [pc, #268]	; (8006898 <HAL_DMA_IRQHandler+0xa48>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d022      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a42      	ldr	r2, [pc, #264]	; (800689c <HAL_DMA_IRQHandler+0xa4c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d01d      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a40      	ldr	r2, [pc, #256]	; (80068a0 <HAL_DMA_IRQHandler+0xa50>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d018      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a3f      	ldr	r2, [pc, #252]	; (80068a4 <HAL_DMA_IRQHandler+0xa54>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a3d      	ldr	r2, [pc, #244]	; (80068a8 <HAL_DMA_IRQHandler+0xa58>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <HAL_DMA_IRQHandler+0xa5c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <HAL_DMA_IRQHandler+0xa60>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x984>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a39      	ldr	r2, [pc, #228]	; (80068b4 <HAL_DMA_IRQHandler+0xa64>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d101      	bne.n	80067d8 <HAL_DMA_IRQHandler+0x988>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_DMA_IRQHandler+0x98a>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 823f 	beq.w	8006c5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ec:	f003 031f 	and.w	r3, r3, #31
 80067f0:	2204      	movs	r2, #4
 80067f2:	409a      	lsls	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80cd 	beq.w	8006998 <HAL_DMA_IRQHandler+0xb48>
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80c7 	beq.w	8006998 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2204      	movs	r2, #4
 8006814:	409a      	lsls	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d049      	beq.n	80068b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8210 	beq.w	8006c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006840:	e20a      	b.n	8006c58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8206 	beq.w	8006c58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006854:	e200      	b.n	8006c58 <HAL_DMA_IRQHandler+0xe08>
 8006856:	bf00      	nop
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8
 8006898:	58025408 	.word	0x58025408
 800689c:	5802541c 	.word	0x5802541c
 80068a0:	58025430 	.word	0x58025430
 80068a4:	58025444 	.word	0x58025444
 80068a8:	58025458 	.word	0x58025458
 80068ac:	5802546c 	.word	0x5802546c
 80068b0:	58025480 	.word	0x58025480
 80068b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d160      	bne.n	8006984 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7f      	ldr	r2, [pc, #508]	; (8006ac4 <HAL_DMA_IRQHandler+0xc74>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d04a      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a7d      	ldr	r2, [pc, #500]	; (8006ac8 <HAL_DMA_IRQHandler+0xc78>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d045      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <HAL_DMA_IRQHandler+0xc7c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d040      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7a      	ldr	r2, [pc, #488]	; (8006ad0 <HAL_DMA_IRQHandler+0xc80>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d03b      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a79      	ldr	r2, [pc, #484]	; (8006ad4 <HAL_DMA_IRQHandler+0xc84>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d036      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a77      	ldr	r2, [pc, #476]	; (8006ad8 <HAL_DMA_IRQHandler+0xc88>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d031      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a76      	ldr	r2, [pc, #472]	; (8006adc <HAL_DMA_IRQHandler+0xc8c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d02c      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a74      	ldr	r2, [pc, #464]	; (8006ae0 <HAL_DMA_IRQHandler+0xc90>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d027      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a73      	ldr	r2, [pc, #460]	; (8006ae4 <HAL_DMA_IRQHandler+0xc94>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d022      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a71      	ldr	r2, [pc, #452]	; (8006ae8 <HAL_DMA_IRQHandler+0xc98>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01d      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a70      	ldr	r2, [pc, #448]	; (8006aec <HAL_DMA_IRQHandler+0xc9c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d018      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6e      	ldr	r2, [pc, #440]	; (8006af0 <HAL_DMA_IRQHandler+0xca0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6d      	ldr	r2, [pc, #436]	; (8006af4 <HAL_DMA_IRQHandler+0xca4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6b      	ldr	r2, [pc, #428]	; (8006af8 <HAL_DMA_IRQHandler+0xca8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a6a      	ldr	r2, [pc, #424]	; (8006afc <HAL_DMA_IRQHandler+0xcac>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_DMA_IRQHandler+0xb12>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a68      	ldr	r2, [pc, #416]	; (8006b00 <HAL_DMA_IRQHandler+0xcb0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d108      	bne.n	8006974 <HAL_DMA_IRQHandler+0xb24>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0208 	bic.w	r2, r2, #8
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e007      	b.n	8006984 <HAL_DMA_IRQHandler+0xb34>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8165 	beq.w	8006c58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006996:	e15f      	b.n	8006c58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2202      	movs	r2, #2
 80069a2:	409a      	lsls	r2, r3
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80c5 	beq.w	8006b38 <HAL_DMA_IRQHandler+0xce8>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80bf 	beq.w	8006b38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2202      	movs	r2, #2
 80069c4:	409a      	lsls	r2, r3
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d018      	beq.n	8006a06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 813a 	beq.w	8006c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069f0:	e134      	b.n	8006c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8130 	beq.w	8006c5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a04:	e12a      	b.n	8006c5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 8089 	bne.w	8006b24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2b      	ldr	r2, [pc, #172]	; (8006ac4 <HAL_DMA_IRQHandler+0xc74>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d04a      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a29      	ldr	r2, [pc, #164]	; (8006ac8 <HAL_DMA_IRQHandler+0xc78>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d045      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a28      	ldr	r2, [pc, #160]	; (8006acc <HAL_DMA_IRQHandler+0xc7c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d040      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <HAL_DMA_IRQHandler+0xc80>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d03b      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <HAL_DMA_IRQHandler+0xc84>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d036      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a23      	ldr	r2, [pc, #140]	; (8006ad8 <HAL_DMA_IRQHandler+0xc88>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d031      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a22      	ldr	r2, [pc, #136]	; (8006adc <HAL_DMA_IRQHandler+0xc8c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d02c      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <HAL_DMA_IRQHandler+0xc90>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d027      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <HAL_DMA_IRQHandler+0xc94>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <HAL_DMA_IRQHandler+0xc98>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d01d      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_DMA_IRQHandler+0xc9c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_DMA_IRQHandler+0xca0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	; (8006af4 <HAL_DMA_IRQHandler+0xca4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <HAL_DMA_IRQHandler+0xca8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	; (8006afc <HAL_DMA_IRQHandler+0xcac>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc62>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <HAL_DMA_IRQHandler+0xcb0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d128      	bne.n	8006b04 <HAL_DMA_IRQHandler+0xcb4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0214 	bic.w	r2, r2, #20
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e027      	b.n	8006b14 <HAL_DMA_IRQHandler+0xcc4>
 8006ac4:	40020010 	.word	0x40020010
 8006ac8:	40020028 	.word	0x40020028
 8006acc:	40020040 	.word	0x40020040
 8006ad0:	40020058 	.word	0x40020058
 8006ad4:	40020070 	.word	0x40020070
 8006ad8:	40020088 	.word	0x40020088
 8006adc:	400200a0 	.word	0x400200a0
 8006ae0:	400200b8 	.word	0x400200b8
 8006ae4:	40020410 	.word	0x40020410
 8006ae8:	40020428 	.word	0x40020428
 8006aec:	40020440 	.word	0x40020440
 8006af0:	40020458 	.word	0x40020458
 8006af4:	40020470 	.word	0x40020470
 8006af8:	40020488 	.word	0x40020488
 8006afc:	400204a0 	.word	0x400204a0
 8006b00:	400204b8 	.word	0x400204b8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 020a 	bic.w	r2, r2, #10
 8006b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8097 	beq.w	8006c5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b36:	e091      	b.n	8006c5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	f003 031f 	and.w	r3, r3, #31
 8006b40:	2208      	movs	r2, #8
 8006b42:	409a      	lsls	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8088 	beq.w	8006c5e <HAL_DMA_IRQHandler+0xe0e>
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8082 	beq.w	8006c5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a41      	ldr	r2, [pc, #260]	; (8006c64 <HAL_DMA_IRQHandler+0xe14>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d04a      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <HAL_DMA_IRQHandler+0xe18>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d045      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a3e      	ldr	r2, [pc, #248]	; (8006c6c <HAL_DMA_IRQHandler+0xe1c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d040      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3c      	ldr	r2, [pc, #240]	; (8006c70 <HAL_DMA_IRQHandler+0xe20>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d03b      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a3b      	ldr	r2, [pc, #236]	; (8006c74 <HAL_DMA_IRQHandler+0xe24>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d036      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a39      	ldr	r2, [pc, #228]	; (8006c78 <HAL_DMA_IRQHandler+0xe28>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d031      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a38      	ldr	r2, [pc, #224]	; (8006c7c <HAL_DMA_IRQHandler+0xe2c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d02c      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a36      	ldr	r2, [pc, #216]	; (8006c80 <HAL_DMA_IRQHandler+0xe30>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d027      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a35      	ldr	r2, [pc, #212]	; (8006c84 <HAL_DMA_IRQHandler+0xe34>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d022      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <HAL_DMA_IRQHandler+0xe38>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d01d      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a32      	ldr	r2, [pc, #200]	; (8006c8c <HAL_DMA_IRQHandler+0xe3c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d018      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a30      	ldr	r2, [pc, #192]	; (8006c90 <HAL_DMA_IRQHandler+0xe40>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a2f      	ldr	r2, [pc, #188]	; (8006c94 <HAL_DMA_IRQHandler+0xe44>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a2d      	ldr	r2, [pc, #180]	; (8006c98 <HAL_DMA_IRQHandler+0xe48>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d009      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <HAL_DMA_IRQHandler+0xe4c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_DMA_IRQHandler+0xdaa>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <HAL_DMA_IRQHandler+0xe50>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d108      	bne.n	8006c0c <HAL_DMA_IRQHandler+0xdbc>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 021c 	bic.w	r2, r2, #28
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e007      	b.n	8006c1c <HAL_DMA_IRQHandler+0xdcc>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 020e 	bic.w	r2, r2, #14
 8006c1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2201      	movs	r2, #1
 8006c26:	409a      	lsls	r2, r3
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
 8006c52:	e004      	b.n	8006c5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c54:	bf00      	nop
 8006c56:	e002      	b.n	8006c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c58:	bf00      	nop
 8006c5a:	e000      	b.n	8006c5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c5e:	3728      	adds	r7, #40	; 0x28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40020010 	.word	0x40020010
 8006c68:	40020028 	.word	0x40020028
 8006c6c:	40020040 	.word	0x40020040
 8006c70:	40020058 	.word	0x40020058
 8006c74:	40020070 	.word	0x40020070
 8006c78:	40020088 	.word	0x40020088
 8006c7c:	400200a0 	.word	0x400200a0
 8006c80:	400200b8 	.word	0x400200b8
 8006c84:	40020410 	.word	0x40020410
 8006c88:	40020428 	.word	0x40020428
 8006c8c:	40020440 	.word	0x40020440
 8006c90:	40020458 	.word	0x40020458
 8006c94:	40020470 	.word	0x40020470
 8006c98:	40020488 	.word	0x40020488
 8006c9c:	400204a0 	.word	0x400204a0
 8006ca0:	400204b8 	.word	0x400204b8

08006ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a7f      	ldr	r2, [pc, #508]	; (8006ec0 <DMA_SetConfig+0x21c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d072      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a7d      	ldr	r2, [pc, #500]	; (8006ec4 <DMA_SetConfig+0x220>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d06d      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a7c      	ldr	r2, [pc, #496]	; (8006ec8 <DMA_SetConfig+0x224>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d068      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a7a      	ldr	r2, [pc, #488]	; (8006ecc <DMA_SetConfig+0x228>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d063      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a79      	ldr	r2, [pc, #484]	; (8006ed0 <DMA_SetConfig+0x22c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d05e      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a77      	ldr	r2, [pc, #476]	; (8006ed4 <DMA_SetConfig+0x230>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d059      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a76      	ldr	r2, [pc, #472]	; (8006ed8 <DMA_SetConfig+0x234>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d054      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a74      	ldr	r2, [pc, #464]	; (8006edc <DMA_SetConfig+0x238>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d04f      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a73      	ldr	r2, [pc, #460]	; (8006ee0 <DMA_SetConfig+0x23c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d04a      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a71      	ldr	r2, [pc, #452]	; (8006ee4 <DMA_SetConfig+0x240>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d045      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a70      	ldr	r2, [pc, #448]	; (8006ee8 <DMA_SetConfig+0x244>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d040      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6e      	ldr	r2, [pc, #440]	; (8006eec <DMA_SetConfig+0x248>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d03b      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ef0 <DMA_SetConfig+0x24c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d036      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a6b      	ldr	r2, [pc, #428]	; (8006ef4 <DMA_SetConfig+0x250>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d031      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a6a      	ldr	r2, [pc, #424]	; (8006ef8 <DMA_SetConfig+0x254>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d02c      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a68      	ldr	r2, [pc, #416]	; (8006efc <DMA_SetConfig+0x258>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d027      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a67      	ldr	r2, [pc, #412]	; (8006f00 <DMA_SetConfig+0x25c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a65      	ldr	r2, [pc, #404]	; (8006f04 <DMA_SetConfig+0x260>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01d      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a64      	ldr	r2, [pc, #400]	; (8006f08 <DMA_SetConfig+0x264>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a62      	ldr	r2, [pc, #392]	; (8006f0c <DMA_SetConfig+0x268>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a61      	ldr	r2, [pc, #388]	; (8006f10 <DMA_SetConfig+0x26c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5f      	ldr	r2, [pc, #380]	; (8006f14 <DMA_SetConfig+0x270>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a5e      	ldr	r2, [pc, #376]	; (8006f18 <DMA_SetConfig+0x274>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <DMA_SetConfig+0x10a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5c      	ldr	r2, [pc, #368]	; (8006f1c <DMA_SetConfig+0x278>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <DMA_SetConfig+0x10e>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <DMA_SetConfig+0x110>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00d      	beq.n	8006dd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006dc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a39      	ldr	r2, [pc, #228]	; (8006ec0 <DMA_SetConfig+0x21c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d04a      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <DMA_SetConfig+0x220>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d045      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a36      	ldr	r2, [pc, #216]	; (8006ec8 <DMA_SetConfig+0x224>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d040      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a35      	ldr	r2, [pc, #212]	; (8006ecc <DMA_SetConfig+0x228>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d03b      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a33      	ldr	r2, [pc, #204]	; (8006ed0 <DMA_SetConfig+0x22c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d036      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a32      	ldr	r2, [pc, #200]	; (8006ed4 <DMA_SetConfig+0x230>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d031      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a30      	ldr	r2, [pc, #192]	; (8006ed8 <DMA_SetConfig+0x234>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d02c      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2f      	ldr	r2, [pc, #188]	; (8006edc <DMA_SetConfig+0x238>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d027      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <DMA_SetConfig+0x23c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d022      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <DMA_SetConfig+0x240>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d01d      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <DMA_SetConfig+0x244>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d018      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a29      	ldr	r2, [pc, #164]	; (8006eec <DMA_SetConfig+0x248>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a27      	ldr	r2, [pc, #156]	; (8006ef0 <DMA_SetConfig+0x24c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00e      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <DMA_SetConfig+0x250>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d009      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <DMA_SetConfig+0x254>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d004      	beq.n	8006e74 <DMA_SetConfig+0x1d0>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a23      	ldr	r2, [pc, #140]	; (8006efc <DMA_SetConfig+0x258>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d101      	bne.n	8006e78 <DMA_SetConfig+0x1d4>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <DMA_SetConfig+0x1d6>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d059      	beq.n	8006f32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	223f      	movs	r2, #63	; 0x3f
 8006e88:	409a      	lsls	r2, r3
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b40      	cmp	r3, #64	; 0x40
 8006eac:	d138      	bne.n	8006f20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ebe:	e086      	b.n	8006fce <DMA_SetConfig+0x32a>
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	58025408 	.word	0x58025408
 8006f04:	5802541c 	.word	0x5802541c
 8006f08:	58025430 	.word	0x58025430
 8006f0c:	58025444 	.word	0x58025444
 8006f10:	58025458 	.word	0x58025458
 8006f14:	5802546c 	.word	0x5802546c
 8006f18:	58025480 	.word	0x58025480
 8006f1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]
}
 8006f30:	e04d      	b.n	8006fce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a29      	ldr	r2, [pc, #164]	; (8006fdc <DMA_SetConfig+0x338>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d022      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <DMA_SetConfig+0x33c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01d      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a26      	ldr	r2, [pc, #152]	; (8006fe4 <DMA_SetConfig+0x340>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d018      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a24      	ldr	r2, [pc, #144]	; (8006fe8 <DMA_SetConfig+0x344>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a23      	ldr	r2, [pc, #140]	; (8006fec <DMA_SetConfig+0x348>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00e      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <DMA_SetConfig+0x34c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d009      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a20      	ldr	r2, [pc, #128]	; (8006ff4 <DMA_SetConfig+0x350>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <DMA_SetConfig+0x2de>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <DMA_SetConfig+0x354>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d101      	bne.n	8006f86 <DMA_SetConfig+0x2e2>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <DMA_SetConfig+0x2e4>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2201      	movs	r2, #1
 8006f96:	409a      	lsls	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	d108      	bne.n	8006fbe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	60da      	str	r2, [r3, #12]
}
 8006fbc:	e007      	b.n	8006fce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	60da      	str	r2, [r3, #12]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	58025408 	.word	0x58025408
 8006fe0:	5802541c 	.word	0x5802541c
 8006fe4:	58025430 	.word	0x58025430
 8006fe8:	58025444 	.word	0x58025444
 8006fec:	58025458 	.word	0x58025458
 8006ff0:	5802546c 	.word	0x5802546c
 8006ff4:	58025480 	.word	0x58025480
 8006ff8:	58025494 	.word	0x58025494

08006ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a42      	ldr	r2, [pc, #264]	; (8007114 <DMA_CalcBaseAndBitshift+0x118>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d04a      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a41      	ldr	r2, [pc, #260]	; (8007118 <DMA_CalcBaseAndBitshift+0x11c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d045      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a3f      	ldr	r2, [pc, #252]	; (800711c <DMA_CalcBaseAndBitshift+0x120>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d040      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a3e      	ldr	r2, [pc, #248]	; (8007120 <DMA_CalcBaseAndBitshift+0x124>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d03b      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a3c      	ldr	r2, [pc, #240]	; (8007124 <DMA_CalcBaseAndBitshift+0x128>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d036      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3b      	ldr	r2, [pc, #236]	; (8007128 <DMA_CalcBaseAndBitshift+0x12c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d031      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a39      	ldr	r2, [pc, #228]	; (800712c <DMA_CalcBaseAndBitshift+0x130>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d02c      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a38      	ldr	r2, [pc, #224]	; (8007130 <DMA_CalcBaseAndBitshift+0x134>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d027      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a36      	ldr	r2, [pc, #216]	; (8007134 <DMA_CalcBaseAndBitshift+0x138>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d022      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a35      	ldr	r2, [pc, #212]	; (8007138 <DMA_CalcBaseAndBitshift+0x13c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d01d      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a33      	ldr	r2, [pc, #204]	; (800713c <DMA_CalcBaseAndBitshift+0x140>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d018      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a32      	ldr	r2, [pc, #200]	; (8007140 <DMA_CalcBaseAndBitshift+0x144>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d013      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a30      	ldr	r2, [pc, #192]	; (8007144 <DMA_CalcBaseAndBitshift+0x148>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00e      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2f      	ldr	r2, [pc, #188]	; (8007148 <DMA_CalcBaseAndBitshift+0x14c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d009      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a2d      	ldr	r2, [pc, #180]	; (800714c <DMA_CalcBaseAndBitshift+0x150>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d004      	beq.n	80070a4 <DMA_CalcBaseAndBitshift+0xa8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a2c      	ldr	r2, [pc, #176]	; (8007150 <DMA_CalcBaseAndBitshift+0x154>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d101      	bne.n	80070a8 <DMA_CalcBaseAndBitshift+0xac>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <DMA_CalcBaseAndBitshift+0xae>
 80070a8:	2300      	movs	r3, #0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d024      	beq.n	80070f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	3b10      	subs	r3, #16
 80070b6:	4a27      	ldr	r2, [pc, #156]	; (8007154 <DMA_CalcBaseAndBitshift+0x158>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	091b      	lsrs	r3, r3, #4
 80070be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	4a24      	ldr	r2, [pc, #144]	; (8007158 <DMA_CalcBaseAndBitshift+0x15c>)
 80070c8:	5cd3      	ldrb	r3, [r2, r3]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d908      	bls.n	80070e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	4b1f      	ldr	r3, [pc, #124]	; (800715c <DMA_CalcBaseAndBitshift+0x160>)
 80070de:	4013      	ands	r3, r2
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	659a      	str	r2, [r3, #88]	; 0x58
 80070e6:	e00d      	b.n	8007104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	4b1b      	ldr	r3, [pc, #108]	; (800715c <DMA_CalcBaseAndBitshift+0x160>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6593      	str	r3, [r2, #88]	; 0x58
 80070f6:	e005      	b.n	8007104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40020010 	.word	0x40020010
 8007118:	40020028 	.word	0x40020028
 800711c:	40020040 	.word	0x40020040
 8007120:	40020058 	.word	0x40020058
 8007124:	40020070 	.word	0x40020070
 8007128:	40020088 	.word	0x40020088
 800712c:	400200a0 	.word	0x400200a0
 8007130:	400200b8 	.word	0x400200b8
 8007134:	40020410 	.word	0x40020410
 8007138:	40020428 	.word	0x40020428
 800713c:	40020440 	.word	0x40020440
 8007140:	40020458 	.word	0x40020458
 8007144:	40020470 	.word	0x40020470
 8007148:	40020488 	.word	0x40020488
 800714c:	400204a0 	.word	0x400204a0
 8007150:	400204b8 	.word	0x400204b8
 8007154:	aaaaaaab 	.word	0xaaaaaaab
 8007158:	0801b5b4 	.word	0x0801b5b4
 800715c:	fffffc00 	.word	0xfffffc00

08007160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d120      	bne.n	80071b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	2b03      	cmp	r3, #3
 800717a:	d858      	bhi.n	800722e <DMA_CheckFifoParam+0xce>
 800717c:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <DMA_CheckFifoParam+0x24>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	08007195 	.word	0x08007195
 8007188:	080071a7 	.word	0x080071a7
 800718c:	08007195 	.word	0x08007195
 8007190:	0800722f 	.word	0x0800722f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d048      	beq.n	8007232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071a4:	e045      	b.n	8007232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071ae:	d142      	bne.n	8007236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071b4:	e03f      	b.n	8007236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071be:	d123      	bne.n	8007208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d838      	bhi.n	800723a <DMA_CheckFifoParam+0xda>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <DMA_CheckFifoParam+0x70>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071e7 	.word	0x080071e7
 80071d8:	080071e1 	.word	0x080071e1
 80071dc:	080071f9 	.word	0x080071f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
        break;
 80071e4:	e030      	b.n	8007248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d025      	beq.n	800723e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071f6:	e022      	b.n	800723e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007200:	d11f      	bne.n	8007242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007206:	e01c      	b.n	8007242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	2b02      	cmp	r3, #2
 800720e:	d902      	bls.n	8007216 <DMA_CheckFifoParam+0xb6>
 8007210:	2b03      	cmp	r3, #3
 8007212:	d003      	beq.n	800721c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007214:	e018      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
        break;
 800721a:	e015      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
    break;
 800722c:	e00b      	b.n	8007246 <DMA_CheckFifoParam+0xe6>
        break;
 800722e:	bf00      	nop
 8007230:	e00a      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        break;
 8007232:	bf00      	nop
 8007234:	e008      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        break;
 8007236:	bf00      	nop
 8007238:	e006      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        break;
 800723a:	bf00      	nop
 800723c:	e004      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        break;
 800723e:	bf00      	nop
 8007240:	e002      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
        break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <DMA_CheckFifoParam+0xe8>
    break;
 8007246:	bf00      	nop
    }
  }

  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop

08007258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a38      	ldr	r2, [pc, #224]	; (800734c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a36      	ldr	r2, [pc, #216]	; (8007350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a35      	ldr	r2, [pc, #212]	; (8007354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a33      	ldr	r2, [pc, #204]	; (8007358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a32      	ldr	r2, [pc, #200]	; (800735c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a30      	ldr	r2, [pc, #192]	; (8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a2f      	ldr	r2, [pc, #188]	; (8007364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a2d      	ldr	r2, [pc, #180]	; (8007368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d101      	bne.n	80072ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01a      	beq.n	80072f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	3b08      	subs	r3, #8
 80072c8:	4a28      	ldr	r2, [pc, #160]	; (800736c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	091b      	lsrs	r3, r3, #4
 80072d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4b26      	ldr	r3, [pc, #152]	; (8007370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a24      	ldr	r2, [pc, #144]	; (8007374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	2201      	movs	r2, #1
 80072ee:	409a      	lsls	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80072f4:	e024      	b.n	8007340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3b10      	subs	r3, #16
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007300:	fba2 2303 	umull	r2, r3, r2, r3
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4a1c      	ldr	r2, [pc, #112]	; (800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d806      	bhi.n	800731e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d902      	bls.n	800731e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3308      	adds	r3, #8
 800731c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a16      	ldr	r2, [pc, #88]	; (8007388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	58025408 	.word	0x58025408
 8007350:	5802541c 	.word	0x5802541c
 8007354:	58025430 	.word	0x58025430
 8007358:	58025444 	.word	0x58025444
 800735c:	58025458 	.word	0x58025458
 8007360:	5802546c 	.word	0x5802546c
 8007364:	58025480 	.word	0x58025480
 8007368:	58025494 	.word	0x58025494
 800736c:	cccccccd 	.word	0xcccccccd
 8007370:	16009600 	.word	0x16009600
 8007374:	58025880 	.word	0x58025880
 8007378:	aaaaaaab 	.word	0xaaaaaaab
 800737c:	400204b8 	.word	0x400204b8
 8007380:	4002040f 	.word	0x4002040f
 8007384:	10008200 	.word	0x10008200
 8007388:	40020880 	.word	0x40020880

0800738c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d04a      	beq.n	8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d847      	bhi.n	8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a25      	ldr	r2, [pc, #148]	; (8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d022      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a24      	ldr	r2, [pc, #144]	; (8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d01d      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a22      	ldr	r2, [pc, #136]	; (800744c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d018      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00e      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d009      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1c      	ldr	r2, [pc, #112]	; (800745c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d101      	bne.n	80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80073fc:	2300      	movs	r3, #0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4b17      	ldr	r3, [pc, #92]	; (8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a15      	ldr	r2, [pc, #84]	; (8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007414:	671a      	str	r2, [r3, #112]	; 0x70
 8007416:	e009      	b.n	800742c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4b14      	ldr	r3, [pc, #80]	; (800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	461a      	mov	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a11      	ldr	r2, [pc, #68]	; (8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800742a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3b01      	subs	r3, #1
 8007430:	2201      	movs	r2, #1
 8007432:	409a      	lsls	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	58025408 	.word	0x58025408
 8007448:	5802541c 	.word	0x5802541c
 800744c:	58025430 	.word	0x58025430
 8007450:	58025444 	.word	0x58025444
 8007454:	58025458 	.word	0x58025458
 8007458:	5802546c 	.word	0x5802546c
 800745c:	58025480 	.word	0x58025480
 8007460:	58025494 	.word	0x58025494
 8007464:	1600963f 	.word	0x1600963f
 8007468:	58025940 	.word	0x58025940
 800746c:	1000823f 	.word	0x1000823f
 8007470:	40020940 	.word	0x40020940

08007474 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b098      	sub	sp, #96	; 0x60
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800747c:	4a84      	ldr	r2, [pc, #528]	; (8007690 <HAL_FDCAN_Init+0x21c>)
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	4611      	mov	r1, r2
 8007484:	224c      	movs	r2, #76	; 0x4c
 8007486:	4618      	mov	r0, r3
 8007488:	f010 fcd1 	bl	8017e2e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e1c6      	b.n	8007824 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a7e      	ldr	r2, [pc, #504]	; (8007694 <HAL_FDCAN_Init+0x220>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d106      	bne.n	80074ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074a8:	461a      	mov	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fb fa48 	bl	8002958 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0210 	bic.w	r2, r2, #16
 80074d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074d8:	f7fc fa32 	bl	8003940 <HAL_GetTick>
 80074dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80074de:	e014      	b.n	800750a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80074e0:	f7fc fa2e 	bl	8003940 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b0a      	cmp	r3, #10
 80074ec:	d90d      	bls.n	800750a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f4:	f043 0201 	orr.w	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e18c      	b.n	8007824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b08      	cmp	r3, #8
 8007516:	d0e3      	beq.n	80074e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007528:	f7fc fa0a 	bl	8003940 <HAL_GetTick>
 800752c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800752e:	e014      	b.n	800755a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007530:	f7fc fa06 	bl	8003940 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b0a      	cmp	r3, #10
 800753c:	d90d      	bls.n	800755a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2203      	movs	r2, #3
 8007552:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e164      	b.n	8007824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0e3      	beq.n	8007530 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0202 	orr.w	r2, r2, #2
 8007576:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7c1b      	ldrb	r3, [r3, #16]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d108      	bne.n	8007592 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758e:	619a      	str	r2, [r3, #24]
 8007590:	e007      	b.n	80075a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	7c5b      	ldrb	r3, [r3, #17]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d108      	bne.n	80075bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b8:	619a      	str	r2, [r3, #24]
 80075ba:	e007      	b.n	80075cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7c9b      	ldrb	r3, [r3, #18]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d108      	bne.n	80075e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075e2:	619a      	str	r2, [r3, #24]
 80075e4:	e007      	b.n	80075f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800761a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0210 	bic.w	r2, r2, #16
 800762a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d108      	bne.n	8007646 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0204 	orr.w	r2, r2, #4
 8007642:	619a      	str	r2, [r3, #24]
 8007644:	e030      	b.n	80076a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d02c      	beq.n	80076a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d020      	beq.n	8007698 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007664:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0210 	orr.w	r2, r2, #16
 8007674:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d114      	bne.n	80076a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0220 	orr.w	r2, r2, #32
 800768c:	619a      	str	r2, [r3, #24]
 800768e:	e00b      	b.n	80076a8 <HAL_FDCAN_Init+0x234>
 8007690:	0801b4ac 	.word	0x0801b4ac
 8007694:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0220 	orr.w	r2, r2, #32
 80076a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80076c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80076d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80076d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076dc:	d115      	bne.n	800770a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	3b01      	subs	r3, #1
 80076ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80076ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	3b01      	subs	r3, #1
 80076f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80076f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	3b01      	subs	r3, #1
 8007700:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007706:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007708:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007730:	4413      	add	r3, r2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d011      	beq.n	800775a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800773e:	f023 0107 	bic.w	r1, r3, #7
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	3360      	adds	r3, #96	; 0x60
 800774a:	443b      	add	r3, r7
 800774c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d011      	beq.n	8007786 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800776a:	f023 0107 	bic.w	r1, r3, #7
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	3360      	adds	r3, #96	; 0x60
 8007776:	443b      	add	r3, r7
 8007778:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800778a:	2b00      	cmp	r3, #0
 800778c:	d012      	beq.n	80077b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007796:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	3360      	adds	r3, #96	; 0x60
 80077a2:	443b      	add	r3, r7
 80077a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077a8:	011a      	lsls	r2, r3, #4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d012      	beq.n	80077e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	3360      	adds	r3, #96	; 0x60
 80077d0:	443b      	add	r3, r7
 80077d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80077d6:	021a      	lsls	r2, r3, #8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <HAL_FDCAN_Init+0x3b8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d107      	bne.n	80077fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f022 0203 	bic.w	r2, r2, #3
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f80b 	bl	8007830 <FDCAN_CalcultateRamBlockAddresses>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007820:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007824:	4618      	mov	r0, r3
 8007826:	3760      	adds	r7, #96	; 0x60
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	4000a000 	.word	0x4000a000

08007830 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007846:	4ba7      	ldr	r3, [pc, #668]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007848:	4013      	ands	r3, r2
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	0091      	lsls	r1, r2, #2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	430b      	orrs	r3, r1
 8007854:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007860:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	041a      	lsls	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4413      	add	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007886:	4b97      	ldr	r3, [pc, #604]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007888:	4013      	ands	r3, r2
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	0091      	lsls	r1, r2, #2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	430b      	orrs	r3, r1
 8007894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	041a      	lsls	r2, r3, #16
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	4413      	add	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80078c8:	4b86      	ldr	r3, [pc, #536]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	0091      	lsls	r1, r2, #2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	430b      	orrs	r3, r1
 80078d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	041a      	lsls	r2, r3, #16
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007910:	4b74      	ldr	r3, [pc, #464]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007912:	4013      	ands	r3, r2
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	0091      	lsls	r1, r2, #2
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	430b      	orrs	r3, r1
 800791e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800792a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	041a      	lsls	r2, r3, #16
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007958:	4b62      	ldr	r3, [pc, #392]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800795a:	4013      	ands	r3, r2
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	0091      	lsls	r1, r2, #2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	430b      	orrs	r3, r1
 8007966:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007972:	fb02 f303 	mul.w	r3, r2, r3
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	4413      	add	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007984:	4b57      	ldr	r3, [pc, #348]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007986:	4013      	ands	r3, r2
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	0091      	lsls	r1, r2, #2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800799e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	041a      	lsls	r2, r3, #16
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	4413      	add	r3, r2
 80079bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80079c6:	4b47      	ldr	r3, [pc, #284]	; (8007ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	0091      	lsls	r1, r2, #2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	430b      	orrs	r3, r1
 80079d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80079e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	041a      	lsls	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80079fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a04:	061a      	lsls	r2, r3, #24
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a14:	4b34      	ldr	r3, [pc, #208]	; (8007ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a16:	4413      	add	r3, r2
 8007a18:	009a      	lsls	r2, r3, #2
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	441a      	add	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007a4a:	fb01 f303 	mul.w	r3, r1, r3
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007a62:	fb01 f303 	mul.w	r3, r1, r3
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007a7a:	fb01 f303 	mul.w	r3, r1, r3
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	441a      	add	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	441a      	add	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	4a04      	ldr	r2, [pc, #16]	; (8007aec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d915      	bls.n	8007b0c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007ae0:	e006      	b.n	8007af0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007ae2:	bf00      	nop
 8007ae4:	ffff0003 	.word	0xffff0003
 8007ae8:	10002b00 	.word	0x10002b00
 8007aec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007af6:	f043 0220 	orr.w	r2, r3, #32
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2203      	movs	r2, #3
 8007b04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e010      	b.n	8007b2e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e005      	b.n	8007b20 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3f3      	bcc.n	8007b14 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	; 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b4a:	4b86      	ldr	r3, [pc, #536]	; (8007d64 <HAL_GPIO_Init+0x228>)
 8007b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b4e:	e18c      	b.n	8007e6a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	2101      	movs	r1, #1
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 817e 	beq.w	8007e64 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d005      	beq.n	8007b80 <HAL_GPIO_Init+0x44>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d130      	bne.n	8007be2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	43db      	mvns	r3, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4013      	ands	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	f003 0201 	and.w	r2, r3, #1
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d017      	beq.n	8007c1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d123      	bne.n	8007c72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	08da      	lsrs	r2, r3, #3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3208      	adds	r2, #8
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	220f      	movs	r2, #15
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	43db      	mvns	r3, r3
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	691a      	ldr	r2, [r3, #16]
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	08da      	lsrs	r2, r3, #3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3208      	adds	r2, #8
 8007c6c:	69b9      	ldr	r1, [r7, #24]
 8007c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4013      	ands	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0203 	and.w	r2, r3, #3
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80d8 	beq.w	8007e64 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cb4:	4b2c      	ldr	r3, [pc, #176]	; (8007d68 <HAL_GPIO_Init+0x22c>)
 8007cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cba:	4a2b      	ldr	r2, [pc, #172]	; (8007d68 <HAL_GPIO_Init+0x22c>)
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007cc4:	4b28      	ldr	r3, [pc, #160]	; (8007d68 <HAL_GPIO_Init+0x22c>)
 8007cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <HAL_GPIO_Init+0x230>)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	089b      	lsrs	r3, r3, #2
 8007cd8:	3302      	adds	r3, #2
 8007cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	220f      	movs	r2, #15
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <HAL_GPIO_Init+0x234>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d04a      	beq.n	8007d94 <HAL_GPIO_Init+0x258>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_GPIO_Init+0x238>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d02b      	beq.n	8007d5e <HAL_GPIO_Init+0x222>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_GPIO_Init+0x23c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d025      	beq.n	8007d5a <HAL_GPIO_Init+0x21e>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	; (8007d7c <HAL_GPIO_Init+0x240>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01f      	beq.n	8007d56 <HAL_GPIO_Init+0x21a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <HAL_GPIO_Init+0x244>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d019      	beq.n	8007d52 <HAL_GPIO_Init+0x216>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_GPIO_Init+0x248>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_GPIO_Init+0x212>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_GPIO_Init+0x24c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00d      	beq.n	8007d4a <HAL_GPIO_Init+0x20e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a16      	ldr	r2, [pc, #88]	; (8007d8c <HAL_GPIO_Init+0x250>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d007      	beq.n	8007d46 <HAL_GPIO_Init+0x20a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <HAL_GPIO_Init+0x254>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d101      	bne.n	8007d42 <HAL_GPIO_Init+0x206>
 8007d3e:	2309      	movs	r3, #9
 8007d40:	e029      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d42:	230a      	movs	r3, #10
 8007d44:	e027      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d46:	2307      	movs	r3, #7
 8007d48:	e025      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d4a:	2306      	movs	r3, #6
 8007d4c:	e023      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d4e:	2305      	movs	r3, #5
 8007d50:	e021      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d52:	2304      	movs	r3, #4
 8007d54:	e01f      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01d      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e01b      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e019      	b.n	8007d96 <HAL_GPIO_Init+0x25a>
 8007d62:	bf00      	nop
 8007d64:	58000080 	.word	0x58000080
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	58000400 	.word	0x58000400
 8007d70:	58020000 	.word	0x58020000
 8007d74:	58020400 	.word	0x58020400
 8007d78:	58020800 	.word	0x58020800
 8007d7c:	58020c00 	.word	0x58020c00
 8007d80:	58021000 	.word	0x58021000
 8007d84:	58021400 	.word	0x58021400
 8007d88:	58021800 	.word	0x58021800
 8007d8c:	58021c00 	.word	0x58021c00
 8007d90:	58022400 	.word	0x58022400
 8007d94:	2300      	movs	r3, #0
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	f002 0203 	and.w	r2, r2, #3
 8007d9c:	0092      	lsls	r2, r2, #2
 8007d9e:	4093      	lsls	r3, r2
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007da6:	4938      	ldr	r1, [pc, #224]	; (8007e88 <HAL_GPIO_Init+0x34c>)
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	089b      	lsrs	r3, r3, #2
 8007dac:	3302      	adds	r3, #2
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	43db      	mvns	r3, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	43db      	mvns	r3, r3
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	4013      	ands	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	43db      	mvns	r3, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4013      	ands	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	3301      	adds	r3, #1
 8007e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	fa22 f303 	lsr.w	r3, r2, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f47f ae6b 	bne.w	8007b50 <HAL_GPIO_Init+0x14>
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	3724      	adds	r7, #36	; 0x24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	58000400 	.word	0x58000400

08007e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	887b      	ldrh	r3, [r7, #2]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e001      	b.n	8007eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	807b      	strh	r3, [r7, #2]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ecc:	787b      	ldrb	r3, [r7, #1]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ed2:	887a      	ldrh	r2, [r7, #2]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ed8:	e003      	b.n	8007ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	041a      	lsls	r2, r3, #16
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	619a      	str	r2, [r3, #24]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e07f      	b.n	8008002 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fa fd86 	bl	8002a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	; 0x24
 8007f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0201 	bic.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d107      	bne.n	8007f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	e006      	b.n	8007f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d104      	bne.n	8007f8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6859      	ldr	r1, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b1d      	ldr	r3, [pc, #116]	; (800800c <HAL_I2C_Init+0x11c>)
 8007f96:	430b      	orrs	r3, r1
 8007f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691a      	ldr	r2, [r3, #16]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	69d9      	ldr	r1, [r3, #28]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0201 	orr.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	02008000 	.word	0x02008000

08008010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b20      	cmp	r3, #32
 8008024:	d138      	bne.n	8008098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008030:	2302      	movs	r3, #2
 8008032:	e032      	b.n	800809a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	; 0x24
 8008040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e000      	b.n	800809a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d139      	bne.n	8008130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e033      	b.n	8008132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2224      	movs	r2, #36	; 0x24
 80080d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	e000      	b.n	8008132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
  }
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800813e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008140:	b08f      	sub	sp, #60	; 0x3c
 8008142:	af0a      	add	r7, sp, #40	; 0x28
 8008144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e116      	b.n	800837e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f00e fb70 	bl	8016850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2203      	movs	r2, #3
 8008174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f00a fc9f 	bl	8012ad2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	687e      	ldr	r6, [r7, #4]
 800819c:	466d      	mov	r5, sp
 800819e:	f106 0410 	add.w	r4, r6, #16
 80081a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80081b2:	1d33      	adds	r3, r6, #4
 80081b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081b6:	6838      	ldr	r0, [r7, #0]
 80081b8:	f00a fb6a 	bl	8012890 <USB_CoreInit>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e0d7      	b.n	800837e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f00a fc8d 	bl	8012af4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
 80081de:	e04a      	b.n	8008276 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081e0:	7bfa      	ldrb	r2, [r7, #15]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	333d      	adds	r3, #61	; 0x3d
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081f4:	7bfa      	ldrb	r2, [r7, #15]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	333c      	adds	r3, #60	; 0x3c
 8008204:	7bfa      	ldrb	r2, [r7, #15]
 8008206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008208:	7bfa      	ldrb	r2, [r7, #15]
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	b298      	uxth	r0, r3
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3356      	adds	r3, #86	; 0x56
 800821c:	4602      	mov	r2, r0
 800821e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	3340      	adds	r3, #64	; 0x40
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008234:	7bfa      	ldrb	r2, [r7, #15]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	3344      	adds	r3, #68	; 0x44
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	3348      	adds	r3, #72	; 0x48
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	334c      	adds	r3, #76	; 0x4c
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	3301      	adds	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
 8008276:	7bfa      	ldrb	r2, [r7, #15]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d3af      	bcc.n	80081e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e044      	b.n	8008310 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008286:	7bfa      	ldrb	r2, [r7, #15]
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800829c:	7bfa      	ldrb	r2, [r7, #15]
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80082ae:	7bfa      	ldrb	r2, [r7, #15]
 80082b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082c8:	7bfa      	ldrb	r2, [r7, #15]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082f4:	7bfa      	ldrb	r2, [r7, #15]
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4613      	mov	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3301      	adds	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d3b5      	bcc.n	8008286 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	687e      	ldr	r6, [r7, #4]
 8008322:	466d      	mov	r5, sp
 8008324:	f106 0410 	add.w	r4, r6, #16
 8008328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800832a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800832c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800832e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008334:	e885 0003 	stmia.w	r5, {r0, r1}
 8008338:	1d33      	adds	r3, r6, #4
 800833a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800833c:	6838      	ldr	r0, [r7, #0]
 800833e:	f00a fc25 	bl	8012b8c <USB_DevInit>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e014      	b.n	800837e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b01      	cmp	r3, #1
 800836a:	d102      	bne.n	8008372 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 f96f 	bl	8009650 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f00b fc67 	bl	8013c4a <USB_DevDisconnect>

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008386 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_PCD_Start+0x1c>
 800839e:	2302      	movs	r3, #2
 80083a0:	e022      	b.n	80083e8 <HAL_PCD_Start+0x62>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d105      	bne.n	80083ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f00a fb6e 	bl	8012ab0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f00b fc15 	bl	8013c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083f0:	b590      	push	{r4, r7, lr}
 80083f2:	b08d      	sub	sp, #52	; 0x34
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f00b fcd3 	bl	8013db2 <USB_GetMode>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	f040 84b7 	bne.w	8008d82 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f00b fc37 	bl	8013c8c <USB_ReadInterrupts>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 84ad 	beq.w	8008d80 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	0a1b      	lsrs	r3, r3, #8
 8008430:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f00b fc24 	bl	8013c8c <USB_ReadInterrupts>
 8008444:	4603      	mov	r3, r0
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b02      	cmp	r3, #2
 800844c:	d107      	bne.n	800845e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f002 0202 	and.w	r2, r2, #2
 800845c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f00b fc12 	bl	8013c8c <USB_ReadInterrupts>
 8008468:	4603      	mov	r3, r0
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b10      	cmp	r3, #16
 8008470:	d161      	bne.n	8008536 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 0210 	bic.w	r2, r2, #16
 8008480:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	4613      	mov	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	3304      	adds	r3, #4
 80084a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	0c5b      	lsrs	r3, r3, #17
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d124      	bne.n	80084f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d035      	beq.n	8008526 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	091b      	lsrs	r3, r3, #4
 80084c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80084c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	6a38      	ldr	r0, [r7, #32]
 80084ce:	f00b fa49 	bl	8013964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084de:	441a      	add	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	091b      	lsrs	r3, r3, #4
 80084ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084f0:	441a      	add	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	615a      	str	r2, [r3, #20]
 80084f6:	e016      	b.n	8008526 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	0c5b      	lsrs	r3, r3, #17
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	2b06      	cmp	r3, #6
 8008502:	d110      	bne.n	8008526 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800850a:	2208      	movs	r2, #8
 800850c:	4619      	mov	r1, r3
 800850e:	6a38      	ldr	r0, [r7, #32]
 8008510:	f00b fa28 	bl	8013964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	695a      	ldr	r2, [r3, #20]
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008520:	441a      	add	r2, r3
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0210 	orr.w	r2, r2, #16
 8008534:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f00b fba6 	bl	8013c8c <USB_ReadInterrupts>
 8008540:	4603      	mov	r3, r0
 8008542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008546:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800854a:	f040 80a7 	bne.w	800869c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f00b fbab 	bl	8013cb2 <USB_ReadDevAllOutEpInterrupt>
 800855c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800855e:	e099      	b.n	8008694 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 808e 	beq.w	8008688 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f00b fbcf 	bl	8013d1a <USB_ReadDevOutEPInterrupt>
 800857c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00c      	beq.n	80085a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	461a      	mov	r2, r3
 8008596:	2301      	movs	r3, #1
 8008598:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800859a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fed1 	bl	8009344 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f003 0308 	and.w	r3, r3, #8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00c      	beq.n	80085c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	461a      	mov	r2, r3
 80085ba:	2308      	movs	r3, #8
 80085bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80085be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 ffa7 	bl	8009514 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	461a      	mov	r2, r3
 80085de:	2310      	movs	r3, #16
 80085e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d030      	beq.n	800864e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b80      	cmp	r3, #128	; 0x80
 80085f6:	d109      	bne.n	800860c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800860a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800860c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	3304      	adds	r3, #4
 8008620:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d108      	bne.n	800863c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	b2db      	uxtb	r3, r3
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f00e fa02 	bl	8016a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	461a      	mov	r2, r3
 800864a:	2302      	movs	r3, #2
 800864c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b00      	cmp	r3, #0
 8008656:	d008      	beq.n	800866a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	461a      	mov	r2, r3
 8008666:	2320      	movs	r3, #32
 8008668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	461a      	mov	r2, r3
 8008682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008686:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	3301      	adds	r3, #1
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	085b      	lsrs	r3, r3, #1
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	f47f af62 	bne.w	8008560 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f00b faf3 	bl	8013c8c <USB_ReadInterrupts>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086b0:	f040 80db 	bne.w	800886a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f00b fb14 	bl	8013ce6 <USB_ReadDevAllInEpInterrupt>
 80086be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80086c4:	e0cd      	b.n	8008862 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80c2 	beq.w	8008856 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f00b fb3a 	bl	8013d56 <USB_ReadDevInEPInterrupt>
 80086e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d057      	beq.n	800879e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	2201      	movs	r2, #1
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	43db      	mvns	r3, r3
 8008708:	69f9      	ldr	r1, [r7, #28]
 800870a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800870e:	4013      	ands	r3, r2
 8008710:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	461a      	mov	r2, r3
 8008720:	2301      	movs	r3, #1
 8008722:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d132      	bne.n	8008792 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	3348      	adds	r3, #72	; 0x48
 800873c:	6819      	ldr	r1, [r3, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4403      	add	r3, r0
 800874c:	3344      	adds	r3, #68	; 0x44
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4419      	add	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008756:	4613      	mov	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4403      	add	r3, r0
 8008760:	3348      	adds	r3, #72	; 0x48
 8008762:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	d113      	bne.n	8008792 <HAL_PCD_IRQHandler+0x3a2>
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876e:	4613      	mov	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	334c      	adds	r3, #76	; 0x4c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800878a:	461a      	mov	r2, r3
 800878c:	2101      	movs	r1, #1
 800878e:	f00b fb43 	bl	8013e18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	b2db      	uxtb	r3, r3
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f00e f8cc 	bl	8016936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b4:	461a      	mov	r2, r3
 80087b6:	2308      	movs	r3, #8
 80087b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	461a      	mov	r2, r3
 80087d2:	2310      	movs	r3, #16
 80087d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	461a      	mov	r2, r3
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d023      	beq.n	8008844 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80087fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087fe:	6a38      	ldr	r0, [r7, #32]
 8008800:	f00a fb22 	bl	8012e48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008806:	4613      	mov	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	3338      	adds	r3, #56	; 0x38
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	3304      	adds	r3, #4
 8008816:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d108      	bne.n	8008832 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2200      	movs	r2, #0
 8008824:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f00e f919 	bl	8016a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883e:	461a      	mov	r2, r3
 8008840:	2302      	movs	r3, #2
 8008842:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800884e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fcea 	bl	800922a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	3301      	adds	r3, #1
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	f47f af2e 	bne.w	80086c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f00b fa0c 	bl	8013c8c <USB_ReadInterrupts>
 8008874:	4603      	mov	r3, r0
 8008876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887e:	d122      	bne.n	80088c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	69fa      	ldr	r2, [r7, #28]
 800888a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800889a:	2b01      	cmp	r3, #1
 800889c:	d108      	bne.n	80088b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fef5 	bl	8009698 <HAL_PCDEx_LPM_Callback>
 80088ae:	e002      	b.n	80088b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f00e f8b7 	bl	8016a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80088c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f00b f9de 	bl	8013c8c <USB_ReadInterrupts>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088da:	d112      	bne.n	8008902 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d102      	bne.n	80088f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f00e f873 	bl	80169d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008900:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f00b f9c0 	bl	8013c8c <USB_ReadInterrupts>
 800890c:	4603      	mov	r3, r0
 800890e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008916:	d121      	bne.n	800895c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695a      	ldr	r2, [r3, #20]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008926:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d111      	bne.n	8008956 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008940:	089b      	lsrs	r3, r3, #2
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fea2 	bl	8009698 <HAL_PCDEx_LPM_Callback>
 8008954:	e002      	b.n	800895c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f00e f83e 	bl	80169d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f00b f993 	bl	8013c8c <USB_ReadInterrupts>
 8008966:	4603      	mov	r3, r0
 8008968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	f040 80b7 	bne.w	8008ae2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008982:	f023 0301 	bic.w	r3, r3, #1
 8008986:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2110      	movs	r1, #16
 800898e:	4618      	mov	r0, r3
 8008990:	f00a fa5a 	bl	8012e48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008994:	2300      	movs	r3, #0
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008998:	e046      	b.n	8008a28 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a6:	461a      	mov	r2, r3
 80089a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	461a      	mov	r2, r3
 80089dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	3301      	adds	r3, #1
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3b3      	bcc.n	800899a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008a44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d016      	beq.n	8008a7c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a5e:	f043 030b 	orr.w	r3, r3, #11
 8008a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a74:	f043 030b 	orr.w	r3, r3, #11
 8008a78:	6453      	str	r3, [r2, #68]	; 0x44
 8008a7a:	e015      	b.n	8008aa8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008a90:	4313      	orrs	r3, r2
 8008a92:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	69fa      	ldr	r2, [r7, #28]
 8008a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aa2:	f043 030b 	orr.w	r3, r3, #11
 8008aa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008aba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008acc:	461a      	mov	r2, r3
 8008ace:	f00b f9a3 	bl	8013e18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00b f8d0 	bl	8013c8c <USB_ReadInterrupts>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af6:	d124      	bne.n	8008b42 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f00b f967 	bl	8013dd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f00a fa1b 	bl	8012f42 <USB_GetDevSpeed>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681c      	ldr	r4, [r3, #0]
 8008b18:	f001 fd88 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 8008b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	4620      	mov	r0, r4
 8008b28:	f009 ff20 	bl	801296c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f00d ff2a 	bl	8016986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	695a      	ldr	r2, [r3, #20]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f00b f8a0 	bl	8013c8c <USB_ReadInterrupts>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d10a      	bne.n	8008b6c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f00d ff07 	bl	801696a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	695a      	ldr	r2, [r3, #20]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f002 0208 	and.w	r2, r2, #8
 8008b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f00b f88b 	bl	8013c8c <USB_ReadInterrupts>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7c:	2b80      	cmp	r3, #128	; 0x80
 8008b7e:	d122      	bne.n	8008bc6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b90:	e014      	b.n	8008bbc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	4613      	mov	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d105      	bne.n	8008bb6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fb09 	bl	80091c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	3301      	adds	r3, #1
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d3e5      	bcc.n	8008b92 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f00b f85e 	bl	8013c8c <USB_ReadInterrupts>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bda:	d13b      	bne.n	8008c54 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008bdc:	2301      	movs	r3, #1
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
 8008be0:	e02b      	b.n	8008c3a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	3340      	adds	r3, #64	; 0x40
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d115      	bne.n	8008c34 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da12      	bge.n	8008c34 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c12:	4613      	mov	r3, r2
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	333f      	adds	r3, #63	; 0x3f
 8008c1e:	2201      	movs	r2, #1
 8008c20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 faca 	bl	80091c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	3301      	adds	r3, #1
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3ce      	bcc.n	8008be2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695a      	ldr	r2, [r3, #20]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f00b f817 	bl	8013c8c <USB_ReadInterrupts>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c68:	d155      	bne.n	8008d16 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6e:	e045      	b.n	8008cfc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d12e      	bne.n	8008cf6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008c98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da2b      	bge.n	8008cf6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008caa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d121      	bne.n	8008cf6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cf2:	6053      	str	r3, [r2, #4]
            break;
 8008cf4:	e007      	b.n	8008d06 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d3b4      	bcc.n	8008c70 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695a      	ldr	r2, [r3, #20]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f00a ffb6 	bl	8013c8c <USB_ReadInterrupts>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2a:	d10a      	bne.n	8008d42 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f00d feab 	bl	8016a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695a      	ldr	r2, [r3, #20]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f00a ffa0 	bl	8013c8c <USB_ReadInterrupts>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d115      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f00d fe9b 	bl	8016aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	e000      	b.n	8008d82 <HAL_PCD_IRQHandler+0x992>
      return;
 8008d80:	bf00      	nop
    }
  }
}
 8008d82:	3734      	adds	r7, #52	; 0x34
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd90      	pop	{r4, r7, pc}

08008d88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_PCD_SetAddress+0x1a>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e013      	b.n	8008dca <HAL_PCD_SetAddress+0x42>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f00a fefe 	bl	8013bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	461a      	mov	r2, r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	460b      	mov	r3, r1
 8008de6:	803b      	strh	r3, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0f      	bge.n	8008e18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	f003 020f 	and.w	r2, r3, #15
 8008dfe:	4613      	mov	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	3338      	adds	r3, #56	; 0x38
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	705a      	strb	r2, [r3, #1]
 8008e16:	e00f      	b.n	8008e38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	f003 020f 	and.w	r2, r3, #15
 8008e1e:	4613      	mov	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3304      	adds	r3, #4
 8008e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e44:	883a      	ldrh	r2, [r7, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	78ba      	ldrb	r2, [r7, #2]
 8008e4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d004      	beq.n	8008e62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008e62:	78bb      	ldrb	r3, [r7, #2]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d102      	bne.n	8008e6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_PCD_EP_Open+0xaa>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e00e      	b.n	8008e9a <HAL_PCD_EP_Open+0xc8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68f9      	ldr	r1, [r7, #12]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f00a f87e 	bl	8012f8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	da0f      	bge.n	8008ed6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	f003 020f 	and.w	r2, r3, #15
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	3338      	adds	r3, #56	; 0x38
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	4413      	add	r3, r2
 8008eca:	3304      	adds	r3, #4
 8008ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	705a      	strb	r2, [r3, #1]
 8008ed4:	e00f      	b.n	8008ef6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	f003 020f 	and.w	r2, r3, #15
 8008edc:	4613      	mov	r3, r2
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4413      	add	r3, r2
 8008eec:	3304      	adds	r3, #4
 8008eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_PCD_EP_Close+0x6e>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e00e      	b.n	8008f2e <HAL_PCD_EP_Close+0x8c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68f9      	ldr	r1, [r7, #12]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f00a f8bc 	bl	801309c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	460b      	mov	r3, r1
 8008f44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	f003 020f 	and.w	r2, r3, #15
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2200      	movs	r2, #0
 8008f76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d102      	bne.n	8008f92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6979      	ldr	r1, [r7, #20]
 8008fa0:	f00a f958 	bl	8013254 <USB_EPStartXfer>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	f003 020f 	and.w	r2, r3, #15
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008fd0:	681b      	ldr	r3, [r3, #0]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	460b      	mov	r3, r1
 8008fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	3338      	adds	r3, #56	; 0x38
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	3304      	adds	r3, #4
 8009004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2200      	movs	r2, #0
 8009016:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2201      	movs	r2, #1
 800901c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	b2da      	uxtb	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d102      	bne.n	8009038 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	461a      	mov	r2, r3
 8009044:	6979      	ldr	r1, [r7, #20]
 8009046:	f00a f905 	bl	8013254 <USB_EPStartXfer>

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	f003 020f 	and.w	r2, r3, #15
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	d901      	bls.n	8009072 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e050      	b.n	8009114 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009076:	2b00      	cmp	r3, #0
 8009078:	da0f      	bge.n	800909a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	f003 020f 	and.w	r2, r3, #15
 8009080:	4613      	mov	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	3338      	adds	r3, #56	; 0x38
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	3304      	adds	r3, #4
 8009090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	705a      	strb	r2, [r3, #1]
 8009098:	e00d      	b.n	80090b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	4613      	mov	r3, r2
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	3304      	adds	r3, #4
 80090ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_PCD_EP_SetStall+0x82>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e01e      	b.n	8009114 <HAL_PCD_EP_SetStall+0xc0>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f00a fc95 	bl	8013a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	b2d9      	uxtb	r1, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009104:	461a      	mov	r2, r3
 8009106:	f00a fe87 	bl	8013e18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d901      	bls.n	800913a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e042      	b.n	80091c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800913a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da0f      	bge.n	8009162 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	705a      	strb	r2, [r3, #1]
 8009160:	e00f      	b.n	8009182 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	f003 020f 	and.w	r2, r3, #15
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_PCD_EP_ClrStall+0x86>
 800919e:	2302      	movs	r3, #2
 80091a0:	e00e      	b.n	80091c0 <HAL_PCD_EP_ClrStall+0xa4>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f00a fc9d 	bl	8013af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80091d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da0c      	bge.n	80091f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	f003 020f 	and.w	r2, r3, #15
 80091e2:	4613      	mov	r3, r2
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	3338      	adds	r3, #56	; 0x38
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4413      	add	r3, r2
 80091f0:	3304      	adds	r3, #4
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	e00c      	b.n	8009210 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	4613      	mov	r3, r2
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	4413      	add	r3, r2
 800920c:	3304      	adds	r3, #4
 800920e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	4618      	mov	r0, r3
 8009218:	f00a fabc 	bl	8013794 <USB_EPStopXfer>
 800921c:	4603      	mov	r3, r0
 800921e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009220:	7afb      	ldrb	r3, [r7, #11]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b08a      	sub	sp, #40	; 0x28
 800922e:	af02      	add	r7, sp, #8
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	3338      	adds	r3, #56	; 0x38
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	3304      	adds	r3, #4
 8009250:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	695a      	ldr	r2, [r3, #20]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d901      	bls.n	8009262 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e06c      	b.n	800933c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d902      	bls.n	800927e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	3303      	adds	r3, #3
 8009282:	089b      	lsrs	r3, r3, #2
 8009284:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009286:	e02b      	b.n	80092e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	69fa      	ldr	r2, [r7, #28]
 800929a:	429a      	cmp	r2, r3
 800929c:	d902      	bls.n	80092a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	3303      	adds	r3, #3
 80092a8:	089b      	lsrs	r3, r3, #2
 80092aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68d9      	ldr	r1, [r3, #12]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4603      	mov	r3, r0
 80092c2:	6978      	ldr	r0, [r7, #20]
 80092c4:	f00a fb10 	bl	80138e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	441a      	add	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	441a      	add	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d809      	bhi.n	800930a <PCD_WriteEmptyTxFifo+0xe0>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	695a      	ldr	r2, [r3, #20]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092fe:	429a      	cmp	r2, r3
 8009300:	d203      	bcs.n	800930a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1be      	bne.n	8009288 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	429a      	cmp	r2, r3
 8009314:	d811      	bhi.n	800933a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	2201      	movs	r2, #1
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	43db      	mvns	r3, r3
 8009330:	6939      	ldr	r1, [r7, #16]
 8009332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009336:	4013      	ands	r3, r2
 8009338:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3720      	adds	r7, #32
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	333c      	adds	r3, #60	; 0x3c
 800935c:	3304      	adds	r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d17b      	bne.n	8009472 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d015      	beq.n	80093b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	4a61      	ldr	r2, [pc, #388]	; (800950c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009388:	4293      	cmp	r3, r2
 800938a:	f240 80b9 	bls.w	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80b3 	beq.w	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	461a      	mov	r2, r3
 80093a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ac:	6093      	str	r3, [r2, #8]
 80093ae:	e0a7      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	461a      	mov	r2, r3
 80093c8:	2320      	movs	r3, #32
 80093ca:	6093      	str	r3, [r2, #8]
 80093cc:	e098      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 8093 	bne.w	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	4a4b      	ldr	r2, [pc, #300]	; (800950c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d90f      	bls.n	8009402 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f8:	461a      	mov	r2, r3
 80093fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093fe:	6093      	str	r3, [r2, #8]
 8009400:	e07e      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	4413      	add	r3, r2
 8009414:	3304      	adds	r3, #4
 8009416:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6a1a      	ldr	r2, [r3, #32]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	0159      	lsls	r1, r3, #5
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	440b      	add	r3, r1
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800942e:	1ad2      	subs	r2, r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d114      	bne.n	8009464 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800944c:	461a      	mov	r2, r3
 800944e:	2101      	movs	r1, #1
 8009450:	f00a fce2 	bl	8013e18 <USB_EP0_OutStart>
 8009454:	e006      	b.n	8009464 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68da      	ldr	r2, [r3, #12]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	441a      	add	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f00d fa48 	bl	8016900 <HAL_PCD_DataOutStageCallback>
 8009470:	e046      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	4a26      	ldr	r2, [pc, #152]	; (8009510 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d124      	bne.n	80094c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009490:	461a      	mov	r2, r3
 8009492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009496:	6093      	str	r3, [r2, #8]
 8009498:	e032      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d008      	beq.n	80094b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b0:	461a      	mov	r2, r3
 80094b2:	2320      	movs	r3, #32
 80094b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	4619      	mov	r1, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f00d fa1f 	bl	8016900 <HAL_PCD_DataOutStageCallback>
 80094c2:	e01d      	b.n	8009500 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d114      	bne.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	4613      	mov	r3, r2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d108      	bne.n	80094f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094ec:	461a      	mov	r2, r3
 80094ee:	2100      	movs	r1, #0
 80094f0:	f00a fc92 	bl	8013e18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f00d fa00 	bl	8016900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3720      	adds	r7, #32
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	4f54300a 	.word	0x4f54300a
 8009510:	4f54310a 	.word	0x4f54310a

08009514 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	333c      	adds	r3, #60	; 0x3c
 800952c:	3304      	adds	r3, #4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <PCD_EP_OutSetupPacket_int+0x88>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d90e      	bls.n	8009568 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	461a      	mov	r2, r3
 8009562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009566:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f00d f9b7 	bl	80168dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <PCD_EP_OutSetupPacket_int+0x88>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d90c      	bls.n	8009590 <PCD_EP_OutSetupPacket_int+0x7c>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d108      	bne.n	8009590 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009588:	461a      	mov	r2, r3
 800958a:	2101      	movs	r1, #1
 800958c:	f00a fc44 	bl	8013e18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	4f54300a 	.word	0x4f54300a

080095a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
 80095ac:	4613      	mov	r3, r2
 80095ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d107      	bne.n	80095ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80095be:	883b      	ldrh	r3, [r7, #0]
 80095c0:	0419      	lsls	r1, r3, #16
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	629a      	str	r2, [r3, #40]	; 0x28
 80095cc:	e028      	b.n	8009620 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4413      	add	r3, r2
 80095da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
 80095e0:	e00d      	b.n	80095fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	3340      	adds	r3, #64	; 0x40
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4413      	add	r3, r2
 80095f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	3301      	adds	r3, #1
 80095fc:	73fb      	strb	r3, [r7, #15]
 80095fe:	7bfa      	ldrb	r2, [r7, #15]
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	3b01      	subs	r3, #1
 8009604:	429a      	cmp	r2, r3
 8009606:	d3ec      	bcc.n	80095e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009608:	883b      	ldrh	r3, [r7, #0]
 800960a:	0418      	lsls	r0, r3, #16
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	3b01      	subs	r3, #1
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	4302      	orrs	r2, r0
 8009618:	3340      	adds	r3, #64	; 0x40
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	887a      	ldrh	r2, [r7, #2]
 8009640:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967e:	4b05      	ldr	r3, [pc, #20]	; (8009694 <HAL_PCDEx_ActivateLPM+0x44>)
 8009680:	4313      	orrs	r3, r2
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	10000003 	.word	0x10000003

08009698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80096b8:	4b19      	ldr	r3, [pc, #100]	; (8009720 <HAL_PWREx_ConfigSupply+0x70>)
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d00a      	beq.n	80096da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80096c4:	4b16      	ldr	r3, [pc, #88]	; (8009720 <HAL_PWREx_ConfigSupply+0x70>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0307 	and.w	r3, r3, #7
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d001      	beq.n	80096d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e01f      	b.n	8009716 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e01d      	b.n	8009716 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <HAL_PWREx_ConfigSupply+0x70>)
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f023 0207 	bic.w	r2, r3, #7
 80096e2:	490f      	ldr	r1, [pc, #60]	; (8009720 <HAL_PWREx_ConfigSupply+0x70>)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80096ea:	f7fa f929 	bl	8003940 <HAL_GetTick>
 80096ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096f0:	e009      	b.n	8009706 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80096f2:	f7fa f925 	bl	8003940 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009700:	d901      	bls.n	8009706 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e007      	b.n	8009716 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009706:	4b06      	ldr	r3, [pc, #24]	; (8009720 <HAL_PWREx_ConfigSupply+0x70>)
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800970e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009712:	d1ee      	bne.n	80096f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	58024800 	.word	0x58024800

08009724 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4a04      	ldr	r2, [pc, #16]	; (8009740 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800972e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009732:	60d3      	str	r3, [r2, #12]
}
 8009734:	bf00      	nop
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	58024800 	.word	0x58024800

08009744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08c      	sub	sp, #48	; 0x30
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e3c8      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 8087 	beq.w	8009872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009764:	4b88      	ldr	r3, [pc, #544]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800976e:	4b86      	ldr	r3, [pc, #536]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	2b10      	cmp	r3, #16
 8009778:	d007      	beq.n	800978a <HAL_RCC_OscConfig+0x46>
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	2b18      	cmp	r3, #24
 800977e:	d110      	bne.n	80097a2 <HAL_RCC_OscConfig+0x5e>
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	f003 0303 	and.w	r3, r3, #3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d10b      	bne.n	80097a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800978a:	4b7f      	ldr	r3, [pc, #508]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d06c      	beq.n	8009870 <HAL_RCC_OscConfig+0x12c>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d168      	bne.n	8009870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e3a2      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097aa:	d106      	bne.n	80097ba <HAL_RCC_OscConfig+0x76>
 80097ac:	4b76      	ldr	r3, [pc, #472]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a75      	ldr	r2, [pc, #468]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e02e      	b.n	8009818 <HAL_RCC_OscConfig+0xd4>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10c      	bne.n	80097dc <HAL_RCC_OscConfig+0x98>
 80097c2:	4b71      	ldr	r3, [pc, #452]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a70      	ldr	r2, [pc, #448]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	4b6e      	ldr	r3, [pc, #440]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a6d      	ldr	r2, [pc, #436]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	e01d      	b.n	8009818 <HAL_RCC_OscConfig+0xd4>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097e4:	d10c      	bne.n	8009800 <HAL_RCC_OscConfig+0xbc>
 80097e6:	4b68      	ldr	r3, [pc, #416]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a67      	ldr	r2, [pc, #412]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	4b65      	ldr	r3, [pc, #404]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a64      	ldr	r2, [pc, #400]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80097f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	e00b      	b.n	8009818 <HAL_RCC_OscConfig+0xd4>
 8009800:	4b61      	ldr	r3, [pc, #388]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a60      	ldr	r2, [pc, #384]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	4b5e      	ldr	r3, [pc, #376]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a5d      	ldr	r2, [pc, #372]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d013      	beq.n	8009848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009820:	f7fa f88e 	bl	8003940 <HAL_GetTick>
 8009824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009826:	e008      	b.n	800983a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009828:	f7fa f88a 	bl	8003940 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b64      	cmp	r3, #100	; 0x64
 8009834:	d901      	bls.n	800983a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e356      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800983a:	4b53      	ldr	r3, [pc, #332]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f0      	beq.n	8009828 <HAL_RCC_OscConfig+0xe4>
 8009846:	e014      	b.n	8009872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009848:	f7fa f87a 	bl	8003940 <HAL_GetTick>
 800984c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800984e:	e008      	b.n	8009862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009850:	f7fa f876 	bl	8003940 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	2b64      	cmp	r3, #100	; 0x64
 800985c:	d901      	bls.n	8009862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e342      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009862:	4b49      	ldr	r3, [pc, #292]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f0      	bne.n	8009850 <HAL_RCC_OscConfig+0x10c>
 800986e:	e000      	b.n	8009872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 808c 	beq.w	8009998 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009880:	4b41      	ldr	r3, [pc, #260]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009888:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800988a:	4b3f      	ldr	r3, [pc, #252]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800988c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <HAL_RCC_OscConfig+0x162>
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	2b18      	cmp	r3, #24
 800989a:	d137      	bne.n	800990c <HAL_RCC_OscConfig+0x1c8>
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d132      	bne.n	800990c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098a6:	4b38      	ldr	r3, [pc, #224]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <HAL_RCC_OscConfig+0x17a>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e314      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098be:	4b32      	ldr	r3, [pc, #200]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f023 0219 	bic.w	r2, r3, #25
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	492f      	ldr	r1, [pc, #188]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d0:	f7fa f836 	bl	8003940 <HAL_GetTick>
 80098d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098d8:	f7fa f832 	bl	8003940 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e2fe      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098ea:	4b27      	ldr	r3, [pc, #156]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0f0      	beq.n	80098d8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	4920      	ldr	r1, [pc, #128]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009906:	4313      	orrs	r3, r2
 8009908:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800990a:	e045      	b.n	8009998 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d026      	beq.n	8009962 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009914:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f023 0219 	bic.w	r2, r3, #25
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4919      	ldr	r1, [pc, #100]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009922:	4313      	orrs	r3, r2
 8009924:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009926:	f7fa f80b 	bl	8003940 <HAL_GetTick>
 800992a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800992c:	e008      	b.n	8009940 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800992e:	f7fa f807 	bl	8003940 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d901      	bls.n	8009940 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e2d3      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0f0      	beq.n	800992e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800994c:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	061b      	lsls	r3, r3, #24
 800995a:	490b      	ldr	r1, [pc, #44]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 800995c:	4313      	orrs	r3, r2
 800995e:	604b      	str	r3, [r1, #4]
 8009960:	e01a      	b.n	8009998 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a08      	ldr	r2, [pc, #32]	; (8009988 <HAL_RCC_OscConfig+0x244>)
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996e:	f7f9 ffe7 	bl	8003940 <HAL_GetTick>
 8009972:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009974:	e00a      	b.n	800998c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009976:	f7f9 ffe3 	bl	8003940 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d903      	bls.n	800998c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e2af      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
 8009988:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800998c:	4b96      	ldr	r3, [pc, #600]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1ee      	bne.n	8009976 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d06a      	beq.n	8009a7a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a4:	4b90      	ldr	r3, [pc, #576]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ae:	4b8e      	ldr	r3, [pc, #568]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	d007      	beq.n	80099ca <HAL_RCC_OscConfig+0x286>
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b18      	cmp	r3, #24
 80099be:	d11b      	bne.n	80099f8 <HAL_RCC_OscConfig+0x2b4>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d116      	bne.n	80099f8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099ca:	4b87      	ldr	r3, [pc, #540]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_RCC_OscConfig+0x29e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	2b80      	cmp	r3, #128	; 0x80
 80099dc:	d001      	beq.n	80099e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e282      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099e2:	4b81      	ldr	r3, [pc, #516]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	061b      	lsls	r3, r3, #24
 80099f0:	497d      	ldr	r1, [pc, #500]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099f6:	e040      	b.n	8009a7a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d023      	beq.n	8009a48 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a00:	4b79      	ldr	r3, [pc, #484]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a78      	ldr	r2, [pc, #480]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0c:	f7f9 ff98 	bl	8003940 <HAL_GetTick>
 8009a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a12:	e008      	b.n	8009a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a14:	f7f9 ff94 	bl	8003940 <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e260      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a26:	4b70      	ldr	r3, [pc, #448]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f0      	beq.n	8009a14 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a32:	4b6d      	ldr	r3, [pc, #436]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	061b      	lsls	r3, r3, #24
 8009a40:	4969      	ldr	r1, [pc, #420]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60cb      	str	r3, [r1, #12]
 8009a46:	e018      	b.n	8009a7a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a48:	4b67      	ldr	r3, [pc, #412]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a66      	ldr	r2, [pc, #408]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a54:	f7f9 ff74 	bl	8003940 <HAL_GetTick>
 8009a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a5c:	f7f9 ff70 	bl	8003940 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e23c      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a6e:	4b5e      	ldr	r3, [pc, #376]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f0      	bne.n	8009a5c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d036      	beq.n	8009af4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d019      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a8e:	4b56      	ldr	r3, [pc, #344]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a92:	4a55      	ldr	r2, [pc, #340]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a9a:	f7f9 ff51 	bl	8003940 <HAL_GetTick>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009aa0:	e008      	b.n	8009ab4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009aa2:	f7f9 ff4d 	bl	8003940 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e219      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ab4:	4b4c      	ldr	r3, [pc, #304]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0f0      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x35e>
 8009ac0:	e018      	b.n	8009af4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ac2:	4b49      	ldr	r3, [pc, #292]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac6:	4a48      	ldr	r2, [pc, #288]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009ac8:	f023 0301 	bic.w	r3, r3, #1
 8009acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ace:	f7f9 ff37 	bl	8003940 <HAL_GetTick>
 8009ad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ad4:	e008      	b.n	8009ae8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ad6:	f7f9 ff33 	bl	8003940 <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d901      	bls.n	8009ae8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e1ff      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ae8:	4b3f      	ldr	r3, [pc, #252]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f0      	bne.n	8009ad6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0320 	and.w	r3, r3, #32
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d036      	beq.n	8009b6e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d019      	beq.n	8009b3c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b08:	4b37      	ldr	r3, [pc, #220]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a36      	ldr	r2, [pc, #216]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b14:	f7f9 ff14 	bl	8003940 <HAL_GetTick>
 8009b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b1a:	e008      	b.n	8009b2e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b1c:	f7f9 ff10 	bl	8003940 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e1dc      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b2e:	4b2e      	ldr	r3, [pc, #184]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0f0      	beq.n	8009b1c <HAL_RCC_OscConfig+0x3d8>
 8009b3a:	e018      	b.n	8009b6e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b3c:	4b2a      	ldr	r3, [pc, #168]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a29      	ldr	r2, [pc, #164]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b48:	f7f9 fefa 	bl	8003940 <HAL_GetTick>
 8009b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b4e:	e008      	b.n	8009b62 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b50:	f7f9 fef6 	bl	8003940 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e1c2      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b62:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1f0      	bne.n	8009b50 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0304 	and.w	r3, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 8086 	beq.w	8009c88 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <HAL_RCC_OscConfig+0x4a8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a1a      	ldr	r2, [pc, #104]	; (8009bec <HAL_RCC_OscConfig+0x4a8>)
 8009b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b88:	f7f9 feda 	bl	8003940 <HAL_GetTick>
 8009b8c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b8e:	e008      	b.n	8009ba2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b90:	f7f9 fed6 	bl	8003940 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	2b64      	cmp	r3, #100	; 0x64
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e1a2      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <HAL_RCC_OscConfig+0x4a8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f0      	beq.n	8009b90 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x480>
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bba:	4a0b      	ldr	r2, [pc, #44]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bbc:	f043 0301 	orr.w	r3, r3, #1
 8009bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8009bc2:	e032      	b.n	8009c2a <HAL_RCC_OscConfig+0x4e6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d111      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x4ac>
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	4a05      	ldr	r2, [pc, #20]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bd2:	f023 0301 	bic.w	r3, r3, #1
 8009bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009bd8:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bdc:	4a02      	ldr	r2, [pc, #8]	; (8009be8 <HAL_RCC_OscConfig+0x4a4>)
 8009bde:	f023 0304 	bic.w	r3, r3, #4
 8009be2:	6713      	str	r3, [r2, #112]	; 0x70
 8009be4:	e021      	b.n	8009c2a <HAL_RCC_OscConfig+0x4e6>
 8009be6:	bf00      	nop
 8009be8:	58024400 	.word	0x58024400
 8009bec:	58024800 	.word	0x58024800
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	2b05      	cmp	r3, #5
 8009bf6:	d10c      	bne.n	8009c12 <HAL_RCC_OscConfig+0x4ce>
 8009bf8:	4b83      	ldr	r3, [pc, #524]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfc:	4a82      	ldr	r2, [pc, #520]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009bfe:	f043 0304 	orr.w	r3, r3, #4
 8009c02:	6713      	str	r3, [r2, #112]	; 0x70
 8009c04:	4b80      	ldr	r3, [pc, #512]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	4a7f      	ldr	r2, [pc, #508]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c10:	e00b      	b.n	8009c2a <HAL_RCC_OscConfig+0x4e6>
 8009c12:	4b7d      	ldr	r3, [pc, #500]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	4a7c      	ldr	r2, [pc, #496]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c18:	f023 0301 	bic.w	r3, r3, #1
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1e:	4b7a      	ldr	r3, [pc, #488]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c22:	4a79      	ldr	r2, [pc, #484]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c24:	f023 0304 	bic.w	r3, r3, #4
 8009c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d015      	beq.n	8009c5e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c32:	f7f9 fe85 	bl	8003940 <HAL_GetTick>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c38:	e00a      	b.n	8009c50 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3a:	f7f9 fe81 	bl	8003940 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e14b      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c50:	4b6d      	ldr	r3, [pc, #436]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0ee      	beq.n	8009c3a <HAL_RCC_OscConfig+0x4f6>
 8009c5c:	e014      	b.n	8009c88 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c5e:	f7f9 fe6f 	bl	8003940 <HAL_GetTick>
 8009c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c64:	e00a      	b.n	8009c7c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c66:	f7f9 fe6b 	bl	8003940 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d901      	bls.n	8009c7c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e135      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c7c:	4b62      	ldr	r3, [pc, #392]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1ee      	bne.n	8009c66 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 812a 	beq.w	8009ee6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c92:	4b5d      	ldr	r3, [pc, #372]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c9a:	2b18      	cmp	r3, #24
 8009c9c:	f000 80ba 	beq.w	8009e14 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	f040 8095 	bne.w	8009dd4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009caa:	4b57      	ldr	r3, [pc, #348]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a56      	ldr	r2, [pc, #344]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb6:	f7f9 fe43 	bl	8003940 <HAL_GetTick>
 8009cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cbe:	f7f9 fe3f 	bl	8003940 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e10b      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cd0:	4b4d      	ldr	r3, [pc, #308]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cdc:	4b4a      	ldr	r3, [pc, #296]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ce0:	4b4a      	ldr	r3, [pc, #296]	; (8009e0c <HAL_RCC_OscConfig+0x6c8>)
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009cec:	0112      	lsls	r2, r2, #4
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	4945      	ldr	r1, [pc, #276]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	628b      	str	r3, [r1, #40]	; 0x28
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d04:	3b01      	subs	r3, #1
 8009d06:	025b      	lsls	r3, r3, #9
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	3b01      	subs	r3, #1
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	061b      	lsls	r3, r3, #24
 8009d22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d26:	4938      	ldr	r1, [pc, #224]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d2c:	4b36      	ldr	r3, [pc, #216]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	4a35      	ldr	r2, [pc, #212]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d32:	f023 0301 	bic.w	r3, r3, #1
 8009d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d38:	4b33      	ldr	r3, [pc, #204]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d3c:	4b34      	ldr	r3, [pc, #208]	; (8009e10 <HAL_RCC_OscConfig+0x6cc>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d44:	00d2      	lsls	r2, r2, #3
 8009d46:	4930      	ldr	r1, [pc, #192]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d4c:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	f023 020c 	bic.w	r2, r3, #12
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	492b      	ldr	r1, [pc, #172]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d5e:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	f023 0202 	bic.w	r2, r3, #2
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6a:	4927      	ldr	r1, [pc, #156]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d70:	4b25      	ldr	r3, [pc, #148]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d7c:	4b22      	ldr	r3, [pc, #136]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	4a21      	ldr	r2, [pc, #132]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d88:	4b1f      	ldr	r3, [pc, #124]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	4a1e      	ldr	r2, [pc, #120]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d94:	4b1c      	ldr	r3, [pc, #112]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	4a1b      	ldr	r2, [pc, #108]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009da0:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a18      	ldr	r2, [pc, #96]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dac:	f7f9 fdc8 	bl	8003940 <HAL_GetTick>
 8009db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009db2:	e008      	b.n	8009dc6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db4:	f7f9 fdc4 	bl	8003940 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d901      	bls.n	8009dc6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e090      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dc6:	4b10      	ldr	r3, [pc, #64]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0f0      	beq.n	8009db4 <HAL_RCC_OscConfig+0x670>
 8009dd2:	e088      	b.n	8009ee6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a0b      	ldr	r2, [pc, #44]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de0:	f7f9 fdae 	bl	8003940 <HAL_GetTick>
 8009de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009de6:	e008      	b.n	8009dfa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009de8:	f7f9 fdaa 	bl	8003940 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e076      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dfa:	4b03      	ldr	r3, [pc, #12]	; (8009e08 <HAL_RCC_OscConfig+0x6c4>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1f0      	bne.n	8009de8 <HAL_RCC_OscConfig+0x6a4>
 8009e06:	e06e      	b.n	8009ee6 <HAL_RCC_OscConfig+0x7a2>
 8009e08:	58024400 	.word	0x58024400
 8009e0c:	fffffc0c 	.word	0xfffffc0c
 8009e10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e14:	4b36      	ldr	r3, [pc, #216]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d031      	beq.n	8009e8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f003 0203 	and.w	r2, r3, #3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d12a      	bne.n	8009e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	091b      	lsrs	r3, r3, #4
 8009e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d122      	bne.n	8009e8c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d11a      	bne.n	8009e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	0a5b      	lsrs	r3, r3, #9
 8009e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d111      	bne.n	8009e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d108      	bne.n	8009e8c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	0e1b      	lsrs	r3, r3, #24
 8009e7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d001      	beq.n	8009e90 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e02b      	b.n	8009ee8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e94:	08db      	lsrs	r3, r3, #3
 8009e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d01f      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009ea6:	4b12      	ldr	r3, [pc, #72]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	4a11      	ldr	r2, [pc, #68]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009eb2:	f7f9 fd45 	bl	8003940 <HAL_GetTick>
 8009eb6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009eb8:	bf00      	nop
 8009eba:	f7f9 fd41 	bl	8003940 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d0f9      	beq.n	8009eba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eca:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <HAL_RCC_OscConfig+0x7b0>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ed2:	00d2      	lsls	r2, r2, #3
 8009ed4:	4906      	ldr	r1, [pc, #24]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <HAL_RCC_OscConfig+0x7ac>)
 8009ee0:	f043 0301 	orr.w	r3, r3, #1
 8009ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3730      	adds	r7, #48	; 0x30
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	58024400 	.word	0x58024400
 8009ef4:	ffff0007 	.word	0xffff0007

08009ef8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d101      	bne.n	8009f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e19c      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f0c:	4b8a      	ldr	r3, [pc, #552]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 030f 	and.w	r3, r3, #15
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d910      	bls.n	8009f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f1a:	4b87      	ldr	r3, [pc, #540]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f023 020f 	bic.w	r2, r3, #15
 8009f22:	4985      	ldr	r1, [pc, #532]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2a:	4b83      	ldr	r3, [pc, #524]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d001      	beq.n	8009f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e184      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d010      	beq.n	8009f6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691a      	ldr	r2, [r3, #16]
 8009f4c:	4b7b      	ldr	r3, [pc, #492]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d908      	bls.n	8009f6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f58:	4b78      	ldr	r3, [pc, #480]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	4975      	ldr	r1, [pc, #468]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d010      	beq.n	8009f98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	695a      	ldr	r2, [r3, #20]
 8009f7a:	4b70      	ldr	r3, [pc, #448]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d908      	bls.n	8009f98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f86:	4b6d      	ldr	r3, [pc, #436]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	496a      	ldr	r1, [pc, #424]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d010      	beq.n	8009fc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699a      	ldr	r2, [r3, #24]
 8009fa8:	4b64      	ldr	r3, [pc, #400]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d908      	bls.n	8009fc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fb4:	4b61      	ldr	r3, [pc, #388]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	495e      	ldr	r1, [pc, #376]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d010      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	69da      	ldr	r2, [r3, #28]
 8009fd6:	4b59      	ldr	r3, [pc, #356]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d908      	bls.n	8009ff4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fe2:	4b56      	ldr	r3, [pc, #344]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	4953      	ldr	r1, [pc, #332]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d010      	beq.n	800a022 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	4b4d      	ldr	r3, [pc, #308]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d908      	bls.n	800a022 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a010:	4b4a      	ldr	r3, [pc, #296]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f023 020f 	bic.w	r2, r3, #15
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	4947      	ldr	r1, [pc, #284]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d055      	beq.n	800a0da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a02e:	4b43      	ldr	r3, [pc, #268]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	4940      	ldr	r1, [pc, #256]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d107      	bne.n	800a058 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a048:	4b3c      	ldr	r3, [pc, #240]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d121      	bne.n	800a098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e0f6      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d107      	bne.n	800a070 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a060:	4b36      	ldr	r3, [pc, #216]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d115      	bne.n	800a098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0ea      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d107      	bne.n	800a088 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a078:	4b30      	ldr	r3, [pc, #192]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a080:	2b00      	cmp	r3, #0
 800a082:	d109      	bne.n	800a098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e0de      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a088:	4b2c      	ldr	r3, [pc, #176]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e0d6      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a098:	4b28      	ldr	r3, [pc, #160]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f023 0207 	bic.w	r2, r3, #7
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	4925      	ldr	r1, [pc, #148]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0aa:	f7f9 fc49 	bl	8003940 <HAL_GetTick>
 800a0ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0b0:	e00a      	b.n	800a0c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0b2:	f7f9 fc45 	bl	8003940 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d901      	bls.n	800a0c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e0be      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c8:	4b1c      	ldr	r3, [pc, #112]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d1eb      	bne.n	800a0b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d010      	beq.n	800a108 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68da      	ldr	r2, [r3, #12]
 800a0ea:	4b14      	ldr	r3, [pc, #80]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d208      	bcs.n	800a108 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0f6:	4b11      	ldr	r3, [pc, #68]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	f023 020f 	bic.w	r2, r3, #15
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	490e      	ldr	r1, [pc, #56]	; (800a13c <HAL_RCC_ClockConfig+0x244>)
 800a104:	4313      	orrs	r3, r2
 800a106:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d214      	bcs.n	800a140 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a116:	4b08      	ldr	r3, [pc, #32]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f023 020f 	bic.w	r2, r3, #15
 800a11e:	4906      	ldr	r1, [pc, #24]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	4313      	orrs	r3, r2
 800a124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a126:	4b04      	ldr	r3, [pc, #16]	; (800a138 <HAL_RCC_ClockConfig+0x240>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 030f 	and.w	r3, r3, #15
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d005      	beq.n	800a140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e086      	b.n	800a246 <HAL_RCC_ClockConfig+0x34e>
 800a138:	52002000 	.word	0x52002000
 800a13c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d010      	beq.n	800a16e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691a      	ldr	r2, [r3, #16]
 800a150:	4b3f      	ldr	r3, [pc, #252]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a158:	429a      	cmp	r2, r3
 800a15a:	d208      	bcs.n	800a16e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a15c:	4b3c      	ldr	r3, [pc, #240]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	4939      	ldr	r1, [pc, #228]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d010      	beq.n	800a19c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695a      	ldr	r2, [r3, #20]
 800a17e:	4b34      	ldr	r3, [pc, #208]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a186:	429a      	cmp	r2, r3
 800a188:	d208      	bcs.n	800a19c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	492e      	ldr	r1, [pc, #184]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0310 	and.w	r3, r3, #16
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d010      	beq.n	800a1ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699a      	ldr	r2, [r3, #24]
 800a1ac:	4b28      	ldr	r3, [pc, #160]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d208      	bcs.n	800a1ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1b8:	4b25      	ldr	r3, [pc, #148]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	4922      	ldr	r1, [pc, #136]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d010      	beq.n	800a1f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69da      	ldr	r2, [r3, #28]
 800a1da:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d208      	bcs.n	800a1f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1e6:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	4917      	ldr	r1, [pc, #92]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1f8:	f000 f89e 	bl	800a338 <HAL_RCC_GetSysClockFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	4912      	ldr	r1, [pc, #72]	; (800a254 <HAL_RCC_ClockConfig+0x35c>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	fa22 f303 	lsr.w	r3, r2, r3
 800a214:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <HAL_RCC_ClockConfig+0x358>)
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	4a0d      	ldr	r2, [pc, #52]	; (800a254 <HAL_RCC_ClockConfig+0x35c>)
 800a220:	5cd3      	ldrb	r3, [r2, r3]
 800a222:	f003 031f 	and.w	r3, r3, #31
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
 800a22c:	4a0a      	ldr	r2, [pc, #40]	; (800a258 <HAL_RCC_ClockConfig+0x360>)
 800a22e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a230:	4a0a      	ldr	r2, [pc, #40]	; (800a25c <HAL_RCC_ClockConfig+0x364>)
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a236:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <HAL_RCC_ClockConfig+0x368>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f9 fb36 	bl	80038ac <HAL_InitTick>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a244:	7bfb      	ldrb	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	0801b5a4 	.word	0x0801b5a4
 800a258:	24000004 	.word	0x24000004
 800a25c:	24000000 	.word	0x24000000
 800a260:	24000008 	.word	0x24000008

0800a264 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08c      	sub	sp, #48	; 0x30
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d12a      	bne.n	800a2cc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a276:	4b2d      	ldr	r3, [pc, #180]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a27c:	4a2b      	ldr	r2, [pc, #172]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a27e:	f043 0301 	orr.w	r3, r3, #1
 800a282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a286:	4b29      	ldr	r3, [pc, #164]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a294:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a29a:	2302      	movs	r3, #2
 800a29c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a2aa:	f107 031c 	add.w	r3, r7, #28
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	481f      	ldr	r0, [pc, #124]	; (800a330 <HAL_RCC_MCOConfig+0xcc>)
 800a2b2:	f7fd fc43 	bl	8007b3c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a2be:	68b9      	ldr	r1, [r7, #8]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	4919      	ldr	r1, [pc, #100]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a2ca:	e02a      	b.n	800a322 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a2cc:	4b17      	ldr	r3, [pc, #92]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a2ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2d2:	4a16      	ldr	r2, [pc, #88]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a2d4:	f043 0304 	orr.w	r3, r3, #4
 800a2d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2dc:	4b13      	ldr	r3, [pc, #76]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a2de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a2ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a300:	f107 031c 	add.w	r3, r7, #28
 800a304:	4619      	mov	r1, r3
 800a306:	480b      	ldr	r0, [pc, #44]	; (800a334 <HAL_RCC_MCOConfig+0xd0>)
 800a308:	f7fd fc18 	bl	8007b3c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a30c:	4b07      	ldr	r3, [pc, #28]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	01d9      	lsls	r1, r3, #7
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	430b      	orrs	r3, r1
 800a31c:	4903      	ldr	r1, [pc, #12]	; (800a32c <HAL_RCC_MCOConfig+0xc8>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	610b      	str	r3, [r1, #16]
}
 800a322:	bf00      	nop
 800a324:	3730      	adds	r7, #48	; 0x30
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	58024400 	.word	0x58024400
 800a330:	58020000 	.word	0x58020000
 800a334:	58020800 	.word	0x58020800

0800a338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a338:	b480      	push	{r7}
 800a33a:	b089      	sub	sp, #36	; 0x24
 800a33c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a33e:	4bb3      	ldr	r3, [pc, #716]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a346:	2b18      	cmp	r3, #24
 800a348:	f200 8155 	bhi.w	800a5f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a5f7 	.word	0x0800a5f7
 800a35c:	0800a5f7 	.word	0x0800a5f7
 800a360:	0800a5f7 	.word	0x0800a5f7
 800a364:	0800a5f7 	.word	0x0800a5f7
 800a368:	0800a5f7 	.word	0x0800a5f7
 800a36c:	0800a5f7 	.word	0x0800a5f7
 800a370:	0800a5f7 	.word	0x0800a5f7
 800a374:	0800a3df 	.word	0x0800a3df
 800a378:	0800a5f7 	.word	0x0800a5f7
 800a37c:	0800a5f7 	.word	0x0800a5f7
 800a380:	0800a5f7 	.word	0x0800a5f7
 800a384:	0800a5f7 	.word	0x0800a5f7
 800a388:	0800a5f7 	.word	0x0800a5f7
 800a38c:	0800a5f7 	.word	0x0800a5f7
 800a390:	0800a5f7 	.word	0x0800a5f7
 800a394:	0800a3e5 	.word	0x0800a3e5
 800a398:	0800a5f7 	.word	0x0800a5f7
 800a39c:	0800a5f7 	.word	0x0800a5f7
 800a3a0:	0800a5f7 	.word	0x0800a5f7
 800a3a4:	0800a5f7 	.word	0x0800a5f7
 800a3a8:	0800a5f7 	.word	0x0800a5f7
 800a3ac:	0800a5f7 	.word	0x0800a5f7
 800a3b0:	0800a5f7 	.word	0x0800a5f7
 800a3b4:	0800a3eb 	.word	0x0800a3eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3b8:	4b94      	ldr	r3, [pc, #592]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d009      	beq.n	800a3d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3c4:	4b91      	ldr	r3, [pc, #580]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	08db      	lsrs	r3, r3, #3
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	4a90      	ldr	r2, [pc, #576]	; (800a610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a3d6:	e111      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a3d8:	4b8d      	ldr	r3, [pc, #564]	; (800a610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3da:	61bb      	str	r3, [r7, #24]
      break;
 800a3dc:	e10e      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a3de:	4b8d      	ldr	r3, [pc, #564]	; (800a614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a3e0:	61bb      	str	r3, [r7, #24]
      break;
 800a3e2:	e10b      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a3e4:	4b8c      	ldr	r3, [pc, #560]	; (800a618 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a3e6:	61bb      	str	r3, [r7, #24]
      break;
 800a3e8:	e108      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3ea:	4b88      	ldr	r3, [pc, #544]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a3f4:	4b85      	ldr	r3, [pc, #532]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f8:	091b      	lsrs	r3, r3, #4
 800a3fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a400:	4b82      	ldr	r3, [pc, #520]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a40a:	4b80      	ldr	r3, [pc, #512]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40e:	08db      	lsrs	r3, r3, #3
 800a410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	fb02 f303 	mul.w	r3, r2, r3
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a422:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80e1 	beq.w	800a5f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b02      	cmp	r3, #2
 800a432:	f000 8083 	beq.w	800a53c <HAL_RCC_GetSysClockFreq+0x204>
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	f200 80a1 	bhi.w	800a580 <HAL_RCC_GetSysClockFreq+0x248>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_RCC_GetSysClockFreq+0x114>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d056      	beq.n	800a4f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a44a:	e099      	b.n	800a580 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a44c:	4b6f      	ldr	r3, [pc, #444]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d02d      	beq.n	800a4b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a458:	4b6c      	ldr	r3, [pc, #432]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	08db      	lsrs	r3, r3, #3
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	4a6b      	ldr	r2, [pc, #428]	; (800a610 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a464:	fa22 f303 	lsr.w	r3, r2, r3
 800a468:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a482:	4b62      	ldr	r3, [pc, #392]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48a:	ee07 3a90 	vmov	s15, r3
 800a48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a492:	ed97 6a02 	vldr	s12, [r7, #8]
 800a496:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a61c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a4b2:	e087      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	ee07 3a90 	vmov	s15, r3
 800a4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4be:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a620 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	4b51      	ldr	r3, [pc, #324]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a61c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4f6:	e065      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a624 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50a:	4b40      	ldr	r3, [pc, #256]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a51e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a61c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a53a:	e043      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a628 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54e:	4b2f      	ldr	r3, [pc, #188]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a55e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a562:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a61c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a57e:	e021      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a624 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a592:	4b1e      	ldr	r3, [pc, #120]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a61c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a5c4:	4b11      	ldr	r3, [pc, #68]	; (800a60c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	0a5b      	lsrs	r3, r3, #9
 800a5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e8:	ee17 3a90 	vmov	r3, s15
 800a5ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a5ee:	e005      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	61bb      	str	r3, [r7, #24]
      break;
 800a5f4:	e002      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a5f6:	4b07      	ldr	r3, [pc, #28]	; (800a614 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5f8:	61bb      	str	r3, [r7, #24]
      break;
 800a5fa:	bf00      	nop
  }

  return sysclockfreq;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3724      	adds	r7, #36	; 0x24
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
 800a610:	03d09000 	.word	0x03d09000
 800a614:	003d0900 	.word	0x003d0900
 800a618:	02faf080 	.word	0x02faf080
 800a61c:	46000000 	.word	0x46000000
 800a620:	4c742400 	.word	0x4c742400
 800a624:	4a742400 	.word	0x4a742400
 800a628:	4c3ebc20 	.word	0x4c3ebc20

0800a62c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a632:	f7ff fe81 	bl	800a338 <HAL_RCC_GetSysClockFreq>
 800a636:	4602      	mov	r2, r0
 800a638:	4b10      	ldr	r3, [pc, #64]	; (800a67c <HAL_RCC_GetHCLKFreq+0x50>)
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	490f      	ldr	r1, [pc, #60]	; (800a680 <HAL_RCC_GetHCLKFreq+0x54>)
 800a644:	5ccb      	ldrb	r3, [r1, r3]
 800a646:	f003 031f 	and.w	r3, r3, #31
 800a64a:	fa22 f303 	lsr.w	r3, r2, r3
 800a64e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <HAL_RCC_GetHCLKFreq+0x50>)
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	4a09      	ldr	r2, [pc, #36]	; (800a680 <HAL_RCC_GetHCLKFreq+0x54>)
 800a65a:	5cd3      	ldrb	r3, [r2, r3]
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	fa22 f303 	lsr.w	r3, r2, r3
 800a666:	4a07      	ldr	r2, [pc, #28]	; (800a684 <HAL_RCC_GetHCLKFreq+0x58>)
 800a668:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a66a:	4a07      	ldr	r2, [pc, #28]	; (800a688 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <HAL_RCC_GetHCLKFreq+0x58>)
 800a672:	681b      	ldr	r3, [r3, #0]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	58024400 	.word	0x58024400
 800a680:	0801b5a4 	.word	0x0801b5a4
 800a684:	24000004 	.word	0x24000004
 800a688:	24000000 	.word	0x24000000

0800a68c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a690:	f7ff ffcc 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 800a694:	4602      	mov	r2, r0
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	091b      	lsrs	r3, r3, #4
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	4904      	ldr	r1, [pc, #16]	; (800a6b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6a2:	5ccb      	ldrb	r3, [r1, r3]
 800a6a4:	f003 031f 	and.w	r3, r3, #31
 800a6a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	58024400 	.word	0x58024400
 800a6b4:	0801b5a4 	.word	0x0801b5a4

0800a6b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a6bc:	f7ff ffb6 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	0a1b      	lsrs	r3, r3, #8
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	4904      	ldr	r1, [pc, #16]	; (800a6e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6ce:	5ccb      	ldrb	r3, [r1, r3]
 800a6d0:	f003 031f 	and.w	r3, r3, #31
 800a6d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	0801b5a4 	.word	0x0801b5a4

0800a6e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6e8:	b0c6      	sub	sp, #280	; 0x118
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a708:	2500      	movs	r5, #0
 800a70a:	ea54 0305 	orrs.w	r3, r4, r5
 800a70e:	d049      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a71a:	d02f      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a71c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a720:	d828      	bhi.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a726:	d01a      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a72c:	d822      	bhi.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d003      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a736:	d007      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a738:	e01c      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73a:	4bab      	ldr	r3, [pc, #684]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	4aaa      	ldr	r2, [pc, #680]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a746:	e01a      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	3308      	adds	r3, #8
 800a74e:	2102      	movs	r1, #2
 800a750:	4618      	mov	r0, r3
 800a752:	f002 fa49 	bl	800cbe8 <RCCEx_PLL2_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a75c:	e00f      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a762:	3328      	adds	r3, #40	; 0x28
 800a764:	2102      	movs	r1, #2
 800a766:	4618      	mov	r0, r3
 800a768:	f002 faf0 	bl	800cd4c <RCCEx_PLL3_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a772:	e004      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a77a:	e000      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a77e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a786:	4b98      	ldr	r3, [pc, #608]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a794:	4a94      	ldr	r2, [pc, #592]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a796:	430b      	orrs	r3, r1
 800a798:	6513      	str	r3, [r2, #80]	; 0x50
 800a79a:	e003      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a79c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7b0:	f04f 0900 	mov.w	r9, #0
 800a7b4:	ea58 0309 	orrs.w	r3, r8, r9
 800a7b8:	d047      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d82a      	bhi.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a7c4:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ca:	bf00      	nop
 800a7cc:	0800a7e1 	.word	0x0800a7e1
 800a7d0:	0800a7ef 	.word	0x0800a7ef
 800a7d4:	0800a805 	.word	0x0800a805
 800a7d8:	0800a823 	.word	0x0800a823
 800a7dc:	0800a823 	.word	0x0800a823
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e0:	4b81      	ldr	r3, [pc, #516]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	4a80      	ldr	r2, [pc, #512]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7ec:	e01a      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f002 f9f6 	bl	800cbe8 <RCCEx_PLL2_Config>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a802:	e00f      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a808:	3328      	adds	r3, #40	; 0x28
 800a80a:	2100      	movs	r1, #0
 800a80c:	4618      	mov	r0, r3
 800a80e:	f002 fa9d 	bl	800cd4c <RCCEx_PLL3_Config>
 800a812:	4603      	mov	r3, r0
 800a814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a818:	e004      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a820:	e000      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a82c:	4b6e      	ldr	r3, [pc, #440]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a82e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a830:	f023 0107 	bic.w	r1, r3, #7
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a83a:	4a6b      	ldr	r2, [pc, #428]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a83c:	430b      	orrs	r3, r1
 800a83e:	6513      	str	r3, [r2, #80]	; 0x50
 800a840:	e003      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a842:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a846:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a856:	f04f 0b00 	mov.w	fp, #0
 800a85a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a85e:	d05b      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a868:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a86c:	d03b      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a86e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a872:	d834      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a878:	d037      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a87a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a87e:	d82e      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a880:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a884:	d033      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a886:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a88a:	d828      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a88c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a890:	d01a      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a896:	d822      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a89c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8a0:	d007      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a8a2:	e01c      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a4:	4b50      	ldr	r3, [pc, #320]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	4a4f      	ldr	r2, [pc, #316]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8b0:	e01e      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f002 f994 	bl	800cbe8 <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a8c6:	e013      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	3328      	adds	r3, #40	; 0x28
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f002 fa3b 	bl	800cd4c <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8e4:	e004      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a8e6:	bf00      	nop
 800a8e8:	e002      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a8ea:	bf00      	nop
 800a8ec:	e000      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a8ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a8f8:	4b3b      	ldr	r3, [pc, #236]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8fc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a908:	4a37      	ldr	r2, [pc, #220]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a90a:	430b      	orrs	r3, r1
 800a90c:	6593      	str	r3, [r2, #88]	; 0x58
 800a90e:	e003      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a910:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a914:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a928:	2300      	movs	r3, #0
 800a92a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a92e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a932:	460b      	mov	r3, r1
 800a934:	4313      	orrs	r3, r2
 800a936:	d05d      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a940:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a944:	d03b      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a946:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a94a:	d834      	bhi.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a94c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a950:	d037      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a956:	d82e      	bhi.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a95c:	d033      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a95e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a962:	d828      	bhi.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a968:	d01a      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a96a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96e:	d822      	bhi.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a978:	d007      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a97a:	e01c      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	4a19      	ldr	r2, [pc, #100]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a988:	e01e      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98e:	3308      	adds	r3, #8
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f002 f928 	bl	800cbe8 <RCCEx_PLL2_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a99e:	e013      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a4:	3328      	adds	r3, #40	; 0x28
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f002 f9cf 	bl	800cd4c <RCCEx_PLL3_Config>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9b4:	e008      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9bc:	e004      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a9be:	bf00      	nop
 800a9c0:	e002      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a9c2:	bf00      	nop
 800a9c4:	e000      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a9c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10d      	bne.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9e0:	4a01      	ldr	r2, [pc, #4]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e6:	e005      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a9e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa04:	2300      	movs	r3, #0
 800aa06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa0a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4313      	orrs	r3, r2
 800aa12:	d03a      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1a:	2b30      	cmp	r3, #48	; 0x30
 800aa1c:	d01f      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aa1e:	2b30      	cmp	r3, #48	; 0x30
 800aa20:	d819      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	d00c      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d815      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d019      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aa2e:	2b10      	cmp	r3, #16
 800aa30:	d111      	bne.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa32:	4baa      	ldr	r3, [pc, #680]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	4aa9      	ldr	r2, [pc, #676]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aa3e:	e011      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	3308      	adds	r3, #8
 800aa46:	2102      	movs	r1, #2
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 f8cd 	bl	800cbe8 <RCCEx_PLL2_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aa54:	e006      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa5c:	e002      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aa5e:	bf00      	nop
 800aa60:	e000      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aa62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aa6c:	4b9b      	ldr	r3, [pc, #620]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7a:	4a98      	ldr	r2, [pc, #608]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa80:	e003      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aa96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aaa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	d051      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab4:	d035      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800aab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaba:	d82e      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aabc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aac0:	d031      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800aac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aac6:	d828      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aacc:	d01a      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800aace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aad2:	d822      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800aad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aadc:	d007      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800aade:	e01c      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae0:	4b7e      	ldr	r3, [pc, #504]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	4a7d      	ldr	r2, [pc, #500]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aaec:	e01c      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f002 f876 	bl	800cbe8 <RCCEx_PLL2_Config>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab02:	e011      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab08:	3328      	adds	r3, #40	; 0x28
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f002 f91d 	bl	800cd4c <RCCEx_PLL3_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab18:	e006      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab20:	e002      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab22:	bf00      	nop
 800ab24:	e000      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ab26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab30:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3e:	4a67      	ldr	r2, [pc, #412]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab40:	430b      	orrs	r3, r1
 800ab42:	6513      	str	r3, [r2, #80]	; 0x50
 800ab44:	e003      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ab5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	d053      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab78:	d033      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ab7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab7e:	d82c      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab84:	d02f      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ab86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab8a:	d826      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab90:	d02b      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ab92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab96:	d820      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ab98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab9c:	d012      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ab9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aba2:	d81a      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d022      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800aba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abac:	d115      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb2:	3308      	adds	r3, #8
 800abb4:	2101      	movs	r1, #1
 800abb6:	4618      	mov	r0, r3
 800abb8:	f002 f816 	bl	800cbe8 <RCCEx_PLL2_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800abc2:	e015      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	3328      	adds	r3, #40	; 0x28
 800abca:	2101      	movs	r1, #1
 800abcc:	4618      	mov	r0, r3
 800abce:	f002 f8bd 	bl	800cd4c <RCCEx_PLL3_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800abd8:	e00a      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abe0:	e006      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800abe2:	bf00      	nop
 800abe4:	e004      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800abe6:	bf00      	nop
 800abe8:	e002      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800abea:	bf00      	nop
 800abec:	e000      	b.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800abee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800abf8:	4b38      	ldr	r3, [pc, #224]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abfc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac06:	4a35      	ldr	r2, [pc, #212]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac08:	430b      	orrs	r3, r1
 800ac0a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac0c:	e003      	b.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac26:	2300      	movs	r3, #0
 800ac28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ac2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac30:	460b      	mov	r3, r1
 800ac32:	4313      	orrs	r3, r2
 800ac34:	d058      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac42:	d033      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ac44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac48:	d82c      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac4e:	d02f      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ac50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac54:	d826      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac5a:	d02b      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ac5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac60:	d820      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac66:	d012      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ac68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac6c:	d81a      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d022      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ac72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac76:	d115      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	2101      	movs	r1, #1
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 ffb1 	bl	800cbe8 <RCCEx_PLL2_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ac8c:	e015      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac92:	3328      	adds	r3, #40	; 0x28
 800ac94:	2101      	movs	r1, #1
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 f858 	bl	800cd4c <RCCEx_PLL3_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aca2:	e00a      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acaa:	e006      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acac:	bf00      	nop
 800acae:	e004      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800acb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10e      	bne.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800acc2:	4b06      	ldr	r3, [pc, #24]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acc6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acd2:	4a02      	ldr	r2, [pc, #8]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acd4:	430b      	orrs	r3, r1
 800acd6:	6593      	str	r3, [r2, #88]	; 0x58
 800acd8:	e006      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800acda:	bf00      	nop
 800acdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ace4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800acf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acf8:	2300      	movs	r3, #0
 800acfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800acfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4313      	orrs	r3, r2
 800ad06:	d037      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad12:	d00e      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ad14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad18:	d816      	bhi.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d018      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ad1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad22:	d111      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad24:	4bc4      	ldr	r3, [pc, #784]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	4ac3      	ldr	r2, [pc, #780]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad30:	e00f      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad36:	3308      	adds	r3, #8
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 ff54 	bl	800cbe8 <RCCEx_PLL2_Config>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad46:	e004      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad4e:	e000      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ad50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad5a:	4bb7      	ldr	r3, [pc, #732]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad68:	4ab3      	ldr	r2, [pc, #716]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	6513      	str	r3, [r2, #80]	; 0x50
 800ad6e:	e003      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ad84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ad92:	460b      	mov	r3, r1
 800ad94:	4313      	orrs	r3, r2
 800ad96:	d039      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ad98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d81c      	bhi.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800ade5 	.word	0x0800ade5
 800adac:	0800adb9 	.word	0x0800adb9
 800adb0:	0800adc7 	.word	0x0800adc7
 800adb4:	0800ade5 	.word	0x0800ade5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adb8:	4b9f      	ldr	r3, [pc, #636]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	4a9e      	ldr	r2, [pc, #632]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800adc4:	e00f      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adca:	3308      	adds	r3, #8
 800adcc:	2102      	movs	r1, #2
 800adce:	4618      	mov	r0, r3
 800add0:	f001 ff0a 	bl	800cbe8 <RCCEx_PLL2_Config>
 800add4:	4603      	mov	r3, r0
 800add6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800adda:	e004      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ade2:	e000      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ade4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800adee:	4b92      	ldr	r3, [pc, #584]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf2:	f023 0103 	bic.w	r1, r3, #3
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfc:	4a8e      	ldr	r2, [pc, #568]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adfe:	430b      	orrs	r3, r1
 800ae00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae02:	e003      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f000 8099 	beq.w	800af60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae2e:	4b83      	ldr	r3, [pc, #524]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a82      	ldr	r2, [pc, #520]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae3a:	f7f8 fd81 	bl	8003940 <HAL_GetTick>
 800ae3e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae42:	e00b      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae44:	f7f8 fd7c 	bl	8003940 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b64      	cmp	r3, #100	; 0x64
 800ae52:	d903      	bls.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae5a:	e005      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae5c:	4b77      	ldr	r3, [pc, #476]	; (800b03c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d0ed      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ae68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d173      	bne.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae70:	4b71      	ldr	r3, [pc, #452]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae7c:	4053      	eors	r3, r2
 800ae7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d015      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae86:	4b6c      	ldr	r3, [pc, #432]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ae92:	4b69      	ldr	r3, [pc, #420]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae96:	4a68      	ldr	r2, [pc, #416]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae9c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae9e:	4b66      	ldr	r3, [pc, #408]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea2:	4a65      	ldr	r2, [pc, #404]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aea8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aeaa:	4a63      	ldr	r2, [pc, #396]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aeb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aeb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebe:	d118      	bne.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec0:	f7f8 fd3e 	bl	8003940 <HAL_GetTick>
 800aec4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aec8:	e00d      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeca:	f7f8 fd39 	bl	8003940 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	f241 3388 	movw	r3, #5000	; 0x1388
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d903      	bls.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800aee4:	e005      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aee6:	4b54      	ldr	r3, [pc, #336]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0eb      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aef2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d129      	bne.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af0a:	d10e      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800af0c:	4b4a      	ldr	r3, [pc, #296]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af1c:	091a      	lsrs	r2, r3, #4
 800af1e:	4b48      	ldr	r3, [pc, #288]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800af20:	4013      	ands	r3, r2
 800af22:	4a45      	ldr	r2, [pc, #276]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af24:	430b      	orrs	r3, r1
 800af26:	6113      	str	r3, [r2, #16]
 800af28:	e005      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800af2a:	4b43      	ldr	r3, [pc, #268]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	4a42      	ldr	r2, [pc, #264]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af34:	6113      	str	r3, [r2, #16]
 800af36:	4b40      	ldr	r3, [pc, #256]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af46:	4a3c      	ldr	r2, [pc, #240]	; (800b038 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af48:	430b      	orrs	r3, r1
 800af4a:	6713      	str	r3, [r2, #112]	; 0x70
 800af4c:	e008      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800af56:	e003      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f002 0301 	and.w	r3, r2, #1
 800af6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af70:	2300      	movs	r3, #0
 800af72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800af7a:	460b      	mov	r3, r1
 800af7c:	4313      	orrs	r3, r2
 800af7e:	f000 808f 	beq.w	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af88:	2b28      	cmp	r3, #40	; 0x28
 800af8a:	d871      	bhi.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800af8c:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800af8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af92:	bf00      	nop
 800af94:	0800b079 	.word	0x0800b079
 800af98:	0800b071 	.word	0x0800b071
 800af9c:	0800b071 	.word	0x0800b071
 800afa0:	0800b071 	.word	0x0800b071
 800afa4:	0800b071 	.word	0x0800b071
 800afa8:	0800b071 	.word	0x0800b071
 800afac:	0800b071 	.word	0x0800b071
 800afb0:	0800b071 	.word	0x0800b071
 800afb4:	0800b045 	.word	0x0800b045
 800afb8:	0800b071 	.word	0x0800b071
 800afbc:	0800b071 	.word	0x0800b071
 800afc0:	0800b071 	.word	0x0800b071
 800afc4:	0800b071 	.word	0x0800b071
 800afc8:	0800b071 	.word	0x0800b071
 800afcc:	0800b071 	.word	0x0800b071
 800afd0:	0800b071 	.word	0x0800b071
 800afd4:	0800b05b 	.word	0x0800b05b
 800afd8:	0800b071 	.word	0x0800b071
 800afdc:	0800b071 	.word	0x0800b071
 800afe0:	0800b071 	.word	0x0800b071
 800afe4:	0800b071 	.word	0x0800b071
 800afe8:	0800b071 	.word	0x0800b071
 800afec:	0800b071 	.word	0x0800b071
 800aff0:	0800b071 	.word	0x0800b071
 800aff4:	0800b079 	.word	0x0800b079
 800aff8:	0800b071 	.word	0x0800b071
 800affc:	0800b071 	.word	0x0800b071
 800b000:	0800b071 	.word	0x0800b071
 800b004:	0800b071 	.word	0x0800b071
 800b008:	0800b071 	.word	0x0800b071
 800b00c:	0800b071 	.word	0x0800b071
 800b010:	0800b071 	.word	0x0800b071
 800b014:	0800b079 	.word	0x0800b079
 800b018:	0800b071 	.word	0x0800b071
 800b01c:	0800b071 	.word	0x0800b071
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800b071 	.word	0x0800b071
 800b028:	0800b071 	.word	0x0800b071
 800b02c:	0800b071 	.word	0x0800b071
 800b030:	0800b071 	.word	0x0800b071
 800b034:	0800b079 	.word	0x0800b079
 800b038:	58024400 	.word	0x58024400
 800b03c:	58024800 	.word	0x58024800
 800b040:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b048:	3308      	adds	r3, #8
 800b04a:	2101      	movs	r1, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 fdcb 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b058:	e00f      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05e:	3328      	adds	r3, #40	; 0x28
 800b060:	2101      	movs	r1, #1
 800b062:	4618      	mov	r0, r3
 800b064:	f001 fe72 	bl	800cd4c <RCCEx_PLL3_Config>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b06e:	e004      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b076:	e000      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b07a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10a      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b082:	4bbf      	ldr	r3, [pc, #764]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b086:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b090:	4abb      	ldr	r2, [pc, #748]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b092:	430b      	orrs	r3, r1
 800b094:	6553      	str	r3, [r2, #84]	; 0x54
 800b096:	e003      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b098:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b09c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f002 0302 	and.w	r3, r2, #2
 800b0ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	d041      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0c6:	2b05      	cmp	r3, #5
 800b0c8:	d824      	bhi.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b0ca:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b0e9 	.word	0x0800b0e9
 800b0d8:	0800b0ff 	.word	0x0800b0ff
 800b0dc:	0800b11d 	.word	0x0800b11d
 800b0e0:	0800b11d 	.word	0x0800b11d
 800b0e4:	0800b11d 	.word	0x0800b11d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 fd79 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b0fc:	e00f      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b102:	3328      	adds	r3, #40	; 0x28
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fe20 	bl	800cd4c <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b112:	e004      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b11a:	e000      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b11c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b126:	4b96      	ldr	r3, [pc, #600]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12a:	f023 0107 	bic.w	r1, r3, #7
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b134:	4a92      	ldr	r2, [pc, #584]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b136:	430b      	orrs	r3, r1
 800b138:	6553      	str	r3, [r2, #84]	; 0x54
 800b13a:	e003      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b13c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b140:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f002 0304 	and.w	r3, r2, #4
 800b150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b154:	2300      	movs	r3, #0
 800b156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b15a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b15e:	460b      	mov	r3, r1
 800b160:	4313      	orrs	r3, r2
 800b162:	d044      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b16c:	2b05      	cmp	r3, #5
 800b16e:	d825      	bhi.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b170:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b1c5 	.word	0x0800b1c5
 800b17c:	0800b191 	.word	0x0800b191
 800b180:	0800b1a7 	.word	0x0800b1a7
 800b184:	0800b1c5 	.word	0x0800b1c5
 800b188:	0800b1c5 	.word	0x0800b1c5
 800b18c:	0800b1c5 	.word	0x0800b1c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b194:	3308      	adds	r3, #8
 800b196:	2101      	movs	r1, #1
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 fd25 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1a4:	e00f      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1aa:	3328      	adds	r3, #40	; 0x28
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f001 fdcc 	bl	800cd4c <RCCEx_PLL3_Config>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1ba:	e004      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1c2:	e000      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b1c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10b      	bne.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1ce:	4b6c      	ldr	r3, [pc, #432]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d2:	f023 0107 	bic.w	r1, r3, #7
 800b1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1de:	4a68      	ldr	r2, [pc, #416]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1e0:	430b      	orrs	r3, r1
 800b1e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b1e4:	e003      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f002 0320 	and.w	r3, r2, #32
 800b1fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1fe:	2300      	movs	r3, #0
 800b200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b204:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d055      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b21a:	d033      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b21c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b220:	d82c      	bhi.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b226:	d02f      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b22c:	d826      	bhi.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b22e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b232:	d02b      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b234:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b238:	d820      	bhi.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b23e:	d012      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b244:	d81a      	bhi.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b246:	2b00      	cmp	r3, #0
 800b248:	d022      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b24a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b24e:	d115      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b254:	3308      	adds	r3, #8
 800b256:	2100      	movs	r1, #0
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 fcc5 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b25e:	4603      	mov	r3, r0
 800b260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b264:	e015      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26a:	3328      	adds	r3, #40	; 0x28
 800b26c:	2102      	movs	r1, #2
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 fd6c 	bl	800cd4c <RCCEx_PLL3_Config>
 800b274:	4603      	mov	r3, r0
 800b276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b27a:	e00a      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b282:	e006      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b284:	bf00      	nop
 800b286:	e004      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b288:	bf00      	nop
 800b28a:	e002      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b28c:	bf00      	nop
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10b      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b29a:	4b39      	ldr	r3, [pc, #228]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2aa:	4a35      	ldr	r2, [pc, #212]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6553      	str	r3, [r2, #84]	; 0x54
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b2c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b2d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	d058      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2e6:	d033      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b2e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2ec:	d82c      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b2ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f2:	d02f      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b2f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f8:	d826      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b2fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2fe:	d02b      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b300:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b304:	d820      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b30a:	d012      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b30c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b310:	d81a      	bhi.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d022      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b31a:	d115      	bne.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b320:	3308      	adds	r3, #8
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f001 fc5f 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b330:	e015      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	3328      	adds	r3, #40	; 0x28
 800b338:	2102      	movs	r1, #2
 800b33a:	4618      	mov	r0, r3
 800b33c:	f001 fd06 	bl	800cd4c <RCCEx_PLL3_Config>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b346:	e00a      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b34e:	e006      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b350:	bf00      	nop
 800b352:	e004      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b354:	bf00      	nop
 800b356:	e002      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b358:	bf00      	nop
 800b35a:	e000      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10e      	bne.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b366:	4b06      	ldr	r3, [pc, #24]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b376:	4a02      	ldr	r2, [pc, #8]	; (800b380 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b378:	430b      	orrs	r3, r1
 800b37a:	6593      	str	r3, [r2, #88]	; 0x58
 800b37c:	e006      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b37e:	bf00      	nop
 800b380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b384:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b388:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b39c:	2300      	movs	r3, #0
 800b39e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	d055      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3b8:	d033      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b3ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3be:	d82c      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3c4:	d02f      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ca:	d826      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b3cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3d0:	d02b      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b3d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3d6:	d820      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3dc:	d012      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b3de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3e2:	d81a      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d022      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ec:	d115      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f001 fbf6 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b402:	e015      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b408:	3328      	adds	r3, #40	; 0x28
 800b40a:	2102      	movs	r1, #2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f001 fc9d 	bl	800cd4c <RCCEx_PLL3_Config>
 800b412:	4603      	mov	r3, r0
 800b414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b418:	e00a      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b420:	e006      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b422:	bf00      	nop
 800b424:	e004      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b426:	bf00      	nop
 800b428:	e002      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b42a:	bf00      	nop
 800b42c:	e000      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b430:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10b      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b438:	4ba0      	ldr	r3, [pc, #640]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b444:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b448:	4a9c      	ldr	r2, [pc, #624]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b44a:	430b      	orrs	r3, r1
 800b44c:	6593      	str	r3, [r2, #88]	; 0x58
 800b44e:	e003      	b.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b450:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b454:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f002 0308 	and.w	r3, r2, #8
 800b464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b468:	2300      	movs	r3, #0
 800b46a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b46e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b472:	460b      	mov	r3, r1
 800b474:	4313      	orrs	r3, r2
 800b476:	d01e      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48a:	3328      	adds	r3, #40	; 0x28
 800b48c:	2102      	movs	r1, #2
 800b48e:	4618      	mov	r0, r3
 800b490:	f001 fc5c 	bl	800cd4c <RCCEx_PLL3_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b4a0:	4b86      	ldr	r3, [pc, #536]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4b0:	4a82      	ldr	r2, [pc, #520]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f002 0310 	and.w	r3, r2, #16
 800b4c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	d01e      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e2:	d10c      	bne.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e8:	3328      	adds	r3, #40	; 0x28
 800b4ea:	2102      	movs	r1, #2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f001 fc2d 	bl	800cd4c <RCCEx_PLL3_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b4fe:	4b6f      	ldr	r3, [pc, #444]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b502:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b50e:	4a6b      	ldr	r2, [pc, #428]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b510:	430b      	orrs	r3, r1
 800b512:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b520:	67bb      	str	r3, [r7, #120]	; 0x78
 800b522:	2300      	movs	r3, #0
 800b524:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b526:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b52a:	460b      	mov	r3, r1
 800b52c:	4313      	orrs	r3, r2
 800b52e:	d03e      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b53c:	d022      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b542:	d81b      	bhi.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d003      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b54c:	d00b      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b54e:	e015      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	3308      	adds	r3, #8
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 fb45 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b564:	e00f      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56a:	3328      	adds	r3, #40	; 0x28
 800b56c:	2102      	movs	r1, #2
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 fbec 	bl	800cd4c <RCCEx_PLL3_Config>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b57a:	e004      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b582:	e000      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b586:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10b      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b58e:	4b4b      	ldr	r3, [pc, #300]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b592:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b59e:	4a47      	ldr	r2, [pc, #284]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b5a4:	e003      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b5ba:	673b      	str	r3, [r7, #112]	; 0x70
 800b5bc:	2300      	movs	r3, #0
 800b5be:	677b      	str	r3, [r7, #116]	; 0x74
 800b5c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	d03b      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5d6:	d01f      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b5d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5dc:	d818      	bhi.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5e2:	d003      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b5e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5e8:	d007      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b5ea:	e011      	b.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ec:	4b33      	ldr	r3, [pc, #204]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	4a32      	ldr	r2, [pc, #200]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b5f8:	e00f      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	3328      	adds	r3, #40	; 0x28
 800b600:	2101      	movs	r1, #1
 800b602:	4618      	mov	r0, r3
 800b604:	f001 fba2 	bl	800cd4c <RCCEx_PLL3_Config>
 800b608:	4603      	mov	r3, r0
 800b60a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b60e:	e004      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b616:	e000      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b61a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10b      	bne.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b622:	4b26      	ldr	r3, [pc, #152]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b632:	4a22      	ldr	r2, [pc, #136]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b634:	430b      	orrs	r3, r1
 800b636:	6553      	str	r3, [r2, #84]	; 0x54
 800b638:	e003      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b63a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b63e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b64e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b650:	2300      	movs	r3, #0
 800b652:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b654:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b658:	460b      	mov	r3, r1
 800b65a:	4313      	orrs	r3, r2
 800b65c:	d034      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b66c:	d007      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b66e:	e011      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b670:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	4a11      	ldr	r2, [pc, #68]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b67a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b67c:	e00e      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b682:	3308      	adds	r3, #8
 800b684:	2102      	movs	r1, #2
 800b686:	4618      	mov	r0, r3
 800b688:	f001 faae 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b692:	e003      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b69a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10d      	bne.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6a4:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b2:	4a02      	ldr	r2, [pc, #8]	; (800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b4:	430b      	orrs	r3, r1
 800b6b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6b8:	e006      	b.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b6ba:	bf00      	nop
 800b6bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b6d4:	663b      	str	r3, [r7, #96]	; 0x60
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	d00c      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	3328      	adds	r3, #40	; 0x28
 800b6ea:	2102      	movs	r1, #2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f001 fb2d 	bl	800cd4c <RCCEx_PLL3_Config>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b70a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b70c:	2300      	movs	r3, #0
 800b70e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b710:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b714:	460b      	mov	r3, r1
 800b716:	4313      	orrs	r3, r2
 800b718:	d036      	beq.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b724:	d018      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b72a:	d811      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b72c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b730:	d014      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b736:	d80b      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d011      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b73c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b740:	d106      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b742:	4bb7      	ldr	r3, [pc, #732]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	4ab6      	ldr	r2, [pc, #728]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b74c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b74e:	e008      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b756:	e004      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b758:	bf00      	nop
 800b75a:	e002      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b75c:	bf00      	nop
 800b75e:	e000      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b760:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b76a:	4bad      	ldr	r3, [pc, #692]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b778:	4aa9      	ldr	r2, [pc, #676]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b77a:	430b      	orrs	r3, r1
 800b77c:	6553      	str	r3, [r2, #84]	; 0x54
 800b77e:	e003      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b784:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b794:	653b      	str	r3, [r7, #80]	; 0x50
 800b796:	2300      	movs	r3, #0
 800b798:	657b      	str	r3, [r7, #84]	; 0x54
 800b79a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	d009      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7a4:	4b9e      	ldr	r3, [pc, #632]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b2:	4a9b      	ldr	r2, [pc, #620]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	d009      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7d4:	4b92      	ldr	r3, [pc, #584]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7e2:	4a8f      	ldr	r2, [pc, #572]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b7f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b7fe:	460b      	mov	r3, r1
 800b800:	4313      	orrs	r3, r2
 800b802:	d00e      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b804:	4b86      	ldr	r3, [pc, #536]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	4a85      	ldr	r2, [pc, #532]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b80a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b80e:	6113      	str	r3, [r2, #16]
 800b810:	4b83      	ldr	r3, [pc, #524]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b812:	6919      	ldr	r1, [r3, #16]
 800b814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b818:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b81c:	4a80      	ldr	r2, [pc, #512]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b81e:	430b      	orrs	r3, r1
 800b820:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b82e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b830:	2300      	movs	r3, #0
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b834:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b838:	460b      	mov	r3, r1
 800b83a:	4313      	orrs	r3, r2
 800b83c:	d009      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b83e:	4b78      	ldr	r3, [pc, #480]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b842:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84c:	4a74      	ldr	r2, [pc, #464]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b84e:	430b      	orrs	r3, r1
 800b850:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b85e:	633b      	str	r3, [r7, #48]	; 0x30
 800b860:	2300      	movs	r3, #0
 800b862:	637b      	str	r3, [r7, #52]	; 0x34
 800b864:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b868:	460b      	mov	r3, r1
 800b86a:	4313      	orrs	r3, r2
 800b86c:	d00a      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b86e:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b872:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b87e:	4a68      	ldr	r2, [pc, #416]	; (800ba20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b880:	430b      	orrs	r3, r1
 800b882:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	2100      	movs	r1, #0
 800b88e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b896:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b89a:	460b      	mov	r3, r1
 800b89c:	4313      	orrs	r3, r2
 800b89e:	d011      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 f99d 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	6239      	str	r1, [r7, #32]
 800b8d0:	f003 0302 	and.w	r3, r3, #2
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	d011      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e4:	3308      	adds	r3, #8
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 f97d 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b8f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b900:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	2100      	movs	r1, #0
 800b90e:	61b9      	str	r1, [r7, #24]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	61fb      	str	r3, [r7, #28]
 800b916:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b91a:	460b      	mov	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	d011      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	3308      	adds	r3, #8
 800b926:	2102      	movs	r1, #2
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 f95d 	bl	800cbe8 <RCCEx_PLL2_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b934:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	2100      	movs	r1, #0
 800b94e:	6139      	str	r1, [r7, #16]
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b95a:	460b      	mov	r3, r1
 800b95c:	4313      	orrs	r3, r2
 800b95e:	d011      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b964:	3328      	adds	r3, #40	; 0x28
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 f9ef 	bl	800cd4c <RCCEx_PLL3_Config>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	2100      	movs	r1, #0
 800b98e:	60b9      	str	r1, [r7, #8]
 800b990:	f003 0310 	and.w	r3, r3, #16
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b99a:	460b      	mov	r3, r1
 800b99c:	4313      	orrs	r3, r2
 800b99e:	d011      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	3328      	adds	r3, #40	; 0x28
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 f9cf 	bl	800cd4c <RCCEx_PLL3_Config>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	6039      	str	r1, [r7, #0]
 800b9d0:	f003 0320 	and.w	r3, r3, #32
 800b9d4:	607b      	str	r3, [r7, #4]
 800b9d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d011      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e4:	3328      	adds	r3, #40	; 0x28
 800b9e6:	2102      	movs	r1, #2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 f9af 	bl	800cd4c <RCCEx_PLL3_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ba04:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e000      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba1e:	bf00      	nop
 800ba20:	58024400 	.word	0x58024400

0800ba24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b090      	sub	sp, #64	; 0x40
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ba2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba32:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ba36:	430b      	orrs	r3, r1
 800ba38:	f040 8094 	bne.w	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba3c:	4b9b      	ldr	r3, [pc, #620]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba40:	f003 0307 	and.w	r3, r3, #7
 800ba44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	f200 8087 	bhi.w	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba4e:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800ba69 	.word	0x0800ba69
 800ba58:	0800ba91 	.word	0x0800ba91
 800ba5c:	0800bab9 	.word	0x0800bab9
 800ba60:	0800bb55 	.word	0x0800bb55
 800ba64:	0800bae1 	.word	0x0800bae1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba68:	4b90      	ldr	r3, [pc, #576]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba74:	d108      	bne.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 ff62 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba84:	f000 bc93 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba8c:	f000 bc8f 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba90:	4b86      	ldr	r3, [pc, #536]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba9c:	d108      	bne.n	800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba9e:	f107 0318 	add.w	r3, r7, #24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 fca6 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baac:	f000 bc7f 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab4:	f000 bc7b 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bab8:	4b7c      	ldr	r3, [pc, #496]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac4:	d108      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bac6:	f107 030c 	add.w	r3, r7, #12
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fde6 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad4:	f000 bc6b 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800badc:	f000 bc67 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bae0:	4b72      	ldr	r3, [pc, #456]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bae8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baea:	4b70      	ldr	r3, [pc, #448]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f003 0304 	and.w	r3, r3, #4
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d10c      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800baf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d109      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bafc:	4b6b      	ldr	r3, [pc, #428]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	08db      	lsrs	r3, r3, #3
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	4a6a      	ldr	r2, [pc, #424]	; (800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb08:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb0e:	e01f      	b.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb10:	4b66      	ldr	r3, [pc, #408]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb1c:	d106      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb24:	d102      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb26:	4b63      	ldr	r3, [pc, #396]	; (800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb2a:	e011      	b.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb2c:	4b5f      	ldr	r3, [pc, #380]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb38:	d106      	bne.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb40:	d102      	bne.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb42:	4b5d      	ldr	r3, [pc, #372]	; (800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb46:	e003      	b.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb4c:	f000 bc2f 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb50:	f000 bc2d 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb54:	4b59      	ldr	r3, [pc, #356]	; (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb58:	f000 bc29 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb60:	f000 bc25 	b.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb68:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	f040 80a7 	bne.w	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bb72:	4b4e      	ldr	r3, [pc, #312]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb76:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bb7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb82:	d054      	beq.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb8a:	f200 808b 	bhi.w	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb94:	f000 8083 	beq.w	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb9e:	f200 8081 	bhi.w	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bba8:	d02f      	beq.n	800bc0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbb0:	d878      	bhi.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d004      	beq.n	800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbbe:	d012      	beq.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bbc0:	e070      	b.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbc2:	4b3a      	ldr	r3, [pc, #232]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbce:	d107      	bne.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 feb5 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbde:	e3e6      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe4:	e3e3      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbe6:	4b31      	ldr	r3, [pc, #196]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbf2:	d107      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbf4:	f107 0318 	add.w	r3, r7, #24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fbfb 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc02:	e3d4      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc08:	e3d1      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc0a:	4b28      	ldr	r3, [pc, #160]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc16:	d107      	bne.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc18:	f107 030c 	add.w	r3, r7, #12
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 fd3d 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc26:	e3c2      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc2c:	e3bf      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc2e:	4b1f      	ldr	r3, [pc, #124]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc38:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b04      	cmp	r3, #4
 800bc42:	d10c      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d109      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc4a:	4b18      	ldr	r3, [pc, #96]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	08db      	lsrs	r3, r3, #3
 800bc50:	f003 0303 	and.w	r3, r3, #3
 800bc54:	4a16      	ldr	r2, [pc, #88]	; (800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc56:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5c:	e01e      	b.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc5e:	4b13      	ldr	r3, [pc, #76]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6a:	d106      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc72:	d102      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc74:	4b0f      	ldr	r3, [pc, #60]	; (800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc78:	e010      	b.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc7a:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc86:	d106      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc8e:	d102      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc90:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc94:	e002      	b.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc9a:	e388      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc9c:	e387      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc9e:	4b07      	ldr	r3, [pc, #28]	; (800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca2:	e384      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca8:	e381      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcaa:	bf00      	nop
 800bcac:	58024400 	.word	0x58024400
 800bcb0:	03d09000 	.word	0x03d09000
 800bcb4:	003d0900 	.word	0x003d0900
 800bcb8:	02faf080 	.word	0x02faf080
 800bcbc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bcc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bcc8:	430b      	orrs	r3, r1
 800bcca:	f040 809c 	bne.w	800be06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bcce:	4b9e      	ldr	r3, [pc, #632]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bcd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bcd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcde:	d054      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bce6:	f200 808b 	bhi.w	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcf0:	f000 8083 	beq.w	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bcfa:	f200 8081 	bhi.w	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd04:	d02f      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd0c:	d878      	bhi.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd1a:	d012      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bd1c:	e070      	b.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd1e:	4b8a      	ldr	r3, [pc, #552]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd2a:	d107      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fe07 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd3a:	e338      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd40:	e335      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd42:	4b81      	ldr	r3, [pc, #516]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd50:	f107 0318 	add.w	r3, r7, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fb4d 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd5e:	e326      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd64:	e323      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd66:	4b78      	ldr	r3, [pc, #480]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd72:	d107      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd74:	f107 030c 	add.w	r3, r7, #12
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fc8f 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd82:	e314      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd88:	e311      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd8a:	4b6f      	ldr	r3, [pc, #444]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd92:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd94:	4b6c      	ldr	r3, [pc, #432]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	d10c      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bda6:	4b68      	ldr	r3, [pc, #416]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	08db      	lsrs	r3, r3, #3
 800bdac:	f003 0303 	and.w	r3, r3, #3
 800bdb0:	4a66      	ldr	r2, [pc, #408]	; (800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bdb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb8:	e01e      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdba:	4b63      	ldr	r3, [pc, #396]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc6:	d106      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdce:	d102      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdd0:	4b5f      	ldr	r3, [pc, #380]	; (800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdd4:	e010      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdd6:	4b5c      	ldr	r3, [pc, #368]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bde2:	d106      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdea:	d102      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdec:	4b59      	ldr	r3, [pc, #356]	; (800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf0:	e002      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdf6:	e2da      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdf8:	e2d9      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdfa:	4b57      	ldr	r3, [pc, #348]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdfe:	e2d6      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be04:	e2d3      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be0a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800be0e:	430b      	orrs	r3, r1
 800be10:	f040 80a7 	bne.w	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800be14:	4b4c      	ldr	r3, [pc, #304]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800be1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be24:	d055      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be2c:	f200 8096 	bhi.w	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be36:	f000 8084 	beq.w	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be40:	f200 808c 	bhi.w	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be4a:	d030      	beq.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be52:	f200 8083 	bhi.w	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d004      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800be5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be62:	d012      	beq.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800be64:	e07a      	b.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be66:	4b38      	ldr	r3, [pc, #224]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be72:	d107      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 fd63 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be82:	e294      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be88:	e291      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be8a:	4b2f      	ldr	r3, [pc, #188]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be96:	d107      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be98:	f107 0318 	add.w	r3, r7, #24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 faa9 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bea6:	e282      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beac:	e27f      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beae:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beba:	d107      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fbeb 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beca:	e270      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed0:	e26d      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bed2:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bedc:	4b1a      	ldr	r3, [pc, #104]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	d10c      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beee:	4b16      	ldr	r3, [pc, #88]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	08db      	lsrs	r3, r3, #3
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	4a14      	ldr	r2, [pc, #80]	; (800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800befa:	fa22 f303 	lsr.w	r3, r2, r3
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf00:	e01e      	b.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf02:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0e:	d106      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf16:	d102      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf18:	4b0d      	ldr	r3, [pc, #52]	; (800bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf1c:	e010      	b.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf1e:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf2a:	d106      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf32:	d102      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf38:	e002      	b.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf3e:	e236      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf40:	e235      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf46:	e232      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf48:	58024400 	.word	0x58024400
 800bf4c:	03d09000 	.word	0x03d09000
 800bf50:	003d0900 	.word	0x003d0900
 800bf54:	02faf080 	.word	0x02faf080
 800bf58:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf60:	e225      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bf62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf66:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bf6a:	430b      	orrs	r3, r1
 800bf6c:	f040 8085 	bne.w	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bf70:	4b9c      	ldr	r3, [pc, #624]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bf78:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf80:	d06b      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf88:	d874      	bhi.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf90:	d056      	beq.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf98:	d86c      	bhi.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfa0:	d03b      	beq.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bfa8:	d864      	bhi.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb0:	d021      	beq.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfb8:	d85c      	bhi.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc6:	d004      	beq.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bfc8:	e054      	b.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bfca:	f7fe fb5f 	bl	800a68c <HAL_RCC_GetPCLK1Freq>
 800bfce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfd0:	e1ed      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfd2:	4b84      	ldr	r3, [pc, #528]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfde:	d107      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfe0:	f107 0318 	add.w	r3, r7, #24
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fa05 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfee:	e1de      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	e1db      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bff6:	4b7b      	ldr	r3, [pc, #492]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c002:	d107      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c004:	f107 030c 	add.w	r3, r7, #12
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 fb47 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c012:	e1cc      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c018:	e1c9      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c01a:	4b72      	ldr	r3, [pc, #456]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0304 	and.w	r3, r3, #4
 800c022:	2b04      	cmp	r3, #4
 800c024:	d109      	bne.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c026:	4b6f      	ldr	r3, [pc, #444]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	f003 0303 	and.w	r3, r3, #3
 800c030:	4a6d      	ldr	r2, [pc, #436]	; (800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c032:	fa22 f303 	lsr.w	r3, r2, r3
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c038:	e1b9      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03e:	e1b6      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c040:	4b68      	ldr	r3, [pc, #416]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c04c:	d102      	bne.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c04e:	4b67      	ldr	r3, [pc, #412]	; (800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c052:	e1ac      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c058:	e1a9      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c05a:	4b62      	ldr	r3, [pc, #392]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c066:	d102      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c068:	4b61      	ldr	r3, [pc, #388]	; (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06c:	e19f      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c072:	e19c      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c078:	e199      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c07e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c082:	430b      	orrs	r3, r1
 800c084:	d173      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c086:	4b57      	ldr	r3, [pc, #348]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c08a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c08e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c096:	d02f      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c09e:	d863      	bhi.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ac:	d012      	beq.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c0ae:	e05b      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0b0:	4b4c      	ldr	r3, [pc, #304]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0bc:	d107      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0be:	f107 0318 	add.w	r3, r7, #24
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f996 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0cc:	e16f      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d2:	e16c      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0d4:	4b43      	ldr	r3, [pc, #268]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e0:	d107      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e2:	f107 030c 	add.w	r3, r7, #12
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fad8 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0f0:	e15d      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f6:	e15a      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0f8:	4b3a      	ldr	r3, [pc, #232]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c100:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c102:	4b38      	ldr	r3, [pc, #224]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d10c      	bne.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c110:	2b00      	cmp	r3, #0
 800c112:	d109      	bne.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c114:	4b33      	ldr	r3, [pc, #204]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	08db      	lsrs	r3, r3, #3
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	4a32      	ldr	r2, [pc, #200]	; (800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c126:	e01e      	b.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c128:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c134:	d106      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13c:	d102      	bne.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c13e:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c140:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c142:	e010      	b.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c144:	4b27      	ldr	r3, [pc, #156]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c150:	d106      	bne.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c158:	d102      	bne.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c15a:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c15c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15e:	e002      	b.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c160:	2300      	movs	r3, #0
 800c162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c164:	e123      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c166:	e122      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c16c:	e11f      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c16e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c172:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c176:	430b      	orrs	r3, r1
 800c178:	d13c      	bne.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c17a:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c17e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c182:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	2b00      	cmp	r3, #0
 800c188:	d004      	beq.n	800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c190:	d012      	beq.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c192:	e023      	b.n	800c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c194:	4b13      	ldr	r3, [pc, #76]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c19c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1a0:	d107      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fbcc 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b0:	e0fd      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b6:	e0fa      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1c4:	d107      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1c6:	f107 0318 	add.w	r3, r7, #24
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f000 f912 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d4:	e0eb      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1da:	e0e8      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e0:	e0e5      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1e2:	bf00      	nop
 800c1e4:	58024400 	.word	0x58024400
 800c1e8:	03d09000 	.word	0x03d09000
 800c1ec:	003d0900 	.word	0x003d0900
 800c1f0:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c1fc:	430b      	orrs	r3, r1
 800c1fe:	f040 8085 	bne.w	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c202:	4b6d      	ldr	r3, [pc, #436]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c206:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c20a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c212:	d06b      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c21a:	d874      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c222:	d056      	beq.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c22a:	d86c      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c232:	d03b      	beq.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c23a:	d864      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c242:	d021      	beq.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c24a:	d85c      	bhi.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d004      	beq.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c258:	d004      	beq.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c25a:	e054      	b.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c25c:	f000 f8b4 	bl	800c3c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c260:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c262:	e0a4      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c264:	4b54      	ldr	r3, [pc, #336]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c26c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c270:	d107      	bne.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c272:	f107 0318 	add.w	r3, r7, #24
 800c276:	4618      	mov	r0, r3
 800c278:	f000 f8bc 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c280:	e095      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c286:	e092      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c288:	4b4b      	ldr	r3, [pc, #300]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c294:	d107      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f9fe 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2a4:	e083      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2aa:	e080      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2ac:	4b42      	ldr	r3, [pc, #264]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b04      	cmp	r3, #4
 800c2b6:	d109      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2b8:	4b3f      	ldr	r3, [pc, #252]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	08db      	lsrs	r3, r3, #3
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	4a3e      	ldr	r2, [pc, #248]	; (800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ca:	e070      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d0:	e06d      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c2d2:	4b39      	ldr	r3, [pc, #228]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2de:	d102      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c2e0:	4b37      	ldr	r3, [pc, #220]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e4:	e063      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ea:	e060      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c2ec:	4b32      	ldr	r3, [pc, #200]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2f8:	d102      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c2fa:	4b32      	ldr	r3, [pc, #200]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fe:	e056      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c304:	e053      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30a:	e050      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c30c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c310:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c314:	430b      	orrs	r3, r1
 800c316:	d148      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c318:	4b27      	ldr	r3, [pc, #156]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c31c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c320:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c328:	d02a      	beq.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c330:	d838      	bhi.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c33e:	d00d      	beq.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c340:	e030      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c342:	4b1d      	ldr	r3, [pc, #116]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c34e:	d102      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c350:	4b1c      	ldr	r3, [pc, #112]	; (800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c354:	e02b      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35a:	e028      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c35c:	4b16      	ldr	r3, [pc, #88]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c368:	d107      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c36a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 fae8 	bl	800c944 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c378:	e019      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37e:	e016      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c380:	4b0d      	ldr	r3, [pc, #52]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c38c:	d107      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c38e:	f107 0318 	add.w	r3, r7, #24
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f82e 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c39c:	e007      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a2:	e004      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a8:	e001      	b.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3740      	adds	r7, #64	; 0x40
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	58024400 	.word	0x58024400
 800c3bc:	03d09000 	.word	0x03d09000
 800c3c0:	003d0900 	.word	0x003d0900
 800c3c4:	02faf080 	.word	0x02faf080

0800c3c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c3cc:	f7fe f92e 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	091b      	lsrs	r3, r3, #4
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	4904      	ldr	r1, [pc, #16]	; (800c3f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c3de:	5ccb      	ldrb	r3, [r1, r3]
 800c3e0:	f003 031f 	and.w	r3, r3, #31
 800c3e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	58024400 	.word	0x58024400
 800c3f0:	0801b5a4 	.word	0x0801b5a4

0800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b089      	sub	sp, #36	; 0x24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c3fc:	4ba1      	ldr	r3, [pc, #644]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c400:	f003 0303 	and.w	r3, r3, #3
 800c404:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c406:	4b9f      	ldr	r3, [pc, #636]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40a:	0b1b      	lsrs	r3, r3, #12
 800c40c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c410:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c412:	4b9c      	ldr	r3, [pc, #624]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c416:	091b      	lsrs	r3, r3, #4
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c41e:	4b99      	ldr	r3, [pc, #612]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c422:	08db      	lsrs	r3, r3, #3
 800c424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	fb02 f303 	mul.w	r3, r2, r3
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 8111 	beq.w	800c664 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b02      	cmp	r3, #2
 800c446:	f000 8083 	beq.w	800c550 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	f200 80a1 	bhi.w	800c594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d056      	beq.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c45e:	e099      	b.n	800c594 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c460:	4b88      	ldr	r3, [pc, #544]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0320 	and.w	r3, r3, #32
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d02d      	beq.n	800c4c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c46c:	4b85      	ldr	r3, [pc, #532]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	08db      	lsrs	r3, r3, #3
 800c472:	f003 0303 	and.w	r3, r3, #3
 800c476:	4a84      	ldr	r2, [pc, #528]	; (800c688 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c478:	fa22 f303 	lsr.w	r3, r2, r3
 800c47c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	ee07 3a90 	vmov	s15, r3
 800c484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	ee07 3a90 	vmov	s15, r3
 800c48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c496:	4b7b      	ldr	r3, [pc, #492]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c4c6:	e087      	b.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c690 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4da:	4b6a      	ldr	r3, [pc, #424]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e2:	ee07 3a90 	vmov	s15, r3
 800c4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c50a:	e065      	b.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c51e:	4b59      	ldr	r3, [pc, #356]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c532:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c54e:	e043      	b.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c562:	4b48      	ldr	r3, [pc, #288]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c572:	ed97 6a03 	vldr	s12, [r7, #12]
 800c576:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c592:	e021      	b.n	800c5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	ee07 3a90 	vmov	s15, r3
 800c59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c59e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5a6:	4b37      	ldr	r3, [pc, #220]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c68c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c5d8:	4b2a      	ldr	r3, [pc, #168]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	0a5b      	lsrs	r3, r3, #9
 800c5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5fe:	ee17 2a90 	vmov	r2, s15
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c606:	4b1f      	ldr	r3, [pc, #124]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60a:	0c1b      	lsrs	r3, r3, #16
 800c60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c610:	ee07 3a90 	vmov	s15, r3
 800c614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c61c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c620:	edd7 6a07 	vldr	s13, [r7, #28]
 800c624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c62c:	ee17 2a90 	vmov	r2, s15
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c634:	4b13      	ldr	r3, [pc, #76]	; (800c684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	0e1b      	lsrs	r3, r3, #24
 800c63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c64a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c64e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c65a:	ee17 2a90 	vmov	r2, s15
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c662:	e008      	b.n	800c676 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	609a      	str	r2, [r3, #8]
}
 800c676:	bf00      	nop
 800c678:	3724      	adds	r7, #36	; 0x24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	58024400 	.word	0x58024400
 800c688:	03d09000 	.word	0x03d09000
 800c68c:	46000000 	.word	0x46000000
 800c690:	4c742400 	.word	0x4c742400
 800c694:	4a742400 	.word	0x4a742400
 800c698:	4c3ebc20 	.word	0x4c3ebc20

0800c69c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b089      	sub	sp, #36	; 0x24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6a4:	4ba1      	ldr	r3, [pc, #644]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	f003 0303 	and.w	r3, r3, #3
 800c6ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c6ae:	4b9f      	ldr	r3, [pc, #636]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b2:	0d1b      	lsrs	r3, r3, #20
 800c6b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c6ba:	4b9c      	ldr	r3, [pc, #624]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c6c6:	4b99      	ldr	r3, [pc, #612]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ca:	08db      	lsrs	r3, r3, #3
 800c6cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8111 	beq.w	800c90c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	f000 8083 	beq.w	800c7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	f200 80a1 	bhi.w	800c83c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d056      	beq.n	800c7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c706:	e099      	b.n	800c83c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c708:	4b88      	ldr	r3, [pc, #544]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0320 	and.w	r3, r3, #32
 800c710:	2b00      	cmp	r3, #0
 800c712:	d02d      	beq.n	800c770 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c714:	4b85      	ldr	r3, [pc, #532]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	08db      	lsrs	r3, r3, #3
 800c71a:	f003 0303 	and.w	r3, r3, #3
 800c71e:	4a84      	ldr	r2, [pc, #528]	; (800c930 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c720:	fa22 f303 	lsr.w	r3, r2, r3
 800c724:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	ee07 3a90 	vmov	s15, r3
 800c72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	ee07 3a90 	vmov	s15, r3
 800c736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c73e:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c752:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c76e:	e087      	b.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c938 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c782:	4b6a      	ldr	r3, [pc, #424]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c792:	ed97 6a03 	vldr	s12, [r7, #12]
 800c796:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7b2:	e065      	b.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c93c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c6:	4b59      	ldr	r3, [pc, #356]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7f6:	e043      	b.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c940 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c80a:	4b48      	ldr	r3, [pc, #288]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c83a:	e021      	b.n	800c880 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c93c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84e:	4b37      	ldr	r3, [pc, #220]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c862:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c934 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c87e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c880:	4b2a      	ldr	r3, [pc, #168]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	0a5b      	lsrs	r3, r3, #9
 800c886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88a:	ee07 3a90 	vmov	s15, r3
 800c88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c89a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8a6:	ee17 2a90 	vmov	r2, s15
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c8ae:	4b1f      	ldr	r3, [pc, #124]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b2:	0c1b      	lsrs	r3, r3, #16
 800c8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b8:	ee07 3a90 	vmov	s15, r3
 800c8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d4:	ee17 2a90 	vmov	r2, s15
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c8dc:	4b13      	ldr	r3, [pc, #76]	; (800c92c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	0e1b      	lsrs	r3, r3, #24
 800c8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c902:	ee17 2a90 	vmov	r2, s15
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c90a:	e008      	b.n	800c91e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	609a      	str	r2, [r3, #8]
}
 800c91e:	bf00      	nop
 800c920:	3724      	adds	r7, #36	; 0x24
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	58024400 	.word	0x58024400
 800c930:	03d09000 	.word	0x03d09000
 800c934:	46000000 	.word	0x46000000
 800c938:	4c742400 	.word	0x4c742400
 800c93c:	4a742400 	.word	0x4a742400
 800c940:	4c3ebc20 	.word	0x4c3ebc20

0800c944 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c944:	b480      	push	{r7}
 800c946:	b089      	sub	sp, #36	; 0x24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c94c:	4ba0      	ldr	r3, [pc, #640]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c956:	4b9e      	ldr	r3, [pc, #632]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	091b      	lsrs	r3, r3, #4
 800c95c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c960:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c962:	4b9b      	ldr	r3, [pc, #620]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c96c:	4b98      	ldr	r3, [pc, #608]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c970:	08db      	lsrs	r3, r3, #3
 800c972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	fb02 f303 	mul.w	r3, r2, r3
 800c97c:	ee07 3a90 	vmov	s15, r3
 800c980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c984:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8111 	beq.w	800cbb2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	2b02      	cmp	r3, #2
 800c994:	f000 8083 	beq.w	800ca9e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	f200 80a1 	bhi.w	800cae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c9a6:	69bb      	ldr	r3, [r7, #24]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d056      	beq.n	800ca5a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c9ac:	e099      	b.n	800cae2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9ae:	4b88      	ldr	r3, [pc, #544]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 0320 	and.w	r3, r3, #32
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d02d      	beq.n	800ca16 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ba:	4b85      	ldr	r3, [pc, #532]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	08db      	lsrs	r3, r3, #3
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	4a83      	ldr	r2, [pc, #524]	; (800cbd4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	ee07 3a90 	vmov	s15, r3
 800c9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e4:	4b7a      	ldr	r3, [pc, #488]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ec:	ee07 3a90 	vmov	s15, r3
 800c9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c9fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca14:	e087      	b.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	ee07 3a90 	vmov	s15, r3
 800ca1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cbdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ca24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca28:	4b69      	ldr	r3, [pc, #420]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca30:	ee07 3a90 	vmov	s15, r3
 800ca34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca38:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca58:	e065      	b.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	ee07 3a90 	vmov	s15, r3
 800ca60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca64:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cbe0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ca68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6c:	4b58      	ldr	r3, [pc, #352]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca74:	ee07 3a90 	vmov	s15, r3
 800ca78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca80:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca9c:	e043      	b.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cbe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800caac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab0:	4b47      	ldr	r3, [pc, #284]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab8:	ee07 3a90 	vmov	s15, r3
 800cabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cadc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cae0:	e021      	b.n	800cb26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	ee07 3a90 	vmov	s15, r3
 800cae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cbdc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800caf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf4:	4b36      	ldr	r3, [pc, #216]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb04:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb08:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cbd8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cb26:	4b2a      	ldr	r3, [pc, #168]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2a:	0a5b      	lsrs	r3, r3, #9
 800cb2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb40:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb4c:	ee17 2a90 	vmov	r2, s15
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cb54:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb58:	0c1b      	lsrs	r3, r3, #16
 800cb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7a:	ee17 2a90 	vmov	r2, s15
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cb82:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb86:	0e1b      	lsrs	r3, r3, #24
 800cb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba8:	ee17 2a90 	vmov	r2, s15
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cbb0:	e008      	b.n	800cbc4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	609a      	str	r2, [r3, #8]
}
 800cbc4:	bf00      	nop
 800cbc6:	3724      	adds	r7, #36	; 0x24
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	58024400 	.word	0x58024400
 800cbd4:	03d09000 	.word	0x03d09000
 800cbd8:	46000000 	.word	0x46000000
 800cbdc:	4c742400 	.word	0x4c742400
 800cbe0:	4a742400 	.word	0x4a742400
 800cbe4:	4c3ebc20 	.word	0x4c3ebc20

0800cbe8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbf6:	4b53      	ldr	r3, [pc, #332]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfa:	f003 0303 	and.w	r3, r3, #3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d101      	bne.n	800cc06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e099      	b.n	800cd3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc06:	4b4f      	ldr	r3, [pc, #316]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a4e      	ldr	r2, [pc, #312]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc12:	f7f6 fe95 	bl	8003940 <HAL_GetTick>
 800cc16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc18:	e008      	b.n	800cc2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc1a:	f7f6 fe91 	bl	8003940 <HAL_GetTick>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d901      	bls.n	800cc2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e086      	b.n	800cd3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc2c:	4b45      	ldr	r3, [pc, #276]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1f0      	bne.n	800cc1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc38:	4b42      	ldr	r3, [pc, #264]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	031b      	lsls	r3, r3, #12
 800cc46:	493f      	ldr	r1, [pc, #252]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	628b      	str	r3, [r1, #40]	; 0x28
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	025b      	lsls	r3, r3, #9
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	431a      	orrs	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	041b      	lsls	r3, r3, #16
 800cc6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	061b      	lsls	r3, r3, #24
 800cc78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc7c:	4931      	ldr	r1, [pc, #196]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cc82:	4b30      	ldr	r3, [pc, #192]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	492d      	ldr	r1, [pc, #180]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc90:	4313      	orrs	r3, r2
 800cc92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cc94:	4b2b      	ldr	r3, [pc, #172]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	f023 0220 	bic.w	r2, r3, #32
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	4928      	ldr	r1, [pc, #160]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cca6:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	4a26      	ldr	r2, [pc, #152]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccac:	f023 0310 	bic.w	r3, r3, #16
 800ccb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ccb2:	4b24      	ldr	r3, [pc, #144]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccb6:	4b24      	ldr	r3, [pc, #144]	; (800cd48 <RCCEx_PLL2_Config+0x160>)
 800ccb8:	4013      	ands	r3, r2
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	69d2      	ldr	r2, [r2, #28]
 800ccbe:	00d2      	lsls	r2, r2, #3
 800ccc0:	4920      	ldr	r1, [pc, #128]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ccc6:	4b1f      	ldr	r3, [pc, #124]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccca:	4a1e      	ldr	r2, [pc, #120]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cccc:	f043 0310 	orr.w	r3, r3, #16
 800ccd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ccd8:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	4a19      	ldr	r2, [pc, #100]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cce4:	e00f      	b.n	800cd06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d106      	bne.n	800ccfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ccec:	4b15      	ldr	r3, [pc, #84]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf0:	4a14      	ldr	r2, [pc, #80]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccf8:	e005      	b.n	800cd06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ccfa:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800ccfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfe:	4a11      	ldr	r2, [pc, #68]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cd00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd06:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a0e      	ldr	r2, [pc, #56]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cd0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd12:	f7f6 fe15 	bl	8003940 <HAL_GetTick>
 800cd16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd18:	e008      	b.n	800cd2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd1a:	f7f6 fe11 	bl	8003940 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d901      	bls.n	800cd2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e006      	b.n	800cd3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd2c:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <RCCEx_PLL2_Config+0x15c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f0      	beq.n	800cd1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	58024400 	.word	0x58024400
 800cd48:	ffff0007 	.word	0xffff0007

0800cd4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd5a:	4b53      	ldr	r3, [pc, #332]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5e:	f003 0303 	and.w	r3, r3, #3
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d101      	bne.n	800cd6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e099      	b.n	800ce9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cd6a:	4b4f      	ldr	r3, [pc, #316]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a4e      	ldr	r2, [pc, #312]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cd70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd76:	f7f6 fde3 	bl	8003940 <HAL_GetTick>
 800cd7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd7c:	e008      	b.n	800cd90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cd7e:	f7f6 fddf 	bl	8003940 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d901      	bls.n	800cd90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	e086      	b.n	800ce9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd90:	4b45      	ldr	r3, [pc, #276]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f0      	bne.n	800cd7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd9c:	4b42      	ldr	r3, [pc, #264]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	051b      	lsls	r3, r3, #20
 800cdaa:	493f      	ldr	r1, [pc, #252]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cdac:	4313      	orrs	r3, r2
 800cdae:	628b      	str	r3, [r1, #40]	; 0x28
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	025b      	lsls	r3, r3, #9
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	041b      	lsls	r3, r3, #16
 800cdce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	061b      	lsls	r3, r3, #24
 800cddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cde0:	4931      	ldr	r1, [pc, #196]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cde2:	4313      	orrs	r3, r2
 800cde4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cde6:	4b30      	ldr	r3, [pc, #192]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	492d      	ldr	r1, [pc, #180]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cdf8:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	4928      	ldr	r1, [pc, #160]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce0a:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	4a26      	ldr	r2, [pc, #152]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce16:	4b24      	ldr	r3, [pc, #144]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce1a:	4b24      	ldr	r3, [pc, #144]	; (800ceac <RCCEx_PLL3_Config+0x160>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	69d2      	ldr	r2, [r2, #28]
 800ce22:	00d2      	lsls	r2, r2, #3
 800ce24:	4920      	ldr	r1, [pc, #128]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce2a:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	4a1e      	ldr	r2, [pc, #120]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ce3c:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	4a19      	ldr	r2, [pc, #100]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce48:	e00f      	b.n	800ce6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d106      	bne.n	800ce5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	4a14      	ldr	r2, [pc, #80]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce5c:	e005      	b.n	800ce6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	4a11      	ldr	r2, [pc, #68]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a0e      	ldr	r2, [pc, #56]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce76:	f7f6 fd63 	bl	8003940 <HAL_GetTick>
 800ce7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce7c:	e008      	b.n	800ce90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce7e:	f7f6 fd5f 	bl	8003940 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e006      	b.n	800ce9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <RCCEx_PLL3_Config+0x15c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f0      	beq.n	800ce7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	58024400 	.word	0x58024400
 800ceac:	ffff0007 	.word	0xffff0007

0800ceb0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08a      	sub	sp, #40	; 0x28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e075      	b.n	800cfae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d105      	bne.n	800ceda <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7f5 fe0f 	bl	8002af8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2204      	movs	r2, #4
 800cede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f868 	bl	800cfb8 <HAL_SD_InitCard>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	e05d      	b.n	800cfae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cef2:	f107 0308 	add.w	r3, r7, #8
 800cef6:	4619      	mov	r1, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 fdaf 	bl	800da5c <HAL_SD_GetCardStatus>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e052      	b.n	800cfae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cf08:	7e3b      	ldrb	r3, [r7, #24]
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cf0e:	7e7b      	ldrb	r3, [r7, #25]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d10a      	bne.n	800cf32 <HAL_SD_Init+0x82>
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d102      	bne.n	800cf28 <HAL_SD_Init+0x78>
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d004      	beq.n	800cf32 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf2e:	659a      	str	r2, [r3, #88]	; 0x58
 800cf30:	e00b      	b.n	800cf4a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d104      	bne.n	800cf44 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf40:	659a      	str	r2, [r3, #88]	; 0x58
 800cf42:	e002      	b.n	800cf4a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fe6d 	bl	800dc30 <HAL_SD_ConfigWideBusOperation>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e026      	b.n	800cfae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cf60:	f7f6 fcee 	bl	8003940 <HAL_GetTick>
 800cf64:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cf66:	e011      	b.n	800cf8c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cf68:	f7f6 fcea 	bl	8003940 <HAL_GetTick>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf76:	d109      	bne.n	800cf8c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf7e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	e010      	b.n	800cfae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 ff61 	bl	800de54 <HAL_SD_GetCardState>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	d1e7      	bne.n	800cf68 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3728      	adds	r7, #40	; 0x28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfb8:	b590      	push	{r4, r7, lr}
 800cfba:	b08d      	sub	sp, #52	; 0x34
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cfd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cfd4:	f04f 0100 	mov.w	r1, #0
 800cfd8:	f7fe fd24 	bl	800ba24 <HAL_RCCEx_GetPeriphCLKFreq>
 800cfdc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d109      	bne.n	800cff8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cff2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e070      	b.n	800d0da <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	0a1b      	lsrs	r3, r3, #8
 800cffc:	4a39      	ldr	r2, [pc, #228]	; (800d0e4 <HAL_SD_InitCard+0x12c>)
 800cffe:	fba2 2303 	umull	r2, r3, r2, r3
 800d002:	091b      	lsrs	r3, r3, #4
 800d004:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681c      	ldr	r4, [r3, #0]
 800d00a:	466a      	mov	r2, sp
 800d00c:	f107 0318 	add.w	r3, r7, #24
 800d010:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d014:	e882 0003 	stmia.w	r2, {r0, r1}
 800d018:	f107 030c 	add.w	r3, r7, #12
 800d01c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d01e:	4620      	mov	r0, r4
 800d020:	f004 fe6c 	bl	8011cfc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4618      	mov	r0, r3
 800d02a:	f004 feaf 	bl	8011d8c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d046:	4a28      	ldr	r2, [pc, #160]	; (800d0e8 <HAL_SD_InitCard+0x130>)
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04e:	3301      	adds	r3, #1
 800d050:	4618      	mov	r0, r3
 800d052:	f7f6 fc81 	bl	8003958 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 ffea 	bl	800e030 <SD_PowerON>
 800d05c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00b      	beq.n	800d07c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	e02e      	b.n	800d0da <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 ff09 	bl	800de94 <SD_InitCard>
 800d082:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00b      	beq.n	800d0a2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	431a      	orrs	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e01b      	b.n	800d0da <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f004 ff04 	bl	8011eb8 <SDMMC_CmdBlockLength>
 800d0b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00f      	beq.n	800d0d8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a0b      	ldr	r2, [pc, #44]	; (800d0ec <HAL_SD_InitCard+0x134>)
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	431a      	orrs	r2, r3
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e000      	b.n	800d0da <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	372c      	adds	r7, #44	; 0x2c
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd90      	pop	{r4, r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	014f8b59 	.word	0x014f8b59
 800d0e8:	00012110 	.word	0x00012110
 800d0ec:	1fe00fff 	.word	0x1fe00fff

0800d0f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08c      	sub	sp, #48	; 0x30
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
 800d0fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d107      	bne.n	800d118 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e08d      	b.n	800d234 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b01      	cmp	r3, #1
 800d122:	f040 8086 	bne.w	800d232 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d12c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	441a      	add	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d136:	429a      	cmp	r2, r3
 800d138:	d907      	bls.n	800d14a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d13e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e074      	b.n	800d234 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2203      	movs	r2, #3
 800d14e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2200      	movs	r2, #0
 800d158:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	025a      	lsls	r2, r3, #9
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d002      	beq.n	800d176 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	025b      	lsls	r3, r3, #9
 800d174:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d176:	f04f 33ff 	mov.w	r3, #4294967295
 800d17a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	025b      	lsls	r3, r3, #9
 800d180:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d182:	2390      	movs	r3, #144	; 0x90
 800d184:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d186:	2302      	movs	r3, #2
 800d188:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d18e:	2300      	movs	r3, #0
 800d190:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f107 0210 	add.w	r2, r7, #16
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f004 fe5f 	bl	8011e60 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d90a      	bls.n	800d1de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2282      	movs	r2, #130	; 0x82
 800d1cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f004 feb5 	bl	8011f44 <SDMMC_CmdReadMultiBlock>
 800d1da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1dc:	e009      	b.n	800d1f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2281      	movs	r2, #129	; 0x81
 800d1e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f004 fe87 	bl	8011efe <SDMMC_CmdReadSingleBlock>
 800d1f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d012      	beq.n	800d21e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a0f      	ldr	r2, [pc, #60]	; (800d23c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d1fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d206:	431a      	orrs	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	e00a      	b.n	800d234 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d22c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	e000      	b.n	800d234 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d232:	2302      	movs	r3, #2
  }
}
 800d234:	4618      	mov	r0, r3
 800d236:	3730      	adds	r7, #48	; 0x30
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	1fe00fff 	.word	0x1fe00fff

0800d240 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08c      	sub	sp, #48	; 0x30
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d107      	bne.n	800d268 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	e08d      	b.n	800d384 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	f040 8086 	bne.w	800d382 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	441a      	add	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d286:	429a      	cmp	r2, r3
 800d288:	d907      	bls.n	800d29a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e074      	b.n	800d384 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2203      	movs	r2, #3
 800d29e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	025a      	lsls	r2, r3, #9
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d002      	beq.n	800d2c6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	025b      	lsls	r3, r3, #9
 800d2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	025b      	lsls	r3, r3, #9
 800d2d0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2d2:	2390      	movs	r3, #144	; 0x90
 800d2d4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f107 0210 	add.w	r2, r7, #16
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f004 fdb7 	bl	8011e60 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68da      	ldr	r2, [r3, #12]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d300:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2201      	movs	r2, #1
 800d310:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d90a      	bls.n	800d32e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	22a0      	movs	r2, #160	; 0xa0
 800d31c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d324:	4618      	mov	r0, r3
 800d326:	f004 fe53 	bl	8011fd0 <SDMMC_CmdWriteMultiBlock>
 800d32a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d32c:	e009      	b.n	800d342 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2290      	movs	r2, #144	; 0x90
 800d332:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d33a:	4618      	mov	r0, r3
 800d33c:	f004 fe25 	bl	8011f8a <SDMMC_CmdWriteSingleBlock>
 800d340:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	2b00      	cmp	r3, #0
 800d346:	d012      	beq.n	800d36e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a0f      	ldr	r2, [pc, #60]	; (800d38c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d34e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	431a      	orrs	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e00a      	b.n	800d384 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d37c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	e000      	b.n	800d384 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d382:	2302      	movs	r3, #2
  }
}
 800d384:	4618      	mov	r0, r3
 800d386:	3730      	adds	r7, #48	; 0x30
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	1fe00fff 	.word	0x1fe00fff

0800d390 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d008      	beq.n	800d3be <HAL_SD_IRQHandler+0x2e>
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f003 0308 	and.w	r3, r3, #8
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f001 f926 	bl	800e608 <SD_Read_IT>
 800d3bc:	e19a      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f000 80ac 	beq.w	800d526 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	4b59      	ldr	r3, [pc, #356]	; (800d548 <HAL_SD_IRQHandler+0x1b8>)
 800d3e4:	400b      	ands	r3, r1
 800d3e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d3f6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68da      	ldr	r2, [r3, #12]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d406:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f003 0308 	and.w	r3, r3, #8
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d038      	beq.n	800d484 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f003 0302 	and.w	r3, r3, #2
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <HAL_SD_IRQHandler+0x96>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f003 0320 	and.w	r3, r3, #32
 800d422:	2b00      	cmp	r3, #0
 800d424:	d011      	beq.n	800d44a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f004 fdf4 	bl	8012018 <SDMMC_CmdStopTransfer>
 800d430:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d008      	beq.n	800d44a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	431a      	orrs	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f95b 	bl	800d700 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a3f      	ldr	r2, [pc, #252]	; (800d54c <HAL_SD_IRQHandler+0x1bc>)
 800d450:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	2b00      	cmp	r3, #0
 800d468:	d104      	bne.n	800d474 <HAL_SD_IRQHandler+0xe4>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f003 0302 	and.w	r3, r3, #2
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f006 fdf5 	bl	8014064 <HAL_SD_RxCpltCallback>
 800d47a:	e13b      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f006 fde7 	bl	8014050 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d482:	e137      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 8132 	beq.w	800d6f4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2200      	movs	r2, #0
 800d496:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2200      	movs	r2, #0
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f003 0302 	and.w	r3, r3, #2
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d104      	bne.n	800d4bc <HAL_SD_IRQHandler+0x12c>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d011      	beq.n	800d4e0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f004 fda9 	bl	8012018 <SDMMC_CmdStopTransfer>
 800d4c6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d008      	beq.n	800d4e0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f910 	bl	800d700 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f003 0310 	and.w	r3, r3, #16
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <HAL_SD_IRQHandler+0x172>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f003 0320 	and.w	r3, r3, #32
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f006 fda4 	bl	8014050 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d105      	bne.n	800d51e <HAL_SD_IRQHandler+0x18e>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f003 0302 	and.w	r3, r3, #2
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 80eb 	beq.w	800d6f4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f006 fda0 	bl	8014064 <HAL_SD_RxCpltCallback>
}
 800d524:	e0e6      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00d      	beq.n	800d550 <HAL_SD_IRQHandler+0x1c0>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f003 0308 	and.w	r3, r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d008      	beq.n	800d550 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 f8a8 	bl	800e694 <SD_Write_IT>
 800d544:	e0d6      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
 800d546:	bf00      	nop
 800d548:	ffff3ec5 	.word	0xffff3ec5
 800d54c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d556:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 809d 	beq.w	800d69a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d005      	beq.n	800d57a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d572:	f043 0202 	orr.w	r2, r3, #2
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58c:	f043 0208 	orr.w	r2, r3, #8
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a6:	f043 0220 	orr.w	r2, r3, #32
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	f003 0310 	and.w	r3, r3, #16
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d005      	beq.n	800d5c8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c0:	f043 0210 	orr.w	r2, r3, #16
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a4b      	ldr	r2, [pc, #300]	; (800d6fc <HAL_SD_IRQHandler+0x36c>)
 800d5ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d5de:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68da      	ldr	r2, [r3, #12]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5ee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d5fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68da      	ldr	r2, [r3, #12]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d60e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4618      	mov	r0, r3
 800d616:	f004 fcff 	bl	8012018 <SDMMC_CmdStopTransfer>
 800d61a:	4602      	mov	r2, r0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d620:	431a      	orrs	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d634:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f003 0308 	and.w	r3, r3, #8
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00a      	beq.n	800d660 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f851 	bl	800d700 <HAL_SD_ErrorCallback>
}
 800d65e:	e049      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d666:	2b00      	cmp	r3, #0
 800d668:	d044      	beq.n	800d6f4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d040      	beq.n	800d6f4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d680:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2200      	movs	r2, #0
 800d688:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f834 	bl	800d700 <HAL_SD_ErrorCallback>
}
 800d698:	e02c      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d025      	beq.n	800d6f4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6b8:	f003 0304 	and.w	r3, r3, #4
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10c      	bne.n	800d6da <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0320 	and.w	r3, r3, #32
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d003      	beq.n	800d6d2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 f84a 	bl	800e764 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d6d0:	e010      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f001 f832 	bl	800e73c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d6d8:	e00c      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f001 f833 	bl	800e750 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d6ea:	e003      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f001 f81b 	bl	800e728 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d6f2:	e7ff      	b.n	800d6f4 <HAL_SD_IRQHandler+0x364>
 800d6f4:	bf00      	nop
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	18000f3a 	.word	0x18000f3a

0800d700 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d722:	0f9b      	lsrs	r3, r3, #30
 800d724:	b2da      	uxtb	r2, r3
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d72e:	0e9b      	lsrs	r3, r3, #26
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 030f 	and.w	r3, r3, #15
 800d736:	b2da      	uxtb	r2, r3
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d740:	0e1b      	lsrs	r3, r3, #24
 800d742:	b2db      	uxtb	r3, r3
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d752:	0c1b      	lsrs	r3, r3, #16
 800d754:	b2da      	uxtb	r2, r3
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d75e:	0a1b      	lsrs	r3, r3, #8
 800d760:	b2da      	uxtb	r2, r3
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d774:	0d1b      	lsrs	r3, r3, #20
 800d776:	b29a      	uxth	r2, r3
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d780:	0c1b      	lsrs	r3, r3, #16
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 030f 	and.w	r3, r3, #15
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d792:	0bdb      	lsrs	r3, r3, #15
 800d794:	b2db      	uxtb	r3, r3
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a4:	0b9b      	lsrs	r3, r3, #14
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7b6:	0b5b      	lsrs	r3, r3, #13
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7c8:	0b1b      	lsrs	r3, r3, #12
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d163      	bne.n	800d8ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7e8:	009a      	lsls	r2, r3, #2
 800d7ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d7f4:	0f92      	lsrs	r2, r2, #30
 800d7f6:	431a      	orrs	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d800:	0edb      	lsrs	r3, r3, #27
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 0307 	and.w	r3, r3, #7
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d812:	0e1b      	lsrs	r3, r3, #24
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 0307 	and.w	r3, r3, #7
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d824:	0d5b      	lsrs	r3, r3, #21
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0307 	and.w	r3, r3, #7
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d836:	0c9b      	lsrs	r3, r3, #18
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d848:	0bdb      	lsrs	r3, r3, #15
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 0307 	and.w	r3, r3, #7
 800d850:	b2da      	uxtb	r2, r3
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	7e1b      	ldrb	r3, [r3, #24]
 800d864:	b2db      	uxtb	r3, r3
 800d866:	f003 0307 	and.w	r3, r3, #7
 800d86a:	3302      	adds	r3, #2
 800d86c:	2201      	movs	r2, #1
 800d86e:	fa02 f303 	lsl.w	r3, r2, r3
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d876:	fb03 f202 	mul.w	r2, r3, r2
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	7a1b      	ldrb	r3, [r3, #8]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 030f 	and.w	r3, r3, #15
 800d888:	2201      	movs	r2, #1
 800d88a:	409a      	lsls	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d898:	0a52      	lsrs	r2, r2, #9
 800d89a:	fb03 f202 	mul.w	r2, r3, r2
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8a8:	655a      	str	r2, [r3, #84]	; 0x54
 800d8aa:	e031      	b.n	800d910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d11d      	bne.n	800d8f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b8:	041b      	lsls	r3, r3, #16
 800d8ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8c2:	0c1b      	lsrs	r3, r3, #16
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	029a      	lsls	r2, r3, #10
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	655a      	str	r2, [r3, #84]	; 0x54
 800d8ee:	e00f      	b.n	800d910 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a58      	ldr	r2, [pc, #352]	; (800da58 <HAL_SD_GetCardCSD+0x344>)
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	e09d      	b.n	800da4c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d914:	0b9b      	lsrs	r3, r3, #14
 800d916:	b2db      	uxtb	r3, r3
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d926:	09db      	lsrs	r3, r3, #7
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d948:	0fdb      	lsrs	r3, r3, #31
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d954:	0f5b      	lsrs	r3, r3, #29
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 0303 	and.w	r3, r3, #3
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d966:	0e9b      	lsrs	r3, r3, #26
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	f003 0307 	and.w	r3, r3, #7
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d978:	0d9b      	lsrs	r3, r3, #22
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 030f 	and.w	r3, r3, #15
 800d980:	b2da      	uxtb	r2, r3
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d98a:	0d5b      	lsrs	r3, r3, #21
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	b2da      	uxtb	r2, r3
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9a6:	0c1b      	lsrs	r3, r3, #16
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ba:	0bdb      	lsrs	r3, r3, #15
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ce:	0b9b      	lsrs	r3, r3, #14
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e2:	0b5b      	lsrs	r3, r3, #13
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f6:	0b1b      	lsrs	r3, r3, #12
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da0a:	0a9b      	lsrs	r3, r3, #10
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 0303 	and.w	r3, r3, #3
 800da12:	b2da      	uxtb	r2, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da1e:	0a1b      	lsrs	r3, r3, #8
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 0303 	and.w	r3, r3, #3
 800da26:	b2da      	uxtb	r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da32:	085b      	lsrs	r3, r3, #1
 800da34:	b2db      	uxtb	r3, r3
 800da36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	1fe00fff 	.word	0x1fe00fff

0800da5c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b094      	sub	sp, #80	; 0x50
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800da66:	2300      	movs	r3, #0
 800da68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b03      	cmp	r3, #3
 800da76:	d101      	bne.n	800da7c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e0a7      	b.n	800dbcc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800da7c:	f107 0308 	add.w	r3, r7, #8
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fb62 	bl	800e14c <SD_SendSDStatus>
 800da88:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800da8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d011      	beq.n	800dab4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a4f      	ldr	r2, [pc, #316]	; (800dbd4 <HAL_SD_GetCardStatus+0x178>)
 800da96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dab2:	e070      	b.n	800db96 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	099b      	lsrs	r3, r3, #6
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 0303 	and.w	r3, r3, #3
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	095b      	lsrs	r3, r3, #5
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	b29b      	uxth	r3, r3
 800dada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dade:	b29a      	uxth	r2, r3
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	0e1b      	lsrs	r3, r3, #24
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4313      	orrs	r3, r2
 800dae8:	b29a      	uxth	r2, r3
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	061a      	lsls	r2, r3, #24
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	021b      	lsls	r3, r3, #8
 800daf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dafa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	0a1b      	lsrs	r3, r3, #8
 800db00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db04:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	0e1b      	lsrs	r3, r3, #24
 800db0a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	0a1b      	lsrs	r3, r3, #8
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	0d1b      	lsrs	r3, r3, #20
 800db26:	b2db      	uxtb	r3, r3
 800db28:	f003 030f 	and.w	r3, r3, #15
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	0c1b      	lsrs	r3, r3, #16
 800db36:	b29b      	uxth	r3, r3
 800db38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	b29b      	uxth	r3, r3
 800db42:	b2db      	uxtb	r3, r3
 800db44:	b29b      	uxth	r3, r3
 800db46:	4313      	orrs	r3, r2
 800db48:	b29a      	uxth	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	0a9b      	lsrs	r3, r3, #10
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	0a1b      	lsrs	r3, r3, #8
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	091b      	lsrs	r3, r3, #4
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f003 030f 	and.w	r3, r3, #15
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 030f 	and.w	r3, r3, #15
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	0e1b      	lsrs	r3, r3, #24
 800db90:	b2da      	uxtb	r2, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db9e:	4618      	mov	r0, r3
 800dba0:	f004 f98a 	bl	8011eb8 <SDMMC_CmdBlockLength>
 800dba4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00d      	beq.n	800dbc8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a08      	ldr	r2, [pc, #32]	; (800dbd4 <HAL_SD_GetCardStatus+0x178>)
 800dbb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbb8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dbc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3750      	adds	r7, #80	; 0x50
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	1fe00fff 	.word	0x1fe00fff

0800dbd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc30:	b590      	push	{r4, r7, lr}
 800dc32:	b08d      	sub	sp, #52	; 0x34
 800dc34:	af02      	add	r7, sp, #8
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2203      	movs	r2, #3
 800dc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4c:	2b03      	cmp	r3, #3
 800dc4e:	d02e      	beq.n	800dcae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc56:	d106      	bne.n	800dc66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	635a      	str	r2, [r3, #52]	; 0x34
 800dc64:	e029      	b.n	800dcba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc6c:	d10a      	bne.n	800dc84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fb64 	bl	800e33c <SD_WideBus_Enable>
 800dc74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc7a:	6a3b      	ldr	r3, [r7, #32]
 800dc7c:	431a      	orrs	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	635a      	str	r2, [r3, #52]	; 0x34
 800dc82:	e01a      	b.n	800dcba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10a      	bne.n	800dca0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fba1 	bl	800e3d2 <SD_WideBus_Disable>
 800dc90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	431a      	orrs	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	635a      	str	r2, [r3, #52]	; 0x34
 800dc9e:	e00c      	b.n	800dcba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	635a      	str	r2, [r3, #52]	; 0x34
 800dcac:	e005      	b.n	800dcba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d007      	beq.n	800dcd2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a5f      	ldr	r2, [pc, #380]	; (800de44 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dcc8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcd0:	e096      	b.n	800de00 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dcd2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dcd6:	f04f 0100 	mov.w	r1, #0
 800dcda:	f7fd fea3 	bl	800ba24 <HAL_RCCEx_GetPeriphCLKFreq>
 800dcde:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f000 8083 	beq.w	800ddee <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	695a      	ldr	r2, [r3, #20]
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	4950      	ldr	r1, [pc, #320]	; (800de48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd06:	fba1 1303 	umull	r1, r3, r1, r3
 800dd0a:	0e1b      	lsrs	r3, r3, #24
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d303      	bcc.n	800dd18 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	695b      	ldr	r3, [r3, #20]
 800dd14:	61bb      	str	r3, [r7, #24]
 800dd16:	e05a      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd20:	d103      	bne.n	800dd2a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	61bb      	str	r3, [r7, #24]
 800dd28:	e051      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd32:	d126      	bne.n	800dd82 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10e      	bne.n	800dd5a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	4a43      	ldr	r2, [pc, #268]	; (800de4c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d906      	bls.n	800dd52 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	4a40      	ldr	r2, [pc, #256]	; (800de48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd48:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4c:	0e5b      	lsrs	r3, r3, #25
 800dd4e:	61bb      	str	r3, [r7, #24]
 800dd50:	e03d      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	61bb      	str	r3, [r7, #24]
 800dd58:	e039      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	695b      	ldr	r3, [r3, #20]
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	69fa      	ldr	r2, [r7, #28]
 800dd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd66:	4a39      	ldr	r2, [pc, #228]	; (800de4c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d906      	bls.n	800dd7a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	4a36      	ldr	r2, [pc, #216]	; (800de48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd70:	fba2 2303 	umull	r2, r3, r2, r3
 800dd74:	0e5b      	lsrs	r3, r3, #25
 800dd76:	61bb      	str	r3, [r7, #24]
 800dd78:	e029      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	61bb      	str	r3, [r7, #24]
 800dd80:	e025      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	695b      	ldr	r3, [r3, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10e      	bne.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	4a30      	ldr	r2, [pc, #192]	; (800de50 <HAL_SD_ConfigWideBusOperation+0x220>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d906      	bls.n	800dda0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	4a2c      	ldr	r2, [pc, #176]	; (800de48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd96:	fba2 2303 	umull	r2, r3, r2, r3
 800dd9a:	0e1b      	lsrs	r3, r3, #24
 800dd9c:	61bb      	str	r3, [r7, #24]
 800dd9e:	e016      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	e012      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	69fa      	ldr	r2, [r7, #28]
 800ddb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb4:	4a26      	ldr	r2, [pc, #152]	; (800de50 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d906      	bls.n	800ddc8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	4a22      	ldr	r2, [pc, #136]	; (800de48 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc2:	0e1b      	lsrs	r3, r3, #24
 800ddc4:	61bb      	str	r3, [r7, #24]
 800ddc6:	e002      	b.n	800ddce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	695b      	ldr	r3, [r3, #20]
 800ddcc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681c      	ldr	r4, [r3, #0]
 800ddd2:	466a      	mov	r2, sp
 800ddd4:	f107 0314 	add.w	r3, r7, #20
 800ddd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dddc:	e882 0003 	stmia.w	r2, {r0, r1}
 800dde0:	f107 0308 	add.w	r3, r7, #8
 800dde4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dde6:	4620      	mov	r0, r4
 800dde8:	f003 ff88 	bl	8011cfc <SDMMC_Init>
 800ddec:	e008      	b.n	800de00 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de08:	4618      	mov	r0, r3
 800de0a:	f004 f855 	bl	8011eb8 <SDMMC_CmdBlockLength>
 800de0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00c      	beq.n	800de30 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a0a      	ldr	r2, [pc, #40]	; (800de44 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	431a      	orrs	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800de38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	372c      	adds	r7, #44	; 0x2c
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}
 800de44:	1fe00fff 	.word	0x1fe00fff
 800de48:	55e63b89 	.word	0x55e63b89
 800de4c:	02faf080 	.word	0x02faf080
 800de50:	017d7840 	.word	0x017d7840

0800de54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800de60:	f107 030c 	add.w	r3, r7, #12
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa40 	bl	800e2ec <SD_SendStatus>
 800de6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d005      	beq.n	800de80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	431a      	orrs	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	0a5b      	lsrs	r3, r3, #9
 800de84:	f003 030f 	and.w	r3, r3, #15
 800de88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800de8a:	693b      	ldr	r3, [r7, #16]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b090      	sub	sp, #64	; 0x40
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dea0:	f7f5 fd4e 	bl	8003940 <HAL_GetTick>
 800dea4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f003 ff7f 	bl	8011dae <SDMMC_GetPowerState>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d102      	bne.n	800debc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800deb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800deba:	e0b5      	b.n	800e028 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d02e      	beq.n	800df22 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f004 f9ca 	bl	8012262 <SDMMC_CmdSendCID>
 800dece:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <SD_InitCard+0x46>
    {
      return errorstate;
 800ded6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded8:	e0a6      	b.n	800e028 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2100      	movs	r1, #0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f003 ffaa 	bl	8011e3a <SDMMC_GetResponse>
 800dee6:	4602      	mov	r2, r0
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2104      	movs	r1, #4
 800def2:	4618      	mov	r0, r3
 800def4:	f003 ffa1 	bl	8011e3a <SDMMC_GetResponse>
 800def8:	4602      	mov	r2, r0
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2108      	movs	r1, #8
 800df04:	4618      	mov	r0, r3
 800df06:	f003 ff98 	bl	8011e3a <SDMMC_GetResponse>
 800df0a:	4602      	mov	r2, r0
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	210c      	movs	r1, #12
 800df16:	4618      	mov	r0, r3
 800df18:	f003 ff8f 	bl	8011e3a <SDMMC_GetResponse>
 800df1c:	4602      	mov	r2, r0
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df26:	2b03      	cmp	r3, #3
 800df28:	d01d      	beq.n	800df66 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800df2a:	e019      	b.n	800df60 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f107 020a 	add.w	r2, r7, #10
 800df34:	4611      	mov	r1, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f004 f9d2 	bl	80122e0 <SDMMC_CmdSetRelAdd>
 800df3c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800df3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <SD_InitCard+0xb4>
      {
        return errorstate;
 800df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df46:	e06f      	b.n	800e028 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800df48:	f7f5 fcfa 	bl	8003940 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	f241 3287 	movw	r2, #4999	; 0x1387
 800df56:	4293      	cmp	r3, r2
 800df58:	d902      	bls.n	800df60 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800df5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df5e:	e063      	b.n	800e028 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800df60:	897b      	ldrh	r3, [r7, #10]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0e2      	beq.n	800df2c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d036      	beq.n	800dfdc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800df6e:	897b      	ldrh	r3, [r7, #10]
 800df70:	461a      	mov	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df7e:	041b      	lsls	r3, r3, #16
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f004 f98c 	bl	80122a0 <SDMMC_CmdSendCSD>
 800df88:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <SD_InitCard+0x100>
    {
      return errorstate;
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	e049      	b.n	800e028 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2100      	movs	r1, #0
 800df9a:	4618      	mov	r0, r3
 800df9c:	f003 ff4d 	bl	8011e3a <SDMMC_GetResponse>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2104      	movs	r1, #4
 800dfac:	4618      	mov	r0, r3
 800dfae:	f003 ff44 	bl	8011e3a <SDMMC_GetResponse>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2108      	movs	r1, #8
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f003 ff3b 	bl	8011e3a <SDMMC_GetResponse>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	210c      	movs	r1, #12
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f003 ff32 	bl	8011e3a <SDMMC_GetResponse>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2104      	movs	r1, #4
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f003 ff29 	bl	8011e3a <SDMMC_GetResponse>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	0d1a      	lsrs	r2, r3, #20
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dff0:	f107 030c 	add.w	r3, r7, #12
 800dff4:	4619      	mov	r1, r3
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff fb8c 	bl	800d714 <HAL_SD_GetCardCSD>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e002:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e006:	e00f      	b.n	800e028 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e010:	041b      	lsls	r3, r3, #16
 800e012:	4619      	mov	r1, r3
 800e014:	4610      	mov	r0, r2
 800e016:	f004 f83b 	bl	8012090 <SDMMC_CmdSelDesel>
 800e01a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <SD_InitCard+0x192>
  {
    return errorstate;
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	e000      	b.n	800e028 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3740      	adds	r7, #64	; 0x40
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e038:	2300      	movs	r3, #0
 800e03a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e03c:	2300      	movs	r3, #0
 800e03e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e040:	2300      	movs	r3, #0
 800e042:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	f004 f844 	bl	80120d6 <SDMMC_CmdGoIdleState>
 800e04e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <SD_PowerON+0x2a>
  {
    return errorstate;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	e072      	b.n	800e140 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4618      	mov	r0, r3
 800e060:	f004 f857 	bl	8012112 <SDMMC_CmdOperCond>
 800e064:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e06c:	d10d      	bne.n	800e08a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4618      	mov	r0, r3
 800e07a:	f004 f82c 	bl	80120d6 <SDMMC_CmdGoIdleState>
 800e07e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d004      	beq.n	800e090 <SD_PowerON+0x60>
    {
      return errorstate;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	e05a      	b.n	800e140 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e094:	2b01      	cmp	r3, #1
 800e096:	d137      	bne.n	800e108 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2100      	movs	r1, #0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f004 f857 	bl	8012152 <SDMMC_CmdAppCommand>
 800e0a4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d02d      	beq.n	800e108 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0b0:	e046      	b.n	800e140 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f004 f84a 	bl	8012152 <SDMMC_CmdAppCommand>
 800e0be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <SD_PowerON+0x9a>
    {
      return errorstate;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	e03a      	b.n	800e140 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	491e      	ldr	r1, [pc, #120]	; (800e148 <SD_PowerON+0x118>)
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f004 f861 	bl	8012198 <SDMMC_CmdAppOperCommand>
 800e0d6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0e2:	e02d      	b.n	800e140 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f003 fea5 	bl	8011e3a <SDMMC_GetResponse>
 800e0f0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	0fdb      	lsrs	r3, r3, #31
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d101      	bne.n	800e0fe <SD_PowerON+0xce>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e000      	b.n	800e100 <SD_PowerON+0xd0>
 800e0fe:	2300      	movs	r3, #0
 800e100:	613b      	str	r3, [r7, #16]

    count++;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	3301      	adds	r3, #1
 800e106:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e10e:	4293      	cmp	r3, r2
 800e110:	d802      	bhi.n	800e118 <SD_PowerON+0xe8>
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d0cc      	beq.n	800e0b2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e11e:	4293      	cmp	r3, r2
 800e120:	d902      	bls.n	800e128 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e126:	e00b      	b.n	800e140 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	c1100000 	.word	0xc1100000

0800e14c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08c      	sub	sp, #48	; 0x30
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e156:	f7f5 fbf3 	bl	8003940 <HAL_GetTick>
 800e15a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2100      	movs	r1, #0
 800e166:	4618      	mov	r0, r3
 800e168:	f003 fe67 	bl	8011e3a <SDMMC_GetResponse>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e176:	d102      	bne.n	800e17e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e17c:	e0b0      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2140      	movs	r1, #64	; 0x40
 800e184:	4618      	mov	r0, r3
 800e186:	f003 fe97 	bl	8011eb8 <SDMMC_CmdBlockLength>
 800e18a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d005      	beq.n	800e19e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e19a:	6a3b      	ldr	r3, [r7, #32]
 800e19c:	e0a0      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1a6:	041b      	lsls	r3, r3, #16
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	f003 ffd1 	bl	8012152 <SDMMC_CmdAppCommand>
 800e1b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d005      	beq.n	800e1c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	e08d      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e1ca:	2340      	movs	r3, #64	; 0x40
 800e1cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e1ce:	2360      	movs	r3, #96	; 0x60
 800e1d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f107 0208 	add.w	r2, r7, #8
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f003 fe39 	bl	8011e60 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f004 f8b9 	bl	801236a <SDMMC_CmdStatusRegister>
 800e1f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d02b      	beq.n	800e258 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e208:	6a3b      	ldr	r3, [r7, #32]
 800e20a:	e069      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e216:	2b00      	cmp	r3, #0
 800e218:	d013      	beq.n	800e242 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e21a:	2300      	movs	r3, #0
 800e21c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e21e:	e00d      	b.n	800e23c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4618      	mov	r0, r3
 800e226:	f003 fd93 	bl	8011d50 <SDMMC_ReadFIFO>
 800e22a:	4602      	mov	r2, r0
 800e22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22e:	601a      	str	r2, [r3, #0]
        pData++;
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	3304      	adds	r3, #4
 800e234:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	3301      	adds	r3, #1
 800e23a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	2b07      	cmp	r3, #7
 800e240:	d9ee      	bls.n	800e220 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e242:	f7f5 fb7d 	bl	8003940 <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e250:	d102      	bne.n	800e258 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e256:	e043      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0d2      	beq.n	800e20c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26c:	f003 0308 	and.w	r3, r3, #8
 800e270:	2b00      	cmp	r3, #0
 800e272:	d001      	beq.n	800e278 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e274:	2308      	movs	r3, #8
 800e276:	e033      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27e:	f003 0302 	and.w	r3, r3, #2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e286:	2302      	movs	r3, #2
 800e288:	e02a      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e290:	f003 0320 	and.w	r3, r3, #32
 800e294:	2b00      	cmp	r3, #0
 800e296:	d017      	beq.n	800e2c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e298:	2320      	movs	r3, #32
 800e29a:	e021      	b.n	800e2e0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f003 fd55 	bl	8011d50 <SDMMC_ReadFIFO>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	601a      	str	r2, [r3, #0]
    pData++;
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2b2:	f7f5 fb45 	bl	8003940 <HAL_GetTick>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d102      	bne.n	800e2c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2c6:	e00b      	b.n	800e2e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1e2      	bne.n	800e29c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a03      	ldr	r2, [pc, #12]	; (800e2e8 <SD_SendSDStatus+0x19c>)
 800e2dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3730      	adds	r7, #48	; 0x30
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	18000f3a 	.word	0x18000f3a

0800e2ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e2fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e300:	e018      	b.n	800e334 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30a:	041b      	lsls	r3, r3, #16
 800e30c:	4619      	mov	r1, r3
 800e30e:	4610      	mov	r0, r2
 800e310:	f004 f808 	bl	8012324 <SDMMC_CmdSendStatus>
 800e314:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	e009      	b.n	800e334 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2100      	movs	r1, #0
 800e326:	4618      	mov	r0, r3
 800e328:	f003 fd87 	bl	8011e3a <SDMMC_GetResponse>
 800e32c:	4602      	mov	r2, r0
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	2300      	movs	r3, #0
 800e34a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2100      	movs	r1, #0
 800e352:	4618      	mov	r0, r3
 800e354:	f003 fd71 	bl	8011e3a <SDMMC_GetResponse>
 800e358:	4603      	mov	r3, r0
 800e35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e362:	d102      	bne.n	800e36a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e368:	e02f      	b.n	800e3ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e36a:	f107 030c 	add.w	r3, r7, #12
 800e36e:	4619      	mov	r1, r3
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f879 	bl	800e468 <SD_FindSCR>
 800e376:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	e023      	b.n	800e3ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d01c      	beq.n	800e3c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e394:	041b      	lsls	r3, r3, #16
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f003 feda 	bl	8012152 <SDMMC_CmdAppCommand>
 800e39e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	e00f      	b.n	800e3ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2102      	movs	r1, #2
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f003 ff11 	bl	80121d8 <SDMMC_CmdBusWidth>
 800e3b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	e003      	b.n	800e3ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e001      	b.n	800e3ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3718      	adds	r7, #24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b086      	sub	sp, #24
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60fb      	str	r3, [r7, #12]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f003 fd26 	bl	8011e3a <SDMMC_GetResponse>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3f8:	d102      	bne.n	800e400 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3fe:	e02f      	b.n	800e460 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e400:	f107 030c 	add.w	r3, r7, #12
 800e404:	4619      	mov	r1, r3
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f82e 	bl	800e468 <SD_FindSCR>
 800e40c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d001      	beq.n	800e418 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	e023      	b.n	800e460 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d01c      	beq.n	800e45c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42a:	041b      	lsls	r3, r3, #16
 800e42c:	4619      	mov	r1, r3
 800e42e:	4610      	mov	r0, r2
 800e430:	f003 fe8f 	bl	8012152 <SDMMC_CmdAppCommand>
 800e434:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	e00f      	b.n	800e460 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2100      	movs	r1, #0
 800e446:	4618      	mov	r0, r3
 800e448:	f003 fec6 	bl	80121d8 <SDMMC_CmdBusWidth>
 800e44c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	e003      	b.n	800e460 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e458:	2300      	movs	r3, #0
 800e45a:	e001      	b.n	800e460 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e45c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e460:	4618      	mov	r0, r3
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b08e      	sub	sp, #56	; 0x38
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e472:	f7f5 fa65 	bl	8003940 <HAL_GetTick>
 800e476:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e478:	2300      	movs	r3, #0
 800e47a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e47c:	2300      	movs	r3, #0
 800e47e:	60bb      	str	r3, [r7, #8]
 800e480:	2300      	movs	r3, #0
 800e482:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2108      	movs	r1, #8
 800e48e:	4618      	mov	r0, r3
 800e490:	f003 fd12 	bl	8011eb8 <SDMMC_CmdBlockLength>
 800e494:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	e0ad      	b.n	800e5fc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4a8:	041b      	lsls	r3, r3, #16
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f003 fe50 	bl	8012152 <SDMMC_CmdAppCommand>
 800e4b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <SD_FindSCR+0x56>
  {
    return errorstate;
 800e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4bc:	e09e      	b.n	800e5fc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4be:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e4c4:	2308      	movs	r3, #8
 800e4c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e4c8:	2330      	movs	r3, #48	; 0x30
 800e4ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f107 0210 	add.w	r2, r7, #16
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f003 fcbc 	bl	8011e60 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f003 fe96 	bl	801221e <SDMMC_CmdSendSCR>
 800e4f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d027      	beq.n	800e54a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fc:	e07e      	b.n	800e5fc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d113      	bne.n	800e534 <SD_FindSCR+0xcc>
 800e50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d110      	bne.n	800e534 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4618      	mov	r0, r3
 800e518:	f003 fc1a 	bl	8011d50 <SDMMC_ReadFIFO>
 800e51c:	4603      	mov	r3, r0
 800e51e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4618      	mov	r0, r3
 800e526:	f003 fc13 	bl	8011d50 <SDMMC_ReadFIFO>
 800e52a:	4603      	mov	r3, r0
 800e52c:	60fb      	str	r3, [r7, #12]
      index++;
 800e52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e530:	3301      	adds	r3, #1
 800e532:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e534:	f7f5 fa04 	bl	8003940 <HAL_GetTick>
 800e538:	4602      	mov	r2, r0
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	1ad3      	subs	r3, r2, r3
 800e53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e542:	d102      	bne.n	800e54a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e548:	e058      	b.n	800e5fc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e550:	f240 532a 	movw	r3, #1322	; 0x52a
 800e554:	4013      	ands	r3, r2
 800e556:	2b00      	cmp	r3, #0
 800e558:	d0d1      	beq.n	800e4fe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e560:	f003 0308 	and.w	r3, r3, #8
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2208      	movs	r2, #8
 800e56e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e570:	2308      	movs	r3, #8
 800e572:	e043      	b.n	800e5fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e57a:	f003 0302 	and.w	r3, r3, #2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d005      	beq.n	800e58e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2202      	movs	r2, #2
 800e588:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e58a:	2302      	movs	r3, #2
 800e58c:	e036      	b.n	800e5fc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e594:	f003 0320 	and.w	r3, r3, #32
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d005      	beq.n	800e5a8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2220      	movs	r2, #32
 800e5a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e5a4:	2320      	movs	r3, #32
 800e5a6:	e029      	b.n	800e5fc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a15      	ldr	r2, [pc, #84]	; (800e604 <SD_FindSCR+0x19c>)
 800e5ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	061a      	lsls	r2, r3, #24
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	021b      	lsls	r3, r3, #8
 800e5b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	0a1b      	lsrs	r3, r3, #8
 800e5c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e5c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	0e1b      	lsrs	r3, r3, #24
 800e5cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d0:	601a      	str	r2, [r3, #0]
    scr++;
 800e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	061a      	lsls	r2, r3, #24
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	021b      	lsls	r3, r3, #8
 800e5e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	0a1b      	lsrs	r3, r3, #8
 800e5ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e5ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	0e1b      	lsrs	r3, r3, #24
 800e5f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3738      	adds	r7, #56	; 0x38
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	18000f3a 	.word	0x18000f3a

0800e608 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61a:	2b1f      	cmp	r3, #31
 800e61c:	d936      	bls.n	800e68c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
 800e622:	e027      	b.n	800e674 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4618      	mov	r0, r3
 800e62a:	f003 fb91 	bl	8011d50 <SDMMC_ReadFIFO>
 800e62e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	b2da      	uxtb	r2, r3
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	3301      	adds	r3, #1
 800e63c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	0a1b      	lsrs	r3, r3, #8
 800e642:	b2da      	uxtb	r2, r3
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	3301      	adds	r3, #1
 800e64c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	0c1b      	lsrs	r3, r3, #16
 800e652:	b2da      	uxtb	r2, r3
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	3301      	adds	r3, #1
 800e65c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	0e1b      	lsrs	r3, r3, #24
 800e662:	b2da      	uxtb	r2, r3
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	3301      	adds	r3, #1
 800e66c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	3301      	adds	r3, #1
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b07      	cmp	r3, #7
 800e678:	d9d4      	bls.n	800e624 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e684:	f1a3 0220 	sub.w	r2, r3, #32
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e68c:	bf00      	nop
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	69db      	ldr	r3, [r3, #28]
 800e6a0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	2b1f      	cmp	r3, #31
 800e6a8:	d93a      	bls.n	800e720 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
 800e6ae:	e02b      	b.n	800e708 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	021a      	lsls	r2, r3, #8
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	041a      	lsls	r2, r3, #16
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	061a      	lsls	r2, r3, #24
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f107 020c 	add.w	r2, r7, #12
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f003 fb34 	bl	8011d6a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	3301      	adds	r3, #1
 800e706:	617b      	str	r3, [r7, #20]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	2b07      	cmp	r3, #7
 800e70c:	d9d0      	bls.n	800e6b0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	f1a3 0220 	sub.w	r2, r3, #32
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	621a      	str	r2, [r3, #32]
  }
}
 800e720:	bf00      	nop
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e730:	bf00      	nop
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e758:	bf00      	nop
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d101      	bne.n	800e78a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e10f      	b.n	800e9aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a87      	ldr	r2, [pc, #540]	; (800e9b4 <HAL_SPI_Init+0x23c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00f      	beq.n	800e7ba <HAL_SPI_Init+0x42>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a86      	ldr	r2, [pc, #536]	; (800e9b8 <HAL_SPI_Init+0x240>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d00a      	beq.n	800e7ba <HAL_SPI_Init+0x42>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a84      	ldr	r2, [pc, #528]	; (800e9bc <HAL_SPI_Init+0x244>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d005      	beq.n	800e7ba <HAL_SPI_Init+0x42>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	2b0f      	cmp	r3, #15
 800e7b4:	d901      	bls.n	800e7ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e0f7      	b.n	800e9aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fd5a 	bl	800f274 <SPI_GetPacketSize>
 800e7c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a7b      	ldr	r2, [pc, #492]	; (800e9b4 <HAL_SPI_Init+0x23c>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d00c      	beq.n	800e7e6 <HAL_SPI_Init+0x6e>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a79      	ldr	r2, [pc, #484]	; (800e9b8 <HAL_SPI_Init+0x240>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d007      	beq.n	800e7e6 <HAL_SPI_Init+0x6e>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a78      	ldr	r2, [pc, #480]	; (800e9bc <HAL_SPI_Init+0x244>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d002      	beq.n	800e7e6 <HAL_SPI_Init+0x6e>
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b08      	cmp	r3, #8
 800e7e4:	d811      	bhi.n	800e80a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e7ea:	4a72      	ldr	r2, [pc, #456]	; (800e9b4 <HAL_SPI_Init+0x23c>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d009      	beq.n	800e804 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a70      	ldr	r2, [pc, #448]	; (800e9b8 <HAL_SPI_Init+0x240>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d004      	beq.n	800e804 <HAL_SPI_Init+0x8c>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4a6f      	ldr	r2, [pc, #444]	; (800e9bc <HAL_SPI_Init+0x244>)
 800e800:	4293      	cmp	r3, r2
 800e802:	d104      	bne.n	800e80e <HAL_SPI_Init+0x96>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b10      	cmp	r3, #16
 800e808:	d901      	bls.n	800e80e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e0cd      	b.n	800e9aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7f4 fa40 	bl	8002ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2202      	movs	r2, #2
 800e82c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f022 0201 	bic.w	r2, r2, #1
 800e83e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e84a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e854:	d119      	bne.n	800e88a <HAL_SPI_Init+0x112>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e85e:	d103      	bne.n	800e868 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e864:	2b00      	cmp	r3, #0
 800e866:	d008      	beq.n	800e87a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d10c      	bne.n	800e88a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e878:	d107      	bne.n	800e88a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e888:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00f      	beq.n	800e8b6 <HAL_SPI_Init+0x13e>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	2b06      	cmp	r3, #6
 800e89c:	d90b      	bls.n	800e8b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	e007      	b.n	800e8c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e8c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	69da      	ldr	r2, [r3, #28]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	431a      	orrs	r2, r3
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d8:	ea42 0103 	orr.w	r1, r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68da      	ldr	r2, [r3, #12]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	430a      	orrs	r2, r1
 800e8e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f0:	431a      	orrs	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f6:	431a      	orrs	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	431a      	orrs	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	695b      	ldr	r3, [r3, #20]
 800e908:	431a      	orrs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	431a      	orrs	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	431a      	orrs	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e91a:	431a      	orrs	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	431a      	orrs	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e926:	ea42 0103 	orr.w	r1, r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	430a      	orrs	r2, r1
 800e934:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d113      	bne.n	800e966 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e950:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e964:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f022 0201 	bic.w	r2, r2, #1
 800e974:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00a      	beq.n	800e998 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	430a      	orrs	r2, r1
 800e996:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	40013000 	.word	0x40013000
 800e9b8:	40003800 	.word	0x40003800
 800e9bc:	40003c00 	.word	0x40003c00

0800e9c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b08a      	sub	sp, #40	; 0x28
 800e9c4:	af02      	add	r7, sp, #8
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3320      	adds	r3, #32
 800e9d6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d101      	bne.n	800e9ea <HAL_SPI_Transmit+0x2a>
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	e1e1      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e9f2:	f7f4 ffa5 	bl	8003940 <HAL_GetTick>
 800e9f6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d007      	beq.n	800ea14 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ea04:	2302      	movs	r3, #2
 800ea06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea10:	7efb      	ldrb	r3, [r7, #27]
 800ea12:	e1cc      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <HAL_SPI_Transmit+0x60>
 800ea1a:	88fb      	ldrh	r3, [r7, #6]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d107      	bne.n	800ea30 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea2c:	7efb      	ldrb	r3, [r7, #27]
 800ea2e:	e1be      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2203      	movs	r2, #3
 800ea34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	88fa      	ldrh	r2, [r7, #6]
 800ea4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ea80:	d108      	bne.n	800ea94 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	e009      	b.n	800eaa8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eaa6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	4b96      	ldr	r3, [pc, #600]	; (800ed08 <HAL_SPI_Transmit+0x348>)
 800eab0:	4013      	ands	r3, r2
 800eab2:	88f9      	ldrh	r1, [r7, #6]
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	6812      	ldr	r2, [r2, #0]
 800eab8:	430b      	orrs	r3, r1
 800eaba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f042 0201 	orr.w	r2, r2, #1
 800eaca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ead4:	d107      	bne.n	800eae6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eae4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	2b0f      	cmp	r3, #15
 800eaec:	d947      	bls.n	800eb7e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eaee:	e03f      	b.n	800eb70 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	f003 0302 	and.w	r3, r3, #2
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d114      	bne.n	800eb28 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6812      	ldr	r2, [r2, #0]
 800eb08:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb0e:	1d1a      	adds	r2, r3, #4
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eb26:	e023      	b.n	800eb70 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb28:	f7f4 ff0a 	bl	8003940 <HAL_GetTick>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d803      	bhi.n	800eb40 <HAL_SPI_Transmit+0x180>
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb3e:	d102      	bne.n	800eb46 <HAL_SPI_Transmit+0x186>
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d114      	bne.n	800eb70 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f000 fac6 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e11e      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1b9      	bne.n	800eaf0 <HAL_SPI_Transmit+0x130>
 800eb7c:	e0f1      	b.n	800ed62 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	2b07      	cmp	r3, #7
 800eb84:	f240 80e6 	bls.w	800ed54 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb88:	e05d      	b.n	800ec46 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	f003 0302 	and.w	r3, r3, #2
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d132      	bne.n	800ebfe <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d918      	bls.n	800ebd6 <HAL_SPI_Transmit+0x216>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d014      	beq.n	800ebd6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	6812      	ldr	r2, [r2, #0]
 800ebb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebbc:	1d1a      	adds	r2, r3, #4
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	3b02      	subs	r3, #2
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ebd4:	e037      	b.n	800ec46 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebda:	881a      	ldrh	r2, [r3, #0]
 800ebdc:	69fb      	ldr	r3, [r7, #28]
 800ebde:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebe4:	1c9a      	adds	r2, r3, #2
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ebfc:	e023      	b.n	800ec46 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebfe:	f7f4 fe9f 	bl	8003940 <HAL_GetTick>
 800ec02:	4602      	mov	r2, r0
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d803      	bhi.n	800ec16 <HAL_SPI_Transmit+0x256>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d102      	bne.n	800ec1c <HAL_SPI_Transmit+0x25c>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d114      	bne.n	800ec46 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f000 fa5b 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec42:	2303      	movs	r3, #3
 800ec44:	e0b3      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d19b      	bne.n	800eb8a <HAL_SPI_Transmit+0x1ca>
 800ec52:	e086      	b.n	800ed62 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	f003 0302 	and.w	r3, r3, #2
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d154      	bne.n	800ed0c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d918      	bls.n	800eca0 <HAL_SPI_Transmit+0x2e0>
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec72:	2b40      	cmp	r3, #64	; 0x40
 800ec74:	d914      	bls.n	800eca0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	6812      	ldr	r2, [r2, #0]
 800ec80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec86:	1d1a      	adds	r2, r3, #4
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	3b04      	subs	r3, #4
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec9e:	e059      	b.n	800ed54 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d917      	bls.n	800ecdc <HAL_SPI_Transmit+0x31c>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d013      	beq.n	800ecdc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecb8:	881a      	ldrh	r2, [r3, #0]
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecc2:	1c9a      	adds	r2, r3, #2
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3b02      	subs	r3, #2
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecda:	e03b      	b.n	800ed54 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	3320      	adds	r3, #32
 800ece6:	7812      	ldrb	r2, [r2, #0]
 800ece8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b01      	subs	r3, #1
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed06:	e025      	b.n	800ed54 <HAL_SPI_Transmit+0x394>
 800ed08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed0c:	f7f4 fe18 	bl	8003940 <HAL_GetTick>
 800ed10:	4602      	mov	r2, r0
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d803      	bhi.n	800ed24 <HAL_SPI_Transmit+0x364>
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d102      	bne.n	800ed2a <HAL_SPI_Transmit+0x36a>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d114      	bne.n	800ed54 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f000 f9d4 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed50:	2303      	movs	r3, #3
 800ed52:	e02c      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f47f af79 	bne.w	800ec54 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	2108      	movs	r1, #8
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 fa53 	bl	800f218 <SPI_WaitOnFlagUntilTimeout>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d007      	beq.n	800ed88 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed7e:	f043 0220 	orr.w	r2, r3, #32
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f000 f9a5 	bl	800f0d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	e000      	b.n	800edae <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800edac:	7efb      	ldrb	r3, [r7, #27]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop

0800edb8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b088      	sub	sp, #32
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	603b      	str	r3, [r7, #0]
 800edc4:	4613      	mov	r3, r2
 800edc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3330      	adds	r3, #48	; 0x30
 800edd2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d101      	bne.n	800ede2 <HAL_SPI_Receive+0x2a>
 800edde:	2302      	movs	r3, #2
 800ede0:	e173      	b.n	800f0ca <HAL_SPI_Receive+0x312>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800edea:	f7f4 fda9 	bl	8003940 <HAL_GetTick>
 800edee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d007      	beq.n	800ee0c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800edfc:	2302      	movs	r3, #2
 800edfe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee08:	7ffb      	ldrb	r3, [r7, #31]
 800ee0a:	e15e      	b.n	800f0ca <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d002      	beq.n	800ee18 <HAL_SPI_Receive+0x60>
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d107      	bne.n	800ee28 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee24:	7ffb      	ldrb	r3, [r7, #31]
 800ee26:	e150      	b.n	800f0ca <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	88fa      	ldrh	r2, [r7, #6]
 800ee42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	88fa      	ldrh	r2, [r7, #6]
 800ee4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ee78:	d108      	bne.n	800ee8c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	e009      	b.n	800eea0 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	685a      	ldr	r2, [r3, #4]
 800eea6:	4b8b      	ldr	r3, [pc, #556]	; (800f0d4 <HAL_SPI_Receive+0x31c>)
 800eea8:	4013      	ands	r3, r2
 800eeaa:	88f9      	ldrh	r1, [r7, #6]
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	6812      	ldr	r2, [r2, #0]
 800eeb0:	430b      	orrs	r3, r1
 800eeb2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f042 0201 	orr.w	r2, r2, #1
 800eec2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eecc:	d107      	bne.n	800eede <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eedc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	2b0f      	cmp	r3, #15
 800eee4:	d948      	bls.n	800ef78 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eee6:	e040      	b.n	800ef6a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	695a      	ldr	r2, [r3, #20]
 800eeee:	f248 0308 	movw	r3, #32776	; 0x8008
 800eef2:	4013      	ands	r3, r2
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d014      	beq.n	800ef22 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef08:	1d1a      	adds	r2, r3, #4
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	3b01      	subs	r3, #1
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ef20:	e023      	b.n	800ef6a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef22:	f7f4 fd0d 	bl	8003940 <HAL_GetTick>
 800ef26:	4602      	mov	r2, r0
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d803      	bhi.n	800ef3a <HAL_SPI_Receive+0x182>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef38:	d102      	bne.n	800ef40 <HAL_SPI_Receive+0x188>
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d114      	bne.n	800ef6a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f000 f8c9 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e0af      	b.n	800f0ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1b8      	bne.n	800eee8 <HAL_SPI_Receive+0x130>
 800ef76:	e095      	b.n	800f0a4 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	2b07      	cmp	r3, #7
 800ef7e:	f240 808b 	bls.w	800f098 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef82:	e03f      	b.n	800f004 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	f003 0301 	and.w	r3, r3, #1
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d114      	bne.n	800efbc <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef96:	69ba      	ldr	r2, [r7, #24]
 800ef98:	8812      	ldrh	r2, [r2, #0]
 800ef9a:	b292      	uxth	r2, r2
 800ef9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efa2:	1c9a      	adds	r2, r3, #2
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efae:	b29b      	uxth	r3, r3
 800efb0:	3b01      	subs	r3, #1
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efba:	e023      	b.n	800f004 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efbc:	f7f4 fcc0 	bl	8003940 <HAL_GetTick>
 800efc0:	4602      	mov	r2, r0
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d803      	bhi.n	800efd4 <HAL_SPI_Receive+0x21c>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd2:	d102      	bne.n	800efda <HAL_SPI_Receive+0x222>
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d114      	bne.n	800f004 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 f87c 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f000:	2303      	movs	r3, #3
 800f002:	e062      	b.n	800f0ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d1b9      	bne.n	800ef84 <HAL_SPI_Receive+0x1cc>
 800f010:	e048      	b.n	800f0a4 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d117      	bne.n	800f050 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f02c:	7812      	ldrb	r2, [r2, #0]
 800f02e:	b2d2      	uxtb	r2, r2
 800f030:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f042:	b29b      	uxth	r3, r3
 800f044:	3b01      	subs	r3, #1
 800f046:	b29a      	uxth	r2, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f04e:	e023      	b.n	800f098 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f050:	f7f4 fc76 	bl	8003940 <HAL_GetTick>
 800f054:	4602      	mov	r2, r0
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	1ad3      	subs	r3, r2, r3
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d803      	bhi.n	800f068 <HAL_SPI_Receive+0x2b0>
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d102      	bne.n	800f06e <HAL_SPI_Receive+0x2b6>
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d114      	bne.n	800f098 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f000 f832 	bl	800f0d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f082:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f094:	2303      	movs	r3, #3
 800f096:	e018      	b.n	800f0ca <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1b6      	bne.n	800f012 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 f817 	bl	800f0d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e000      	b.n	800f0ca <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f0c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3720      	adds	r7, #32
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	ffff0000 	.word	0xffff0000

0800f0d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	695b      	ldr	r3, [r3, #20]
 800f0e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	699a      	ldr	r2, [r3, #24]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f042 0208 	orr.w	r2, r2, #8
 800f0f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	699a      	ldr	r2, [r3, #24]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f042 0210 	orr.w	r2, r2, #16
 800f106:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f022 0201 	bic.w	r2, r2, #1
 800f116:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6919      	ldr	r1, [r3, #16]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	4b3c      	ldr	r3, [pc, #240]	; (800f214 <SPI_CloseTransfer+0x13c>)
 800f124:	400b      	ands	r3, r1
 800f126:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	689a      	ldr	r2, [r3, #8]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f136:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b04      	cmp	r3, #4
 800f142:	d014      	beq.n	800f16e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00f      	beq.n	800f16e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f154:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	699a      	ldr	r2, [r3, #24]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f042 0220 	orr.w	r2, r2, #32
 800f16c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b03      	cmp	r3, #3
 800f178:	d014      	beq.n	800f1a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00f      	beq.n	800f1a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f18a:	f043 0204 	orr.w	r2, r3, #4
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	699a      	ldr	r2, [r3, #24]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f1a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00f      	beq.n	800f1ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1b4:	f043 0201 	orr.w	r2, r3, #1
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	699a      	ldr	r2, [r3, #24]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f1cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00f      	beq.n	800f1f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1de:	f043 0208 	orr.w	r2, r3, #8
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f208:	bf00      	nop
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	fffffc90 	.word	0xfffffc90

0800f218 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	603b      	str	r3, [r7, #0]
 800f224:	4613      	mov	r3, r2
 800f226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f228:	e010      	b.n	800f24c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f22a:	f7f4 fb89 	bl	8003940 <HAL_GetTick>
 800f22e:	4602      	mov	r2, r0
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	1ad3      	subs	r3, r2, r3
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	429a      	cmp	r2, r3
 800f238:	d803      	bhi.n	800f242 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f240:	d102      	bne.n	800f248 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d101      	bne.n	800f24c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f248:	2303      	movs	r3, #3
 800f24a:	e00f      	b.n	800f26c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	695a      	ldr	r2, [r3, #20]
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	4013      	ands	r3, r2
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	429a      	cmp	r2, r3
 800f25a:	bf0c      	ite	eq
 800f25c:	2301      	moveq	r3, #1
 800f25e:	2300      	movne	r3, #0
 800f260:	b2db      	uxtb	r3, r3
 800f262:	461a      	mov	r2, r3
 800f264:	79fb      	ldrb	r3, [r7, #7]
 800f266:	429a      	cmp	r2, r3
 800f268:	d0df      	beq.n	800f22a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f280:	095b      	lsrs	r3, r3, #5
 800f282:	3301      	adds	r3, #1
 800f284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	3307      	adds	r3, #7
 800f292:	08db      	lsrs	r3, r3, #3
 800f294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d101      	bne.n	800f2bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e049      	b.n	800f350 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d106      	bne.n	800f2d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7f3 fda5 	bl	8002e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2202      	movs	r2, #2
 800f2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4610      	mov	r0, r2
 800f2ea:	f000 fed1 	bl	8010090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2201      	movs	r2, #1
 800f302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2201      	movs	r2, #1
 800f322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2201      	movs	r2, #1
 800f34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d109      	bne.n	800f37c <HAL_TIM_PWM_Start+0x24>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	2b01      	cmp	r3, #1
 800f372:	bf14      	ite	ne
 800f374:	2301      	movne	r3, #1
 800f376:	2300      	moveq	r3, #0
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	e03c      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x9e>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d109      	bne.n	800f396 <HAL_TIM_PWM_Start+0x3e>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	bf14      	ite	ne
 800f38e:	2301      	movne	r3, #1
 800f390:	2300      	moveq	r3, #0
 800f392:	b2db      	uxtb	r3, r3
 800f394:	e02f      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x9e>
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d109      	bne.n	800f3b0 <HAL_TIM_PWM_Start+0x58>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	bf14      	ite	ne
 800f3a8:	2301      	movne	r3, #1
 800f3aa:	2300      	moveq	r3, #0
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	e022      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x9e>
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	2b0c      	cmp	r3, #12
 800f3b4:	d109      	bne.n	800f3ca <HAL_TIM_PWM_Start+0x72>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	bf14      	ite	ne
 800f3c2:	2301      	movne	r3, #1
 800f3c4:	2300      	moveq	r3, #0
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	e015      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x9e>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b10      	cmp	r3, #16
 800f3ce:	d109      	bne.n	800f3e4 <HAL_TIM_PWM_Start+0x8c>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	bf14      	ite	ne
 800f3dc:	2301      	movne	r3, #1
 800f3de:	2300      	moveq	r3, #0
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	e008      	b.n	800f3f6 <HAL_TIM_PWM_Start+0x9e>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	bf14      	ite	ne
 800f3f0:	2301      	movne	r3, #1
 800f3f2:	2300      	moveq	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d001      	beq.n	800f3fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e0ab      	b.n	800f556 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <HAL_TIM_PWM_Start+0xb6>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2202      	movs	r2, #2
 800f408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f40c:	e023      	b.n	800f456 <HAL_TIM_PWM_Start+0xfe>
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b04      	cmp	r3, #4
 800f412:	d104      	bne.n	800f41e <HAL_TIM_PWM_Start+0xc6>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2202      	movs	r2, #2
 800f418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f41c:	e01b      	b.n	800f456 <HAL_TIM_PWM_Start+0xfe>
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	2b08      	cmp	r3, #8
 800f422:	d104      	bne.n	800f42e <HAL_TIM_PWM_Start+0xd6>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2202      	movs	r2, #2
 800f428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f42c:	e013      	b.n	800f456 <HAL_TIM_PWM_Start+0xfe>
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2b0c      	cmp	r3, #12
 800f432:	d104      	bne.n	800f43e <HAL_TIM_PWM_Start+0xe6>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2202      	movs	r2, #2
 800f438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f43c:	e00b      	b.n	800f456 <HAL_TIM_PWM_Start+0xfe>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b10      	cmp	r3, #16
 800f442:	d104      	bne.n	800f44e <HAL_TIM_PWM_Start+0xf6>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2202      	movs	r2, #2
 800f448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f44c:	e003      	b.n	800f456 <HAL_TIM_PWM_Start+0xfe>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2202      	movs	r2, #2
 800f452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2201      	movs	r2, #1
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	4618      	mov	r0, r3
 800f460:	f001 f992 	bl	8010788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a3d      	ldr	r2, [pc, #244]	; (800f560 <HAL_TIM_PWM_Start+0x208>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d013      	beq.n	800f496 <HAL_TIM_PWM_Start+0x13e>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a3c      	ldr	r2, [pc, #240]	; (800f564 <HAL_TIM_PWM_Start+0x20c>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d00e      	beq.n	800f496 <HAL_TIM_PWM_Start+0x13e>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a3a      	ldr	r2, [pc, #232]	; (800f568 <HAL_TIM_PWM_Start+0x210>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d009      	beq.n	800f496 <HAL_TIM_PWM_Start+0x13e>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a39      	ldr	r2, [pc, #228]	; (800f56c <HAL_TIM_PWM_Start+0x214>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d004      	beq.n	800f496 <HAL_TIM_PWM_Start+0x13e>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4a37      	ldr	r2, [pc, #220]	; (800f570 <HAL_TIM_PWM_Start+0x218>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d101      	bne.n	800f49a <HAL_TIM_PWM_Start+0x142>
 800f496:	2301      	movs	r3, #1
 800f498:	e000      	b.n	800f49c <HAL_TIM_PWM_Start+0x144>
 800f49a:	2300      	movs	r3, #0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d007      	beq.n	800f4b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a2a      	ldr	r2, [pc, #168]	; (800f560 <HAL_TIM_PWM_Start+0x208>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d02c      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4c2:	d027      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a2a      	ldr	r2, [pc, #168]	; (800f574 <HAL_TIM_PWM_Start+0x21c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d022      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a29      	ldr	r2, [pc, #164]	; (800f578 <HAL_TIM_PWM_Start+0x220>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d01d      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a27      	ldr	r2, [pc, #156]	; (800f57c <HAL_TIM_PWM_Start+0x224>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d018      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a1f      	ldr	r2, [pc, #124]	; (800f564 <HAL_TIM_PWM_Start+0x20c>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d013      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a23      	ldr	r2, [pc, #140]	; (800f580 <HAL_TIM_PWM_Start+0x228>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d00e      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a1b      	ldr	r2, [pc, #108]	; (800f568 <HAL_TIM_PWM_Start+0x210>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d009      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a1f      	ldr	r2, [pc, #124]	; (800f584 <HAL_TIM_PWM_Start+0x22c>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d004      	beq.n	800f514 <HAL_TIM_PWM_Start+0x1bc>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a1e      	ldr	r2, [pc, #120]	; (800f588 <HAL_TIM_PWM_Start+0x230>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d115      	bne.n	800f540 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	689a      	ldr	r2, [r3, #8]
 800f51a:	4b1c      	ldr	r3, [pc, #112]	; (800f58c <HAL_TIM_PWM_Start+0x234>)
 800f51c:	4013      	ands	r3, r2
 800f51e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2b06      	cmp	r3, #6
 800f524:	d015      	beq.n	800f552 <HAL_TIM_PWM_Start+0x1fa>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f52c:	d011      	beq.n	800f552 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f042 0201 	orr.w	r2, r2, #1
 800f53c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f53e:	e008      	b.n	800f552 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f042 0201 	orr.w	r2, r2, #1
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	e000      	b.n	800f554 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	40010000 	.word	0x40010000
 800f564:	40010400 	.word	0x40010400
 800f568:	40014000 	.word	0x40014000
 800f56c:	40014400 	.word	0x40014400
 800f570:	40014800 	.word	0x40014800
 800f574:	40000400 	.word	0x40000400
 800f578:	40000800 	.word	0x40000800
 800f57c:	40000c00 	.word	0x40000c00
 800f580:	40001800 	.word	0x40001800
 800f584:	4000e000 	.word	0x4000e000
 800f588:	4000e400 	.word	0x4000e400
 800f58c:	00010007 	.word	0x00010007

0800f590 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d109      	bne.n	800f5bc <HAL_TIM_PWM_Start_DMA+0x2c>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b02      	cmp	r3, #2
 800f5b2:	bf0c      	ite	eq
 800f5b4:	2301      	moveq	r3, #1
 800f5b6:	2300      	movne	r3, #0
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	e03c      	b.n	800f636 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2b04      	cmp	r3, #4
 800f5c0:	d109      	bne.n	800f5d6 <HAL_TIM_PWM_Start_DMA+0x46>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	bf0c      	ite	eq
 800f5ce:	2301      	moveq	r3, #1
 800f5d0:	2300      	movne	r3, #0
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	e02f      	b.n	800f636 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b08      	cmp	r3, #8
 800f5da:	d109      	bne.n	800f5f0 <HAL_TIM_PWM_Start_DMA+0x60>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	2300      	movne	r3, #0
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	e022      	b.n	800f636 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b0c      	cmp	r3, #12
 800f5f4:	d109      	bne.n	800f60a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	bf0c      	ite	eq
 800f602:	2301      	moveq	r3, #1
 800f604:	2300      	movne	r3, #0
 800f606:	b2db      	uxtb	r3, r3
 800f608:	e015      	b.n	800f636 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2b10      	cmp	r3, #16
 800f60e:	d109      	bne.n	800f624 <HAL_TIM_PWM_Start_DMA+0x94>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b02      	cmp	r3, #2
 800f61a:	bf0c      	ite	eq
 800f61c:	2301      	moveq	r3, #1
 800f61e:	2300      	movne	r3, #0
 800f620:	b2db      	uxtb	r3, r3
 800f622:	e008      	b.n	800f636 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	bf0c      	ite	eq
 800f630:	2301      	moveq	r3, #1
 800f632:	2300      	movne	r3, #0
 800f634:	b2db      	uxtb	r3, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f63a:	2302      	movs	r3, #2
 800f63c:	e1ba      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d109      	bne.n	800f658 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	bf0c      	ite	eq
 800f650:	2301      	moveq	r3, #1
 800f652:	2300      	movne	r3, #0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	e03c      	b.n	800f6d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2b04      	cmp	r3, #4
 800f65c:	d109      	bne.n	800f672 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b01      	cmp	r3, #1
 800f668:	bf0c      	ite	eq
 800f66a:	2301      	moveq	r3, #1
 800f66c:	2300      	movne	r3, #0
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	e02f      	b.n	800f6d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2b08      	cmp	r3, #8
 800f676:	d109      	bne.n	800f68c <HAL_TIM_PWM_Start_DMA+0xfc>
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	2b01      	cmp	r3, #1
 800f682:	bf0c      	ite	eq
 800f684:	2301      	moveq	r3, #1
 800f686:	2300      	movne	r3, #0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	e022      	b.n	800f6d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	2b0c      	cmp	r3, #12
 800f690:	d109      	bne.n	800f6a6 <HAL_TIM_PWM_Start_DMA+0x116>
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	bf0c      	ite	eq
 800f69e:	2301      	moveq	r3, #1
 800f6a0:	2300      	movne	r3, #0
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	e015      	b.n	800f6d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	2b10      	cmp	r3, #16
 800f6aa:	d109      	bne.n	800f6c0 <HAL_TIM_PWM_Start_DMA+0x130>
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	bf0c      	ite	eq
 800f6b8:	2301      	moveq	r3, #1
 800f6ba:	2300      	movne	r3, #0
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	e008      	b.n	800f6d2 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	bf0c      	ite	eq
 800f6cc:	2301      	moveq	r3, #1
 800f6ce:	2300      	movne	r3, #0
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d034      	beq.n	800f740 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d002      	beq.n	800f6e2 <HAL_TIM_PWM_Start_DMA+0x152>
 800f6dc:	887b      	ldrh	r3, [r7, #2]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e166      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d104      	bne.n	800f6f6 <HAL_TIM_PWM_Start_DMA+0x166>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2202      	movs	r2, #2
 800f6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6f4:	e026      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	2b04      	cmp	r3, #4
 800f6fa:	d104      	bne.n	800f706 <HAL_TIM_PWM_Start_DMA+0x176>
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2202      	movs	r2, #2
 800f700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f704:	e01e      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b08      	cmp	r3, #8
 800f70a:	d104      	bne.n	800f716 <HAL_TIM_PWM_Start_DMA+0x186>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2202      	movs	r2, #2
 800f710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f714:	e016      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b0c      	cmp	r3, #12
 800f71a:	d104      	bne.n	800f726 <HAL_TIM_PWM_Start_DMA+0x196>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2202      	movs	r2, #2
 800f720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f724:	e00e      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b10      	cmp	r3, #16
 800f72a:	d104      	bne.n	800f736 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2202      	movs	r2, #2
 800f730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f734:	e006      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2202      	movs	r2, #2
 800f73a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f73e:	e001      	b.n	800f744 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	e137      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2b0c      	cmp	r3, #12
 800f748:	f200 80ae 	bhi.w	800f8a8 <HAL_TIM_PWM_Start_DMA+0x318>
 800f74c:	a201      	add	r2, pc, #4	; (adr r2, 800f754 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f752:	bf00      	nop
 800f754:	0800f789 	.word	0x0800f789
 800f758:	0800f8a9 	.word	0x0800f8a9
 800f75c:	0800f8a9 	.word	0x0800f8a9
 800f760:	0800f8a9 	.word	0x0800f8a9
 800f764:	0800f7d1 	.word	0x0800f7d1
 800f768:	0800f8a9 	.word	0x0800f8a9
 800f76c:	0800f8a9 	.word	0x0800f8a9
 800f770:	0800f8a9 	.word	0x0800f8a9
 800f774:	0800f819 	.word	0x0800f819
 800f778:	0800f8a9 	.word	0x0800f8a9
 800f77c:	0800f8a9 	.word	0x0800f8a9
 800f780:	0800f8a9 	.word	0x0800f8a9
 800f784:	0800f861 	.word	0x0800f861
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78c:	4a8b      	ldr	r2, [pc, #556]	; (800f9bc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f78e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f794:	4a8a      	ldr	r2, [pc, #552]	; (800f9c0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79c:	4a89      	ldr	r2, [pc, #548]	; (800f9c4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f79e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f7a4:	6879      	ldr	r1, [r7, #4]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3334      	adds	r3, #52	; 0x34
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	887b      	ldrh	r3, [r7, #2]
 800f7b0:	f7f6 f8e4 	bl	800597c <HAL_DMA_Start_IT>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e0fa      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68da      	ldr	r2, [r3, #12]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7cc:	60da      	str	r2, [r3, #12]
      break;
 800f7ce:	e06e      	b.n	800f8ae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d4:	4a79      	ldr	r2, [pc, #484]	; (800f9bc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f7d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7dc:	4a78      	ldr	r2, [pc, #480]	; (800f9c0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f7de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e4:	4a77      	ldr	r2, [pc, #476]	; (800f9c4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f7e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f7ec:	6879      	ldr	r1, [r7, #4]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	3338      	adds	r3, #56	; 0x38
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	887b      	ldrh	r3, [r7, #2]
 800f7f8:	f7f6 f8c0 	bl	800597c <HAL_DMA_Start_IT>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f802:	2301      	movs	r3, #1
 800f804:	e0d6      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68da      	ldr	r2, [r3, #12]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f814:	60da      	str	r2, [r3, #12]
      break;
 800f816:	e04a      	b.n	800f8ae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81c:	4a67      	ldr	r2, [pc, #412]	; (800f9bc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f81e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f824:	4a66      	ldr	r2, [pc, #408]	; (800f9c0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82c:	4a65      	ldr	r2, [pc, #404]	; (800f9c4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f82e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f834:	6879      	ldr	r1, [r7, #4]
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	333c      	adds	r3, #60	; 0x3c
 800f83c:	461a      	mov	r2, r3
 800f83e:	887b      	ldrh	r3, [r7, #2]
 800f840:	f7f6 f89c 	bl	800597c <HAL_DMA_Start_IT>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f84a:	2301      	movs	r3, #1
 800f84c:	e0b2      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68da      	ldr	r2, [r3, #12]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f85c:	60da      	str	r2, [r3, #12]
      break;
 800f85e:	e026      	b.n	800f8ae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f864:	4a55      	ldr	r2, [pc, #340]	; (800f9bc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f866:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f86c:	4a54      	ldr	r2, [pc, #336]	; (800f9c0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f86e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f874:	4a53      	ldr	r2, [pc, #332]	; (800f9c4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f876:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f87c:	6879      	ldr	r1, [r7, #4]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	3340      	adds	r3, #64	; 0x40
 800f884:	461a      	mov	r2, r3
 800f886:	887b      	ldrh	r3, [r7, #2]
 800f888:	f7f6 f878 	bl	800597c <HAL_DMA_Start_IT>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f892:	2301      	movs	r3, #1
 800f894:	e08e      	b.n	800f9b4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	68da      	ldr	r2, [r3, #12]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8a4:	60da      	str	r2, [r3, #12]
      break;
 800f8a6:	e002      	b.n	800f8ae <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800f8ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d17e      	bne.n	800f9b2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	68b9      	ldr	r1, [r7, #8]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f000 ff63 	bl	8010788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a40      	ldr	r2, [pc, #256]	; (800f9c8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d013      	beq.n	800f8f4 <HAL_TIM_PWM_Start_DMA+0x364>
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a3e      	ldr	r2, [pc, #248]	; (800f9cc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d00e      	beq.n	800f8f4 <HAL_TIM_PWM_Start_DMA+0x364>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a3d      	ldr	r2, [pc, #244]	; (800f9d0 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d009      	beq.n	800f8f4 <HAL_TIM_PWM_Start_DMA+0x364>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a3b      	ldr	r2, [pc, #236]	; (800f9d4 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d004      	beq.n	800f8f4 <HAL_TIM_PWM_Start_DMA+0x364>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a3a      	ldr	r2, [pc, #232]	; (800f9d8 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d101      	bne.n	800f8f8 <HAL_TIM_PWM_Start_DMA+0x368>
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e000      	b.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x36a>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d007      	beq.n	800f90e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f90c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a2d      	ldr	r2, [pc, #180]	; (800f9c8 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d02c      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f920:	d027      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a2d      	ldr	r2, [pc, #180]	; (800f9dc <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d022      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a2b      	ldr	r2, [pc, #172]	; (800f9e0 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d01d      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a2a      	ldr	r2, [pc, #168]	; (800f9e4 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d018      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a21      	ldr	r2, [pc, #132]	; (800f9cc <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d013      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a26      	ldr	r2, [pc, #152]	; (800f9e8 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d00e      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a1d      	ldr	r2, [pc, #116]	; (800f9d0 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d009      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a22      	ldr	r2, [pc, #136]	; (800f9ec <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d004      	beq.n	800f972 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a20      	ldr	r2, [pc, #128]	; (800f9f0 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d115      	bne.n	800f99e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	4b1e      	ldr	r3, [pc, #120]	; (800f9f4 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f97a:	4013      	ands	r3, r2
 800f97c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	2b06      	cmp	r3, #6
 800f982:	d015      	beq.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x420>
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f98a:	d011      	beq.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f042 0201 	orr.w	r2, r2, #1
 800f99a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f99c:	e008      	b.n	800f9b0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f042 0201 	orr.w	r2, r2, #1
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e000      	b.n	800f9b2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	0800ff7f 	.word	0x0800ff7f
 800f9c0:	08010027 	.word	0x08010027
 800f9c4:	0800feed 	.word	0x0800feed
 800f9c8:	40010000 	.word	0x40010000
 800f9cc:	40010400 	.word	0x40010400
 800f9d0:	40014000 	.word	0x40014000
 800f9d4:	40014400 	.word	0x40014400
 800f9d8:	40014800 	.word	0x40014800
 800f9dc:	40000400 	.word	0x40000400
 800f9e0:	40000800 	.word	0x40000800
 800f9e4:	40000c00 	.word	0x40000c00
 800f9e8:	40001800 	.word	0x40001800
 800f9ec:	4000e000 	.word	0x4000e000
 800f9f0:	4000e400 	.word	0x4000e400
 800f9f4:	00010007 	.word	0x00010007

0800f9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	691b      	ldr	r3, [r3, #16]
 800fa06:	f003 0302 	and.w	r3, r3, #2
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	d122      	bne.n	800fa54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f003 0302 	and.w	r3, r3, #2
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d11b      	bne.n	800fa54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f06f 0202 	mvn.w	r2, #2
 800fa24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	f003 0303 	and.w	r3, r3, #3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d003      	beq.n	800fa42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 fa24 	bl	800fe88 <HAL_TIM_IC_CaptureCallback>
 800fa40:	e005      	b.n	800fa4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 fa16 	bl	800fe74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f000 fa27 	bl	800fe9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	f003 0304 	and.w	r3, r3, #4
 800fa5e:	2b04      	cmp	r3, #4
 800fa60:	d122      	bne.n	800faa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	f003 0304 	and.w	r3, r3, #4
 800fa6c:	2b04      	cmp	r3, #4
 800fa6e:	d11b      	bne.n	800faa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f06f 0204 	mvn.w	r2, #4
 800fa78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	699b      	ldr	r3, [r3, #24]
 800fa86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f9fa 	bl	800fe88 <HAL_TIM_IC_CaptureCallback>
 800fa94:	e005      	b.n	800faa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f9ec 	bl	800fe74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f9fd 	bl	800fe9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2200      	movs	r2, #0
 800faa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	f003 0308 	and.w	r3, r3, #8
 800fab2:	2b08      	cmp	r3, #8
 800fab4:	d122      	bne.n	800fafc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	f003 0308 	and.w	r3, r3, #8
 800fac0:	2b08      	cmp	r3, #8
 800fac2:	d11b      	bne.n	800fafc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f06f 0208 	mvn.w	r2, #8
 800facc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2204      	movs	r2, #4
 800fad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	f003 0303 	and.w	r3, r3, #3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d003      	beq.n	800faea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f9d0 	bl	800fe88 <HAL_TIM_IC_CaptureCallback>
 800fae8:	e005      	b.n	800faf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f9c2 	bl	800fe74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f9d3 	bl	800fe9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	691b      	ldr	r3, [r3, #16]
 800fb02:	f003 0310 	and.w	r3, r3, #16
 800fb06:	2b10      	cmp	r3, #16
 800fb08:	d122      	bne.n	800fb50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	f003 0310 	and.w	r3, r3, #16
 800fb14:	2b10      	cmp	r3, #16
 800fb16:	d11b      	bne.n	800fb50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f06f 0210 	mvn.w	r2, #16
 800fb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2208      	movs	r2, #8
 800fb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	69db      	ldr	r3, [r3, #28]
 800fb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d003      	beq.n	800fb3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f9a6 	bl	800fe88 <HAL_TIM_IC_CaptureCallback>
 800fb3c:	e005      	b.n	800fb4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f998 	bl	800fe74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f9a9 	bl	800fe9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	f003 0301 	and.w	r3, r3, #1
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d10e      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	f003 0301 	and.w	r3, r3, #1
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d107      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f06f 0201 	mvn.w	r2, #1
 800fb74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f972 	bl	800fe60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb86:	2b80      	cmp	r3, #128	; 0x80
 800fb88:	d10e      	bne.n	800fba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb94:	2b80      	cmp	r3, #128	; 0x80
 800fb96:	d107      	bne.n	800fba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 febc 	bl	8010920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	691b      	ldr	r3, [r3, #16]
 800fbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbb6:	d10e      	bne.n	800fbd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbc2:	2b80      	cmp	r3, #128	; 0x80
 800fbc4:	d107      	bne.n	800fbd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fbce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 feaf 	bl	8010934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbe0:	2b40      	cmp	r3, #64	; 0x40
 800fbe2:	d10e      	bne.n	800fc02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	68db      	ldr	r3, [r3, #12]
 800fbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbee:	2b40      	cmp	r3, #64	; 0x40
 800fbf0:	d107      	bne.n	800fc02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 f961 	bl	800fec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	f003 0320 	and.w	r3, r3, #32
 800fc0c:	2b20      	cmp	r3, #32
 800fc0e:	d10e      	bne.n	800fc2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	f003 0320 	and.w	r3, r3, #32
 800fc1a:	2b20      	cmp	r3, #32
 800fc1c:	d107      	bne.n	800fc2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f06f 0220 	mvn.w	r2, #32
 800fc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 fe6f 	bl	801090c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc2e:	bf00      	nop
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
	...

0800fc38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fc44:	2300      	movs	r3, #0
 800fc46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d101      	bne.n	800fc56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fc52:	2302      	movs	r3, #2
 800fc54:	e0ff      	b.n	800fe56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b14      	cmp	r3, #20
 800fc62:	f200 80f0 	bhi.w	800fe46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fc66:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6c:	0800fcc1 	.word	0x0800fcc1
 800fc70:	0800fe47 	.word	0x0800fe47
 800fc74:	0800fe47 	.word	0x0800fe47
 800fc78:	0800fe47 	.word	0x0800fe47
 800fc7c:	0800fd01 	.word	0x0800fd01
 800fc80:	0800fe47 	.word	0x0800fe47
 800fc84:	0800fe47 	.word	0x0800fe47
 800fc88:	0800fe47 	.word	0x0800fe47
 800fc8c:	0800fd43 	.word	0x0800fd43
 800fc90:	0800fe47 	.word	0x0800fe47
 800fc94:	0800fe47 	.word	0x0800fe47
 800fc98:	0800fe47 	.word	0x0800fe47
 800fc9c:	0800fd83 	.word	0x0800fd83
 800fca0:	0800fe47 	.word	0x0800fe47
 800fca4:	0800fe47 	.word	0x0800fe47
 800fca8:	0800fe47 	.word	0x0800fe47
 800fcac:	0800fdc5 	.word	0x0800fdc5
 800fcb0:	0800fe47 	.word	0x0800fe47
 800fcb4:	0800fe47 	.word	0x0800fe47
 800fcb8:	0800fe47 	.word	0x0800fe47
 800fcbc:	0800fe05 	.word	0x0800fe05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 fa88 	bl	80101dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	699a      	ldr	r2, [r3, #24]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f042 0208 	orr.w	r2, r2, #8
 800fcda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	699a      	ldr	r2, [r3, #24]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f022 0204 	bic.w	r2, r2, #4
 800fcea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6999      	ldr	r1, [r3, #24]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	691a      	ldr	r2, [r3, #16]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	430a      	orrs	r2, r1
 800fcfc:	619a      	str	r2, [r3, #24]
      break;
 800fcfe:	e0a5      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68b9      	ldr	r1, [r7, #8]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f000 faf8 	bl	80102fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	699a      	ldr	r2, [r3, #24]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	699a      	ldr	r2, [r3, #24]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6999      	ldr	r1, [r3, #24]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	021a      	lsls	r2, r3, #8
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	430a      	orrs	r2, r1
 800fd3e:	619a      	str	r2, [r3, #24]
      break;
 800fd40:	e084      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68b9      	ldr	r1, [r7, #8]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 fb61 	bl	8010410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	69da      	ldr	r2, [r3, #28]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f042 0208 	orr.w	r2, r2, #8
 800fd5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	69da      	ldr	r2, [r3, #28]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f022 0204 	bic.w	r2, r2, #4
 800fd6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	69d9      	ldr	r1, [r3, #28]
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	691a      	ldr	r2, [r3, #16]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	430a      	orrs	r2, r1
 800fd7e:	61da      	str	r2, [r3, #28]
      break;
 800fd80:	e064      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68b9      	ldr	r1, [r7, #8]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f000 fbc9 	bl	8010520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	69da      	ldr	r2, [r3, #28]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	69da      	ldr	r2, [r3, #28]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	69d9      	ldr	r1, [r3, #28]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	021a      	lsls	r2, r3, #8
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	430a      	orrs	r2, r1
 800fdc0:	61da      	str	r2, [r3, #28]
      break;
 800fdc2:	e043      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 fc12 	bl	80105f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f042 0208 	orr.w	r2, r2, #8
 800fdde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f022 0204 	bic.w	r2, r2, #4
 800fdee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	691a      	ldr	r2, [r3, #16]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	430a      	orrs	r2, r1
 800fe00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe02:	e023      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68b9      	ldr	r1, [r7, #8]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 fc56 	bl	80106bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	021a      	lsls	r2, r3, #8
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	430a      	orrs	r2, r1
 800fe42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe44:	e002      	b.n	800fe4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	75fb      	strb	r3, [r7, #23]
      break;
 800fe4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fe54:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop

0800fe60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fe68:	bf00      	nop
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b083      	sub	sp, #12
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800feb8:	bf00      	nop
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d107      	bne.n	800ff14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2201      	movs	r2, #1
 800ff08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff12:	e02a      	b.n	800ff6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d107      	bne.n	800ff2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2202      	movs	r2, #2
 800ff22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff2c:	e01d      	b.n	800ff6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d107      	bne.n	800ff48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff46:	e010      	b.n	800ff6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d107      	bne.n	800ff62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2208      	movs	r2, #8
 800ff56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff60:	e003      	b.n	800ff6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2201      	movs	r2, #1
 800ff66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f7ff ffb4 	bl	800fed8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2200      	movs	r2, #0
 800ff74:	771a      	strb	r2, [r3, #28]
}
 800ff76:	bf00      	nop
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d10b      	bne.n	800ffae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	69db      	ldr	r3, [r3, #28]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d136      	bne.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ffac:	e031      	b.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d10b      	bne.n	800ffd0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2202      	movs	r2, #2
 800ffbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d125      	bne.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffce:	e020      	b.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d10b      	bne.n	800fff2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2204      	movs	r2, #4
 800ffde:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d114      	bne.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2201      	movs	r2, #1
 800ffec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fff0:	e00f      	b.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d10a      	bne.n	8010012 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2208      	movs	r2, #8
 8010000:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	69db      	ldr	r3, [r3, #28]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d103      	bne.n	8010012 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f7ff ff42 	bl	800fe9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2200      	movs	r2, #0
 801001c:	771a      	strb	r2, [r3, #28]
}
 801001e:	bf00      	nop
 8010020:	3710      	adds	r7, #16
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}

08010026 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010026:	b580      	push	{r7, lr}
 8010028:	b084      	sub	sp, #16
 801002a:	af00      	add	r7, sp, #0
 801002c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010032:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	429a      	cmp	r2, r3
 801003c:	d103      	bne.n	8010046 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2201      	movs	r2, #1
 8010042:	771a      	strb	r2, [r3, #28]
 8010044:	e019      	b.n	801007a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	429a      	cmp	r2, r3
 801004e:	d103      	bne.n	8010058 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2202      	movs	r2, #2
 8010054:	771a      	strb	r2, [r3, #28]
 8010056:	e010      	b.n	801007a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	429a      	cmp	r2, r3
 8010060:	d103      	bne.n	801006a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2204      	movs	r2, #4
 8010066:	771a      	strb	r2, [r3, #28]
 8010068:	e007      	b.n	801007a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	429a      	cmp	r2, r3
 8010072:	d102      	bne.n	801007a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2208      	movs	r2, #8
 8010078:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff ff18 	bl	800feb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2200      	movs	r2, #0
 8010084:	771a      	strb	r2, [r3, #28]
}
 8010086:	bf00      	nop
 8010088:	3710      	adds	r7, #16
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
	...

08010090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4a44      	ldr	r2, [pc, #272]	; (80101b4 <TIM_Base_SetConfig+0x124>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d013      	beq.n	80100d0 <TIM_Base_SetConfig+0x40>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ae:	d00f      	beq.n	80100d0 <TIM_Base_SetConfig+0x40>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a41      	ldr	r2, [pc, #260]	; (80101b8 <TIM_Base_SetConfig+0x128>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d00b      	beq.n	80100d0 <TIM_Base_SetConfig+0x40>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	4a40      	ldr	r2, [pc, #256]	; (80101bc <TIM_Base_SetConfig+0x12c>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d007      	beq.n	80100d0 <TIM_Base_SetConfig+0x40>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4a3f      	ldr	r2, [pc, #252]	; (80101c0 <TIM_Base_SetConfig+0x130>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d003      	beq.n	80100d0 <TIM_Base_SetConfig+0x40>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4a3e      	ldr	r2, [pc, #248]	; (80101c4 <TIM_Base_SetConfig+0x134>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d108      	bne.n	80100e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	4313      	orrs	r3, r2
 80100e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4a33      	ldr	r2, [pc, #204]	; (80101b4 <TIM_Base_SetConfig+0x124>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d027      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100f0:	d023      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a30      	ldr	r2, [pc, #192]	; (80101b8 <TIM_Base_SetConfig+0x128>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d01f      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4a2f      	ldr	r2, [pc, #188]	; (80101bc <TIM_Base_SetConfig+0x12c>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d01b      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a2e      	ldr	r2, [pc, #184]	; (80101c0 <TIM_Base_SetConfig+0x130>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d017      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a2d      	ldr	r2, [pc, #180]	; (80101c4 <TIM_Base_SetConfig+0x134>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d013      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4a2c      	ldr	r2, [pc, #176]	; (80101c8 <TIM_Base_SetConfig+0x138>)
 8010116:	4293      	cmp	r3, r2
 8010118:	d00f      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4a2b      	ldr	r2, [pc, #172]	; (80101cc <TIM_Base_SetConfig+0x13c>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d00b      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4a2a      	ldr	r2, [pc, #168]	; (80101d0 <TIM_Base_SetConfig+0x140>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d007      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4a29      	ldr	r2, [pc, #164]	; (80101d4 <TIM_Base_SetConfig+0x144>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d003      	beq.n	801013a <TIM_Base_SetConfig+0xaa>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4a28      	ldr	r2, [pc, #160]	; (80101d8 <TIM_Base_SetConfig+0x148>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d108      	bne.n	801014c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	4313      	orrs	r3, r2
 801014a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	695b      	ldr	r3, [r3, #20]
 8010156:	4313      	orrs	r3, r2
 8010158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	689a      	ldr	r2, [r3, #8]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4a10      	ldr	r2, [pc, #64]	; (80101b4 <TIM_Base_SetConfig+0x124>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d00f      	beq.n	8010198 <TIM_Base_SetConfig+0x108>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a12      	ldr	r2, [pc, #72]	; (80101c4 <TIM_Base_SetConfig+0x134>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d00b      	beq.n	8010198 <TIM_Base_SetConfig+0x108>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4a11      	ldr	r2, [pc, #68]	; (80101c8 <TIM_Base_SetConfig+0x138>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d007      	beq.n	8010198 <TIM_Base_SetConfig+0x108>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4a10      	ldr	r2, [pc, #64]	; (80101cc <TIM_Base_SetConfig+0x13c>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d003      	beq.n	8010198 <TIM_Base_SetConfig+0x108>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4a0f      	ldr	r2, [pc, #60]	; (80101d0 <TIM_Base_SetConfig+0x140>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d103      	bne.n	80101a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	691a      	ldr	r2, [r3, #16]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2201      	movs	r2, #1
 80101a4:	615a      	str	r2, [r3, #20]
}
 80101a6:	bf00      	nop
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	40010000 	.word	0x40010000
 80101b8:	40000400 	.word	0x40000400
 80101bc:	40000800 	.word	0x40000800
 80101c0:	40000c00 	.word	0x40000c00
 80101c4:	40010400 	.word	0x40010400
 80101c8:	40014000 	.word	0x40014000
 80101cc:	40014400 	.word	0x40014400
 80101d0:	40014800 	.word	0x40014800
 80101d4:	4000e000 	.word	0x4000e000
 80101d8:	4000e400 	.word	0x4000e400

080101dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101dc:	b480      	push	{r7}
 80101de:	b087      	sub	sp, #28
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	f023 0201 	bic.w	r2, r3, #1
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a1b      	ldr	r3, [r3, #32]
 80101f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	4b37      	ldr	r3, [pc, #220]	; (80102e4 <TIM_OC1_SetConfig+0x108>)
 8010208:	4013      	ands	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f023 0303 	bic.w	r3, r3, #3
 8010212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4313      	orrs	r3, r2
 801021c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	f023 0302 	bic.w	r3, r3, #2
 8010224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	4313      	orrs	r3, r2
 801022e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4a2d      	ldr	r2, [pc, #180]	; (80102e8 <TIM_OC1_SetConfig+0x10c>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d00f      	beq.n	8010258 <TIM_OC1_SetConfig+0x7c>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4a2c      	ldr	r2, [pc, #176]	; (80102ec <TIM_OC1_SetConfig+0x110>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d00b      	beq.n	8010258 <TIM_OC1_SetConfig+0x7c>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	4a2b      	ldr	r2, [pc, #172]	; (80102f0 <TIM_OC1_SetConfig+0x114>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d007      	beq.n	8010258 <TIM_OC1_SetConfig+0x7c>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4a2a      	ldr	r2, [pc, #168]	; (80102f4 <TIM_OC1_SetConfig+0x118>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d003      	beq.n	8010258 <TIM_OC1_SetConfig+0x7c>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4a29      	ldr	r2, [pc, #164]	; (80102f8 <TIM_OC1_SetConfig+0x11c>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d10c      	bne.n	8010272 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	f023 0308 	bic.w	r3, r3, #8
 801025e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	697a      	ldr	r2, [r7, #20]
 8010266:	4313      	orrs	r3, r2
 8010268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	f023 0304 	bic.w	r3, r3, #4
 8010270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4a1c      	ldr	r2, [pc, #112]	; (80102e8 <TIM_OC1_SetConfig+0x10c>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d00f      	beq.n	801029a <TIM_OC1_SetConfig+0xbe>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4a1b      	ldr	r2, [pc, #108]	; (80102ec <TIM_OC1_SetConfig+0x110>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d00b      	beq.n	801029a <TIM_OC1_SetConfig+0xbe>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4a1a      	ldr	r2, [pc, #104]	; (80102f0 <TIM_OC1_SetConfig+0x114>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d007      	beq.n	801029a <TIM_OC1_SetConfig+0xbe>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4a19      	ldr	r2, [pc, #100]	; (80102f4 <TIM_OC1_SetConfig+0x118>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d003      	beq.n	801029a <TIM_OC1_SetConfig+0xbe>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4a18      	ldr	r2, [pc, #96]	; (80102f8 <TIM_OC1_SetConfig+0x11c>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d111      	bne.n	80102be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	695b      	ldr	r3, [r3, #20]
 80102ae:	693a      	ldr	r2, [r7, #16]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	699b      	ldr	r3, [r3, #24]
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	4313      	orrs	r3, r2
 80102bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	693a      	ldr	r2, [r7, #16]
 80102c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	685a      	ldr	r2, [r3, #4]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	697a      	ldr	r2, [r7, #20]
 80102d6:	621a      	str	r2, [r3, #32]
}
 80102d8:	bf00      	nop
 80102da:	371c      	adds	r7, #28
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr
 80102e4:	fffeff8f 	.word	0xfffeff8f
 80102e8:	40010000 	.word	0x40010000
 80102ec:	40010400 	.word	0x40010400
 80102f0:	40014000 	.word	0x40014000
 80102f4:	40014400 	.word	0x40014400
 80102f8:	40014800 	.word	0x40014800

080102fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b087      	sub	sp, #28
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6a1b      	ldr	r3, [r3, #32]
 801030a:	f023 0210 	bic.w	r2, r3, #16
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a1b      	ldr	r3, [r3, #32]
 8010316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	4b34      	ldr	r3, [pc, #208]	; (80103f8 <TIM_OC2_SetConfig+0xfc>)
 8010328:	4013      	ands	r3, r2
 801032a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	021b      	lsls	r3, r3, #8
 801033a:	68fa      	ldr	r2, [r7, #12]
 801033c:	4313      	orrs	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f023 0320 	bic.w	r3, r3, #32
 8010346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	689b      	ldr	r3, [r3, #8]
 801034c:	011b      	lsls	r3, r3, #4
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	4313      	orrs	r3, r2
 8010352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a29      	ldr	r2, [pc, #164]	; (80103fc <TIM_OC2_SetConfig+0x100>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d003      	beq.n	8010364 <TIM_OC2_SetConfig+0x68>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a28      	ldr	r2, [pc, #160]	; (8010400 <TIM_OC2_SetConfig+0x104>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d10d      	bne.n	8010380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801036a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	011b      	lsls	r3, r3, #4
 8010372:	697a      	ldr	r2, [r7, #20]
 8010374:	4313      	orrs	r3, r2
 8010376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801037e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a1e      	ldr	r2, [pc, #120]	; (80103fc <TIM_OC2_SetConfig+0x100>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d00f      	beq.n	80103a8 <TIM_OC2_SetConfig+0xac>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a1d      	ldr	r2, [pc, #116]	; (8010400 <TIM_OC2_SetConfig+0x104>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d00b      	beq.n	80103a8 <TIM_OC2_SetConfig+0xac>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a1c      	ldr	r2, [pc, #112]	; (8010404 <TIM_OC2_SetConfig+0x108>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d007      	beq.n	80103a8 <TIM_OC2_SetConfig+0xac>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a1b      	ldr	r2, [pc, #108]	; (8010408 <TIM_OC2_SetConfig+0x10c>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d003      	beq.n	80103a8 <TIM_OC2_SetConfig+0xac>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a1a      	ldr	r2, [pc, #104]	; (801040c <TIM_OC2_SetConfig+0x110>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d113      	bne.n	80103d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	695b      	ldr	r3, [r3, #20]
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	693a      	ldr	r2, [r7, #16]
 80103c0:	4313      	orrs	r3, r2
 80103c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	699b      	ldr	r3, [r3, #24]
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	693a      	ldr	r2, [r7, #16]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	693a      	ldr	r2, [r7, #16]
 80103d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	685a      	ldr	r2, [r3, #4]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	621a      	str	r2, [r3, #32]
}
 80103ea:	bf00      	nop
 80103ec:	371c      	adds	r7, #28
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr
 80103f6:	bf00      	nop
 80103f8:	feff8fff 	.word	0xfeff8fff
 80103fc:	40010000 	.word	0x40010000
 8010400:	40010400 	.word	0x40010400
 8010404:	40014000 	.word	0x40014000
 8010408:	40014400 	.word	0x40014400
 801040c:	40014800 	.word	0x40014800

08010410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010410:	b480      	push	{r7}
 8010412:	b087      	sub	sp, #28
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6a1b      	ldr	r3, [r3, #32]
 801041e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	69db      	ldr	r3, [r3, #28]
 8010436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	4b33      	ldr	r3, [pc, #204]	; (8010508 <TIM_OC3_SetConfig+0xf8>)
 801043c:	4013      	ands	r3, r2
 801043e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f023 0303 	bic.w	r3, r3, #3
 8010446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	4313      	orrs	r3, r2
 8010450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	689b      	ldr	r3, [r3, #8]
 801045e:	021b      	lsls	r3, r3, #8
 8010460:	697a      	ldr	r2, [r7, #20]
 8010462:	4313      	orrs	r3, r2
 8010464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a28      	ldr	r2, [pc, #160]	; (801050c <TIM_OC3_SetConfig+0xfc>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d003      	beq.n	8010476 <TIM_OC3_SetConfig+0x66>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a27      	ldr	r2, [pc, #156]	; (8010510 <TIM_OC3_SetConfig+0x100>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d10d      	bne.n	8010492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801047c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	021b      	lsls	r3, r3, #8
 8010484:	697a      	ldr	r2, [r7, #20]
 8010486:	4313      	orrs	r3, r2
 8010488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a1d      	ldr	r2, [pc, #116]	; (801050c <TIM_OC3_SetConfig+0xfc>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d00f      	beq.n	80104ba <TIM_OC3_SetConfig+0xaa>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a1c      	ldr	r2, [pc, #112]	; (8010510 <TIM_OC3_SetConfig+0x100>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d00b      	beq.n	80104ba <TIM_OC3_SetConfig+0xaa>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4a1b      	ldr	r2, [pc, #108]	; (8010514 <TIM_OC3_SetConfig+0x104>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d007      	beq.n	80104ba <TIM_OC3_SetConfig+0xaa>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a1a      	ldr	r2, [pc, #104]	; (8010518 <TIM_OC3_SetConfig+0x108>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d003      	beq.n	80104ba <TIM_OC3_SetConfig+0xaa>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a19      	ldr	r2, [pc, #100]	; (801051c <TIM_OC3_SetConfig+0x10c>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d113      	bne.n	80104e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	695b      	ldr	r3, [r3, #20]
 80104ce:	011b      	lsls	r3, r3, #4
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	4313      	orrs	r3, r2
 80104d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	699b      	ldr	r3, [r3, #24]
 80104da:	011b      	lsls	r3, r3, #4
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	4313      	orrs	r3, r2
 80104e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	693a      	ldr	r2, [r7, #16]
 80104e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	621a      	str	r2, [r3, #32]
}
 80104fc:	bf00      	nop
 80104fe:	371c      	adds	r7, #28
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr
 8010508:	fffeff8f 	.word	0xfffeff8f
 801050c:	40010000 	.word	0x40010000
 8010510:	40010400 	.word	0x40010400
 8010514:	40014000 	.word	0x40014000
 8010518:	40014400 	.word	0x40014400
 801051c:	40014800 	.word	0x40014800

08010520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a1b      	ldr	r3, [r3, #32]
 801052e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a1b      	ldr	r3, [r3, #32]
 801053a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	69db      	ldr	r3, [r3, #28]
 8010546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010548:	68fa      	ldr	r2, [r7, #12]
 801054a:	4b24      	ldr	r3, [pc, #144]	; (80105dc <TIM_OC4_SetConfig+0xbc>)
 801054c:	4013      	ands	r3, r2
 801054e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	021b      	lsls	r3, r3, #8
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	4313      	orrs	r3, r2
 8010562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801056a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	031b      	lsls	r3, r3, #12
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	4313      	orrs	r3, r2
 8010576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	4a19      	ldr	r2, [pc, #100]	; (80105e0 <TIM_OC4_SetConfig+0xc0>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d00f      	beq.n	80105a0 <TIM_OC4_SetConfig+0x80>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4a18      	ldr	r2, [pc, #96]	; (80105e4 <TIM_OC4_SetConfig+0xc4>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d00b      	beq.n	80105a0 <TIM_OC4_SetConfig+0x80>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	4a17      	ldr	r2, [pc, #92]	; (80105e8 <TIM_OC4_SetConfig+0xc8>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d007      	beq.n	80105a0 <TIM_OC4_SetConfig+0x80>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4a16      	ldr	r2, [pc, #88]	; (80105ec <TIM_OC4_SetConfig+0xcc>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d003      	beq.n	80105a0 <TIM_OC4_SetConfig+0x80>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a15      	ldr	r2, [pc, #84]	; (80105f0 <TIM_OC4_SetConfig+0xd0>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d109      	bne.n	80105b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	695b      	ldr	r3, [r3, #20]
 80105ac:	019b      	lsls	r3, r3, #6
 80105ae:	697a      	ldr	r2, [r7, #20]
 80105b0:	4313      	orrs	r3, r2
 80105b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	693a      	ldr	r2, [r7, #16]
 80105cc:	621a      	str	r2, [r3, #32]
}
 80105ce:	bf00      	nop
 80105d0:	371c      	adds	r7, #28
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	feff8fff 	.word	0xfeff8fff
 80105e0:	40010000 	.word	0x40010000
 80105e4:	40010400 	.word	0x40010400
 80105e8:	40014000 	.word	0x40014000
 80105ec:	40014400 	.word	0x40014400
 80105f0:	40014800 	.word	0x40014800

080105f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b087      	sub	sp, #28
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6a1b      	ldr	r3, [r3, #32]
 8010602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801061a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	4b21      	ldr	r3, [pc, #132]	; (80106a4 <TIM_OC5_SetConfig+0xb0>)
 8010620:	4013      	ands	r3, r2
 8010622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	4313      	orrs	r3, r2
 801062c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	041b      	lsls	r3, r3, #16
 801063c:	693a      	ldr	r2, [r7, #16]
 801063e:	4313      	orrs	r3, r2
 8010640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4a18      	ldr	r2, [pc, #96]	; (80106a8 <TIM_OC5_SetConfig+0xb4>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d00f      	beq.n	801066a <TIM_OC5_SetConfig+0x76>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4a17      	ldr	r2, [pc, #92]	; (80106ac <TIM_OC5_SetConfig+0xb8>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d00b      	beq.n	801066a <TIM_OC5_SetConfig+0x76>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4a16      	ldr	r2, [pc, #88]	; (80106b0 <TIM_OC5_SetConfig+0xbc>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d007      	beq.n	801066a <TIM_OC5_SetConfig+0x76>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4a15      	ldr	r2, [pc, #84]	; (80106b4 <TIM_OC5_SetConfig+0xc0>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d003      	beq.n	801066a <TIM_OC5_SetConfig+0x76>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a14      	ldr	r2, [pc, #80]	; (80106b8 <TIM_OC5_SetConfig+0xc4>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d109      	bne.n	801067e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	695b      	ldr	r3, [r3, #20]
 8010676:	021b      	lsls	r3, r3, #8
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	4313      	orrs	r3, r2
 801067c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	697a      	ldr	r2, [r7, #20]
 8010682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	685a      	ldr	r2, [r3, #4]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	693a      	ldr	r2, [r7, #16]
 8010696:	621a      	str	r2, [r3, #32]
}
 8010698:	bf00      	nop
 801069a:	371c      	adds	r7, #28
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr
 80106a4:	fffeff8f 	.word	0xfffeff8f
 80106a8:	40010000 	.word	0x40010000
 80106ac:	40010400 	.word	0x40010400
 80106b0:	40014000 	.word	0x40014000
 80106b4:	40014400 	.word	0x40014400
 80106b8:	40014800 	.word	0x40014800

080106bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80106bc:	b480      	push	{r7}
 80106be:	b087      	sub	sp, #28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	4b22      	ldr	r3, [pc, #136]	; (8010770 <TIM_OC6_SetConfig+0xb4>)
 80106e8:	4013      	ands	r3, r2
 80106ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	021b      	lsls	r3, r3, #8
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	4313      	orrs	r3, r2
 80106f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80106fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	051b      	lsls	r3, r3, #20
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	4313      	orrs	r3, r2
 801070a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4a19      	ldr	r2, [pc, #100]	; (8010774 <TIM_OC6_SetConfig+0xb8>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d00f      	beq.n	8010734 <TIM_OC6_SetConfig+0x78>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4a18      	ldr	r2, [pc, #96]	; (8010778 <TIM_OC6_SetConfig+0xbc>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d00b      	beq.n	8010734 <TIM_OC6_SetConfig+0x78>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4a17      	ldr	r2, [pc, #92]	; (801077c <TIM_OC6_SetConfig+0xc0>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d007      	beq.n	8010734 <TIM_OC6_SetConfig+0x78>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4a16      	ldr	r2, [pc, #88]	; (8010780 <TIM_OC6_SetConfig+0xc4>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d003      	beq.n	8010734 <TIM_OC6_SetConfig+0x78>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4a15      	ldr	r2, [pc, #84]	; (8010784 <TIM_OC6_SetConfig+0xc8>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d109      	bne.n	8010748 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801073a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	695b      	ldr	r3, [r3, #20]
 8010740:	029b      	lsls	r3, r3, #10
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	4313      	orrs	r3, r2
 8010746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	697a      	ldr	r2, [r7, #20]
 801074c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	685a      	ldr	r2, [r3, #4]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	693a      	ldr	r2, [r7, #16]
 8010760:	621a      	str	r2, [r3, #32]
}
 8010762:	bf00      	nop
 8010764:	371c      	adds	r7, #28
 8010766:	46bd      	mov	sp, r7
 8010768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	feff8fff 	.word	0xfeff8fff
 8010774:	40010000 	.word	0x40010000
 8010778:	40010400 	.word	0x40010400
 801077c:	40014000 	.word	0x40014000
 8010780:	40014400 	.word	0x40014400
 8010784:	40014800 	.word	0x40014800

08010788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010788:	b480      	push	{r7}
 801078a:	b087      	sub	sp, #28
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	f003 031f 	and.w	r3, r3, #31
 801079a:	2201      	movs	r2, #1
 801079c:	fa02 f303 	lsl.w	r3, r2, r3
 80107a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6a1a      	ldr	r2, [r3, #32]
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	43db      	mvns	r3, r3
 80107aa:	401a      	ands	r2, r3
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6a1a      	ldr	r2, [r3, #32]
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	f003 031f 	and.w	r3, r3, #31
 80107ba:	6879      	ldr	r1, [r7, #4]
 80107bc:	fa01 f303 	lsl.w	r3, r1, r3
 80107c0:	431a      	orrs	r2, r3
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	621a      	str	r2, [r3, #32]
}
 80107c6:	bf00      	nop
 80107c8:	371c      	adds	r7, #28
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr
	...

080107d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d101      	bne.n	80107ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80107e8:	2302      	movs	r3, #2
 80107ea:	e077      	b.n	80108dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2201      	movs	r2, #1
 80107f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2202      	movs	r2, #2
 80107f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a35      	ldr	r2, [pc, #212]	; (80108e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d004      	beq.n	8010820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a34      	ldr	r2, [pc, #208]	; (80108ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d108      	bne.n	8010832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	4313      	orrs	r3, r2
 8010830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	68fa      	ldr	r2, [r7, #12]
 8010840:	4313      	orrs	r3, r2
 8010842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a25      	ldr	r2, [pc, #148]	; (80108e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d02c      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801085e:	d027      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a22      	ldr	r2, [pc, #136]	; (80108f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d022      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a21      	ldr	r2, [pc, #132]	; (80108f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010870:	4293      	cmp	r3, r2
 8010872:	d01d      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4a1f      	ldr	r2, [pc, #124]	; (80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d018      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a1a      	ldr	r2, [pc, #104]	; (80108ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010884:	4293      	cmp	r3, r2
 8010886:	d013      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4a1b      	ldr	r2, [pc, #108]	; (80108fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d00e      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a1a      	ldr	r2, [pc, #104]	; (8010900 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d009      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a18      	ldr	r2, [pc, #96]	; (8010904 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d004      	beq.n	80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4a17      	ldr	r2, [pc, #92]	; (8010908 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d10c      	bne.n	80108ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	689b      	ldr	r3, [r3, #8]
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	4313      	orrs	r3, r2
 80108c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80108da:	2300      	movs	r3, #0
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3714      	adds	r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	40010000 	.word	0x40010000
 80108ec:	40010400 	.word	0x40010400
 80108f0:	40000400 	.word	0x40000400
 80108f4:	40000800 	.word	0x40000800
 80108f8:	40000c00 	.word	0x40000c00
 80108fc:	40001800 	.word	0x40001800
 8010900:	40014000 	.word	0x40014000
 8010904:	4000e000 	.word	0x4000e000
 8010908:	4000e400 	.word	0x4000e400

0801090c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr

08010920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010928:	bf00      	nop
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010956:	2301      	movs	r3, #1
 8010958:	e042      	b.n	80109e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7f2 fcb1 	bl	80032d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2224      	movs	r2, #36	; 0x24
 8010976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	681a      	ldr	r2, [r3, #0]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f022 0201 	bic.w	r2, r2, #1
 8010988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f000 f82c 	bl	80109e8 <UART_SetConfig>
 8010990:	4603      	mov	r3, r0
 8010992:	2b01      	cmp	r3, #1
 8010994:	d101      	bne.n	801099a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010996:	2301      	movs	r3, #1
 8010998:	e022      	b.n	80109e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d002      	beq.n	80109a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f000 fe8c 	bl	80116c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	685a      	ldr	r2, [r3, #4]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	689a      	ldr	r2, [r3, #8]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	681a      	ldr	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f042 0201 	orr.w	r2, r2, #1
 80109d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 ff13 	bl	8011804 <UART_CheckIdleState>
 80109de:	4603      	mov	r3, r0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80109ec:	b092      	sub	sp, #72	; 0x48
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109f2:	2300      	movs	r3, #0
 80109f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	689a      	ldr	r2, [r3, #8]
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	691b      	ldr	r3, [r3, #16]
 8010a00:	431a      	orrs	r2, r3
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	695b      	ldr	r3, [r3, #20]
 8010a06:	431a      	orrs	r2, r3
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	69db      	ldr	r3, [r3, #28]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	4bbe      	ldr	r3, [pc, #760]	; (8010d10 <UART_SetConfig+0x328>)
 8010a18:	4013      	ands	r3, r2
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	6812      	ldr	r2, [r2, #0]
 8010a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a20:	430b      	orrs	r3, r1
 8010a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	68da      	ldr	r2, [r3, #12]
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	430a      	orrs	r2, r1
 8010a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	699b      	ldr	r3, [r3, #24]
 8010a3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4ab3      	ldr	r2, [pc, #716]	; (8010d14 <UART_SetConfig+0x32c>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d004      	beq.n	8010a54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a50:	4313      	orrs	r3, r2
 8010a52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	4baf      	ldr	r3, [pc, #700]	; (8010d18 <UART_SetConfig+0x330>)
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a64:	430b      	orrs	r3, r1
 8010a66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6e:	f023 010f 	bic.w	r1, r3, #15
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	430a      	orrs	r2, r1
 8010a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4aa6      	ldr	r2, [pc, #664]	; (8010d1c <UART_SetConfig+0x334>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d177      	bne.n	8010b78 <UART_SetConfig+0x190>
 8010a88:	4ba5      	ldr	r3, [pc, #660]	; (8010d20 <UART_SetConfig+0x338>)
 8010a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a90:	2b28      	cmp	r3, #40	; 0x28
 8010a92:	d86d      	bhi.n	8010b70 <UART_SetConfig+0x188>
 8010a94:	a201      	add	r2, pc, #4	; (adr r2, 8010a9c <UART_SetConfig+0xb4>)
 8010a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a9a:	bf00      	nop
 8010a9c:	08010b41 	.word	0x08010b41
 8010aa0:	08010b71 	.word	0x08010b71
 8010aa4:	08010b71 	.word	0x08010b71
 8010aa8:	08010b71 	.word	0x08010b71
 8010aac:	08010b71 	.word	0x08010b71
 8010ab0:	08010b71 	.word	0x08010b71
 8010ab4:	08010b71 	.word	0x08010b71
 8010ab8:	08010b71 	.word	0x08010b71
 8010abc:	08010b49 	.word	0x08010b49
 8010ac0:	08010b71 	.word	0x08010b71
 8010ac4:	08010b71 	.word	0x08010b71
 8010ac8:	08010b71 	.word	0x08010b71
 8010acc:	08010b71 	.word	0x08010b71
 8010ad0:	08010b71 	.word	0x08010b71
 8010ad4:	08010b71 	.word	0x08010b71
 8010ad8:	08010b71 	.word	0x08010b71
 8010adc:	08010b51 	.word	0x08010b51
 8010ae0:	08010b71 	.word	0x08010b71
 8010ae4:	08010b71 	.word	0x08010b71
 8010ae8:	08010b71 	.word	0x08010b71
 8010aec:	08010b71 	.word	0x08010b71
 8010af0:	08010b71 	.word	0x08010b71
 8010af4:	08010b71 	.word	0x08010b71
 8010af8:	08010b71 	.word	0x08010b71
 8010afc:	08010b59 	.word	0x08010b59
 8010b00:	08010b71 	.word	0x08010b71
 8010b04:	08010b71 	.word	0x08010b71
 8010b08:	08010b71 	.word	0x08010b71
 8010b0c:	08010b71 	.word	0x08010b71
 8010b10:	08010b71 	.word	0x08010b71
 8010b14:	08010b71 	.word	0x08010b71
 8010b18:	08010b71 	.word	0x08010b71
 8010b1c:	08010b61 	.word	0x08010b61
 8010b20:	08010b71 	.word	0x08010b71
 8010b24:	08010b71 	.word	0x08010b71
 8010b28:	08010b71 	.word	0x08010b71
 8010b2c:	08010b71 	.word	0x08010b71
 8010b30:	08010b71 	.word	0x08010b71
 8010b34:	08010b71 	.word	0x08010b71
 8010b38:	08010b71 	.word	0x08010b71
 8010b3c:	08010b69 	.word	0x08010b69
 8010b40:	2301      	movs	r3, #1
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b46:	e326      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b48:	2304      	movs	r3, #4
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4e:	e322      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b50:	2308      	movs	r3, #8
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b56:	e31e      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b58:	2310      	movs	r3, #16
 8010b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5e:	e31a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b60:	2320      	movs	r3, #32
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b66:	e316      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b68:	2340      	movs	r3, #64	; 0x40
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6e:	e312      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b70:	2380      	movs	r3, #128	; 0x80
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b76:	e30e      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a69      	ldr	r2, [pc, #420]	; (8010d24 <UART_SetConfig+0x33c>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d130      	bne.n	8010be4 <UART_SetConfig+0x1fc>
 8010b82:	4b67      	ldr	r3, [pc, #412]	; (8010d20 <UART_SetConfig+0x338>)
 8010b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b86:	f003 0307 	and.w	r3, r3, #7
 8010b8a:	2b05      	cmp	r3, #5
 8010b8c:	d826      	bhi.n	8010bdc <UART_SetConfig+0x1f4>
 8010b8e:	a201      	add	r2, pc, #4	; (adr r2, 8010b94 <UART_SetConfig+0x1ac>)
 8010b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b94:	08010bad 	.word	0x08010bad
 8010b98:	08010bb5 	.word	0x08010bb5
 8010b9c:	08010bbd 	.word	0x08010bbd
 8010ba0:	08010bc5 	.word	0x08010bc5
 8010ba4:	08010bcd 	.word	0x08010bcd
 8010ba8:	08010bd5 	.word	0x08010bd5
 8010bac:	2300      	movs	r3, #0
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb2:	e2f0      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bb4:	2304      	movs	r3, #4
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bba:	e2ec      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bbc:	2308      	movs	r3, #8
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc2:	e2e8      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bc4:	2310      	movs	r3, #16
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bca:	e2e4      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bcc:	2320      	movs	r3, #32
 8010bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd2:	e2e0      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bd4:	2340      	movs	r3, #64	; 0x40
 8010bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bda:	e2dc      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010bdc:	2380      	movs	r3, #128	; 0x80
 8010bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be2:	e2d8      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a4f      	ldr	r2, [pc, #316]	; (8010d28 <UART_SetConfig+0x340>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d130      	bne.n	8010c50 <UART_SetConfig+0x268>
 8010bee:	4b4c      	ldr	r3, [pc, #304]	; (8010d20 <UART_SetConfig+0x338>)
 8010bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf2:	f003 0307 	and.w	r3, r3, #7
 8010bf6:	2b05      	cmp	r3, #5
 8010bf8:	d826      	bhi.n	8010c48 <UART_SetConfig+0x260>
 8010bfa:	a201      	add	r2, pc, #4	; (adr r2, 8010c00 <UART_SetConfig+0x218>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c19 	.word	0x08010c19
 8010c04:	08010c21 	.word	0x08010c21
 8010c08:	08010c29 	.word	0x08010c29
 8010c0c:	08010c31 	.word	0x08010c31
 8010c10:	08010c39 	.word	0x08010c39
 8010c14:	08010c41 	.word	0x08010c41
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1e:	e2ba      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c20:	2304      	movs	r3, #4
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c26:	e2b6      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c28:	2308      	movs	r3, #8
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2e:	e2b2      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c30:	2310      	movs	r3, #16
 8010c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c36:	e2ae      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c38:	2320      	movs	r3, #32
 8010c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3e:	e2aa      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c40:	2340      	movs	r3, #64	; 0x40
 8010c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c46:	e2a6      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c48:	2380      	movs	r3, #128	; 0x80
 8010c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4e:	e2a2      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a35      	ldr	r2, [pc, #212]	; (8010d2c <UART_SetConfig+0x344>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d130      	bne.n	8010cbc <UART_SetConfig+0x2d4>
 8010c5a:	4b31      	ldr	r3, [pc, #196]	; (8010d20 <UART_SetConfig+0x338>)
 8010c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c5e:	f003 0307 	and.w	r3, r3, #7
 8010c62:	2b05      	cmp	r3, #5
 8010c64:	d826      	bhi.n	8010cb4 <UART_SetConfig+0x2cc>
 8010c66:	a201      	add	r2, pc, #4	; (adr r2, 8010c6c <UART_SetConfig+0x284>)
 8010c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6c:	08010c85 	.word	0x08010c85
 8010c70:	08010c8d 	.word	0x08010c8d
 8010c74:	08010c95 	.word	0x08010c95
 8010c78:	08010c9d 	.word	0x08010c9d
 8010c7c:	08010ca5 	.word	0x08010ca5
 8010c80:	08010cad 	.word	0x08010cad
 8010c84:	2300      	movs	r3, #0
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e284      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c8c:	2304      	movs	r3, #4
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e280      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c94:	2308      	movs	r3, #8
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e27c      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010c9c:	2310      	movs	r3, #16
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e278      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ca4:	2320      	movs	r3, #32
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e274      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010cac:	2340      	movs	r3, #64	; 0x40
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e270      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010cb4:	2380      	movs	r3, #128	; 0x80
 8010cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cba:	e26c      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a1b      	ldr	r2, [pc, #108]	; (8010d30 <UART_SetConfig+0x348>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d142      	bne.n	8010d4c <UART_SetConfig+0x364>
 8010cc6:	4b16      	ldr	r3, [pc, #88]	; (8010d20 <UART_SetConfig+0x338>)
 8010cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cca:	f003 0307 	and.w	r3, r3, #7
 8010cce:	2b05      	cmp	r3, #5
 8010cd0:	d838      	bhi.n	8010d44 <UART_SetConfig+0x35c>
 8010cd2:	a201      	add	r2, pc, #4	; (adr r2, 8010cd8 <UART_SetConfig+0x2f0>)
 8010cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd8:	08010cf1 	.word	0x08010cf1
 8010cdc:	08010cf9 	.word	0x08010cf9
 8010ce0:	08010d01 	.word	0x08010d01
 8010ce4:	08010d09 	.word	0x08010d09
 8010ce8:	08010d35 	.word	0x08010d35
 8010cec:	08010d3d 	.word	0x08010d3d
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf6:	e24e      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010cf8:	2304      	movs	r3, #4
 8010cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfe:	e24a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d00:	2308      	movs	r3, #8
 8010d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d06:	e246      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d08:	2310      	movs	r3, #16
 8010d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0e:	e242      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d10:	cfff69f3 	.word	0xcfff69f3
 8010d14:	58000c00 	.word	0x58000c00
 8010d18:	11fff4ff 	.word	0x11fff4ff
 8010d1c:	40011000 	.word	0x40011000
 8010d20:	58024400 	.word	0x58024400
 8010d24:	40004400 	.word	0x40004400
 8010d28:	40004800 	.word	0x40004800
 8010d2c:	40004c00 	.word	0x40004c00
 8010d30:	40005000 	.word	0x40005000
 8010d34:	2320      	movs	r3, #32
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e22c      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d3c:	2340      	movs	r3, #64	; 0x40
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e228      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d44:	2380      	movs	r3, #128	; 0x80
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e224      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4ab1      	ldr	r2, [pc, #708]	; (8011018 <UART_SetConfig+0x630>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d176      	bne.n	8010e44 <UART_SetConfig+0x45c>
 8010d56:	4bb1      	ldr	r3, [pc, #708]	; (801101c <UART_SetConfig+0x634>)
 8010d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010d5e:	2b28      	cmp	r3, #40	; 0x28
 8010d60:	d86c      	bhi.n	8010e3c <UART_SetConfig+0x454>
 8010d62:	a201      	add	r2, pc, #4	; (adr r2, 8010d68 <UART_SetConfig+0x380>)
 8010d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d68:	08010e0d 	.word	0x08010e0d
 8010d6c:	08010e3d 	.word	0x08010e3d
 8010d70:	08010e3d 	.word	0x08010e3d
 8010d74:	08010e3d 	.word	0x08010e3d
 8010d78:	08010e3d 	.word	0x08010e3d
 8010d7c:	08010e3d 	.word	0x08010e3d
 8010d80:	08010e3d 	.word	0x08010e3d
 8010d84:	08010e3d 	.word	0x08010e3d
 8010d88:	08010e15 	.word	0x08010e15
 8010d8c:	08010e3d 	.word	0x08010e3d
 8010d90:	08010e3d 	.word	0x08010e3d
 8010d94:	08010e3d 	.word	0x08010e3d
 8010d98:	08010e3d 	.word	0x08010e3d
 8010d9c:	08010e3d 	.word	0x08010e3d
 8010da0:	08010e3d 	.word	0x08010e3d
 8010da4:	08010e3d 	.word	0x08010e3d
 8010da8:	08010e1d 	.word	0x08010e1d
 8010dac:	08010e3d 	.word	0x08010e3d
 8010db0:	08010e3d 	.word	0x08010e3d
 8010db4:	08010e3d 	.word	0x08010e3d
 8010db8:	08010e3d 	.word	0x08010e3d
 8010dbc:	08010e3d 	.word	0x08010e3d
 8010dc0:	08010e3d 	.word	0x08010e3d
 8010dc4:	08010e3d 	.word	0x08010e3d
 8010dc8:	08010e25 	.word	0x08010e25
 8010dcc:	08010e3d 	.word	0x08010e3d
 8010dd0:	08010e3d 	.word	0x08010e3d
 8010dd4:	08010e3d 	.word	0x08010e3d
 8010dd8:	08010e3d 	.word	0x08010e3d
 8010ddc:	08010e3d 	.word	0x08010e3d
 8010de0:	08010e3d 	.word	0x08010e3d
 8010de4:	08010e3d 	.word	0x08010e3d
 8010de8:	08010e2d 	.word	0x08010e2d
 8010dec:	08010e3d 	.word	0x08010e3d
 8010df0:	08010e3d 	.word	0x08010e3d
 8010df4:	08010e3d 	.word	0x08010e3d
 8010df8:	08010e3d 	.word	0x08010e3d
 8010dfc:	08010e3d 	.word	0x08010e3d
 8010e00:	08010e3d 	.word	0x08010e3d
 8010e04:	08010e3d 	.word	0x08010e3d
 8010e08:	08010e35 	.word	0x08010e35
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e1c0      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e14:	2304      	movs	r3, #4
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e1bc      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e1c:	2308      	movs	r3, #8
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e1b8      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e24:	2310      	movs	r3, #16
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2a:	e1b4      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e2c:	2320      	movs	r3, #32
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e32:	e1b0      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e34:	2340      	movs	r3, #64	; 0x40
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3a:	e1ac      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e3c:	2380      	movs	r3, #128	; 0x80
 8010e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e42:	e1a8      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a75      	ldr	r2, [pc, #468]	; (8011020 <UART_SetConfig+0x638>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d130      	bne.n	8010eb0 <UART_SetConfig+0x4c8>
 8010e4e:	4b73      	ldr	r3, [pc, #460]	; (801101c <UART_SetConfig+0x634>)
 8010e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e52:	f003 0307 	and.w	r3, r3, #7
 8010e56:	2b05      	cmp	r3, #5
 8010e58:	d826      	bhi.n	8010ea8 <UART_SetConfig+0x4c0>
 8010e5a:	a201      	add	r2, pc, #4	; (adr r2, 8010e60 <UART_SetConfig+0x478>)
 8010e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e60:	08010e79 	.word	0x08010e79
 8010e64:	08010e81 	.word	0x08010e81
 8010e68:	08010e89 	.word	0x08010e89
 8010e6c:	08010e91 	.word	0x08010e91
 8010e70:	08010e99 	.word	0x08010e99
 8010e74:	08010ea1 	.word	0x08010ea1
 8010e78:	2300      	movs	r3, #0
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e18a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e80:	2304      	movs	r3, #4
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e186      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e88:	2308      	movs	r3, #8
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e182      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e90:	2310      	movs	r3, #16
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e17e      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010e98:	2320      	movs	r3, #32
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e17a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ea0:	2340      	movs	r3, #64	; 0x40
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e176      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ea8:	2380      	movs	r3, #128	; 0x80
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e172      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a5b      	ldr	r2, [pc, #364]	; (8011024 <UART_SetConfig+0x63c>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d130      	bne.n	8010f1c <UART_SetConfig+0x534>
 8010eba:	4b58      	ldr	r3, [pc, #352]	; (801101c <UART_SetConfig+0x634>)
 8010ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	2b05      	cmp	r3, #5
 8010ec4:	d826      	bhi.n	8010f14 <UART_SetConfig+0x52c>
 8010ec6:	a201      	add	r2, pc, #4	; (adr r2, 8010ecc <UART_SetConfig+0x4e4>)
 8010ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ecc:	08010ee5 	.word	0x08010ee5
 8010ed0:	08010eed 	.word	0x08010eed
 8010ed4:	08010ef5 	.word	0x08010ef5
 8010ed8:	08010efd 	.word	0x08010efd
 8010edc:	08010f05 	.word	0x08010f05
 8010ee0:	08010f0d 	.word	0x08010f0d
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e154      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010eec:	2304      	movs	r3, #4
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e150      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ef4:	2308      	movs	r3, #8
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e14c      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010efc:	2310      	movs	r3, #16
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e148      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010f04:	2320      	movs	r3, #32
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e144      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010f0c:	2340      	movs	r3, #64	; 0x40
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e140      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010f14:	2380      	movs	r3, #128	; 0x80
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e13c      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a41      	ldr	r2, [pc, #260]	; (8011028 <UART_SetConfig+0x640>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	f040 8082 	bne.w	801102c <UART_SetConfig+0x644>
 8010f28:	4b3c      	ldr	r3, [pc, #240]	; (801101c <UART_SetConfig+0x634>)
 8010f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f30:	2b28      	cmp	r3, #40	; 0x28
 8010f32:	d86d      	bhi.n	8011010 <UART_SetConfig+0x628>
 8010f34:	a201      	add	r2, pc, #4	; (adr r2, 8010f3c <UART_SetConfig+0x554>)
 8010f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f3a:	bf00      	nop
 8010f3c:	08010fe1 	.word	0x08010fe1
 8010f40:	08011011 	.word	0x08011011
 8010f44:	08011011 	.word	0x08011011
 8010f48:	08011011 	.word	0x08011011
 8010f4c:	08011011 	.word	0x08011011
 8010f50:	08011011 	.word	0x08011011
 8010f54:	08011011 	.word	0x08011011
 8010f58:	08011011 	.word	0x08011011
 8010f5c:	08010fe9 	.word	0x08010fe9
 8010f60:	08011011 	.word	0x08011011
 8010f64:	08011011 	.word	0x08011011
 8010f68:	08011011 	.word	0x08011011
 8010f6c:	08011011 	.word	0x08011011
 8010f70:	08011011 	.word	0x08011011
 8010f74:	08011011 	.word	0x08011011
 8010f78:	08011011 	.word	0x08011011
 8010f7c:	08010ff1 	.word	0x08010ff1
 8010f80:	08011011 	.word	0x08011011
 8010f84:	08011011 	.word	0x08011011
 8010f88:	08011011 	.word	0x08011011
 8010f8c:	08011011 	.word	0x08011011
 8010f90:	08011011 	.word	0x08011011
 8010f94:	08011011 	.word	0x08011011
 8010f98:	08011011 	.word	0x08011011
 8010f9c:	08010ff9 	.word	0x08010ff9
 8010fa0:	08011011 	.word	0x08011011
 8010fa4:	08011011 	.word	0x08011011
 8010fa8:	08011011 	.word	0x08011011
 8010fac:	08011011 	.word	0x08011011
 8010fb0:	08011011 	.word	0x08011011
 8010fb4:	08011011 	.word	0x08011011
 8010fb8:	08011011 	.word	0x08011011
 8010fbc:	08011001 	.word	0x08011001
 8010fc0:	08011011 	.word	0x08011011
 8010fc4:	08011011 	.word	0x08011011
 8010fc8:	08011011 	.word	0x08011011
 8010fcc:	08011011 	.word	0x08011011
 8010fd0:	08011011 	.word	0x08011011
 8010fd4:	08011011 	.word	0x08011011
 8010fd8:	08011011 	.word	0x08011011
 8010fdc:	08011009 	.word	0x08011009
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e0d6      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010fe8:	2304      	movs	r3, #4
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e0d2      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ff0:	2308      	movs	r3, #8
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e0ce      	b.n	8011196 <UART_SetConfig+0x7ae>
 8010ff8:	2310      	movs	r3, #16
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e0ca      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011000:	2320      	movs	r3, #32
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e0c6      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011008:	2340      	movs	r3, #64	; 0x40
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e0c2      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011010:	2380      	movs	r3, #128	; 0x80
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011016:	e0be      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011018:	40011400 	.word	0x40011400
 801101c:	58024400 	.word	0x58024400
 8011020:	40007800 	.word	0x40007800
 8011024:	40007c00 	.word	0x40007c00
 8011028:	40011800 	.word	0x40011800
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4aad      	ldr	r2, [pc, #692]	; (80112e8 <UART_SetConfig+0x900>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d176      	bne.n	8011124 <UART_SetConfig+0x73c>
 8011036:	4bad      	ldr	r3, [pc, #692]	; (80112ec <UART_SetConfig+0x904>)
 8011038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801103a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801103e:	2b28      	cmp	r3, #40	; 0x28
 8011040:	d86c      	bhi.n	801111c <UART_SetConfig+0x734>
 8011042:	a201      	add	r2, pc, #4	; (adr r2, 8011048 <UART_SetConfig+0x660>)
 8011044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011048:	080110ed 	.word	0x080110ed
 801104c:	0801111d 	.word	0x0801111d
 8011050:	0801111d 	.word	0x0801111d
 8011054:	0801111d 	.word	0x0801111d
 8011058:	0801111d 	.word	0x0801111d
 801105c:	0801111d 	.word	0x0801111d
 8011060:	0801111d 	.word	0x0801111d
 8011064:	0801111d 	.word	0x0801111d
 8011068:	080110f5 	.word	0x080110f5
 801106c:	0801111d 	.word	0x0801111d
 8011070:	0801111d 	.word	0x0801111d
 8011074:	0801111d 	.word	0x0801111d
 8011078:	0801111d 	.word	0x0801111d
 801107c:	0801111d 	.word	0x0801111d
 8011080:	0801111d 	.word	0x0801111d
 8011084:	0801111d 	.word	0x0801111d
 8011088:	080110fd 	.word	0x080110fd
 801108c:	0801111d 	.word	0x0801111d
 8011090:	0801111d 	.word	0x0801111d
 8011094:	0801111d 	.word	0x0801111d
 8011098:	0801111d 	.word	0x0801111d
 801109c:	0801111d 	.word	0x0801111d
 80110a0:	0801111d 	.word	0x0801111d
 80110a4:	0801111d 	.word	0x0801111d
 80110a8:	08011105 	.word	0x08011105
 80110ac:	0801111d 	.word	0x0801111d
 80110b0:	0801111d 	.word	0x0801111d
 80110b4:	0801111d 	.word	0x0801111d
 80110b8:	0801111d 	.word	0x0801111d
 80110bc:	0801111d 	.word	0x0801111d
 80110c0:	0801111d 	.word	0x0801111d
 80110c4:	0801111d 	.word	0x0801111d
 80110c8:	0801110d 	.word	0x0801110d
 80110cc:	0801111d 	.word	0x0801111d
 80110d0:	0801111d 	.word	0x0801111d
 80110d4:	0801111d 	.word	0x0801111d
 80110d8:	0801111d 	.word	0x0801111d
 80110dc:	0801111d 	.word	0x0801111d
 80110e0:	0801111d 	.word	0x0801111d
 80110e4:	0801111d 	.word	0x0801111d
 80110e8:	08011115 	.word	0x08011115
 80110ec:	2301      	movs	r3, #1
 80110ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f2:	e050      	b.n	8011196 <UART_SetConfig+0x7ae>
 80110f4:	2304      	movs	r3, #4
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e04c      	b.n	8011196 <UART_SetConfig+0x7ae>
 80110fc:	2308      	movs	r3, #8
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e048      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011104:	2310      	movs	r3, #16
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e044      	b.n	8011196 <UART_SetConfig+0x7ae>
 801110c:	2320      	movs	r3, #32
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e040      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011114:	2340      	movs	r3, #64	; 0x40
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e03c      	b.n	8011196 <UART_SetConfig+0x7ae>
 801111c:	2380      	movs	r3, #128	; 0x80
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e038      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a71      	ldr	r2, [pc, #452]	; (80112f0 <UART_SetConfig+0x908>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d130      	bne.n	8011190 <UART_SetConfig+0x7a8>
 801112e:	4b6f      	ldr	r3, [pc, #444]	; (80112ec <UART_SetConfig+0x904>)
 8011130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011132:	f003 0307 	and.w	r3, r3, #7
 8011136:	2b05      	cmp	r3, #5
 8011138:	d826      	bhi.n	8011188 <UART_SetConfig+0x7a0>
 801113a:	a201      	add	r2, pc, #4	; (adr r2, 8011140 <UART_SetConfig+0x758>)
 801113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011140:	08011159 	.word	0x08011159
 8011144:	08011161 	.word	0x08011161
 8011148:	08011169 	.word	0x08011169
 801114c:	08011171 	.word	0x08011171
 8011150:	08011179 	.word	0x08011179
 8011154:	08011181 	.word	0x08011181
 8011158:	2302      	movs	r3, #2
 801115a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801115e:	e01a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011160:	2304      	movs	r3, #4
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e016      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011168:	2308      	movs	r3, #8
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e012      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011170:	2310      	movs	r3, #16
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e00e      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011178:	2320      	movs	r3, #32
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e00a      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011180:	2340      	movs	r3, #64	; 0x40
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e006      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011188:	2380      	movs	r3, #128	; 0x80
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e002      	b.n	8011196 <UART_SetConfig+0x7ae>
 8011190:	2380      	movs	r3, #128	; 0x80
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a55      	ldr	r2, [pc, #340]	; (80112f0 <UART_SetConfig+0x908>)
 801119c:	4293      	cmp	r3, r2
 801119e:	f040 80f8 	bne.w	8011392 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80111a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111a6:	2b20      	cmp	r3, #32
 80111a8:	dc46      	bgt.n	8011238 <UART_SetConfig+0x850>
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	db75      	blt.n	801129a <UART_SetConfig+0x8b2>
 80111ae:	3b02      	subs	r3, #2
 80111b0:	2b1e      	cmp	r3, #30
 80111b2:	d872      	bhi.n	801129a <UART_SetConfig+0x8b2>
 80111b4:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <UART_SetConfig+0x7d4>)
 80111b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ba:	bf00      	nop
 80111bc:	0801123f 	.word	0x0801123f
 80111c0:	0801129b 	.word	0x0801129b
 80111c4:	08011247 	.word	0x08011247
 80111c8:	0801129b 	.word	0x0801129b
 80111cc:	0801129b 	.word	0x0801129b
 80111d0:	0801129b 	.word	0x0801129b
 80111d4:	08011257 	.word	0x08011257
 80111d8:	0801129b 	.word	0x0801129b
 80111dc:	0801129b 	.word	0x0801129b
 80111e0:	0801129b 	.word	0x0801129b
 80111e4:	0801129b 	.word	0x0801129b
 80111e8:	0801129b 	.word	0x0801129b
 80111ec:	0801129b 	.word	0x0801129b
 80111f0:	0801129b 	.word	0x0801129b
 80111f4:	08011267 	.word	0x08011267
 80111f8:	0801129b 	.word	0x0801129b
 80111fc:	0801129b 	.word	0x0801129b
 8011200:	0801129b 	.word	0x0801129b
 8011204:	0801129b 	.word	0x0801129b
 8011208:	0801129b 	.word	0x0801129b
 801120c:	0801129b 	.word	0x0801129b
 8011210:	0801129b 	.word	0x0801129b
 8011214:	0801129b 	.word	0x0801129b
 8011218:	0801129b 	.word	0x0801129b
 801121c:	0801129b 	.word	0x0801129b
 8011220:	0801129b 	.word	0x0801129b
 8011224:	0801129b 	.word	0x0801129b
 8011228:	0801129b 	.word	0x0801129b
 801122c:	0801129b 	.word	0x0801129b
 8011230:	0801129b 	.word	0x0801129b
 8011234:	0801128d 	.word	0x0801128d
 8011238:	2b40      	cmp	r3, #64	; 0x40
 801123a:	d02a      	beq.n	8011292 <UART_SetConfig+0x8aa>
 801123c:	e02d      	b.n	801129a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801123e:	f7fb f8c3 	bl	800c3c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8011242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011244:	e02f      	b.n	80112a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801124a:	4618      	mov	r0, r3
 801124c:	f7fb f8d2 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011254:	e027      	b.n	80112a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011256:	f107 0318 	add.w	r3, r7, #24
 801125a:	4618      	mov	r0, r3
 801125c:	f7fb fa1e 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011264:	e01f      	b.n	80112a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011266:	4b21      	ldr	r3, [pc, #132]	; (80112ec <UART_SetConfig+0x904>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f003 0320 	and.w	r3, r3, #32
 801126e:	2b00      	cmp	r3, #0
 8011270:	d009      	beq.n	8011286 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011272:	4b1e      	ldr	r3, [pc, #120]	; (80112ec <UART_SetConfig+0x904>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	08db      	lsrs	r3, r3, #3
 8011278:	f003 0303 	and.w	r3, r3, #3
 801127c:	4a1d      	ldr	r2, [pc, #116]	; (80112f4 <UART_SetConfig+0x90c>)
 801127e:	fa22 f303 	lsr.w	r3, r2, r3
 8011282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011284:	e00f      	b.n	80112a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011286:	4b1b      	ldr	r3, [pc, #108]	; (80112f4 <UART_SetConfig+0x90c>)
 8011288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801128a:	e00c      	b.n	80112a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801128c:	4b1a      	ldr	r3, [pc, #104]	; (80112f8 <UART_SetConfig+0x910>)
 801128e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011290:	e009      	b.n	80112a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011298:	e005      	b.n	80112a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801129a:	2300      	movs	r3, #0
 801129c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801129e:	2301      	movs	r3, #1
 80112a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 81ee 	beq.w	801168a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b2:	4a12      	ldr	r2, [pc, #72]	; (80112fc <UART_SetConfig+0x914>)
 80112b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112b8:	461a      	mov	r2, r3
 80112ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80112c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	4613      	mov	r3, r2
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	4413      	add	r3, r2
 80112cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d305      	bcc.n	80112de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112da:	429a      	cmp	r2, r3
 80112dc:	d910      	bls.n	8011300 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80112e4:	e1d1      	b.n	801168a <UART_SetConfig+0xca2>
 80112e6:	bf00      	nop
 80112e8:	40011c00 	.word	0x40011c00
 80112ec:	58024400 	.word	0x58024400
 80112f0:	58000c00 	.word	0x58000c00
 80112f4:	03d09000 	.word	0x03d09000
 80112f8:	003d0900 	.word	0x003d0900
 80112fc:	0801b5bc 	.word	0x0801b5bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011302:	2200      	movs	r2, #0
 8011304:	60bb      	str	r3, [r7, #8]
 8011306:	60fa      	str	r2, [r7, #12]
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801130c:	4ac0      	ldr	r2, [pc, #768]	; (8011610 <UART_SetConfig+0xc28>)
 801130e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011312:	b29b      	uxth	r3, r3
 8011314:	2200      	movs	r2, #0
 8011316:	603b      	str	r3, [r7, #0]
 8011318:	607a      	str	r2, [r7, #4]
 801131a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801131e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011322:	f7ef fa09 	bl	8000738 <__aeabi_uldivmod>
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4610      	mov	r0, r2
 801132c:	4619      	mov	r1, r3
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	f04f 0300 	mov.w	r3, #0
 8011336:	020b      	lsls	r3, r1, #8
 8011338:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801133c:	0202      	lsls	r2, r0, #8
 801133e:	6979      	ldr	r1, [r7, #20]
 8011340:	6849      	ldr	r1, [r1, #4]
 8011342:	0849      	lsrs	r1, r1, #1
 8011344:	2000      	movs	r0, #0
 8011346:	460c      	mov	r4, r1
 8011348:	4605      	mov	r5, r0
 801134a:	eb12 0804 	adds.w	r8, r2, r4
 801134e:	eb43 0905 	adc.w	r9, r3, r5
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	469a      	mov	sl, r3
 801135a:	4693      	mov	fp, r2
 801135c:	4652      	mov	r2, sl
 801135e:	465b      	mov	r3, fp
 8011360:	4640      	mov	r0, r8
 8011362:	4649      	mov	r1, r9
 8011364:	f7ef f9e8 	bl	8000738 <__aeabi_uldivmod>
 8011368:	4602      	mov	r2, r0
 801136a:	460b      	mov	r3, r1
 801136c:	4613      	mov	r3, r2
 801136e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011376:	d308      	bcc.n	801138a <UART_SetConfig+0x9a2>
 8011378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801137e:	d204      	bcs.n	801138a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011386:	60da      	str	r2, [r3, #12]
 8011388:	e17f      	b.n	801168a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801138a:	2301      	movs	r3, #1
 801138c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011390:	e17b      	b.n	801168a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	69db      	ldr	r3, [r3, #28]
 8011396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801139a:	f040 80bd 	bne.w	8011518 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801139e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113a2:	2b20      	cmp	r3, #32
 80113a4:	dc48      	bgt.n	8011438 <UART_SetConfig+0xa50>
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	db7b      	blt.n	80114a2 <UART_SetConfig+0xaba>
 80113aa:	2b20      	cmp	r3, #32
 80113ac:	d879      	bhi.n	80114a2 <UART_SetConfig+0xaba>
 80113ae:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <UART_SetConfig+0x9cc>)
 80113b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b4:	0801143f 	.word	0x0801143f
 80113b8:	08011447 	.word	0x08011447
 80113bc:	080114a3 	.word	0x080114a3
 80113c0:	080114a3 	.word	0x080114a3
 80113c4:	0801144f 	.word	0x0801144f
 80113c8:	080114a3 	.word	0x080114a3
 80113cc:	080114a3 	.word	0x080114a3
 80113d0:	080114a3 	.word	0x080114a3
 80113d4:	0801145f 	.word	0x0801145f
 80113d8:	080114a3 	.word	0x080114a3
 80113dc:	080114a3 	.word	0x080114a3
 80113e0:	080114a3 	.word	0x080114a3
 80113e4:	080114a3 	.word	0x080114a3
 80113e8:	080114a3 	.word	0x080114a3
 80113ec:	080114a3 	.word	0x080114a3
 80113f0:	080114a3 	.word	0x080114a3
 80113f4:	0801146f 	.word	0x0801146f
 80113f8:	080114a3 	.word	0x080114a3
 80113fc:	080114a3 	.word	0x080114a3
 8011400:	080114a3 	.word	0x080114a3
 8011404:	080114a3 	.word	0x080114a3
 8011408:	080114a3 	.word	0x080114a3
 801140c:	080114a3 	.word	0x080114a3
 8011410:	080114a3 	.word	0x080114a3
 8011414:	080114a3 	.word	0x080114a3
 8011418:	080114a3 	.word	0x080114a3
 801141c:	080114a3 	.word	0x080114a3
 8011420:	080114a3 	.word	0x080114a3
 8011424:	080114a3 	.word	0x080114a3
 8011428:	080114a3 	.word	0x080114a3
 801142c:	080114a3 	.word	0x080114a3
 8011430:	080114a3 	.word	0x080114a3
 8011434:	08011495 	.word	0x08011495
 8011438:	2b40      	cmp	r3, #64	; 0x40
 801143a:	d02e      	beq.n	801149a <UART_SetConfig+0xab2>
 801143c:	e031      	b.n	80114a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801143e:	f7f9 f925 	bl	800a68c <HAL_RCC_GetPCLK1Freq>
 8011442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011444:	e033      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011446:	f7f9 f937 	bl	800a6b8 <HAL_RCC_GetPCLK2Freq>
 801144a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801144c:	e02f      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011452:	4618      	mov	r0, r3
 8011454:	f7fa ffce 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801145c:	e027      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801145e:	f107 0318 	add.w	r3, r7, #24
 8011462:	4618      	mov	r0, r3
 8011464:	f7fb f91a 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801146c:	e01f      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801146e:	4b69      	ldr	r3, [pc, #420]	; (8011614 <UART_SetConfig+0xc2c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f003 0320 	and.w	r3, r3, #32
 8011476:	2b00      	cmp	r3, #0
 8011478:	d009      	beq.n	801148e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801147a:	4b66      	ldr	r3, [pc, #408]	; (8011614 <UART_SetConfig+0xc2c>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	08db      	lsrs	r3, r3, #3
 8011480:	f003 0303 	and.w	r3, r3, #3
 8011484:	4a64      	ldr	r2, [pc, #400]	; (8011618 <UART_SetConfig+0xc30>)
 8011486:	fa22 f303 	lsr.w	r3, r2, r3
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801148c:	e00f      	b.n	80114ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801148e:	4b62      	ldr	r3, [pc, #392]	; (8011618 <UART_SetConfig+0xc30>)
 8011490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011492:	e00c      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011494:	4b61      	ldr	r3, [pc, #388]	; (801161c <UART_SetConfig+0xc34>)
 8011496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011498:	e009      	b.n	80114ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801149a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a0:	e005      	b.n	80114ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80114a2:	2300      	movs	r3, #0
 80114a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114a6:	2301      	movs	r3, #1
 80114a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80114ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 80ea 	beq.w	801168a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ba:	4a55      	ldr	r2, [pc, #340]	; (8011610 <UART_SetConfig+0xc28>)
 80114bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114c0:	461a      	mov	r2, r3
 80114c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80114c8:	005a      	lsls	r2, r3, #1
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	085b      	lsrs	r3, r3, #1
 80114d0:	441a      	add	r2, r3
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80114da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	2b0f      	cmp	r3, #15
 80114e0:	d916      	bls.n	8011510 <UART_SetConfig+0xb28>
 80114e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114e8:	d212      	bcs.n	8011510 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	f023 030f 	bic.w	r3, r3, #15
 80114f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80114f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f6:	085b      	lsrs	r3, r3, #1
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	f003 0307 	and.w	r3, r3, #7
 80114fe:	b29a      	uxth	r2, r3
 8011500:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011502:	4313      	orrs	r3, r2
 8011504:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801150c:	60da      	str	r2, [r3, #12]
 801150e:	e0bc      	b.n	801168a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011516:	e0b8      	b.n	801168a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011518:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801151c:	2b20      	cmp	r3, #32
 801151e:	dc4b      	bgt.n	80115b8 <UART_SetConfig+0xbd0>
 8011520:	2b00      	cmp	r3, #0
 8011522:	f2c0 8087 	blt.w	8011634 <UART_SetConfig+0xc4c>
 8011526:	2b20      	cmp	r3, #32
 8011528:	f200 8084 	bhi.w	8011634 <UART_SetConfig+0xc4c>
 801152c:	a201      	add	r2, pc, #4	; (adr r2, 8011534 <UART_SetConfig+0xb4c>)
 801152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011532:	bf00      	nop
 8011534:	080115bf 	.word	0x080115bf
 8011538:	080115c7 	.word	0x080115c7
 801153c:	08011635 	.word	0x08011635
 8011540:	08011635 	.word	0x08011635
 8011544:	080115cf 	.word	0x080115cf
 8011548:	08011635 	.word	0x08011635
 801154c:	08011635 	.word	0x08011635
 8011550:	08011635 	.word	0x08011635
 8011554:	080115df 	.word	0x080115df
 8011558:	08011635 	.word	0x08011635
 801155c:	08011635 	.word	0x08011635
 8011560:	08011635 	.word	0x08011635
 8011564:	08011635 	.word	0x08011635
 8011568:	08011635 	.word	0x08011635
 801156c:	08011635 	.word	0x08011635
 8011570:	08011635 	.word	0x08011635
 8011574:	080115ef 	.word	0x080115ef
 8011578:	08011635 	.word	0x08011635
 801157c:	08011635 	.word	0x08011635
 8011580:	08011635 	.word	0x08011635
 8011584:	08011635 	.word	0x08011635
 8011588:	08011635 	.word	0x08011635
 801158c:	08011635 	.word	0x08011635
 8011590:	08011635 	.word	0x08011635
 8011594:	08011635 	.word	0x08011635
 8011598:	08011635 	.word	0x08011635
 801159c:	08011635 	.word	0x08011635
 80115a0:	08011635 	.word	0x08011635
 80115a4:	08011635 	.word	0x08011635
 80115a8:	08011635 	.word	0x08011635
 80115ac:	08011635 	.word	0x08011635
 80115b0:	08011635 	.word	0x08011635
 80115b4:	08011627 	.word	0x08011627
 80115b8:	2b40      	cmp	r3, #64	; 0x40
 80115ba:	d037      	beq.n	801162c <UART_SetConfig+0xc44>
 80115bc:	e03a      	b.n	8011634 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115be:	f7f9 f865 	bl	800a68c <HAL_RCC_GetPCLK1Freq>
 80115c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115c4:	e03c      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115c6:	f7f9 f877 	bl	800a6b8 <HAL_RCC_GetPCLK2Freq>
 80115ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115cc:	e038      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fa ff0e 	bl	800c3f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115dc:	e030      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115de:	f107 0318 	add.w	r3, r7, #24
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fb f85a 	bl	800c69c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115ec:	e028      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115ee:	4b09      	ldr	r3, [pc, #36]	; (8011614 <UART_SetConfig+0xc2c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f003 0320 	and.w	r3, r3, #32
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d012      	beq.n	8011620 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115fa:	4b06      	ldr	r3, [pc, #24]	; (8011614 <UART_SetConfig+0xc2c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	08db      	lsrs	r3, r3, #3
 8011600:	f003 0303 	and.w	r3, r3, #3
 8011604:	4a04      	ldr	r2, [pc, #16]	; (8011618 <UART_SetConfig+0xc30>)
 8011606:	fa22 f303 	lsr.w	r3, r2, r3
 801160a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801160c:	e018      	b.n	8011640 <UART_SetConfig+0xc58>
 801160e:	bf00      	nop
 8011610:	0801b5bc 	.word	0x0801b5bc
 8011614:	58024400 	.word	0x58024400
 8011618:	03d09000 	.word	0x03d09000
 801161c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011620:	4b24      	ldr	r3, [pc, #144]	; (80116b4 <UART_SetConfig+0xccc>)
 8011622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011624:	e00c      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011626:	4b24      	ldr	r3, [pc, #144]	; (80116b8 <UART_SetConfig+0xcd0>)
 8011628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801162a:	e009      	b.n	8011640 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801162c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011632:	e005      	b.n	8011640 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011634:	2300      	movs	r3, #0
 8011636:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011638:	2301      	movs	r3, #1
 801163a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801163e:	bf00      	nop
    }

    if (pclk != 0U)
 8011640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011642:	2b00      	cmp	r3, #0
 8011644:	d021      	beq.n	801168a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801164a:	4a1c      	ldr	r2, [pc, #112]	; (80116bc <UART_SetConfig+0xcd4>)
 801164c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011650:	461a      	mov	r2, r3
 8011652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011654:	fbb3 f2f2 	udiv	r2, r3, r2
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	085b      	lsrs	r3, r3, #1
 801165e:	441a      	add	r2, r3
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	fbb2 f3f3 	udiv	r3, r2, r3
 8011668:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	2b0f      	cmp	r3, #15
 801166e:	d909      	bls.n	8011684 <UART_SetConfig+0xc9c>
 8011670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011676:	d205      	bcs.n	8011684 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	b29a      	uxth	r2, r3
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	60da      	str	r2, [r3, #12]
 8011682:	e002      	b.n	801168a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011684:	2301      	movs	r3, #1
 8011686:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	2201      	movs	r2, #1
 801168e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	2201      	movs	r2, #1
 8011696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	2200      	movs	r2, #0
 801169e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	2200      	movs	r2, #0
 80116a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80116a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3748      	adds	r7, #72	; 0x48
 80116ae:	46bd      	mov	sp, r7
 80116b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116b4:	03d09000 	.word	0x03d09000
 80116b8:	003d0900 	.word	0x003d0900
 80116bc:	0801b5bc 	.word	0x0801b5bc

080116c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00a      	beq.n	80116ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	430a      	orrs	r2, r1
 80116e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116ee:	f003 0302 	and.w	r3, r3, #2
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00a      	beq.n	801170c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	430a      	orrs	r2, r1
 801170a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00a      	beq.n	801172e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	430a      	orrs	r2, r1
 801172c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011732:	f003 0308 	and.w	r3, r3, #8
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00a      	beq.n	8011750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	430a      	orrs	r2, r1
 801174e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011754:	f003 0310 	and.w	r3, r3, #16
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011776:	f003 0320 	and.w	r3, r3, #32
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	430a      	orrs	r2, r1
 8011792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801179c:	2b00      	cmp	r3, #0
 801179e:	d01a      	beq.n	80117d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	430a      	orrs	r2, r1
 80117b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117be:	d10a      	bne.n	80117d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	430a      	orrs	r2, r1
 80117d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00a      	beq.n	80117f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	430a      	orrs	r2, r1
 80117f6:	605a      	str	r2, [r3, #4]
  }
}
 80117f8:	bf00      	nop
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b098      	sub	sp, #96	; 0x60
 8011808:	af02      	add	r7, sp, #8
 801180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011814:	f7f2 f894 	bl	8003940 <HAL_GetTick>
 8011818:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f003 0308 	and.w	r3, r3, #8
 8011824:	2b08      	cmp	r3, #8
 8011826:	d12f      	bne.n	8011888 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801182c:	9300      	str	r3, [sp, #0]
 801182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011830:	2200      	movs	r2, #0
 8011832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f88e 	bl	8011958 <UART_WaitOnFlagUntilTimeout>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d022      	beq.n	8011888 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	e853 3f00 	ldrex	r3, [r3]
 801184e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011856:	653b      	str	r3, [r7, #80]	; 0x50
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	461a      	mov	r2, r3
 801185e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011860:	647b      	str	r3, [r7, #68]	; 0x44
 8011862:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011868:	e841 2300 	strex	r3, r2, [r1]
 801186c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1e6      	bne.n	8011842 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2220      	movs	r2, #32
 8011878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2200      	movs	r2, #0
 8011880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011884:	2303      	movs	r3, #3
 8011886:	e063      	b.n	8011950 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	f003 0304 	and.w	r3, r3, #4
 8011892:	2b04      	cmp	r3, #4
 8011894:	d149      	bne.n	801192a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011896:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801189e:	2200      	movs	r2, #0
 80118a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f000 f857 	bl	8011958 <UART_WaitOnFlagUntilTimeout>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d03c      	beq.n	801192a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	e853 3f00 	ldrex	r3, [r3]
 80118bc:	623b      	str	r3, [r7, #32]
   return(result);
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80118c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	461a      	mov	r2, r3
 80118cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ce:	633b      	str	r3, [r7, #48]	; 0x30
 80118d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d6:	e841 2300 	strex	r3, r2, [r1]
 80118da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d1e6      	bne.n	80118b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	3308      	adds	r3, #8
 80118e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	f023 0301 	bic.w	r3, r3, #1
 80118f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3308      	adds	r3, #8
 8011900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011902:	61fa      	str	r2, [r7, #28]
 8011904:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011906:	69b9      	ldr	r1, [r7, #24]
 8011908:	69fa      	ldr	r2, [r7, #28]
 801190a:	e841 2300 	strex	r3, r2, [r1]
 801190e:	617b      	str	r3, [r7, #20]
   return(result);
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e5      	bne.n	80118e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2220      	movs	r2, #32
 801191a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011926:	2303      	movs	r3, #3
 8011928:	e012      	b.n	8011950 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2220      	movs	r2, #32
 801192e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2220      	movs	r2, #32
 8011936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2200      	movs	r2, #0
 801193e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2200      	movs	r2, #0
 8011944:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801194e:	2300      	movs	r3, #0
}
 8011950:	4618      	mov	r0, r3
 8011952:	3758      	adds	r7, #88	; 0x58
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	4613      	mov	r3, r2
 8011966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011968:	e049      	b.n	80119fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011970:	d045      	beq.n	80119fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011972:	f7f1 ffe5 	bl	8003940 <HAL_GetTick>
 8011976:	4602      	mov	r2, r0
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	1ad3      	subs	r3, r2, r3
 801197c:	69ba      	ldr	r2, [r7, #24]
 801197e:	429a      	cmp	r2, r3
 8011980:	d302      	bcc.n	8011988 <UART_WaitOnFlagUntilTimeout+0x30>
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011988:	2303      	movs	r3, #3
 801198a:	e048      	b.n	8011a1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f003 0304 	and.w	r3, r3, #4
 8011996:	2b00      	cmp	r3, #0
 8011998:	d031      	beq.n	80119fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	69db      	ldr	r3, [r3, #28]
 80119a0:	f003 0308 	and.w	r3, r3, #8
 80119a4:	2b08      	cmp	r3, #8
 80119a6:	d110      	bne.n	80119ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2208      	movs	r2, #8
 80119ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f000 f839 	bl	8011a28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2208      	movs	r2, #8
 80119ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2200      	movs	r2, #0
 80119c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	e029      	b.n	8011a1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	69db      	ldr	r3, [r3, #28]
 80119d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80119d8:	d111      	bne.n	80119fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f000 f81f 	bl	8011a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2220      	movs	r2, #32
 80119ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2200      	movs	r2, #0
 80119f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80119fa:	2303      	movs	r3, #3
 80119fc:	e00f      	b.n	8011a1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	69da      	ldr	r2, [r3, #28]
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	4013      	ands	r3, r2
 8011a08:	68ba      	ldr	r2, [r7, #8]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	bf0c      	ite	eq
 8011a0e:	2301      	moveq	r3, #1
 8011a10:	2300      	movne	r3, #0
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	461a      	mov	r2, r3
 8011a16:	79fb      	ldrb	r3, [r7, #7]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d0a6      	beq.n	801196a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
	...

08011a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b095      	sub	sp, #84	; 0x54
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a38:	e853 3f00 	ldrex	r3, [r3]
 8011a3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8011a50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a56:	e841 2300 	strex	r3, r2, [r1]
 8011a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1e6      	bne.n	8011a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	3308      	adds	r3, #8
 8011a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	e853 3f00 	ldrex	r3, [r3]
 8011a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a72:	69fa      	ldr	r2, [r7, #28]
 8011a74:	4b1e      	ldr	r3, [pc, #120]	; (8011af0 <UART_EndRxTransfer+0xc8>)
 8011a76:	4013      	ands	r3, r2
 8011a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	3308      	adds	r3, #8
 8011a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a8a:	e841 2300 	strex	r3, r2, [r1]
 8011a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1e5      	bne.n	8011a62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d118      	bne.n	8011ad0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	e853 3f00 	ldrex	r3, [r3]
 8011aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	f023 0310 	bic.w	r3, r3, #16
 8011ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	461a      	mov	r2, r3
 8011aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011abc:	61bb      	str	r3, [r7, #24]
 8011abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac0:	6979      	ldr	r1, [r7, #20]
 8011ac2:	69ba      	ldr	r2, [r7, #24]
 8011ac4:	e841 2300 	strex	r3, r2, [r1]
 8011ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d1e6      	bne.n	8011a9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2200      	movs	r2, #0
 8011adc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011ae4:	bf00      	nop
 8011ae6:	3754      	adds	r7, #84	; 0x54
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	effffffe 	.word	0xeffffffe

08011af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011af4:	b480      	push	{r7}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d101      	bne.n	8011b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8011b06:	2302      	movs	r3, #2
 8011b08:	e027      	b.n	8011b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2224      	movs	r2, #36	; 0x24
 8011b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f022 0201 	bic.w	r2, r2, #1
 8011b30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	68fa      	ldr	r2, [r7, #12]
 8011b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2220      	movs	r2, #32
 8011b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2200      	movs	r2, #0
 8011b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3714      	adds	r7, #20
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d101      	bne.n	8011b7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011b7a:	2302      	movs	r3, #2
 8011b7c:	e02d      	b.n	8011bda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2201      	movs	r2, #1
 8011b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2224      	movs	r2, #36	; 0x24
 8011b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f022 0201 	bic.w	r2, r2, #1
 8011ba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	689b      	ldr	r3, [r3, #8]
 8011bac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	683a      	ldr	r2, [r7, #0]
 8011bb6:	430a      	orrs	r2, r1
 8011bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f850 	bl	8011c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2220      	movs	r2, #32
 8011bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bd8:	2300      	movs	r3, #0
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011be2:	b580      	push	{r7, lr}
 8011be4:	b084      	sub	sp, #16
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d101      	bne.n	8011bfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	e02d      	b.n	8011c56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2224      	movs	r2, #36	; 0x24
 8011c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f022 0201 	bic.w	r2, r2, #1
 8011c20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	683a      	ldr	r2, [r7, #0]
 8011c32:	430a      	orrs	r2, r1
 8011c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 f812 	bl	8011c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2220      	movs	r2, #32
 8011c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
	...

08011c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d108      	bne.n	8011c82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2201      	movs	r2, #1
 8011c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011c80:	e031      	b.n	8011ce6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011c82:	2310      	movs	r3, #16
 8011c84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011c86:	2310      	movs	r3, #16
 8011c88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	0e5b      	lsrs	r3, r3, #25
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	f003 0307 	and.w	r3, r3, #7
 8011c98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	0f5b      	lsrs	r3, r3, #29
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	f003 0307 	and.w	r3, r3, #7
 8011ca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011caa:	7bbb      	ldrb	r3, [r7, #14]
 8011cac:	7b3a      	ldrb	r2, [r7, #12]
 8011cae:	4911      	ldr	r1, [pc, #68]	; (8011cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8011cb0:	5c8a      	ldrb	r2, [r1, r2]
 8011cb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011cb6:	7b3a      	ldrb	r2, [r7, #12]
 8011cb8:	490f      	ldr	r1, [pc, #60]	; (8011cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8011cba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
 8011cca:	7b7a      	ldrb	r2, [r7, #13]
 8011ccc:	4909      	ldr	r1, [pc, #36]	; (8011cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8011cce:	5c8a      	ldrb	r2, [r1, r2]
 8011cd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011cd4:	7b7a      	ldrb	r2, [r7, #13]
 8011cd6:	4908      	ldr	r1, [pc, #32]	; (8011cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8011cd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	0801b5d4 	.word	0x0801b5d4
 8011cf8:	0801b5dc 	.word	0x0801b5dc

08011cfc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	b480      	push	{r7}
 8011d00:	b085      	sub	sp, #20
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
 8011d06:	f107 001c 	add.w	r0, r7, #28
 8011d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d12:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d14:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d16:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011d22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	685a      	ldr	r2, [r3, #4]
 8011d2e:	4b07      	ldr	r3, [pc, #28]	; (8011d4c <SDMMC_Init+0x50>)
 8011d30:	4013      	ands	r3, r2
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	431a      	orrs	r2, r3
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d3a:	2300      	movs	r3, #0
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3714      	adds	r7, #20
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	b004      	add	sp, #16
 8011d48:	4770      	bx	lr
 8011d4a:	bf00      	nop
 8011d4c:	ffc02c00 	.word	0xffc02c00

08011d50 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	370c      	adds	r7, #12
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011d6a:	b480      	push	{r7}
 8011d6c:	b083      	sub	sp, #12
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
 8011d72:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	370c      	adds	r7, #12
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f043 0203 	orr.w	r2, r3, #3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	370c      	adds	r7, #12
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b083      	sub	sp, #12
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f003 0303 	and.w	r3, r3, #3
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
	...

08011dcc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011dea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011df0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011df6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	68da      	ldr	r2, [r3, #12]
 8011e02:	4b06      	ldr	r3, [pc, #24]	; (8011e1c <SDMMC_SendCommand+0x50>)
 8011e04:	4013      	ands	r3, r2
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	431a      	orrs	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e0e:	2300      	movs	r3, #0
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3714      	adds	r7, #20
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr
 8011e1c:	fffee0c0 	.word	0xfffee0c0

08011e20 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b083      	sub	sp, #12
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	691b      	ldr	r3, [r3, #16]
 8011e2c:	b2db      	uxtb	r3, r3
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	370c      	adds	r7, #12
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr

08011e3a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011e3a:	b480      	push	{r7}
 8011e3c:	b085      	sub	sp, #20
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
 8011e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3314      	adds	r3, #20
 8011e48:	461a      	mov	r2, r3
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	4413      	add	r3, r2
 8011e4e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011e60:	b480      	push	{r7}
 8011e62:	b085      	sub	sp, #20
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011e86:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011e8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011e92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	4313      	orrs	r3, r2
 8011e98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	431a      	orrs	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011eaa:	2300      	movs	r3, #0

}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3714      	adds	r7, #20
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011ec6:	2310      	movs	r3, #16
 8011ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eda:	f107 0308 	add.w	r3, r7, #8
 8011ede:	4619      	mov	r1, r3
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ff ff73 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eea:	2110      	movs	r1, #16
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 fa5f 	bl	80123b0 <SDMMC_GetCmdResp1>
 8011ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ef4:	69fb      	ldr	r3, [r7, #28]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3720      	adds	r7, #32
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b088      	sub	sp, #32
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
 8011f06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f0c:	2311      	movs	r3, #17
 8011f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f16:	2300      	movs	r3, #0
 8011f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f20:	f107 0308 	add.w	r3, r7, #8
 8011f24:	4619      	mov	r1, r3
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff ff50 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f30:	2111      	movs	r1, #17
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 fa3c 	bl	80123b0 <SDMMC_GetCmdResp1>
 8011f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3720      	adds	r7, #32
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b088      	sub	sp, #32
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f52:	2312      	movs	r3, #18
 8011f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f66:	f107 0308 	add.w	r3, r7, #8
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7ff ff2d 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f76:	2112      	movs	r1, #18
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 fa19 	bl	80123b0 <SDMMC_GetCmdResp1>
 8011f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f80:	69fb      	ldr	r3, [r7, #28]
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3720      	adds	r7, #32
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b088      	sub	sp, #32
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011f98:	2318      	movs	r3, #24
 8011f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fac:	f107 0308 	add.w	r3, r7, #8
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f7ff ff0a 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fbc:	2118      	movs	r1, #24
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 f9f6 	bl	80123b0 <SDMMC_GetCmdResp1>
 8011fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc6:	69fb      	ldr	r3, [r7, #28]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3720      	adds	r7, #32
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b088      	sub	sp, #32
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011fde:	2319      	movs	r3, #25
 8011fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ff2:	f107 0308 	add.w	r3, r7, #8
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7ff fee7 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8012002:	2119      	movs	r1, #25
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 f9d3 	bl	80123b0 <SDMMC_GetCmdResp1>
 801200a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200c:	69fb      	ldr	r3, [r7, #28]
}
 801200e:	4618      	mov	r0, r3
 8012010:	3720      	adds	r7, #32
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
	...

08012018 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012020:	2300      	movs	r3, #0
 8012022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012024:	230c      	movs	r3, #12
 8012026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012028:	f44f 7380 	mov.w	r3, #256	; 0x100
 801202c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801202e:	2300      	movs	r3, #0
 8012030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012036:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012050:	f107 0308 	add.w	r3, r7, #8
 8012054:	4619      	mov	r1, r3
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7ff feb8 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801205c:	4a0b      	ldr	r2, [pc, #44]	; (801208c <SDMMC_CmdStopTransfer+0x74>)
 801205e:	210c      	movs	r1, #12
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f000 f9a5 	bl	80123b0 <SDMMC_GetCmdResp1>
 8012066:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801207a:	d101      	bne.n	8012080 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801207c:	2300      	movs	r3, #0
 801207e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012080:	69fb      	ldr	r3, [r7, #28]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3720      	adds	r7, #32
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	05f5e100 	.word	0x05f5e100

08012090 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b088      	sub	sp, #32
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801209e:	2307      	movs	r3, #7
 80120a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120a8:	2300      	movs	r3, #0
 80120aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120b2:	f107 0308 	add.w	r3, r7, #8
 80120b6:	4619      	mov	r1, r3
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7ff fe87 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80120be:	f241 3288 	movw	r2, #5000	; 0x1388
 80120c2:	2107      	movs	r1, #7
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f973 	bl	80123b0 <SDMMC_GetCmdResp1>
 80120ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120cc:	69fb      	ldr	r3, [r7, #28]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3720      	adds	r7, #32
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b088      	sub	sp, #32
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80120de:	2300      	movs	r3, #0
 80120e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80120e2:	2300      	movs	r3, #0
 80120e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80120e6:	2300      	movs	r3, #0
 80120e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ea:	2300      	movs	r3, #0
 80120ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120f4:	f107 0308 	add.w	r3, r7, #8
 80120f8:	4619      	mov	r1, r3
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7ff fe66 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fb97 	bl	8012834 <SDMMC_GetCmdError>
 8012106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012108:	69fb      	ldr	r3, [r7, #28]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3720      	adds	r7, #32
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b088      	sub	sp, #32
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801211a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801211e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012120:	2308      	movs	r3, #8
 8012122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801212a:	2300      	movs	r3, #0
 801212c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012134:	f107 0308 	add.w	r3, r7, #8
 8012138:	4619      	mov	r1, r3
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff fe46 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 fb29 	bl	8012798 <SDMMC_GetCmdResp7>
 8012146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012148:	69fb      	ldr	r3, [r7, #28]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3720      	adds	r7, #32
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b088      	sub	sp, #32
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012160:	2337      	movs	r3, #55	; 0x37
 8012162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801216a:	2300      	movs	r3, #0
 801216c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801216e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012174:	f107 0308 	add.w	r3, r7, #8
 8012178:	4619      	mov	r1, r3
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f7ff fe26 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012180:	f241 3288 	movw	r2, #5000	; 0x1388
 8012184:	2137      	movs	r1, #55	; 0x37
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 f912 	bl	80123b0 <SDMMC_GetCmdResp1>
 801218c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801218e:	69fb      	ldr	r3, [r7, #28]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b088      	sub	sp, #32
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80121a6:	2329      	movs	r3, #41	; 0x29
 80121a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121b0:	2300      	movs	r3, #0
 80121b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121ba:	f107 0308 	add.w	r3, r7, #8
 80121be:	4619      	mov	r1, r3
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7ff fe03 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fa2e 	bl	8012628 <SDMMC_GetCmdResp3>
 80121cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ce:	69fb      	ldr	r3, [r7, #28]
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3720      	adds	r7, #32
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b088      	sub	sp, #32
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80121e6:	2306      	movs	r3, #6
 80121e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121f0:	2300      	movs	r3, #0
 80121f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121fa:	f107 0308 	add.w	r3, r7, #8
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7ff fde3 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012206:	f241 3288 	movw	r2, #5000	; 0x1388
 801220a:	2106      	movs	r1, #6
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 f8cf 	bl	80123b0 <SDMMC_GetCmdResp1>
 8012212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012214:	69fb      	ldr	r3, [r7, #28]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3720      	adds	r7, #32
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b088      	sub	sp, #32
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012226:	2300      	movs	r3, #0
 8012228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801222a:	2333      	movs	r3, #51	; 0x33
 801222c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012234:	2300      	movs	r3, #0
 8012236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801223c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801223e:	f107 0308 	add.w	r3, r7, #8
 8012242:	4619      	mov	r1, r3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f7ff fdc1 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801224a:	f241 3288 	movw	r2, #5000	; 0x1388
 801224e:	2133      	movs	r1, #51	; 0x33
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f8ad 	bl	80123b0 <SDMMC_GetCmdResp1>
 8012256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012258:	69fb      	ldr	r3, [r7, #28]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801226a:	2300      	movs	r3, #0
 801226c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801226e:	2302      	movs	r3, #2
 8012270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012272:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012278:	2300      	movs	r3, #0
 801227a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801227c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012282:	f107 0308 	add.w	r3, r7, #8
 8012286:	4619      	mov	r1, r3
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7ff fd9f 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f980 	bl	8012594 <SDMMC_GetCmdResp2>
 8012294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012296:	69fb      	ldr	r3, [r7, #28]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3720      	adds	r7, #32
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b088      	sub	sp, #32
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80122ae:	2309      	movs	r3, #9
 80122b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122b8:	2300      	movs	r3, #0
 80122ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122c2:	f107 0308 	add.w	r3, r7, #8
 80122c6:	4619      	mov	r1, r3
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ff fd7f 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 f960 	bl	8012594 <SDMMC_GetCmdResp2>
 80122d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122d6:	69fb      	ldr	r3, [r7, #28]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3720      	adds	r7, #32
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b088      	sub	sp, #32
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80122ea:	2300      	movs	r3, #0
 80122ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80122ee:	2303      	movs	r3, #3
 80122f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122f8:	2300      	movs	r3, #0
 80122fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012302:	f107 0308 	add.w	r3, r7, #8
 8012306:	4619      	mov	r1, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7ff fd5f 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	2103      	movs	r1, #3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f9c8 	bl	80126a8 <SDMMC_GetCmdResp6>
 8012318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801231a:	69fb      	ldr	r3, [r7, #28]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3720      	adds	r7, #32
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b088      	sub	sp, #32
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012332:	230d      	movs	r3, #13
 8012334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012336:	f44f 7380 	mov.w	r3, #256	; 0x100
 801233a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801233c:	2300      	movs	r3, #0
 801233e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012346:	f107 0308 	add.w	r3, r7, #8
 801234a:	4619      	mov	r1, r3
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7ff fd3d 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012352:	f241 3288 	movw	r2, #5000	; 0x1388
 8012356:	210d      	movs	r1, #13
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f000 f829 	bl	80123b0 <SDMMC_GetCmdResp1>
 801235e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012360:	69fb      	ldr	r3, [r7, #28]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3720      	adds	r7, #32
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}

0801236a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801236a:	b580      	push	{r7, lr}
 801236c:	b088      	sub	sp, #32
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012372:	2300      	movs	r3, #0
 8012374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012376:	230d      	movs	r3, #13
 8012378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801237e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012380:	2300      	movs	r3, #0
 8012382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801238a:	f107 0308 	add.w	r3, r7, #8
 801238e:	4619      	mov	r1, r3
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7ff fd1b 	bl	8011dcc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012396:	f241 3288 	movw	r2, #5000	; 0x1388
 801239a:	210d      	movs	r1, #13
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 f807 	bl	80123b0 <SDMMC_GetCmdResp1>
 80123a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123a4:	69fb      	ldr	r3, [r7, #28]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3720      	adds	r7, #32
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
	...

080123b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b088      	sub	sp, #32
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	460b      	mov	r3, r1
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80123be:	4b70      	ldr	r3, [pc, #448]	; (8012580 <SDMMC_GetCmdResp1+0x1d0>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4a70      	ldr	r2, [pc, #448]	; (8012584 <SDMMC_GetCmdResp1+0x1d4>)
 80123c4:	fba2 2303 	umull	r2, r3, r2, r3
 80123c8:	0a5a      	lsrs	r2, r3, #9
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	fb02 f303 	mul.w	r3, r2, r3
 80123d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	1e5a      	subs	r2, r3, #1
 80123d6:	61fa      	str	r2, [r7, #28]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d102      	bne.n	80123e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123e0:	e0c9      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123e6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80123e8:	69ba      	ldr	r2, [r7, #24]
 80123ea:	4b67      	ldr	r3, [pc, #412]	; (8012588 <SDMMC_GetCmdResp1+0x1d8>)
 80123ec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d0ef      	beq.n	80123d2 <SDMMC_GetCmdResp1+0x22>
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1ea      	bne.n	80123d2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012400:	f003 0304 	and.w	r3, r3, #4
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2204      	movs	r2, #4
 801240c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801240e:	2304      	movs	r3, #4
 8012410:	e0b1      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012416:	f003 0301 	and.w	r3, r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	d004      	beq.n	8012428 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2201      	movs	r2, #1
 8012422:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012424:	2301      	movs	r3, #1
 8012426:	e0a6      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	4a58      	ldr	r2, [pc, #352]	; (801258c <SDMMC_GetCmdResp1+0x1dc>)
 801242c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801242e:	68f8      	ldr	r0, [r7, #12]
 8012430:	f7ff fcf6 	bl	8011e20 <SDMMC_GetCommandResponse>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	7afb      	ldrb	r3, [r7, #11]
 801243a:	4293      	cmp	r3, r2
 801243c:	d001      	beq.n	8012442 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801243e:	2301      	movs	r3, #1
 8012440:	e099      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012442:	2100      	movs	r1, #0
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f7ff fcf8 	bl	8011e3a <SDMMC_GetResponse>
 801244a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801244c:	697a      	ldr	r2, [r7, #20]
 801244e:	4b50      	ldr	r3, [pc, #320]	; (8012590 <SDMMC_GetCmdResp1+0x1e0>)
 8012450:	4013      	ands	r3, r2
 8012452:	2b00      	cmp	r3, #0
 8012454:	d101      	bne.n	801245a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012456:	2300      	movs	r3, #0
 8012458:	e08d      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	2b00      	cmp	r3, #0
 801245e:	da02      	bge.n	8012466 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012464:	e087      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801246c:	2b00      	cmp	r3, #0
 801246e:	d001      	beq.n	8012474 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012470:	2340      	movs	r3, #64	; 0x40
 8012472:	e080      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801247a:	2b00      	cmp	r3, #0
 801247c:	d001      	beq.n	8012482 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801247e:	2380      	movs	r3, #128	; 0x80
 8012480:	e079      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012488:	2b00      	cmp	r3, #0
 801248a:	d002      	beq.n	8012492 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012490:	e071      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012498:	2b00      	cmp	r3, #0
 801249a:	d002      	beq.n	80124a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801249c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124a0:	e069      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d002      	beq.n	80124b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80124ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124b0:	e061      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d002      	beq.n	80124c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80124bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124c0:	e059      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80124cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124d0:	e051      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d002      	beq.n	80124e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80124dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124e0:	e049      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d002      	beq.n	80124f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80124ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80124f0:	e041      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d002      	beq.n	8012502 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80124fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012500:	e039      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012510:	e031      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801251c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012520:	e029      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801252c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012530:	e021      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801253c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012540:	e019      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801254c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012550:	e011      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801255c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012560:	e009      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	f003 0308 	and.w	r3, r3, #8
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801256c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012570:	e001      	b.n	8012576 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012576:	4618      	mov	r0, r3
 8012578:	3720      	adds	r7, #32
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop
 8012580:	24000000 	.word	0x24000000
 8012584:	10624dd3 	.word	0x10624dd3
 8012588:	00200045 	.word	0x00200045
 801258c:	002000c5 	.word	0x002000c5
 8012590:	fdffe008 	.word	0xfdffe008

08012594 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012594:	b480      	push	{r7}
 8012596:	b085      	sub	sp, #20
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801259c:	4b1f      	ldr	r3, [pc, #124]	; (801261c <SDMMC_GetCmdResp2+0x88>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a1f      	ldr	r2, [pc, #124]	; (8012620 <SDMMC_GetCmdResp2+0x8c>)
 80125a2:	fba2 2303 	umull	r2, r3, r2, r3
 80125a6:	0a5b      	lsrs	r3, r3, #9
 80125a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ac:	fb02 f303 	mul.w	r3, r2, r3
 80125b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	1e5a      	subs	r2, r3, #1
 80125b6:	60fa      	str	r2, [r7, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d102      	bne.n	80125c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125c0:	e026      	b.n	8012610 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125c6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d0ef      	beq.n	80125b2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d1ea      	bne.n	80125b2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e0:	f003 0304 	and.w	r3, r3, #4
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d004      	beq.n	80125f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2204      	movs	r2, #4
 80125ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125ee:	2304      	movs	r3, #4
 80125f0:	e00e      	b.n	8012610 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f6:	f003 0301 	and.w	r3, r3, #1
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d004      	beq.n	8012608 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2201      	movs	r2, #1
 8012602:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012604:	2301      	movs	r3, #1
 8012606:	e003      	b.n	8012610 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4a06      	ldr	r2, [pc, #24]	; (8012624 <SDMMC_GetCmdResp2+0x90>)
 801260c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801260e:	2300      	movs	r3, #0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3714      	adds	r7, #20
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr
 801261c:	24000000 	.word	0x24000000
 8012620:	10624dd3 	.word	0x10624dd3
 8012624:	002000c5 	.word	0x002000c5

08012628 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012630:	4b1a      	ldr	r3, [pc, #104]	; (801269c <SDMMC_GetCmdResp3+0x74>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4a1a      	ldr	r2, [pc, #104]	; (80126a0 <SDMMC_GetCmdResp3+0x78>)
 8012636:	fba2 2303 	umull	r2, r3, r2, r3
 801263a:	0a5b      	lsrs	r3, r3, #9
 801263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012640:	fb02 f303 	mul.w	r3, r2, r3
 8012644:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	1e5a      	subs	r2, r3, #1
 801264a:	60fa      	str	r2, [r7, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d102      	bne.n	8012656 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012654:	e01b      	b.n	801268e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801265a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012662:	2b00      	cmp	r3, #0
 8012664:	d0ef      	beq.n	8012646 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1ea      	bne.n	8012646 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012674:	f003 0304 	and.w	r3, r3, #4
 8012678:	2b00      	cmp	r3, #0
 801267a:	d004      	beq.n	8012686 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2204      	movs	r2, #4
 8012680:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012682:	2304      	movs	r3, #4
 8012684:	e003      	b.n	801268e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	4a06      	ldr	r2, [pc, #24]	; (80126a4 <SDMMC_GetCmdResp3+0x7c>)
 801268a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801268c:	2300      	movs	r3, #0
}
 801268e:	4618      	mov	r0, r3
 8012690:	3714      	adds	r7, #20
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	24000000 	.word	0x24000000
 80126a0:	10624dd3 	.word	0x10624dd3
 80126a4:	002000c5 	.word	0x002000c5

080126a8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b088      	sub	sp, #32
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	460b      	mov	r3, r1
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126b6:	4b35      	ldr	r3, [pc, #212]	; (801278c <SDMMC_GetCmdResp6+0xe4>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a35      	ldr	r2, [pc, #212]	; (8012790 <SDMMC_GetCmdResp6+0xe8>)
 80126bc:	fba2 2303 	umull	r2, r3, r2, r3
 80126c0:	0a5b      	lsrs	r3, r3, #9
 80126c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80126c6:	fb02 f303 	mul.w	r3, r2, r3
 80126ca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	1e5a      	subs	r2, r3, #1
 80126d0:	61fa      	str	r2, [r7, #28]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d102      	bne.n	80126dc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126da:	e052      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d0ef      	beq.n	80126cc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d1ea      	bne.n	80126cc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d004      	beq.n	801270c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2204      	movs	r2, #4
 8012706:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012708:	2304      	movs	r3, #4
 801270a:	e03a      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d004      	beq.n	8012722 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2201      	movs	r2, #1
 801271c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801271e:	2301      	movs	r3, #1
 8012720:	e02f      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	f7ff fb7c 	bl	8011e20 <SDMMC_GetCommandResponse>
 8012728:	4603      	mov	r3, r0
 801272a:	461a      	mov	r2, r3
 801272c:	7afb      	ldrb	r3, [r7, #11]
 801272e:	4293      	cmp	r3, r2
 8012730:	d001      	beq.n	8012736 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012732:	2301      	movs	r3, #1
 8012734:	e025      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	4a16      	ldr	r2, [pc, #88]	; (8012794 <SDMMC_GetCmdResp6+0xec>)
 801273a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801273c:	2100      	movs	r1, #0
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f7ff fb7b 	bl	8011e3a <SDMMC_GetResponse>
 8012744:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	0c1b      	lsrs	r3, r3, #16
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801275a:	2300      	movs	r3, #0
 801275c:	e011      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801276c:	e009      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801277c:	e001      	b.n	8012782 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801277e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012782:	4618      	mov	r0, r3
 8012784:	3720      	adds	r7, #32
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	24000000 	.word	0x24000000
 8012790:	10624dd3 	.word	0x10624dd3
 8012794:	002000c5 	.word	0x002000c5

08012798 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012798:	b480      	push	{r7}
 801279a:	b085      	sub	sp, #20
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127a0:	4b22      	ldr	r3, [pc, #136]	; (801282c <SDMMC_GetCmdResp7+0x94>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a22      	ldr	r2, [pc, #136]	; (8012830 <SDMMC_GetCmdResp7+0x98>)
 80127a6:	fba2 2303 	umull	r2, r3, r2, r3
 80127aa:	0a5b      	lsrs	r3, r3, #9
 80127ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80127b0:	fb02 f303 	mul.w	r3, r2, r3
 80127b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	1e5a      	subs	r2, r3, #1
 80127ba:	60fa      	str	r2, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d102      	bne.n	80127c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127c4:	e02c      	b.n	8012820 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0ef      	beq.n	80127b6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d1ea      	bne.n	80127b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127e4:	f003 0304 	and.w	r3, r3, #4
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d004      	beq.n	80127f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2204      	movs	r2, #4
 80127f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127f2:	2304      	movs	r3, #4
 80127f4:	e014      	b.n	8012820 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d004      	beq.n	801280c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2201      	movs	r2, #1
 8012806:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012808:	2301      	movs	r3, #1
 801280a:	e009      	b.n	8012820 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2240      	movs	r2, #64	; 0x40
 801281c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801281e:	2300      	movs	r3, #0

}
 8012820:	4618      	mov	r0, r3
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr
 801282c:	24000000 	.word	0x24000000
 8012830:	10624dd3 	.word	0x10624dd3

08012834 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012834:	b480      	push	{r7}
 8012836:	b085      	sub	sp, #20
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801283c:	4b11      	ldr	r3, [pc, #68]	; (8012884 <SDMMC_GetCmdError+0x50>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a11      	ldr	r2, [pc, #68]	; (8012888 <SDMMC_GetCmdError+0x54>)
 8012842:	fba2 2303 	umull	r2, r3, r2, r3
 8012846:	0a5b      	lsrs	r3, r3, #9
 8012848:	f241 3288 	movw	r2, #5000	; 0x1388
 801284c:	fb02 f303 	mul.w	r3, r2, r3
 8012850:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	1e5a      	subs	r2, r3, #1
 8012856:	60fa      	str	r2, [r7, #12]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d102      	bne.n	8012862 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801285c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012860:	e009      	b.n	8012876 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801286a:	2b00      	cmp	r3, #0
 801286c:	d0f1      	beq.n	8012852 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4a06      	ldr	r2, [pc, #24]	; (801288c <SDMMC_GetCmdError+0x58>)
 8012872:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3714      	adds	r7, #20
 801287a:	46bd      	mov	sp, r7
 801287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	24000000 	.word	0x24000000
 8012888:	10624dd3 	.word	0x10624dd3
 801288c:	002000c5 	.word	0x002000c5

08012890 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012890:	b084      	sub	sp, #16
 8012892:	b580      	push	{r7, lr}
 8012894:	b084      	sub	sp, #16
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
 801289a:	f107 001c 	add.w	r0, r7, #28
 801289e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d120      	bne.n	80128ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	68da      	ldr	r2, [r3, #12]
 80128b8:	4b2a      	ldr	r3, [pc, #168]	; (8012964 <USB_CoreInit+0xd4>)
 80128ba:	4013      	ands	r3, r2
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	68db      	ldr	r3, [r3, #12]
 80128c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80128cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d105      	bne.n	80128de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f001 faf8 	bl	8013ed4 <USB_CoreReset>
 80128e4:	4603      	mov	r3, r0
 80128e6:	73fb      	strb	r3, [r7, #15]
 80128e8:	e01a      	b.n	8012920 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f001 faec 	bl	8013ed4 <USB_CoreReset>
 80128fc:	4603      	mov	r3, r0
 80128fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012902:	2b00      	cmp	r3, #0
 8012904:	d106      	bne.n	8012914 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801290a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	639a      	str	r2, [r3, #56]	; 0x38
 8012912:	e005      	b.n	8012920 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012922:	2b01      	cmp	r3, #1
 8012924:	d116      	bne.n	8012954 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801292a:	b29a      	uxth	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012934:	4b0c      	ldr	r3, [pc, #48]	; (8012968 <USB_CoreInit+0xd8>)
 8012936:	4313      	orrs	r3, r2
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	689b      	ldr	r3, [r3, #8]
 8012940:	f043 0206 	orr.w	r2, r3, #6
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	f043 0220 	orr.w	r2, r3, #32
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012954:	7bfb      	ldrb	r3, [r7, #15]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012960:	b004      	add	sp, #16
 8012962:	4770      	bx	lr
 8012964:	ffbdffbf 	.word	0xffbdffbf
 8012968:	03ee0000 	.word	0x03ee0000

0801296c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801296c:	b480      	push	{r7}
 801296e:	b087      	sub	sp, #28
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	4613      	mov	r3, r2
 8012978:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801297a:	79fb      	ldrb	r3, [r7, #7]
 801297c:	2b02      	cmp	r3, #2
 801297e:	d165      	bne.n	8012a4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012980:	68bb      	ldr	r3, [r7, #8]
 8012982:	4a41      	ldr	r2, [pc, #260]	; (8012a88 <USB_SetTurnaroundTime+0x11c>)
 8012984:	4293      	cmp	r3, r2
 8012986:	d906      	bls.n	8012996 <USB_SetTurnaroundTime+0x2a>
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	4a40      	ldr	r2, [pc, #256]	; (8012a8c <USB_SetTurnaroundTime+0x120>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d202      	bcs.n	8012996 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012990:	230f      	movs	r3, #15
 8012992:	617b      	str	r3, [r7, #20]
 8012994:	e062      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	4a3c      	ldr	r2, [pc, #240]	; (8012a8c <USB_SetTurnaroundTime+0x120>)
 801299a:	4293      	cmp	r3, r2
 801299c:	d306      	bcc.n	80129ac <USB_SetTurnaroundTime+0x40>
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	4a3b      	ldr	r2, [pc, #236]	; (8012a90 <USB_SetTurnaroundTime+0x124>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d202      	bcs.n	80129ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80129a6:	230e      	movs	r3, #14
 80129a8:	617b      	str	r3, [r7, #20]
 80129aa:	e057      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	4a38      	ldr	r2, [pc, #224]	; (8012a90 <USB_SetTurnaroundTime+0x124>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d306      	bcc.n	80129c2 <USB_SetTurnaroundTime+0x56>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	4a37      	ldr	r2, [pc, #220]	; (8012a94 <USB_SetTurnaroundTime+0x128>)
 80129b8:	4293      	cmp	r3, r2
 80129ba:	d202      	bcs.n	80129c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80129bc:	230d      	movs	r3, #13
 80129be:	617b      	str	r3, [r7, #20]
 80129c0:	e04c      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	4a33      	ldr	r2, [pc, #204]	; (8012a94 <USB_SetTurnaroundTime+0x128>)
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d306      	bcc.n	80129d8 <USB_SetTurnaroundTime+0x6c>
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	4a32      	ldr	r2, [pc, #200]	; (8012a98 <USB_SetTurnaroundTime+0x12c>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d802      	bhi.n	80129d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80129d2:	230c      	movs	r3, #12
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	e041      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	4a2f      	ldr	r2, [pc, #188]	; (8012a98 <USB_SetTurnaroundTime+0x12c>)
 80129dc:	4293      	cmp	r3, r2
 80129de:	d906      	bls.n	80129ee <USB_SetTurnaroundTime+0x82>
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	4a2e      	ldr	r2, [pc, #184]	; (8012a9c <USB_SetTurnaroundTime+0x130>)
 80129e4:	4293      	cmp	r3, r2
 80129e6:	d802      	bhi.n	80129ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80129e8:	230b      	movs	r3, #11
 80129ea:	617b      	str	r3, [r7, #20]
 80129ec:	e036      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	4a2a      	ldr	r2, [pc, #168]	; (8012a9c <USB_SetTurnaroundTime+0x130>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d906      	bls.n	8012a04 <USB_SetTurnaroundTime+0x98>
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	4a29      	ldr	r2, [pc, #164]	; (8012aa0 <USB_SetTurnaroundTime+0x134>)
 80129fa:	4293      	cmp	r3, r2
 80129fc:	d802      	bhi.n	8012a04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80129fe:	230a      	movs	r3, #10
 8012a00:	617b      	str	r3, [r7, #20]
 8012a02:	e02b      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	4a26      	ldr	r2, [pc, #152]	; (8012aa0 <USB_SetTurnaroundTime+0x134>)
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d906      	bls.n	8012a1a <USB_SetTurnaroundTime+0xae>
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	4a25      	ldr	r2, [pc, #148]	; (8012aa4 <USB_SetTurnaroundTime+0x138>)
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d202      	bcs.n	8012a1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a14:	2309      	movs	r3, #9
 8012a16:	617b      	str	r3, [r7, #20]
 8012a18:	e020      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	4a21      	ldr	r2, [pc, #132]	; (8012aa4 <USB_SetTurnaroundTime+0x138>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d306      	bcc.n	8012a30 <USB_SetTurnaroundTime+0xc4>
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	4a20      	ldr	r2, [pc, #128]	; (8012aa8 <USB_SetTurnaroundTime+0x13c>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d802      	bhi.n	8012a30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012a2a:	2308      	movs	r3, #8
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	e015      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	4a1d      	ldr	r2, [pc, #116]	; (8012aa8 <USB_SetTurnaroundTime+0x13c>)
 8012a34:	4293      	cmp	r3, r2
 8012a36:	d906      	bls.n	8012a46 <USB_SetTurnaroundTime+0xda>
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	4a1c      	ldr	r2, [pc, #112]	; (8012aac <USB_SetTurnaroundTime+0x140>)
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d202      	bcs.n	8012a46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012a40:	2307      	movs	r3, #7
 8012a42:	617b      	str	r3, [r7, #20]
 8012a44:	e00a      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012a46:	2306      	movs	r3, #6
 8012a48:	617b      	str	r3, [r7, #20]
 8012a4a:	e007      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012a4c:	79fb      	ldrb	r3, [r7, #7]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d102      	bne.n	8012a58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012a52:	2309      	movs	r3, #9
 8012a54:	617b      	str	r3, [r7, #20]
 8012a56:	e001      	b.n	8012a5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012a58:	2309      	movs	r3, #9
 8012a5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68da      	ldr	r2, [r3, #12]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	029b      	lsls	r3, r3, #10
 8012a70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012a74:	431a      	orrs	r2, r3
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a7a:	2300      	movs	r3, #0
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	371c      	adds	r7, #28
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	00d8acbf 	.word	0x00d8acbf
 8012a8c:	00e4e1c0 	.word	0x00e4e1c0
 8012a90:	00f42400 	.word	0x00f42400
 8012a94:	01067380 	.word	0x01067380
 8012a98:	011a499f 	.word	0x011a499f
 8012a9c:	01312cff 	.word	0x01312cff
 8012aa0:	014ca43f 	.word	0x014ca43f
 8012aa4:	016e3600 	.word	0x016e3600
 8012aa8:	01a6ab1f 	.word	0x01a6ab1f
 8012aac:	01e84800 	.word	0x01e84800

08012ab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	f043 0201 	orr.w	r2, r3, #1
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012ac4:	2300      	movs	r3, #0
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	370c      	adds	r7, #12
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ad2:	b480      	push	{r7}
 8012ad4:	b083      	sub	sp, #12
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	f023 0201 	bic.w	r2, r3, #1
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012ae6:	2300      	movs	r3, #0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b00:	2300      	movs	r3, #0
 8012b02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b10:	78fb      	ldrb	r3, [r7, #3]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d115      	bne.n	8012b42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	68db      	ldr	r3, [r3, #12]
 8012b1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b22:	2001      	movs	r0, #1
 8012b24:	f7f0 ff18 	bl	8003958 <HAL_Delay>
      ms++;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f001 f93f 	bl	8013db2 <USB_GetMode>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d01e      	beq.n	8012b78 <USB_SetCurrentMode+0x84>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2b31      	cmp	r3, #49	; 0x31
 8012b3e:	d9f0      	bls.n	8012b22 <USB_SetCurrentMode+0x2e>
 8012b40:	e01a      	b.n	8012b78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012b42:	78fb      	ldrb	r3, [r7, #3]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d115      	bne.n	8012b74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012b54:	2001      	movs	r0, #1
 8012b56:	f7f0 feff 	bl	8003958 <HAL_Delay>
      ms++;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f001 f926 	bl	8013db2 <USB_GetMode>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d005      	beq.n	8012b78 <USB_SetCurrentMode+0x84>
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b31      	cmp	r3, #49	; 0x31
 8012b70:	d9f0      	bls.n	8012b54 <USB_SetCurrentMode+0x60>
 8012b72:	e001      	b.n	8012b78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012b74:	2301      	movs	r3, #1
 8012b76:	e005      	b.n	8012b84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2b32      	cmp	r3, #50	; 0x32
 8012b7c:	d101      	bne.n	8012b82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	e000      	b.n	8012b84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3710      	adds	r7, #16
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012b8c:	b084      	sub	sp, #16
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b086      	sub	sp, #24
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
 8012b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	613b      	str	r3, [r7, #16]
 8012baa:	e009      	b.n	8012bc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	3340      	adds	r3, #64	; 0x40
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	4413      	add	r3, r2
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	613b      	str	r3, [r7, #16]
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	2b0e      	cmp	r3, #14
 8012bc4:	d9f2      	bls.n	8012bac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d11c      	bne.n	8012c06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bda:	f043 0302 	orr.w	r3, r3, #2
 8012bde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	601a      	str	r2, [r3, #0]
 8012c04:	e005      	b.n	8012c12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c18:	461a      	mov	r2, r3
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c24:	4619      	mov	r1, r3
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	680b      	ldr	r3, [r1, #0]
 8012c30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	d10c      	bne.n	8012c52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d104      	bne.n	8012c48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012c3e:	2100      	movs	r1, #0
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f000 f965 	bl	8012f10 <USB_SetDevSpeed>
 8012c46:	e008      	b.n	8012c5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012c48:	2101      	movs	r1, #1
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 f960 	bl	8012f10 <USB_SetDevSpeed>
 8012c50:	e003      	b.n	8012c5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012c52:	2103      	movs	r1, #3
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f000 f95b 	bl	8012f10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012c5a:	2110      	movs	r1, #16
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 f8f3 	bl	8012e48 <USB_FlushTxFifo>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 f91f 	bl	8012eb0 <USB_FlushRxFifo>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c82:	461a      	mov	r2, r3
 8012c84:	2300      	movs	r3, #0
 8012c86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c8e:	461a      	mov	r2, r3
 8012c90:	2300      	movs	r3, #0
 8012c92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	613b      	str	r3, [r7, #16]
 8012ca4:	e043      	b.n	8012d2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	015a      	lsls	r2, r3, #5
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	4413      	add	r3, r2
 8012cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cbc:	d118      	bne.n	8012cf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10a      	bne.n	8012cda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	015a      	lsls	r2, r3, #5
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	4413      	add	r3, r2
 8012ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012cd6:	6013      	str	r3, [r2, #0]
 8012cd8:	e013      	b.n	8012d02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	015a      	lsls	r2, r3, #5
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012cec:	6013      	str	r3, [r2, #0]
 8012cee:	e008      	b.n	8012d02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	015a      	lsls	r2, r3, #5
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	2300      	movs	r3, #0
 8012d00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	015a      	lsls	r2, r3, #5
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	4413      	add	r3, r2
 8012d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d0e:	461a      	mov	r2, r3
 8012d10:	2300      	movs	r3, #0
 8012d12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	015a      	lsls	r2, r3, #5
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d20:	461a      	mov	r2, r3
 8012d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d3b7      	bcc.n	8012ca6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d36:	2300      	movs	r3, #0
 8012d38:	613b      	str	r3, [r7, #16]
 8012d3a:	e043      	b.n	8012dc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	015a      	lsls	r2, r3, #5
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	4413      	add	r3, r2
 8012d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d52:	d118      	bne.n	8012d86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d10a      	bne.n	8012d70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	015a      	lsls	r2, r3, #5
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	4413      	add	r3, r2
 8012d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d66:	461a      	mov	r2, r3
 8012d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d6c:	6013      	str	r3, [r2, #0]
 8012d6e:	e013      	b.n	8012d98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	015a      	lsls	r2, r3, #5
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	4413      	add	r3, r2
 8012d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d82:	6013      	str	r3, [r2, #0]
 8012d84:	e008      	b.n	8012d98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	015a      	lsls	r2, r3, #5
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d92:	461a      	mov	r2, r3
 8012d94:	2300      	movs	r3, #0
 8012d96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	4413      	add	r3, r2
 8012da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da4:	461a      	mov	r2, r3
 8012da6:	2300      	movs	r3, #0
 8012da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	015a      	lsls	r2, r3, #5
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	4413      	add	r3, r2
 8012db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db6:	461a      	mov	r2, r3
 8012db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012dbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	613b      	str	r3, [r7, #16]
 8012dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc6:	693a      	ldr	r2, [r7, #16]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d3b7      	bcc.n	8012d3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dd2:	691b      	ldr	r3, [r3, #16]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012dde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2200      	movs	r2, #0
 8012de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012dec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d105      	bne.n	8012e00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	699b      	ldr	r3, [r3, #24]
 8012df8:	f043 0210 	orr.w	r2, r3, #16
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	699a      	ldr	r2, [r3, #24]
 8012e04:	4b0e      	ldr	r3, [pc, #56]	; (8012e40 <USB_DevInit+0x2b4>)
 8012e06:	4313      	orrs	r3, r2
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d005      	beq.n	8012e1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	699b      	ldr	r3, [r3, #24]
 8012e16:	f043 0208 	orr.w	r2, r3, #8
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d105      	bne.n	8012e30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	699a      	ldr	r2, [r3, #24]
 8012e28:	4b06      	ldr	r3, [pc, #24]	; (8012e44 <USB_DevInit+0x2b8>)
 8012e2a:	4313      	orrs	r3, r2
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012e3c:	b004      	add	sp, #16
 8012e3e:	4770      	bx	lr
 8012e40:	803c3800 	.word	0x803c3800
 8012e44:	40000004 	.word	0x40000004

08012e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012e52:	2300      	movs	r3, #0
 8012e54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4a13      	ldr	r2, [pc, #76]	; (8012eac <USB_FlushTxFifo+0x64>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d901      	bls.n	8012e68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012e64:	2303      	movs	r3, #3
 8012e66:	e01b      	b.n	8012ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	daf2      	bge.n	8012e56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012e70:	2300      	movs	r3, #0
 8012e72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	019b      	lsls	r3, r3, #6
 8012e78:	f043 0220 	orr.w	r2, r3, #32
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	3301      	adds	r3, #1
 8012e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	4a08      	ldr	r2, [pc, #32]	; (8012eac <USB_FlushTxFifo+0x64>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d901      	bls.n	8012e92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012e8e:	2303      	movs	r3, #3
 8012e90:	e006      	b.n	8012ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	691b      	ldr	r3, [r3, #16]
 8012e96:	f003 0320 	and.w	r3, r3, #32
 8012e9a:	2b20      	cmp	r3, #32
 8012e9c:	d0f0      	beq.n	8012e80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr
 8012eac:	00030d40 	.word	0x00030d40

08012eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	4a11      	ldr	r2, [pc, #68]	; (8012f0c <USB_FlushRxFifo+0x5c>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d901      	bls.n	8012ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012eca:	2303      	movs	r3, #3
 8012ecc:	e018      	b.n	8012f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	691b      	ldr	r3, [r3, #16]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	daf2      	bge.n	8012ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2210      	movs	r2, #16
 8012ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	4a08      	ldr	r2, [pc, #32]	; (8012f0c <USB_FlushRxFifo+0x5c>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d901      	bls.n	8012ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012eee:	2303      	movs	r3, #3
 8012ef0:	e006      	b.n	8012f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	691b      	ldr	r3, [r3, #16]
 8012ef6:	f003 0310 	and.w	r3, r3, #16
 8012efa:	2b10      	cmp	r3, #16
 8012efc:	d0f0      	beq.n	8012ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012efe:	2300      	movs	r3, #0
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3714      	adds	r7, #20
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr
 8012f0c:	00030d40 	.word	0x00030d40

08012f10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	460b      	mov	r3, r1
 8012f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	78fb      	ldrb	r3, [r7, #3]
 8012f2a:	68f9      	ldr	r1, [r7, #12]
 8012f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f30:	4313      	orrs	r3, r2
 8012f32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012f34:	2300      	movs	r3, #0
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012f42:	b480      	push	{r7}
 8012f44:	b087      	sub	sp, #28
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	f003 0306 	and.w	r3, r3, #6
 8012f5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d102      	bne.n	8012f68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012f62:	2300      	movs	r3, #0
 8012f64:	75fb      	strb	r3, [r7, #23]
 8012f66:	e00a      	b.n	8012f7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2b02      	cmp	r3, #2
 8012f6c:	d002      	beq.n	8012f74 <USB_GetDevSpeed+0x32>
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2b06      	cmp	r3, #6
 8012f72:	d102      	bne.n	8012f7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012f74:	2302      	movs	r3, #2
 8012f76:	75fb      	strb	r3, [r7, #23]
 8012f78:	e001      	b.n	8012f7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012f7a:	230f      	movs	r3, #15
 8012f7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	371c      	adds	r7, #28
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	785b      	ldrb	r3, [r3, #1]
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d139      	bne.n	801301c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fae:	69da      	ldr	r2, [r3, #28]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	f003 030f 	and.w	r3, r3, #15
 8012fb8:	2101      	movs	r1, #1
 8012fba:	fa01 f303 	lsl.w	r3, r1, r3
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	68f9      	ldr	r1, [r7, #12]
 8012fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fc6:	4313      	orrs	r3, r2
 8012fc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	015a      	lsls	r2, r3, #5
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d153      	bne.n	8013088 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	015a      	lsls	r2, r3, #5
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	791b      	ldrb	r3, [r3, #4]
 8012ffa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ffc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	059b      	lsls	r3, r3, #22
 8013002:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013004:	431a      	orrs	r2, r3
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	0159      	lsls	r1, r3, #5
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	440b      	add	r3, r1
 801300e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013012:	4619      	mov	r1, r3
 8013014:	4b20      	ldr	r3, [pc, #128]	; (8013098 <USB_ActivateEndpoint+0x10c>)
 8013016:	4313      	orrs	r3, r2
 8013018:	600b      	str	r3, [r1, #0]
 801301a:	e035      	b.n	8013088 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013022:	69da      	ldr	r2, [r3, #28]
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	f003 030f 	and.w	r3, r3, #15
 801302c:	2101      	movs	r1, #1
 801302e:	fa01 f303 	lsl.w	r3, r1, r3
 8013032:	041b      	lsls	r3, r3, #16
 8013034:	68f9      	ldr	r1, [r7, #12]
 8013036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801303a:	4313      	orrs	r3, r2
 801303c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	015a      	lsls	r2, r3, #5
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	4413      	add	r3, r2
 8013046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013050:	2b00      	cmp	r3, #0
 8013052:	d119      	bne.n	8013088 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	015a      	lsls	r2, r3, #5
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	4413      	add	r3, r2
 801305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	791b      	ldrb	r3, [r3, #4]
 801306e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013070:	430b      	orrs	r3, r1
 8013072:	431a      	orrs	r2, r3
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	0159      	lsls	r1, r3, #5
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	440b      	add	r3, r1
 801307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013080:	4619      	mov	r1, r3
 8013082:	4b05      	ldr	r3, [pc, #20]	; (8013098 <USB_ActivateEndpoint+0x10c>)
 8013084:	4313      	orrs	r3, r2
 8013086:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	3714      	adds	r7, #20
 801308e:	46bd      	mov	sp, r7
 8013090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013094:	4770      	bx	lr
 8013096:	bf00      	nop
 8013098:	10008000 	.word	0x10008000

0801309c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801309c:	b480      	push	{r7}
 801309e:	b085      	sub	sp, #20
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	785b      	ldrb	r3, [r3, #1]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d161      	bne.n	801317c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	015a      	lsls	r2, r3, #5
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	4413      	add	r3, r2
 80130c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130ce:	d11f      	bne.n	8013110 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	015a      	lsls	r2, r3, #5
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	4413      	add	r3, r2
 80130d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	0151      	lsls	r1, r2, #5
 80130e2:	68fa      	ldr	r2, [r7, #12]
 80130e4:	440a      	add	r2, r1
 80130e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80130ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	015a      	lsls	r2, r3, #5
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	4413      	add	r3, r2
 80130f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	68ba      	ldr	r2, [r7, #8]
 8013100:	0151      	lsls	r1, r2, #5
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	440a      	add	r2, r1
 8013106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801310a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801310e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 030f 	and.w	r3, r3, #15
 8013120:	2101      	movs	r1, #1
 8013122:	fa01 f303 	lsl.w	r3, r1, r3
 8013126:	b29b      	uxth	r3, r3
 8013128:	43db      	mvns	r3, r3
 801312a:	68f9      	ldr	r1, [r7, #12]
 801312c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013130:	4013      	ands	r3, r2
 8013132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801313a:	69da      	ldr	r2, [r3, #28]
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f003 030f 	and.w	r3, r3, #15
 8013144:	2101      	movs	r1, #1
 8013146:	fa01 f303 	lsl.w	r3, r1, r3
 801314a:	b29b      	uxth	r3, r3
 801314c:	43db      	mvns	r3, r3
 801314e:	68f9      	ldr	r1, [r7, #12]
 8013150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013154:	4013      	ands	r3, r2
 8013156:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	015a      	lsls	r2, r3, #5
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	4413      	add	r3, r2
 8013160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	0159      	lsls	r1, r3, #5
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	440b      	add	r3, r1
 801316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013172:	4619      	mov	r1, r3
 8013174:	4b35      	ldr	r3, [pc, #212]	; (801324c <USB_DeactivateEndpoint+0x1b0>)
 8013176:	4013      	ands	r3, r2
 8013178:	600b      	str	r3, [r1, #0]
 801317a:	e060      	b.n	801323e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801317c:	68bb      	ldr	r3, [r7, #8]
 801317e:	015a      	lsls	r2, r3, #5
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	4413      	add	r3, r2
 8013184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801318e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013192:	d11f      	bne.n	80131d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	015a      	lsls	r2, r3, #5
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	4413      	add	r3, r2
 801319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68ba      	ldr	r2, [r7, #8]
 80131a4:	0151      	lsls	r1, r2, #5
 80131a6:	68fa      	ldr	r2, [r7, #12]
 80131a8:	440a      	add	r2, r1
 80131aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80131b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	015a      	lsls	r2, r3, #5
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	4413      	add	r3, r2
 80131bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	68ba      	ldr	r2, [r7, #8]
 80131c4:	0151      	lsls	r1, r2, #5
 80131c6:	68fa      	ldr	r2, [r7, #12]
 80131c8:	440a      	add	r2, r1
 80131ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80131d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	f003 030f 	and.w	r3, r3, #15
 80131e4:	2101      	movs	r1, #1
 80131e6:	fa01 f303 	lsl.w	r3, r1, r3
 80131ea:	041b      	lsls	r3, r3, #16
 80131ec:	43db      	mvns	r3, r3
 80131ee:	68f9      	ldr	r1, [r7, #12]
 80131f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131f4:	4013      	ands	r3, r2
 80131f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fe:	69da      	ldr	r2, [r3, #28]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	f003 030f 	and.w	r3, r3, #15
 8013208:	2101      	movs	r1, #1
 801320a:	fa01 f303 	lsl.w	r3, r1, r3
 801320e:	041b      	lsls	r3, r3, #16
 8013210:	43db      	mvns	r3, r3
 8013212:	68f9      	ldr	r1, [r7, #12]
 8013214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013218:	4013      	ands	r3, r2
 801321a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	015a      	lsls	r2, r3, #5
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	4413      	add	r3, r2
 8013224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	0159      	lsls	r1, r3, #5
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	440b      	add	r3, r1
 8013232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013236:	4619      	mov	r1, r3
 8013238:	4b05      	ldr	r3, [pc, #20]	; (8013250 <USB_DeactivateEndpoint+0x1b4>)
 801323a:	4013      	ands	r3, r2
 801323c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801323e:	2300      	movs	r3, #0
}
 8013240:	4618      	mov	r0, r3
 8013242:	3714      	adds	r7, #20
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr
 801324c:	ec337800 	.word	0xec337800
 8013250:	eff37800 	.word	0xeff37800

08013254 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b08a      	sub	sp, #40	; 0x28
 8013258:	af02      	add	r7, sp, #8
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	4613      	mov	r3, r2
 8013260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	785b      	ldrb	r3, [r3, #1]
 8013270:	2b01      	cmp	r3, #1
 8013272:	f040 8181 	bne.w	8013578 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	691b      	ldr	r3, [r3, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d132      	bne.n	80132e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	015a      	lsls	r2, r3, #5
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	4413      	add	r3, r2
 8013286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801328a:	691a      	ldr	r2, [r3, #16]
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	0159      	lsls	r1, r3, #5
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	440b      	add	r3, r1
 8013294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013298:	4619      	mov	r1, r3
 801329a:	4ba5      	ldr	r3, [pc, #660]	; (8013530 <USB_EPStartXfer+0x2dc>)
 801329c:	4013      	ands	r3, r2
 801329e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	015a      	lsls	r2, r3, #5
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	4413      	add	r3, r2
 80132a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132ac:	691b      	ldr	r3, [r3, #16]
 80132ae:	69ba      	ldr	r2, [r7, #24]
 80132b0:	0151      	lsls	r1, r2, #5
 80132b2:	69fa      	ldr	r2, [r7, #28]
 80132b4:	440a      	add	r2, r1
 80132b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80132c0:	69bb      	ldr	r3, [r7, #24]
 80132c2:	015a      	lsls	r2, r3, #5
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	4413      	add	r3, r2
 80132c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132cc:	691a      	ldr	r2, [r3, #16]
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	0159      	lsls	r1, r3, #5
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	440b      	add	r3, r1
 80132d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132da:	4619      	mov	r1, r3
 80132dc:	4b95      	ldr	r3, [pc, #596]	; (8013534 <USB_EPStartXfer+0x2e0>)
 80132de:	4013      	ands	r3, r2
 80132e0:	610b      	str	r3, [r1, #16]
 80132e2:	e092      	b.n	801340a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f0:	691a      	ldr	r2, [r3, #16]
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	0159      	lsls	r1, r3, #5
 80132f6:	69fb      	ldr	r3, [r7, #28]
 80132f8:	440b      	add	r3, r1
 80132fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132fe:	4619      	mov	r1, r3
 8013300:	4b8c      	ldr	r3, [pc, #560]	; (8013534 <USB_EPStartXfer+0x2e0>)
 8013302:	4013      	ands	r3, r2
 8013304:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	015a      	lsls	r2, r3, #5
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	4413      	add	r3, r2
 801330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013312:	691a      	ldr	r2, [r3, #16]
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	0159      	lsls	r1, r3, #5
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	440b      	add	r3, r1
 801331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013320:	4619      	mov	r1, r3
 8013322:	4b83      	ldr	r3, [pc, #524]	; (8013530 <USB_EPStartXfer+0x2dc>)
 8013324:	4013      	ands	r3, r2
 8013326:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d11a      	bne.n	8013364 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	691a      	ldr	r2, [r3, #16]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	689b      	ldr	r3, [r3, #8]
 8013336:	429a      	cmp	r2, r3
 8013338:	d903      	bls.n	8013342 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	689a      	ldr	r2, [r3, #8]
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	015a      	lsls	r2, r3, #5
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	4413      	add	r3, r2
 801334a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801334e:	691b      	ldr	r3, [r3, #16]
 8013350:	69ba      	ldr	r2, [r7, #24]
 8013352:	0151      	lsls	r1, r2, #5
 8013354:	69fa      	ldr	r2, [r7, #28]
 8013356:	440a      	add	r2, r1
 8013358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801335c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013360:	6113      	str	r3, [r2, #16]
 8013362:	e01b      	b.n	801339c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	015a      	lsls	r2, r3, #5
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	4413      	add	r3, r2
 801336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013370:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	6919      	ldr	r1, [r3, #16]
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	440b      	add	r3, r1
 801337c:	1e59      	subs	r1, r3, #1
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	fbb1 f3f3 	udiv	r3, r1, r3
 8013386:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013388:	4b6b      	ldr	r3, [pc, #428]	; (8013538 <USB_EPStartXfer+0x2e4>)
 801338a:	400b      	ands	r3, r1
 801338c:	69b9      	ldr	r1, [r7, #24]
 801338e:	0148      	lsls	r0, r1, #5
 8013390:	69f9      	ldr	r1, [r7, #28]
 8013392:	4401      	add	r1, r0
 8013394:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013398:	4313      	orrs	r3, r2
 801339a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	015a      	lsls	r2, r3, #5
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	4413      	add	r3, r2
 80133a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133a8:	691a      	ldr	r2, [r3, #16]
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133b2:	69b9      	ldr	r1, [r7, #24]
 80133b4:	0148      	lsls	r0, r1, #5
 80133b6:	69f9      	ldr	r1, [r7, #28]
 80133b8:	4401      	add	r1, r0
 80133ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80133be:	4313      	orrs	r3, r2
 80133c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	791b      	ldrb	r3, [r3, #4]
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d11f      	bne.n	801340a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	015a      	lsls	r2, r3, #5
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	4413      	add	r3, r2
 80133d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	69ba      	ldr	r2, [r7, #24]
 80133da:	0151      	lsls	r1, r2, #5
 80133dc:	69fa      	ldr	r2, [r7, #28]
 80133de:	440a      	add	r2, r1
 80133e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80133e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	015a      	lsls	r2, r3, #5
 80133ee:	69fb      	ldr	r3, [r7, #28]
 80133f0:	4413      	add	r3, r2
 80133f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	69ba      	ldr	r2, [r7, #24]
 80133fa:	0151      	lsls	r1, r2, #5
 80133fc:	69fa      	ldr	r2, [r7, #28]
 80133fe:	440a      	add	r2, r1
 8013400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013408:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801340a:	79fb      	ldrb	r3, [r7, #7]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d14b      	bne.n	80134a8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	69db      	ldr	r3, [r3, #28]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d009      	beq.n	801342c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	015a      	lsls	r2, r3, #5
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	4413      	add	r3, r2
 8013420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013424:	461a      	mov	r2, r3
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	69db      	ldr	r3, [r3, #28]
 801342a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	791b      	ldrb	r3, [r3, #4]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d128      	bne.n	8013486 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013440:	2b00      	cmp	r3, #0
 8013442:	d110      	bne.n	8013466 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	015a      	lsls	r2, r3, #5
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	4413      	add	r3, r2
 801344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	69ba      	ldr	r2, [r7, #24]
 8013454:	0151      	lsls	r1, r2, #5
 8013456:	69fa      	ldr	r2, [r7, #28]
 8013458:	440a      	add	r2, r1
 801345a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801345e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	e00f      	b.n	8013486 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	015a      	lsls	r2, r3, #5
 801346a:	69fb      	ldr	r3, [r7, #28]
 801346c:	4413      	add	r3, r2
 801346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	69ba      	ldr	r2, [r7, #24]
 8013476:	0151      	lsls	r1, r2, #5
 8013478:	69fa      	ldr	r2, [r7, #28]
 801347a:	440a      	add	r2, r1
 801347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013484:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	015a      	lsls	r2, r3, #5
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	4413      	add	r3, r2
 801348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	69ba      	ldr	r2, [r7, #24]
 8013496:	0151      	lsls	r1, r2, #5
 8013498:	69fa      	ldr	r2, [r7, #28]
 801349a:	440a      	add	r2, r1
 801349c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80134a4:	6013      	str	r3, [r2, #0]
 80134a6:	e16a      	b.n	801377e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	015a      	lsls	r2, r3, #5
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	4413      	add	r3, r2
 80134b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	69ba      	ldr	r2, [r7, #24]
 80134b8:	0151      	lsls	r1, r2, #5
 80134ba:	69fa      	ldr	r2, [r7, #28]
 80134bc:	440a      	add	r2, r1
 80134be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80134c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	791b      	ldrb	r3, [r3, #4]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d015      	beq.n	80134fc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 8152 	beq.w	801377e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	f003 030f 	and.w	r3, r3, #15
 80134ea:	2101      	movs	r1, #1
 80134ec:	fa01 f303 	lsl.w	r3, r1, r3
 80134f0:	69f9      	ldr	r1, [r7, #28]
 80134f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134f6:	4313      	orrs	r3, r2
 80134f8:	634b      	str	r3, [r1, #52]	; 0x34
 80134fa:	e140      	b.n	801377e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013508:	2b00      	cmp	r3, #0
 801350a:	d117      	bne.n	801353c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	015a      	lsls	r2, r3, #5
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	4413      	add	r3, r2
 8013514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	69ba      	ldr	r2, [r7, #24]
 801351c:	0151      	lsls	r1, r2, #5
 801351e:	69fa      	ldr	r2, [r7, #28]
 8013520:	440a      	add	r2, r1
 8013522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	e016      	b.n	801355c <USB_EPStartXfer+0x308>
 801352e:	bf00      	nop
 8013530:	e007ffff 	.word	0xe007ffff
 8013534:	fff80000 	.word	0xfff80000
 8013538:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	015a      	lsls	r2, r3, #5
 8013540:	69fb      	ldr	r3, [r7, #28]
 8013542:	4413      	add	r3, r2
 8013544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	69ba      	ldr	r2, [r7, #24]
 801354c:	0151      	lsls	r1, r2, #5
 801354e:	69fa      	ldr	r2, [r7, #28]
 8013550:	440a      	add	r2, r1
 8013552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801355a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	68d9      	ldr	r1, [r3, #12]
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	781a      	ldrb	r2, [r3, #0]
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	691b      	ldr	r3, [r3, #16]
 8013568:	b298      	uxth	r0, r3
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	9300      	str	r3, [sp, #0]
 801356e:	4603      	mov	r3, r0
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	f000 f9b9 	bl	80138e8 <USB_WritePacket>
 8013576:	e102      	b.n	801377e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	015a      	lsls	r2, r3, #5
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	4413      	add	r3, r2
 8013580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013584:	691a      	ldr	r2, [r3, #16]
 8013586:	69bb      	ldr	r3, [r7, #24]
 8013588:	0159      	lsls	r1, r3, #5
 801358a:	69fb      	ldr	r3, [r7, #28]
 801358c:	440b      	add	r3, r1
 801358e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013592:	4619      	mov	r1, r3
 8013594:	4b7c      	ldr	r3, [pc, #496]	; (8013788 <USB_EPStartXfer+0x534>)
 8013596:	4013      	ands	r3, r2
 8013598:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	015a      	lsls	r2, r3, #5
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	4413      	add	r3, r2
 80135a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a6:	691a      	ldr	r2, [r3, #16]
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	0159      	lsls	r1, r3, #5
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	440b      	add	r3, r1
 80135b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b4:	4619      	mov	r1, r3
 80135b6:	4b75      	ldr	r3, [pc, #468]	; (801378c <USB_EPStartXfer+0x538>)
 80135b8:	4013      	ands	r3, r2
 80135ba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d12f      	bne.n	8013622 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	691b      	ldr	r3, [r3, #16]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d003      	beq.n	80135d2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	689a      	ldr	r2, [r3, #8]
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	689a      	ldr	r2, [r3, #8]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80135da:	69bb      	ldr	r3, [r7, #24]
 80135dc:	015a      	lsls	r2, r3, #5
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	4413      	add	r3, r2
 80135e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135e6:	691a      	ldr	r2, [r3, #16]
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	6a1b      	ldr	r3, [r3, #32]
 80135ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135f0:	69b9      	ldr	r1, [r7, #24]
 80135f2:	0148      	lsls	r0, r1, #5
 80135f4:	69f9      	ldr	r1, [r7, #28]
 80135f6:	4401      	add	r1, r0
 80135f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80135fc:	4313      	orrs	r3, r2
 80135fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	015a      	lsls	r2, r3, #5
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	4413      	add	r3, r2
 8013608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	69ba      	ldr	r2, [r7, #24]
 8013610:	0151      	lsls	r1, r2, #5
 8013612:	69fa      	ldr	r2, [r7, #28]
 8013614:	440a      	add	r2, r1
 8013616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801361a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801361e:	6113      	str	r3, [r2, #16]
 8013620:	e05f      	b.n	80136e2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d123      	bne.n	8013672 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	015a      	lsls	r2, r3, #5
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	4413      	add	r3, r2
 8013632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013636:	691a      	ldr	r2, [r3, #16]
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013640:	69b9      	ldr	r1, [r7, #24]
 8013642:	0148      	lsls	r0, r1, #5
 8013644:	69f9      	ldr	r1, [r7, #28]
 8013646:	4401      	add	r1, r0
 8013648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801364c:	4313      	orrs	r3, r2
 801364e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	015a      	lsls	r2, r3, #5
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	4413      	add	r3, r2
 8013658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801365c:	691b      	ldr	r3, [r3, #16]
 801365e:	69ba      	ldr	r2, [r7, #24]
 8013660:	0151      	lsls	r1, r2, #5
 8013662:	69fa      	ldr	r2, [r7, #28]
 8013664:	440a      	add	r2, r1
 8013666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801366a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801366e:	6113      	str	r3, [r2, #16]
 8013670:	e037      	b.n	80136e2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	691a      	ldr	r2, [r3, #16]
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	4413      	add	r3, r2
 801367c:	1e5a      	subs	r2, r3, #1
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	fbb2 f3f3 	udiv	r3, r2, r3
 8013686:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	8afa      	ldrh	r2, [r7, #22]
 801368e:	fb03 f202 	mul.w	r2, r3, r2
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	015a      	lsls	r2, r3, #5
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	4413      	add	r3, r2
 801369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a2:	691a      	ldr	r2, [r3, #16]
 80136a4:	8afb      	ldrh	r3, [r7, #22]
 80136a6:	04d9      	lsls	r1, r3, #19
 80136a8:	4b39      	ldr	r3, [pc, #228]	; (8013790 <USB_EPStartXfer+0x53c>)
 80136aa:	400b      	ands	r3, r1
 80136ac:	69b9      	ldr	r1, [r7, #24]
 80136ae:	0148      	lsls	r0, r1, #5
 80136b0:	69f9      	ldr	r1, [r7, #28]
 80136b2:	4401      	add	r1, r0
 80136b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136b8:	4313      	orrs	r3, r2
 80136ba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	015a      	lsls	r2, r3, #5
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	4413      	add	r3, r2
 80136c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136c8:	691a      	ldr	r2, [r3, #16]
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	6a1b      	ldr	r3, [r3, #32]
 80136ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136d2:	69b9      	ldr	r1, [r7, #24]
 80136d4:	0148      	lsls	r0, r1, #5
 80136d6:	69f9      	ldr	r1, [r7, #28]
 80136d8:	4401      	add	r1, r0
 80136da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136de:	4313      	orrs	r3, r2
 80136e0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80136e2:	79fb      	ldrb	r3, [r7, #7]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d10d      	bne.n	8013704 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d009      	beq.n	8013704 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	68d9      	ldr	r1, [r3, #12]
 80136f4:	69bb      	ldr	r3, [r7, #24]
 80136f6:	015a      	lsls	r2, r3, #5
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	4413      	add	r3, r2
 80136fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013700:	460a      	mov	r2, r1
 8013702:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	791b      	ldrb	r3, [r3, #4]
 8013708:	2b01      	cmp	r3, #1
 801370a:	d128      	bne.n	801375e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013712:	689b      	ldr	r3, [r3, #8]
 8013714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013718:	2b00      	cmp	r3, #0
 801371a:	d110      	bne.n	801373e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	015a      	lsls	r2, r3, #5
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	4413      	add	r3, r2
 8013724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	69ba      	ldr	r2, [r7, #24]
 801372c:	0151      	lsls	r1, r2, #5
 801372e:	69fa      	ldr	r2, [r7, #28]
 8013730:	440a      	add	r2, r1
 8013732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801373a:	6013      	str	r3, [r2, #0]
 801373c:	e00f      	b.n	801375e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	015a      	lsls	r2, r3, #5
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	4413      	add	r3, r2
 8013746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	69ba      	ldr	r2, [r7, #24]
 801374e:	0151      	lsls	r1, r2, #5
 8013750:	69fa      	ldr	r2, [r7, #28]
 8013752:	440a      	add	r2, r1
 8013754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801375c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	015a      	lsls	r2, r3, #5
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	4413      	add	r3, r2
 8013766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	69ba      	ldr	r2, [r7, #24]
 801376e:	0151      	lsls	r1, r2, #5
 8013770:	69fa      	ldr	r2, [r7, #28]
 8013772:	440a      	add	r2, r1
 8013774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013778:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801377c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3720      	adds	r7, #32
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	fff80000 	.word	0xfff80000
 801378c:	e007ffff 	.word	0xe007ffff
 8013790:	1ff80000 	.word	0x1ff80000

08013794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013794:	b480      	push	{r7}
 8013796:	b087      	sub	sp, #28
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801379e:	2300      	movs	r3, #0
 80137a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80137a2:	2300      	movs	r3, #0
 80137a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	785b      	ldrb	r3, [r3, #1]
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d14a      	bne.n	8013848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	015a      	lsls	r2, r3, #5
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	4413      	add	r3, r2
 80137bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137ca:	f040 8086 	bne.w	80138da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	015a      	lsls	r2, r3, #5
 80137d4:	693b      	ldr	r3, [r7, #16]
 80137d6:	4413      	add	r3, r2
 80137d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	7812      	ldrb	r2, [r2, #0]
 80137e2:	0151      	lsls	r1, r2, #5
 80137e4:	693a      	ldr	r2, [r7, #16]
 80137e6:	440a      	add	r2, r1
 80137e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80137f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	015a      	lsls	r2, r3, #5
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	4413      	add	r3, r2
 80137fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	683a      	ldr	r2, [r7, #0]
 8013804:	7812      	ldrb	r2, [r2, #0]
 8013806:	0151      	lsls	r1, r2, #5
 8013808:	693a      	ldr	r2, [r7, #16]
 801380a:	440a      	add	r2, r1
 801380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	3301      	adds	r3, #1
 801381a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013822:	4293      	cmp	r3, r2
 8013824:	d902      	bls.n	801382c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013826:	2301      	movs	r3, #1
 8013828:	75fb      	strb	r3, [r7, #23]
          break;
 801382a:	e056      	b.n	80138da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	015a      	lsls	r2, r3, #5
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	4413      	add	r3, r2
 8013836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013844:	d0e7      	beq.n	8013816 <USB_EPStopXfer+0x82>
 8013846:	e048      	b.n	80138da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	015a      	lsls	r2, r3, #5
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	4413      	add	r3, r2
 8013852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801385c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013860:	d13b      	bne.n	80138da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	781b      	ldrb	r3, [r3, #0]
 8013866:	015a      	lsls	r2, r3, #5
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	4413      	add	r3, r2
 801386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	683a      	ldr	r2, [r7, #0]
 8013874:	7812      	ldrb	r2, [r2, #0]
 8013876:	0151      	lsls	r1, r2, #5
 8013878:	693a      	ldr	r2, [r7, #16]
 801387a:	440a      	add	r2, r1
 801387c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	015a      	lsls	r2, r3, #5
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	4413      	add	r3, r2
 8013890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	683a      	ldr	r2, [r7, #0]
 8013898:	7812      	ldrb	r2, [r2, #0]
 801389a:	0151      	lsls	r1, r2, #5
 801389c:	693a      	ldr	r2, [r7, #16]
 801389e:	440a      	add	r2, r1
 80138a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80138a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	3301      	adds	r3, #1
 80138ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d902      	bls.n	80138c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	75fb      	strb	r3, [r7, #23]
          break;
 80138be:	e00c      	b.n	80138da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	015a      	lsls	r2, r3, #5
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	4413      	add	r3, r2
 80138ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138d8:	d0e7      	beq.n	80138aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80138da:	7dfb      	ldrb	r3, [r7, #23]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	371c      	adds	r7, #28
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b089      	sub	sp, #36	; 0x24
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	4611      	mov	r1, r2
 80138f4:	461a      	mov	r2, r3
 80138f6:	460b      	mov	r3, r1
 80138f8:	71fb      	strb	r3, [r7, #7]
 80138fa:	4613      	mov	r3, r2
 80138fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801390a:	2b00      	cmp	r3, #0
 801390c:	d123      	bne.n	8013956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801390e:	88bb      	ldrh	r3, [r7, #4]
 8013910:	3303      	adds	r3, #3
 8013912:	089b      	lsrs	r3, r3, #2
 8013914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013916:	2300      	movs	r3, #0
 8013918:	61bb      	str	r3, [r7, #24]
 801391a:	e018      	b.n	801394e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	031a      	lsls	r2, r3, #12
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	4413      	add	r3, r2
 8013924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013928:	461a      	mov	r2, r3
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	3301      	adds	r3, #1
 8013934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	3301      	adds	r3, #1
 801393a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	3301      	adds	r3, #1
 8013940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	3301      	adds	r3, #1
 8013946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	3301      	adds	r3, #1
 801394c:	61bb      	str	r3, [r7, #24]
 801394e:	69ba      	ldr	r2, [r7, #24]
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	429a      	cmp	r2, r3
 8013954:	d3e2      	bcc.n	801391c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013956:	2300      	movs	r3, #0
}
 8013958:	4618      	mov	r0, r3
 801395a:	3724      	adds	r7, #36	; 0x24
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013964:	b480      	push	{r7}
 8013966:	b08b      	sub	sp, #44	; 0x2c
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	4613      	mov	r3, r2
 8013970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801397a:	88fb      	ldrh	r3, [r7, #6]
 801397c:	089b      	lsrs	r3, r3, #2
 801397e:	b29b      	uxth	r3, r3
 8013980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013982:	88fb      	ldrh	r3, [r7, #6]
 8013984:	f003 0303 	and.w	r3, r3, #3
 8013988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801398a:	2300      	movs	r3, #0
 801398c:	623b      	str	r3, [r7, #32]
 801398e:	e014      	b.n	80139ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013990:	69bb      	ldr	r3, [r7, #24]
 8013992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399a:	601a      	str	r2, [r3, #0]
    pDest++;
 801399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399e:	3301      	adds	r3, #1
 80139a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a4:	3301      	adds	r3, #1
 80139a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139aa:	3301      	adds	r3, #1
 80139ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b0:	3301      	adds	r3, #1
 80139b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80139b4:	6a3b      	ldr	r3, [r7, #32]
 80139b6:	3301      	adds	r3, #1
 80139b8:	623b      	str	r3, [r7, #32]
 80139ba:	6a3a      	ldr	r2, [r7, #32]
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d3e6      	bcc.n	8013990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80139c2:	8bfb      	ldrh	r3, [r7, #30]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d01e      	beq.n	8013a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80139c8:	2300      	movs	r3, #0
 80139ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139d2:	461a      	mov	r2, r3
 80139d4:	f107 0310 	add.w	r3, r7, #16
 80139d8:	6812      	ldr	r2, [r2, #0]
 80139da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80139dc:	693a      	ldr	r2, [r7, #16]
 80139de:	6a3b      	ldr	r3, [r7, #32]
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	00db      	lsls	r3, r3, #3
 80139e4:	fa22 f303 	lsr.w	r3, r2, r3
 80139e8:	b2da      	uxtb	r2, r3
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	701a      	strb	r2, [r3, #0]
      i++;
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	3301      	adds	r3, #1
 80139f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	3301      	adds	r3, #1
 80139f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80139fa:	8bfb      	ldrh	r3, [r7, #30]
 80139fc:	3b01      	subs	r3, #1
 80139fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013a00:	8bfb      	ldrh	r3, [r7, #30]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d1ea      	bne.n	80139dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	372c      	adds	r7, #44	; 0x2c
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	785b      	ldrb	r3, [r3, #1]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d12c      	bne.n	8013a8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	015a      	lsls	r2, r3, #5
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	4413      	add	r3, r2
 8013a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	db12      	blt.n	8013a68 <USB_EPSetStall+0x54>
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d00f      	beq.n	8013a68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	015a      	lsls	r2, r3, #5
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	4413      	add	r3, r2
 8013a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	68ba      	ldr	r2, [r7, #8]
 8013a58:	0151      	lsls	r1, r2, #5
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	440a      	add	r2, r1
 8013a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013a66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	015a      	lsls	r2, r3, #5
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	4413      	add	r3, r2
 8013a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68ba      	ldr	r2, [r7, #8]
 8013a78:	0151      	lsls	r1, r2, #5
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	440a      	add	r2, r1
 8013a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a86:	6013      	str	r3, [r2, #0]
 8013a88:	e02b      	b.n	8013ae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	015a      	lsls	r2, r3, #5
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	4413      	add	r3, r2
 8013a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	db12      	blt.n	8013ac2 <USB_EPSetStall+0xae>
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00f      	beq.n	8013ac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	015a      	lsls	r2, r3, #5
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	68ba      	ldr	r2, [r7, #8]
 8013ab2:	0151      	lsls	r1, r2, #5
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	440a      	add	r2, r1
 8013ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	015a      	lsls	r2, r3, #5
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	4413      	add	r3, r2
 8013aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	0151      	lsls	r1, r2, #5
 8013ad4:	68fa      	ldr	r2, [r7, #12]
 8013ad6:	440a      	add	r2, r1
 8013ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ae2:	2300      	movs	r3, #0
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3714      	adds	r7, #20
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013af0:	b480      	push	{r7}
 8013af2:	b085      	sub	sp, #20
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	785b      	ldrb	r3, [r3, #1]
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d128      	bne.n	8013b5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	015a      	lsls	r2, r3, #5
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	4413      	add	r3, r2
 8013b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	68ba      	ldr	r2, [r7, #8]
 8013b1c:	0151      	lsls	r1, r2, #5
 8013b1e:	68fa      	ldr	r2, [r7, #12]
 8013b20:	440a      	add	r2, r1
 8013b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d003      	beq.n	8013b3c <USB_EPClearStall+0x4c>
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	791b      	ldrb	r3, [r3, #4]
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	d138      	bne.n	8013bae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	015a      	lsls	r2, r3, #5
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	4413      	add	r3, r2
 8013b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	0151      	lsls	r1, r2, #5
 8013b4e:	68fa      	ldr	r2, [r7, #12]
 8013b50:	440a      	add	r2, r1
 8013b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b5a:	6013      	str	r3, [r2, #0]
 8013b5c:	e027      	b.n	8013bae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	015a      	lsls	r2, r3, #5
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	4413      	add	r3, r2
 8013b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68ba      	ldr	r2, [r7, #8]
 8013b6e:	0151      	lsls	r1, r2, #5
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	440a      	add	r2, r1
 8013b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	791b      	ldrb	r3, [r3, #4]
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d003      	beq.n	8013b8e <USB_EPClearStall+0x9e>
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	791b      	ldrb	r3, [r3, #4]
 8013b8a:	2b02      	cmp	r3, #2
 8013b8c:	d10f      	bne.n	8013bae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	015a      	lsls	r2, r3, #5
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	4413      	add	r3, r2
 8013b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	68ba      	ldr	r2, [r7, #8]
 8013b9e:	0151      	lsls	r1, r2, #5
 8013ba0:	68fa      	ldr	r2, [r7, #12]
 8013ba2:	440a      	add	r2, r1
 8013ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013bae:	2300      	movs	r3, #0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3714      	adds	r7, #20
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b085      	sub	sp, #20
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013bde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	78fb      	ldrb	r3, [r7, #3]
 8013bea:	011b      	lsls	r3, r3, #4
 8013bec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013bf0:	68f9      	ldr	r1, [r7, #12]
 8013bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013bfa:	2300      	movs	r3, #0
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3714      	adds	r7, #20
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c22:	f023 0303 	bic.w	r3, r3, #3
 8013c26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c2e:	685b      	ldr	r3, [r3, #4]
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c36:	f023 0302 	bic.w	r3, r3, #2
 8013c3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c3c:	2300      	movs	r3, #0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3714      	adds	r7, #20
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c4a:	b480      	push	{r7}
 8013c4c:	b085      	sub	sp, #20
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013c64:	f023 0303 	bic.w	r3, r3, #3
 8013c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c78:	f043 0302 	orr.w	r3, r3, #2
 8013c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c7e:	2300      	movs	r3, #0
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	3714      	adds	r7, #20
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	695b      	ldr	r3, [r3, #20]
 8013c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	699b      	ldr	r3, [r3, #24]
 8013c9e:	68fa      	ldr	r2, [r7, #12]
 8013ca0:	4013      	ands	r3, r2
 8013ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3714      	adds	r7, #20
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr

08013cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013cb2:	b480      	push	{r7}
 8013cb4:	b085      	sub	sp, #20
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cc4:	699b      	ldr	r3, [r3, #24]
 8013cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cce:	69db      	ldr	r3, [r3, #28]
 8013cd0:	68ba      	ldr	r2, [r7, #8]
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	0c1b      	lsrs	r3, r3, #16
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3714      	adds	r7, #20
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr

08013ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ce6:	b480      	push	{r7}
 8013ce8:	b085      	sub	sp, #20
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cf8:	699b      	ldr	r3, [r3, #24]
 8013cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d02:	69db      	ldr	r3, [r3, #28]
 8013d04:	68ba      	ldr	r2, [r7, #8]
 8013d06:	4013      	ands	r3, r2
 8013d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	b29b      	uxth	r3, r3
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3714      	adds	r7, #20
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b085      	sub	sp, #20
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	460b      	mov	r3, r1
 8013d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013d2a:	78fb      	ldrb	r3, [r7, #3]
 8013d2c:	015a      	lsls	r2, r3, #5
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	4413      	add	r3, r2
 8013d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d36:	689b      	ldr	r3, [r3, #8]
 8013d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d40:	695b      	ldr	r3, [r3, #20]
 8013d42:	68ba      	ldr	r2, [r7, #8]
 8013d44:	4013      	ands	r3, r2
 8013d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013d48:	68bb      	ldr	r3, [r7, #8]
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d56:	b480      	push	{r7}
 8013d58:	b087      	sub	sp, #28
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	460b      	mov	r3, r1
 8013d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d6c:	691b      	ldr	r3, [r3, #16]
 8013d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013d7a:	78fb      	ldrb	r3, [r7, #3]
 8013d7c:	f003 030f 	and.w	r3, r3, #15
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	fa22 f303 	lsr.w	r3, r2, r3
 8013d86:	01db      	lsls	r3, r3, #7
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	693a      	ldr	r2, [r7, #16]
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d9c:	689b      	ldr	r3, [r3, #8]
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	4013      	ands	r3, r2
 8013da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013da4:	68bb      	ldr	r3, [r7, #8]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	371c      	adds	r7, #28
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr

08013db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013db2:	b480      	push	{r7}
 8013db4:	b083      	sub	sp, #12
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	695b      	ldr	r3, [r3, #20]
 8013dbe:	f003 0301 	and.w	r3, r3, #1
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
	...

08013dd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b085      	sub	sp, #20
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dea:	4619      	mov	r1, r3
 8013dec:	4b09      	ldr	r3, [pc, #36]	; (8013e14 <USB_ActivateSetup+0x44>)
 8013dee:	4013      	ands	r3, r2
 8013df0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	68fa      	ldr	r2, [r7, #12]
 8013dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e06:	2300      	movs	r3, #0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr
 8013e14:	fffff800 	.word	0xfffff800

08013e18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b087      	sub	sp, #28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	460b      	mov	r3, r1
 8013e22:	607a      	str	r2, [r7, #4]
 8013e24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	333c      	adds	r3, #60	; 0x3c
 8013e2e:	3304      	adds	r3, #4
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	4a26      	ldr	r2, [pc, #152]	; (8013ed0 <USB_EP0_OutStart+0xb8>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d90a      	bls.n	8013e52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e4c:	d101      	bne.n	8013e52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	e037      	b.n	8013ec2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e58:	461a      	mov	r2, r3
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e64:	691b      	ldr	r3, [r3, #16]
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e78:	691b      	ldr	r3, [r3, #16]
 8013e7a:	697a      	ldr	r2, [r7, #20]
 8013e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e80:	f043 0318 	orr.w	r3, r3, #24
 8013e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	697a      	ldr	r2, [r7, #20]
 8013e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013e98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013e9a:	7afb      	ldrb	r3, [r7, #11]
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d10f      	bne.n	8013ec0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ea6:	461a      	mov	r2, r3
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	697a      	ldr	r2, [r7, #20]
 8013eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013ebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013ec0:	2300      	movs	r3, #0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	371c      	adds	r7, #28
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	4f54300a 	.word	0x4f54300a

08013ed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013edc:	2300      	movs	r3, #0
 8013ede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4a13      	ldr	r2, [pc, #76]	; (8013f38 <USB_CoreReset+0x64>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d901      	bls.n	8013ef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013eee:	2303      	movs	r3, #3
 8013ef0:	e01b      	b.n	8013f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	691b      	ldr	r3, [r3, #16]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	daf2      	bge.n	8013ee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013efa:	2300      	movs	r3, #0
 8013efc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	f043 0201 	orr.w	r2, r3, #1
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	4a09      	ldr	r2, [pc, #36]	; (8013f38 <USB_CoreReset+0x64>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d901      	bls.n	8013f1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013f18:	2303      	movs	r3, #3
 8013f1a:	e006      	b.n	8013f2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	691b      	ldr	r3, [r3, #16]
 8013f20:	f003 0301 	and.w	r3, r3, #1
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d0f0      	beq.n	8013f0a <USB_CoreReset+0x36>

  return HAL_OK;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3714      	adds	r7, #20
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop
 8013f38:	00030d40 	.word	0x00030d40

08013f3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013f40:	4904      	ldr	r1, [pc, #16]	; (8013f54 <MX_FATFS_Init+0x18>)
 8013f42:	4805      	ldr	r0, [pc, #20]	; (8013f58 <MX_FATFS_Init+0x1c>)
 8013f44:	f002 fa56 	bl	80163f4 <FATFS_LinkDriver>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	4b03      	ldr	r3, [pc, #12]	; (8013f5c <MX_FATFS_Init+0x20>)
 8013f4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013f50:	bf00      	nop
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	24001704 	.word	0x24001704
 8013f58:	0801b5e4 	.word	0x0801b5e4
 8013f5c:	24001700 	.word	0x24001700

08013f60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013f66:	2300      	movs	r3, #0
 8013f68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013f6a:	f000 f885 	bl	8014078 <BSP_SD_IsDetected>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d001      	beq.n	8013f78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013f74:	2302      	movs	r3, #2
 8013f76:	e012      	b.n	8013f9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013f78:	480b      	ldr	r0, [pc, #44]	; (8013fa8 <BSP_SD_Init+0x48>)
 8013f7a:	f7f8 ff99 	bl	800ceb0 <HAL_SD_Init>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013f82:	79fb      	ldrb	r3, [r7, #7]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d109      	bne.n	8013f9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013f88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013f8c:	4806      	ldr	r0, [pc, #24]	; (8013fa8 <BSP_SD_Init+0x48>)
 8013f8e:	f7f9 fe4f 	bl	800dc30 <HAL_SD_ConfigWideBusOperation>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d001      	beq.n	8013f9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3708      	adds	r7, #8
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	24001034 	.word	0x24001034

08013fac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b086      	sub	sp, #24
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	68f9      	ldr	r1, [r7, #12]
 8013fc2:	4806      	ldr	r0, [pc, #24]	; (8013fdc <BSP_SD_ReadBlocks_DMA+0x30>)
 8013fc4:	f7f9 f894 	bl	800d0f0 <HAL_SD_ReadBlocks_DMA>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d001      	beq.n	8013fd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013fce:	2301      	movs	r3, #1
 8013fd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3718      	adds	r7, #24
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	24001034 	.word	0x24001034

08013fe0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013fec:	2300      	movs	r3, #0
 8013fee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	68f9      	ldr	r1, [r7, #12]
 8013ff6:	4806      	ldr	r0, [pc, #24]	; (8014010 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013ff8:	f7f9 f922 	bl	800d240 <HAL_SD_WriteBlocks_DMA>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014002:	2301      	movs	r3, #1
 8014004:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014006:	7dfb      	ldrb	r3, [r7, #23]
}
 8014008:	4618      	mov	r0, r3
 801400a:	3718      	adds	r7, #24
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	24001034 	.word	0x24001034

08014014 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014018:	4805      	ldr	r0, [pc, #20]	; (8014030 <BSP_SD_GetCardState+0x1c>)
 801401a:	f7f9 ff1b 	bl	800de54 <HAL_SD_GetCardState>
 801401e:	4603      	mov	r3, r0
 8014020:	2b04      	cmp	r3, #4
 8014022:	bf14      	ite	ne
 8014024:	2301      	movne	r3, #1
 8014026:	2300      	moveq	r3, #0
 8014028:	b2db      	uxtb	r3, r3
}
 801402a:	4618      	mov	r0, r3
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	24001034 	.word	0x24001034

08014034 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b082      	sub	sp, #8
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801403c:	6879      	ldr	r1, [r7, #4]
 801403e:	4803      	ldr	r0, [pc, #12]	; (801404c <BSP_SD_GetCardInfo+0x18>)
 8014040:	f7f9 fdca 	bl	800dbd8 <HAL_SD_GetCardInfo>
}
 8014044:	bf00      	nop
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	24001034 	.word	0x24001034

08014050 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014058:	f000 f9a0 	bl	801439c <BSP_SD_WriteCpltCallback>
}
 801405c:	bf00      	nop
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801406c:	f000 f9a2 	bl	80143b4 <BSP_SD_ReadCpltCallback>
}
 8014070:	bf00      	nop
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801407e:	2301      	movs	r3, #1
 8014080:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014082:	f000 f80b 	bl	801409c <BSP_PlatformIsDetected>
 8014086:	4603      	mov	r3, r0
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801408c:	2300      	movs	r3, #0
 801408e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014090:	79fb      	ldrb	r3, [r7, #7]
 8014092:	b2db      	uxtb	r3, r3
}
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80140a2:	2301      	movs	r3, #1
 80140a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80140a6:	2104      	movs	r1, #4
 80140a8:	4806      	ldr	r0, [pc, #24]	; (80140c4 <BSP_PlatformIsDetected+0x28>)
 80140aa:	f7f3 feef 	bl	8007e8c <HAL_GPIO_ReadPin>
 80140ae:	4603      	mov	r3, r0
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d001      	beq.n	80140b8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80140b4:	2300      	movs	r3, #0
 80140b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80140b8:	79fb      	ldrb	r3, [r7, #7]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	58020400 	.word	0x58020400

080140c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80140d0:	f7ef fc36 	bl	8003940 <HAL_GetTick>
 80140d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80140d6:	e006      	b.n	80140e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80140d8:	f7ff ff9c 	bl	8014014 <BSP_SD_GetCardState>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d101      	bne.n	80140e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80140e2:	2300      	movs	r3, #0
 80140e4:	e009      	b.n	80140fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80140e6:	f7ef fc2b 	bl	8003940 <HAL_GetTick>
 80140ea:	4602      	mov	r2, r0
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	1ad3      	subs	r3, r2, r3
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d8f0      	bhi.n	80140d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80140f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3710      	adds	r7, #16
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
	...

08014104 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801410e:	4b0b      	ldr	r3, [pc, #44]	; (801413c <SD_CheckStatus+0x38>)
 8014110:	2201      	movs	r2, #1
 8014112:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014114:	f7ff ff7e 	bl	8014014 <BSP_SD_GetCardState>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d107      	bne.n	801412e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801411e:	4b07      	ldr	r3, [pc, #28]	; (801413c <SD_CheckStatus+0x38>)
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	b2db      	uxtb	r3, r3
 8014124:	f023 0301 	bic.w	r3, r3, #1
 8014128:	b2da      	uxtb	r2, r3
 801412a:	4b04      	ldr	r3, [pc, #16]	; (801413c <SD_CheckStatus+0x38>)
 801412c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801412e:	4b03      	ldr	r3, [pc, #12]	; (801413c <SD_CheckStatus+0x38>)
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	b2db      	uxtb	r3, r3
}
 8014134:	4618      	mov	r0, r3
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	2400000d 	.word	0x2400000d

08014140 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	4603      	mov	r3, r0
 8014148:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801414a:	f7ff ff09 	bl	8013f60 <BSP_SD_Init>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d107      	bne.n	8014164 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014154:	79fb      	ldrb	r3, [r7, #7]
 8014156:	4618      	mov	r0, r3
 8014158:	f7ff ffd4 	bl	8014104 <SD_CheckStatus>
 801415c:	4603      	mov	r3, r0
 801415e:	461a      	mov	r2, r3
 8014160:	4b04      	ldr	r3, [pc, #16]	; (8014174 <SD_initialize+0x34>)
 8014162:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014164:	4b03      	ldr	r3, [pc, #12]	; (8014174 <SD_initialize+0x34>)
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	b2db      	uxtb	r3, r3
}
 801416a:	4618      	mov	r0, r3
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	2400000d 	.word	0x2400000d

08014178 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	4603      	mov	r3, r0
 8014180:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014182:	79fb      	ldrb	r3, [r7, #7]
 8014184:	4618      	mov	r0, r3
 8014186:	f7ff ffbd 	bl	8014104 <SD_CheckStatus>
 801418a:	4603      	mov	r3, r0
}
 801418c:	4618      	mov	r0, r3
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b086      	sub	sp, #24
 8014198:	af00      	add	r7, sp, #0
 801419a:	60b9      	str	r1, [r7, #8]
 801419c:	607a      	str	r2, [r7, #4]
 801419e:	603b      	str	r3, [r7, #0]
 80141a0:	4603      	mov	r3, r0
 80141a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80141a4:	2301      	movs	r3, #1
 80141a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80141a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80141ac:	f7ff ff8c 	bl	80140c8 <SD_CheckStatusWithTimeout>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	da01      	bge.n	80141ba <SD_read+0x26>
  {
    return res;
 80141b6:	7dfb      	ldrb	r3, [r7, #23]
 80141b8:	e03b      	b.n	8014232 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80141ba:	683a      	ldr	r2, [r7, #0]
 80141bc:	6879      	ldr	r1, [r7, #4]
 80141be:	68b8      	ldr	r0, [r7, #8]
 80141c0:	f7ff fef4 	bl	8013fac <BSP_SD_ReadBlocks_DMA>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d132      	bne.n	8014230 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80141ca:	4b1c      	ldr	r3, [pc, #112]	; (801423c <SD_read+0xa8>)
 80141cc:	2200      	movs	r2, #0
 80141ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80141d0:	f7ef fbb6 	bl	8003940 <HAL_GetTick>
 80141d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80141d6:	bf00      	nop
 80141d8:	4b18      	ldr	r3, [pc, #96]	; (801423c <SD_read+0xa8>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d108      	bne.n	80141f2 <SD_read+0x5e>
 80141e0:	f7ef fbae 	bl	8003940 <HAL_GetTick>
 80141e4:	4602      	mov	r2, r0
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	1ad3      	subs	r3, r2, r3
 80141ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80141ee:	4293      	cmp	r3, r2
 80141f0:	d9f2      	bls.n	80141d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80141f2:	4b12      	ldr	r3, [pc, #72]	; (801423c <SD_read+0xa8>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d102      	bne.n	8014200 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80141fa:	2301      	movs	r3, #1
 80141fc:	75fb      	strb	r3, [r7, #23]
 80141fe:	e017      	b.n	8014230 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014200:	4b0e      	ldr	r3, [pc, #56]	; (801423c <SD_read+0xa8>)
 8014202:	2200      	movs	r2, #0
 8014204:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014206:	f7ef fb9b 	bl	8003940 <HAL_GetTick>
 801420a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801420c:	e007      	b.n	801421e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801420e:	f7ff ff01 	bl	8014014 <BSP_SD_GetCardState>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d102      	bne.n	801421e <SD_read+0x8a>
          {
            res = RES_OK;
 8014218:	2300      	movs	r3, #0
 801421a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801421c:	e008      	b.n	8014230 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801421e:	f7ef fb8f 	bl	8003940 <HAL_GetTick>
 8014222:	4602      	mov	r2, r0
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	f247 522f 	movw	r2, #29999	; 0x752f
 801422c:	4293      	cmp	r3, r2
 801422e:	d9ee      	bls.n	801420e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014230:	7dfb      	ldrb	r3, [r7, #23]
}
 8014232:	4618      	mov	r0, r3
 8014234:	3718      	adds	r7, #24
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	2400170c 	.word	0x2400170c

08014240 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b086      	sub	sp, #24
 8014244:	af00      	add	r7, sp, #0
 8014246:	60b9      	str	r1, [r7, #8]
 8014248:	607a      	str	r2, [r7, #4]
 801424a:	603b      	str	r3, [r7, #0]
 801424c:	4603      	mov	r3, r0
 801424e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014250:	2301      	movs	r3, #1
 8014252:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014254:	4b24      	ldr	r3, [pc, #144]	; (80142e8 <SD_write+0xa8>)
 8014256:	2200      	movs	r2, #0
 8014258:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801425a:	f247 5030 	movw	r0, #30000	; 0x7530
 801425e:	f7ff ff33 	bl	80140c8 <SD_CheckStatusWithTimeout>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	da01      	bge.n	801426c <SD_write+0x2c>
  {
    return res;
 8014268:	7dfb      	ldrb	r3, [r7, #23]
 801426a:	e038      	b.n	80142de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801426c:	683a      	ldr	r2, [r7, #0]
 801426e:	6879      	ldr	r1, [r7, #4]
 8014270:	68b8      	ldr	r0, [r7, #8]
 8014272:	f7ff feb5 	bl	8013fe0 <BSP_SD_WriteBlocks_DMA>
 8014276:	4603      	mov	r3, r0
 8014278:	2b00      	cmp	r3, #0
 801427a:	d12f      	bne.n	80142dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801427c:	f7ef fb60 	bl	8003940 <HAL_GetTick>
 8014280:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014282:	bf00      	nop
 8014284:	4b18      	ldr	r3, [pc, #96]	; (80142e8 <SD_write+0xa8>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d108      	bne.n	801429e <SD_write+0x5e>
 801428c:	f7ef fb58 	bl	8003940 <HAL_GetTick>
 8014290:	4602      	mov	r2, r0
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	1ad3      	subs	r3, r2, r3
 8014296:	f247 522f 	movw	r2, #29999	; 0x752f
 801429a:	4293      	cmp	r3, r2
 801429c:	d9f2      	bls.n	8014284 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801429e:	4b12      	ldr	r3, [pc, #72]	; (80142e8 <SD_write+0xa8>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d102      	bne.n	80142ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	75fb      	strb	r3, [r7, #23]
 80142aa:	e017      	b.n	80142dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80142ac:	4b0e      	ldr	r3, [pc, #56]	; (80142e8 <SD_write+0xa8>)
 80142ae:	2200      	movs	r2, #0
 80142b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80142b2:	f7ef fb45 	bl	8003940 <HAL_GetTick>
 80142b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80142b8:	e007      	b.n	80142ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142ba:	f7ff feab 	bl	8014014 <BSP_SD_GetCardState>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <SD_write+0x8a>
          {
            res = RES_OK;
 80142c4:	2300      	movs	r3, #0
 80142c6:	75fb      	strb	r3, [r7, #23]
            break;
 80142c8:	e008      	b.n	80142dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80142ca:	f7ef fb39 	bl	8003940 <HAL_GetTick>
 80142ce:	4602      	mov	r2, r0
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80142d8:	4293      	cmp	r3, r2
 80142da:	d9ee      	bls.n	80142ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80142dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3718      	adds	r7, #24
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	24001708 	.word	0x24001708

080142ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b08c      	sub	sp, #48	; 0x30
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	4603      	mov	r3, r0
 80142f4:	603a      	str	r2, [r7, #0]
 80142f6:	71fb      	strb	r3, [r7, #7]
 80142f8:	460b      	mov	r3, r1
 80142fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80142fc:	2301      	movs	r3, #1
 80142fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014302:	4b25      	ldr	r3, [pc, #148]	; (8014398 <SD_ioctl+0xac>)
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	b2db      	uxtb	r3, r3
 8014308:	f003 0301 	and.w	r3, r3, #1
 801430c:	2b00      	cmp	r3, #0
 801430e:	d001      	beq.n	8014314 <SD_ioctl+0x28>
 8014310:	2303      	movs	r3, #3
 8014312:	e03c      	b.n	801438e <SD_ioctl+0xa2>

  switch (cmd)
 8014314:	79bb      	ldrb	r3, [r7, #6]
 8014316:	2b03      	cmp	r3, #3
 8014318:	d834      	bhi.n	8014384 <SD_ioctl+0x98>
 801431a:	a201      	add	r2, pc, #4	; (adr r2, 8014320 <SD_ioctl+0x34>)
 801431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014320:	08014331 	.word	0x08014331
 8014324:	08014339 	.word	0x08014339
 8014328:	08014351 	.word	0x08014351
 801432c:	0801436b 	.word	0x0801436b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014330:	2300      	movs	r3, #0
 8014332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014336:	e028      	b.n	801438a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014338:	f107 0308 	add.w	r3, r7, #8
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fe79 	bl	8014034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014342:	6a3a      	ldr	r2, [r7, #32]
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014348:	2300      	movs	r3, #0
 801434a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801434e:	e01c      	b.n	801438a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014350:	f107 0308 	add.w	r3, r7, #8
 8014354:	4618      	mov	r0, r3
 8014356:	f7ff fe6d 	bl	8014034 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	b29a      	uxth	r2, r3
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014362:	2300      	movs	r3, #0
 8014364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014368:	e00f      	b.n	801438a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801436a:	f107 0308 	add.w	r3, r7, #8
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff fe60 	bl	8014034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014376:	0a5a      	lsrs	r2, r3, #9
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014382:	e002      	b.n	801438a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014384:	2304      	movs	r3, #4
 8014386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801438a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801438e:	4618      	mov	r0, r3
 8014390:	3730      	adds	r7, #48	; 0x30
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	2400000d 	.word	0x2400000d

0801439c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801439c:	b480      	push	{r7}
 801439e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80143a0:	4b03      	ldr	r3, [pc, #12]	; (80143b0 <BSP_SD_WriteCpltCallback+0x14>)
 80143a2:	2201      	movs	r2, #1
 80143a4:	601a      	str	r2, [r3, #0]
}
 80143a6:	bf00      	nop
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr
 80143b0:	24001708 	.word	0x24001708

080143b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80143b4:	b480      	push	{r7}
 80143b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80143b8:	4b03      	ldr	r3, [pc, #12]	; (80143c8 <BSP_SD_ReadCpltCallback+0x14>)
 80143ba:	2201      	movs	r2, #1
 80143bc:	601a      	str	r2, [r3, #0]
}
 80143be:	bf00      	nop
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr
 80143c8:	2400170c 	.word	0x2400170c

080143cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	460b      	mov	r3, r1
 80143d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80143d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80143dc:	f002 fd00 	bl	8016de0 <USBD_static_malloc>
 80143e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	32b0      	adds	r2, #176	; 0xb0
 80143f2:	2100      	movs	r1, #0
 80143f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80143f8:	2302      	movs	r3, #2
 80143fa:	e0d4      	b.n	80145a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80143fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014400:	2100      	movs	r1, #0
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f003 fc93 	bl	8017d2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	32b0      	adds	r2, #176	; 0xb0
 8014412:	68f9      	ldr	r1, [r7, #12]
 8014414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	32b0      	adds	r2, #176	; 0xb0
 8014422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	7c1b      	ldrb	r3, [r3, #16]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d138      	bne.n	80144a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014434:	4b5e      	ldr	r3, [pc, #376]	; (80145b0 <USBD_CDC_Init+0x1e4>)
 8014436:	7819      	ldrb	r1, [r3, #0]
 8014438:	f44f 7300 	mov.w	r3, #512	; 0x200
 801443c:	2202      	movs	r2, #2
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f002 fbab 	bl	8016b9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014444:	4b5a      	ldr	r3, [pc, #360]	; (80145b0 <USBD_CDC_Init+0x1e4>)
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	f003 020f 	and.w	r2, r3, #15
 801444c:	6879      	ldr	r1, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	009b      	lsls	r3, r3, #2
 8014452:	4413      	add	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	440b      	add	r3, r1
 8014458:	3324      	adds	r3, #36	; 0x24
 801445a:	2201      	movs	r2, #1
 801445c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801445e:	4b55      	ldr	r3, [pc, #340]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 8014460:	7819      	ldrb	r1, [r3, #0]
 8014462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014466:	2202      	movs	r2, #2
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f002 fb96 	bl	8016b9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801446e:	4b51      	ldr	r3, [pc, #324]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 020f 	and.w	r2, r3, #15
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4613      	mov	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	440b      	add	r3, r1
 8014482:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014486:	2201      	movs	r2, #1
 8014488:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801448a:	4b4b      	ldr	r3, [pc, #300]	; (80145b8 <USBD_CDC_Init+0x1ec>)
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	f003 020f 	and.w	r2, r3, #15
 8014492:	6879      	ldr	r1, [r7, #4]
 8014494:	4613      	mov	r3, r2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4413      	add	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	440b      	add	r3, r1
 801449e:	3326      	adds	r3, #38	; 0x26
 80144a0:	2210      	movs	r2, #16
 80144a2:	801a      	strh	r2, [r3, #0]
 80144a4:	e035      	b.n	8014512 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144a6:	4b42      	ldr	r3, [pc, #264]	; (80145b0 <USBD_CDC_Init+0x1e4>)
 80144a8:	7819      	ldrb	r1, [r3, #0]
 80144aa:	2340      	movs	r3, #64	; 0x40
 80144ac:	2202      	movs	r2, #2
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f002 fb73 	bl	8016b9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144b4:	4b3e      	ldr	r3, [pc, #248]	; (80145b0 <USBD_CDC_Init+0x1e4>)
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	f003 020f 	and.w	r2, r3, #15
 80144bc:	6879      	ldr	r1, [r7, #4]
 80144be:	4613      	mov	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	4413      	add	r3, r2
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	440b      	add	r3, r1
 80144c8:	3324      	adds	r3, #36	; 0x24
 80144ca:	2201      	movs	r2, #1
 80144cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144ce:	4b39      	ldr	r3, [pc, #228]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 80144d0:	7819      	ldrb	r1, [r3, #0]
 80144d2:	2340      	movs	r3, #64	; 0x40
 80144d4:	2202      	movs	r2, #2
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f002 fb5f 	bl	8016b9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144dc:	4b35      	ldr	r3, [pc, #212]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	f003 020f 	and.w	r2, r3, #15
 80144e4:	6879      	ldr	r1, [r7, #4]
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	440b      	add	r3, r1
 80144f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144f4:	2201      	movs	r2, #1
 80144f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80144f8:	4b2f      	ldr	r3, [pc, #188]	; (80145b8 <USBD_CDC_Init+0x1ec>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	f003 020f 	and.w	r2, r3, #15
 8014500:	6879      	ldr	r1, [r7, #4]
 8014502:	4613      	mov	r3, r2
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	440b      	add	r3, r1
 801450c:	3326      	adds	r3, #38	; 0x26
 801450e:	2210      	movs	r2, #16
 8014510:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014512:	4b29      	ldr	r3, [pc, #164]	; (80145b8 <USBD_CDC_Init+0x1ec>)
 8014514:	7819      	ldrb	r1, [r3, #0]
 8014516:	2308      	movs	r3, #8
 8014518:	2203      	movs	r2, #3
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f002 fb3d 	bl	8016b9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014520:	4b25      	ldr	r3, [pc, #148]	; (80145b8 <USBD_CDC_Init+0x1ec>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	f003 020f 	and.w	r2, r3, #15
 8014528:	6879      	ldr	r1, [r7, #4]
 801452a:	4613      	mov	r3, r2
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	4413      	add	r3, r2
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	440b      	add	r3, r1
 8014534:	3324      	adds	r3, #36	; 0x24
 8014536:	2201      	movs	r2, #1
 8014538:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	33b0      	adds	r3, #176	; 0xb0
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4413      	add	r3, r2
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2200      	movs	r2, #0
 801455a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2200      	movs	r2, #0
 8014562:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801456c:	2b00      	cmp	r3, #0
 801456e:	d101      	bne.n	8014574 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014570:	2302      	movs	r3, #2
 8014572:	e018      	b.n	80145a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	7c1b      	ldrb	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10a      	bne.n	8014592 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801457c:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 801457e:	7819      	ldrb	r1, [r3, #0]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014586:	f44f 7300 	mov.w	r3, #512	; 0x200
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f002 fbf4 	bl	8016d78 <USBD_LL_PrepareReceive>
 8014590:	e008      	b.n	80145a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014592:	4b08      	ldr	r3, [pc, #32]	; (80145b4 <USBD_CDC_Init+0x1e8>)
 8014594:	7819      	ldrb	r1, [r3, #0]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801459c:	2340      	movs	r3, #64	; 0x40
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f002 fbea 	bl	8016d78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	24000097 	.word	0x24000097
 80145b4:	24000098 	.word	0x24000098
 80145b8:	24000099 	.word	0x24000099

080145bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80145c8:	4b3a      	ldr	r3, [pc, #232]	; (80146b4 <USBD_CDC_DeInit+0xf8>)
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	4619      	mov	r1, r3
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f002 fb09 	bl	8016be6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80145d4:	4b37      	ldr	r3, [pc, #220]	; (80146b4 <USBD_CDC_DeInit+0xf8>)
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	f003 020f 	and.w	r2, r3, #15
 80145dc:	6879      	ldr	r1, [r7, #4]
 80145de:	4613      	mov	r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	4413      	add	r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	440b      	add	r3, r1
 80145e8:	3324      	adds	r3, #36	; 0x24
 80145ea:	2200      	movs	r2, #0
 80145ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80145ee:	4b32      	ldr	r3, [pc, #200]	; (80146b8 <USBD_CDC_DeInit+0xfc>)
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f002 faf6 	bl	8016be6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80145fa:	4b2f      	ldr	r3, [pc, #188]	; (80146b8 <USBD_CDC_DeInit+0xfc>)
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	f003 020f 	and.w	r2, r3, #15
 8014602:	6879      	ldr	r1, [r7, #4]
 8014604:	4613      	mov	r3, r2
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	440b      	add	r3, r1
 801460e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014612:	2200      	movs	r2, #0
 8014614:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014616:	4b29      	ldr	r3, [pc, #164]	; (80146bc <USBD_CDC_DeInit+0x100>)
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	4619      	mov	r1, r3
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f002 fae2 	bl	8016be6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014622:	4b26      	ldr	r3, [pc, #152]	; (80146bc <USBD_CDC_DeInit+0x100>)
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	f003 020f 	and.w	r2, r3, #15
 801462a:	6879      	ldr	r1, [r7, #4]
 801462c:	4613      	mov	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4413      	add	r3, r2
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	440b      	add	r3, r1
 8014636:	3324      	adds	r3, #36	; 0x24
 8014638:	2200      	movs	r2, #0
 801463a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801463c:	4b1f      	ldr	r3, [pc, #124]	; (80146bc <USBD_CDC_DeInit+0x100>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	f003 020f 	and.w	r2, r3, #15
 8014644:	6879      	ldr	r1, [r7, #4]
 8014646:	4613      	mov	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4413      	add	r3, r2
 801464c:	009b      	lsls	r3, r3, #2
 801464e:	440b      	add	r3, r1
 8014650:	3326      	adds	r3, #38	; 0x26
 8014652:	2200      	movs	r2, #0
 8014654:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	32b0      	adds	r2, #176	; 0xb0
 8014660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d01f      	beq.n	80146a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	33b0      	adds	r3, #176	; 0xb0
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	32b0      	adds	r2, #176	; 0xb0
 8014686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801468a:	4618      	mov	r0, r3
 801468c:	f002 fbb6 	bl	8016dfc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	32b0      	adds	r2, #176	; 0xb0
 801469a:	2100      	movs	r1, #0
 801469c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	24000097 	.word	0x24000097
 80146b8:	24000098 	.word	0x24000098
 80146bc:	24000099 	.word	0x24000099

080146c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	32b0      	adds	r2, #176	; 0xb0
 80146d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80146da:	2300      	movs	r3, #0
 80146dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80146de:	2300      	movs	r3, #0
 80146e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80146ec:	2303      	movs	r3, #3
 80146ee:	e0bf      	b.n	8014870 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d050      	beq.n	801479e <USBD_CDC_Setup+0xde>
 80146fc:	2b20      	cmp	r3, #32
 80146fe:	f040 80af 	bne.w	8014860 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	88db      	ldrh	r3, [r3, #6]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d03a      	beq.n	8014780 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	b25b      	sxtb	r3, r3
 8014710:	2b00      	cmp	r3, #0
 8014712:	da1b      	bge.n	801474c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801471a:	687a      	ldr	r2, [r7, #4]
 801471c:	33b0      	adds	r3, #176	; 0xb0
 801471e:	009b      	lsls	r3, r3, #2
 8014720:	4413      	add	r3, r2
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	683a      	ldr	r2, [r7, #0]
 8014728:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801472a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801472c:	683a      	ldr	r2, [r7, #0]
 801472e:	88d2      	ldrh	r2, [r2, #6]
 8014730:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	88db      	ldrh	r3, [r3, #6]
 8014736:	2b07      	cmp	r3, #7
 8014738:	bf28      	it	cs
 801473a:	2307      	movcs	r3, #7
 801473c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	89fa      	ldrh	r2, [r7, #14]
 8014742:	4619      	mov	r1, r3
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f001 fd89 	bl	801625c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801474a:	e090      	b.n	801486e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	785a      	ldrb	r2, [r3, #1]
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	88db      	ldrh	r3, [r3, #6]
 801475a:	2b3f      	cmp	r3, #63	; 0x3f
 801475c:	d803      	bhi.n	8014766 <USBD_CDC_Setup+0xa6>
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	88db      	ldrh	r3, [r3, #6]
 8014762:	b2da      	uxtb	r2, r3
 8014764:	e000      	b.n	8014768 <USBD_CDC_Setup+0xa8>
 8014766:	2240      	movs	r2, #64	; 0x40
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801476e:	6939      	ldr	r1, [r7, #16]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014776:	461a      	mov	r2, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f001 fd9b 	bl	80162b4 <USBD_CtlPrepareRx>
      break;
 801477e:	e076      	b.n	801486e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	33b0      	adds	r3, #176	; 0xb0
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	4413      	add	r3, r2
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	689b      	ldr	r3, [r3, #8]
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	7850      	ldrb	r0, [r2, #1]
 8014796:	2200      	movs	r2, #0
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	4798      	blx	r3
      break;
 801479c:	e067      	b.n	801486e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	785b      	ldrb	r3, [r3, #1]
 80147a2:	2b0b      	cmp	r3, #11
 80147a4:	d851      	bhi.n	801484a <USBD_CDC_Setup+0x18a>
 80147a6:	a201      	add	r2, pc, #4	; (adr r2, 80147ac <USBD_CDC_Setup+0xec>)
 80147a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ac:	080147dd 	.word	0x080147dd
 80147b0:	08014859 	.word	0x08014859
 80147b4:	0801484b 	.word	0x0801484b
 80147b8:	0801484b 	.word	0x0801484b
 80147bc:	0801484b 	.word	0x0801484b
 80147c0:	0801484b 	.word	0x0801484b
 80147c4:	0801484b 	.word	0x0801484b
 80147c8:	0801484b 	.word	0x0801484b
 80147cc:	0801484b 	.word	0x0801484b
 80147d0:	0801484b 	.word	0x0801484b
 80147d4:	08014807 	.word	0x08014807
 80147d8:	08014831 	.word	0x08014831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d107      	bne.n	80147f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80147e8:	f107 030a 	add.w	r3, r7, #10
 80147ec:	2202      	movs	r2, #2
 80147ee:	4619      	mov	r1, r3
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f001 fd33 	bl	801625c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80147f6:	e032      	b.n	801485e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f001 fcbd 	bl	801617a <USBD_CtlError>
            ret = USBD_FAIL;
 8014800:	2303      	movs	r3, #3
 8014802:	75fb      	strb	r3, [r7, #23]
          break;
 8014804:	e02b      	b.n	801485e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b03      	cmp	r3, #3
 8014810:	d107      	bne.n	8014822 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014812:	f107 030d 	add.w	r3, r7, #13
 8014816:	2201      	movs	r2, #1
 8014818:	4619      	mov	r1, r3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f001 fd1e 	bl	801625c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014820:	e01d      	b.n	801485e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f001 fca8 	bl	801617a <USBD_CtlError>
            ret = USBD_FAIL;
 801482a:	2303      	movs	r3, #3
 801482c:	75fb      	strb	r3, [r7, #23]
          break;
 801482e:	e016      	b.n	801485e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b03      	cmp	r3, #3
 801483a:	d00f      	beq.n	801485c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f001 fc9b 	bl	801617a <USBD_CtlError>
            ret = USBD_FAIL;
 8014844:	2303      	movs	r3, #3
 8014846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014848:	e008      	b.n	801485c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801484a:	6839      	ldr	r1, [r7, #0]
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f001 fc94 	bl	801617a <USBD_CtlError>
          ret = USBD_FAIL;
 8014852:	2303      	movs	r3, #3
 8014854:	75fb      	strb	r3, [r7, #23]
          break;
 8014856:	e002      	b.n	801485e <USBD_CDC_Setup+0x19e>
          break;
 8014858:	bf00      	nop
 801485a:	e008      	b.n	801486e <USBD_CDC_Setup+0x1ae>
          break;
 801485c:	bf00      	nop
      }
      break;
 801485e:	e006      	b.n	801486e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014860:	6839      	ldr	r1, [r7, #0]
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 fc89 	bl	801617a <USBD_CtlError>
      ret = USBD_FAIL;
 8014868:	2303      	movs	r3, #3
 801486a:	75fb      	strb	r3, [r7, #23]
      break;
 801486c:	bf00      	nop
  }

  return (uint8_t)ret;
 801486e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3718      	adds	r7, #24
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	460b      	mov	r3, r1
 8014882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801488a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	32b0      	adds	r2, #176	; 0xb0
 8014896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d101      	bne.n	80148a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801489e:	2303      	movs	r3, #3
 80148a0:	e065      	b.n	801496e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	32b0      	adds	r2, #176	; 0xb0
 80148ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80148b2:	78fb      	ldrb	r3, [r7, #3]
 80148b4:	f003 020f 	and.w	r2, r3, #15
 80148b8:	6879      	ldr	r1, [r7, #4]
 80148ba:	4613      	mov	r3, r2
 80148bc:	009b      	lsls	r3, r3, #2
 80148be:	4413      	add	r3, r2
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	440b      	add	r3, r1
 80148c4:	3318      	adds	r3, #24
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d02f      	beq.n	801492c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80148cc:	78fb      	ldrb	r3, [r7, #3]
 80148ce:	f003 020f 	and.w	r2, r3, #15
 80148d2:	6879      	ldr	r1, [r7, #4]
 80148d4:	4613      	mov	r3, r2
 80148d6:	009b      	lsls	r3, r3, #2
 80148d8:	4413      	add	r3, r2
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	440b      	add	r3, r1
 80148de:	3318      	adds	r3, #24
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	78fb      	ldrb	r3, [r7, #3]
 80148e4:	f003 010f 	and.w	r1, r3, #15
 80148e8:	68f8      	ldr	r0, [r7, #12]
 80148ea:	460b      	mov	r3, r1
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	440b      	add	r3, r1
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	4403      	add	r3, r0
 80148f4:	3344      	adds	r3, #68	; 0x44
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80148fc:	fb01 f303 	mul.w	r3, r1, r3
 8014900:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014902:	2b00      	cmp	r3, #0
 8014904:	d112      	bne.n	801492c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014906:	78fb      	ldrb	r3, [r7, #3]
 8014908:	f003 020f 	and.w	r2, r3, #15
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	4613      	mov	r3, r2
 8014910:	009b      	lsls	r3, r3, #2
 8014912:	4413      	add	r3, r2
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	440b      	add	r3, r1
 8014918:	3318      	adds	r3, #24
 801491a:	2200      	movs	r2, #0
 801491c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801491e:	78f9      	ldrb	r1, [r7, #3]
 8014920:	2300      	movs	r3, #0
 8014922:	2200      	movs	r2, #0
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f002 fa06 	bl	8016d36 <USBD_LL_Transmit>
 801492a:	e01f      	b.n	801496c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	2200      	movs	r2, #0
 8014930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	33b0      	adds	r3, #176	; 0xb0
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	4413      	add	r3, r2
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	691b      	ldr	r3, [r3, #16]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d010      	beq.n	801496c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	33b0      	adds	r3, #176	; 0xb0
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	691b      	ldr	r3, [r3, #16]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014968:	78fa      	ldrb	r2, [r7, #3]
 801496a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801496c:	2300      	movs	r3, #0
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	460b      	mov	r3, r1
 8014980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	32b0      	adds	r2, #176	; 0xb0
 801498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014990:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	32b0      	adds	r2, #176	; 0xb0
 801499c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d101      	bne.n	80149a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80149a4:	2303      	movs	r3, #3
 80149a6:	e01a      	b.n	80149de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80149a8:	78fb      	ldrb	r3, [r7, #3]
 80149aa:	4619      	mov	r1, r3
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f002 fa04 	bl	8016dba <USBD_LL_GetRxDataSize>
 80149b2:	4602      	mov	r2, r0
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	33b0      	adds	r3, #176	; 0xb0
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4413      	add	r3, r2
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80149d8:	4611      	mov	r1, r2
 80149da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80149dc:	2300      	movs	r3, #0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b084      	sub	sp, #16
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	32b0      	adds	r2, #176	; 0xb0
 80149f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a04:	2303      	movs	r3, #3
 8014a06:	e025      	b.n	8014a54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	33b0      	adds	r3, #176	; 0xb0
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4413      	add	r3, r2
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01a      	beq.n	8014a52 <USBD_CDC_EP0_RxReady+0x6c>
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014a22:	2bff      	cmp	r3, #255	; 0xff
 8014a24:	d015      	beq.n	8014a52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	33b0      	adds	r3, #176	; 0xb0
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	4413      	add	r3, r2
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014a3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014a40:	68fa      	ldr	r2, [r7, #12]
 8014a42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a46:	b292      	uxth	r2, r2
 8014a48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	22ff      	movs	r2, #255	; 0xff
 8014a4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014a52:	2300      	movs	r3, #0
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3710      	adds	r7, #16
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014a64:	2182      	movs	r1, #130	; 0x82
 8014a66:	4818      	ldr	r0, [pc, #96]	; (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a68:	f000 fd4f 	bl	801550a <USBD_GetEpDesc>
 8014a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014a6e:	2101      	movs	r1, #1
 8014a70:	4815      	ldr	r0, [pc, #84]	; (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a72:	f000 fd4a 	bl	801550a <USBD_GetEpDesc>
 8014a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014a78:	2181      	movs	r1, #129	; 0x81
 8014a7a:	4813      	ldr	r0, [pc, #76]	; (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a7c:	f000 fd45 	bl	801550a <USBD_GetEpDesc>
 8014a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d002      	beq.n	8014a8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	2210      	movs	r2, #16
 8014a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d006      	beq.n	8014aa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a9c:	711a      	strb	r2, [r3, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d006      	beq.n	8014ab6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ab0:	711a      	strb	r2, [r3, #4]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2243      	movs	r2, #67	; 0x43
 8014aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014abc:	4b02      	ldr	r3, [pc, #8]	; (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3718      	adds	r7, #24
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	24000054 	.word	0x24000054

08014acc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ad4:	2182      	movs	r1, #130	; 0x82
 8014ad6:	4818      	ldr	r0, [pc, #96]	; (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ad8:	f000 fd17 	bl	801550a <USBD_GetEpDesc>
 8014adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ade:	2101      	movs	r1, #1
 8014ae0:	4815      	ldr	r0, [pc, #84]	; (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ae2:	f000 fd12 	bl	801550a <USBD_GetEpDesc>
 8014ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ae8:	2181      	movs	r1, #129	; 0x81
 8014aea:	4813      	ldr	r0, [pc, #76]	; (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014aec:	f000 fd0d 	bl	801550a <USBD_GetEpDesc>
 8014af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	2210      	movs	r2, #16
 8014afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d006      	beq.n	8014b12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2200      	movs	r2, #0
 8014b08:	711a      	strb	r2, [r3, #4]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f042 0202 	orr.w	r2, r2, #2
 8014b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d006      	beq.n	8014b26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	711a      	strb	r2, [r3, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f042 0202 	orr.w	r2, r2, #2
 8014b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2243      	movs	r2, #67	; 0x43
 8014b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b2c:	4b02      	ldr	r3, [pc, #8]	; (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	24000054 	.word	0x24000054

08014b3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b086      	sub	sp, #24
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b44:	2182      	movs	r1, #130	; 0x82
 8014b46:	4818      	ldr	r0, [pc, #96]	; (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b48:	f000 fcdf 	bl	801550a <USBD_GetEpDesc>
 8014b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b4e:	2101      	movs	r1, #1
 8014b50:	4815      	ldr	r0, [pc, #84]	; (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b52:	f000 fcda 	bl	801550a <USBD_GetEpDesc>
 8014b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b58:	2181      	movs	r1, #129	; 0x81
 8014b5a:	4813      	ldr	r0, [pc, #76]	; (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b5c:	f000 fcd5 	bl	801550a <USBD_GetEpDesc>
 8014b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	2210      	movs	r2, #16
 8014b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d006      	beq.n	8014b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	2200      	movs	r2, #0
 8014b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b7c:	711a      	strb	r2, [r3, #4]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d006      	beq.n	8014b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b90:	711a      	strb	r2, [r3, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2243      	movs	r2, #67	; 0x43
 8014b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b9c:	4b02      	ldr	r3, [pc, #8]	; (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3718      	adds	r7, #24
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	24000054 	.word	0x24000054

08014bac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	220a      	movs	r2, #10
 8014bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014bba:	4b03      	ldr	r3, [pc, #12]	; (8014bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr
 8014bc8:	24000010 	.word	0x24000010

08014bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e009      	b.n	8014bf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	33b0      	adds	r3, #176	; 0xb0
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	4413      	add	r3, r2
 8014bee:	683a      	ldr	r2, [r7, #0]
 8014bf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b087      	sub	sp, #28
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	32b0      	adds	r2, #176	; 0xb0
 8014c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d101      	bne.n	8014c26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014c22:	2303      	movs	r3, #3
 8014c24:	e008      	b.n	8014c38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014c36:	2300      	movs	r3, #0
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	371c      	adds	r7, #28
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr

08014c44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b085      	sub	sp, #20
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	32b0      	adds	r2, #176	; 0xb0
 8014c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e004      	b.n	8014c72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	683a      	ldr	r2, [r7, #0]
 8014c6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr
	...

08014c80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	32b0      	adds	r2, #176	; 0xb0
 8014c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d101      	bne.n	8014ca6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	e025      	b.n	8014cf2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d11f      	bne.n	8014cf0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014cb8:	4b10      	ldr	r3, [pc, #64]	; (8014cfc <USBD_CDC_TransmitPacket+0x7c>)
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	f003 020f 	and.w	r2, r3, #15
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	4413      	add	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4403      	add	r3, r0
 8014cd2:	3318      	adds	r3, #24
 8014cd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014cd6:	4b09      	ldr	r3, [pc, #36]	; (8014cfc <USBD_CDC_TransmitPacket+0x7c>)
 8014cd8:	7819      	ldrb	r1, [r3, #0]
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f002 f825 	bl	8016d36 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014cec:	2300      	movs	r3, #0
 8014cee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	24000097 	.word	0x24000097

08014d00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	32b0      	adds	r2, #176	; 0xb0
 8014d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	32b0      	adds	r2, #176	; 0xb0
 8014d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d101      	bne.n	8014d2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	e018      	b.n	8014d60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	7c1b      	ldrb	r3, [r3, #16]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10a      	bne.n	8014d4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d36:	4b0c      	ldr	r3, [pc, #48]	; (8014d68 <USBD_CDC_ReceivePacket+0x68>)
 8014d38:	7819      	ldrb	r1, [r3, #0]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f002 f817 	bl	8016d78 <USBD_LL_PrepareReceive>
 8014d4a:	e008      	b.n	8014d5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d4c:	4b06      	ldr	r3, [pc, #24]	; (8014d68 <USBD_CDC_ReceivePacket+0x68>)
 8014d4e:	7819      	ldrb	r1, [r3, #0]
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d56:	2340      	movs	r3, #64	; 0x40
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f002 f80d 	bl	8016d78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014d5e:	2300      	movs	r3, #0
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	24000098 	.word	0x24000098

08014d6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	60f8      	str	r0, [r7, #12]
 8014d74:	60b9      	str	r1, [r7, #8]
 8014d76:	4613      	mov	r3, r2
 8014d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d101      	bne.n	8014d84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014d80:	2303      	movs	r3, #3
 8014d82:	e01f      	b.n	8014dc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2200      	movs	r2, #0
 8014d88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2200      	movs	r2, #0
 8014d98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2201      	movs	r2, #1
 8014dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	79fa      	ldrb	r2, [r7, #7]
 8014db6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f001 fe81 	bl	8016ac0 <USBD_LL_Init>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014de0:	2303      	movs	r3, #3
 8014de2:	e025      	b.n	8014e30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	32ae      	adds	r2, #174	; 0xae
 8014df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00f      	beq.n	8014e20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	32ae      	adds	r2, #174	; 0xae
 8014e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e10:	f107 020e 	add.w	r2, r7, #14
 8014e14:	4610      	mov	r0, r2
 8014e16:	4798      	blx	r3
 8014e18:	4602      	mov	r2, r0
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f001 fe8f 	bl	8016b64 <USBD_LL_Start>
 8014e46:	4603      	mov	r3, r0
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014e58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	370c      	adds	r7, #12
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr

08014e66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b084      	sub	sp, #16
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	460b      	mov	r3, r1
 8014e70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e72:	2300      	movs	r3, #0
 8014e74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d009      	beq.n	8014e94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	78fa      	ldrb	r2, [r7, #3]
 8014e8a:	4611      	mov	r1, r2
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	4798      	blx	r3
 8014e90:	4603      	mov	r3, r0
 8014e92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	78fa      	ldrb	r2, [r7, #3]
 8014eb8:	4611      	mov	r1, r2
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	4798      	blx	r3
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d001      	beq.n	8014ec8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f001 f90e 	bl	8016106 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014ef8:	461a      	mov	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f06:	f003 031f 	and.w	r3, r3, #31
 8014f0a:	2b02      	cmp	r3, #2
 8014f0c:	d01a      	beq.n	8014f44 <USBD_LL_SetupStage+0x72>
 8014f0e:	2b02      	cmp	r3, #2
 8014f10:	d822      	bhi.n	8014f58 <USBD_LL_SetupStage+0x86>
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d002      	beq.n	8014f1c <USBD_LL_SetupStage+0x4a>
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d00a      	beq.n	8014f30 <USBD_LL_SetupStage+0x5e>
 8014f1a:	e01d      	b.n	8014f58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f22:	4619      	mov	r1, r3
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f000 fb65 	bl	80155f4 <USBD_StdDevReq>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f2e:	e020      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f36:	4619      	mov	r1, r3
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f000 fbcd 	bl	80156d8 <USBD_StdItfReq>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	73fb      	strb	r3, [r7, #15]
      break;
 8014f42:	e016      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f000 fc2f 	bl	80157b0 <USBD_StdEPReq>
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]
      break;
 8014f56:	e00c      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f001 fe5c 	bl	8016c24 <USBD_LL_StallEP>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8014f70:	bf00      	nop
  }

  return ret;
 8014f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	460b      	mov	r3, r1
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014f8e:	7afb      	ldrb	r3, [r7, #11]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d16e      	bne.n	8015072 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014f9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014fa2:	2b03      	cmp	r3, #3
 8014fa4:	f040 8098 	bne.w	80150d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	689a      	ldr	r2, [r3, #8]
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d913      	bls.n	8014fdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	689a      	ldr	r2, [r3, #8]
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	1ad2      	subs	r2, r2, r3
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	68da      	ldr	r2, [r3, #12]
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	bf28      	it	cs
 8014fce:	4613      	movcs	r3, r2
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	6879      	ldr	r1, [r7, #4]
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f001 f98a 	bl	80162ee <USBD_CtlContinueRx>
 8014fda:	e07d      	b.n	80150d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fe2:	f003 031f 	and.w	r3, r3, #31
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d014      	beq.n	8015014 <USBD_LL_DataOutStage+0x98>
 8014fea:	2b02      	cmp	r3, #2
 8014fec:	d81d      	bhi.n	801502a <USBD_LL_DataOutStage+0xae>
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d002      	beq.n	8014ff8 <USBD_LL_DataOutStage+0x7c>
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d003      	beq.n	8014ffe <USBD_LL_DataOutStage+0x82>
 8014ff6:	e018      	b.n	801502a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8014ffc:	e018      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015004:	b2db      	uxtb	r3, r3
 8015006:	4619      	mov	r1, r3
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f000 fa64 	bl	80154d6 <USBD_CoreFindIF>
 801500e:	4603      	mov	r3, r0
 8015010:	75bb      	strb	r3, [r7, #22]
            break;
 8015012:	e00d      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801501a:	b2db      	uxtb	r3, r3
 801501c:	4619      	mov	r1, r3
 801501e:	68f8      	ldr	r0, [r7, #12]
 8015020:	f000 fa66 	bl	80154f0 <USBD_CoreFindEP>
 8015024:	4603      	mov	r3, r0
 8015026:	75bb      	strb	r3, [r7, #22]
            break;
 8015028:	e002      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801502a:	2300      	movs	r3, #0
 801502c:	75bb      	strb	r3, [r7, #22]
            break;
 801502e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015030:	7dbb      	ldrb	r3, [r7, #22]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d119      	bne.n	801506a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801503c:	b2db      	uxtb	r3, r3
 801503e:	2b03      	cmp	r3, #3
 8015040:	d113      	bne.n	801506a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015042:	7dba      	ldrb	r2, [r7, #22]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	32ae      	adds	r2, #174	; 0xae
 8015048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801504c:	691b      	ldr	r3, [r3, #16]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00b      	beq.n	801506a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015052:	7dba      	ldrb	r2, [r7, #22]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801505a:	7dba      	ldrb	r2, [r7, #22]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	32ae      	adds	r2, #174	; 0xae
 8015060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015064:	691b      	ldr	r3, [r3, #16]
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f001 f950 	bl	8016310 <USBD_CtlSendStatus>
 8015070:	e032      	b.n	80150d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015072:	7afb      	ldrb	r3, [r7, #11]
 8015074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015078:	b2db      	uxtb	r3, r3
 801507a:	4619      	mov	r1, r3
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f000 fa37 	bl	80154f0 <USBD_CoreFindEP>
 8015082:	4603      	mov	r3, r0
 8015084:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015086:	7dbb      	ldrb	r3, [r7, #22]
 8015088:	2bff      	cmp	r3, #255	; 0xff
 801508a:	d025      	beq.n	80150d8 <USBD_LL_DataOutStage+0x15c>
 801508c:	7dbb      	ldrb	r3, [r7, #22]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d122      	bne.n	80150d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015098:	b2db      	uxtb	r3, r3
 801509a:	2b03      	cmp	r3, #3
 801509c:	d117      	bne.n	80150ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801509e:	7dba      	ldrb	r2, [r7, #22]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	32ae      	adds	r2, #174	; 0xae
 80150a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00f      	beq.n	80150ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80150ae:	7dba      	ldrb	r2, [r7, #22]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80150b6:	7dba      	ldrb	r2, [r7, #22]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	32ae      	adds	r2, #174	; 0xae
 80150bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c0:	699b      	ldr	r3, [r3, #24]
 80150c2:	7afa      	ldrb	r2, [r7, #11]
 80150c4:	4611      	mov	r1, r2
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	4798      	blx	r3
 80150ca:	4603      	mov	r3, r0
 80150cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80150ce:	7dfb      	ldrb	r3, [r7, #23]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	e000      	b.n	80150da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80150d8:	2300      	movs	r3, #0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3718      	adds	r7, #24
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}

080150e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b086      	sub	sp, #24
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	60f8      	str	r0, [r7, #12]
 80150ea:	460b      	mov	r3, r1
 80150ec:	607a      	str	r2, [r7, #4]
 80150ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80150f0:	7afb      	ldrb	r3, [r7, #11]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d16f      	bne.n	80151d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	3314      	adds	r3, #20
 80150fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015102:	2b02      	cmp	r3, #2
 8015104:	d15a      	bne.n	80151bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	689a      	ldr	r2, [r3, #8]
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	68db      	ldr	r3, [r3, #12]
 801510e:	429a      	cmp	r2, r3
 8015110:	d914      	bls.n	801513c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	689a      	ldr	r2, [r3, #8]
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	68db      	ldr	r3, [r3, #12]
 801511a:	1ad2      	subs	r2, r2, r3
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	689b      	ldr	r3, [r3, #8]
 8015124:	461a      	mov	r2, r3
 8015126:	6879      	ldr	r1, [r7, #4]
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f001 f8b2 	bl	8016292 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801512e:	2300      	movs	r3, #0
 8015130:	2200      	movs	r2, #0
 8015132:	2100      	movs	r1, #0
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f001 fe1f 	bl	8016d78 <USBD_LL_PrepareReceive>
 801513a:	e03f      	b.n	80151bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	68da      	ldr	r2, [r3, #12]
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	689b      	ldr	r3, [r3, #8]
 8015144:	429a      	cmp	r2, r3
 8015146:	d11c      	bne.n	8015182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015150:	429a      	cmp	r2, r3
 8015152:	d316      	bcc.n	8015182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801515e:	429a      	cmp	r2, r3
 8015160:	d20f      	bcs.n	8015182 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015162:	2200      	movs	r2, #0
 8015164:	2100      	movs	r1, #0
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f001 f893 	bl	8016292 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2200      	movs	r2, #0
 8015170:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015174:	2300      	movs	r3, #0
 8015176:	2200      	movs	r2, #0
 8015178:	2100      	movs	r1, #0
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f001 fdfc 	bl	8016d78 <USBD_LL_PrepareReceive>
 8015180:	e01c      	b.n	80151bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015188:	b2db      	uxtb	r3, r3
 801518a:	2b03      	cmp	r3, #3
 801518c:	d10f      	bne.n	80151ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d009      	beq.n	80151ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2200      	movs	r2, #0
 801519e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151a8:	68db      	ldr	r3, [r3, #12]
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80151ae:	2180      	movs	r1, #128	; 0x80
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 fd37 	bl	8016c24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f001 f8bd 	bl	8016336 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d03a      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7ff fe42 	bl	8014e50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80151d4:	e032      	b.n	801523c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80151d6:	7afb      	ldrb	r3, [r7, #11]
 80151d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	4619      	mov	r1, r3
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	f000 f985 	bl	80154f0 <USBD_CoreFindEP>
 80151e6:	4603      	mov	r3, r0
 80151e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151ea:	7dfb      	ldrb	r3, [r7, #23]
 80151ec:	2bff      	cmp	r3, #255	; 0xff
 80151ee:	d025      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
 80151f0:	7dfb      	ldrb	r3, [r7, #23]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d122      	bne.n	801523c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	2b03      	cmp	r3, #3
 8015200:	d11c      	bne.n	801523c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015202:	7dfa      	ldrb	r2, [r7, #23]
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	32ae      	adds	r2, #174	; 0xae
 8015208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520c:	695b      	ldr	r3, [r3, #20]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d014      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015212:	7dfa      	ldrb	r2, [r7, #23]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801521a:	7dfa      	ldrb	r2, [r7, #23]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	32ae      	adds	r2, #174	; 0xae
 8015220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015224:	695b      	ldr	r3, [r3, #20]
 8015226:	7afa      	ldrb	r2, [r7, #11]
 8015228:	4611      	mov	r1, r2
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	4798      	blx	r3
 801522e:	4603      	mov	r3, r0
 8015230:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015232:	7dbb      	ldrb	r3, [r7, #22]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d001      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015238:	7dbb      	ldrb	r3, [r7, #22]
 801523a:	e000      	b.n	801523e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	3718      	adds	r7, #24
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015246:	b580      	push	{r7, lr}
 8015248:	b084      	sub	sp, #16
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801524e:	2300      	movs	r3, #0
 8015250:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2201      	movs	r2, #1
 8015256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2200      	movs	r2, #0
 801525e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2200      	movs	r2, #0
 801526c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2200      	movs	r2, #0
 8015274:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801527e:	2b00      	cmp	r3, #0
 8015280:	d014      	beq.n	80152ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d00e      	beq.n	80152ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	6852      	ldr	r2, [r2, #4]
 801529a:	b2d2      	uxtb	r2, r2
 801529c:	4611      	mov	r1, r2
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	4798      	blx	r3
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d001      	beq.n	80152ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80152a8:	2303      	movs	r3, #3
 80152aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152ac:	2340      	movs	r3, #64	; 0x40
 80152ae:	2200      	movs	r2, #0
 80152b0:	2100      	movs	r1, #0
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f001 fc71 	bl	8016b9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2201      	movs	r2, #1
 80152bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2240      	movs	r2, #64	; 0x40
 80152c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152c8:	2340      	movs	r3, #64	; 0x40
 80152ca:	2200      	movs	r2, #0
 80152cc:	2180      	movs	r1, #128	; 0x80
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f001 fc63 	bl	8016b9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2201      	movs	r2, #1
 80152d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2240      	movs	r2, #64	; 0x40
 80152de:	621a      	str	r2, [r3, #32]

  return ret;
 80152e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3710      	adds	r7, #16
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80152ea:	b480      	push	{r7}
 80152ec:	b083      	sub	sp, #12
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	78fa      	ldrb	r2, [r7, #3]
 80152fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80152fc:	2300      	movs	r3, #0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801530a:	b480      	push	{r7}
 801530c:	b083      	sub	sp, #12
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b04      	cmp	r3, #4
 801531c:	d006      	beq.n	801532c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015324:	b2da      	uxtb	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2204      	movs	r2, #4
 8015330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015334:	2300      	movs	r3, #0
}
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015342:	b480      	push	{r7}
 8015344:	b083      	sub	sp, #12
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015350:	b2db      	uxtb	r3, r3
 8015352:	2b04      	cmp	r3, #4
 8015354:	d106      	bne.n	8015364 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801535c:	b2da      	uxtb	r2, r3
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015380:	b2db      	uxtb	r3, r3
 8015382:	2b03      	cmp	r3, #3
 8015384:	d110      	bne.n	80153a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00b      	beq.n	80153a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015396:	69db      	ldr	r3, [r3, #28]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d005      	beq.n	80153a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153a2:	69db      	ldr	r3, [r3, #28]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	460b      	mov	r3, r1
 80153bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	32ae      	adds	r2, #174	; 0xae
 80153c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80153d0:	2303      	movs	r3, #3
 80153d2:	e01c      	b.n	801540e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	2b03      	cmp	r3, #3
 80153de:	d115      	bne.n	801540c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	32ae      	adds	r2, #174	; 0xae
 80153ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153ee:	6a1b      	ldr	r3, [r3, #32]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00b      	beq.n	801540c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	32ae      	adds	r2, #174	; 0xae
 80153fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015402:	6a1b      	ldr	r3, [r3, #32]
 8015404:	78fa      	ldrb	r2, [r7, #3]
 8015406:	4611      	mov	r1, r2
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015416:	b580      	push	{r7, lr}
 8015418:	b082      	sub	sp, #8
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
 801541e:	460b      	mov	r3, r1
 8015420:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	32ae      	adds	r2, #174	; 0xae
 801542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d101      	bne.n	8015438 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015434:	2303      	movs	r3, #3
 8015436:	e01c      	b.n	8015472 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801543e:	b2db      	uxtb	r3, r3
 8015440:	2b03      	cmp	r3, #3
 8015442:	d115      	bne.n	8015470 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	32ae      	adds	r2, #174	; 0xae
 801544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00b      	beq.n	8015470 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	32ae      	adds	r2, #174	; 0xae
 8015462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	4611      	mov	r1, r2
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}

0801547a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801547a:	b480      	push	{r7}
 801547c:	b083      	sub	sp, #12
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	4618      	mov	r0, r3
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015498:	2300      	movs	r3, #0
 801549a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2201      	movs	r2, #1
 80154a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00e      	beq.n	80154cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	6852      	ldr	r2, [r2, #4]
 80154ba:	b2d2      	uxtb	r2, r2
 80154bc:	4611      	mov	r1, r2
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	4798      	blx	r3
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d001      	beq.n	80154cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80154c8:	2303      	movs	r3, #3
 80154ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3710      	adds	r7, #16
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b083      	sub	sp, #12
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
 80154de:	460b      	mov	r3, r1
 80154e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80154e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	370c      	adds	r7, #12
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	460b      	mov	r3, r1
 80154fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80154fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80154fe:	4618      	mov	r0, r3
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801550a:	b580      	push	{r7, lr}
 801550c:	b086      	sub	sp, #24
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
 8015512:	460b      	mov	r3, r1
 8015514:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801551e:	2300      	movs	r3, #0
 8015520:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	885b      	ldrh	r3, [r3, #2]
 8015526:	b29a      	uxth	r2, r3
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	b29b      	uxth	r3, r3
 801552e:	429a      	cmp	r2, r3
 8015530:	d920      	bls.n	8015574 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	b29b      	uxth	r3, r3
 8015538:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801553a:	e013      	b.n	8015564 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801553c:	f107 030a 	add.w	r3, r7, #10
 8015540:	4619      	mov	r1, r3
 8015542:	6978      	ldr	r0, [r7, #20]
 8015544:	f000 f81b 	bl	801557e <USBD_GetNextDesc>
 8015548:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	785b      	ldrb	r3, [r3, #1]
 801554e:	2b05      	cmp	r3, #5
 8015550:	d108      	bne.n	8015564 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	789b      	ldrb	r3, [r3, #2]
 801555a:	78fa      	ldrb	r2, [r7, #3]
 801555c:	429a      	cmp	r2, r3
 801555e:	d008      	beq.n	8015572 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015560:	2300      	movs	r3, #0
 8015562:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	885b      	ldrh	r3, [r3, #2]
 8015568:	b29a      	uxth	r2, r3
 801556a:	897b      	ldrh	r3, [r7, #10]
 801556c:	429a      	cmp	r2, r3
 801556e:	d8e5      	bhi.n	801553c <USBD_GetEpDesc+0x32>
 8015570:	e000      	b.n	8015574 <USBD_GetEpDesc+0x6a>
          break;
 8015572:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015574:	693b      	ldr	r3, [r7, #16]
}
 8015576:	4618      	mov	r0, r3
 8015578:	3718      	adds	r7, #24
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801557e:	b480      	push	{r7}
 8015580:	b085      	sub	sp, #20
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
 8015586:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	881a      	ldrh	r2, [r3, #0]
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	b29b      	uxth	r3, r3
 8015596:	4413      	add	r3, r2
 8015598:	b29a      	uxth	r2, r3
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	461a      	mov	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	4413      	add	r3, r2
 80155a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80155aa:	68fb      	ldr	r3, [r7, #12]
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3714      	adds	r7, #20
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr

080155b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80155b8:	b480      	push	{r7}
 80155ba:	b087      	sub	sp, #28
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	3301      	adds	r3, #1
 80155ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80155d6:	8a3b      	ldrh	r3, [r7, #16]
 80155d8:	021b      	lsls	r3, r3, #8
 80155da:	b21a      	sxth	r2, r3
 80155dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80155e0:	4313      	orrs	r3, r2
 80155e2:	b21b      	sxth	r3, r3
 80155e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80155e6:	89fb      	ldrh	r3, [r7, #14]
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	371c      	adds	r7, #28
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
 80155fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155fe:	2300      	movs	r3, #0
 8015600:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801560a:	2b40      	cmp	r3, #64	; 0x40
 801560c:	d005      	beq.n	801561a <USBD_StdDevReq+0x26>
 801560e:	2b40      	cmp	r3, #64	; 0x40
 8015610:	d857      	bhi.n	80156c2 <USBD_StdDevReq+0xce>
 8015612:	2b00      	cmp	r3, #0
 8015614:	d00f      	beq.n	8015636 <USBD_StdDevReq+0x42>
 8015616:	2b20      	cmp	r3, #32
 8015618:	d153      	bne.n	80156c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	32ae      	adds	r2, #174	; 0xae
 8015624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	4798      	blx	r3
 8015630:	4603      	mov	r3, r0
 8015632:	73fb      	strb	r3, [r7, #15]
      break;
 8015634:	e04a      	b.n	80156cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	785b      	ldrb	r3, [r3, #1]
 801563a:	2b09      	cmp	r3, #9
 801563c:	d83b      	bhi.n	80156b6 <USBD_StdDevReq+0xc2>
 801563e:	a201      	add	r2, pc, #4	; (adr r2, 8015644 <USBD_StdDevReq+0x50>)
 8015640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015644:	08015699 	.word	0x08015699
 8015648:	080156ad 	.word	0x080156ad
 801564c:	080156b7 	.word	0x080156b7
 8015650:	080156a3 	.word	0x080156a3
 8015654:	080156b7 	.word	0x080156b7
 8015658:	08015677 	.word	0x08015677
 801565c:	0801566d 	.word	0x0801566d
 8015660:	080156b7 	.word	0x080156b7
 8015664:	0801568f 	.word	0x0801568f
 8015668:	08015681 	.word	0x08015681
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801566c:	6839      	ldr	r1, [r7, #0]
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f000 fa3c 	bl	8015aec <USBD_GetDescriptor>
          break;
 8015674:	e024      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015676:	6839      	ldr	r1, [r7, #0]
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f000 fba1 	bl	8015dc0 <USBD_SetAddress>
          break;
 801567e:	e01f      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015680:	6839      	ldr	r1, [r7, #0]
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f000 fbe0 	bl	8015e48 <USBD_SetConfig>
 8015688:	4603      	mov	r3, r0
 801568a:	73fb      	strb	r3, [r7, #15]
          break;
 801568c:	e018      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801568e:	6839      	ldr	r1, [r7, #0]
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f000 fc83 	bl	8015f9c <USBD_GetConfig>
          break;
 8015696:	e013      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fcb4 	bl	8016008 <USBD_GetStatus>
          break;
 80156a0:	e00e      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80156a2:	6839      	ldr	r1, [r7, #0]
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f000 fce3 	bl	8016070 <USBD_SetFeature>
          break;
 80156aa:	e009      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80156ac:	6839      	ldr	r1, [r7, #0]
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f000 fd07 	bl	80160c2 <USBD_ClrFeature>
          break;
 80156b4:	e004      	b.n	80156c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80156b6:	6839      	ldr	r1, [r7, #0]
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f000 fd5e 	bl	801617a <USBD_CtlError>
          break;
 80156be:	bf00      	nop
      }
      break;
 80156c0:	e004      	b.n	80156cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fd58 	bl	801617a <USBD_CtlError>
      break;
 80156ca:	bf00      	nop
  }

  return ret;
 80156cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3710      	adds	r7, #16
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop

080156d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80156e2:	2300      	movs	r3, #0
 80156e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80156ee:	2b40      	cmp	r3, #64	; 0x40
 80156f0:	d005      	beq.n	80156fe <USBD_StdItfReq+0x26>
 80156f2:	2b40      	cmp	r3, #64	; 0x40
 80156f4:	d852      	bhi.n	801579c <USBD_StdItfReq+0xc4>
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d001      	beq.n	80156fe <USBD_StdItfReq+0x26>
 80156fa:	2b20      	cmp	r3, #32
 80156fc:	d14e      	bne.n	801579c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015704:	b2db      	uxtb	r3, r3
 8015706:	3b01      	subs	r3, #1
 8015708:	2b02      	cmp	r3, #2
 801570a:	d840      	bhi.n	801578e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	889b      	ldrh	r3, [r3, #4]
 8015710:	b2db      	uxtb	r3, r3
 8015712:	2b01      	cmp	r3, #1
 8015714:	d836      	bhi.n	8015784 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	889b      	ldrh	r3, [r3, #4]
 801571a:	b2db      	uxtb	r3, r3
 801571c:	4619      	mov	r1, r3
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7ff fed9 	bl	80154d6 <USBD_CoreFindIF>
 8015724:	4603      	mov	r3, r0
 8015726:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015728:	7bbb      	ldrb	r3, [r7, #14]
 801572a:	2bff      	cmp	r3, #255	; 0xff
 801572c:	d01d      	beq.n	801576a <USBD_StdItfReq+0x92>
 801572e:	7bbb      	ldrb	r3, [r7, #14]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d11a      	bne.n	801576a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015734:	7bba      	ldrb	r2, [r7, #14]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	32ae      	adds	r2, #174	; 0xae
 801573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801573e:	689b      	ldr	r3, [r3, #8]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d00f      	beq.n	8015764 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015744:	7bba      	ldrb	r2, [r7, #14]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801574c:	7bba      	ldrb	r2, [r7, #14]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	32ae      	adds	r2, #174	; 0xae
 8015752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015756:	689b      	ldr	r3, [r3, #8]
 8015758:	6839      	ldr	r1, [r7, #0]
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	4798      	blx	r3
 801575e:	4603      	mov	r3, r0
 8015760:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015762:	e004      	b.n	801576e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015764:	2303      	movs	r3, #3
 8015766:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015768:	e001      	b.n	801576e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801576a:	2303      	movs	r3, #3
 801576c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	88db      	ldrh	r3, [r3, #6]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d110      	bne.n	8015798 <USBD_StdItfReq+0xc0>
 8015776:	7bfb      	ldrb	r3, [r7, #15]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d10d      	bne.n	8015798 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f000 fdc7 	bl	8016310 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015782:	e009      	b.n	8015798 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015784:	6839      	ldr	r1, [r7, #0]
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 fcf7 	bl	801617a <USBD_CtlError>
          break;
 801578c:	e004      	b.n	8015798 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801578e:	6839      	ldr	r1, [r7, #0]
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f000 fcf2 	bl	801617a <USBD_CtlError>
          break;
 8015796:	e000      	b.n	801579a <USBD_StdItfReq+0xc2>
          break;
 8015798:	bf00      	nop
      }
      break;
 801579a:	e004      	b.n	80157a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801579c:	6839      	ldr	r1, [r7, #0]
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f000 fceb 	bl	801617a <USBD_CtlError>
      break;
 80157a4:	bf00      	nop
  }

  return ret;
 80157a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80157ba:	2300      	movs	r3, #0
 80157bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	889b      	ldrh	r3, [r3, #4]
 80157c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157cc:	2b40      	cmp	r3, #64	; 0x40
 80157ce:	d007      	beq.n	80157e0 <USBD_StdEPReq+0x30>
 80157d0:	2b40      	cmp	r3, #64	; 0x40
 80157d2:	f200 817f 	bhi.w	8015ad4 <USBD_StdEPReq+0x324>
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d02a      	beq.n	8015830 <USBD_StdEPReq+0x80>
 80157da:	2b20      	cmp	r3, #32
 80157dc:	f040 817a 	bne.w	8015ad4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80157e0:	7bbb      	ldrb	r3, [r7, #14]
 80157e2:	4619      	mov	r1, r3
 80157e4:	6878      	ldr	r0, [r7, #4]
 80157e6:	f7ff fe83 	bl	80154f0 <USBD_CoreFindEP>
 80157ea:	4603      	mov	r3, r0
 80157ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157ee:	7b7b      	ldrb	r3, [r7, #13]
 80157f0:	2bff      	cmp	r3, #255	; 0xff
 80157f2:	f000 8174 	beq.w	8015ade <USBD_StdEPReq+0x32e>
 80157f6:	7b7b      	ldrb	r3, [r7, #13]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	f040 8170 	bne.w	8015ade <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80157fe:	7b7a      	ldrb	r2, [r7, #13]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015806:	7b7a      	ldrb	r2, [r7, #13]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	32ae      	adds	r2, #174	; 0xae
 801580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f000 8163 	beq.w	8015ade <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015818:	7b7a      	ldrb	r2, [r7, #13]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	32ae      	adds	r2, #174	; 0xae
 801581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015822:	689b      	ldr	r3, [r3, #8]
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	4798      	blx	r3
 801582a:	4603      	mov	r3, r0
 801582c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801582e:	e156      	b.n	8015ade <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	785b      	ldrb	r3, [r3, #1]
 8015834:	2b03      	cmp	r3, #3
 8015836:	d008      	beq.n	801584a <USBD_StdEPReq+0x9a>
 8015838:	2b03      	cmp	r3, #3
 801583a:	f300 8145 	bgt.w	8015ac8 <USBD_StdEPReq+0x318>
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 809b 	beq.w	801597a <USBD_StdEPReq+0x1ca>
 8015844:	2b01      	cmp	r3, #1
 8015846:	d03c      	beq.n	80158c2 <USBD_StdEPReq+0x112>
 8015848:	e13e      	b.n	8015ac8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015850:	b2db      	uxtb	r3, r3
 8015852:	2b02      	cmp	r3, #2
 8015854:	d002      	beq.n	801585c <USBD_StdEPReq+0xac>
 8015856:	2b03      	cmp	r3, #3
 8015858:	d016      	beq.n	8015888 <USBD_StdEPReq+0xd8>
 801585a:	e02c      	b.n	80158b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801585c:	7bbb      	ldrb	r3, [r7, #14]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d00d      	beq.n	801587e <USBD_StdEPReq+0xce>
 8015862:	7bbb      	ldrb	r3, [r7, #14]
 8015864:	2b80      	cmp	r3, #128	; 0x80
 8015866:	d00a      	beq.n	801587e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015868:	7bbb      	ldrb	r3, [r7, #14]
 801586a:	4619      	mov	r1, r3
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f001 f9d9 	bl	8016c24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015872:	2180      	movs	r1, #128	; 0x80
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f001 f9d5 	bl	8016c24 <USBD_LL_StallEP>
 801587a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801587c:	e020      	b.n	80158c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801587e:	6839      	ldr	r1, [r7, #0]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f000 fc7a 	bl	801617a <USBD_CtlError>
              break;
 8015886:	e01b      	b.n	80158c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	885b      	ldrh	r3, [r3, #2]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10e      	bne.n	80158ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015890:	7bbb      	ldrb	r3, [r7, #14]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d00b      	beq.n	80158ae <USBD_StdEPReq+0xfe>
 8015896:	7bbb      	ldrb	r3, [r7, #14]
 8015898:	2b80      	cmp	r3, #128	; 0x80
 801589a:	d008      	beq.n	80158ae <USBD_StdEPReq+0xfe>
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	88db      	ldrh	r3, [r3, #6]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d104      	bne.n	80158ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80158a4:	7bbb      	ldrb	r3, [r7, #14]
 80158a6:	4619      	mov	r1, r3
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f001 f9bb 	bl	8016c24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 fd2e 	bl	8016310 <USBD_CtlSendStatus>

              break;
 80158b4:	e004      	b.n	80158c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80158b6:	6839      	ldr	r1, [r7, #0]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 fc5e 	bl	801617a <USBD_CtlError>
              break;
 80158be:	bf00      	nop
          }
          break;
 80158c0:	e107      	b.n	8015ad2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158c8:	b2db      	uxtb	r3, r3
 80158ca:	2b02      	cmp	r3, #2
 80158cc:	d002      	beq.n	80158d4 <USBD_StdEPReq+0x124>
 80158ce:	2b03      	cmp	r3, #3
 80158d0:	d016      	beq.n	8015900 <USBD_StdEPReq+0x150>
 80158d2:	e04b      	b.n	801596c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158d4:	7bbb      	ldrb	r3, [r7, #14]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00d      	beq.n	80158f6 <USBD_StdEPReq+0x146>
 80158da:	7bbb      	ldrb	r3, [r7, #14]
 80158dc:	2b80      	cmp	r3, #128	; 0x80
 80158de:	d00a      	beq.n	80158f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158e0:	7bbb      	ldrb	r3, [r7, #14]
 80158e2:	4619      	mov	r1, r3
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f001 f99d 	bl	8016c24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158ea:	2180      	movs	r1, #128	; 0x80
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f001 f999 	bl	8016c24 <USBD_LL_StallEP>
 80158f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158f4:	e040      	b.n	8015978 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80158f6:	6839      	ldr	r1, [r7, #0]
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f000 fc3e 	bl	801617a <USBD_CtlError>
              break;
 80158fe:	e03b      	b.n	8015978 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	885b      	ldrh	r3, [r3, #2]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d136      	bne.n	8015976 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015908:	7bbb      	ldrb	r3, [r7, #14]
 801590a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801590e:	2b00      	cmp	r3, #0
 8015910:	d004      	beq.n	801591c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015912:	7bbb      	ldrb	r3, [r7, #14]
 8015914:	4619      	mov	r1, r3
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f001 f9a3 	bl	8016c62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 fcf7 	bl	8016310 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015922:	7bbb      	ldrb	r3, [r7, #14]
 8015924:	4619      	mov	r1, r3
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7ff fde2 	bl	80154f0 <USBD_CoreFindEP>
 801592c:	4603      	mov	r3, r0
 801592e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015930:	7b7b      	ldrb	r3, [r7, #13]
 8015932:	2bff      	cmp	r3, #255	; 0xff
 8015934:	d01f      	beq.n	8015976 <USBD_StdEPReq+0x1c6>
 8015936:	7b7b      	ldrb	r3, [r7, #13]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d11c      	bne.n	8015976 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801593c:	7b7a      	ldrb	r2, [r7, #13]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015944:	7b7a      	ldrb	r2, [r7, #13]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	32ae      	adds	r2, #174	; 0xae
 801594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d010      	beq.n	8015976 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015954:	7b7a      	ldrb	r2, [r7, #13]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	32ae      	adds	r2, #174	; 0xae
 801595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	6839      	ldr	r1, [r7, #0]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	4798      	blx	r3
 8015966:	4603      	mov	r3, r0
 8015968:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801596a:	e004      	b.n	8015976 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801596c:	6839      	ldr	r1, [r7, #0]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f000 fc03 	bl	801617a <USBD_CtlError>
              break;
 8015974:	e000      	b.n	8015978 <USBD_StdEPReq+0x1c8>
              break;
 8015976:	bf00      	nop
          }
          break;
 8015978:	e0ab      	b.n	8015ad2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015980:	b2db      	uxtb	r3, r3
 8015982:	2b02      	cmp	r3, #2
 8015984:	d002      	beq.n	801598c <USBD_StdEPReq+0x1dc>
 8015986:	2b03      	cmp	r3, #3
 8015988:	d032      	beq.n	80159f0 <USBD_StdEPReq+0x240>
 801598a:	e097      	b.n	8015abc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801598c:	7bbb      	ldrb	r3, [r7, #14]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d007      	beq.n	80159a2 <USBD_StdEPReq+0x1f2>
 8015992:	7bbb      	ldrb	r3, [r7, #14]
 8015994:	2b80      	cmp	r3, #128	; 0x80
 8015996:	d004      	beq.n	80159a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f000 fbed 	bl	801617a <USBD_CtlError>
                break;
 80159a0:	e091      	b.n	8015ac6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	da0b      	bge.n	80159c2 <USBD_StdEPReq+0x212>
 80159aa:	7bbb      	ldrb	r3, [r7, #14]
 80159ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80159b0:	4613      	mov	r3, r2
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	4413      	add	r3, r2
 80159b6:	009b      	lsls	r3, r3, #2
 80159b8:	3310      	adds	r3, #16
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	4413      	add	r3, r2
 80159be:	3304      	adds	r3, #4
 80159c0:	e00b      	b.n	80159da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80159c2:	7bbb      	ldrb	r3, [r7, #14]
 80159c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159c8:	4613      	mov	r3, r2
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	4413      	add	r3, r2
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80159d4:	687a      	ldr	r2, [r7, #4]
 80159d6:	4413      	add	r3, r2
 80159d8:	3304      	adds	r3, #4
 80159da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80159dc:	68bb      	ldr	r3, [r7, #8]
 80159de:	2200      	movs	r2, #0
 80159e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2202      	movs	r2, #2
 80159e6:	4619      	mov	r1, r3
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fc37 	bl	801625c <USBD_CtlSendData>
              break;
 80159ee:	e06a      	b.n	8015ac6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80159f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	da11      	bge.n	8015a1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80159f8:	7bbb      	ldrb	r3, [r7, #14]
 80159fa:	f003 020f 	and.w	r2, r3, #15
 80159fe:	6879      	ldr	r1, [r7, #4]
 8015a00:	4613      	mov	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	4413      	add	r3, r2
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	440b      	add	r3, r1
 8015a0a:	3324      	adds	r3, #36	; 0x24
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d117      	bne.n	8015a42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a12:	6839      	ldr	r1, [r7, #0]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f000 fbb0 	bl	801617a <USBD_CtlError>
                  break;
 8015a1a:	e054      	b.n	8015ac6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a1c:	7bbb      	ldrb	r3, [r7, #14]
 8015a1e:	f003 020f 	and.w	r2, r3, #15
 8015a22:	6879      	ldr	r1, [r7, #4]
 8015a24:	4613      	mov	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	4413      	add	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	440b      	add	r3, r1
 8015a2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015a32:	881b      	ldrh	r3, [r3, #0]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d104      	bne.n	8015a42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 fb9d 	bl	801617a <USBD_CtlError>
                  break;
 8015a40:	e041      	b.n	8015ac6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	da0b      	bge.n	8015a62 <USBD_StdEPReq+0x2b2>
 8015a4a:	7bbb      	ldrb	r3, [r7, #14]
 8015a4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a50:	4613      	mov	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	4413      	add	r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	3310      	adds	r3, #16
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	3304      	adds	r3, #4
 8015a60:	e00b      	b.n	8015a7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a62:	7bbb      	ldrb	r3, [r7, #14]
 8015a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a68:	4613      	mov	r3, r2
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	4413      	add	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	4413      	add	r3, r2
 8015a78:	3304      	adds	r3, #4
 8015a7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d002      	beq.n	8015a88 <USBD_StdEPReq+0x2d8>
 8015a82:	7bbb      	ldrb	r3, [r7, #14]
 8015a84:	2b80      	cmp	r3, #128	; 0x80
 8015a86:	d103      	bne.n	8015a90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	601a      	str	r2, [r3, #0]
 8015a8e:	e00e      	b.n	8015aae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015a90:	7bbb      	ldrb	r3, [r7, #14]
 8015a92:	4619      	mov	r1, r3
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f001 f903 	bl	8016ca0 <USBD_LL_IsStallEP>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d003      	beq.n	8015aa8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	601a      	str	r2, [r3, #0]
 8015aa6:	e002      	b.n	8015aae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	2202      	movs	r2, #2
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f000 fbd1 	bl	801625c <USBD_CtlSendData>
              break;
 8015aba:	e004      	b.n	8015ac6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 fb5b 	bl	801617a <USBD_CtlError>
              break;
 8015ac4:	bf00      	nop
          }
          break;
 8015ac6:	e004      	b.n	8015ad2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 fb55 	bl	801617a <USBD_CtlError>
          break;
 8015ad0:	bf00      	nop
      }
      break;
 8015ad2:	e005      	b.n	8015ae0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015ad4:	6839      	ldr	r1, [r7, #0]
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f000 fb4f 	bl	801617a <USBD_CtlError>
      break;
 8015adc:	e000      	b.n	8015ae0 <USBD_StdEPReq+0x330>
      break;
 8015ade:	bf00      	nop
  }

  return ret;
 8015ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
	...

08015aec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015af6:	2300      	movs	r3, #0
 8015af8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015afa:	2300      	movs	r3, #0
 8015afc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015afe:	2300      	movs	r3, #0
 8015b00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	885b      	ldrh	r3, [r3, #2]
 8015b06:	0a1b      	lsrs	r3, r3, #8
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	2b06      	cmp	r3, #6
 8015b0e:	f200 8128 	bhi.w	8015d62 <USBD_GetDescriptor+0x276>
 8015b12:	a201      	add	r2, pc, #4	; (adr r2, 8015b18 <USBD_GetDescriptor+0x2c>)
 8015b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b18:	08015b35 	.word	0x08015b35
 8015b1c:	08015b4d 	.word	0x08015b4d
 8015b20:	08015b8d 	.word	0x08015b8d
 8015b24:	08015d63 	.word	0x08015d63
 8015b28:	08015d63 	.word	0x08015d63
 8015b2c:	08015d03 	.word	0x08015d03
 8015b30:	08015d2f 	.word	0x08015d2f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	687a      	ldr	r2, [r7, #4]
 8015b3e:	7c12      	ldrb	r2, [r2, #16]
 8015b40:	f107 0108 	add.w	r1, r7, #8
 8015b44:	4610      	mov	r0, r2
 8015b46:	4798      	blx	r3
 8015b48:	60f8      	str	r0, [r7, #12]
      break;
 8015b4a:	e112      	b.n	8015d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	7c1b      	ldrb	r3, [r3, #16]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d10d      	bne.n	8015b70 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b5c:	f107 0208 	add.w	r2, r7, #8
 8015b60:	4610      	mov	r0, r2
 8015b62:	4798      	blx	r3
 8015b64:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	2202      	movs	r2, #2
 8015b6c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015b6e:	e100      	b.n	8015d72 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b78:	f107 0208 	add.w	r2, r7, #8
 8015b7c:	4610      	mov	r0, r2
 8015b7e:	4798      	blx	r3
 8015b80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	3301      	adds	r3, #1
 8015b86:	2202      	movs	r2, #2
 8015b88:	701a      	strb	r2, [r3, #0]
      break;
 8015b8a:	e0f2      	b.n	8015d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	885b      	ldrh	r3, [r3, #2]
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b05      	cmp	r3, #5
 8015b94:	f200 80ac 	bhi.w	8015cf0 <USBD_GetDescriptor+0x204>
 8015b98:	a201      	add	r2, pc, #4	; (adr r2, 8015ba0 <USBD_GetDescriptor+0xb4>)
 8015b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b9e:	bf00      	nop
 8015ba0:	08015bb9 	.word	0x08015bb9
 8015ba4:	08015bed 	.word	0x08015bed
 8015ba8:	08015c21 	.word	0x08015c21
 8015bac:	08015c55 	.word	0x08015c55
 8015bb0:	08015c89 	.word	0x08015c89
 8015bb4:	08015cbd 	.word	0x08015cbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d00b      	beq.n	8015bdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	687a      	ldr	r2, [r7, #4]
 8015bce:	7c12      	ldrb	r2, [r2, #16]
 8015bd0:	f107 0108 	add.w	r1, r7, #8
 8015bd4:	4610      	mov	r0, r2
 8015bd6:	4798      	blx	r3
 8015bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015bda:	e091      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015bdc:	6839      	ldr	r1, [r7, #0]
 8015bde:	6878      	ldr	r0, [r7, #4]
 8015be0:	f000 facb 	bl	801617a <USBD_CtlError>
            err++;
 8015be4:	7afb      	ldrb	r3, [r7, #11]
 8015be6:	3301      	adds	r3, #1
 8015be8:	72fb      	strb	r3, [r7, #11]
          break;
 8015bea:	e089      	b.n	8015d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bf2:	689b      	ldr	r3, [r3, #8]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d00b      	beq.n	8015c10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bfe:	689b      	ldr	r3, [r3, #8]
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	7c12      	ldrb	r2, [r2, #16]
 8015c04:	f107 0108 	add.w	r1, r7, #8
 8015c08:	4610      	mov	r0, r2
 8015c0a:	4798      	blx	r3
 8015c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c0e:	e077      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c10:	6839      	ldr	r1, [r7, #0]
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 fab1 	bl	801617a <USBD_CtlError>
            err++;
 8015c18:	7afb      	ldrb	r3, [r7, #11]
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c1e:	e06f      	b.n	8015d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d00b      	beq.n	8015c44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	7c12      	ldrb	r2, [r2, #16]
 8015c38:	f107 0108 	add.w	r1, r7, #8
 8015c3c:	4610      	mov	r0, r2
 8015c3e:	4798      	blx	r3
 8015c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c42:	e05d      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c44:	6839      	ldr	r1, [r7, #0]
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f000 fa97 	bl	801617a <USBD_CtlError>
            err++;
 8015c4c:	7afb      	ldrb	r3, [r7, #11]
 8015c4e:	3301      	adds	r3, #1
 8015c50:	72fb      	strb	r3, [r7, #11]
          break;
 8015c52:	e055      	b.n	8015d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c5a:	691b      	ldr	r3, [r3, #16]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d00b      	beq.n	8015c78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c66:	691b      	ldr	r3, [r3, #16]
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	7c12      	ldrb	r2, [r2, #16]
 8015c6c:	f107 0108 	add.w	r1, r7, #8
 8015c70:	4610      	mov	r0, r2
 8015c72:	4798      	blx	r3
 8015c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c76:	e043      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c78:	6839      	ldr	r1, [r7, #0]
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 fa7d 	bl	801617a <USBD_CtlError>
            err++;
 8015c80:	7afb      	ldrb	r3, [r7, #11]
 8015c82:	3301      	adds	r3, #1
 8015c84:	72fb      	strb	r3, [r7, #11]
          break;
 8015c86:	e03b      	b.n	8015d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c8e:	695b      	ldr	r3, [r3, #20]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d00b      	beq.n	8015cac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c9a:	695b      	ldr	r3, [r3, #20]
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	7c12      	ldrb	r2, [r2, #16]
 8015ca0:	f107 0108 	add.w	r1, r7, #8
 8015ca4:	4610      	mov	r0, r2
 8015ca6:	4798      	blx	r3
 8015ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015caa:	e029      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cac:	6839      	ldr	r1, [r7, #0]
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 fa63 	bl	801617a <USBD_CtlError>
            err++;
 8015cb4:	7afb      	ldrb	r3, [r7, #11]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8015cba:	e021      	b.n	8015d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cc2:	699b      	ldr	r3, [r3, #24]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d00b      	beq.n	8015ce0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cce:	699b      	ldr	r3, [r3, #24]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	7c12      	ldrb	r2, [r2, #16]
 8015cd4:	f107 0108 	add.w	r1, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cde:	e00f      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ce0:	6839      	ldr	r1, [r7, #0]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 fa49 	bl	801617a <USBD_CtlError>
            err++;
 8015ce8:	7afb      	ldrb	r3, [r7, #11]
 8015cea:	3301      	adds	r3, #1
 8015cec:	72fb      	strb	r3, [r7, #11]
          break;
 8015cee:	e007      	b.n	8015d00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fa41 	bl	801617a <USBD_CtlError>
          err++;
 8015cf8:	7afb      	ldrb	r3, [r7, #11]
 8015cfa:	3301      	adds	r3, #1
 8015cfc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015cfe:	bf00      	nop
      }
      break;
 8015d00:	e037      	b.n	8015d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	7c1b      	ldrb	r3, [r3, #16]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d109      	bne.n	8015d1e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d12:	f107 0208 	add.w	r2, r7, #8
 8015d16:	4610      	mov	r0, r2
 8015d18:	4798      	blx	r3
 8015d1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d1c:	e029      	b.n	8015d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d1e:	6839      	ldr	r1, [r7, #0]
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f000 fa2a 	bl	801617a <USBD_CtlError>
        err++;
 8015d26:	7afb      	ldrb	r3, [r7, #11]
 8015d28:	3301      	adds	r3, #1
 8015d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8015d2c:	e021      	b.n	8015d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	7c1b      	ldrb	r3, [r3, #16]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d10d      	bne.n	8015d52 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d3e:	f107 0208 	add.w	r2, r7, #8
 8015d42:	4610      	mov	r0, r2
 8015d44:	4798      	blx	r3
 8015d46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	2207      	movs	r2, #7
 8015d4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d50:	e00f      	b.n	8015d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d52:	6839      	ldr	r1, [r7, #0]
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f000 fa10 	bl	801617a <USBD_CtlError>
        err++;
 8015d5a:	7afb      	ldrb	r3, [r7, #11]
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8015d60:	e007      	b.n	8015d72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015d62:	6839      	ldr	r1, [r7, #0]
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f000 fa08 	bl	801617a <USBD_CtlError>
      err++;
 8015d6a:	7afb      	ldrb	r3, [r7, #11]
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8015d70:	bf00      	nop
  }

  if (err != 0U)
 8015d72:	7afb      	ldrb	r3, [r7, #11]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d11e      	bne.n	8015db6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	88db      	ldrh	r3, [r3, #6]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d016      	beq.n	8015dae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015d80:	893b      	ldrh	r3, [r7, #8]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00e      	beq.n	8015da4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	88da      	ldrh	r2, [r3, #6]
 8015d8a:	893b      	ldrh	r3, [r7, #8]
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	bf28      	it	cs
 8015d90:	4613      	movcs	r3, r2
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015d96:	893b      	ldrh	r3, [r7, #8]
 8015d98:	461a      	mov	r2, r3
 8015d9a:	68f9      	ldr	r1, [r7, #12]
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f000 fa5d 	bl	801625c <USBD_CtlSendData>
 8015da2:	e009      	b.n	8015db8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 f9e7 	bl	801617a <USBD_CtlError>
 8015dac:	e004      	b.n	8015db8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f000 faae 	bl	8016310 <USBD_CtlSendStatus>
 8015db4:	e000      	b.n	8015db8 <USBD_GetDescriptor+0x2cc>
    return;
 8015db6:	bf00      	nop
  }
}
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop

08015dc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b084      	sub	sp, #16
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	889b      	ldrh	r3, [r3, #4]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d131      	bne.n	8015e36 <USBD_SetAddress+0x76>
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	88db      	ldrh	r3, [r3, #6]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d12d      	bne.n	8015e36 <USBD_SetAddress+0x76>
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	885b      	ldrh	r3, [r3, #2]
 8015dde:	2b7f      	cmp	r3, #127	; 0x7f
 8015de0:	d829      	bhi.n	8015e36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	885b      	ldrh	r3, [r3, #2]
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b03      	cmp	r3, #3
 8015df8:	d104      	bne.n	8015e04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015dfa:	6839      	ldr	r1, [r7, #0]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 f9bc 	bl	801617a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e02:	e01d      	b.n	8015e40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	7bfa      	ldrb	r2, [r7, #15]
 8015e08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e0c:	7bfb      	ldrb	r3, [r7, #15]
 8015e0e:	4619      	mov	r1, r3
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f000 ff71 	bl	8016cf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f000 fa7a 	bl	8016310 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e1c:	7bfb      	ldrb	r3, [r7, #15]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d004      	beq.n	8015e2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2202      	movs	r2, #2
 8015e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e2a:	e009      	b.n	8015e40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e34:	e004      	b.n	8015e40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e36:	6839      	ldr	r1, [r7, #0]
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f000 f99e 	bl	801617a <USBD_CtlError>
  }
}
 8015e3e:	bf00      	nop
 8015e40:	bf00      	nop
 8015e42:	3710      	adds	r7, #16
 8015e44:	46bd      	mov	sp, r7
 8015e46:	bd80      	pop	{r7, pc}

08015e48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e52:	2300      	movs	r3, #0
 8015e54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	885b      	ldrh	r3, [r3, #2]
 8015e5a:	b2da      	uxtb	r2, r3
 8015e5c:	4b4e      	ldr	r3, [pc, #312]	; (8015f98 <USBD_SetConfig+0x150>)
 8015e5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015e60:	4b4d      	ldr	r3, [pc, #308]	; (8015f98 <USBD_SetConfig+0x150>)
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	2b01      	cmp	r3, #1
 8015e66:	d905      	bls.n	8015e74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015e68:	6839      	ldr	r1, [r7, #0]
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f000 f985 	bl	801617a <USBD_CtlError>
    return USBD_FAIL;
 8015e70:	2303      	movs	r3, #3
 8015e72:	e08c      	b.n	8015f8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b02      	cmp	r3, #2
 8015e7e:	d002      	beq.n	8015e86 <USBD_SetConfig+0x3e>
 8015e80:	2b03      	cmp	r3, #3
 8015e82:	d029      	beq.n	8015ed8 <USBD_SetConfig+0x90>
 8015e84:	e075      	b.n	8015f72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015e86:	4b44      	ldr	r3, [pc, #272]	; (8015f98 <USBD_SetConfig+0x150>)
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d020      	beq.n	8015ed0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015e8e:	4b42      	ldr	r3, [pc, #264]	; (8015f98 <USBD_SetConfig+0x150>)
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	461a      	mov	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015e98:	4b3f      	ldr	r3, [pc, #252]	; (8015f98 <USBD_SetConfig+0x150>)
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	f7fe ffe1 	bl	8014e66 <USBD_SetClassConfig>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ea8:	7bfb      	ldrb	r3, [r7, #15]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d008      	beq.n	8015ec0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015eae:	6839      	ldr	r1, [r7, #0]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 f962 	bl	801617a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2202      	movs	r2, #2
 8015eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015ebe:	e065      	b.n	8015f8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f000 fa25 	bl	8016310 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2203      	movs	r2, #3
 8015eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015ece:	e05d      	b.n	8015f8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f000 fa1d 	bl	8016310 <USBD_CtlSendStatus>
      break;
 8015ed6:	e059      	b.n	8015f8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015ed8:	4b2f      	ldr	r3, [pc, #188]	; (8015f98 <USBD_SetConfig+0x150>)
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d112      	bne.n	8015f06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2202      	movs	r2, #2
 8015ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015ee8:	4b2b      	ldr	r3, [pc, #172]	; (8015f98 <USBD_SetConfig+0x150>)
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	461a      	mov	r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ef2:	4b29      	ldr	r3, [pc, #164]	; (8015f98 <USBD_SetConfig+0x150>)
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f7fe ffd0 	bl	8014e9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 fa06 	bl	8016310 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f04:	e042      	b.n	8015f8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f06:	4b24      	ldr	r3, [pc, #144]	; (8015f98 <USBD_SetConfig+0x150>)
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d02a      	beq.n	8015f6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	b2db      	uxtb	r3, r3
 8015f1a:	4619      	mov	r1, r3
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f7fe ffbe 	bl	8014e9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f22:	4b1d      	ldr	r3, [pc, #116]	; (8015f98 <USBD_SetConfig+0x150>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	461a      	mov	r2, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f2c:	4b1a      	ldr	r3, [pc, #104]	; (8015f98 <USBD_SetConfig+0x150>)
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	4619      	mov	r1, r3
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7fe ff97 	bl	8014e66 <USBD_SetClassConfig>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f3c:	7bfb      	ldrb	r3, [r7, #15]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00f      	beq.n	8015f62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 f918 	bl	801617a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	4619      	mov	r1, r3
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7fe ffa3 	bl	8014e9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2202      	movs	r2, #2
 8015f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f60:	e014      	b.n	8015f8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f000 f9d4 	bl	8016310 <USBD_CtlSendStatus>
      break;
 8015f68:	e010      	b.n	8015f8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f000 f9d0 	bl	8016310 <USBD_CtlSendStatus>
      break;
 8015f70:	e00c      	b.n	8015f8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015f72:	6839      	ldr	r1, [r7, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 f900 	bl	801617a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f7a:	4b07      	ldr	r3, [pc, #28]	; (8015f98 <USBD_SetConfig+0x150>)
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7fe ff8c 	bl	8014e9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015f86:	2303      	movs	r3, #3
 8015f88:	73fb      	strb	r3, [r7, #15]
      break;
 8015f8a:	bf00      	nop
  }

  return ret;
 8015f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3710      	adds	r7, #16
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	24001710 	.word	0x24001710

08015f9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	88db      	ldrh	r3, [r3, #6]
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	d004      	beq.n	8015fb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 f8e2 	bl	801617a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015fb6:	e023      	b.n	8016000 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	2b02      	cmp	r3, #2
 8015fc2:	dc02      	bgt.n	8015fca <USBD_GetConfig+0x2e>
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	dc03      	bgt.n	8015fd0 <USBD_GetConfig+0x34>
 8015fc8:	e015      	b.n	8015ff6 <USBD_GetConfig+0x5a>
 8015fca:	2b03      	cmp	r3, #3
 8015fcc:	d00b      	beq.n	8015fe6 <USBD_GetConfig+0x4a>
 8015fce:	e012      	b.n	8015ff6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	3308      	adds	r3, #8
 8015fda:	2201      	movs	r2, #1
 8015fdc:	4619      	mov	r1, r3
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 f93c 	bl	801625c <USBD_CtlSendData>
        break;
 8015fe4:	e00c      	b.n	8016000 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	3304      	adds	r3, #4
 8015fea:	2201      	movs	r2, #1
 8015fec:	4619      	mov	r1, r3
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 f934 	bl	801625c <USBD_CtlSendData>
        break;
 8015ff4:	e004      	b.n	8016000 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015ff6:	6839      	ldr	r1, [r7, #0]
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f8be 	bl	801617a <USBD_CtlError>
        break;
 8015ffe:	bf00      	nop
}
 8016000:	bf00      	nop
 8016002:	3708      	adds	r7, #8
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}

08016008 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016018:	b2db      	uxtb	r3, r3
 801601a:	3b01      	subs	r3, #1
 801601c:	2b02      	cmp	r3, #2
 801601e:	d81e      	bhi.n	801605e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	88db      	ldrh	r3, [r3, #6]
 8016024:	2b02      	cmp	r3, #2
 8016026:	d004      	beq.n	8016032 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016028:	6839      	ldr	r1, [r7, #0]
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 f8a5 	bl	801617a <USBD_CtlError>
        break;
 8016030:	e01a      	b.n	8016068 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2201      	movs	r2, #1
 8016036:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801603e:	2b00      	cmp	r3, #0
 8016040:	d005      	beq.n	801604e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	68db      	ldr	r3, [r3, #12]
 8016046:	f043 0202 	orr.w	r2, r3, #2
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	330c      	adds	r3, #12
 8016052:	2202      	movs	r2, #2
 8016054:	4619      	mov	r1, r3
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f000 f900 	bl	801625c <USBD_CtlSendData>
      break;
 801605c:	e004      	b.n	8016068 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801605e:	6839      	ldr	r1, [r7, #0]
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f000 f88a 	bl	801617a <USBD_CtlError>
      break;
 8016066:	bf00      	nop
  }
}
 8016068:	bf00      	nop
 801606a:	3708      	adds	r7, #8
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	885b      	ldrh	r3, [r3, #2]
 801607e:	2b01      	cmp	r3, #1
 8016080:	d107      	bne.n	8016092 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2201      	movs	r2, #1
 8016086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f940 	bl	8016310 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016090:	e013      	b.n	80160ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	885b      	ldrh	r3, [r3, #2]
 8016096:	2b02      	cmp	r3, #2
 8016098:	d10b      	bne.n	80160b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	889b      	ldrh	r3, [r3, #4]
 801609e:	0a1b      	lsrs	r3, r3, #8
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 f930 	bl	8016310 <USBD_CtlSendStatus>
}
 80160b0:	e003      	b.n	80160ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80160b2:	6839      	ldr	r1, [r7, #0]
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 f860 	bl	801617a <USBD_CtlError>
}
 80160ba:	bf00      	nop
 80160bc:	3708      	adds	r7, #8
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}

080160c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160c2:	b580      	push	{r7, lr}
 80160c4:	b082      	sub	sp, #8
 80160c6:	af00      	add	r7, sp, #0
 80160c8:	6078      	str	r0, [r7, #4]
 80160ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	3b01      	subs	r3, #1
 80160d6:	2b02      	cmp	r3, #2
 80160d8:	d80b      	bhi.n	80160f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	885b      	ldrh	r3, [r3, #2]
 80160de:	2b01      	cmp	r3, #1
 80160e0:	d10c      	bne.n	80160fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f000 f910 	bl	8016310 <USBD_CtlSendStatus>
      }
      break;
 80160f0:	e004      	b.n	80160fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 f840 	bl	801617a <USBD_CtlError>
      break;
 80160fa:	e000      	b.n	80160fe <USBD_ClrFeature+0x3c>
      break;
 80160fc:	bf00      	nop
  }
}
 80160fe:	bf00      	nop
 8016100:	3708      	adds	r7, #8
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}

08016106 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016106:	b580      	push	{r7, lr}
 8016108:	b084      	sub	sp, #16
 801610a:	af00      	add	r7, sp, #0
 801610c:	6078      	str	r0, [r7, #4]
 801610e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	781a      	ldrb	r2, [r3, #0]
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	3301      	adds	r3, #1
 8016120:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	781a      	ldrb	r2, [r3, #0]
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	3301      	adds	r3, #1
 801612e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f7ff fa41 	bl	80155b8 <SWAPBYTE>
 8016136:	4603      	mov	r3, r0
 8016138:	461a      	mov	r2, r3
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	3301      	adds	r3, #1
 8016142:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	3301      	adds	r3, #1
 8016148:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801614a:	68f8      	ldr	r0, [r7, #12]
 801614c:	f7ff fa34 	bl	80155b8 <SWAPBYTE>
 8016150:	4603      	mov	r3, r0
 8016152:	461a      	mov	r2, r3
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	3301      	adds	r3, #1
 801615c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	3301      	adds	r3, #1
 8016162:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016164:	68f8      	ldr	r0, [r7, #12]
 8016166:	f7ff fa27 	bl	80155b8 <SWAPBYTE>
 801616a:	4603      	mov	r3, r0
 801616c:	461a      	mov	r2, r3
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	80da      	strh	r2, [r3, #6]
}
 8016172:	bf00      	nop
 8016174:	3710      	adds	r7, #16
 8016176:	46bd      	mov	sp, r7
 8016178:	bd80      	pop	{r7, pc}

0801617a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801617a:	b580      	push	{r7, lr}
 801617c:	b082      	sub	sp, #8
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
 8016182:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016184:	2180      	movs	r1, #128	; 0x80
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f000 fd4c 	bl	8016c24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801618c:	2100      	movs	r1, #0
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 fd48 	bl	8016c24 <USBD_LL_StallEP>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b086      	sub	sp, #24
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161a8:	2300      	movs	r3, #0
 80161aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d036      	beq.n	8016220 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80161b6:	6938      	ldr	r0, [r7, #16]
 80161b8:	f000 f836 	bl	8016228 <USBD_GetLen>
 80161bc:	4603      	mov	r3, r0
 80161be:	3301      	adds	r3, #1
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	b29a      	uxth	r2, r3
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80161ca:	7dfb      	ldrb	r3, [r7, #23]
 80161cc:	68ba      	ldr	r2, [r7, #8]
 80161ce:	4413      	add	r3, r2
 80161d0:	687a      	ldr	r2, [r7, #4]
 80161d2:	7812      	ldrb	r2, [r2, #0]
 80161d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80161d6:	7dfb      	ldrb	r3, [r7, #23]
 80161d8:	3301      	adds	r3, #1
 80161da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80161dc:	7dfb      	ldrb	r3, [r7, #23]
 80161de:	68ba      	ldr	r2, [r7, #8]
 80161e0:	4413      	add	r3, r2
 80161e2:	2203      	movs	r2, #3
 80161e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80161e6:	7dfb      	ldrb	r3, [r7, #23]
 80161e8:	3301      	adds	r3, #1
 80161ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80161ec:	e013      	b.n	8016216 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80161ee:	7dfb      	ldrb	r3, [r7, #23]
 80161f0:	68ba      	ldr	r2, [r7, #8]
 80161f2:	4413      	add	r3, r2
 80161f4:	693a      	ldr	r2, [r7, #16]
 80161f6:	7812      	ldrb	r2, [r2, #0]
 80161f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80161fa:	693b      	ldr	r3, [r7, #16]
 80161fc:	3301      	adds	r3, #1
 80161fe:	613b      	str	r3, [r7, #16]
    idx++;
 8016200:	7dfb      	ldrb	r3, [r7, #23]
 8016202:	3301      	adds	r3, #1
 8016204:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016206:	7dfb      	ldrb	r3, [r7, #23]
 8016208:	68ba      	ldr	r2, [r7, #8]
 801620a:	4413      	add	r3, r2
 801620c:	2200      	movs	r2, #0
 801620e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016210:	7dfb      	ldrb	r3, [r7, #23]
 8016212:	3301      	adds	r3, #1
 8016214:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d1e7      	bne.n	80161ee <USBD_GetString+0x52>
 801621e:	e000      	b.n	8016222 <USBD_GetString+0x86>
    return;
 8016220:	bf00      	nop
  }
}
 8016222:	3718      	adds	r7, #24
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016228:	b480      	push	{r7}
 801622a:	b085      	sub	sp, #20
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016230:	2300      	movs	r3, #0
 8016232:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016238:	e005      	b.n	8016246 <USBD_GetLen+0x1e>
  {
    len++;
 801623a:	7bfb      	ldrb	r3, [r7, #15]
 801623c:	3301      	adds	r3, #1
 801623e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	3301      	adds	r3, #1
 8016244:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1f5      	bne.n	801623a <USBD_GetLen+0x12>
  }

  return len;
 801624e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016250:	4618      	mov	r0, r3
 8016252:	3714      	adds	r7, #20
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr

0801625c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2202      	movs	r2, #2
 801626c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	687a      	ldr	r2, [r7, #4]
 801627a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	68ba      	ldr	r2, [r7, #8]
 8016280:	2100      	movs	r1, #0
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	f000 fd57 	bl	8016d36 <USBD_LL_Transmit>

  return USBD_OK;
 8016288:	2300      	movs	r3, #0
}
 801628a:	4618      	mov	r0, r3
 801628c:	3710      	adds	r7, #16
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}

08016292 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016292:	b580      	push	{r7, lr}
 8016294:	b084      	sub	sp, #16
 8016296:	af00      	add	r7, sp, #0
 8016298:	60f8      	str	r0, [r7, #12]
 801629a:	60b9      	str	r1, [r7, #8]
 801629c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	68ba      	ldr	r2, [r7, #8]
 80162a2:	2100      	movs	r1, #0
 80162a4:	68f8      	ldr	r0, [r7, #12]
 80162a6:	f000 fd46 	bl	8016d36 <USBD_LL_Transmit>

  return USBD_OK;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2203      	movs	r2, #3
 80162c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	68ba      	ldr	r2, [r7, #8]
 80162dc:	2100      	movs	r1, #0
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f000 fd4a 	bl	8016d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80162e4:	2300      	movs	r3, #0
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3710      	adds	r7, #16
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}

080162ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b084      	sub	sp, #16
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	60f8      	str	r0, [r7, #12]
 80162f6:	60b9      	str	r1, [r7, #8]
 80162f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	68ba      	ldr	r2, [r7, #8]
 80162fe:	2100      	movs	r1, #0
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f000 fd39 	bl	8016d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016306:	2300      	movs	r3, #0
}
 8016308:	4618      	mov	r0, r3
 801630a:	3710      	adds	r7, #16
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2204      	movs	r2, #4
 801631c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016320:	2300      	movs	r3, #0
 8016322:	2200      	movs	r2, #0
 8016324:	2100      	movs	r1, #0
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f000 fd05 	bl	8016d36 <USBD_LL_Transmit>

  return USBD_OK;
 801632c:	2300      	movs	r3, #0
}
 801632e:	4618      	mov	r0, r3
 8016330:	3708      	adds	r7, #8
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}

08016336 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b082      	sub	sp, #8
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2205      	movs	r2, #5
 8016342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016346:	2300      	movs	r3, #0
 8016348:	2200      	movs	r2, #0
 801634a:	2100      	movs	r1, #0
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f000 fd13 	bl	8016d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016352:	2300      	movs	r3, #0
}
 8016354:	4618      	mov	r0, r3
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801635c:	b480      	push	{r7}
 801635e:	b087      	sub	sp, #28
 8016360:	af00      	add	r7, sp, #0
 8016362:	60f8      	str	r0, [r7, #12]
 8016364:	60b9      	str	r1, [r7, #8]
 8016366:	4613      	mov	r3, r2
 8016368:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801636a:	2301      	movs	r3, #1
 801636c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801636e:	2300      	movs	r3, #0
 8016370:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016372:	4b1f      	ldr	r3, [pc, #124]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 8016374:	7a5b      	ldrb	r3, [r3, #9]
 8016376:	b2db      	uxtb	r3, r3
 8016378:	2b00      	cmp	r3, #0
 801637a:	d131      	bne.n	80163e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801637c:	4b1c      	ldr	r3, [pc, #112]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 801637e:	7a5b      	ldrb	r3, [r3, #9]
 8016380:	b2db      	uxtb	r3, r3
 8016382:	461a      	mov	r2, r3
 8016384:	4b1a      	ldr	r3, [pc, #104]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 8016386:	2100      	movs	r1, #0
 8016388:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801638a:	4b19      	ldr	r3, [pc, #100]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 801638c:	7a5b      	ldrb	r3, [r3, #9]
 801638e:	b2db      	uxtb	r3, r3
 8016390:	4a17      	ldr	r2, [pc, #92]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 8016392:	009b      	lsls	r3, r3, #2
 8016394:	4413      	add	r3, r2
 8016396:	68fa      	ldr	r2, [r7, #12]
 8016398:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801639a:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 801639c:	7a5b      	ldrb	r3, [r3, #9]
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	461a      	mov	r2, r3
 80163a2:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 80163a4:	4413      	add	r3, r2
 80163a6:	79fa      	ldrb	r2, [r7, #7]
 80163a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80163aa:	4b11      	ldr	r3, [pc, #68]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 80163ac:	7a5b      	ldrb	r3, [r3, #9]
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	1c5a      	adds	r2, r3, #1
 80163b2:	b2d1      	uxtb	r1, r2
 80163b4:	4a0e      	ldr	r2, [pc, #56]	; (80163f0 <FATFS_LinkDriverEx+0x94>)
 80163b6:	7251      	strb	r1, [r2, #9]
 80163b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80163ba:	7dbb      	ldrb	r3, [r7, #22]
 80163bc:	3330      	adds	r3, #48	; 0x30
 80163be:	b2da      	uxtb	r2, r3
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	3301      	adds	r3, #1
 80163c8:	223a      	movs	r2, #58	; 0x3a
 80163ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	3302      	adds	r3, #2
 80163d0:	222f      	movs	r2, #47	; 0x2f
 80163d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	3303      	adds	r3, #3
 80163d8:	2200      	movs	r2, #0
 80163da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80163e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	371c      	adds	r7, #28
 80163e6:	46bd      	mov	sp, r7
 80163e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop
 80163f0:	24001714 	.word	0x24001714

080163f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80163fe:	2200      	movs	r2, #0
 8016400:	6839      	ldr	r1, [r7, #0]
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f7ff ffaa 	bl	801635c <FATFS_LinkDriverEx>
 8016408:	4603      	mov	r3, r0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3708      	adds	r7, #8
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
	...

08016414 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016418:	2201      	movs	r2, #1
 801641a:	4913      	ldr	r1, [pc, #76]	; (8016468 <MX_USB_DEVICE_Init+0x54>)
 801641c:	4813      	ldr	r0, [pc, #76]	; (801646c <MX_USB_DEVICE_Init+0x58>)
 801641e:	f7fe fca5 	bl	8014d6c <USBD_Init>
 8016422:	4603      	mov	r3, r0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016428:	f7ec f99c 	bl	8002764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801642c:	4910      	ldr	r1, [pc, #64]	; (8016470 <MX_USB_DEVICE_Init+0x5c>)
 801642e:	480f      	ldr	r0, [pc, #60]	; (801646c <MX_USB_DEVICE_Init+0x58>)
 8016430:	f7fe fccc 	bl	8014dcc <USBD_RegisterClass>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	d001      	beq.n	801643e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801643a:	f7ec f993 	bl	8002764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801643e:	490d      	ldr	r1, [pc, #52]	; (8016474 <MX_USB_DEVICE_Init+0x60>)
 8016440:	480a      	ldr	r0, [pc, #40]	; (801646c <MX_USB_DEVICE_Init+0x58>)
 8016442:	f7fe fbc3 	bl	8014bcc <USBD_CDC_RegisterInterface>
 8016446:	4603      	mov	r3, r0
 8016448:	2b00      	cmp	r3, #0
 801644a:	d001      	beq.n	8016450 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801644c:	f7ec f98a 	bl	8002764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016450:	4806      	ldr	r0, [pc, #24]	; (801646c <MX_USB_DEVICE_Init+0x58>)
 8016452:	f7fe fcf1 	bl	8014e38 <USBD_Start>
 8016456:	4603      	mov	r3, r0
 8016458:	2b00      	cmp	r3, #0
 801645a:	d001      	beq.n	8016460 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801645c:	f7ec f982 	bl	8002764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016460:	f7f3 f960 	bl	8009724 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016464:	bf00      	nop
 8016466:	bd80      	pop	{r7, pc}
 8016468:	240000b0 	.word	0x240000b0
 801646c:	24001720 	.word	0x24001720
 8016470:	2400001c 	.word	0x2400001c
 8016474:	2400009c 	.word	0x2400009c

08016478 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801647c:	2200      	movs	r2, #0
 801647e:	4905      	ldr	r1, [pc, #20]	; (8016494 <CDC_Init_HS+0x1c>)
 8016480:	4805      	ldr	r0, [pc, #20]	; (8016498 <CDC_Init_HS+0x20>)
 8016482:	f7fe fbbd 	bl	8014c00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016486:	4905      	ldr	r1, [pc, #20]	; (801649c <CDC_Init_HS+0x24>)
 8016488:	4803      	ldr	r0, [pc, #12]	; (8016498 <CDC_Init_HS+0x20>)
 801648a:	f7fe fbdb 	bl	8014c44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801648e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016490:	4618      	mov	r0, r3
 8016492:	bd80      	pop	{r7, pc}
 8016494:	240021fc 	.word	0x240021fc
 8016498:	24001720 	.word	0x24001720
 801649c:	240019fc 	.word	0x240019fc

080164a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80164a0:	b480      	push	{r7}
 80164a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80164a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	46bd      	mov	sp, r7
 80164aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ae:	4770      	bx	lr

080164b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80164b0:	b480      	push	{r7}
 80164b2:	b083      	sub	sp, #12
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	6039      	str	r1, [r7, #0]
 80164ba:	71fb      	strb	r3, [r7, #7]
 80164bc:	4613      	mov	r3, r2
 80164be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80164c0:	79fb      	ldrb	r3, [r7, #7]
 80164c2:	2b23      	cmp	r3, #35	; 0x23
 80164c4:	d84a      	bhi.n	801655c <CDC_Control_HS+0xac>
 80164c6:	a201      	add	r2, pc, #4	; (adr r2, 80164cc <CDC_Control_HS+0x1c>)
 80164c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164cc:	0801655d 	.word	0x0801655d
 80164d0:	0801655d 	.word	0x0801655d
 80164d4:	0801655d 	.word	0x0801655d
 80164d8:	0801655d 	.word	0x0801655d
 80164dc:	0801655d 	.word	0x0801655d
 80164e0:	0801655d 	.word	0x0801655d
 80164e4:	0801655d 	.word	0x0801655d
 80164e8:	0801655d 	.word	0x0801655d
 80164ec:	0801655d 	.word	0x0801655d
 80164f0:	0801655d 	.word	0x0801655d
 80164f4:	0801655d 	.word	0x0801655d
 80164f8:	0801655d 	.word	0x0801655d
 80164fc:	0801655d 	.word	0x0801655d
 8016500:	0801655d 	.word	0x0801655d
 8016504:	0801655d 	.word	0x0801655d
 8016508:	0801655d 	.word	0x0801655d
 801650c:	0801655d 	.word	0x0801655d
 8016510:	0801655d 	.word	0x0801655d
 8016514:	0801655d 	.word	0x0801655d
 8016518:	0801655d 	.word	0x0801655d
 801651c:	0801655d 	.word	0x0801655d
 8016520:	0801655d 	.word	0x0801655d
 8016524:	0801655d 	.word	0x0801655d
 8016528:	0801655d 	.word	0x0801655d
 801652c:	0801655d 	.word	0x0801655d
 8016530:	0801655d 	.word	0x0801655d
 8016534:	0801655d 	.word	0x0801655d
 8016538:	0801655d 	.word	0x0801655d
 801653c:	0801655d 	.word	0x0801655d
 8016540:	0801655d 	.word	0x0801655d
 8016544:	0801655d 	.word	0x0801655d
 8016548:	0801655d 	.word	0x0801655d
 801654c:	0801655d 	.word	0x0801655d
 8016550:	0801655d 	.word	0x0801655d
 8016554:	0801655d 	.word	0x0801655d
 8016558:	0801655d 	.word	0x0801655d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801655c:	bf00      	nop
  }

  return (USBD_OK);
 801655e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016560:	4618      	mov	r0, r3
 8016562:	370c      	adds	r7, #12
 8016564:	46bd      	mov	sp, r7
 8016566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656a:	4770      	bx	lr

0801656c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016576:	6879      	ldr	r1, [r7, #4]
 8016578:	480e      	ldr	r0, [pc, #56]	; (80165b4 <CDC_Receive_HS+0x48>)
 801657a:	f7fe fb63 	bl	8014c44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801657e:	480d      	ldr	r0, [pc, #52]	; (80165b4 <CDC_Receive_HS+0x48>)
 8016580:	f7fe fbbe 	bl	8014d00 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801658a:	4b0b      	ldr	r3, [pc, #44]	; (80165b8 <CDC_Receive_HS+0x4c>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4a0b      	ldr	r2, [pc, #44]	; (80165bc <CDC_Receive_HS+0x50>)
 8016590:	4413      	add	r3, r2
 8016592:	68fa      	ldr	r2, [r7, #12]
 8016594:	6879      	ldr	r1, [r7, #4]
 8016596:	4618      	mov	r0, r3
 8016598:	f001 fc49 	bl	8017e2e <memcpy>
  usbBytesReady += cpyLen;
 801659c:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <CDC_Receive_HS+0x4c>)
 801659e:	681a      	ldr	r2, [r3, #0]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	4413      	add	r3, r2
 80165a4:	4a04      	ldr	r2, [pc, #16]	; (80165b8 <CDC_Receive_HS+0x4c>)
 80165a6:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80165a8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	24001720 	.word	0x24001720
 80165b8:	240003e4 	.word	0x240003e4
 80165bc:	240002e4 	.word	0x240002e4

080165c0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	460b      	mov	r3, r1
 80165ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80165cc:	2300      	movs	r3, #0
 80165ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80165d0:	4b0d      	ldr	r3, [pc, #52]	; (8016608 <CDC_Transmit_HS+0x48>)
 80165d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d001      	beq.n	80165e6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80165e2:	2301      	movs	r3, #1
 80165e4:	e00b      	b.n	80165fe <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80165e6:	887b      	ldrh	r3, [r7, #2]
 80165e8:	461a      	mov	r2, r3
 80165ea:	6879      	ldr	r1, [r7, #4]
 80165ec:	4806      	ldr	r0, [pc, #24]	; (8016608 <CDC_Transmit_HS+0x48>)
 80165ee:	f7fe fb07 	bl	8014c00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80165f2:	4805      	ldr	r0, [pc, #20]	; (8016608 <CDC_Transmit_HS+0x48>)
 80165f4:	f7fe fb44 	bl	8014c80 <USBD_CDC_TransmitPacket>
 80165f8:	4603      	mov	r3, r0
 80165fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80165fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3710      	adds	r7, #16
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	24001720 	.word	0x24001720

0801660c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	4613      	mov	r3, r2
 8016618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801661a:	2300      	movs	r3, #0
 801661c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801661e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016622:	4618      	mov	r0, r3
 8016624:	371c      	adds	r7, #28
 8016626:	46bd      	mov	sp, r7
 8016628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662c:	4770      	bx	lr
	...

08016630 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016630:	b480      	push	{r7}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
 8016636:	4603      	mov	r3, r0
 8016638:	6039      	str	r1, [r7, #0]
 801663a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	2212      	movs	r2, #18
 8016640:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016642:	4b03      	ldr	r3, [pc, #12]	; (8016650 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016644:	4618      	mov	r0, r3
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr
 8016650:	240000cc 	.word	0x240000cc

08016654 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	4603      	mov	r3, r0
 801665c:	6039      	str	r1, [r7, #0]
 801665e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	2204      	movs	r2, #4
 8016664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016666:	4b03      	ldr	r3, [pc, #12]	; (8016674 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016668:	4618      	mov	r0, r3
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr
 8016674:	240000e0 	.word	0x240000e0

08016678 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	4603      	mov	r3, r0
 8016680:	6039      	str	r1, [r7, #0]
 8016682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016684:	79fb      	ldrb	r3, [r7, #7]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d105      	bne.n	8016696 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801668a:	683a      	ldr	r2, [r7, #0]
 801668c:	4907      	ldr	r1, [pc, #28]	; (80166ac <USBD_HS_ProductStrDescriptor+0x34>)
 801668e:	4808      	ldr	r0, [pc, #32]	; (80166b0 <USBD_HS_ProductStrDescriptor+0x38>)
 8016690:	f7ff fd84 	bl	801619c <USBD_GetString>
 8016694:	e004      	b.n	80166a0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016696:	683a      	ldr	r2, [r7, #0]
 8016698:	4904      	ldr	r1, [pc, #16]	; (80166ac <USBD_HS_ProductStrDescriptor+0x34>)
 801669a:	4805      	ldr	r0, [pc, #20]	; (80166b0 <USBD_HS_ProductStrDescriptor+0x38>)
 801669c:	f7ff fd7e 	bl	801619c <USBD_GetString>
  }
  return USBD_StrDesc;
 80166a0:	4b02      	ldr	r3, [pc, #8]	; (80166ac <USBD_HS_ProductStrDescriptor+0x34>)
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3708      	adds	r7, #8
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	240029fc 	.word	0x240029fc
 80166b0:	0801b4f8 	.word	0x0801b4f8

080166b4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	4603      	mov	r3, r0
 80166bc:	6039      	str	r1, [r7, #0]
 80166be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80166c0:	683a      	ldr	r2, [r7, #0]
 80166c2:	4904      	ldr	r1, [pc, #16]	; (80166d4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80166c4:	4804      	ldr	r0, [pc, #16]	; (80166d8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80166c6:	f7ff fd69 	bl	801619c <USBD_GetString>
  return USBD_StrDesc;
 80166ca:	4b02      	ldr	r3, [pc, #8]	; (80166d4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3708      	adds	r7, #8
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	240029fc 	.word	0x240029fc
 80166d8:	0801b514 	.word	0x0801b514

080166dc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	4603      	mov	r3, r0
 80166e4:	6039      	str	r1, [r7, #0]
 80166e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	221a      	movs	r2, #26
 80166ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80166ee:	f000 f843 	bl	8016778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80166f2:	4b02      	ldr	r3, [pc, #8]	; (80166fc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	240000e4 	.word	0x240000e4

08016700 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	4603      	mov	r3, r0
 8016708:	6039      	str	r1, [r7, #0]
 801670a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d105      	bne.n	801671e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016712:	683a      	ldr	r2, [r7, #0]
 8016714:	4907      	ldr	r1, [pc, #28]	; (8016734 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016716:	4808      	ldr	r0, [pc, #32]	; (8016738 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016718:	f7ff fd40 	bl	801619c <USBD_GetString>
 801671c:	e004      	b.n	8016728 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801671e:	683a      	ldr	r2, [r7, #0]
 8016720:	4904      	ldr	r1, [pc, #16]	; (8016734 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016722:	4805      	ldr	r0, [pc, #20]	; (8016738 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016724:	f7ff fd3a 	bl	801619c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016728:	4b02      	ldr	r3, [pc, #8]	; (8016734 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801672a:	4618      	mov	r0, r3
 801672c:	3708      	adds	r7, #8
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	240029fc 	.word	0x240029fc
 8016738:	0801b518 	.word	0x0801b518

0801673c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	4603      	mov	r3, r0
 8016744:	6039      	str	r1, [r7, #0]
 8016746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016748:	79fb      	ldrb	r3, [r7, #7]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d105      	bne.n	801675a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	4907      	ldr	r1, [pc, #28]	; (8016770 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016752:	4808      	ldr	r0, [pc, #32]	; (8016774 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016754:	f7ff fd22 	bl	801619c <USBD_GetString>
 8016758:	e004      	b.n	8016764 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801675a:	683a      	ldr	r2, [r7, #0]
 801675c:	4904      	ldr	r1, [pc, #16]	; (8016770 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801675e:	4805      	ldr	r0, [pc, #20]	; (8016774 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016760:	f7ff fd1c 	bl	801619c <USBD_GetString>
  }
  return USBD_StrDesc;
 8016764:	4b02      	ldr	r3, [pc, #8]	; (8016770 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016766:	4618      	mov	r0, r3
 8016768:	3708      	adds	r7, #8
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}
 801676e:	bf00      	nop
 8016770:	240029fc 	.word	0x240029fc
 8016774:	0801b524 	.word	0x0801b524

08016778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b084      	sub	sp, #16
 801677c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801677e:	4b0f      	ldr	r3, [pc, #60]	; (80167bc <Get_SerialNum+0x44>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016784:	4b0e      	ldr	r3, [pc, #56]	; (80167c0 <Get_SerialNum+0x48>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801678a:	4b0e      	ldr	r3, [pc, #56]	; (80167c4 <Get_SerialNum+0x4c>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016790:	68fa      	ldr	r2, [r7, #12]
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4413      	add	r3, r2
 8016796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d009      	beq.n	80167b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801679e:	2208      	movs	r2, #8
 80167a0:	4909      	ldr	r1, [pc, #36]	; (80167c8 <Get_SerialNum+0x50>)
 80167a2:	68f8      	ldr	r0, [r7, #12]
 80167a4:	f000 f814 	bl	80167d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167a8:	2204      	movs	r2, #4
 80167aa:	4908      	ldr	r1, [pc, #32]	; (80167cc <Get_SerialNum+0x54>)
 80167ac:	68b8      	ldr	r0, [r7, #8]
 80167ae:	f000 f80f 	bl	80167d0 <IntToUnicode>
  }
}
 80167b2:	bf00      	nop
 80167b4:	3710      	adds	r7, #16
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	1ff1e800 	.word	0x1ff1e800
 80167c0:	1ff1e804 	.word	0x1ff1e804
 80167c4:	1ff1e808 	.word	0x1ff1e808
 80167c8:	240000e6 	.word	0x240000e6
 80167cc:	240000f6 	.word	0x240000f6

080167d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b087      	sub	sp, #28
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	4613      	mov	r3, r2
 80167dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80167e2:	2300      	movs	r3, #0
 80167e4:	75fb      	strb	r3, [r7, #23]
 80167e6:	e027      	b.n	8016838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	0f1b      	lsrs	r3, r3, #28
 80167ec:	2b09      	cmp	r3, #9
 80167ee:	d80b      	bhi.n	8016808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	0f1b      	lsrs	r3, r3, #28
 80167f4:	b2da      	uxtb	r2, r3
 80167f6:	7dfb      	ldrb	r3, [r7, #23]
 80167f8:	005b      	lsls	r3, r3, #1
 80167fa:	4619      	mov	r1, r3
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	440b      	add	r3, r1
 8016800:	3230      	adds	r2, #48	; 0x30
 8016802:	b2d2      	uxtb	r2, r2
 8016804:	701a      	strb	r2, [r3, #0]
 8016806:	e00a      	b.n	801681e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	0f1b      	lsrs	r3, r3, #28
 801680c:	b2da      	uxtb	r2, r3
 801680e:	7dfb      	ldrb	r3, [r7, #23]
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	4619      	mov	r1, r3
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	440b      	add	r3, r1
 8016818:	3237      	adds	r2, #55	; 0x37
 801681a:	b2d2      	uxtb	r2, r2
 801681c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	011b      	lsls	r3, r3, #4
 8016822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016824:	7dfb      	ldrb	r3, [r7, #23]
 8016826:	005b      	lsls	r3, r3, #1
 8016828:	3301      	adds	r3, #1
 801682a:	68ba      	ldr	r2, [r7, #8]
 801682c:	4413      	add	r3, r2
 801682e:	2200      	movs	r2, #0
 8016830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016832:	7dfb      	ldrb	r3, [r7, #23]
 8016834:	3301      	adds	r3, #1
 8016836:	75fb      	strb	r3, [r7, #23]
 8016838:	7dfa      	ldrb	r2, [r7, #23]
 801683a:	79fb      	ldrb	r3, [r7, #7]
 801683c:	429a      	cmp	r2, r3
 801683e:	d3d3      	bcc.n	80167e8 <IntToUnicode+0x18>
  }
}
 8016840:	bf00      	nop
 8016842:	bf00      	nop
 8016844:	371c      	adds	r7, #28
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr
	...

08016850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b0b2      	sub	sp, #200	; 0xc8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016858:	f107 0310 	add.w	r3, r7, #16
 801685c:	22b8      	movs	r2, #184	; 0xb8
 801685e:	2100      	movs	r1, #0
 8016860:	4618      	mov	r0, r3
 8016862:	f001 fa64 	bl	8017d2e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	4a1a      	ldr	r2, [pc, #104]	; (80168d4 <HAL_PCD_MspInit+0x84>)
 801686c:	4293      	cmp	r3, r2
 801686e:	d12c      	bne.n	80168ca <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016870:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016874:	f04f 0300 	mov.w	r3, #0
 8016878:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801687c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016884:	f107 0310 	add.w	r3, r7, #16
 8016888:	4618      	mov	r0, r3
 801688a:	f7f3 ff2b 	bl	800a6e4 <HAL_RCCEx_PeriphCLKConfig>
 801688e:	4603      	mov	r3, r0
 8016890:	2b00      	cmp	r3, #0
 8016892:	d001      	beq.n	8016898 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016894:	f7eb ff66 	bl	8002764 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016898:	f7f2 ff44 	bl	8009724 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801689c:	4b0e      	ldr	r3, [pc, #56]	; (80168d8 <HAL_PCD_MspInit+0x88>)
 801689e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168a2:	4a0d      	ldr	r2, [pc, #52]	; (80168d8 <HAL_PCD_MspInit+0x88>)
 80168a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80168a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80168ac:	4b0a      	ldr	r3, [pc, #40]	; (80168d8 <HAL_PCD_MspInit+0x88>)
 80168ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80168b6:	60fb      	str	r3, [r7, #12]
 80168b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80168ba:	2200      	movs	r2, #0
 80168bc:	2100      	movs	r1, #0
 80168be:	204d      	movs	r0, #77	; 0x4d
 80168c0:	f7ee fccf 	bl	8005262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80168c4:	204d      	movs	r0, #77	; 0x4d
 80168c6:	f7ee fce6 	bl	8005296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80168ca:	bf00      	nop
 80168cc:	37c8      	adds	r7, #200	; 0xc8
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	bf00      	nop
 80168d4:	40040000 	.word	0x40040000
 80168d8:	58024400 	.word	0x58024400

080168dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80168f0:	4619      	mov	r1, r3
 80168f2:	4610      	mov	r0, r2
 80168f4:	f7fe faed 	bl	8014ed2 <USBD_LL_SetupStage>
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016912:	78fa      	ldrb	r2, [r7, #3]
 8016914:	6879      	ldr	r1, [r7, #4]
 8016916:	4613      	mov	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	4413      	add	r3, r2
 801691c:	009b      	lsls	r3, r3, #2
 801691e:	440b      	add	r3, r1
 8016920:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	78fb      	ldrb	r3, [r7, #3]
 8016928:	4619      	mov	r1, r3
 801692a:	f7fe fb27 	bl	8014f7c <USBD_LL_DataOutStage>
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016936:	b580      	push	{r7, lr}
 8016938:	b082      	sub	sp, #8
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	460b      	mov	r3, r1
 8016940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016948:	78fa      	ldrb	r2, [r7, #3]
 801694a:	6879      	ldr	r1, [r7, #4]
 801694c:	4613      	mov	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	4413      	add	r3, r2
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	440b      	add	r3, r1
 8016956:	3348      	adds	r3, #72	; 0x48
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	78fb      	ldrb	r3, [r7, #3]
 801695c:	4619      	mov	r1, r3
 801695e:	f7fe fbc0 	bl	80150e2 <USBD_LL_DataInStage>
}
 8016962:	bf00      	nop
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b082      	sub	sp, #8
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016978:	4618      	mov	r0, r3
 801697a:	f7fe fcfa 	bl	8015372 <USBD_LL_SOF>
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b084      	sub	sp, #16
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801698e:	2301      	movs	r3, #1
 8016990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	691b      	ldr	r3, [r3, #16]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d102      	bne.n	80169a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801699a:	2300      	movs	r3, #0
 801699c:	73fb      	strb	r3, [r7, #15]
 801699e:	e008      	b.n	80169b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	691b      	ldr	r3, [r3, #16]
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d102      	bne.n	80169ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169a8:	2301      	movs	r3, #1
 80169aa:	73fb      	strb	r3, [r7, #15]
 80169ac:	e001      	b.n	80169b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169ae:	f7eb fed9 	bl	8002764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169b8:	7bfa      	ldrb	r2, [r7, #15]
 80169ba:	4611      	mov	r1, r2
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fe fc94 	bl	80152ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7fe fc3c 	bl	8015246 <USBD_LL_Reset>
}
 80169ce:	bf00      	nop
 80169d0:	3710      	adds	r7, #16
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
	...

080169d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7fe fc8f 	bl	801530a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	6812      	ldr	r2, [r2, #0]
 80169fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80169fe:	f043 0301 	orr.w	r3, r3, #1
 8016a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6a1b      	ldr	r3, [r3, #32]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d005      	beq.n	8016a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a0c:	4b04      	ldr	r3, [pc, #16]	; (8016a20 <HAL_PCD_SuspendCallback+0x48>)
 8016a0e:	691b      	ldr	r3, [r3, #16]
 8016a10:	4a03      	ldr	r2, [pc, #12]	; (8016a20 <HAL_PCD_SuspendCallback+0x48>)
 8016a12:	f043 0306 	orr.w	r3, r3, #6
 8016a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}
 8016a20:	e000ed00 	.word	0xe000ed00

08016a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fe fc85 	bl	8015342 <USBD_LL_Resume>
}
 8016a38:	bf00      	nop
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a52:	78fa      	ldrb	r2, [r7, #3]
 8016a54:	4611      	mov	r1, r2
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7fe fcdd 	bl	8015416 <USBD_LL_IsoOUTIncomplete>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a76:	78fa      	ldrb	r2, [r7, #3]
 8016a78:	4611      	mov	r1, r2
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7fe fc99 	bl	80153b2 <USBD_LL_IsoINIncomplete>
}
 8016a80:	bf00      	nop
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a96:	4618      	mov	r0, r3
 8016a98:	f7fe fcef 	bl	801547a <USBD_LL_DevConnected>
}
 8016a9c:	bf00      	nop
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7fe fcec 	bl	8015490 <USBD_LL_DevDisconnected>
}
 8016ab8:	bf00      	nop
 8016aba:	3708      	adds	r7, #8
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d140      	bne.n	8016b52 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016ad0:	4a22      	ldr	r2, [pc, #136]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	4a20      	ldr	r2, [pc, #128]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016adc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016ae0:	4b1e      	ldr	r3, [pc, #120]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016ae2:	4a1f      	ldr	r2, [pc, #124]	; (8016b60 <USBD_LL_Init+0xa0>)
 8016ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016ae6:	4b1d      	ldr	r3, [pc, #116]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016ae8:	2209      	movs	r2, #9
 8016aea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016aec:	4b1b      	ldr	r3, [pc, #108]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016aee:	2202      	movs	r2, #2
 8016af0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016af2:	4b1a      	ldr	r3, [pc, #104]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016af4:	2200      	movs	r2, #0
 8016af6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016af8:	4b18      	ldr	r3, [pc, #96]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016afa:	2202      	movs	r2, #2
 8016afc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016afe:	4b17      	ldr	r3, [pc, #92]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016b04:	4b15      	ldr	r3, [pc, #84]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b06:	2200      	movs	r2, #0
 8016b08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016b0a:	4b14      	ldr	r3, [pc, #80]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016b10:	4b12      	ldr	r3, [pc, #72]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b12:	2200      	movs	r2, #0
 8016b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016b16:	4b11      	ldr	r3, [pc, #68]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b18:	2200      	movs	r2, #0
 8016b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016b1c:	4b0f      	ldr	r3, [pc, #60]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b1e:	2200      	movs	r2, #0
 8016b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016b22:	480e      	ldr	r0, [pc, #56]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b24:	f7f1 fb0b 	bl	800813e <HAL_PCD_Init>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d001      	beq.n	8016b32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b2e:	f7eb fe19 	bl	8002764 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016b36:	4809      	ldr	r0, [pc, #36]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b38:	f7f2 fd79 	bl	800962e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016b3c:	2280      	movs	r2, #128	; 0x80
 8016b3e:	2100      	movs	r1, #0
 8016b40:	4806      	ldr	r0, [pc, #24]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b42:	f7f2 fd2d 	bl	80095a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016b46:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016b4a:	2101      	movs	r1, #1
 8016b4c:	4803      	ldr	r0, [pc, #12]	; (8016b5c <USBD_LL_Init+0x9c>)
 8016b4e:	f7f2 fd27 	bl	80095a0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016b52:	2300      	movs	r3, #0
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3708      	adds	r7, #8
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}
 8016b5c:	24002bfc 	.word	0x24002bfc
 8016b60:	40040000 	.word	0x40040000

08016b64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b084      	sub	sp, #16
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b70:	2300      	movs	r3, #0
 8016b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7f1 fc03 	bl	8008386 <HAL_PCD_Start>
 8016b80:	4603      	mov	r3, r0
 8016b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b84:	7bfb      	ldrb	r3, [r7, #15]
 8016b86:	4618      	mov	r0, r3
 8016b88:	f000 f942 	bl	8016e10 <USBD_Get_USB_Status>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3710      	adds	r7, #16
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b084      	sub	sp, #16
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	4608      	mov	r0, r1
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	4603      	mov	r3, r0
 8016baa:	70fb      	strb	r3, [r7, #3]
 8016bac:	460b      	mov	r3, r1
 8016bae:	70bb      	strb	r3, [r7, #2]
 8016bb0:	4613      	mov	r3, r2
 8016bb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bb8:	2300      	movs	r3, #0
 8016bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016bc2:	78bb      	ldrb	r3, [r7, #2]
 8016bc4:	883a      	ldrh	r2, [r7, #0]
 8016bc6:	78f9      	ldrb	r1, [r7, #3]
 8016bc8:	f7f2 f903 	bl	8008dd2 <HAL_PCD_EP_Open>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bd0:	7bfb      	ldrb	r3, [r7, #15]
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f000 f91c 	bl	8016e10 <USBD_Get_USB_Status>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3710      	adds	r7, #16
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}

08016be6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016be6:	b580      	push	{r7, lr}
 8016be8:	b084      	sub	sp, #16
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	6078      	str	r0, [r7, #4]
 8016bee:	460b      	mov	r3, r1
 8016bf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c00:	78fa      	ldrb	r2, [r7, #3]
 8016c02:	4611      	mov	r1, r2
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f2 f94c 	bl	8008ea2 <HAL_PCD_EP_Close>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c0e:	7bfb      	ldrb	r3, [r7, #15]
 8016c10:	4618      	mov	r0, r3
 8016c12:	f000 f8fd 	bl	8016e10 <USBD_Get_USB_Status>
 8016c16:	4603      	mov	r3, r0
 8016c18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	3710      	adds	r7, #16
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}

08016c24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b084      	sub	sp, #16
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c30:	2300      	movs	r3, #0
 8016c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c34:	2300      	movs	r3, #0
 8016c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c3e:	78fa      	ldrb	r2, [r7, #3]
 8016c40:	4611      	mov	r1, r2
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7f2 fa06 	bl	8009054 <HAL_PCD_EP_SetStall>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c4c:	7bfb      	ldrb	r3, [r7, #15]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 f8de 	bl	8016e10 <USBD_Get_USB_Status>
 8016c54:	4603      	mov	r3, r0
 8016c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3710      	adds	r7, #16
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c62:	b580      	push	{r7, lr}
 8016c64:	b084      	sub	sp, #16
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	6078      	str	r0, [r7, #4]
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c72:	2300      	movs	r3, #0
 8016c74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c7c:	78fa      	ldrb	r2, [r7, #3]
 8016c7e:	4611      	mov	r1, r2
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7f2 fa4b 	bl	800911c <HAL_PCD_EP_ClrStall>
 8016c86:	4603      	mov	r3, r0
 8016c88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c8a:	7bfb      	ldrb	r3, [r7, #15]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f000 f8bf 	bl	8016e10 <USBD_Get_USB_Status>
 8016c92:	4603      	mov	r3, r0
 8016c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3710      	adds	r7, #16
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	460b      	mov	r3, r1
 8016caa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	da0b      	bge.n	8016cd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016cbc:	78fb      	ldrb	r3, [r7, #3]
 8016cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cc2:	68f9      	ldr	r1, [r7, #12]
 8016cc4:	4613      	mov	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	4413      	add	r3, r2
 8016cca:	009b      	lsls	r3, r3, #2
 8016ccc:	440b      	add	r3, r1
 8016cce:	333e      	adds	r3, #62	; 0x3e
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	e00b      	b.n	8016cec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016cd4:	78fb      	ldrb	r3, [r7, #3]
 8016cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cda:	68f9      	ldr	r1, [r7, #12]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	4413      	add	r3, r2
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	440b      	add	r3, r1
 8016ce6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016cea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3714      	adds	r7, #20
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	460b      	mov	r3, r1
 8016d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d12:	78fa      	ldrb	r2, [r7, #3]
 8016d14:	4611      	mov	r1, r2
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7f2 f836 	bl	8008d88 <HAL_PCD_SetAddress>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d20:	7bfb      	ldrb	r3, [r7, #15]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 f874 	bl	8016e10 <USBD_Get_USB_Status>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b086      	sub	sp, #24
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	60f8      	str	r0, [r7, #12]
 8016d3e:	607a      	str	r2, [r7, #4]
 8016d40:	603b      	str	r3, [r7, #0]
 8016d42:	460b      	mov	r3, r1
 8016d44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d54:	7af9      	ldrb	r1, [r7, #11]
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	f7f2 f940 	bl	8008fde <HAL_PCD_EP_Transmit>
 8016d5e:	4603      	mov	r3, r0
 8016d60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d62:	7dfb      	ldrb	r3, [r7, #23]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f000 f853 	bl	8016e10 <USBD_Get_USB_Status>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3718      	adds	r7, #24
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}

08016d78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b086      	sub	sp, #24
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	607a      	str	r2, [r7, #4]
 8016d82:	603b      	str	r3, [r7, #0]
 8016d84:	460b      	mov	r3, r1
 8016d86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d96:	7af9      	ldrb	r1, [r7, #11]
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	687a      	ldr	r2, [r7, #4]
 8016d9c:	f7f2 f8cb 	bl	8008f36 <HAL_PCD_EP_Receive>
 8016da0:	4603      	mov	r3, r0
 8016da2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da4:	7dfb      	ldrb	r3, [r7, #23]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f000 f832 	bl	8016e10 <USBD_Get_USB_Status>
 8016dac:	4603      	mov	r3, r0
 8016dae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3718      	adds	r7, #24
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	460b      	mov	r3, r1
 8016dc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016dcc:	78fa      	ldrb	r2, [r7, #3]
 8016dce:	4611      	mov	r1, r2
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7f2 f8ec 	bl	8008fae <HAL_PCD_EP_GetRxCount>
 8016dd6:	4603      	mov	r3, r0
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	3708      	adds	r7, #8
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}

08016de0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016de0:	b480      	push	{r7}
 8016de2:	b083      	sub	sp, #12
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016de8:	4b03      	ldr	r3, [pc, #12]	; (8016df8 <USBD_static_malloc+0x18>)
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	370c      	adds	r7, #12
 8016dee:	46bd      	mov	sp, r7
 8016df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop
 8016df8:	24003108 	.word	0x24003108

08016dfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b083      	sub	sp, #12
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e04:	bf00      	nop
 8016e06:	370c      	adds	r7, #12
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0e:	4770      	bx	lr

08016e10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e10:	b480      	push	{r7}
 8016e12:	b085      	sub	sp, #20
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	4603      	mov	r3, r0
 8016e18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e1e:	79fb      	ldrb	r3, [r7, #7]
 8016e20:	2b03      	cmp	r3, #3
 8016e22:	d817      	bhi.n	8016e54 <USBD_Get_USB_Status+0x44>
 8016e24:	a201      	add	r2, pc, #4	; (adr r2, 8016e2c <USBD_Get_USB_Status+0x1c>)
 8016e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e2a:	bf00      	nop
 8016e2c:	08016e3d 	.word	0x08016e3d
 8016e30:	08016e43 	.word	0x08016e43
 8016e34:	08016e49 	.word	0x08016e49
 8016e38:	08016e4f 	.word	0x08016e4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8016e40:	e00b      	b.n	8016e5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e42:	2303      	movs	r3, #3
 8016e44:	73fb      	strb	r3, [r7, #15]
    break;
 8016e46:	e008      	b.n	8016e5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e48:	2301      	movs	r3, #1
 8016e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e4c:	e005      	b.n	8016e5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e4e:	2303      	movs	r3, #3
 8016e50:	73fb      	strb	r3, [r7, #15]
    break;
 8016e52:	e002      	b.n	8016e5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e54:	2303      	movs	r3, #3
 8016e56:	73fb      	strb	r3, [r7, #15]
    break;
 8016e58:	bf00      	nop
  }
  return usb_status;
 8016e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3714      	adds	r7, #20
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <__cvt>:
 8016e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e6a:	ed2d 8b02 	vpush	{d8}
 8016e6e:	eeb0 8b40 	vmov.f64	d8, d0
 8016e72:	b085      	sub	sp, #20
 8016e74:	4617      	mov	r7, r2
 8016e76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016e78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016e7a:	ee18 2a90 	vmov	r2, s17
 8016e7e:	f025 0520 	bic.w	r5, r5, #32
 8016e82:	2a00      	cmp	r2, #0
 8016e84:	bfb6      	itet	lt
 8016e86:	222d      	movlt	r2, #45	; 0x2d
 8016e88:	2200      	movge	r2, #0
 8016e8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8016e8e:	2d46      	cmp	r5, #70	; 0x46
 8016e90:	460c      	mov	r4, r1
 8016e92:	701a      	strb	r2, [r3, #0]
 8016e94:	d004      	beq.n	8016ea0 <__cvt+0x38>
 8016e96:	2d45      	cmp	r5, #69	; 0x45
 8016e98:	d100      	bne.n	8016e9c <__cvt+0x34>
 8016e9a:	3401      	adds	r4, #1
 8016e9c:	2102      	movs	r1, #2
 8016e9e:	e000      	b.n	8016ea2 <__cvt+0x3a>
 8016ea0:	2103      	movs	r1, #3
 8016ea2:	ab03      	add	r3, sp, #12
 8016ea4:	9301      	str	r3, [sp, #4]
 8016ea6:	ab02      	add	r3, sp, #8
 8016ea8:	9300      	str	r3, [sp, #0]
 8016eaa:	4622      	mov	r2, r4
 8016eac:	4633      	mov	r3, r6
 8016eae:	eeb0 0b48 	vmov.f64	d0, d8
 8016eb2:	f001 f859 	bl	8017f68 <_dtoa_r>
 8016eb6:	2d47      	cmp	r5, #71	; 0x47
 8016eb8:	d101      	bne.n	8016ebe <__cvt+0x56>
 8016eba:	07fb      	lsls	r3, r7, #31
 8016ebc:	d51a      	bpl.n	8016ef4 <__cvt+0x8c>
 8016ebe:	2d46      	cmp	r5, #70	; 0x46
 8016ec0:	eb00 0204 	add.w	r2, r0, r4
 8016ec4:	d10c      	bne.n	8016ee0 <__cvt+0x78>
 8016ec6:	7803      	ldrb	r3, [r0, #0]
 8016ec8:	2b30      	cmp	r3, #48	; 0x30
 8016eca:	d107      	bne.n	8016edc <__cvt+0x74>
 8016ecc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed4:	bf1c      	itt	ne
 8016ed6:	f1c4 0401 	rsbne	r4, r4, #1
 8016eda:	6034      	strne	r4, [r6, #0]
 8016edc:	6833      	ldr	r3, [r6, #0]
 8016ede:	441a      	add	r2, r3
 8016ee0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee8:	bf08      	it	eq
 8016eea:	9203      	streq	r2, [sp, #12]
 8016eec:	2130      	movs	r1, #48	; 0x30
 8016eee:	9b03      	ldr	r3, [sp, #12]
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	d307      	bcc.n	8016f04 <__cvt+0x9c>
 8016ef4:	9b03      	ldr	r3, [sp, #12]
 8016ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016ef8:	1a1b      	subs	r3, r3, r0
 8016efa:	6013      	str	r3, [r2, #0]
 8016efc:	b005      	add	sp, #20
 8016efe:	ecbd 8b02 	vpop	{d8}
 8016f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f04:	1c5c      	adds	r4, r3, #1
 8016f06:	9403      	str	r4, [sp, #12]
 8016f08:	7019      	strb	r1, [r3, #0]
 8016f0a:	e7f0      	b.n	8016eee <__cvt+0x86>

08016f0c <__exponent>:
 8016f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2900      	cmp	r1, #0
 8016f12:	bfb8      	it	lt
 8016f14:	4249      	neglt	r1, r1
 8016f16:	f803 2b02 	strb.w	r2, [r3], #2
 8016f1a:	bfb4      	ite	lt
 8016f1c:	222d      	movlt	r2, #45	; 0x2d
 8016f1e:	222b      	movge	r2, #43	; 0x2b
 8016f20:	2909      	cmp	r1, #9
 8016f22:	7042      	strb	r2, [r0, #1]
 8016f24:	dd2a      	ble.n	8016f7c <__exponent+0x70>
 8016f26:	f10d 0207 	add.w	r2, sp, #7
 8016f2a:	4617      	mov	r7, r2
 8016f2c:	260a      	movs	r6, #10
 8016f2e:	4694      	mov	ip, r2
 8016f30:	fb91 f5f6 	sdiv	r5, r1, r6
 8016f34:	fb06 1415 	mls	r4, r6, r5, r1
 8016f38:	3430      	adds	r4, #48	; 0x30
 8016f3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016f3e:	460c      	mov	r4, r1
 8016f40:	2c63      	cmp	r4, #99	; 0x63
 8016f42:	f102 32ff 	add.w	r2, r2, #4294967295
 8016f46:	4629      	mov	r1, r5
 8016f48:	dcf1      	bgt.n	8016f2e <__exponent+0x22>
 8016f4a:	3130      	adds	r1, #48	; 0x30
 8016f4c:	f1ac 0402 	sub.w	r4, ip, #2
 8016f50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016f54:	1c41      	adds	r1, r0, #1
 8016f56:	4622      	mov	r2, r4
 8016f58:	42ba      	cmp	r2, r7
 8016f5a:	d30a      	bcc.n	8016f72 <__exponent+0x66>
 8016f5c:	f10d 0209 	add.w	r2, sp, #9
 8016f60:	eba2 020c 	sub.w	r2, r2, ip
 8016f64:	42bc      	cmp	r4, r7
 8016f66:	bf88      	it	hi
 8016f68:	2200      	movhi	r2, #0
 8016f6a:	4413      	add	r3, r2
 8016f6c:	1a18      	subs	r0, r3, r0
 8016f6e:	b003      	add	sp, #12
 8016f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016f76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016f7a:	e7ed      	b.n	8016f58 <__exponent+0x4c>
 8016f7c:	2330      	movs	r3, #48	; 0x30
 8016f7e:	3130      	adds	r1, #48	; 0x30
 8016f80:	7083      	strb	r3, [r0, #2]
 8016f82:	70c1      	strb	r1, [r0, #3]
 8016f84:	1d03      	adds	r3, r0, #4
 8016f86:	e7f1      	b.n	8016f6c <__exponent+0x60>

08016f88 <_printf_float>:
 8016f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8c:	b08b      	sub	sp, #44	; 0x2c
 8016f8e:	460c      	mov	r4, r1
 8016f90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016f94:	4616      	mov	r6, r2
 8016f96:	461f      	mov	r7, r3
 8016f98:	4605      	mov	r5, r0
 8016f9a:	f000 fed1 	bl	8017d40 <_localeconv_r>
 8016f9e:	f8d0 b000 	ldr.w	fp, [r0]
 8016fa2:	4658      	mov	r0, fp
 8016fa4:	f7e9 fa04 	bl	80003b0 <strlen>
 8016fa8:	2300      	movs	r3, #0
 8016faa:	9308      	str	r3, [sp, #32]
 8016fac:	f8d8 3000 	ldr.w	r3, [r8]
 8016fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016fb4:	6822      	ldr	r2, [r4, #0]
 8016fb6:	3307      	adds	r3, #7
 8016fb8:	f023 0307 	bic.w	r3, r3, #7
 8016fbc:	f103 0108 	add.w	r1, r3, #8
 8016fc0:	f8c8 1000 	str.w	r1, [r8]
 8016fc4:	ed93 0b00 	vldr	d0, [r3]
 8016fc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017228 <_printf_float+0x2a0>
 8016fcc:	eeb0 7bc0 	vabs.f64	d7, d0
 8016fd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8016fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8016fdc:	4682      	mov	sl, r0
 8016fde:	dd24      	ble.n	801702a <_printf_float+0xa2>
 8016fe0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe8:	d502      	bpl.n	8016ff0 <_printf_float+0x68>
 8016fea:	232d      	movs	r3, #45	; 0x2d
 8016fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ff0:	498f      	ldr	r1, [pc, #572]	; (8017230 <_printf_float+0x2a8>)
 8016ff2:	4b90      	ldr	r3, [pc, #576]	; (8017234 <_printf_float+0x2ac>)
 8016ff4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016ff8:	bf94      	ite	ls
 8016ffa:	4688      	movls	r8, r1
 8016ffc:	4698      	movhi	r8, r3
 8016ffe:	2303      	movs	r3, #3
 8017000:	6123      	str	r3, [r4, #16]
 8017002:	f022 0204 	bic.w	r2, r2, #4
 8017006:	2300      	movs	r3, #0
 8017008:	6022      	str	r2, [r4, #0]
 801700a:	9304      	str	r3, [sp, #16]
 801700c:	9700      	str	r7, [sp, #0]
 801700e:	4633      	mov	r3, r6
 8017010:	aa09      	add	r2, sp, #36	; 0x24
 8017012:	4621      	mov	r1, r4
 8017014:	4628      	mov	r0, r5
 8017016:	f000 f9d1 	bl	80173bc <_printf_common>
 801701a:	3001      	adds	r0, #1
 801701c:	f040 808a 	bne.w	8017134 <_printf_float+0x1ac>
 8017020:	f04f 30ff 	mov.w	r0, #4294967295
 8017024:	b00b      	add	sp, #44	; 0x2c
 8017026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702a:	eeb4 0b40 	vcmp.f64	d0, d0
 801702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017032:	d709      	bvc.n	8017048 <_printf_float+0xc0>
 8017034:	ee10 3a90 	vmov	r3, s1
 8017038:	2b00      	cmp	r3, #0
 801703a:	bfbc      	itt	lt
 801703c:	232d      	movlt	r3, #45	; 0x2d
 801703e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017042:	497d      	ldr	r1, [pc, #500]	; (8017238 <_printf_float+0x2b0>)
 8017044:	4b7d      	ldr	r3, [pc, #500]	; (801723c <_printf_float+0x2b4>)
 8017046:	e7d5      	b.n	8016ff4 <_printf_float+0x6c>
 8017048:	6863      	ldr	r3, [r4, #4]
 801704a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801704e:	9104      	str	r1, [sp, #16]
 8017050:	1c59      	adds	r1, r3, #1
 8017052:	d13c      	bne.n	80170ce <_printf_float+0x146>
 8017054:	2306      	movs	r3, #6
 8017056:	6063      	str	r3, [r4, #4]
 8017058:	2300      	movs	r3, #0
 801705a:	9303      	str	r3, [sp, #12]
 801705c:	ab08      	add	r3, sp, #32
 801705e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017066:	ab07      	add	r3, sp, #28
 8017068:	6861      	ldr	r1, [r4, #4]
 801706a:	9300      	str	r3, [sp, #0]
 801706c:	6022      	str	r2, [r4, #0]
 801706e:	f10d 031b 	add.w	r3, sp, #27
 8017072:	4628      	mov	r0, r5
 8017074:	f7ff fef8 	bl	8016e68 <__cvt>
 8017078:	9b04      	ldr	r3, [sp, #16]
 801707a:	9907      	ldr	r1, [sp, #28]
 801707c:	2b47      	cmp	r3, #71	; 0x47
 801707e:	4680      	mov	r8, r0
 8017080:	d108      	bne.n	8017094 <_printf_float+0x10c>
 8017082:	1cc8      	adds	r0, r1, #3
 8017084:	db02      	blt.n	801708c <_printf_float+0x104>
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	4299      	cmp	r1, r3
 801708a:	dd41      	ble.n	8017110 <_printf_float+0x188>
 801708c:	f1a9 0902 	sub.w	r9, r9, #2
 8017090:	fa5f f989 	uxtb.w	r9, r9
 8017094:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017098:	d820      	bhi.n	80170dc <_printf_float+0x154>
 801709a:	3901      	subs	r1, #1
 801709c:	464a      	mov	r2, r9
 801709e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80170a2:	9107      	str	r1, [sp, #28]
 80170a4:	f7ff ff32 	bl	8016f0c <__exponent>
 80170a8:	9a08      	ldr	r2, [sp, #32]
 80170aa:	9004      	str	r0, [sp, #16]
 80170ac:	1813      	adds	r3, r2, r0
 80170ae:	2a01      	cmp	r2, #1
 80170b0:	6123      	str	r3, [r4, #16]
 80170b2:	dc02      	bgt.n	80170ba <_printf_float+0x132>
 80170b4:	6822      	ldr	r2, [r4, #0]
 80170b6:	07d2      	lsls	r2, r2, #31
 80170b8:	d501      	bpl.n	80170be <_printf_float+0x136>
 80170ba:	3301      	adds	r3, #1
 80170bc:	6123      	str	r3, [r4, #16]
 80170be:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d0a2      	beq.n	801700c <_printf_float+0x84>
 80170c6:	232d      	movs	r3, #45	; 0x2d
 80170c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80170cc:	e79e      	b.n	801700c <_printf_float+0x84>
 80170ce:	9904      	ldr	r1, [sp, #16]
 80170d0:	2947      	cmp	r1, #71	; 0x47
 80170d2:	d1c1      	bne.n	8017058 <_printf_float+0xd0>
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d1bf      	bne.n	8017058 <_printf_float+0xd0>
 80170d8:	2301      	movs	r3, #1
 80170da:	e7bc      	b.n	8017056 <_printf_float+0xce>
 80170dc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80170e0:	d118      	bne.n	8017114 <_printf_float+0x18c>
 80170e2:	2900      	cmp	r1, #0
 80170e4:	6863      	ldr	r3, [r4, #4]
 80170e6:	dd0b      	ble.n	8017100 <_printf_float+0x178>
 80170e8:	6121      	str	r1, [r4, #16]
 80170ea:	b913      	cbnz	r3, 80170f2 <_printf_float+0x16a>
 80170ec:	6822      	ldr	r2, [r4, #0]
 80170ee:	07d0      	lsls	r0, r2, #31
 80170f0:	d502      	bpl.n	80170f8 <_printf_float+0x170>
 80170f2:	3301      	adds	r3, #1
 80170f4:	440b      	add	r3, r1
 80170f6:	6123      	str	r3, [r4, #16]
 80170f8:	2300      	movs	r3, #0
 80170fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80170fc:	9304      	str	r3, [sp, #16]
 80170fe:	e7de      	b.n	80170be <_printf_float+0x136>
 8017100:	b913      	cbnz	r3, 8017108 <_printf_float+0x180>
 8017102:	6822      	ldr	r2, [r4, #0]
 8017104:	07d2      	lsls	r2, r2, #31
 8017106:	d501      	bpl.n	801710c <_printf_float+0x184>
 8017108:	3302      	adds	r3, #2
 801710a:	e7f4      	b.n	80170f6 <_printf_float+0x16e>
 801710c:	2301      	movs	r3, #1
 801710e:	e7f2      	b.n	80170f6 <_printf_float+0x16e>
 8017110:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017114:	9b08      	ldr	r3, [sp, #32]
 8017116:	4299      	cmp	r1, r3
 8017118:	db05      	blt.n	8017126 <_printf_float+0x19e>
 801711a:	6823      	ldr	r3, [r4, #0]
 801711c:	6121      	str	r1, [r4, #16]
 801711e:	07d8      	lsls	r0, r3, #31
 8017120:	d5ea      	bpl.n	80170f8 <_printf_float+0x170>
 8017122:	1c4b      	adds	r3, r1, #1
 8017124:	e7e7      	b.n	80170f6 <_printf_float+0x16e>
 8017126:	2900      	cmp	r1, #0
 8017128:	bfd4      	ite	le
 801712a:	f1c1 0202 	rsble	r2, r1, #2
 801712e:	2201      	movgt	r2, #1
 8017130:	4413      	add	r3, r2
 8017132:	e7e0      	b.n	80170f6 <_printf_float+0x16e>
 8017134:	6823      	ldr	r3, [r4, #0]
 8017136:	055a      	lsls	r2, r3, #21
 8017138:	d407      	bmi.n	801714a <_printf_float+0x1c2>
 801713a:	6923      	ldr	r3, [r4, #16]
 801713c:	4642      	mov	r2, r8
 801713e:	4631      	mov	r1, r6
 8017140:	4628      	mov	r0, r5
 8017142:	47b8      	blx	r7
 8017144:	3001      	adds	r0, #1
 8017146:	d12a      	bne.n	801719e <_printf_float+0x216>
 8017148:	e76a      	b.n	8017020 <_printf_float+0x98>
 801714a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801714e:	f240 80e0 	bls.w	8017312 <_printf_float+0x38a>
 8017152:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017156:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801715a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801715e:	d133      	bne.n	80171c8 <_printf_float+0x240>
 8017160:	4a37      	ldr	r2, [pc, #220]	; (8017240 <_printf_float+0x2b8>)
 8017162:	2301      	movs	r3, #1
 8017164:	4631      	mov	r1, r6
 8017166:	4628      	mov	r0, r5
 8017168:	47b8      	blx	r7
 801716a:	3001      	adds	r0, #1
 801716c:	f43f af58 	beq.w	8017020 <_printf_float+0x98>
 8017170:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017174:	429a      	cmp	r2, r3
 8017176:	db02      	blt.n	801717e <_printf_float+0x1f6>
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	07d8      	lsls	r0, r3, #31
 801717c:	d50f      	bpl.n	801719e <_printf_float+0x216>
 801717e:	4653      	mov	r3, sl
 8017180:	465a      	mov	r2, fp
 8017182:	4631      	mov	r1, r6
 8017184:	4628      	mov	r0, r5
 8017186:	47b8      	blx	r7
 8017188:	3001      	adds	r0, #1
 801718a:	f43f af49 	beq.w	8017020 <_printf_float+0x98>
 801718e:	f04f 0800 	mov.w	r8, #0
 8017192:	f104 091a 	add.w	r9, r4, #26
 8017196:	9b08      	ldr	r3, [sp, #32]
 8017198:	3b01      	subs	r3, #1
 801719a:	4543      	cmp	r3, r8
 801719c:	dc09      	bgt.n	80171b2 <_printf_float+0x22a>
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	079b      	lsls	r3, r3, #30
 80171a2:	f100 8106 	bmi.w	80173b2 <_printf_float+0x42a>
 80171a6:	68e0      	ldr	r0, [r4, #12]
 80171a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171aa:	4298      	cmp	r0, r3
 80171ac:	bfb8      	it	lt
 80171ae:	4618      	movlt	r0, r3
 80171b0:	e738      	b.n	8017024 <_printf_float+0x9c>
 80171b2:	2301      	movs	r3, #1
 80171b4:	464a      	mov	r2, r9
 80171b6:	4631      	mov	r1, r6
 80171b8:	4628      	mov	r0, r5
 80171ba:	47b8      	blx	r7
 80171bc:	3001      	adds	r0, #1
 80171be:	f43f af2f 	beq.w	8017020 <_printf_float+0x98>
 80171c2:	f108 0801 	add.w	r8, r8, #1
 80171c6:	e7e6      	b.n	8017196 <_printf_float+0x20e>
 80171c8:	9b07      	ldr	r3, [sp, #28]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	dc3a      	bgt.n	8017244 <_printf_float+0x2bc>
 80171ce:	4a1c      	ldr	r2, [pc, #112]	; (8017240 <_printf_float+0x2b8>)
 80171d0:	2301      	movs	r3, #1
 80171d2:	4631      	mov	r1, r6
 80171d4:	4628      	mov	r0, r5
 80171d6:	47b8      	blx	r7
 80171d8:	3001      	adds	r0, #1
 80171da:	f43f af21 	beq.w	8017020 <_printf_float+0x98>
 80171de:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80171e2:	4313      	orrs	r3, r2
 80171e4:	d102      	bne.n	80171ec <_printf_float+0x264>
 80171e6:	6823      	ldr	r3, [r4, #0]
 80171e8:	07d9      	lsls	r1, r3, #31
 80171ea:	d5d8      	bpl.n	801719e <_printf_float+0x216>
 80171ec:	4653      	mov	r3, sl
 80171ee:	465a      	mov	r2, fp
 80171f0:	4631      	mov	r1, r6
 80171f2:	4628      	mov	r0, r5
 80171f4:	47b8      	blx	r7
 80171f6:	3001      	adds	r0, #1
 80171f8:	f43f af12 	beq.w	8017020 <_printf_float+0x98>
 80171fc:	f04f 0900 	mov.w	r9, #0
 8017200:	f104 0a1a 	add.w	sl, r4, #26
 8017204:	9b07      	ldr	r3, [sp, #28]
 8017206:	425b      	negs	r3, r3
 8017208:	454b      	cmp	r3, r9
 801720a:	dc01      	bgt.n	8017210 <_printf_float+0x288>
 801720c:	9b08      	ldr	r3, [sp, #32]
 801720e:	e795      	b.n	801713c <_printf_float+0x1b4>
 8017210:	2301      	movs	r3, #1
 8017212:	4652      	mov	r2, sl
 8017214:	4631      	mov	r1, r6
 8017216:	4628      	mov	r0, r5
 8017218:	47b8      	blx	r7
 801721a:	3001      	adds	r0, #1
 801721c:	f43f af00 	beq.w	8017020 <_printf_float+0x98>
 8017220:	f109 0901 	add.w	r9, r9, #1
 8017224:	e7ee      	b.n	8017204 <_printf_float+0x27c>
 8017226:	bf00      	nop
 8017228:	ffffffff 	.word	0xffffffff
 801722c:	7fefffff 	.word	0x7fefffff
 8017230:	0801b5f8 	.word	0x0801b5f8
 8017234:	0801b5fc 	.word	0x0801b5fc
 8017238:	0801b600 	.word	0x0801b600
 801723c:	0801b604 	.word	0x0801b604
 8017240:	0801b608 	.word	0x0801b608
 8017244:	9a08      	ldr	r2, [sp, #32]
 8017246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017248:	429a      	cmp	r2, r3
 801724a:	bfa8      	it	ge
 801724c:	461a      	movge	r2, r3
 801724e:	2a00      	cmp	r2, #0
 8017250:	4691      	mov	r9, r2
 8017252:	dc38      	bgt.n	80172c6 <_printf_float+0x33e>
 8017254:	2300      	movs	r3, #0
 8017256:	9305      	str	r3, [sp, #20]
 8017258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801725c:	f104 021a 	add.w	r2, r4, #26
 8017260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017262:	9905      	ldr	r1, [sp, #20]
 8017264:	9304      	str	r3, [sp, #16]
 8017266:	eba3 0309 	sub.w	r3, r3, r9
 801726a:	428b      	cmp	r3, r1
 801726c:	dc33      	bgt.n	80172d6 <_printf_float+0x34e>
 801726e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017272:	429a      	cmp	r2, r3
 8017274:	db3c      	blt.n	80172f0 <_printf_float+0x368>
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	07da      	lsls	r2, r3, #31
 801727a:	d439      	bmi.n	80172f0 <_printf_float+0x368>
 801727c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017280:	eba2 0903 	sub.w	r9, r2, r3
 8017284:	9b04      	ldr	r3, [sp, #16]
 8017286:	1ad2      	subs	r2, r2, r3
 8017288:	4591      	cmp	r9, r2
 801728a:	bfa8      	it	ge
 801728c:	4691      	movge	r9, r2
 801728e:	f1b9 0f00 	cmp.w	r9, #0
 8017292:	dc35      	bgt.n	8017300 <_printf_float+0x378>
 8017294:	f04f 0800 	mov.w	r8, #0
 8017298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801729c:	f104 0a1a 	add.w	sl, r4, #26
 80172a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80172a4:	1a9b      	subs	r3, r3, r2
 80172a6:	eba3 0309 	sub.w	r3, r3, r9
 80172aa:	4543      	cmp	r3, r8
 80172ac:	f77f af77 	ble.w	801719e <_printf_float+0x216>
 80172b0:	2301      	movs	r3, #1
 80172b2:	4652      	mov	r2, sl
 80172b4:	4631      	mov	r1, r6
 80172b6:	4628      	mov	r0, r5
 80172b8:	47b8      	blx	r7
 80172ba:	3001      	adds	r0, #1
 80172bc:	f43f aeb0 	beq.w	8017020 <_printf_float+0x98>
 80172c0:	f108 0801 	add.w	r8, r8, #1
 80172c4:	e7ec      	b.n	80172a0 <_printf_float+0x318>
 80172c6:	4613      	mov	r3, r2
 80172c8:	4631      	mov	r1, r6
 80172ca:	4642      	mov	r2, r8
 80172cc:	4628      	mov	r0, r5
 80172ce:	47b8      	blx	r7
 80172d0:	3001      	adds	r0, #1
 80172d2:	d1bf      	bne.n	8017254 <_printf_float+0x2cc>
 80172d4:	e6a4      	b.n	8017020 <_printf_float+0x98>
 80172d6:	2301      	movs	r3, #1
 80172d8:	4631      	mov	r1, r6
 80172da:	4628      	mov	r0, r5
 80172dc:	9204      	str	r2, [sp, #16]
 80172de:	47b8      	blx	r7
 80172e0:	3001      	adds	r0, #1
 80172e2:	f43f ae9d 	beq.w	8017020 <_printf_float+0x98>
 80172e6:	9b05      	ldr	r3, [sp, #20]
 80172e8:	9a04      	ldr	r2, [sp, #16]
 80172ea:	3301      	adds	r3, #1
 80172ec:	9305      	str	r3, [sp, #20]
 80172ee:	e7b7      	b.n	8017260 <_printf_float+0x2d8>
 80172f0:	4653      	mov	r3, sl
 80172f2:	465a      	mov	r2, fp
 80172f4:	4631      	mov	r1, r6
 80172f6:	4628      	mov	r0, r5
 80172f8:	47b8      	blx	r7
 80172fa:	3001      	adds	r0, #1
 80172fc:	d1be      	bne.n	801727c <_printf_float+0x2f4>
 80172fe:	e68f      	b.n	8017020 <_printf_float+0x98>
 8017300:	9a04      	ldr	r2, [sp, #16]
 8017302:	464b      	mov	r3, r9
 8017304:	4442      	add	r2, r8
 8017306:	4631      	mov	r1, r6
 8017308:	4628      	mov	r0, r5
 801730a:	47b8      	blx	r7
 801730c:	3001      	adds	r0, #1
 801730e:	d1c1      	bne.n	8017294 <_printf_float+0x30c>
 8017310:	e686      	b.n	8017020 <_printf_float+0x98>
 8017312:	9a08      	ldr	r2, [sp, #32]
 8017314:	2a01      	cmp	r2, #1
 8017316:	dc01      	bgt.n	801731c <_printf_float+0x394>
 8017318:	07db      	lsls	r3, r3, #31
 801731a:	d537      	bpl.n	801738c <_printf_float+0x404>
 801731c:	2301      	movs	r3, #1
 801731e:	4642      	mov	r2, r8
 8017320:	4631      	mov	r1, r6
 8017322:	4628      	mov	r0, r5
 8017324:	47b8      	blx	r7
 8017326:	3001      	adds	r0, #1
 8017328:	f43f ae7a 	beq.w	8017020 <_printf_float+0x98>
 801732c:	4653      	mov	r3, sl
 801732e:	465a      	mov	r2, fp
 8017330:	4631      	mov	r1, r6
 8017332:	4628      	mov	r0, r5
 8017334:	47b8      	blx	r7
 8017336:	3001      	adds	r0, #1
 8017338:	f43f ae72 	beq.w	8017020 <_printf_float+0x98>
 801733c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017340:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017348:	9b08      	ldr	r3, [sp, #32]
 801734a:	d01a      	beq.n	8017382 <_printf_float+0x3fa>
 801734c:	3b01      	subs	r3, #1
 801734e:	f108 0201 	add.w	r2, r8, #1
 8017352:	4631      	mov	r1, r6
 8017354:	4628      	mov	r0, r5
 8017356:	47b8      	blx	r7
 8017358:	3001      	adds	r0, #1
 801735a:	d10e      	bne.n	801737a <_printf_float+0x3f2>
 801735c:	e660      	b.n	8017020 <_printf_float+0x98>
 801735e:	2301      	movs	r3, #1
 8017360:	464a      	mov	r2, r9
 8017362:	4631      	mov	r1, r6
 8017364:	4628      	mov	r0, r5
 8017366:	47b8      	blx	r7
 8017368:	3001      	adds	r0, #1
 801736a:	f43f ae59 	beq.w	8017020 <_printf_float+0x98>
 801736e:	f108 0801 	add.w	r8, r8, #1
 8017372:	9b08      	ldr	r3, [sp, #32]
 8017374:	3b01      	subs	r3, #1
 8017376:	4543      	cmp	r3, r8
 8017378:	dcf1      	bgt.n	801735e <_printf_float+0x3d6>
 801737a:	9b04      	ldr	r3, [sp, #16]
 801737c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017380:	e6dd      	b.n	801713e <_printf_float+0x1b6>
 8017382:	f04f 0800 	mov.w	r8, #0
 8017386:	f104 091a 	add.w	r9, r4, #26
 801738a:	e7f2      	b.n	8017372 <_printf_float+0x3ea>
 801738c:	2301      	movs	r3, #1
 801738e:	4642      	mov	r2, r8
 8017390:	e7df      	b.n	8017352 <_printf_float+0x3ca>
 8017392:	2301      	movs	r3, #1
 8017394:	464a      	mov	r2, r9
 8017396:	4631      	mov	r1, r6
 8017398:	4628      	mov	r0, r5
 801739a:	47b8      	blx	r7
 801739c:	3001      	adds	r0, #1
 801739e:	f43f ae3f 	beq.w	8017020 <_printf_float+0x98>
 80173a2:	f108 0801 	add.w	r8, r8, #1
 80173a6:	68e3      	ldr	r3, [r4, #12]
 80173a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173aa:	1a5b      	subs	r3, r3, r1
 80173ac:	4543      	cmp	r3, r8
 80173ae:	dcf0      	bgt.n	8017392 <_printf_float+0x40a>
 80173b0:	e6f9      	b.n	80171a6 <_printf_float+0x21e>
 80173b2:	f04f 0800 	mov.w	r8, #0
 80173b6:	f104 0919 	add.w	r9, r4, #25
 80173ba:	e7f4      	b.n	80173a6 <_printf_float+0x41e>

080173bc <_printf_common>:
 80173bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173c0:	4616      	mov	r6, r2
 80173c2:	4699      	mov	r9, r3
 80173c4:	688a      	ldr	r2, [r1, #8]
 80173c6:	690b      	ldr	r3, [r1, #16]
 80173c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80173cc:	4293      	cmp	r3, r2
 80173ce:	bfb8      	it	lt
 80173d0:	4613      	movlt	r3, r2
 80173d2:	6033      	str	r3, [r6, #0]
 80173d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80173d8:	4607      	mov	r7, r0
 80173da:	460c      	mov	r4, r1
 80173dc:	b10a      	cbz	r2, 80173e2 <_printf_common+0x26>
 80173de:	3301      	adds	r3, #1
 80173e0:	6033      	str	r3, [r6, #0]
 80173e2:	6823      	ldr	r3, [r4, #0]
 80173e4:	0699      	lsls	r1, r3, #26
 80173e6:	bf42      	ittt	mi
 80173e8:	6833      	ldrmi	r3, [r6, #0]
 80173ea:	3302      	addmi	r3, #2
 80173ec:	6033      	strmi	r3, [r6, #0]
 80173ee:	6825      	ldr	r5, [r4, #0]
 80173f0:	f015 0506 	ands.w	r5, r5, #6
 80173f4:	d106      	bne.n	8017404 <_printf_common+0x48>
 80173f6:	f104 0a19 	add.w	sl, r4, #25
 80173fa:	68e3      	ldr	r3, [r4, #12]
 80173fc:	6832      	ldr	r2, [r6, #0]
 80173fe:	1a9b      	subs	r3, r3, r2
 8017400:	42ab      	cmp	r3, r5
 8017402:	dc26      	bgt.n	8017452 <_printf_common+0x96>
 8017404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017408:	1e13      	subs	r3, r2, #0
 801740a:	6822      	ldr	r2, [r4, #0]
 801740c:	bf18      	it	ne
 801740e:	2301      	movne	r3, #1
 8017410:	0692      	lsls	r2, r2, #26
 8017412:	d42b      	bmi.n	801746c <_printf_common+0xb0>
 8017414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017418:	4649      	mov	r1, r9
 801741a:	4638      	mov	r0, r7
 801741c:	47c0      	blx	r8
 801741e:	3001      	adds	r0, #1
 8017420:	d01e      	beq.n	8017460 <_printf_common+0xa4>
 8017422:	6823      	ldr	r3, [r4, #0]
 8017424:	6922      	ldr	r2, [r4, #16]
 8017426:	f003 0306 	and.w	r3, r3, #6
 801742a:	2b04      	cmp	r3, #4
 801742c:	bf02      	ittt	eq
 801742e:	68e5      	ldreq	r5, [r4, #12]
 8017430:	6833      	ldreq	r3, [r6, #0]
 8017432:	1aed      	subeq	r5, r5, r3
 8017434:	68a3      	ldr	r3, [r4, #8]
 8017436:	bf0c      	ite	eq
 8017438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801743c:	2500      	movne	r5, #0
 801743e:	4293      	cmp	r3, r2
 8017440:	bfc4      	itt	gt
 8017442:	1a9b      	subgt	r3, r3, r2
 8017444:	18ed      	addgt	r5, r5, r3
 8017446:	2600      	movs	r6, #0
 8017448:	341a      	adds	r4, #26
 801744a:	42b5      	cmp	r5, r6
 801744c:	d11a      	bne.n	8017484 <_printf_common+0xc8>
 801744e:	2000      	movs	r0, #0
 8017450:	e008      	b.n	8017464 <_printf_common+0xa8>
 8017452:	2301      	movs	r3, #1
 8017454:	4652      	mov	r2, sl
 8017456:	4649      	mov	r1, r9
 8017458:	4638      	mov	r0, r7
 801745a:	47c0      	blx	r8
 801745c:	3001      	adds	r0, #1
 801745e:	d103      	bne.n	8017468 <_printf_common+0xac>
 8017460:	f04f 30ff 	mov.w	r0, #4294967295
 8017464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017468:	3501      	adds	r5, #1
 801746a:	e7c6      	b.n	80173fa <_printf_common+0x3e>
 801746c:	18e1      	adds	r1, r4, r3
 801746e:	1c5a      	adds	r2, r3, #1
 8017470:	2030      	movs	r0, #48	; 0x30
 8017472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017476:	4422      	add	r2, r4
 8017478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801747c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017480:	3302      	adds	r3, #2
 8017482:	e7c7      	b.n	8017414 <_printf_common+0x58>
 8017484:	2301      	movs	r3, #1
 8017486:	4622      	mov	r2, r4
 8017488:	4649      	mov	r1, r9
 801748a:	4638      	mov	r0, r7
 801748c:	47c0      	blx	r8
 801748e:	3001      	adds	r0, #1
 8017490:	d0e6      	beq.n	8017460 <_printf_common+0xa4>
 8017492:	3601      	adds	r6, #1
 8017494:	e7d9      	b.n	801744a <_printf_common+0x8e>
	...

08017498 <_printf_i>:
 8017498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801749c:	7e0f      	ldrb	r7, [r1, #24]
 801749e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80174a0:	2f78      	cmp	r7, #120	; 0x78
 80174a2:	4691      	mov	r9, r2
 80174a4:	4680      	mov	r8, r0
 80174a6:	460c      	mov	r4, r1
 80174a8:	469a      	mov	sl, r3
 80174aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80174ae:	d807      	bhi.n	80174c0 <_printf_i+0x28>
 80174b0:	2f62      	cmp	r7, #98	; 0x62
 80174b2:	d80a      	bhi.n	80174ca <_printf_i+0x32>
 80174b4:	2f00      	cmp	r7, #0
 80174b6:	f000 80d4 	beq.w	8017662 <_printf_i+0x1ca>
 80174ba:	2f58      	cmp	r7, #88	; 0x58
 80174bc:	f000 80c0 	beq.w	8017640 <_printf_i+0x1a8>
 80174c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80174c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80174c8:	e03a      	b.n	8017540 <_printf_i+0xa8>
 80174ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80174ce:	2b15      	cmp	r3, #21
 80174d0:	d8f6      	bhi.n	80174c0 <_printf_i+0x28>
 80174d2:	a101      	add	r1, pc, #4	; (adr r1, 80174d8 <_printf_i+0x40>)
 80174d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174d8:	08017531 	.word	0x08017531
 80174dc:	08017545 	.word	0x08017545
 80174e0:	080174c1 	.word	0x080174c1
 80174e4:	080174c1 	.word	0x080174c1
 80174e8:	080174c1 	.word	0x080174c1
 80174ec:	080174c1 	.word	0x080174c1
 80174f0:	08017545 	.word	0x08017545
 80174f4:	080174c1 	.word	0x080174c1
 80174f8:	080174c1 	.word	0x080174c1
 80174fc:	080174c1 	.word	0x080174c1
 8017500:	080174c1 	.word	0x080174c1
 8017504:	08017649 	.word	0x08017649
 8017508:	08017571 	.word	0x08017571
 801750c:	08017603 	.word	0x08017603
 8017510:	080174c1 	.word	0x080174c1
 8017514:	080174c1 	.word	0x080174c1
 8017518:	0801766b 	.word	0x0801766b
 801751c:	080174c1 	.word	0x080174c1
 8017520:	08017571 	.word	0x08017571
 8017524:	080174c1 	.word	0x080174c1
 8017528:	080174c1 	.word	0x080174c1
 801752c:	0801760b 	.word	0x0801760b
 8017530:	682b      	ldr	r3, [r5, #0]
 8017532:	1d1a      	adds	r2, r3, #4
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	602a      	str	r2, [r5, #0]
 8017538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801753c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017540:	2301      	movs	r3, #1
 8017542:	e09f      	b.n	8017684 <_printf_i+0x1ec>
 8017544:	6820      	ldr	r0, [r4, #0]
 8017546:	682b      	ldr	r3, [r5, #0]
 8017548:	0607      	lsls	r7, r0, #24
 801754a:	f103 0104 	add.w	r1, r3, #4
 801754e:	6029      	str	r1, [r5, #0]
 8017550:	d501      	bpl.n	8017556 <_printf_i+0xbe>
 8017552:	681e      	ldr	r6, [r3, #0]
 8017554:	e003      	b.n	801755e <_printf_i+0xc6>
 8017556:	0646      	lsls	r6, r0, #25
 8017558:	d5fb      	bpl.n	8017552 <_printf_i+0xba>
 801755a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801755e:	2e00      	cmp	r6, #0
 8017560:	da03      	bge.n	801756a <_printf_i+0xd2>
 8017562:	232d      	movs	r3, #45	; 0x2d
 8017564:	4276      	negs	r6, r6
 8017566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801756a:	485a      	ldr	r0, [pc, #360]	; (80176d4 <_printf_i+0x23c>)
 801756c:	230a      	movs	r3, #10
 801756e:	e012      	b.n	8017596 <_printf_i+0xfe>
 8017570:	682b      	ldr	r3, [r5, #0]
 8017572:	6820      	ldr	r0, [r4, #0]
 8017574:	1d19      	adds	r1, r3, #4
 8017576:	6029      	str	r1, [r5, #0]
 8017578:	0605      	lsls	r5, r0, #24
 801757a:	d501      	bpl.n	8017580 <_printf_i+0xe8>
 801757c:	681e      	ldr	r6, [r3, #0]
 801757e:	e002      	b.n	8017586 <_printf_i+0xee>
 8017580:	0641      	lsls	r1, r0, #25
 8017582:	d5fb      	bpl.n	801757c <_printf_i+0xe4>
 8017584:	881e      	ldrh	r6, [r3, #0]
 8017586:	4853      	ldr	r0, [pc, #332]	; (80176d4 <_printf_i+0x23c>)
 8017588:	2f6f      	cmp	r7, #111	; 0x6f
 801758a:	bf0c      	ite	eq
 801758c:	2308      	moveq	r3, #8
 801758e:	230a      	movne	r3, #10
 8017590:	2100      	movs	r1, #0
 8017592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017596:	6865      	ldr	r5, [r4, #4]
 8017598:	60a5      	str	r5, [r4, #8]
 801759a:	2d00      	cmp	r5, #0
 801759c:	bfa2      	ittt	ge
 801759e:	6821      	ldrge	r1, [r4, #0]
 80175a0:	f021 0104 	bicge.w	r1, r1, #4
 80175a4:	6021      	strge	r1, [r4, #0]
 80175a6:	b90e      	cbnz	r6, 80175ac <_printf_i+0x114>
 80175a8:	2d00      	cmp	r5, #0
 80175aa:	d04b      	beq.n	8017644 <_printf_i+0x1ac>
 80175ac:	4615      	mov	r5, r2
 80175ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80175b2:	fb03 6711 	mls	r7, r3, r1, r6
 80175b6:	5dc7      	ldrb	r7, [r0, r7]
 80175b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80175bc:	4637      	mov	r7, r6
 80175be:	42bb      	cmp	r3, r7
 80175c0:	460e      	mov	r6, r1
 80175c2:	d9f4      	bls.n	80175ae <_printf_i+0x116>
 80175c4:	2b08      	cmp	r3, #8
 80175c6:	d10b      	bne.n	80175e0 <_printf_i+0x148>
 80175c8:	6823      	ldr	r3, [r4, #0]
 80175ca:	07de      	lsls	r6, r3, #31
 80175cc:	d508      	bpl.n	80175e0 <_printf_i+0x148>
 80175ce:	6923      	ldr	r3, [r4, #16]
 80175d0:	6861      	ldr	r1, [r4, #4]
 80175d2:	4299      	cmp	r1, r3
 80175d4:	bfde      	ittt	le
 80175d6:	2330      	movle	r3, #48	; 0x30
 80175d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80175dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80175e0:	1b52      	subs	r2, r2, r5
 80175e2:	6122      	str	r2, [r4, #16]
 80175e4:	f8cd a000 	str.w	sl, [sp]
 80175e8:	464b      	mov	r3, r9
 80175ea:	aa03      	add	r2, sp, #12
 80175ec:	4621      	mov	r1, r4
 80175ee:	4640      	mov	r0, r8
 80175f0:	f7ff fee4 	bl	80173bc <_printf_common>
 80175f4:	3001      	adds	r0, #1
 80175f6:	d14a      	bne.n	801768e <_printf_i+0x1f6>
 80175f8:	f04f 30ff 	mov.w	r0, #4294967295
 80175fc:	b004      	add	sp, #16
 80175fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	f043 0320 	orr.w	r3, r3, #32
 8017608:	6023      	str	r3, [r4, #0]
 801760a:	4833      	ldr	r0, [pc, #204]	; (80176d8 <_printf_i+0x240>)
 801760c:	2778      	movs	r7, #120	; 0x78
 801760e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017612:	6823      	ldr	r3, [r4, #0]
 8017614:	6829      	ldr	r1, [r5, #0]
 8017616:	061f      	lsls	r7, r3, #24
 8017618:	f851 6b04 	ldr.w	r6, [r1], #4
 801761c:	d402      	bmi.n	8017624 <_printf_i+0x18c>
 801761e:	065f      	lsls	r7, r3, #25
 8017620:	bf48      	it	mi
 8017622:	b2b6      	uxthmi	r6, r6
 8017624:	07df      	lsls	r7, r3, #31
 8017626:	bf48      	it	mi
 8017628:	f043 0320 	orrmi.w	r3, r3, #32
 801762c:	6029      	str	r1, [r5, #0]
 801762e:	bf48      	it	mi
 8017630:	6023      	strmi	r3, [r4, #0]
 8017632:	b91e      	cbnz	r6, 801763c <_printf_i+0x1a4>
 8017634:	6823      	ldr	r3, [r4, #0]
 8017636:	f023 0320 	bic.w	r3, r3, #32
 801763a:	6023      	str	r3, [r4, #0]
 801763c:	2310      	movs	r3, #16
 801763e:	e7a7      	b.n	8017590 <_printf_i+0xf8>
 8017640:	4824      	ldr	r0, [pc, #144]	; (80176d4 <_printf_i+0x23c>)
 8017642:	e7e4      	b.n	801760e <_printf_i+0x176>
 8017644:	4615      	mov	r5, r2
 8017646:	e7bd      	b.n	80175c4 <_printf_i+0x12c>
 8017648:	682b      	ldr	r3, [r5, #0]
 801764a:	6826      	ldr	r6, [r4, #0]
 801764c:	6961      	ldr	r1, [r4, #20]
 801764e:	1d18      	adds	r0, r3, #4
 8017650:	6028      	str	r0, [r5, #0]
 8017652:	0635      	lsls	r5, r6, #24
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	d501      	bpl.n	801765c <_printf_i+0x1c4>
 8017658:	6019      	str	r1, [r3, #0]
 801765a:	e002      	b.n	8017662 <_printf_i+0x1ca>
 801765c:	0670      	lsls	r0, r6, #25
 801765e:	d5fb      	bpl.n	8017658 <_printf_i+0x1c0>
 8017660:	8019      	strh	r1, [r3, #0]
 8017662:	2300      	movs	r3, #0
 8017664:	6123      	str	r3, [r4, #16]
 8017666:	4615      	mov	r5, r2
 8017668:	e7bc      	b.n	80175e4 <_printf_i+0x14c>
 801766a:	682b      	ldr	r3, [r5, #0]
 801766c:	1d1a      	adds	r2, r3, #4
 801766e:	602a      	str	r2, [r5, #0]
 8017670:	681d      	ldr	r5, [r3, #0]
 8017672:	6862      	ldr	r2, [r4, #4]
 8017674:	2100      	movs	r1, #0
 8017676:	4628      	mov	r0, r5
 8017678:	f7e8 fe4a 	bl	8000310 <memchr>
 801767c:	b108      	cbz	r0, 8017682 <_printf_i+0x1ea>
 801767e:	1b40      	subs	r0, r0, r5
 8017680:	6060      	str	r0, [r4, #4]
 8017682:	6863      	ldr	r3, [r4, #4]
 8017684:	6123      	str	r3, [r4, #16]
 8017686:	2300      	movs	r3, #0
 8017688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801768c:	e7aa      	b.n	80175e4 <_printf_i+0x14c>
 801768e:	6923      	ldr	r3, [r4, #16]
 8017690:	462a      	mov	r2, r5
 8017692:	4649      	mov	r1, r9
 8017694:	4640      	mov	r0, r8
 8017696:	47d0      	blx	sl
 8017698:	3001      	adds	r0, #1
 801769a:	d0ad      	beq.n	80175f8 <_printf_i+0x160>
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	079b      	lsls	r3, r3, #30
 80176a0:	d413      	bmi.n	80176ca <_printf_i+0x232>
 80176a2:	68e0      	ldr	r0, [r4, #12]
 80176a4:	9b03      	ldr	r3, [sp, #12]
 80176a6:	4298      	cmp	r0, r3
 80176a8:	bfb8      	it	lt
 80176aa:	4618      	movlt	r0, r3
 80176ac:	e7a6      	b.n	80175fc <_printf_i+0x164>
 80176ae:	2301      	movs	r3, #1
 80176b0:	4632      	mov	r2, r6
 80176b2:	4649      	mov	r1, r9
 80176b4:	4640      	mov	r0, r8
 80176b6:	47d0      	blx	sl
 80176b8:	3001      	adds	r0, #1
 80176ba:	d09d      	beq.n	80175f8 <_printf_i+0x160>
 80176bc:	3501      	adds	r5, #1
 80176be:	68e3      	ldr	r3, [r4, #12]
 80176c0:	9903      	ldr	r1, [sp, #12]
 80176c2:	1a5b      	subs	r3, r3, r1
 80176c4:	42ab      	cmp	r3, r5
 80176c6:	dcf2      	bgt.n	80176ae <_printf_i+0x216>
 80176c8:	e7eb      	b.n	80176a2 <_printf_i+0x20a>
 80176ca:	2500      	movs	r5, #0
 80176cc:	f104 0619 	add.w	r6, r4, #25
 80176d0:	e7f5      	b.n	80176be <_printf_i+0x226>
 80176d2:	bf00      	nop
 80176d4:	0801b60a 	.word	0x0801b60a
 80176d8:	0801b61b 	.word	0x0801b61b

080176dc <_scanf_float>:
 80176dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e0:	b087      	sub	sp, #28
 80176e2:	4617      	mov	r7, r2
 80176e4:	9303      	str	r3, [sp, #12]
 80176e6:	688b      	ldr	r3, [r1, #8]
 80176e8:	1e5a      	subs	r2, r3, #1
 80176ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80176ee:	bf83      	ittte	hi
 80176f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80176f4:	195b      	addhi	r3, r3, r5
 80176f6:	9302      	strhi	r3, [sp, #8]
 80176f8:	2300      	movls	r3, #0
 80176fa:	bf86      	itte	hi
 80176fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017700:	608b      	strhi	r3, [r1, #8]
 8017702:	9302      	strls	r3, [sp, #8]
 8017704:	680b      	ldr	r3, [r1, #0]
 8017706:	468b      	mov	fp, r1
 8017708:	2500      	movs	r5, #0
 801770a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801770e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017712:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017716:	4680      	mov	r8, r0
 8017718:	460c      	mov	r4, r1
 801771a:	465e      	mov	r6, fp
 801771c:	46aa      	mov	sl, r5
 801771e:	46a9      	mov	r9, r5
 8017720:	9501      	str	r5, [sp, #4]
 8017722:	68a2      	ldr	r2, [r4, #8]
 8017724:	b152      	cbz	r2, 801773c <_scanf_float+0x60>
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	2b4e      	cmp	r3, #78	; 0x4e
 801772c:	d864      	bhi.n	80177f8 <_scanf_float+0x11c>
 801772e:	2b40      	cmp	r3, #64	; 0x40
 8017730:	d83c      	bhi.n	80177ac <_scanf_float+0xd0>
 8017732:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017736:	b2c8      	uxtb	r0, r1
 8017738:	280e      	cmp	r0, #14
 801773a:	d93a      	bls.n	80177b2 <_scanf_float+0xd6>
 801773c:	f1b9 0f00 	cmp.w	r9, #0
 8017740:	d003      	beq.n	801774a <_scanf_float+0x6e>
 8017742:	6823      	ldr	r3, [r4, #0]
 8017744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017748:	6023      	str	r3, [r4, #0]
 801774a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801774e:	f1ba 0f01 	cmp.w	sl, #1
 8017752:	f200 8113 	bhi.w	801797c <_scanf_float+0x2a0>
 8017756:	455e      	cmp	r6, fp
 8017758:	f200 8105 	bhi.w	8017966 <_scanf_float+0x28a>
 801775c:	2501      	movs	r5, #1
 801775e:	4628      	mov	r0, r5
 8017760:	b007      	add	sp, #28
 8017762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017766:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801776a:	2a0d      	cmp	r2, #13
 801776c:	d8e6      	bhi.n	801773c <_scanf_float+0x60>
 801776e:	a101      	add	r1, pc, #4	; (adr r1, 8017774 <_scanf_float+0x98>)
 8017770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017774:	080178b3 	.word	0x080178b3
 8017778:	0801773d 	.word	0x0801773d
 801777c:	0801773d 	.word	0x0801773d
 8017780:	0801773d 	.word	0x0801773d
 8017784:	08017913 	.word	0x08017913
 8017788:	080178eb 	.word	0x080178eb
 801778c:	0801773d 	.word	0x0801773d
 8017790:	0801773d 	.word	0x0801773d
 8017794:	080178c1 	.word	0x080178c1
 8017798:	0801773d 	.word	0x0801773d
 801779c:	0801773d 	.word	0x0801773d
 80177a0:	0801773d 	.word	0x0801773d
 80177a4:	0801773d 	.word	0x0801773d
 80177a8:	08017879 	.word	0x08017879
 80177ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80177b0:	e7db      	b.n	801776a <_scanf_float+0x8e>
 80177b2:	290e      	cmp	r1, #14
 80177b4:	d8c2      	bhi.n	801773c <_scanf_float+0x60>
 80177b6:	a001      	add	r0, pc, #4	; (adr r0, 80177bc <_scanf_float+0xe0>)
 80177b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80177bc:	0801786b 	.word	0x0801786b
 80177c0:	0801773d 	.word	0x0801773d
 80177c4:	0801786b 	.word	0x0801786b
 80177c8:	080178ff 	.word	0x080178ff
 80177cc:	0801773d 	.word	0x0801773d
 80177d0:	08017819 	.word	0x08017819
 80177d4:	08017855 	.word	0x08017855
 80177d8:	08017855 	.word	0x08017855
 80177dc:	08017855 	.word	0x08017855
 80177e0:	08017855 	.word	0x08017855
 80177e4:	08017855 	.word	0x08017855
 80177e8:	08017855 	.word	0x08017855
 80177ec:	08017855 	.word	0x08017855
 80177f0:	08017855 	.word	0x08017855
 80177f4:	08017855 	.word	0x08017855
 80177f8:	2b6e      	cmp	r3, #110	; 0x6e
 80177fa:	d809      	bhi.n	8017810 <_scanf_float+0x134>
 80177fc:	2b60      	cmp	r3, #96	; 0x60
 80177fe:	d8b2      	bhi.n	8017766 <_scanf_float+0x8a>
 8017800:	2b54      	cmp	r3, #84	; 0x54
 8017802:	d077      	beq.n	80178f4 <_scanf_float+0x218>
 8017804:	2b59      	cmp	r3, #89	; 0x59
 8017806:	d199      	bne.n	801773c <_scanf_float+0x60>
 8017808:	2d07      	cmp	r5, #7
 801780a:	d197      	bne.n	801773c <_scanf_float+0x60>
 801780c:	2508      	movs	r5, #8
 801780e:	e029      	b.n	8017864 <_scanf_float+0x188>
 8017810:	2b74      	cmp	r3, #116	; 0x74
 8017812:	d06f      	beq.n	80178f4 <_scanf_float+0x218>
 8017814:	2b79      	cmp	r3, #121	; 0x79
 8017816:	e7f6      	b.n	8017806 <_scanf_float+0x12a>
 8017818:	6821      	ldr	r1, [r4, #0]
 801781a:	05c8      	lsls	r0, r1, #23
 801781c:	d51a      	bpl.n	8017854 <_scanf_float+0x178>
 801781e:	9b02      	ldr	r3, [sp, #8]
 8017820:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017824:	6021      	str	r1, [r4, #0]
 8017826:	f109 0901 	add.w	r9, r9, #1
 801782a:	b11b      	cbz	r3, 8017834 <_scanf_float+0x158>
 801782c:	3b01      	subs	r3, #1
 801782e:	3201      	adds	r2, #1
 8017830:	9302      	str	r3, [sp, #8]
 8017832:	60a2      	str	r2, [r4, #8]
 8017834:	68a3      	ldr	r3, [r4, #8]
 8017836:	3b01      	subs	r3, #1
 8017838:	60a3      	str	r3, [r4, #8]
 801783a:	6923      	ldr	r3, [r4, #16]
 801783c:	3301      	adds	r3, #1
 801783e:	6123      	str	r3, [r4, #16]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	3b01      	subs	r3, #1
 8017844:	2b00      	cmp	r3, #0
 8017846:	607b      	str	r3, [r7, #4]
 8017848:	f340 8084 	ble.w	8017954 <_scanf_float+0x278>
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	3301      	adds	r3, #1
 8017850:	603b      	str	r3, [r7, #0]
 8017852:	e766      	b.n	8017722 <_scanf_float+0x46>
 8017854:	eb1a 0f05 	cmn.w	sl, r5
 8017858:	f47f af70 	bne.w	801773c <_scanf_float+0x60>
 801785c:	6822      	ldr	r2, [r4, #0]
 801785e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017862:	6022      	str	r2, [r4, #0]
 8017864:	f806 3b01 	strb.w	r3, [r6], #1
 8017868:	e7e4      	b.n	8017834 <_scanf_float+0x158>
 801786a:	6822      	ldr	r2, [r4, #0]
 801786c:	0610      	lsls	r0, r2, #24
 801786e:	f57f af65 	bpl.w	801773c <_scanf_float+0x60>
 8017872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017876:	e7f4      	b.n	8017862 <_scanf_float+0x186>
 8017878:	f1ba 0f00 	cmp.w	sl, #0
 801787c:	d10e      	bne.n	801789c <_scanf_float+0x1c0>
 801787e:	f1b9 0f00 	cmp.w	r9, #0
 8017882:	d10e      	bne.n	80178a2 <_scanf_float+0x1c6>
 8017884:	6822      	ldr	r2, [r4, #0]
 8017886:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801788a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801788e:	d108      	bne.n	80178a2 <_scanf_float+0x1c6>
 8017890:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017894:	6022      	str	r2, [r4, #0]
 8017896:	f04f 0a01 	mov.w	sl, #1
 801789a:	e7e3      	b.n	8017864 <_scanf_float+0x188>
 801789c:	f1ba 0f02 	cmp.w	sl, #2
 80178a0:	d055      	beq.n	801794e <_scanf_float+0x272>
 80178a2:	2d01      	cmp	r5, #1
 80178a4:	d002      	beq.n	80178ac <_scanf_float+0x1d0>
 80178a6:	2d04      	cmp	r5, #4
 80178a8:	f47f af48 	bne.w	801773c <_scanf_float+0x60>
 80178ac:	3501      	adds	r5, #1
 80178ae:	b2ed      	uxtb	r5, r5
 80178b0:	e7d8      	b.n	8017864 <_scanf_float+0x188>
 80178b2:	f1ba 0f01 	cmp.w	sl, #1
 80178b6:	f47f af41 	bne.w	801773c <_scanf_float+0x60>
 80178ba:	f04f 0a02 	mov.w	sl, #2
 80178be:	e7d1      	b.n	8017864 <_scanf_float+0x188>
 80178c0:	b97d      	cbnz	r5, 80178e2 <_scanf_float+0x206>
 80178c2:	f1b9 0f00 	cmp.w	r9, #0
 80178c6:	f47f af3c 	bne.w	8017742 <_scanf_float+0x66>
 80178ca:	6822      	ldr	r2, [r4, #0]
 80178cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80178d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80178d4:	f47f af39 	bne.w	801774a <_scanf_float+0x6e>
 80178d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80178dc:	6022      	str	r2, [r4, #0]
 80178de:	2501      	movs	r5, #1
 80178e0:	e7c0      	b.n	8017864 <_scanf_float+0x188>
 80178e2:	2d03      	cmp	r5, #3
 80178e4:	d0e2      	beq.n	80178ac <_scanf_float+0x1d0>
 80178e6:	2d05      	cmp	r5, #5
 80178e8:	e7de      	b.n	80178a8 <_scanf_float+0x1cc>
 80178ea:	2d02      	cmp	r5, #2
 80178ec:	f47f af26 	bne.w	801773c <_scanf_float+0x60>
 80178f0:	2503      	movs	r5, #3
 80178f2:	e7b7      	b.n	8017864 <_scanf_float+0x188>
 80178f4:	2d06      	cmp	r5, #6
 80178f6:	f47f af21 	bne.w	801773c <_scanf_float+0x60>
 80178fa:	2507      	movs	r5, #7
 80178fc:	e7b2      	b.n	8017864 <_scanf_float+0x188>
 80178fe:	6822      	ldr	r2, [r4, #0]
 8017900:	0591      	lsls	r1, r2, #22
 8017902:	f57f af1b 	bpl.w	801773c <_scanf_float+0x60>
 8017906:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801790a:	6022      	str	r2, [r4, #0]
 801790c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017910:	e7a8      	b.n	8017864 <_scanf_float+0x188>
 8017912:	6822      	ldr	r2, [r4, #0]
 8017914:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017918:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801791c:	d006      	beq.n	801792c <_scanf_float+0x250>
 801791e:	0550      	lsls	r0, r2, #21
 8017920:	f57f af0c 	bpl.w	801773c <_scanf_float+0x60>
 8017924:	f1b9 0f00 	cmp.w	r9, #0
 8017928:	f43f af0f 	beq.w	801774a <_scanf_float+0x6e>
 801792c:	0591      	lsls	r1, r2, #22
 801792e:	bf58      	it	pl
 8017930:	9901      	ldrpl	r1, [sp, #4]
 8017932:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017936:	bf58      	it	pl
 8017938:	eba9 0101 	subpl.w	r1, r9, r1
 801793c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017940:	bf58      	it	pl
 8017942:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017946:	6022      	str	r2, [r4, #0]
 8017948:	f04f 0900 	mov.w	r9, #0
 801794c:	e78a      	b.n	8017864 <_scanf_float+0x188>
 801794e:	f04f 0a03 	mov.w	sl, #3
 8017952:	e787      	b.n	8017864 <_scanf_float+0x188>
 8017954:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017958:	4639      	mov	r1, r7
 801795a:	4640      	mov	r0, r8
 801795c:	4798      	blx	r3
 801795e:	2800      	cmp	r0, #0
 8017960:	f43f aedf 	beq.w	8017722 <_scanf_float+0x46>
 8017964:	e6ea      	b.n	801773c <_scanf_float+0x60>
 8017966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801796a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801796e:	463a      	mov	r2, r7
 8017970:	4640      	mov	r0, r8
 8017972:	4798      	blx	r3
 8017974:	6923      	ldr	r3, [r4, #16]
 8017976:	3b01      	subs	r3, #1
 8017978:	6123      	str	r3, [r4, #16]
 801797a:	e6ec      	b.n	8017756 <_scanf_float+0x7a>
 801797c:	1e6b      	subs	r3, r5, #1
 801797e:	2b06      	cmp	r3, #6
 8017980:	d825      	bhi.n	80179ce <_scanf_float+0x2f2>
 8017982:	2d02      	cmp	r5, #2
 8017984:	d836      	bhi.n	80179f4 <_scanf_float+0x318>
 8017986:	455e      	cmp	r6, fp
 8017988:	f67f aee8 	bls.w	801775c <_scanf_float+0x80>
 801798c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017990:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017994:	463a      	mov	r2, r7
 8017996:	4640      	mov	r0, r8
 8017998:	4798      	blx	r3
 801799a:	6923      	ldr	r3, [r4, #16]
 801799c:	3b01      	subs	r3, #1
 801799e:	6123      	str	r3, [r4, #16]
 80179a0:	e7f1      	b.n	8017986 <_scanf_float+0x2aa>
 80179a2:	9802      	ldr	r0, [sp, #8]
 80179a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80179ac:	9002      	str	r0, [sp, #8]
 80179ae:	463a      	mov	r2, r7
 80179b0:	4640      	mov	r0, r8
 80179b2:	4798      	blx	r3
 80179b4:	6923      	ldr	r3, [r4, #16]
 80179b6:	3b01      	subs	r3, #1
 80179b8:	6123      	str	r3, [r4, #16]
 80179ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179be:	fa5f fa8a 	uxtb.w	sl, sl
 80179c2:	f1ba 0f02 	cmp.w	sl, #2
 80179c6:	d1ec      	bne.n	80179a2 <_scanf_float+0x2c6>
 80179c8:	3d03      	subs	r5, #3
 80179ca:	b2ed      	uxtb	r5, r5
 80179cc:	1b76      	subs	r6, r6, r5
 80179ce:	6823      	ldr	r3, [r4, #0]
 80179d0:	05da      	lsls	r2, r3, #23
 80179d2:	d52f      	bpl.n	8017a34 <_scanf_float+0x358>
 80179d4:	055b      	lsls	r3, r3, #21
 80179d6:	d510      	bpl.n	80179fa <_scanf_float+0x31e>
 80179d8:	455e      	cmp	r6, fp
 80179da:	f67f aebf 	bls.w	801775c <_scanf_float+0x80>
 80179de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80179e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80179e6:	463a      	mov	r2, r7
 80179e8:	4640      	mov	r0, r8
 80179ea:	4798      	blx	r3
 80179ec:	6923      	ldr	r3, [r4, #16]
 80179ee:	3b01      	subs	r3, #1
 80179f0:	6123      	str	r3, [r4, #16]
 80179f2:	e7f1      	b.n	80179d8 <_scanf_float+0x2fc>
 80179f4:	46aa      	mov	sl, r5
 80179f6:	9602      	str	r6, [sp, #8]
 80179f8:	e7df      	b.n	80179ba <_scanf_float+0x2de>
 80179fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80179fe:	6923      	ldr	r3, [r4, #16]
 8017a00:	2965      	cmp	r1, #101	; 0x65
 8017a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8017a06:	f106 35ff 	add.w	r5, r6, #4294967295
 8017a0a:	6123      	str	r3, [r4, #16]
 8017a0c:	d00c      	beq.n	8017a28 <_scanf_float+0x34c>
 8017a0e:	2945      	cmp	r1, #69	; 0x45
 8017a10:	d00a      	beq.n	8017a28 <_scanf_float+0x34c>
 8017a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a16:	463a      	mov	r2, r7
 8017a18:	4640      	mov	r0, r8
 8017a1a:	4798      	blx	r3
 8017a1c:	6923      	ldr	r3, [r4, #16]
 8017a1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017a22:	3b01      	subs	r3, #1
 8017a24:	1eb5      	subs	r5, r6, #2
 8017a26:	6123      	str	r3, [r4, #16]
 8017a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a2c:	463a      	mov	r2, r7
 8017a2e:	4640      	mov	r0, r8
 8017a30:	4798      	blx	r3
 8017a32:	462e      	mov	r6, r5
 8017a34:	6825      	ldr	r5, [r4, #0]
 8017a36:	f015 0510 	ands.w	r5, r5, #16
 8017a3a:	d14d      	bne.n	8017ad8 <_scanf_float+0x3fc>
 8017a3c:	7035      	strb	r5, [r6, #0]
 8017a3e:	6823      	ldr	r3, [r4, #0]
 8017a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017a48:	d11a      	bne.n	8017a80 <_scanf_float+0x3a4>
 8017a4a:	9b01      	ldr	r3, [sp, #4]
 8017a4c:	454b      	cmp	r3, r9
 8017a4e:	eba3 0209 	sub.w	r2, r3, r9
 8017a52:	d122      	bne.n	8017a9a <_scanf_float+0x3be>
 8017a54:	2200      	movs	r2, #0
 8017a56:	4659      	mov	r1, fp
 8017a58:	4640      	mov	r0, r8
 8017a5a:	f002 fb67 	bl	801a12c <_strtod_r>
 8017a5e:	9b03      	ldr	r3, [sp, #12]
 8017a60:	6821      	ldr	r1, [r4, #0]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	f011 0f02 	tst.w	r1, #2
 8017a68:	f103 0204 	add.w	r2, r3, #4
 8017a6c:	d020      	beq.n	8017ab0 <_scanf_float+0x3d4>
 8017a6e:	9903      	ldr	r1, [sp, #12]
 8017a70:	600a      	str	r2, [r1, #0]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	ed83 0b00 	vstr	d0, [r3]
 8017a78:	68e3      	ldr	r3, [r4, #12]
 8017a7a:	3301      	adds	r3, #1
 8017a7c:	60e3      	str	r3, [r4, #12]
 8017a7e:	e66e      	b.n	801775e <_scanf_float+0x82>
 8017a80:	9b04      	ldr	r3, [sp, #16]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d0e6      	beq.n	8017a54 <_scanf_float+0x378>
 8017a86:	9905      	ldr	r1, [sp, #20]
 8017a88:	230a      	movs	r3, #10
 8017a8a:	462a      	mov	r2, r5
 8017a8c:	3101      	adds	r1, #1
 8017a8e:	4640      	mov	r0, r8
 8017a90:	f002 fbd4 	bl	801a23c <_strtol_r>
 8017a94:	9b04      	ldr	r3, [sp, #16]
 8017a96:	9e05      	ldr	r6, [sp, #20]
 8017a98:	1ac2      	subs	r2, r0, r3
 8017a9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017a9e:	429e      	cmp	r6, r3
 8017aa0:	bf28      	it	cs
 8017aa2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017aa6:	490d      	ldr	r1, [pc, #52]	; (8017adc <_scanf_float+0x400>)
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f000 f8dd 	bl	8017c68 <siprintf>
 8017aae:	e7d1      	b.n	8017a54 <_scanf_float+0x378>
 8017ab0:	f011 0f04 	tst.w	r1, #4
 8017ab4:	9903      	ldr	r1, [sp, #12]
 8017ab6:	600a      	str	r2, [r1, #0]
 8017ab8:	d1db      	bne.n	8017a72 <_scanf_float+0x396>
 8017aba:	eeb4 0b40 	vcmp.f64	d0, d0
 8017abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ac2:	681e      	ldr	r6, [r3, #0]
 8017ac4:	d705      	bvc.n	8017ad2 <_scanf_float+0x3f6>
 8017ac6:	4806      	ldr	r0, [pc, #24]	; (8017ae0 <_scanf_float+0x404>)
 8017ac8:	f000 f9c0 	bl	8017e4c <nanf>
 8017acc:	ed86 0a00 	vstr	s0, [r6]
 8017ad0:	e7d2      	b.n	8017a78 <_scanf_float+0x39c>
 8017ad2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017ad6:	e7f9      	b.n	8017acc <_scanf_float+0x3f0>
 8017ad8:	2500      	movs	r5, #0
 8017ada:	e640      	b.n	801775e <_scanf_float+0x82>
 8017adc:	0801b62c 	.word	0x0801b62c
 8017ae0:	0801b9bd 	.word	0x0801b9bd

08017ae4 <std>:
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	b510      	push	{r4, lr}
 8017ae8:	4604      	mov	r4, r0
 8017aea:	e9c0 3300 	strd	r3, r3, [r0]
 8017aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017af2:	6083      	str	r3, [r0, #8]
 8017af4:	8181      	strh	r1, [r0, #12]
 8017af6:	6643      	str	r3, [r0, #100]	; 0x64
 8017af8:	81c2      	strh	r2, [r0, #14]
 8017afa:	6183      	str	r3, [r0, #24]
 8017afc:	4619      	mov	r1, r3
 8017afe:	2208      	movs	r2, #8
 8017b00:	305c      	adds	r0, #92	; 0x5c
 8017b02:	f000 f914 	bl	8017d2e <memset>
 8017b06:	4b0d      	ldr	r3, [pc, #52]	; (8017b3c <std+0x58>)
 8017b08:	6263      	str	r3, [r4, #36]	; 0x24
 8017b0a:	4b0d      	ldr	r3, [pc, #52]	; (8017b40 <std+0x5c>)
 8017b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b0e:	4b0d      	ldr	r3, [pc, #52]	; (8017b44 <std+0x60>)
 8017b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b12:	4b0d      	ldr	r3, [pc, #52]	; (8017b48 <std+0x64>)
 8017b14:	6323      	str	r3, [r4, #48]	; 0x30
 8017b16:	4b0d      	ldr	r3, [pc, #52]	; (8017b4c <std+0x68>)
 8017b18:	6224      	str	r4, [r4, #32]
 8017b1a:	429c      	cmp	r4, r3
 8017b1c:	d006      	beq.n	8017b2c <std+0x48>
 8017b1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017b22:	4294      	cmp	r4, r2
 8017b24:	d002      	beq.n	8017b2c <std+0x48>
 8017b26:	33d0      	adds	r3, #208	; 0xd0
 8017b28:	429c      	cmp	r4, r3
 8017b2a:	d105      	bne.n	8017b38 <std+0x54>
 8017b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b34:	f000 b978 	b.w	8017e28 <__retarget_lock_init_recursive>
 8017b38:	bd10      	pop	{r4, pc}
 8017b3a:	bf00      	nop
 8017b3c:	08017ca9 	.word	0x08017ca9
 8017b40:	08017ccb 	.word	0x08017ccb
 8017b44:	08017d03 	.word	0x08017d03
 8017b48:	08017d27 	.word	0x08017d27
 8017b4c:	24003328 	.word	0x24003328

08017b50 <stdio_exit_handler>:
 8017b50:	4a02      	ldr	r2, [pc, #8]	; (8017b5c <stdio_exit_handler+0xc>)
 8017b52:	4903      	ldr	r1, [pc, #12]	; (8017b60 <stdio_exit_handler+0x10>)
 8017b54:	4803      	ldr	r0, [pc, #12]	; (8017b64 <stdio_exit_handler+0x14>)
 8017b56:	f000 b869 	b.w	8017c2c <_fwalk_sglue>
 8017b5a:	bf00      	nop
 8017b5c:	24000100 	.word	0x24000100
 8017b60:	0801a5fd 	.word	0x0801a5fd
 8017b64:	2400010c 	.word	0x2400010c

08017b68 <cleanup_stdio>:
 8017b68:	6841      	ldr	r1, [r0, #4]
 8017b6a:	4b0c      	ldr	r3, [pc, #48]	; (8017b9c <cleanup_stdio+0x34>)
 8017b6c:	4299      	cmp	r1, r3
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	4604      	mov	r4, r0
 8017b72:	d001      	beq.n	8017b78 <cleanup_stdio+0x10>
 8017b74:	f002 fd42 	bl	801a5fc <_fflush_r>
 8017b78:	68a1      	ldr	r1, [r4, #8]
 8017b7a:	4b09      	ldr	r3, [pc, #36]	; (8017ba0 <cleanup_stdio+0x38>)
 8017b7c:	4299      	cmp	r1, r3
 8017b7e:	d002      	beq.n	8017b86 <cleanup_stdio+0x1e>
 8017b80:	4620      	mov	r0, r4
 8017b82:	f002 fd3b 	bl	801a5fc <_fflush_r>
 8017b86:	68e1      	ldr	r1, [r4, #12]
 8017b88:	4b06      	ldr	r3, [pc, #24]	; (8017ba4 <cleanup_stdio+0x3c>)
 8017b8a:	4299      	cmp	r1, r3
 8017b8c:	d004      	beq.n	8017b98 <cleanup_stdio+0x30>
 8017b8e:	4620      	mov	r0, r4
 8017b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b94:	f002 bd32 	b.w	801a5fc <_fflush_r>
 8017b98:	bd10      	pop	{r4, pc}
 8017b9a:	bf00      	nop
 8017b9c:	24003328 	.word	0x24003328
 8017ba0:	24003390 	.word	0x24003390
 8017ba4:	240033f8 	.word	0x240033f8

08017ba8 <global_stdio_init.part.0>:
 8017ba8:	b510      	push	{r4, lr}
 8017baa:	4b0b      	ldr	r3, [pc, #44]	; (8017bd8 <global_stdio_init.part.0+0x30>)
 8017bac:	4c0b      	ldr	r4, [pc, #44]	; (8017bdc <global_stdio_init.part.0+0x34>)
 8017bae:	4a0c      	ldr	r2, [pc, #48]	; (8017be0 <global_stdio_init.part.0+0x38>)
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	2104      	movs	r1, #4
 8017bb8:	f7ff ff94 	bl	8017ae4 <std>
 8017bbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	2109      	movs	r1, #9
 8017bc4:	f7ff ff8e 	bl	8017ae4 <std>
 8017bc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017bcc:	2202      	movs	r2, #2
 8017bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bd2:	2112      	movs	r1, #18
 8017bd4:	f7ff bf86 	b.w	8017ae4 <std>
 8017bd8:	24003460 	.word	0x24003460
 8017bdc:	24003328 	.word	0x24003328
 8017be0:	08017b51 	.word	0x08017b51

08017be4 <__sfp_lock_acquire>:
 8017be4:	4801      	ldr	r0, [pc, #4]	; (8017bec <__sfp_lock_acquire+0x8>)
 8017be6:	f000 b920 	b.w	8017e2a <__retarget_lock_acquire_recursive>
 8017bea:	bf00      	nop
 8017bec:	24003469 	.word	0x24003469

08017bf0 <__sfp_lock_release>:
 8017bf0:	4801      	ldr	r0, [pc, #4]	; (8017bf8 <__sfp_lock_release+0x8>)
 8017bf2:	f000 b91b 	b.w	8017e2c <__retarget_lock_release_recursive>
 8017bf6:	bf00      	nop
 8017bf8:	24003469 	.word	0x24003469

08017bfc <__sinit>:
 8017bfc:	b510      	push	{r4, lr}
 8017bfe:	4604      	mov	r4, r0
 8017c00:	f7ff fff0 	bl	8017be4 <__sfp_lock_acquire>
 8017c04:	6a23      	ldr	r3, [r4, #32]
 8017c06:	b11b      	cbz	r3, 8017c10 <__sinit+0x14>
 8017c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c0c:	f7ff bff0 	b.w	8017bf0 <__sfp_lock_release>
 8017c10:	4b04      	ldr	r3, [pc, #16]	; (8017c24 <__sinit+0x28>)
 8017c12:	6223      	str	r3, [r4, #32]
 8017c14:	4b04      	ldr	r3, [pc, #16]	; (8017c28 <__sinit+0x2c>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d1f5      	bne.n	8017c08 <__sinit+0xc>
 8017c1c:	f7ff ffc4 	bl	8017ba8 <global_stdio_init.part.0>
 8017c20:	e7f2      	b.n	8017c08 <__sinit+0xc>
 8017c22:	bf00      	nop
 8017c24:	08017b69 	.word	0x08017b69
 8017c28:	24003460 	.word	0x24003460

08017c2c <_fwalk_sglue>:
 8017c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c30:	4607      	mov	r7, r0
 8017c32:	4688      	mov	r8, r1
 8017c34:	4614      	mov	r4, r2
 8017c36:	2600      	movs	r6, #0
 8017c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8017c40:	d505      	bpl.n	8017c4e <_fwalk_sglue+0x22>
 8017c42:	6824      	ldr	r4, [r4, #0]
 8017c44:	2c00      	cmp	r4, #0
 8017c46:	d1f7      	bne.n	8017c38 <_fwalk_sglue+0xc>
 8017c48:	4630      	mov	r0, r6
 8017c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c4e:	89ab      	ldrh	r3, [r5, #12]
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d907      	bls.n	8017c64 <_fwalk_sglue+0x38>
 8017c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	d003      	beq.n	8017c64 <_fwalk_sglue+0x38>
 8017c5c:	4629      	mov	r1, r5
 8017c5e:	4638      	mov	r0, r7
 8017c60:	47c0      	blx	r8
 8017c62:	4306      	orrs	r6, r0
 8017c64:	3568      	adds	r5, #104	; 0x68
 8017c66:	e7e9      	b.n	8017c3c <_fwalk_sglue+0x10>

08017c68 <siprintf>:
 8017c68:	b40e      	push	{r1, r2, r3}
 8017c6a:	b500      	push	{lr}
 8017c6c:	b09c      	sub	sp, #112	; 0x70
 8017c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8017c70:	9002      	str	r0, [sp, #8]
 8017c72:	9006      	str	r0, [sp, #24]
 8017c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c78:	4809      	ldr	r0, [pc, #36]	; (8017ca0 <siprintf+0x38>)
 8017c7a:	9107      	str	r1, [sp, #28]
 8017c7c:	9104      	str	r1, [sp, #16]
 8017c7e:	4909      	ldr	r1, [pc, #36]	; (8017ca4 <siprintf+0x3c>)
 8017c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c84:	9105      	str	r1, [sp, #20]
 8017c86:	6800      	ldr	r0, [r0, #0]
 8017c88:	9301      	str	r3, [sp, #4]
 8017c8a:	a902      	add	r1, sp, #8
 8017c8c:	f002 fb32 	bl	801a2f4 <_svfiprintf_r>
 8017c90:	9b02      	ldr	r3, [sp, #8]
 8017c92:	2200      	movs	r2, #0
 8017c94:	701a      	strb	r2, [r3, #0]
 8017c96:	b01c      	add	sp, #112	; 0x70
 8017c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c9c:	b003      	add	sp, #12
 8017c9e:	4770      	bx	lr
 8017ca0:	24000158 	.word	0x24000158
 8017ca4:	ffff0208 	.word	0xffff0208

08017ca8 <__sread>:
 8017ca8:	b510      	push	{r4, lr}
 8017caa:	460c      	mov	r4, r1
 8017cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb0:	f000 f86c 	bl	8017d8c <_read_r>
 8017cb4:	2800      	cmp	r0, #0
 8017cb6:	bfab      	itete	ge
 8017cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cba:	89a3      	ldrhlt	r3, [r4, #12]
 8017cbc:	181b      	addge	r3, r3, r0
 8017cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017cc2:	bfac      	ite	ge
 8017cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cc6:	81a3      	strhlt	r3, [r4, #12]
 8017cc8:	bd10      	pop	{r4, pc}

08017cca <__swrite>:
 8017cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cce:	461f      	mov	r7, r3
 8017cd0:	898b      	ldrh	r3, [r1, #12]
 8017cd2:	05db      	lsls	r3, r3, #23
 8017cd4:	4605      	mov	r5, r0
 8017cd6:	460c      	mov	r4, r1
 8017cd8:	4616      	mov	r6, r2
 8017cda:	d505      	bpl.n	8017ce8 <__swrite+0x1e>
 8017cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ce0:	2302      	movs	r3, #2
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	f000 f840 	bl	8017d68 <_lseek_r>
 8017ce8:	89a3      	ldrh	r3, [r4, #12]
 8017cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017cf2:	81a3      	strh	r3, [r4, #12]
 8017cf4:	4632      	mov	r2, r6
 8017cf6:	463b      	mov	r3, r7
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cfe:	f000 b857 	b.w	8017db0 <_write_r>

08017d02 <__sseek>:
 8017d02:	b510      	push	{r4, lr}
 8017d04:	460c      	mov	r4, r1
 8017d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d0a:	f000 f82d 	bl	8017d68 <_lseek_r>
 8017d0e:	1c43      	adds	r3, r0, #1
 8017d10:	89a3      	ldrh	r3, [r4, #12]
 8017d12:	bf15      	itete	ne
 8017d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d1e:	81a3      	strheq	r3, [r4, #12]
 8017d20:	bf18      	it	ne
 8017d22:	81a3      	strhne	r3, [r4, #12]
 8017d24:	bd10      	pop	{r4, pc}

08017d26 <__sclose>:
 8017d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d2a:	f000 b80d 	b.w	8017d48 <_close_r>

08017d2e <memset>:
 8017d2e:	4402      	add	r2, r0
 8017d30:	4603      	mov	r3, r0
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d100      	bne.n	8017d38 <memset+0xa>
 8017d36:	4770      	bx	lr
 8017d38:	f803 1b01 	strb.w	r1, [r3], #1
 8017d3c:	e7f9      	b.n	8017d32 <memset+0x4>
	...

08017d40 <_localeconv_r>:
 8017d40:	4800      	ldr	r0, [pc, #0]	; (8017d44 <_localeconv_r+0x4>)
 8017d42:	4770      	bx	lr
 8017d44:	2400024c 	.word	0x2400024c

08017d48 <_close_r>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	4d06      	ldr	r5, [pc, #24]	; (8017d64 <_close_r+0x1c>)
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	4604      	mov	r4, r0
 8017d50:	4608      	mov	r0, r1
 8017d52:	602b      	str	r3, [r5, #0]
 8017d54:	f7eb fc61 	bl	800361a <_close>
 8017d58:	1c43      	adds	r3, r0, #1
 8017d5a:	d102      	bne.n	8017d62 <_close_r+0x1a>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	b103      	cbz	r3, 8017d62 <_close_r+0x1a>
 8017d60:	6023      	str	r3, [r4, #0]
 8017d62:	bd38      	pop	{r3, r4, r5, pc}
 8017d64:	24003464 	.word	0x24003464

08017d68 <_lseek_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4d07      	ldr	r5, [pc, #28]	; (8017d88 <_lseek_r+0x20>)
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	4608      	mov	r0, r1
 8017d70:	4611      	mov	r1, r2
 8017d72:	2200      	movs	r2, #0
 8017d74:	602a      	str	r2, [r5, #0]
 8017d76:	461a      	mov	r2, r3
 8017d78:	f7eb fc76 	bl	8003668 <_lseek>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_lseek_r+0x1e>
 8017d80:	682b      	ldr	r3, [r5, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_lseek_r+0x1e>
 8017d84:	6023      	str	r3, [r4, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	24003464 	.word	0x24003464

08017d8c <_read_r>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4d07      	ldr	r5, [pc, #28]	; (8017dac <_read_r+0x20>)
 8017d90:	4604      	mov	r4, r0
 8017d92:	4608      	mov	r0, r1
 8017d94:	4611      	mov	r1, r2
 8017d96:	2200      	movs	r2, #0
 8017d98:	602a      	str	r2, [r5, #0]
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	f7eb fc04 	bl	80035a8 <_read>
 8017da0:	1c43      	adds	r3, r0, #1
 8017da2:	d102      	bne.n	8017daa <_read_r+0x1e>
 8017da4:	682b      	ldr	r3, [r5, #0]
 8017da6:	b103      	cbz	r3, 8017daa <_read_r+0x1e>
 8017da8:	6023      	str	r3, [r4, #0]
 8017daa:	bd38      	pop	{r3, r4, r5, pc}
 8017dac:	24003464 	.word	0x24003464

08017db0 <_write_r>:
 8017db0:	b538      	push	{r3, r4, r5, lr}
 8017db2:	4d07      	ldr	r5, [pc, #28]	; (8017dd0 <_write_r+0x20>)
 8017db4:	4604      	mov	r4, r0
 8017db6:	4608      	mov	r0, r1
 8017db8:	4611      	mov	r1, r2
 8017dba:	2200      	movs	r2, #0
 8017dbc:	602a      	str	r2, [r5, #0]
 8017dbe:	461a      	mov	r2, r3
 8017dc0:	f7eb fc0f 	bl	80035e2 <_write>
 8017dc4:	1c43      	adds	r3, r0, #1
 8017dc6:	d102      	bne.n	8017dce <_write_r+0x1e>
 8017dc8:	682b      	ldr	r3, [r5, #0]
 8017dca:	b103      	cbz	r3, 8017dce <_write_r+0x1e>
 8017dcc:	6023      	str	r3, [r4, #0]
 8017dce:	bd38      	pop	{r3, r4, r5, pc}
 8017dd0:	24003464 	.word	0x24003464

08017dd4 <__errno>:
 8017dd4:	4b01      	ldr	r3, [pc, #4]	; (8017ddc <__errno+0x8>)
 8017dd6:	6818      	ldr	r0, [r3, #0]
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop
 8017ddc:	24000158 	.word	0x24000158

08017de0 <__libc_init_array>:
 8017de0:	b570      	push	{r4, r5, r6, lr}
 8017de2:	4d0d      	ldr	r5, [pc, #52]	; (8017e18 <__libc_init_array+0x38>)
 8017de4:	4c0d      	ldr	r4, [pc, #52]	; (8017e1c <__libc_init_array+0x3c>)
 8017de6:	1b64      	subs	r4, r4, r5
 8017de8:	10a4      	asrs	r4, r4, #2
 8017dea:	2600      	movs	r6, #0
 8017dec:	42a6      	cmp	r6, r4
 8017dee:	d109      	bne.n	8017e04 <__libc_init_array+0x24>
 8017df0:	4d0b      	ldr	r5, [pc, #44]	; (8017e20 <__libc_init_array+0x40>)
 8017df2:	4c0c      	ldr	r4, [pc, #48]	; (8017e24 <__libc_init_array+0x44>)
 8017df4:	f003 fb0c 	bl	801b410 <_init>
 8017df8:	1b64      	subs	r4, r4, r5
 8017dfa:	10a4      	asrs	r4, r4, #2
 8017dfc:	2600      	movs	r6, #0
 8017dfe:	42a6      	cmp	r6, r4
 8017e00:	d105      	bne.n	8017e0e <__libc_init_array+0x2e>
 8017e02:	bd70      	pop	{r4, r5, r6, pc}
 8017e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e08:	4798      	blx	r3
 8017e0a:	3601      	adds	r6, #1
 8017e0c:	e7ee      	b.n	8017dec <__libc_init_array+0xc>
 8017e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e12:	4798      	blx	r3
 8017e14:	3601      	adds	r6, #1
 8017e16:	e7f2      	b.n	8017dfe <__libc_init_array+0x1e>
 8017e18:	0801ba28 	.word	0x0801ba28
 8017e1c:	0801ba28 	.word	0x0801ba28
 8017e20:	0801ba28 	.word	0x0801ba28
 8017e24:	0801ba2c 	.word	0x0801ba2c

08017e28 <__retarget_lock_init_recursive>:
 8017e28:	4770      	bx	lr

08017e2a <__retarget_lock_acquire_recursive>:
 8017e2a:	4770      	bx	lr

08017e2c <__retarget_lock_release_recursive>:
 8017e2c:	4770      	bx	lr

08017e2e <memcpy>:
 8017e2e:	440a      	add	r2, r1
 8017e30:	4291      	cmp	r1, r2
 8017e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e36:	d100      	bne.n	8017e3a <memcpy+0xc>
 8017e38:	4770      	bx	lr
 8017e3a:	b510      	push	{r4, lr}
 8017e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e44:	4291      	cmp	r1, r2
 8017e46:	d1f9      	bne.n	8017e3c <memcpy+0xe>
 8017e48:	bd10      	pop	{r4, pc}
	...

08017e4c <nanf>:
 8017e4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e54 <nanf+0x8>
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop
 8017e54:	7fc00000 	.word	0x7fc00000

08017e58 <quorem>:
 8017e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	6903      	ldr	r3, [r0, #16]
 8017e5e:	690c      	ldr	r4, [r1, #16]
 8017e60:	42a3      	cmp	r3, r4
 8017e62:	4607      	mov	r7, r0
 8017e64:	db7e      	blt.n	8017f64 <quorem+0x10c>
 8017e66:	3c01      	subs	r4, #1
 8017e68:	f101 0814 	add.w	r8, r1, #20
 8017e6c:	f100 0514 	add.w	r5, r0, #20
 8017e70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e74:	9301      	str	r3, [sp, #4]
 8017e76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e7e:	3301      	adds	r3, #1
 8017e80:	429a      	cmp	r2, r3
 8017e82:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017e86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017e8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8017e8e:	d331      	bcc.n	8017ef4 <quorem+0x9c>
 8017e90:	f04f 0e00 	mov.w	lr, #0
 8017e94:	4640      	mov	r0, r8
 8017e96:	46ac      	mov	ip, r5
 8017e98:	46f2      	mov	sl, lr
 8017e9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8017e9e:	b293      	uxth	r3, r2
 8017ea0:	fb06 e303 	mla	r3, r6, r3, lr
 8017ea4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017ea8:	0c1a      	lsrs	r2, r3, #16
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	ebaa 0303 	sub.w	r3, sl, r3
 8017eb0:	f8dc a000 	ldr.w	sl, [ip]
 8017eb4:	fa13 f38a 	uxtah	r3, r3, sl
 8017eb8:	fb06 220e 	mla	r2, r6, lr, r2
 8017ebc:	9300      	str	r3, [sp, #0]
 8017ebe:	9b00      	ldr	r3, [sp, #0]
 8017ec0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017ec4:	b292      	uxth	r2, r2
 8017ec6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017eca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ece:	f8bd 3000 	ldrh.w	r3, [sp]
 8017ed2:	4581      	cmp	r9, r0
 8017ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017ed8:	f84c 3b04 	str.w	r3, [ip], #4
 8017edc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017ee0:	d2db      	bcs.n	8017e9a <quorem+0x42>
 8017ee2:	f855 300b 	ldr.w	r3, [r5, fp]
 8017ee6:	b92b      	cbnz	r3, 8017ef4 <quorem+0x9c>
 8017ee8:	9b01      	ldr	r3, [sp, #4]
 8017eea:	3b04      	subs	r3, #4
 8017eec:	429d      	cmp	r5, r3
 8017eee:	461a      	mov	r2, r3
 8017ef0:	d32c      	bcc.n	8017f4c <quorem+0xf4>
 8017ef2:	613c      	str	r4, [r7, #16]
 8017ef4:	4638      	mov	r0, r7
 8017ef6:	f001 f969 	bl	80191cc <__mcmp>
 8017efa:	2800      	cmp	r0, #0
 8017efc:	db22      	blt.n	8017f44 <quorem+0xec>
 8017efe:	3601      	adds	r6, #1
 8017f00:	4629      	mov	r1, r5
 8017f02:	2000      	movs	r0, #0
 8017f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8017f08:	f8d1 c000 	ldr.w	ip, [r1]
 8017f0c:	b293      	uxth	r3, r2
 8017f0e:	1ac3      	subs	r3, r0, r3
 8017f10:	0c12      	lsrs	r2, r2, #16
 8017f12:	fa13 f38c 	uxtah	r3, r3, ip
 8017f16:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017f1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017f24:	45c1      	cmp	r9, r8
 8017f26:	f841 3b04 	str.w	r3, [r1], #4
 8017f2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017f2e:	d2e9      	bcs.n	8017f04 <quorem+0xac>
 8017f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f38:	b922      	cbnz	r2, 8017f44 <quorem+0xec>
 8017f3a:	3b04      	subs	r3, #4
 8017f3c:	429d      	cmp	r5, r3
 8017f3e:	461a      	mov	r2, r3
 8017f40:	d30a      	bcc.n	8017f58 <quorem+0x100>
 8017f42:	613c      	str	r4, [r7, #16]
 8017f44:	4630      	mov	r0, r6
 8017f46:	b003      	add	sp, #12
 8017f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f4c:	6812      	ldr	r2, [r2, #0]
 8017f4e:	3b04      	subs	r3, #4
 8017f50:	2a00      	cmp	r2, #0
 8017f52:	d1ce      	bne.n	8017ef2 <quorem+0x9a>
 8017f54:	3c01      	subs	r4, #1
 8017f56:	e7c9      	b.n	8017eec <quorem+0x94>
 8017f58:	6812      	ldr	r2, [r2, #0]
 8017f5a:	3b04      	subs	r3, #4
 8017f5c:	2a00      	cmp	r2, #0
 8017f5e:	d1f0      	bne.n	8017f42 <quorem+0xea>
 8017f60:	3c01      	subs	r4, #1
 8017f62:	e7eb      	b.n	8017f3c <quorem+0xe4>
 8017f64:	2000      	movs	r0, #0
 8017f66:	e7ee      	b.n	8017f46 <quorem+0xee>

08017f68 <_dtoa_r>:
 8017f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f6c:	ed2d 8b02 	vpush	{d8}
 8017f70:	69c5      	ldr	r5, [r0, #28]
 8017f72:	b091      	sub	sp, #68	; 0x44
 8017f74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017f78:	ec59 8b10 	vmov	r8, r9, d0
 8017f7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017f7e:	9106      	str	r1, [sp, #24]
 8017f80:	4606      	mov	r6, r0
 8017f82:	9208      	str	r2, [sp, #32]
 8017f84:	930c      	str	r3, [sp, #48]	; 0x30
 8017f86:	b975      	cbnz	r5, 8017fa6 <_dtoa_r+0x3e>
 8017f88:	2010      	movs	r0, #16
 8017f8a:	f000 fda5 	bl	8018ad8 <malloc>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	61f0      	str	r0, [r6, #28]
 8017f92:	b920      	cbnz	r0, 8017f9e <_dtoa_r+0x36>
 8017f94:	4ba6      	ldr	r3, [pc, #664]	; (8018230 <_dtoa_r+0x2c8>)
 8017f96:	21ef      	movs	r1, #239	; 0xef
 8017f98:	48a6      	ldr	r0, [pc, #664]	; (8018234 <_dtoa_r+0x2cc>)
 8017f9a:	f002 fb9d 	bl	801a6d8 <__assert_func>
 8017f9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017fa2:	6005      	str	r5, [r0, #0]
 8017fa4:	60c5      	str	r5, [r0, #12]
 8017fa6:	69f3      	ldr	r3, [r6, #28]
 8017fa8:	6819      	ldr	r1, [r3, #0]
 8017faa:	b151      	cbz	r1, 8017fc2 <_dtoa_r+0x5a>
 8017fac:	685a      	ldr	r2, [r3, #4]
 8017fae:	604a      	str	r2, [r1, #4]
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	4093      	lsls	r3, r2
 8017fb4:	608b      	str	r3, [r1, #8]
 8017fb6:	4630      	mov	r0, r6
 8017fb8:	f000 fe82 	bl	8018cc0 <_Bfree>
 8017fbc:	69f3      	ldr	r3, [r6, #28]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	601a      	str	r2, [r3, #0]
 8017fc2:	f1b9 0300 	subs.w	r3, r9, #0
 8017fc6:	bfbb      	ittet	lt
 8017fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017fcc:	9303      	strlt	r3, [sp, #12]
 8017fce:	2300      	movge	r3, #0
 8017fd0:	2201      	movlt	r2, #1
 8017fd2:	bfac      	ite	ge
 8017fd4:	6023      	strge	r3, [r4, #0]
 8017fd6:	6022      	strlt	r2, [r4, #0]
 8017fd8:	4b97      	ldr	r3, [pc, #604]	; (8018238 <_dtoa_r+0x2d0>)
 8017fda:	9c03      	ldr	r4, [sp, #12]
 8017fdc:	43a3      	bics	r3, r4
 8017fde:	d11c      	bne.n	801801a <_dtoa_r+0xb2>
 8017fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fe2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017fe6:	6013      	str	r3, [r2, #0]
 8017fe8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017fec:	ea53 0308 	orrs.w	r3, r3, r8
 8017ff0:	f000 84fb 	beq.w	80189ea <_dtoa_r+0xa82>
 8017ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ff6:	b963      	cbnz	r3, 8018012 <_dtoa_r+0xaa>
 8017ff8:	4b90      	ldr	r3, [pc, #576]	; (801823c <_dtoa_r+0x2d4>)
 8017ffa:	e020      	b.n	801803e <_dtoa_r+0xd6>
 8017ffc:	4b90      	ldr	r3, [pc, #576]	; (8018240 <_dtoa_r+0x2d8>)
 8017ffe:	9301      	str	r3, [sp, #4]
 8018000:	3308      	adds	r3, #8
 8018002:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018004:	6013      	str	r3, [r2, #0]
 8018006:	9801      	ldr	r0, [sp, #4]
 8018008:	b011      	add	sp, #68	; 0x44
 801800a:	ecbd 8b02 	vpop	{d8}
 801800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018012:	4b8a      	ldr	r3, [pc, #552]	; (801823c <_dtoa_r+0x2d4>)
 8018014:	9301      	str	r3, [sp, #4]
 8018016:	3303      	adds	r3, #3
 8018018:	e7f3      	b.n	8018002 <_dtoa_r+0x9a>
 801801a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801801e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018026:	d10c      	bne.n	8018042 <_dtoa_r+0xda>
 8018028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801802a:	2301      	movs	r3, #1
 801802c:	6013      	str	r3, [r2, #0]
 801802e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018030:	2b00      	cmp	r3, #0
 8018032:	f000 84d7 	beq.w	80189e4 <_dtoa_r+0xa7c>
 8018036:	4b83      	ldr	r3, [pc, #524]	; (8018244 <_dtoa_r+0x2dc>)
 8018038:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801803a:	6013      	str	r3, [r2, #0]
 801803c:	3b01      	subs	r3, #1
 801803e:	9301      	str	r3, [sp, #4]
 8018040:	e7e1      	b.n	8018006 <_dtoa_r+0x9e>
 8018042:	aa0e      	add	r2, sp, #56	; 0x38
 8018044:	a90f      	add	r1, sp, #60	; 0x3c
 8018046:	4630      	mov	r0, r6
 8018048:	eeb0 0b48 	vmov.f64	d0, d8
 801804c:	f001 f9d4 	bl	80193f8 <__d2b>
 8018050:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018056:	4605      	mov	r5, r0
 8018058:	2b00      	cmp	r3, #0
 801805a:	d046      	beq.n	80180ea <_dtoa_r+0x182>
 801805c:	eeb0 7b48 	vmov.f64	d7, d8
 8018060:	ee18 1a90 	vmov	r1, s17
 8018064:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018068:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801806c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018070:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018074:	2000      	movs	r0, #0
 8018076:	ee07 1a90 	vmov	s15, r1
 801807a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801807e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018218 <_dtoa_r+0x2b0>
 8018082:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018086:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018220 <_dtoa_r+0x2b8>
 801808a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801808e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018228 <_dtoa_r+0x2c0>
 8018092:	ee07 3a90 	vmov	s15, r3
 8018096:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801809a:	eeb0 7b46 	vmov.f64	d7, d6
 801809e:	eea4 7b05 	vfma.f64	d7, d4, d5
 80180a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80180a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80180aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ae:	ee16 ba90 	vmov	fp, s13
 80180b2:	9009      	str	r0, [sp, #36]	; 0x24
 80180b4:	d508      	bpl.n	80180c8 <_dtoa_r+0x160>
 80180b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80180ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80180be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180c2:	bf18      	it	ne
 80180c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80180c8:	f1bb 0f16 	cmp.w	fp, #22
 80180cc:	d82b      	bhi.n	8018126 <_dtoa_r+0x1be>
 80180ce:	495e      	ldr	r1, [pc, #376]	; (8018248 <_dtoa_r+0x2e0>)
 80180d0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80180d4:	ed91 7b00 	vldr	d7, [r1]
 80180d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80180dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e0:	d501      	bpl.n	80180e6 <_dtoa_r+0x17e>
 80180e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80180e6:	2100      	movs	r1, #0
 80180e8:	e01e      	b.n	8018128 <_dtoa_r+0x1c0>
 80180ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180ec:	4413      	add	r3, r2
 80180ee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80180f2:	2920      	cmp	r1, #32
 80180f4:	bfc1      	itttt	gt
 80180f6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80180fa:	408c      	lslgt	r4, r1
 80180fc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8018100:	fa28 f101 	lsrgt.w	r1, r8, r1
 8018104:	bfd6      	itet	le
 8018106:	f1c1 0120 	rsble	r1, r1, #32
 801810a:	4321      	orrgt	r1, r4
 801810c:	fa08 f101 	lslle.w	r1, r8, r1
 8018110:	ee07 1a90 	vmov	s15, r1
 8018114:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018118:	3b01      	subs	r3, #1
 801811a:	ee17 1a90 	vmov	r1, s15
 801811e:	2001      	movs	r0, #1
 8018120:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018124:	e7a7      	b.n	8018076 <_dtoa_r+0x10e>
 8018126:	2101      	movs	r1, #1
 8018128:	1ad2      	subs	r2, r2, r3
 801812a:	1e53      	subs	r3, r2, #1
 801812c:	9305      	str	r3, [sp, #20]
 801812e:	bf45      	ittet	mi
 8018130:	f1c2 0301 	rsbmi	r3, r2, #1
 8018134:	9304      	strmi	r3, [sp, #16]
 8018136:	2300      	movpl	r3, #0
 8018138:	2300      	movmi	r3, #0
 801813a:	bf4c      	ite	mi
 801813c:	9305      	strmi	r3, [sp, #20]
 801813e:	9304      	strpl	r3, [sp, #16]
 8018140:	f1bb 0f00 	cmp.w	fp, #0
 8018144:	910b      	str	r1, [sp, #44]	; 0x2c
 8018146:	db18      	blt.n	801817a <_dtoa_r+0x212>
 8018148:	9b05      	ldr	r3, [sp, #20]
 801814a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801814e:	445b      	add	r3, fp
 8018150:	9305      	str	r3, [sp, #20]
 8018152:	2300      	movs	r3, #0
 8018154:	9a06      	ldr	r2, [sp, #24]
 8018156:	2a09      	cmp	r2, #9
 8018158:	d848      	bhi.n	80181ec <_dtoa_r+0x284>
 801815a:	2a05      	cmp	r2, #5
 801815c:	bfc4      	itt	gt
 801815e:	3a04      	subgt	r2, #4
 8018160:	9206      	strgt	r2, [sp, #24]
 8018162:	9a06      	ldr	r2, [sp, #24]
 8018164:	f1a2 0202 	sub.w	r2, r2, #2
 8018168:	bfcc      	ite	gt
 801816a:	2400      	movgt	r4, #0
 801816c:	2401      	movle	r4, #1
 801816e:	2a03      	cmp	r2, #3
 8018170:	d847      	bhi.n	8018202 <_dtoa_r+0x29a>
 8018172:	e8df f002 	tbb	[pc, r2]
 8018176:	2d0b      	.short	0x2d0b
 8018178:	392b      	.short	0x392b
 801817a:	9b04      	ldr	r3, [sp, #16]
 801817c:	2200      	movs	r2, #0
 801817e:	eba3 030b 	sub.w	r3, r3, fp
 8018182:	9304      	str	r3, [sp, #16]
 8018184:	920a      	str	r2, [sp, #40]	; 0x28
 8018186:	f1cb 0300 	rsb	r3, fp, #0
 801818a:	e7e3      	b.n	8018154 <_dtoa_r+0x1ec>
 801818c:	2200      	movs	r2, #0
 801818e:	9207      	str	r2, [sp, #28]
 8018190:	9a08      	ldr	r2, [sp, #32]
 8018192:	2a00      	cmp	r2, #0
 8018194:	dc38      	bgt.n	8018208 <_dtoa_r+0x2a0>
 8018196:	f04f 0a01 	mov.w	sl, #1
 801819a:	46d1      	mov	r9, sl
 801819c:	4652      	mov	r2, sl
 801819e:	f8cd a020 	str.w	sl, [sp, #32]
 80181a2:	69f7      	ldr	r7, [r6, #28]
 80181a4:	2100      	movs	r1, #0
 80181a6:	2004      	movs	r0, #4
 80181a8:	f100 0c14 	add.w	ip, r0, #20
 80181ac:	4594      	cmp	ip, r2
 80181ae:	d930      	bls.n	8018212 <_dtoa_r+0x2aa>
 80181b0:	6079      	str	r1, [r7, #4]
 80181b2:	4630      	mov	r0, r6
 80181b4:	930d      	str	r3, [sp, #52]	; 0x34
 80181b6:	f000 fd43 	bl	8018c40 <_Balloc>
 80181ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80181bc:	9001      	str	r0, [sp, #4]
 80181be:	4602      	mov	r2, r0
 80181c0:	2800      	cmp	r0, #0
 80181c2:	d145      	bne.n	8018250 <_dtoa_r+0x2e8>
 80181c4:	4b21      	ldr	r3, [pc, #132]	; (801824c <_dtoa_r+0x2e4>)
 80181c6:	f240 11af 	movw	r1, #431	; 0x1af
 80181ca:	e6e5      	b.n	8017f98 <_dtoa_r+0x30>
 80181cc:	2201      	movs	r2, #1
 80181ce:	e7de      	b.n	801818e <_dtoa_r+0x226>
 80181d0:	2200      	movs	r2, #0
 80181d2:	9207      	str	r2, [sp, #28]
 80181d4:	9a08      	ldr	r2, [sp, #32]
 80181d6:	eb0b 0a02 	add.w	sl, fp, r2
 80181da:	f10a 0901 	add.w	r9, sl, #1
 80181de:	464a      	mov	r2, r9
 80181e0:	2a01      	cmp	r2, #1
 80181e2:	bfb8      	it	lt
 80181e4:	2201      	movlt	r2, #1
 80181e6:	e7dc      	b.n	80181a2 <_dtoa_r+0x23a>
 80181e8:	2201      	movs	r2, #1
 80181ea:	e7f2      	b.n	80181d2 <_dtoa_r+0x26a>
 80181ec:	2401      	movs	r4, #1
 80181ee:	2200      	movs	r2, #0
 80181f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80181f4:	f04f 3aff 	mov.w	sl, #4294967295
 80181f8:	2100      	movs	r1, #0
 80181fa:	46d1      	mov	r9, sl
 80181fc:	2212      	movs	r2, #18
 80181fe:	9108      	str	r1, [sp, #32]
 8018200:	e7cf      	b.n	80181a2 <_dtoa_r+0x23a>
 8018202:	2201      	movs	r2, #1
 8018204:	9207      	str	r2, [sp, #28]
 8018206:	e7f5      	b.n	80181f4 <_dtoa_r+0x28c>
 8018208:	f8dd a020 	ldr.w	sl, [sp, #32]
 801820c:	46d1      	mov	r9, sl
 801820e:	4652      	mov	r2, sl
 8018210:	e7c7      	b.n	80181a2 <_dtoa_r+0x23a>
 8018212:	3101      	adds	r1, #1
 8018214:	0040      	lsls	r0, r0, #1
 8018216:	e7c7      	b.n	80181a8 <_dtoa_r+0x240>
 8018218:	636f4361 	.word	0x636f4361
 801821c:	3fd287a7 	.word	0x3fd287a7
 8018220:	8b60c8b3 	.word	0x8b60c8b3
 8018224:	3fc68a28 	.word	0x3fc68a28
 8018228:	509f79fb 	.word	0x509f79fb
 801822c:	3fd34413 	.word	0x3fd34413
 8018230:	0801b63e 	.word	0x0801b63e
 8018234:	0801b655 	.word	0x0801b655
 8018238:	7ff00000 	.word	0x7ff00000
 801823c:	0801b63a 	.word	0x0801b63a
 8018240:	0801b631 	.word	0x0801b631
 8018244:	0801b609 	.word	0x0801b609
 8018248:	0801b740 	.word	0x0801b740
 801824c:	0801b6ad 	.word	0x0801b6ad
 8018250:	69f2      	ldr	r2, [r6, #28]
 8018252:	9901      	ldr	r1, [sp, #4]
 8018254:	6011      	str	r1, [r2, #0]
 8018256:	f1b9 0f0e 	cmp.w	r9, #14
 801825a:	d86c      	bhi.n	8018336 <_dtoa_r+0x3ce>
 801825c:	2c00      	cmp	r4, #0
 801825e:	d06a      	beq.n	8018336 <_dtoa_r+0x3ce>
 8018260:	f1bb 0f00 	cmp.w	fp, #0
 8018264:	f340 80a0 	ble.w	80183a8 <_dtoa_r+0x440>
 8018268:	4ac1      	ldr	r2, [pc, #772]	; (8018570 <_dtoa_r+0x608>)
 801826a:	f00b 010f 	and.w	r1, fp, #15
 801826e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018272:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018276:	ed92 7b00 	vldr	d7, [r2]
 801827a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801827e:	f000 8087 	beq.w	8018390 <_dtoa_r+0x428>
 8018282:	49bc      	ldr	r1, [pc, #752]	; (8018574 <_dtoa_r+0x60c>)
 8018284:	ed91 6b08 	vldr	d6, [r1, #32]
 8018288:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801828c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018290:	f002 020f 	and.w	r2, r2, #15
 8018294:	2103      	movs	r1, #3
 8018296:	48b7      	ldr	r0, [pc, #732]	; (8018574 <_dtoa_r+0x60c>)
 8018298:	2a00      	cmp	r2, #0
 801829a:	d17b      	bne.n	8018394 <_dtoa_r+0x42c>
 801829c:	ed9d 6b02 	vldr	d6, [sp, #8]
 80182a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80182a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80182a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80182aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182ae:	2a00      	cmp	r2, #0
 80182b0:	f000 80a0 	beq.w	80183f4 <_dtoa_r+0x48c>
 80182b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80182b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80182bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c0:	f140 8098 	bpl.w	80183f4 <_dtoa_r+0x48c>
 80182c4:	f1b9 0f00 	cmp.w	r9, #0
 80182c8:	f000 8094 	beq.w	80183f4 <_dtoa_r+0x48c>
 80182cc:	f1ba 0f00 	cmp.w	sl, #0
 80182d0:	dd2f      	ble.n	8018332 <_dtoa_r+0x3ca>
 80182d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80182d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80182de:	f10b 32ff 	add.w	r2, fp, #4294967295
 80182e2:	3101      	adds	r1, #1
 80182e4:	4654      	mov	r4, sl
 80182e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80182ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80182ee:	ee07 1a90 	vmov	s15, r1
 80182f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80182fa:	ee15 7a90 	vmov	r7, s11
 80182fe:	ec51 0b15 	vmov	r0, r1, d5
 8018302:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8018306:	2c00      	cmp	r4, #0
 8018308:	d177      	bne.n	80183fa <_dtoa_r+0x492>
 801830a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801830e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018312:	ec41 0b17 	vmov	d7, r0, r1
 8018316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831e:	f300 826a 	bgt.w	80187f6 <_dtoa_r+0x88e>
 8018322:	eeb1 7b47 	vneg.f64	d7, d7
 8018326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801832e:	f100 8260 	bmi.w	80187f2 <_dtoa_r+0x88a>
 8018332:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018338:	2a00      	cmp	r2, #0
 801833a:	f2c0 811d 	blt.w	8018578 <_dtoa_r+0x610>
 801833e:	f1bb 0f0e 	cmp.w	fp, #14
 8018342:	f300 8119 	bgt.w	8018578 <_dtoa_r+0x610>
 8018346:	4b8a      	ldr	r3, [pc, #552]	; (8018570 <_dtoa_r+0x608>)
 8018348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801834c:	ed93 6b00 	vldr	d6, [r3]
 8018350:	9b08      	ldr	r3, [sp, #32]
 8018352:	2b00      	cmp	r3, #0
 8018354:	f280 80b7 	bge.w	80184c6 <_dtoa_r+0x55e>
 8018358:	f1b9 0f00 	cmp.w	r9, #0
 801835c:	f300 80b3 	bgt.w	80184c6 <_dtoa_r+0x55e>
 8018360:	f040 8246 	bne.w	80187f0 <_dtoa_r+0x888>
 8018364:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018368:	ee26 6b07 	vmul.f64	d6, d6, d7
 801836c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018370:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018378:	464c      	mov	r4, r9
 801837a:	464f      	mov	r7, r9
 801837c:	f280 821c 	bge.w	80187b8 <_dtoa_r+0x850>
 8018380:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018384:	2331      	movs	r3, #49	; 0x31
 8018386:	f808 3b01 	strb.w	r3, [r8], #1
 801838a:	f10b 0b01 	add.w	fp, fp, #1
 801838e:	e218      	b.n	80187c2 <_dtoa_r+0x85a>
 8018390:	2102      	movs	r1, #2
 8018392:	e780      	b.n	8018296 <_dtoa_r+0x32e>
 8018394:	07d4      	lsls	r4, r2, #31
 8018396:	d504      	bpl.n	80183a2 <_dtoa_r+0x43a>
 8018398:	ed90 6b00 	vldr	d6, [r0]
 801839c:	3101      	adds	r1, #1
 801839e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183a2:	1052      	asrs	r2, r2, #1
 80183a4:	3008      	adds	r0, #8
 80183a6:	e777      	b.n	8018298 <_dtoa_r+0x330>
 80183a8:	d022      	beq.n	80183f0 <_dtoa_r+0x488>
 80183aa:	f1cb 0200 	rsb	r2, fp, #0
 80183ae:	4970      	ldr	r1, [pc, #448]	; (8018570 <_dtoa_r+0x608>)
 80183b0:	f002 000f 	and.w	r0, r2, #15
 80183b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80183b8:	ed91 7b00 	vldr	d7, [r1]
 80183bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80183c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80183c4:	486b      	ldr	r0, [pc, #428]	; (8018574 <_dtoa_r+0x60c>)
 80183c6:	1112      	asrs	r2, r2, #4
 80183c8:	2400      	movs	r4, #0
 80183ca:	2102      	movs	r1, #2
 80183cc:	b92a      	cbnz	r2, 80183da <_dtoa_r+0x472>
 80183ce:	2c00      	cmp	r4, #0
 80183d0:	f43f af6a 	beq.w	80182a8 <_dtoa_r+0x340>
 80183d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80183d8:	e766      	b.n	80182a8 <_dtoa_r+0x340>
 80183da:	07d7      	lsls	r7, r2, #31
 80183dc:	d505      	bpl.n	80183ea <_dtoa_r+0x482>
 80183de:	ed90 6b00 	vldr	d6, [r0]
 80183e2:	3101      	adds	r1, #1
 80183e4:	2401      	movs	r4, #1
 80183e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183ea:	1052      	asrs	r2, r2, #1
 80183ec:	3008      	adds	r0, #8
 80183ee:	e7ed      	b.n	80183cc <_dtoa_r+0x464>
 80183f0:	2102      	movs	r1, #2
 80183f2:	e759      	b.n	80182a8 <_dtoa_r+0x340>
 80183f4:	465a      	mov	r2, fp
 80183f6:	464c      	mov	r4, r9
 80183f8:	e775      	b.n	80182e6 <_dtoa_r+0x37e>
 80183fa:	ec41 0b17 	vmov	d7, r0, r1
 80183fe:	495c      	ldr	r1, [pc, #368]	; (8018570 <_dtoa_r+0x608>)
 8018400:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8018404:	ed11 4b02 	vldr	d4, [r1, #-8]
 8018408:	9901      	ldr	r1, [sp, #4]
 801840a:	440c      	add	r4, r1
 801840c:	9907      	ldr	r1, [sp, #28]
 801840e:	b351      	cbz	r1, 8018466 <_dtoa_r+0x4fe>
 8018410:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018414:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018418:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801841c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018420:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018424:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018428:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801842c:	ee14 1a90 	vmov	r1, s9
 8018430:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018434:	3130      	adds	r1, #48	; 0x30
 8018436:	ee36 6b45 	vsub.f64	d6, d6, d5
 801843a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018442:	f808 1b01 	strb.w	r1, [r8], #1
 8018446:	d439      	bmi.n	80184bc <_dtoa_r+0x554>
 8018448:	ee32 5b46 	vsub.f64	d5, d2, d6
 801844c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018454:	d472      	bmi.n	801853c <_dtoa_r+0x5d4>
 8018456:	45a0      	cmp	r8, r4
 8018458:	f43f af6b 	beq.w	8018332 <_dtoa_r+0x3ca>
 801845c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018460:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018464:	e7e0      	b.n	8018428 <_dtoa_r+0x4c0>
 8018466:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801846a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801846e:	4620      	mov	r0, r4
 8018470:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018474:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018478:	ee14 1a90 	vmov	r1, s9
 801847c:	3130      	adds	r1, #48	; 0x30
 801847e:	f808 1b01 	strb.w	r1, [r8], #1
 8018482:	45a0      	cmp	r8, r4
 8018484:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018488:	ee36 6b45 	vsub.f64	d6, d6, d5
 801848c:	d118      	bne.n	80184c0 <_dtoa_r+0x558>
 801848e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018492:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018496:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849e:	dc4d      	bgt.n	801853c <_dtoa_r+0x5d4>
 80184a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80184a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80184a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ac:	f57f af41 	bpl.w	8018332 <_dtoa_r+0x3ca>
 80184b0:	4680      	mov	r8, r0
 80184b2:	3801      	subs	r0, #1
 80184b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80184b8:	2b30      	cmp	r3, #48	; 0x30
 80184ba:	d0f9      	beq.n	80184b0 <_dtoa_r+0x548>
 80184bc:	4693      	mov	fp, r2
 80184be:	e02a      	b.n	8018516 <_dtoa_r+0x5ae>
 80184c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80184c4:	e7d6      	b.n	8018474 <_dtoa_r+0x50c>
 80184c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80184ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80184ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80184d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80184d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80184da:	ee15 3a10 	vmov	r3, s10
 80184de:	3330      	adds	r3, #48	; 0x30
 80184e0:	f808 3b01 	strb.w	r3, [r8], #1
 80184e4:	9b01      	ldr	r3, [sp, #4]
 80184e6:	eba8 0303 	sub.w	r3, r8, r3
 80184ea:	4599      	cmp	r9, r3
 80184ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80184f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80184f4:	d133      	bne.n	801855e <_dtoa_r+0x5f6>
 80184f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80184fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80184fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018502:	dc1a      	bgt.n	801853a <_dtoa_r+0x5d2>
 8018504:	eeb4 7b46 	vcmp.f64	d7, d6
 8018508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801850c:	d103      	bne.n	8018516 <_dtoa_r+0x5ae>
 801850e:	ee15 3a10 	vmov	r3, s10
 8018512:	07d9      	lsls	r1, r3, #31
 8018514:	d411      	bmi.n	801853a <_dtoa_r+0x5d2>
 8018516:	4629      	mov	r1, r5
 8018518:	4630      	mov	r0, r6
 801851a:	f000 fbd1 	bl	8018cc0 <_Bfree>
 801851e:	2300      	movs	r3, #0
 8018520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018522:	f888 3000 	strb.w	r3, [r8]
 8018526:	f10b 0301 	add.w	r3, fp, #1
 801852a:	6013      	str	r3, [r2, #0]
 801852c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801852e:	2b00      	cmp	r3, #0
 8018530:	f43f ad69 	beq.w	8018006 <_dtoa_r+0x9e>
 8018534:	f8c3 8000 	str.w	r8, [r3]
 8018538:	e565      	b.n	8018006 <_dtoa_r+0x9e>
 801853a:	465a      	mov	r2, fp
 801853c:	4643      	mov	r3, r8
 801853e:	4698      	mov	r8, r3
 8018540:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8018544:	2939      	cmp	r1, #57	; 0x39
 8018546:	d106      	bne.n	8018556 <_dtoa_r+0x5ee>
 8018548:	9901      	ldr	r1, [sp, #4]
 801854a:	4299      	cmp	r1, r3
 801854c:	d1f7      	bne.n	801853e <_dtoa_r+0x5d6>
 801854e:	9801      	ldr	r0, [sp, #4]
 8018550:	2130      	movs	r1, #48	; 0x30
 8018552:	3201      	adds	r2, #1
 8018554:	7001      	strb	r1, [r0, #0]
 8018556:	7819      	ldrb	r1, [r3, #0]
 8018558:	3101      	adds	r1, #1
 801855a:	7019      	strb	r1, [r3, #0]
 801855c:	e7ae      	b.n	80184bc <_dtoa_r+0x554>
 801855e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801856a:	d1b2      	bne.n	80184d2 <_dtoa_r+0x56a>
 801856c:	e7d3      	b.n	8018516 <_dtoa_r+0x5ae>
 801856e:	bf00      	nop
 8018570:	0801b740 	.word	0x0801b740
 8018574:	0801b718 	.word	0x0801b718
 8018578:	9907      	ldr	r1, [sp, #28]
 801857a:	2900      	cmp	r1, #0
 801857c:	f000 80d0 	beq.w	8018720 <_dtoa_r+0x7b8>
 8018580:	9906      	ldr	r1, [sp, #24]
 8018582:	2901      	cmp	r1, #1
 8018584:	f300 80b4 	bgt.w	80186f0 <_dtoa_r+0x788>
 8018588:	9909      	ldr	r1, [sp, #36]	; 0x24
 801858a:	2900      	cmp	r1, #0
 801858c:	f000 80ac 	beq.w	80186e8 <_dtoa_r+0x780>
 8018590:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018594:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018598:	461c      	mov	r4, r3
 801859a:	9309      	str	r3, [sp, #36]	; 0x24
 801859c:	9b04      	ldr	r3, [sp, #16]
 801859e:	4413      	add	r3, r2
 80185a0:	9304      	str	r3, [sp, #16]
 80185a2:	9b05      	ldr	r3, [sp, #20]
 80185a4:	2101      	movs	r1, #1
 80185a6:	4413      	add	r3, r2
 80185a8:	4630      	mov	r0, r6
 80185aa:	9305      	str	r3, [sp, #20]
 80185ac:	f000 fc88 	bl	8018ec0 <__i2b>
 80185b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b2:	4607      	mov	r7, r0
 80185b4:	f1b8 0f00 	cmp.w	r8, #0
 80185b8:	d00d      	beq.n	80185d6 <_dtoa_r+0x66e>
 80185ba:	9a05      	ldr	r2, [sp, #20]
 80185bc:	2a00      	cmp	r2, #0
 80185be:	dd0a      	ble.n	80185d6 <_dtoa_r+0x66e>
 80185c0:	4542      	cmp	r2, r8
 80185c2:	9904      	ldr	r1, [sp, #16]
 80185c4:	bfa8      	it	ge
 80185c6:	4642      	movge	r2, r8
 80185c8:	1a89      	subs	r1, r1, r2
 80185ca:	9104      	str	r1, [sp, #16]
 80185cc:	9905      	ldr	r1, [sp, #20]
 80185ce:	eba8 0802 	sub.w	r8, r8, r2
 80185d2:	1a8a      	subs	r2, r1, r2
 80185d4:	9205      	str	r2, [sp, #20]
 80185d6:	b303      	cbz	r3, 801861a <_dtoa_r+0x6b2>
 80185d8:	9a07      	ldr	r2, [sp, #28]
 80185da:	2a00      	cmp	r2, #0
 80185dc:	f000 80a5 	beq.w	801872a <_dtoa_r+0x7c2>
 80185e0:	2c00      	cmp	r4, #0
 80185e2:	dd13      	ble.n	801860c <_dtoa_r+0x6a4>
 80185e4:	4639      	mov	r1, r7
 80185e6:	4622      	mov	r2, r4
 80185e8:	4630      	mov	r0, r6
 80185ea:	930d      	str	r3, [sp, #52]	; 0x34
 80185ec:	f000 fd28 	bl	8019040 <__pow5mult>
 80185f0:	462a      	mov	r2, r5
 80185f2:	4601      	mov	r1, r0
 80185f4:	4607      	mov	r7, r0
 80185f6:	4630      	mov	r0, r6
 80185f8:	f000 fc78 	bl	8018eec <__multiply>
 80185fc:	4629      	mov	r1, r5
 80185fe:	9009      	str	r0, [sp, #36]	; 0x24
 8018600:	4630      	mov	r0, r6
 8018602:	f000 fb5d 	bl	8018cc0 <_Bfree>
 8018606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801860a:	4615      	mov	r5, r2
 801860c:	1b1a      	subs	r2, r3, r4
 801860e:	d004      	beq.n	801861a <_dtoa_r+0x6b2>
 8018610:	4629      	mov	r1, r5
 8018612:	4630      	mov	r0, r6
 8018614:	f000 fd14 	bl	8019040 <__pow5mult>
 8018618:	4605      	mov	r5, r0
 801861a:	2101      	movs	r1, #1
 801861c:	4630      	mov	r0, r6
 801861e:	f000 fc4f 	bl	8018ec0 <__i2b>
 8018622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018624:	2b00      	cmp	r3, #0
 8018626:	4604      	mov	r4, r0
 8018628:	f340 8081 	ble.w	801872e <_dtoa_r+0x7c6>
 801862c:	461a      	mov	r2, r3
 801862e:	4601      	mov	r1, r0
 8018630:	4630      	mov	r0, r6
 8018632:	f000 fd05 	bl	8019040 <__pow5mult>
 8018636:	9b06      	ldr	r3, [sp, #24]
 8018638:	2b01      	cmp	r3, #1
 801863a:	4604      	mov	r4, r0
 801863c:	dd7a      	ble.n	8018734 <_dtoa_r+0x7cc>
 801863e:	2300      	movs	r3, #0
 8018640:	9309      	str	r3, [sp, #36]	; 0x24
 8018642:	6922      	ldr	r2, [r4, #16]
 8018644:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018648:	6910      	ldr	r0, [r2, #16]
 801864a:	f000 fbeb 	bl	8018e24 <__hi0bits>
 801864e:	f1c0 0020 	rsb	r0, r0, #32
 8018652:	9b05      	ldr	r3, [sp, #20]
 8018654:	4418      	add	r0, r3
 8018656:	f010 001f 	ands.w	r0, r0, #31
 801865a:	f000 8093 	beq.w	8018784 <_dtoa_r+0x81c>
 801865e:	f1c0 0220 	rsb	r2, r0, #32
 8018662:	2a04      	cmp	r2, #4
 8018664:	f340 8085 	ble.w	8018772 <_dtoa_r+0x80a>
 8018668:	9b04      	ldr	r3, [sp, #16]
 801866a:	f1c0 001c 	rsb	r0, r0, #28
 801866e:	4403      	add	r3, r0
 8018670:	9304      	str	r3, [sp, #16]
 8018672:	9b05      	ldr	r3, [sp, #20]
 8018674:	4480      	add	r8, r0
 8018676:	4403      	add	r3, r0
 8018678:	9305      	str	r3, [sp, #20]
 801867a:	9b04      	ldr	r3, [sp, #16]
 801867c:	2b00      	cmp	r3, #0
 801867e:	dd05      	ble.n	801868c <_dtoa_r+0x724>
 8018680:	4629      	mov	r1, r5
 8018682:	461a      	mov	r2, r3
 8018684:	4630      	mov	r0, r6
 8018686:	f000 fd35 	bl	80190f4 <__lshift>
 801868a:	4605      	mov	r5, r0
 801868c:	9b05      	ldr	r3, [sp, #20]
 801868e:	2b00      	cmp	r3, #0
 8018690:	dd05      	ble.n	801869e <_dtoa_r+0x736>
 8018692:	4621      	mov	r1, r4
 8018694:	461a      	mov	r2, r3
 8018696:	4630      	mov	r0, r6
 8018698:	f000 fd2c 	bl	80190f4 <__lshift>
 801869c:	4604      	mov	r4, r0
 801869e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d071      	beq.n	8018788 <_dtoa_r+0x820>
 80186a4:	4621      	mov	r1, r4
 80186a6:	4628      	mov	r0, r5
 80186a8:	f000 fd90 	bl	80191cc <__mcmp>
 80186ac:	2800      	cmp	r0, #0
 80186ae:	da6b      	bge.n	8018788 <_dtoa_r+0x820>
 80186b0:	2300      	movs	r3, #0
 80186b2:	4629      	mov	r1, r5
 80186b4:	220a      	movs	r2, #10
 80186b6:	4630      	mov	r0, r6
 80186b8:	f000 fb24 	bl	8018d04 <__multadd>
 80186bc:	9b07      	ldr	r3, [sp, #28]
 80186be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80186c2:	4605      	mov	r5, r0
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	f000 8197 	beq.w	80189f8 <_dtoa_r+0xa90>
 80186ca:	4639      	mov	r1, r7
 80186cc:	2300      	movs	r3, #0
 80186ce:	220a      	movs	r2, #10
 80186d0:	4630      	mov	r0, r6
 80186d2:	f000 fb17 	bl	8018d04 <__multadd>
 80186d6:	f1ba 0f00 	cmp.w	sl, #0
 80186da:	4607      	mov	r7, r0
 80186dc:	f300 8093 	bgt.w	8018806 <_dtoa_r+0x89e>
 80186e0:	9b06      	ldr	r3, [sp, #24]
 80186e2:	2b02      	cmp	r3, #2
 80186e4:	dc57      	bgt.n	8018796 <_dtoa_r+0x82e>
 80186e6:	e08e      	b.n	8018806 <_dtoa_r+0x89e>
 80186e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80186ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80186ee:	e751      	b.n	8018594 <_dtoa_r+0x62c>
 80186f0:	f109 34ff 	add.w	r4, r9, #4294967295
 80186f4:	42a3      	cmp	r3, r4
 80186f6:	bfbf      	itttt	lt
 80186f8:	1ae2      	sublt	r2, r4, r3
 80186fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80186fc:	189b      	addlt	r3, r3, r2
 80186fe:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018700:	bfae      	itee	ge
 8018702:	1b1c      	subge	r4, r3, r4
 8018704:	4623      	movlt	r3, r4
 8018706:	2400      	movlt	r4, #0
 8018708:	f1b9 0f00 	cmp.w	r9, #0
 801870c:	bfb5      	itete	lt
 801870e:	9a04      	ldrlt	r2, [sp, #16]
 8018710:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018714:	eba2 0809 	sublt.w	r8, r2, r9
 8018718:	464a      	movge	r2, r9
 801871a:	bfb8      	it	lt
 801871c:	2200      	movlt	r2, #0
 801871e:	e73c      	b.n	801859a <_dtoa_r+0x632>
 8018720:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018724:	9f07      	ldr	r7, [sp, #28]
 8018726:	461c      	mov	r4, r3
 8018728:	e744      	b.n	80185b4 <_dtoa_r+0x64c>
 801872a:	461a      	mov	r2, r3
 801872c:	e770      	b.n	8018610 <_dtoa_r+0x6a8>
 801872e:	9b06      	ldr	r3, [sp, #24]
 8018730:	2b01      	cmp	r3, #1
 8018732:	dc18      	bgt.n	8018766 <_dtoa_r+0x7fe>
 8018734:	9b02      	ldr	r3, [sp, #8]
 8018736:	b9b3      	cbnz	r3, 8018766 <_dtoa_r+0x7fe>
 8018738:	9b03      	ldr	r3, [sp, #12]
 801873a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801873e:	b9a2      	cbnz	r2, 801876a <_dtoa_r+0x802>
 8018740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018744:	0d12      	lsrs	r2, r2, #20
 8018746:	0512      	lsls	r2, r2, #20
 8018748:	b18a      	cbz	r2, 801876e <_dtoa_r+0x806>
 801874a:	9b04      	ldr	r3, [sp, #16]
 801874c:	3301      	adds	r3, #1
 801874e:	9304      	str	r3, [sp, #16]
 8018750:	9b05      	ldr	r3, [sp, #20]
 8018752:	3301      	adds	r3, #1
 8018754:	9305      	str	r3, [sp, #20]
 8018756:	2301      	movs	r3, #1
 8018758:	9309      	str	r3, [sp, #36]	; 0x24
 801875a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801875c:	2b00      	cmp	r3, #0
 801875e:	f47f af70 	bne.w	8018642 <_dtoa_r+0x6da>
 8018762:	2001      	movs	r0, #1
 8018764:	e775      	b.n	8018652 <_dtoa_r+0x6ea>
 8018766:	2300      	movs	r3, #0
 8018768:	e7f6      	b.n	8018758 <_dtoa_r+0x7f0>
 801876a:	9b02      	ldr	r3, [sp, #8]
 801876c:	e7f4      	b.n	8018758 <_dtoa_r+0x7f0>
 801876e:	9209      	str	r2, [sp, #36]	; 0x24
 8018770:	e7f3      	b.n	801875a <_dtoa_r+0x7f2>
 8018772:	d082      	beq.n	801867a <_dtoa_r+0x712>
 8018774:	9b04      	ldr	r3, [sp, #16]
 8018776:	321c      	adds	r2, #28
 8018778:	4413      	add	r3, r2
 801877a:	9304      	str	r3, [sp, #16]
 801877c:	9b05      	ldr	r3, [sp, #20]
 801877e:	4490      	add	r8, r2
 8018780:	4413      	add	r3, r2
 8018782:	e779      	b.n	8018678 <_dtoa_r+0x710>
 8018784:	4602      	mov	r2, r0
 8018786:	e7f5      	b.n	8018774 <_dtoa_r+0x80c>
 8018788:	f1b9 0f00 	cmp.w	r9, #0
 801878c:	dc36      	bgt.n	80187fc <_dtoa_r+0x894>
 801878e:	9b06      	ldr	r3, [sp, #24]
 8018790:	2b02      	cmp	r3, #2
 8018792:	dd33      	ble.n	80187fc <_dtoa_r+0x894>
 8018794:	46ca      	mov	sl, r9
 8018796:	f1ba 0f00 	cmp.w	sl, #0
 801879a:	d10d      	bne.n	80187b8 <_dtoa_r+0x850>
 801879c:	4621      	mov	r1, r4
 801879e:	4653      	mov	r3, sl
 80187a0:	2205      	movs	r2, #5
 80187a2:	4630      	mov	r0, r6
 80187a4:	f000 faae 	bl	8018d04 <__multadd>
 80187a8:	4601      	mov	r1, r0
 80187aa:	4604      	mov	r4, r0
 80187ac:	4628      	mov	r0, r5
 80187ae:	f000 fd0d 	bl	80191cc <__mcmp>
 80187b2:	2800      	cmp	r0, #0
 80187b4:	f73f ade4 	bgt.w	8018380 <_dtoa_r+0x418>
 80187b8:	9b08      	ldr	r3, [sp, #32]
 80187ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80187be:	ea6f 0b03 	mvn.w	fp, r3
 80187c2:	f04f 0900 	mov.w	r9, #0
 80187c6:	4621      	mov	r1, r4
 80187c8:	4630      	mov	r0, r6
 80187ca:	f000 fa79 	bl	8018cc0 <_Bfree>
 80187ce:	2f00      	cmp	r7, #0
 80187d0:	f43f aea1 	beq.w	8018516 <_dtoa_r+0x5ae>
 80187d4:	f1b9 0f00 	cmp.w	r9, #0
 80187d8:	d005      	beq.n	80187e6 <_dtoa_r+0x87e>
 80187da:	45b9      	cmp	r9, r7
 80187dc:	d003      	beq.n	80187e6 <_dtoa_r+0x87e>
 80187de:	4649      	mov	r1, r9
 80187e0:	4630      	mov	r0, r6
 80187e2:	f000 fa6d 	bl	8018cc0 <_Bfree>
 80187e6:	4639      	mov	r1, r7
 80187e8:	4630      	mov	r0, r6
 80187ea:	f000 fa69 	bl	8018cc0 <_Bfree>
 80187ee:	e692      	b.n	8018516 <_dtoa_r+0x5ae>
 80187f0:	2400      	movs	r4, #0
 80187f2:	4627      	mov	r7, r4
 80187f4:	e7e0      	b.n	80187b8 <_dtoa_r+0x850>
 80187f6:	4693      	mov	fp, r2
 80187f8:	4627      	mov	r7, r4
 80187fa:	e5c1      	b.n	8018380 <_dtoa_r+0x418>
 80187fc:	9b07      	ldr	r3, [sp, #28]
 80187fe:	46ca      	mov	sl, r9
 8018800:	2b00      	cmp	r3, #0
 8018802:	f000 8100 	beq.w	8018a06 <_dtoa_r+0xa9e>
 8018806:	f1b8 0f00 	cmp.w	r8, #0
 801880a:	dd05      	ble.n	8018818 <_dtoa_r+0x8b0>
 801880c:	4639      	mov	r1, r7
 801880e:	4642      	mov	r2, r8
 8018810:	4630      	mov	r0, r6
 8018812:	f000 fc6f 	bl	80190f4 <__lshift>
 8018816:	4607      	mov	r7, r0
 8018818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801881a:	2b00      	cmp	r3, #0
 801881c:	d05d      	beq.n	80188da <_dtoa_r+0x972>
 801881e:	6879      	ldr	r1, [r7, #4]
 8018820:	4630      	mov	r0, r6
 8018822:	f000 fa0d 	bl	8018c40 <_Balloc>
 8018826:	4680      	mov	r8, r0
 8018828:	b928      	cbnz	r0, 8018836 <_dtoa_r+0x8ce>
 801882a:	4b82      	ldr	r3, [pc, #520]	; (8018a34 <_dtoa_r+0xacc>)
 801882c:	4602      	mov	r2, r0
 801882e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018832:	f7ff bbb1 	b.w	8017f98 <_dtoa_r+0x30>
 8018836:	693a      	ldr	r2, [r7, #16]
 8018838:	3202      	adds	r2, #2
 801883a:	0092      	lsls	r2, r2, #2
 801883c:	f107 010c 	add.w	r1, r7, #12
 8018840:	300c      	adds	r0, #12
 8018842:	f7ff faf4 	bl	8017e2e <memcpy>
 8018846:	2201      	movs	r2, #1
 8018848:	4641      	mov	r1, r8
 801884a:	4630      	mov	r0, r6
 801884c:	f000 fc52 	bl	80190f4 <__lshift>
 8018850:	9b01      	ldr	r3, [sp, #4]
 8018852:	3301      	adds	r3, #1
 8018854:	9304      	str	r3, [sp, #16]
 8018856:	9b01      	ldr	r3, [sp, #4]
 8018858:	4453      	add	r3, sl
 801885a:	9308      	str	r3, [sp, #32]
 801885c:	9b02      	ldr	r3, [sp, #8]
 801885e:	f003 0301 	and.w	r3, r3, #1
 8018862:	46b9      	mov	r9, r7
 8018864:	9307      	str	r3, [sp, #28]
 8018866:	4607      	mov	r7, r0
 8018868:	9b04      	ldr	r3, [sp, #16]
 801886a:	4621      	mov	r1, r4
 801886c:	3b01      	subs	r3, #1
 801886e:	4628      	mov	r0, r5
 8018870:	9302      	str	r3, [sp, #8]
 8018872:	f7ff faf1 	bl	8017e58 <quorem>
 8018876:	4603      	mov	r3, r0
 8018878:	3330      	adds	r3, #48	; 0x30
 801887a:	9005      	str	r0, [sp, #20]
 801887c:	4649      	mov	r1, r9
 801887e:	4628      	mov	r0, r5
 8018880:	9309      	str	r3, [sp, #36]	; 0x24
 8018882:	f000 fca3 	bl	80191cc <__mcmp>
 8018886:	463a      	mov	r2, r7
 8018888:	4682      	mov	sl, r0
 801888a:	4621      	mov	r1, r4
 801888c:	4630      	mov	r0, r6
 801888e:	f000 fcb9 	bl	8019204 <__mdiff>
 8018892:	68c2      	ldr	r2, [r0, #12]
 8018894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018896:	4680      	mov	r8, r0
 8018898:	bb0a      	cbnz	r2, 80188de <_dtoa_r+0x976>
 801889a:	4601      	mov	r1, r0
 801889c:	4628      	mov	r0, r5
 801889e:	f000 fc95 	bl	80191cc <__mcmp>
 80188a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188a4:	4602      	mov	r2, r0
 80188a6:	4641      	mov	r1, r8
 80188a8:	4630      	mov	r0, r6
 80188aa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80188ae:	f000 fa07 	bl	8018cc0 <_Bfree>
 80188b2:	9b06      	ldr	r3, [sp, #24]
 80188b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80188ba:	ea43 0102 	orr.w	r1, r3, r2
 80188be:	9b07      	ldr	r3, [sp, #28]
 80188c0:	4319      	orrs	r1, r3
 80188c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c4:	d10d      	bne.n	80188e2 <_dtoa_r+0x97a>
 80188c6:	2b39      	cmp	r3, #57	; 0x39
 80188c8:	d029      	beq.n	801891e <_dtoa_r+0x9b6>
 80188ca:	f1ba 0f00 	cmp.w	sl, #0
 80188ce:	dd01      	ble.n	80188d4 <_dtoa_r+0x96c>
 80188d0:	9b05      	ldr	r3, [sp, #20]
 80188d2:	3331      	adds	r3, #49	; 0x31
 80188d4:	9a02      	ldr	r2, [sp, #8]
 80188d6:	7013      	strb	r3, [r2, #0]
 80188d8:	e775      	b.n	80187c6 <_dtoa_r+0x85e>
 80188da:	4638      	mov	r0, r7
 80188dc:	e7b8      	b.n	8018850 <_dtoa_r+0x8e8>
 80188de:	2201      	movs	r2, #1
 80188e0:	e7e1      	b.n	80188a6 <_dtoa_r+0x93e>
 80188e2:	f1ba 0f00 	cmp.w	sl, #0
 80188e6:	db06      	blt.n	80188f6 <_dtoa_r+0x98e>
 80188e8:	9906      	ldr	r1, [sp, #24]
 80188ea:	ea41 0a0a 	orr.w	sl, r1, sl
 80188ee:	9907      	ldr	r1, [sp, #28]
 80188f0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80188f4:	d120      	bne.n	8018938 <_dtoa_r+0x9d0>
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	ddec      	ble.n	80188d4 <_dtoa_r+0x96c>
 80188fa:	4629      	mov	r1, r5
 80188fc:	2201      	movs	r2, #1
 80188fe:	4630      	mov	r0, r6
 8018900:	9304      	str	r3, [sp, #16]
 8018902:	f000 fbf7 	bl	80190f4 <__lshift>
 8018906:	4621      	mov	r1, r4
 8018908:	4605      	mov	r5, r0
 801890a:	f000 fc5f 	bl	80191cc <__mcmp>
 801890e:	2800      	cmp	r0, #0
 8018910:	9b04      	ldr	r3, [sp, #16]
 8018912:	dc02      	bgt.n	801891a <_dtoa_r+0x9b2>
 8018914:	d1de      	bne.n	80188d4 <_dtoa_r+0x96c>
 8018916:	07da      	lsls	r2, r3, #31
 8018918:	d5dc      	bpl.n	80188d4 <_dtoa_r+0x96c>
 801891a:	2b39      	cmp	r3, #57	; 0x39
 801891c:	d1d8      	bne.n	80188d0 <_dtoa_r+0x968>
 801891e:	9a02      	ldr	r2, [sp, #8]
 8018920:	2339      	movs	r3, #57	; 0x39
 8018922:	7013      	strb	r3, [r2, #0]
 8018924:	4643      	mov	r3, r8
 8018926:	4698      	mov	r8, r3
 8018928:	3b01      	subs	r3, #1
 801892a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801892e:	2a39      	cmp	r2, #57	; 0x39
 8018930:	d051      	beq.n	80189d6 <_dtoa_r+0xa6e>
 8018932:	3201      	adds	r2, #1
 8018934:	701a      	strb	r2, [r3, #0]
 8018936:	e746      	b.n	80187c6 <_dtoa_r+0x85e>
 8018938:	2a00      	cmp	r2, #0
 801893a:	dd03      	ble.n	8018944 <_dtoa_r+0x9dc>
 801893c:	2b39      	cmp	r3, #57	; 0x39
 801893e:	d0ee      	beq.n	801891e <_dtoa_r+0x9b6>
 8018940:	3301      	adds	r3, #1
 8018942:	e7c7      	b.n	80188d4 <_dtoa_r+0x96c>
 8018944:	9a04      	ldr	r2, [sp, #16]
 8018946:	9908      	ldr	r1, [sp, #32]
 8018948:	f802 3c01 	strb.w	r3, [r2, #-1]
 801894c:	428a      	cmp	r2, r1
 801894e:	d02b      	beq.n	80189a8 <_dtoa_r+0xa40>
 8018950:	4629      	mov	r1, r5
 8018952:	2300      	movs	r3, #0
 8018954:	220a      	movs	r2, #10
 8018956:	4630      	mov	r0, r6
 8018958:	f000 f9d4 	bl	8018d04 <__multadd>
 801895c:	45b9      	cmp	r9, r7
 801895e:	4605      	mov	r5, r0
 8018960:	f04f 0300 	mov.w	r3, #0
 8018964:	f04f 020a 	mov.w	r2, #10
 8018968:	4649      	mov	r1, r9
 801896a:	4630      	mov	r0, r6
 801896c:	d107      	bne.n	801897e <_dtoa_r+0xa16>
 801896e:	f000 f9c9 	bl	8018d04 <__multadd>
 8018972:	4681      	mov	r9, r0
 8018974:	4607      	mov	r7, r0
 8018976:	9b04      	ldr	r3, [sp, #16]
 8018978:	3301      	adds	r3, #1
 801897a:	9304      	str	r3, [sp, #16]
 801897c:	e774      	b.n	8018868 <_dtoa_r+0x900>
 801897e:	f000 f9c1 	bl	8018d04 <__multadd>
 8018982:	4639      	mov	r1, r7
 8018984:	4681      	mov	r9, r0
 8018986:	2300      	movs	r3, #0
 8018988:	220a      	movs	r2, #10
 801898a:	4630      	mov	r0, r6
 801898c:	f000 f9ba 	bl	8018d04 <__multadd>
 8018990:	4607      	mov	r7, r0
 8018992:	e7f0      	b.n	8018976 <_dtoa_r+0xa0e>
 8018994:	f1ba 0f00 	cmp.w	sl, #0
 8018998:	9a01      	ldr	r2, [sp, #4]
 801899a:	bfcc      	ite	gt
 801899c:	46d0      	movgt	r8, sl
 801899e:	f04f 0801 	movle.w	r8, #1
 80189a2:	4490      	add	r8, r2
 80189a4:	f04f 0900 	mov.w	r9, #0
 80189a8:	4629      	mov	r1, r5
 80189aa:	2201      	movs	r2, #1
 80189ac:	4630      	mov	r0, r6
 80189ae:	9302      	str	r3, [sp, #8]
 80189b0:	f000 fba0 	bl	80190f4 <__lshift>
 80189b4:	4621      	mov	r1, r4
 80189b6:	4605      	mov	r5, r0
 80189b8:	f000 fc08 	bl	80191cc <__mcmp>
 80189bc:	2800      	cmp	r0, #0
 80189be:	dcb1      	bgt.n	8018924 <_dtoa_r+0x9bc>
 80189c0:	d102      	bne.n	80189c8 <_dtoa_r+0xa60>
 80189c2:	9b02      	ldr	r3, [sp, #8]
 80189c4:	07db      	lsls	r3, r3, #31
 80189c6:	d4ad      	bmi.n	8018924 <_dtoa_r+0x9bc>
 80189c8:	4643      	mov	r3, r8
 80189ca:	4698      	mov	r8, r3
 80189cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80189d0:	2a30      	cmp	r2, #48	; 0x30
 80189d2:	d0fa      	beq.n	80189ca <_dtoa_r+0xa62>
 80189d4:	e6f7      	b.n	80187c6 <_dtoa_r+0x85e>
 80189d6:	9a01      	ldr	r2, [sp, #4]
 80189d8:	429a      	cmp	r2, r3
 80189da:	d1a4      	bne.n	8018926 <_dtoa_r+0x9be>
 80189dc:	f10b 0b01 	add.w	fp, fp, #1
 80189e0:	2331      	movs	r3, #49	; 0x31
 80189e2:	e778      	b.n	80188d6 <_dtoa_r+0x96e>
 80189e4:	4b14      	ldr	r3, [pc, #80]	; (8018a38 <_dtoa_r+0xad0>)
 80189e6:	f7ff bb2a 	b.w	801803e <_dtoa_r+0xd6>
 80189ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	f47f ab05 	bne.w	8017ffc <_dtoa_r+0x94>
 80189f2:	4b12      	ldr	r3, [pc, #72]	; (8018a3c <_dtoa_r+0xad4>)
 80189f4:	f7ff bb23 	b.w	801803e <_dtoa_r+0xd6>
 80189f8:	f1ba 0f00 	cmp.w	sl, #0
 80189fc:	dc03      	bgt.n	8018a06 <_dtoa_r+0xa9e>
 80189fe:	9b06      	ldr	r3, [sp, #24]
 8018a00:	2b02      	cmp	r3, #2
 8018a02:	f73f aec8 	bgt.w	8018796 <_dtoa_r+0x82e>
 8018a06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018a0a:	4621      	mov	r1, r4
 8018a0c:	4628      	mov	r0, r5
 8018a0e:	f7ff fa23 	bl	8017e58 <quorem>
 8018a12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018a16:	f808 3b01 	strb.w	r3, [r8], #1
 8018a1a:	9a01      	ldr	r2, [sp, #4]
 8018a1c:	eba8 0202 	sub.w	r2, r8, r2
 8018a20:	4592      	cmp	sl, r2
 8018a22:	ddb7      	ble.n	8018994 <_dtoa_r+0xa2c>
 8018a24:	4629      	mov	r1, r5
 8018a26:	2300      	movs	r3, #0
 8018a28:	220a      	movs	r2, #10
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f000 f96a 	bl	8018d04 <__multadd>
 8018a30:	4605      	mov	r5, r0
 8018a32:	e7ea      	b.n	8018a0a <_dtoa_r+0xaa2>
 8018a34:	0801b6ad 	.word	0x0801b6ad
 8018a38:	0801b608 	.word	0x0801b608
 8018a3c:	0801b631 	.word	0x0801b631

08018a40 <_free_r>:
 8018a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a42:	2900      	cmp	r1, #0
 8018a44:	d044      	beq.n	8018ad0 <_free_r+0x90>
 8018a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a4a:	9001      	str	r0, [sp, #4]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8018a52:	bfb8      	it	lt
 8018a54:	18e4      	addlt	r4, r4, r3
 8018a56:	f000 f8e7 	bl	8018c28 <__malloc_lock>
 8018a5a:	4a1e      	ldr	r2, [pc, #120]	; (8018ad4 <_free_r+0x94>)
 8018a5c:	9801      	ldr	r0, [sp, #4]
 8018a5e:	6813      	ldr	r3, [r2, #0]
 8018a60:	b933      	cbnz	r3, 8018a70 <_free_r+0x30>
 8018a62:	6063      	str	r3, [r4, #4]
 8018a64:	6014      	str	r4, [r2, #0]
 8018a66:	b003      	add	sp, #12
 8018a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a6c:	f000 b8e2 	b.w	8018c34 <__malloc_unlock>
 8018a70:	42a3      	cmp	r3, r4
 8018a72:	d908      	bls.n	8018a86 <_free_r+0x46>
 8018a74:	6825      	ldr	r5, [r4, #0]
 8018a76:	1961      	adds	r1, r4, r5
 8018a78:	428b      	cmp	r3, r1
 8018a7a:	bf01      	itttt	eq
 8018a7c:	6819      	ldreq	r1, [r3, #0]
 8018a7e:	685b      	ldreq	r3, [r3, #4]
 8018a80:	1949      	addeq	r1, r1, r5
 8018a82:	6021      	streq	r1, [r4, #0]
 8018a84:	e7ed      	b.n	8018a62 <_free_r+0x22>
 8018a86:	461a      	mov	r2, r3
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	b10b      	cbz	r3, 8018a90 <_free_r+0x50>
 8018a8c:	42a3      	cmp	r3, r4
 8018a8e:	d9fa      	bls.n	8018a86 <_free_r+0x46>
 8018a90:	6811      	ldr	r1, [r2, #0]
 8018a92:	1855      	adds	r5, r2, r1
 8018a94:	42a5      	cmp	r5, r4
 8018a96:	d10b      	bne.n	8018ab0 <_free_r+0x70>
 8018a98:	6824      	ldr	r4, [r4, #0]
 8018a9a:	4421      	add	r1, r4
 8018a9c:	1854      	adds	r4, r2, r1
 8018a9e:	42a3      	cmp	r3, r4
 8018aa0:	6011      	str	r1, [r2, #0]
 8018aa2:	d1e0      	bne.n	8018a66 <_free_r+0x26>
 8018aa4:	681c      	ldr	r4, [r3, #0]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	6053      	str	r3, [r2, #4]
 8018aaa:	440c      	add	r4, r1
 8018aac:	6014      	str	r4, [r2, #0]
 8018aae:	e7da      	b.n	8018a66 <_free_r+0x26>
 8018ab0:	d902      	bls.n	8018ab8 <_free_r+0x78>
 8018ab2:	230c      	movs	r3, #12
 8018ab4:	6003      	str	r3, [r0, #0]
 8018ab6:	e7d6      	b.n	8018a66 <_free_r+0x26>
 8018ab8:	6825      	ldr	r5, [r4, #0]
 8018aba:	1961      	adds	r1, r4, r5
 8018abc:	428b      	cmp	r3, r1
 8018abe:	bf04      	itt	eq
 8018ac0:	6819      	ldreq	r1, [r3, #0]
 8018ac2:	685b      	ldreq	r3, [r3, #4]
 8018ac4:	6063      	str	r3, [r4, #4]
 8018ac6:	bf04      	itt	eq
 8018ac8:	1949      	addeq	r1, r1, r5
 8018aca:	6021      	streq	r1, [r4, #0]
 8018acc:	6054      	str	r4, [r2, #4]
 8018ace:	e7ca      	b.n	8018a66 <_free_r+0x26>
 8018ad0:	b003      	add	sp, #12
 8018ad2:	bd30      	pop	{r4, r5, pc}
 8018ad4:	2400346c 	.word	0x2400346c

08018ad8 <malloc>:
 8018ad8:	4b02      	ldr	r3, [pc, #8]	; (8018ae4 <malloc+0xc>)
 8018ada:	4601      	mov	r1, r0
 8018adc:	6818      	ldr	r0, [r3, #0]
 8018ade:	f000 b823 	b.w	8018b28 <_malloc_r>
 8018ae2:	bf00      	nop
 8018ae4:	24000158 	.word	0x24000158

08018ae8 <sbrk_aligned>:
 8018ae8:	b570      	push	{r4, r5, r6, lr}
 8018aea:	4e0e      	ldr	r6, [pc, #56]	; (8018b24 <sbrk_aligned+0x3c>)
 8018aec:	460c      	mov	r4, r1
 8018aee:	6831      	ldr	r1, [r6, #0]
 8018af0:	4605      	mov	r5, r0
 8018af2:	b911      	cbnz	r1, 8018afa <sbrk_aligned+0x12>
 8018af4:	f001 fdd6 	bl	801a6a4 <_sbrk_r>
 8018af8:	6030      	str	r0, [r6, #0]
 8018afa:	4621      	mov	r1, r4
 8018afc:	4628      	mov	r0, r5
 8018afe:	f001 fdd1 	bl	801a6a4 <_sbrk_r>
 8018b02:	1c43      	adds	r3, r0, #1
 8018b04:	d00a      	beq.n	8018b1c <sbrk_aligned+0x34>
 8018b06:	1cc4      	adds	r4, r0, #3
 8018b08:	f024 0403 	bic.w	r4, r4, #3
 8018b0c:	42a0      	cmp	r0, r4
 8018b0e:	d007      	beq.n	8018b20 <sbrk_aligned+0x38>
 8018b10:	1a21      	subs	r1, r4, r0
 8018b12:	4628      	mov	r0, r5
 8018b14:	f001 fdc6 	bl	801a6a4 <_sbrk_r>
 8018b18:	3001      	adds	r0, #1
 8018b1a:	d101      	bne.n	8018b20 <sbrk_aligned+0x38>
 8018b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8018b20:	4620      	mov	r0, r4
 8018b22:	bd70      	pop	{r4, r5, r6, pc}
 8018b24:	24003470 	.word	0x24003470

08018b28 <_malloc_r>:
 8018b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b2c:	1ccd      	adds	r5, r1, #3
 8018b2e:	f025 0503 	bic.w	r5, r5, #3
 8018b32:	3508      	adds	r5, #8
 8018b34:	2d0c      	cmp	r5, #12
 8018b36:	bf38      	it	cc
 8018b38:	250c      	movcc	r5, #12
 8018b3a:	2d00      	cmp	r5, #0
 8018b3c:	4607      	mov	r7, r0
 8018b3e:	db01      	blt.n	8018b44 <_malloc_r+0x1c>
 8018b40:	42a9      	cmp	r1, r5
 8018b42:	d905      	bls.n	8018b50 <_malloc_r+0x28>
 8018b44:	230c      	movs	r3, #12
 8018b46:	603b      	str	r3, [r7, #0]
 8018b48:	2600      	movs	r6, #0
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018c24 <_malloc_r+0xfc>
 8018b54:	f000 f868 	bl	8018c28 <__malloc_lock>
 8018b58:	f8d8 3000 	ldr.w	r3, [r8]
 8018b5c:	461c      	mov	r4, r3
 8018b5e:	bb5c      	cbnz	r4, 8018bb8 <_malloc_r+0x90>
 8018b60:	4629      	mov	r1, r5
 8018b62:	4638      	mov	r0, r7
 8018b64:	f7ff ffc0 	bl	8018ae8 <sbrk_aligned>
 8018b68:	1c43      	adds	r3, r0, #1
 8018b6a:	4604      	mov	r4, r0
 8018b6c:	d155      	bne.n	8018c1a <_malloc_r+0xf2>
 8018b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8018b72:	4626      	mov	r6, r4
 8018b74:	2e00      	cmp	r6, #0
 8018b76:	d145      	bne.n	8018c04 <_malloc_r+0xdc>
 8018b78:	2c00      	cmp	r4, #0
 8018b7a:	d048      	beq.n	8018c0e <_malloc_r+0xe6>
 8018b7c:	6823      	ldr	r3, [r4, #0]
 8018b7e:	4631      	mov	r1, r6
 8018b80:	4638      	mov	r0, r7
 8018b82:	eb04 0903 	add.w	r9, r4, r3
 8018b86:	f001 fd8d 	bl	801a6a4 <_sbrk_r>
 8018b8a:	4581      	cmp	r9, r0
 8018b8c:	d13f      	bne.n	8018c0e <_malloc_r+0xe6>
 8018b8e:	6821      	ldr	r1, [r4, #0]
 8018b90:	1a6d      	subs	r5, r5, r1
 8018b92:	4629      	mov	r1, r5
 8018b94:	4638      	mov	r0, r7
 8018b96:	f7ff ffa7 	bl	8018ae8 <sbrk_aligned>
 8018b9a:	3001      	adds	r0, #1
 8018b9c:	d037      	beq.n	8018c0e <_malloc_r+0xe6>
 8018b9e:	6823      	ldr	r3, [r4, #0]
 8018ba0:	442b      	add	r3, r5
 8018ba2:	6023      	str	r3, [r4, #0]
 8018ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d038      	beq.n	8018c1e <_malloc_r+0xf6>
 8018bac:	685a      	ldr	r2, [r3, #4]
 8018bae:	42a2      	cmp	r2, r4
 8018bb0:	d12b      	bne.n	8018c0a <_malloc_r+0xe2>
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	605a      	str	r2, [r3, #4]
 8018bb6:	e00f      	b.n	8018bd8 <_malloc_r+0xb0>
 8018bb8:	6822      	ldr	r2, [r4, #0]
 8018bba:	1b52      	subs	r2, r2, r5
 8018bbc:	d41f      	bmi.n	8018bfe <_malloc_r+0xd6>
 8018bbe:	2a0b      	cmp	r2, #11
 8018bc0:	d917      	bls.n	8018bf2 <_malloc_r+0xca>
 8018bc2:	1961      	adds	r1, r4, r5
 8018bc4:	42a3      	cmp	r3, r4
 8018bc6:	6025      	str	r5, [r4, #0]
 8018bc8:	bf18      	it	ne
 8018bca:	6059      	strne	r1, [r3, #4]
 8018bcc:	6863      	ldr	r3, [r4, #4]
 8018bce:	bf08      	it	eq
 8018bd0:	f8c8 1000 	streq.w	r1, [r8]
 8018bd4:	5162      	str	r2, [r4, r5]
 8018bd6:	604b      	str	r3, [r1, #4]
 8018bd8:	4638      	mov	r0, r7
 8018bda:	f104 060b 	add.w	r6, r4, #11
 8018bde:	f000 f829 	bl	8018c34 <__malloc_unlock>
 8018be2:	f026 0607 	bic.w	r6, r6, #7
 8018be6:	1d23      	adds	r3, r4, #4
 8018be8:	1af2      	subs	r2, r6, r3
 8018bea:	d0ae      	beq.n	8018b4a <_malloc_r+0x22>
 8018bec:	1b9b      	subs	r3, r3, r6
 8018bee:	50a3      	str	r3, [r4, r2]
 8018bf0:	e7ab      	b.n	8018b4a <_malloc_r+0x22>
 8018bf2:	42a3      	cmp	r3, r4
 8018bf4:	6862      	ldr	r2, [r4, #4]
 8018bf6:	d1dd      	bne.n	8018bb4 <_malloc_r+0x8c>
 8018bf8:	f8c8 2000 	str.w	r2, [r8]
 8018bfc:	e7ec      	b.n	8018bd8 <_malloc_r+0xb0>
 8018bfe:	4623      	mov	r3, r4
 8018c00:	6864      	ldr	r4, [r4, #4]
 8018c02:	e7ac      	b.n	8018b5e <_malloc_r+0x36>
 8018c04:	4634      	mov	r4, r6
 8018c06:	6876      	ldr	r6, [r6, #4]
 8018c08:	e7b4      	b.n	8018b74 <_malloc_r+0x4c>
 8018c0a:	4613      	mov	r3, r2
 8018c0c:	e7cc      	b.n	8018ba8 <_malloc_r+0x80>
 8018c0e:	230c      	movs	r3, #12
 8018c10:	603b      	str	r3, [r7, #0]
 8018c12:	4638      	mov	r0, r7
 8018c14:	f000 f80e 	bl	8018c34 <__malloc_unlock>
 8018c18:	e797      	b.n	8018b4a <_malloc_r+0x22>
 8018c1a:	6025      	str	r5, [r4, #0]
 8018c1c:	e7dc      	b.n	8018bd8 <_malloc_r+0xb0>
 8018c1e:	605b      	str	r3, [r3, #4]
 8018c20:	deff      	udf	#255	; 0xff
 8018c22:	bf00      	nop
 8018c24:	2400346c 	.word	0x2400346c

08018c28 <__malloc_lock>:
 8018c28:	4801      	ldr	r0, [pc, #4]	; (8018c30 <__malloc_lock+0x8>)
 8018c2a:	f7ff b8fe 	b.w	8017e2a <__retarget_lock_acquire_recursive>
 8018c2e:	bf00      	nop
 8018c30:	24003468 	.word	0x24003468

08018c34 <__malloc_unlock>:
 8018c34:	4801      	ldr	r0, [pc, #4]	; (8018c3c <__malloc_unlock+0x8>)
 8018c36:	f7ff b8f9 	b.w	8017e2c <__retarget_lock_release_recursive>
 8018c3a:	bf00      	nop
 8018c3c:	24003468 	.word	0x24003468

08018c40 <_Balloc>:
 8018c40:	b570      	push	{r4, r5, r6, lr}
 8018c42:	69c6      	ldr	r6, [r0, #28]
 8018c44:	4604      	mov	r4, r0
 8018c46:	460d      	mov	r5, r1
 8018c48:	b976      	cbnz	r6, 8018c68 <_Balloc+0x28>
 8018c4a:	2010      	movs	r0, #16
 8018c4c:	f7ff ff44 	bl	8018ad8 <malloc>
 8018c50:	4602      	mov	r2, r0
 8018c52:	61e0      	str	r0, [r4, #28]
 8018c54:	b920      	cbnz	r0, 8018c60 <_Balloc+0x20>
 8018c56:	4b18      	ldr	r3, [pc, #96]	; (8018cb8 <_Balloc+0x78>)
 8018c58:	4818      	ldr	r0, [pc, #96]	; (8018cbc <_Balloc+0x7c>)
 8018c5a:	216b      	movs	r1, #107	; 0x6b
 8018c5c:	f001 fd3c 	bl	801a6d8 <__assert_func>
 8018c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c64:	6006      	str	r6, [r0, #0]
 8018c66:	60c6      	str	r6, [r0, #12]
 8018c68:	69e6      	ldr	r6, [r4, #28]
 8018c6a:	68f3      	ldr	r3, [r6, #12]
 8018c6c:	b183      	cbz	r3, 8018c90 <_Balloc+0x50>
 8018c6e:	69e3      	ldr	r3, [r4, #28]
 8018c70:	68db      	ldr	r3, [r3, #12]
 8018c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c76:	b9b8      	cbnz	r0, 8018ca8 <_Balloc+0x68>
 8018c78:	2101      	movs	r1, #1
 8018c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8018c7e:	1d72      	adds	r2, r6, #5
 8018c80:	0092      	lsls	r2, r2, #2
 8018c82:	4620      	mov	r0, r4
 8018c84:	f001 fd46 	bl	801a714 <_calloc_r>
 8018c88:	b160      	cbz	r0, 8018ca4 <_Balloc+0x64>
 8018c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018c8e:	e00e      	b.n	8018cae <_Balloc+0x6e>
 8018c90:	2221      	movs	r2, #33	; 0x21
 8018c92:	2104      	movs	r1, #4
 8018c94:	4620      	mov	r0, r4
 8018c96:	f001 fd3d 	bl	801a714 <_calloc_r>
 8018c9a:	69e3      	ldr	r3, [r4, #28]
 8018c9c:	60f0      	str	r0, [r6, #12]
 8018c9e:	68db      	ldr	r3, [r3, #12]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d1e4      	bne.n	8018c6e <_Balloc+0x2e>
 8018ca4:	2000      	movs	r0, #0
 8018ca6:	bd70      	pop	{r4, r5, r6, pc}
 8018ca8:	6802      	ldr	r2, [r0, #0]
 8018caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018cae:	2300      	movs	r3, #0
 8018cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018cb4:	e7f7      	b.n	8018ca6 <_Balloc+0x66>
 8018cb6:	bf00      	nop
 8018cb8:	0801b63e 	.word	0x0801b63e
 8018cbc:	0801b6be 	.word	0x0801b6be

08018cc0 <_Bfree>:
 8018cc0:	b570      	push	{r4, r5, r6, lr}
 8018cc2:	69c6      	ldr	r6, [r0, #28]
 8018cc4:	4605      	mov	r5, r0
 8018cc6:	460c      	mov	r4, r1
 8018cc8:	b976      	cbnz	r6, 8018ce8 <_Bfree+0x28>
 8018cca:	2010      	movs	r0, #16
 8018ccc:	f7ff ff04 	bl	8018ad8 <malloc>
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	61e8      	str	r0, [r5, #28]
 8018cd4:	b920      	cbnz	r0, 8018ce0 <_Bfree+0x20>
 8018cd6:	4b09      	ldr	r3, [pc, #36]	; (8018cfc <_Bfree+0x3c>)
 8018cd8:	4809      	ldr	r0, [pc, #36]	; (8018d00 <_Bfree+0x40>)
 8018cda:	218f      	movs	r1, #143	; 0x8f
 8018cdc:	f001 fcfc 	bl	801a6d8 <__assert_func>
 8018ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ce4:	6006      	str	r6, [r0, #0]
 8018ce6:	60c6      	str	r6, [r0, #12]
 8018ce8:	b13c      	cbz	r4, 8018cfa <_Bfree+0x3a>
 8018cea:	69eb      	ldr	r3, [r5, #28]
 8018cec:	6862      	ldr	r2, [r4, #4]
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018cf4:	6021      	str	r1, [r4, #0]
 8018cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	0801b63e 	.word	0x0801b63e
 8018d00:	0801b6be 	.word	0x0801b6be

08018d04 <__multadd>:
 8018d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d08:	690d      	ldr	r5, [r1, #16]
 8018d0a:	4607      	mov	r7, r0
 8018d0c:	460c      	mov	r4, r1
 8018d0e:	461e      	mov	r6, r3
 8018d10:	f101 0c14 	add.w	ip, r1, #20
 8018d14:	2000      	movs	r0, #0
 8018d16:	f8dc 3000 	ldr.w	r3, [ip]
 8018d1a:	b299      	uxth	r1, r3
 8018d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8018d20:	0c1e      	lsrs	r6, r3, #16
 8018d22:	0c0b      	lsrs	r3, r1, #16
 8018d24:	fb02 3306 	mla	r3, r2, r6, r3
 8018d28:	b289      	uxth	r1, r1
 8018d2a:	3001      	adds	r0, #1
 8018d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018d30:	4285      	cmp	r5, r0
 8018d32:	f84c 1b04 	str.w	r1, [ip], #4
 8018d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018d3a:	dcec      	bgt.n	8018d16 <__multadd+0x12>
 8018d3c:	b30e      	cbz	r6, 8018d82 <__multadd+0x7e>
 8018d3e:	68a3      	ldr	r3, [r4, #8]
 8018d40:	42ab      	cmp	r3, r5
 8018d42:	dc19      	bgt.n	8018d78 <__multadd+0x74>
 8018d44:	6861      	ldr	r1, [r4, #4]
 8018d46:	4638      	mov	r0, r7
 8018d48:	3101      	adds	r1, #1
 8018d4a:	f7ff ff79 	bl	8018c40 <_Balloc>
 8018d4e:	4680      	mov	r8, r0
 8018d50:	b928      	cbnz	r0, 8018d5e <__multadd+0x5a>
 8018d52:	4602      	mov	r2, r0
 8018d54:	4b0c      	ldr	r3, [pc, #48]	; (8018d88 <__multadd+0x84>)
 8018d56:	480d      	ldr	r0, [pc, #52]	; (8018d8c <__multadd+0x88>)
 8018d58:	21ba      	movs	r1, #186	; 0xba
 8018d5a:	f001 fcbd 	bl	801a6d8 <__assert_func>
 8018d5e:	6922      	ldr	r2, [r4, #16]
 8018d60:	3202      	adds	r2, #2
 8018d62:	f104 010c 	add.w	r1, r4, #12
 8018d66:	0092      	lsls	r2, r2, #2
 8018d68:	300c      	adds	r0, #12
 8018d6a:	f7ff f860 	bl	8017e2e <memcpy>
 8018d6e:	4621      	mov	r1, r4
 8018d70:	4638      	mov	r0, r7
 8018d72:	f7ff ffa5 	bl	8018cc0 <_Bfree>
 8018d76:	4644      	mov	r4, r8
 8018d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018d7c:	3501      	adds	r5, #1
 8018d7e:	615e      	str	r6, [r3, #20]
 8018d80:	6125      	str	r5, [r4, #16]
 8018d82:	4620      	mov	r0, r4
 8018d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d88:	0801b6ad 	.word	0x0801b6ad
 8018d8c:	0801b6be 	.word	0x0801b6be

08018d90 <__s2b>:
 8018d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d94:	460c      	mov	r4, r1
 8018d96:	4615      	mov	r5, r2
 8018d98:	461f      	mov	r7, r3
 8018d9a:	2209      	movs	r2, #9
 8018d9c:	3308      	adds	r3, #8
 8018d9e:	4606      	mov	r6, r0
 8018da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8018da4:	2100      	movs	r1, #0
 8018da6:	2201      	movs	r2, #1
 8018da8:	429a      	cmp	r2, r3
 8018daa:	db09      	blt.n	8018dc0 <__s2b+0x30>
 8018dac:	4630      	mov	r0, r6
 8018dae:	f7ff ff47 	bl	8018c40 <_Balloc>
 8018db2:	b940      	cbnz	r0, 8018dc6 <__s2b+0x36>
 8018db4:	4602      	mov	r2, r0
 8018db6:	4b19      	ldr	r3, [pc, #100]	; (8018e1c <__s2b+0x8c>)
 8018db8:	4819      	ldr	r0, [pc, #100]	; (8018e20 <__s2b+0x90>)
 8018dba:	21d3      	movs	r1, #211	; 0xd3
 8018dbc:	f001 fc8c 	bl	801a6d8 <__assert_func>
 8018dc0:	0052      	lsls	r2, r2, #1
 8018dc2:	3101      	adds	r1, #1
 8018dc4:	e7f0      	b.n	8018da8 <__s2b+0x18>
 8018dc6:	9b08      	ldr	r3, [sp, #32]
 8018dc8:	6143      	str	r3, [r0, #20]
 8018dca:	2d09      	cmp	r5, #9
 8018dcc:	f04f 0301 	mov.w	r3, #1
 8018dd0:	6103      	str	r3, [r0, #16]
 8018dd2:	dd16      	ble.n	8018e02 <__s2b+0x72>
 8018dd4:	f104 0909 	add.w	r9, r4, #9
 8018dd8:	46c8      	mov	r8, r9
 8018dda:	442c      	add	r4, r5
 8018ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018de0:	4601      	mov	r1, r0
 8018de2:	3b30      	subs	r3, #48	; 0x30
 8018de4:	220a      	movs	r2, #10
 8018de6:	4630      	mov	r0, r6
 8018de8:	f7ff ff8c 	bl	8018d04 <__multadd>
 8018dec:	45a0      	cmp	r8, r4
 8018dee:	d1f5      	bne.n	8018ddc <__s2b+0x4c>
 8018df0:	f1a5 0408 	sub.w	r4, r5, #8
 8018df4:	444c      	add	r4, r9
 8018df6:	1b2d      	subs	r5, r5, r4
 8018df8:	1963      	adds	r3, r4, r5
 8018dfa:	42bb      	cmp	r3, r7
 8018dfc:	db04      	blt.n	8018e08 <__s2b+0x78>
 8018dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e02:	340a      	adds	r4, #10
 8018e04:	2509      	movs	r5, #9
 8018e06:	e7f6      	b.n	8018df6 <__s2b+0x66>
 8018e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e0c:	4601      	mov	r1, r0
 8018e0e:	3b30      	subs	r3, #48	; 0x30
 8018e10:	220a      	movs	r2, #10
 8018e12:	4630      	mov	r0, r6
 8018e14:	f7ff ff76 	bl	8018d04 <__multadd>
 8018e18:	e7ee      	b.n	8018df8 <__s2b+0x68>
 8018e1a:	bf00      	nop
 8018e1c:	0801b6ad 	.word	0x0801b6ad
 8018e20:	0801b6be 	.word	0x0801b6be

08018e24 <__hi0bits>:
 8018e24:	0c03      	lsrs	r3, r0, #16
 8018e26:	041b      	lsls	r3, r3, #16
 8018e28:	b9d3      	cbnz	r3, 8018e60 <__hi0bits+0x3c>
 8018e2a:	0400      	lsls	r0, r0, #16
 8018e2c:	2310      	movs	r3, #16
 8018e2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018e32:	bf04      	itt	eq
 8018e34:	0200      	lsleq	r0, r0, #8
 8018e36:	3308      	addeq	r3, #8
 8018e38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018e3c:	bf04      	itt	eq
 8018e3e:	0100      	lsleq	r0, r0, #4
 8018e40:	3304      	addeq	r3, #4
 8018e42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018e46:	bf04      	itt	eq
 8018e48:	0080      	lsleq	r0, r0, #2
 8018e4a:	3302      	addeq	r3, #2
 8018e4c:	2800      	cmp	r0, #0
 8018e4e:	db05      	blt.n	8018e5c <__hi0bits+0x38>
 8018e50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018e54:	f103 0301 	add.w	r3, r3, #1
 8018e58:	bf08      	it	eq
 8018e5a:	2320      	moveq	r3, #32
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	4770      	bx	lr
 8018e60:	2300      	movs	r3, #0
 8018e62:	e7e4      	b.n	8018e2e <__hi0bits+0xa>

08018e64 <__lo0bits>:
 8018e64:	6803      	ldr	r3, [r0, #0]
 8018e66:	f013 0207 	ands.w	r2, r3, #7
 8018e6a:	d00c      	beq.n	8018e86 <__lo0bits+0x22>
 8018e6c:	07d9      	lsls	r1, r3, #31
 8018e6e:	d422      	bmi.n	8018eb6 <__lo0bits+0x52>
 8018e70:	079a      	lsls	r2, r3, #30
 8018e72:	bf49      	itett	mi
 8018e74:	085b      	lsrmi	r3, r3, #1
 8018e76:	089b      	lsrpl	r3, r3, #2
 8018e78:	6003      	strmi	r3, [r0, #0]
 8018e7a:	2201      	movmi	r2, #1
 8018e7c:	bf5c      	itt	pl
 8018e7e:	6003      	strpl	r3, [r0, #0]
 8018e80:	2202      	movpl	r2, #2
 8018e82:	4610      	mov	r0, r2
 8018e84:	4770      	bx	lr
 8018e86:	b299      	uxth	r1, r3
 8018e88:	b909      	cbnz	r1, 8018e8e <__lo0bits+0x2a>
 8018e8a:	0c1b      	lsrs	r3, r3, #16
 8018e8c:	2210      	movs	r2, #16
 8018e8e:	b2d9      	uxtb	r1, r3
 8018e90:	b909      	cbnz	r1, 8018e96 <__lo0bits+0x32>
 8018e92:	3208      	adds	r2, #8
 8018e94:	0a1b      	lsrs	r3, r3, #8
 8018e96:	0719      	lsls	r1, r3, #28
 8018e98:	bf04      	itt	eq
 8018e9a:	091b      	lsreq	r3, r3, #4
 8018e9c:	3204      	addeq	r2, #4
 8018e9e:	0799      	lsls	r1, r3, #30
 8018ea0:	bf04      	itt	eq
 8018ea2:	089b      	lsreq	r3, r3, #2
 8018ea4:	3202      	addeq	r2, #2
 8018ea6:	07d9      	lsls	r1, r3, #31
 8018ea8:	d403      	bmi.n	8018eb2 <__lo0bits+0x4e>
 8018eaa:	085b      	lsrs	r3, r3, #1
 8018eac:	f102 0201 	add.w	r2, r2, #1
 8018eb0:	d003      	beq.n	8018eba <__lo0bits+0x56>
 8018eb2:	6003      	str	r3, [r0, #0]
 8018eb4:	e7e5      	b.n	8018e82 <__lo0bits+0x1e>
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	e7e3      	b.n	8018e82 <__lo0bits+0x1e>
 8018eba:	2220      	movs	r2, #32
 8018ebc:	e7e1      	b.n	8018e82 <__lo0bits+0x1e>
	...

08018ec0 <__i2b>:
 8018ec0:	b510      	push	{r4, lr}
 8018ec2:	460c      	mov	r4, r1
 8018ec4:	2101      	movs	r1, #1
 8018ec6:	f7ff febb 	bl	8018c40 <_Balloc>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	b928      	cbnz	r0, 8018eda <__i2b+0x1a>
 8018ece:	4b05      	ldr	r3, [pc, #20]	; (8018ee4 <__i2b+0x24>)
 8018ed0:	4805      	ldr	r0, [pc, #20]	; (8018ee8 <__i2b+0x28>)
 8018ed2:	f240 1145 	movw	r1, #325	; 0x145
 8018ed6:	f001 fbff 	bl	801a6d8 <__assert_func>
 8018eda:	2301      	movs	r3, #1
 8018edc:	6144      	str	r4, [r0, #20]
 8018ede:	6103      	str	r3, [r0, #16]
 8018ee0:	bd10      	pop	{r4, pc}
 8018ee2:	bf00      	nop
 8018ee4:	0801b6ad 	.word	0x0801b6ad
 8018ee8:	0801b6be 	.word	0x0801b6be

08018eec <__multiply>:
 8018eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef0:	4691      	mov	r9, r2
 8018ef2:	690a      	ldr	r2, [r1, #16]
 8018ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	bfb8      	it	lt
 8018efc:	460b      	movlt	r3, r1
 8018efe:	460c      	mov	r4, r1
 8018f00:	bfbc      	itt	lt
 8018f02:	464c      	movlt	r4, r9
 8018f04:	4699      	movlt	r9, r3
 8018f06:	6927      	ldr	r7, [r4, #16]
 8018f08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018f0c:	68a3      	ldr	r3, [r4, #8]
 8018f0e:	6861      	ldr	r1, [r4, #4]
 8018f10:	eb07 060a 	add.w	r6, r7, sl
 8018f14:	42b3      	cmp	r3, r6
 8018f16:	b085      	sub	sp, #20
 8018f18:	bfb8      	it	lt
 8018f1a:	3101      	addlt	r1, #1
 8018f1c:	f7ff fe90 	bl	8018c40 <_Balloc>
 8018f20:	b930      	cbnz	r0, 8018f30 <__multiply+0x44>
 8018f22:	4602      	mov	r2, r0
 8018f24:	4b44      	ldr	r3, [pc, #272]	; (8019038 <__multiply+0x14c>)
 8018f26:	4845      	ldr	r0, [pc, #276]	; (801903c <__multiply+0x150>)
 8018f28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018f2c:	f001 fbd4 	bl	801a6d8 <__assert_func>
 8018f30:	f100 0514 	add.w	r5, r0, #20
 8018f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018f38:	462b      	mov	r3, r5
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	4543      	cmp	r3, r8
 8018f3e:	d321      	bcc.n	8018f84 <__multiply+0x98>
 8018f40:	f104 0314 	add.w	r3, r4, #20
 8018f44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018f48:	f109 0314 	add.w	r3, r9, #20
 8018f4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018f50:	9202      	str	r2, [sp, #8]
 8018f52:	1b3a      	subs	r2, r7, r4
 8018f54:	3a15      	subs	r2, #21
 8018f56:	f022 0203 	bic.w	r2, r2, #3
 8018f5a:	3204      	adds	r2, #4
 8018f5c:	f104 0115 	add.w	r1, r4, #21
 8018f60:	428f      	cmp	r7, r1
 8018f62:	bf38      	it	cc
 8018f64:	2204      	movcc	r2, #4
 8018f66:	9201      	str	r2, [sp, #4]
 8018f68:	9a02      	ldr	r2, [sp, #8]
 8018f6a:	9303      	str	r3, [sp, #12]
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d80c      	bhi.n	8018f8a <__multiply+0x9e>
 8018f70:	2e00      	cmp	r6, #0
 8018f72:	dd03      	ble.n	8018f7c <__multiply+0x90>
 8018f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d05b      	beq.n	8019034 <__multiply+0x148>
 8018f7c:	6106      	str	r6, [r0, #16]
 8018f7e:	b005      	add	sp, #20
 8018f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f84:	f843 2b04 	str.w	r2, [r3], #4
 8018f88:	e7d8      	b.n	8018f3c <__multiply+0x50>
 8018f8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018f8e:	f1ba 0f00 	cmp.w	sl, #0
 8018f92:	d024      	beq.n	8018fde <__multiply+0xf2>
 8018f94:	f104 0e14 	add.w	lr, r4, #20
 8018f98:	46a9      	mov	r9, r5
 8018f9a:	f04f 0c00 	mov.w	ip, #0
 8018f9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018fa2:	f8d9 1000 	ldr.w	r1, [r9]
 8018fa6:	fa1f fb82 	uxth.w	fp, r2
 8018faa:	b289      	uxth	r1, r1
 8018fac:	fb0a 110b 	mla	r1, sl, fp, r1
 8018fb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8018fb8:	4461      	add	r1, ip
 8018fba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018fbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8018fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018fc6:	b289      	uxth	r1, r1
 8018fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018fcc:	4577      	cmp	r7, lr
 8018fce:	f849 1b04 	str.w	r1, [r9], #4
 8018fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018fd6:	d8e2      	bhi.n	8018f9e <__multiply+0xb2>
 8018fd8:	9a01      	ldr	r2, [sp, #4]
 8018fda:	f845 c002 	str.w	ip, [r5, r2]
 8018fde:	9a03      	ldr	r2, [sp, #12]
 8018fe0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018fe4:	3304      	adds	r3, #4
 8018fe6:	f1b9 0f00 	cmp.w	r9, #0
 8018fea:	d021      	beq.n	8019030 <__multiply+0x144>
 8018fec:	6829      	ldr	r1, [r5, #0]
 8018fee:	f104 0c14 	add.w	ip, r4, #20
 8018ff2:	46ae      	mov	lr, r5
 8018ff4:	f04f 0a00 	mov.w	sl, #0
 8018ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8018ffc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019000:	fb09 220b 	mla	r2, r9, fp, r2
 8019004:	4452      	add	r2, sl
 8019006:	b289      	uxth	r1, r1
 8019008:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801900c:	f84e 1b04 	str.w	r1, [lr], #4
 8019010:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019014:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019018:	f8be 1000 	ldrh.w	r1, [lr]
 801901c:	fb09 110a 	mla	r1, r9, sl, r1
 8019020:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019024:	4567      	cmp	r7, ip
 8019026:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801902a:	d8e5      	bhi.n	8018ff8 <__multiply+0x10c>
 801902c:	9a01      	ldr	r2, [sp, #4]
 801902e:	50a9      	str	r1, [r5, r2]
 8019030:	3504      	adds	r5, #4
 8019032:	e799      	b.n	8018f68 <__multiply+0x7c>
 8019034:	3e01      	subs	r6, #1
 8019036:	e79b      	b.n	8018f70 <__multiply+0x84>
 8019038:	0801b6ad 	.word	0x0801b6ad
 801903c:	0801b6be 	.word	0x0801b6be

08019040 <__pow5mult>:
 8019040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019044:	4615      	mov	r5, r2
 8019046:	f012 0203 	ands.w	r2, r2, #3
 801904a:	4606      	mov	r6, r0
 801904c:	460f      	mov	r7, r1
 801904e:	d007      	beq.n	8019060 <__pow5mult+0x20>
 8019050:	4c25      	ldr	r4, [pc, #148]	; (80190e8 <__pow5mult+0xa8>)
 8019052:	3a01      	subs	r2, #1
 8019054:	2300      	movs	r3, #0
 8019056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801905a:	f7ff fe53 	bl	8018d04 <__multadd>
 801905e:	4607      	mov	r7, r0
 8019060:	10ad      	asrs	r5, r5, #2
 8019062:	d03d      	beq.n	80190e0 <__pow5mult+0xa0>
 8019064:	69f4      	ldr	r4, [r6, #28]
 8019066:	b97c      	cbnz	r4, 8019088 <__pow5mult+0x48>
 8019068:	2010      	movs	r0, #16
 801906a:	f7ff fd35 	bl	8018ad8 <malloc>
 801906e:	4602      	mov	r2, r0
 8019070:	61f0      	str	r0, [r6, #28]
 8019072:	b928      	cbnz	r0, 8019080 <__pow5mult+0x40>
 8019074:	4b1d      	ldr	r3, [pc, #116]	; (80190ec <__pow5mult+0xac>)
 8019076:	481e      	ldr	r0, [pc, #120]	; (80190f0 <__pow5mult+0xb0>)
 8019078:	f240 11b3 	movw	r1, #435	; 0x1b3
 801907c:	f001 fb2c 	bl	801a6d8 <__assert_func>
 8019080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019084:	6004      	str	r4, [r0, #0]
 8019086:	60c4      	str	r4, [r0, #12]
 8019088:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801908c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019090:	b94c      	cbnz	r4, 80190a6 <__pow5mult+0x66>
 8019092:	f240 2171 	movw	r1, #625	; 0x271
 8019096:	4630      	mov	r0, r6
 8019098:	f7ff ff12 	bl	8018ec0 <__i2b>
 801909c:	2300      	movs	r3, #0
 801909e:	f8c8 0008 	str.w	r0, [r8, #8]
 80190a2:	4604      	mov	r4, r0
 80190a4:	6003      	str	r3, [r0, #0]
 80190a6:	f04f 0900 	mov.w	r9, #0
 80190aa:	07eb      	lsls	r3, r5, #31
 80190ac:	d50a      	bpl.n	80190c4 <__pow5mult+0x84>
 80190ae:	4639      	mov	r1, r7
 80190b0:	4622      	mov	r2, r4
 80190b2:	4630      	mov	r0, r6
 80190b4:	f7ff ff1a 	bl	8018eec <__multiply>
 80190b8:	4639      	mov	r1, r7
 80190ba:	4680      	mov	r8, r0
 80190bc:	4630      	mov	r0, r6
 80190be:	f7ff fdff 	bl	8018cc0 <_Bfree>
 80190c2:	4647      	mov	r7, r8
 80190c4:	106d      	asrs	r5, r5, #1
 80190c6:	d00b      	beq.n	80190e0 <__pow5mult+0xa0>
 80190c8:	6820      	ldr	r0, [r4, #0]
 80190ca:	b938      	cbnz	r0, 80190dc <__pow5mult+0x9c>
 80190cc:	4622      	mov	r2, r4
 80190ce:	4621      	mov	r1, r4
 80190d0:	4630      	mov	r0, r6
 80190d2:	f7ff ff0b 	bl	8018eec <__multiply>
 80190d6:	6020      	str	r0, [r4, #0]
 80190d8:	f8c0 9000 	str.w	r9, [r0]
 80190dc:	4604      	mov	r4, r0
 80190de:	e7e4      	b.n	80190aa <__pow5mult+0x6a>
 80190e0:	4638      	mov	r0, r7
 80190e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190e6:	bf00      	nop
 80190e8:	0801b808 	.word	0x0801b808
 80190ec:	0801b63e 	.word	0x0801b63e
 80190f0:	0801b6be 	.word	0x0801b6be

080190f4 <__lshift>:
 80190f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190f8:	460c      	mov	r4, r1
 80190fa:	6849      	ldr	r1, [r1, #4]
 80190fc:	6923      	ldr	r3, [r4, #16]
 80190fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019102:	68a3      	ldr	r3, [r4, #8]
 8019104:	4607      	mov	r7, r0
 8019106:	4691      	mov	r9, r2
 8019108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801910c:	f108 0601 	add.w	r6, r8, #1
 8019110:	42b3      	cmp	r3, r6
 8019112:	db0b      	blt.n	801912c <__lshift+0x38>
 8019114:	4638      	mov	r0, r7
 8019116:	f7ff fd93 	bl	8018c40 <_Balloc>
 801911a:	4605      	mov	r5, r0
 801911c:	b948      	cbnz	r0, 8019132 <__lshift+0x3e>
 801911e:	4602      	mov	r2, r0
 8019120:	4b28      	ldr	r3, [pc, #160]	; (80191c4 <__lshift+0xd0>)
 8019122:	4829      	ldr	r0, [pc, #164]	; (80191c8 <__lshift+0xd4>)
 8019124:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019128:	f001 fad6 	bl	801a6d8 <__assert_func>
 801912c:	3101      	adds	r1, #1
 801912e:	005b      	lsls	r3, r3, #1
 8019130:	e7ee      	b.n	8019110 <__lshift+0x1c>
 8019132:	2300      	movs	r3, #0
 8019134:	f100 0114 	add.w	r1, r0, #20
 8019138:	f100 0210 	add.w	r2, r0, #16
 801913c:	4618      	mov	r0, r3
 801913e:	4553      	cmp	r3, sl
 8019140:	db33      	blt.n	80191aa <__lshift+0xb6>
 8019142:	6920      	ldr	r0, [r4, #16]
 8019144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019148:	f104 0314 	add.w	r3, r4, #20
 801914c:	f019 091f 	ands.w	r9, r9, #31
 8019150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019158:	d02b      	beq.n	80191b2 <__lshift+0xbe>
 801915a:	f1c9 0e20 	rsb	lr, r9, #32
 801915e:	468a      	mov	sl, r1
 8019160:	2200      	movs	r2, #0
 8019162:	6818      	ldr	r0, [r3, #0]
 8019164:	fa00 f009 	lsl.w	r0, r0, r9
 8019168:	4310      	orrs	r0, r2
 801916a:	f84a 0b04 	str.w	r0, [sl], #4
 801916e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019172:	459c      	cmp	ip, r3
 8019174:	fa22 f20e 	lsr.w	r2, r2, lr
 8019178:	d8f3      	bhi.n	8019162 <__lshift+0x6e>
 801917a:	ebac 0304 	sub.w	r3, ip, r4
 801917e:	3b15      	subs	r3, #21
 8019180:	f023 0303 	bic.w	r3, r3, #3
 8019184:	3304      	adds	r3, #4
 8019186:	f104 0015 	add.w	r0, r4, #21
 801918a:	4584      	cmp	ip, r0
 801918c:	bf38      	it	cc
 801918e:	2304      	movcc	r3, #4
 8019190:	50ca      	str	r2, [r1, r3]
 8019192:	b10a      	cbz	r2, 8019198 <__lshift+0xa4>
 8019194:	f108 0602 	add.w	r6, r8, #2
 8019198:	3e01      	subs	r6, #1
 801919a:	4638      	mov	r0, r7
 801919c:	612e      	str	r6, [r5, #16]
 801919e:	4621      	mov	r1, r4
 80191a0:	f7ff fd8e 	bl	8018cc0 <_Bfree>
 80191a4:	4628      	mov	r0, r5
 80191a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80191ae:	3301      	adds	r3, #1
 80191b0:	e7c5      	b.n	801913e <__lshift+0x4a>
 80191b2:	3904      	subs	r1, #4
 80191b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80191b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80191bc:	459c      	cmp	ip, r3
 80191be:	d8f9      	bhi.n	80191b4 <__lshift+0xc0>
 80191c0:	e7ea      	b.n	8019198 <__lshift+0xa4>
 80191c2:	bf00      	nop
 80191c4:	0801b6ad 	.word	0x0801b6ad
 80191c8:	0801b6be 	.word	0x0801b6be

080191cc <__mcmp>:
 80191cc:	b530      	push	{r4, r5, lr}
 80191ce:	6902      	ldr	r2, [r0, #16]
 80191d0:	690c      	ldr	r4, [r1, #16]
 80191d2:	1b12      	subs	r2, r2, r4
 80191d4:	d10e      	bne.n	80191f4 <__mcmp+0x28>
 80191d6:	f100 0314 	add.w	r3, r0, #20
 80191da:	3114      	adds	r1, #20
 80191dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80191e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80191e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80191e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80191ec:	42a5      	cmp	r5, r4
 80191ee:	d003      	beq.n	80191f8 <__mcmp+0x2c>
 80191f0:	d305      	bcc.n	80191fe <__mcmp+0x32>
 80191f2:	2201      	movs	r2, #1
 80191f4:	4610      	mov	r0, r2
 80191f6:	bd30      	pop	{r4, r5, pc}
 80191f8:	4283      	cmp	r3, r0
 80191fa:	d3f3      	bcc.n	80191e4 <__mcmp+0x18>
 80191fc:	e7fa      	b.n	80191f4 <__mcmp+0x28>
 80191fe:	f04f 32ff 	mov.w	r2, #4294967295
 8019202:	e7f7      	b.n	80191f4 <__mcmp+0x28>

08019204 <__mdiff>:
 8019204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019208:	460c      	mov	r4, r1
 801920a:	4606      	mov	r6, r0
 801920c:	4611      	mov	r1, r2
 801920e:	4620      	mov	r0, r4
 8019210:	4690      	mov	r8, r2
 8019212:	f7ff ffdb 	bl	80191cc <__mcmp>
 8019216:	1e05      	subs	r5, r0, #0
 8019218:	d110      	bne.n	801923c <__mdiff+0x38>
 801921a:	4629      	mov	r1, r5
 801921c:	4630      	mov	r0, r6
 801921e:	f7ff fd0f 	bl	8018c40 <_Balloc>
 8019222:	b930      	cbnz	r0, 8019232 <__mdiff+0x2e>
 8019224:	4b3a      	ldr	r3, [pc, #232]	; (8019310 <__mdiff+0x10c>)
 8019226:	4602      	mov	r2, r0
 8019228:	f240 2137 	movw	r1, #567	; 0x237
 801922c:	4839      	ldr	r0, [pc, #228]	; (8019314 <__mdiff+0x110>)
 801922e:	f001 fa53 	bl	801a6d8 <__assert_func>
 8019232:	2301      	movs	r3, #1
 8019234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923c:	bfa4      	itt	ge
 801923e:	4643      	movge	r3, r8
 8019240:	46a0      	movge	r8, r4
 8019242:	4630      	mov	r0, r6
 8019244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019248:	bfa6      	itte	ge
 801924a:	461c      	movge	r4, r3
 801924c:	2500      	movge	r5, #0
 801924e:	2501      	movlt	r5, #1
 8019250:	f7ff fcf6 	bl	8018c40 <_Balloc>
 8019254:	b920      	cbnz	r0, 8019260 <__mdiff+0x5c>
 8019256:	4b2e      	ldr	r3, [pc, #184]	; (8019310 <__mdiff+0x10c>)
 8019258:	4602      	mov	r2, r0
 801925a:	f240 2145 	movw	r1, #581	; 0x245
 801925e:	e7e5      	b.n	801922c <__mdiff+0x28>
 8019260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019264:	6926      	ldr	r6, [r4, #16]
 8019266:	60c5      	str	r5, [r0, #12]
 8019268:	f104 0914 	add.w	r9, r4, #20
 801926c:	f108 0514 	add.w	r5, r8, #20
 8019270:	f100 0e14 	add.w	lr, r0, #20
 8019274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801927c:	f108 0210 	add.w	r2, r8, #16
 8019280:	46f2      	mov	sl, lr
 8019282:	2100      	movs	r1, #0
 8019284:	f859 3b04 	ldr.w	r3, [r9], #4
 8019288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801928c:	fa11 f88b 	uxtah	r8, r1, fp
 8019290:	b299      	uxth	r1, r3
 8019292:	0c1b      	lsrs	r3, r3, #16
 8019294:	eba8 0801 	sub.w	r8, r8, r1
 8019298:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801929c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80192a0:	fa1f f888 	uxth.w	r8, r8
 80192a4:	1419      	asrs	r1, r3, #16
 80192a6:	454e      	cmp	r6, r9
 80192a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80192ac:	f84a 3b04 	str.w	r3, [sl], #4
 80192b0:	d8e8      	bhi.n	8019284 <__mdiff+0x80>
 80192b2:	1b33      	subs	r3, r6, r4
 80192b4:	3b15      	subs	r3, #21
 80192b6:	f023 0303 	bic.w	r3, r3, #3
 80192ba:	3304      	adds	r3, #4
 80192bc:	3415      	adds	r4, #21
 80192be:	42a6      	cmp	r6, r4
 80192c0:	bf38      	it	cc
 80192c2:	2304      	movcc	r3, #4
 80192c4:	441d      	add	r5, r3
 80192c6:	4473      	add	r3, lr
 80192c8:	469e      	mov	lr, r3
 80192ca:	462e      	mov	r6, r5
 80192cc:	4566      	cmp	r6, ip
 80192ce:	d30e      	bcc.n	80192ee <__mdiff+0xea>
 80192d0:	f10c 0203 	add.w	r2, ip, #3
 80192d4:	1b52      	subs	r2, r2, r5
 80192d6:	f022 0203 	bic.w	r2, r2, #3
 80192da:	3d03      	subs	r5, #3
 80192dc:	45ac      	cmp	ip, r5
 80192de:	bf38      	it	cc
 80192e0:	2200      	movcc	r2, #0
 80192e2:	4413      	add	r3, r2
 80192e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80192e8:	b17a      	cbz	r2, 801930a <__mdiff+0x106>
 80192ea:	6107      	str	r7, [r0, #16]
 80192ec:	e7a4      	b.n	8019238 <__mdiff+0x34>
 80192ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80192f2:	fa11 f288 	uxtah	r2, r1, r8
 80192f6:	1414      	asrs	r4, r2, #16
 80192f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80192fc:	b292      	uxth	r2, r2
 80192fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019302:	f84e 2b04 	str.w	r2, [lr], #4
 8019306:	1421      	asrs	r1, r4, #16
 8019308:	e7e0      	b.n	80192cc <__mdiff+0xc8>
 801930a:	3f01      	subs	r7, #1
 801930c:	e7ea      	b.n	80192e4 <__mdiff+0xe0>
 801930e:	bf00      	nop
 8019310:	0801b6ad 	.word	0x0801b6ad
 8019314:	0801b6be 	.word	0x0801b6be

08019318 <__ulp>:
 8019318:	b082      	sub	sp, #8
 801931a:	ed8d 0b00 	vstr	d0, [sp]
 801931e:	9a01      	ldr	r2, [sp, #4]
 8019320:	4b0f      	ldr	r3, [pc, #60]	; (8019360 <__ulp+0x48>)
 8019322:	4013      	ands	r3, r2
 8019324:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019328:	2b00      	cmp	r3, #0
 801932a:	dc08      	bgt.n	801933e <__ulp+0x26>
 801932c:	425b      	negs	r3, r3
 801932e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8019332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019336:	da04      	bge.n	8019342 <__ulp+0x2a>
 8019338:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801933c:	4113      	asrs	r3, r2
 801933e:	2200      	movs	r2, #0
 8019340:	e008      	b.n	8019354 <__ulp+0x3c>
 8019342:	f1a2 0314 	sub.w	r3, r2, #20
 8019346:	2b1e      	cmp	r3, #30
 8019348:	bfda      	itte	le
 801934a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801934e:	40da      	lsrle	r2, r3
 8019350:	2201      	movgt	r2, #1
 8019352:	2300      	movs	r3, #0
 8019354:	4619      	mov	r1, r3
 8019356:	4610      	mov	r0, r2
 8019358:	ec41 0b10 	vmov	d0, r0, r1
 801935c:	b002      	add	sp, #8
 801935e:	4770      	bx	lr
 8019360:	7ff00000 	.word	0x7ff00000

08019364 <__b2d>:
 8019364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019368:	6906      	ldr	r6, [r0, #16]
 801936a:	f100 0814 	add.w	r8, r0, #20
 801936e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019372:	1f37      	subs	r7, r6, #4
 8019374:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019378:	4610      	mov	r0, r2
 801937a:	f7ff fd53 	bl	8018e24 <__hi0bits>
 801937e:	f1c0 0320 	rsb	r3, r0, #32
 8019382:	280a      	cmp	r0, #10
 8019384:	600b      	str	r3, [r1, #0]
 8019386:	491b      	ldr	r1, [pc, #108]	; (80193f4 <__b2d+0x90>)
 8019388:	dc15      	bgt.n	80193b6 <__b2d+0x52>
 801938a:	f1c0 0c0b 	rsb	ip, r0, #11
 801938e:	fa22 f30c 	lsr.w	r3, r2, ip
 8019392:	45b8      	cmp	r8, r7
 8019394:	ea43 0501 	orr.w	r5, r3, r1
 8019398:	bf34      	ite	cc
 801939a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801939e:	2300      	movcs	r3, #0
 80193a0:	3015      	adds	r0, #21
 80193a2:	fa02 f000 	lsl.w	r0, r2, r0
 80193a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80193aa:	4303      	orrs	r3, r0
 80193ac:	461c      	mov	r4, r3
 80193ae:	ec45 4b10 	vmov	d0, r4, r5
 80193b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b6:	45b8      	cmp	r8, r7
 80193b8:	bf3a      	itte	cc
 80193ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80193be:	f1a6 0708 	subcc.w	r7, r6, #8
 80193c2:	2300      	movcs	r3, #0
 80193c4:	380b      	subs	r0, #11
 80193c6:	d012      	beq.n	80193ee <__b2d+0x8a>
 80193c8:	f1c0 0120 	rsb	r1, r0, #32
 80193cc:	fa23 f401 	lsr.w	r4, r3, r1
 80193d0:	4082      	lsls	r2, r0
 80193d2:	4322      	orrs	r2, r4
 80193d4:	4547      	cmp	r7, r8
 80193d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80193da:	bf8c      	ite	hi
 80193dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80193e0:	2200      	movls	r2, #0
 80193e2:	4083      	lsls	r3, r0
 80193e4:	40ca      	lsrs	r2, r1
 80193e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80193ea:	4313      	orrs	r3, r2
 80193ec:	e7de      	b.n	80193ac <__b2d+0x48>
 80193ee:	ea42 0501 	orr.w	r5, r2, r1
 80193f2:	e7db      	b.n	80193ac <__b2d+0x48>
 80193f4:	3ff00000 	.word	0x3ff00000

080193f8 <__d2b>:
 80193f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80193fc:	460f      	mov	r7, r1
 80193fe:	2101      	movs	r1, #1
 8019400:	ec59 8b10 	vmov	r8, r9, d0
 8019404:	4616      	mov	r6, r2
 8019406:	f7ff fc1b 	bl	8018c40 <_Balloc>
 801940a:	4604      	mov	r4, r0
 801940c:	b930      	cbnz	r0, 801941c <__d2b+0x24>
 801940e:	4602      	mov	r2, r0
 8019410:	4b24      	ldr	r3, [pc, #144]	; (80194a4 <__d2b+0xac>)
 8019412:	4825      	ldr	r0, [pc, #148]	; (80194a8 <__d2b+0xb0>)
 8019414:	f240 310f 	movw	r1, #783	; 0x30f
 8019418:	f001 f95e 	bl	801a6d8 <__assert_func>
 801941c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019424:	bb2d      	cbnz	r5, 8019472 <__d2b+0x7a>
 8019426:	9301      	str	r3, [sp, #4]
 8019428:	f1b8 0300 	subs.w	r3, r8, #0
 801942c:	d026      	beq.n	801947c <__d2b+0x84>
 801942e:	4668      	mov	r0, sp
 8019430:	9300      	str	r3, [sp, #0]
 8019432:	f7ff fd17 	bl	8018e64 <__lo0bits>
 8019436:	e9dd 1200 	ldrd	r1, r2, [sp]
 801943a:	b1e8      	cbz	r0, 8019478 <__d2b+0x80>
 801943c:	f1c0 0320 	rsb	r3, r0, #32
 8019440:	fa02 f303 	lsl.w	r3, r2, r3
 8019444:	430b      	orrs	r3, r1
 8019446:	40c2      	lsrs	r2, r0
 8019448:	6163      	str	r3, [r4, #20]
 801944a:	9201      	str	r2, [sp, #4]
 801944c:	9b01      	ldr	r3, [sp, #4]
 801944e:	61a3      	str	r3, [r4, #24]
 8019450:	2b00      	cmp	r3, #0
 8019452:	bf14      	ite	ne
 8019454:	2202      	movne	r2, #2
 8019456:	2201      	moveq	r2, #1
 8019458:	6122      	str	r2, [r4, #16]
 801945a:	b1bd      	cbz	r5, 801948c <__d2b+0x94>
 801945c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019460:	4405      	add	r5, r0
 8019462:	603d      	str	r5, [r7, #0]
 8019464:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019468:	6030      	str	r0, [r6, #0]
 801946a:	4620      	mov	r0, r4
 801946c:	b003      	add	sp, #12
 801946e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019476:	e7d6      	b.n	8019426 <__d2b+0x2e>
 8019478:	6161      	str	r1, [r4, #20]
 801947a:	e7e7      	b.n	801944c <__d2b+0x54>
 801947c:	a801      	add	r0, sp, #4
 801947e:	f7ff fcf1 	bl	8018e64 <__lo0bits>
 8019482:	9b01      	ldr	r3, [sp, #4]
 8019484:	6163      	str	r3, [r4, #20]
 8019486:	3020      	adds	r0, #32
 8019488:	2201      	movs	r2, #1
 801948a:	e7e5      	b.n	8019458 <__d2b+0x60>
 801948c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019494:	6038      	str	r0, [r7, #0]
 8019496:	6918      	ldr	r0, [r3, #16]
 8019498:	f7ff fcc4 	bl	8018e24 <__hi0bits>
 801949c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80194a0:	e7e2      	b.n	8019468 <__d2b+0x70>
 80194a2:	bf00      	nop
 80194a4:	0801b6ad 	.word	0x0801b6ad
 80194a8:	0801b6be 	.word	0x0801b6be

080194ac <__ratio>:
 80194ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b0:	4688      	mov	r8, r1
 80194b2:	4669      	mov	r1, sp
 80194b4:	4681      	mov	r9, r0
 80194b6:	f7ff ff55 	bl	8019364 <__b2d>
 80194ba:	a901      	add	r1, sp, #4
 80194bc:	4640      	mov	r0, r8
 80194be:	ec55 4b10 	vmov	r4, r5, d0
 80194c2:	ee10 aa10 	vmov	sl, s0
 80194c6:	f7ff ff4d 	bl	8019364 <__b2d>
 80194ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80194ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80194d2:	1ad2      	subs	r2, r2, r3
 80194d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80194d8:	1a5b      	subs	r3, r3, r1
 80194da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80194de:	ec57 6b10 	vmov	r6, r7, d0
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	bfd6      	itet	le
 80194e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80194ea:	462a      	movgt	r2, r5
 80194ec:	463a      	movle	r2, r7
 80194ee:	46ab      	mov	fp, r5
 80194f0:	bfd6      	itet	le
 80194f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80194f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80194fa:	ee00 3a90 	vmovle	s1, r3
 80194fe:	ec4b ab17 	vmov	d7, sl, fp
 8019502:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019506:	b003      	add	sp, #12
 8019508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801950c <__copybits>:
 801950c:	3901      	subs	r1, #1
 801950e:	b570      	push	{r4, r5, r6, lr}
 8019510:	1149      	asrs	r1, r1, #5
 8019512:	6914      	ldr	r4, [r2, #16]
 8019514:	3101      	adds	r1, #1
 8019516:	f102 0314 	add.w	r3, r2, #20
 801951a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801951e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019522:	1f05      	subs	r5, r0, #4
 8019524:	42a3      	cmp	r3, r4
 8019526:	d30c      	bcc.n	8019542 <__copybits+0x36>
 8019528:	1aa3      	subs	r3, r4, r2
 801952a:	3b11      	subs	r3, #17
 801952c:	f023 0303 	bic.w	r3, r3, #3
 8019530:	3211      	adds	r2, #17
 8019532:	42a2      	cmp	r2, r4
 8019534:	bf88      	it	hi
 8019536:	2300      	movhi	r3, #0
 8019538:	4418      	add	r0, r3
 801953a:	2300      	movs	r3, #0
 801953c:	4288      	cmp	r0, r1
 801953e:	d305      	bcc.n	801954c <__copybits+0x40>
 8019540:	bd70      	pop	{r4, r5, r6, pc}
 8019542:	f853 6b04 	ldr.w	r6, [r3], #4
 8019546:	f845 6f04 	str.w	r6, [r5, #4]!
 801954a:	e7eb      	b.n	8019524 <__copybits+0x18>
 801954c:	f840 3b04 	str.w	r3, [r0], #4
 8019550:	e7f4      	b.n	801953c <__copybits+0x30>

08019552 <__any_on>:
 8019552:	f100 0214 	add.w	r2, r0, #20
 8019556:	6900      	ldr	r0, [r0, #16]
 8019558:	114b      	asrs	r3, r1, #5
 801955a:	4298      	cmp	r0, r3
 801955c:	b510      	push	{r4, lr}
 801955e:	db11      	blt.n	8019584 <__any_on+0x32>
 8019560:	dd0a      	ble.n	8019578 <__any_on+0x26>
 8019562:	f011 011f 	ands.w	r1, r1, #31
 8019566:	d007      	beq.n	8019578 <__any_on+0x26>
 8019568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801956c:	fa24 f001 	lsr.w	r0, r4, r1
 8019570:	fa00 f101 	lsl.w	r1, r0, r1
 8019574:	428c      	cmp	r4, r1
 8019576:	d10b      	bne.n	8019590 <__any_on+0x3e>
 8019578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801957c:	4293      	cmp	r3, r2
 801957e:	d803      	bhi.n	8019588 <__any_on+0x36>
 8019580:	2000      	movs	r0, #0
 8019582:	bd10      	pop	{r4, pc}
 8019584:	4603      	mov	r3, r0
 8019586:	e7f7      	b.n	8019578 <__any_on+0x26>
 8019588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801958c:	2900      	cmp	r1, #0
 801958e:	d0f5      	beq.n	801957c <__any_on+0x2a>
 8019590:	2001      	movs	r0, #1
 8019592:	e7f6      	b.n	8019582 <__any_on+0x30>

08019594 <sulp>:
 8019594:	b570      	push	{r4, r5, r6, lr}
 8019596:	4604      	mov	r4, r0
 8019598:	460d      	mov	r5, r1
 801959a:	4616      	mov	r6, r2
 801959c:	ec45 4b10 	vmov	d0, r4, r5
 80195a0:	f7ff feba 	bl	8019318 <__ulp>
 80195a4:	b17e      	cbz	r6, 80195c6 <sulp+0x32>
 80195a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80195aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	dd09      	ble.n	80195c6 <sulp+0x32>
 80195b2:	051b      	lsls	r3, r3, #20
 80195b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80195b8:	2000      	movs	r0, #0
 80195ba:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80195be:	ec41 0b17 	vmov	d7, r0, r1
 80195c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80195c6:	bd70      	pop	{r4, r5, r6, pc}

080195c8 <_strtod_l>:
 80195c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195cc:	ed2d 8b0e 	vpush	{d8-d14}
 80195d0:	b097      	sub	sp, #92	; 0x5c
 80195d2:	4604      	mov	r4, r0
 80195d4:	920d      	str	r2, [sp, #52]	; 0x34
 80195d6:	2200      	movs	r2, #0
 80195d8:	9212      	str	r2, [sp, #72]	; 0x48
 80195da:	468a      	mov	sl, r1
 80195dc:	f04f 0800 	mov.w	r8, #0
 80195e0:	f04f 0900 	mov.w	r9, #0
 80195e4:	460a      	mov	r2, r1
 80195e6:	9211      	str	r2, [sp, #68]	; 0x44
 80195e8:	7811      	ldrb	r1, [r2, #0]
 80195ea:	292b      	cmp	r1, #43	; 0x2b
 80195ec:	d04c      	beq.n	8019688 <_strtod_l+0xc0>
 80195ee:	d839      	bhi.n	8019664 <_strtod_l+0x9c>
 80195f0:	290d      	cmp	r1, #13
 80195f2:	d833      	bhi.n	801965c <_strtod_l+0x94>
 80195f4:	2908      	cmp	r1, #8
 80195f6:	d833      	bhi.n	8019660 <_strtod_l+0x98>
 80195f8:	2900      	cmp	r1, #0
 80195fa:	d03c      	beq.n	8019676 <_strtod_l+0xae>
 80195fc:	2200      	movs	r2, #0
 80195fe:	9208      	str	r2, [sp, #32]
 8019600:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019602:	7832      	ldrb	r2, [r6, #0]
 8019604:	2a30      	cmp	r2, #48	; 0x30
 8019606:	f040 80b8 	bne.w	801977a <_strtod_l+0x1b2>
 801960a:	7872      	ldrb	r2, [r6, #1]
 801960c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019610:	2a58      	cmp	r2, #88	; 0x58
 8019612:	d170      	bne.n	80196f6 <_strtod_l+0x12e>
 8019614:	9302      	str	r3, [sp, #8]
 8019616:	9b08      	ldr	r3, [sp, #32]
 8019618:	9301      	str	r3, [sp, #4]
 801961a:	ab12      	add	r3, sp, #72	; 0x48
 801961c:	9300      	str	r3, [sp, #0]
 801961e:	4a91      	ldr	r2, [pc, #580]	; (8019864 <_strtod_l+0x29c>)
 8019620:	ab13      	add	r3, sp, #76	; 0x4c
 8019622:	a911      	add	r1, sp, #68	; 0x44
 8019624:	4620      	mov	r0, r4
 8019626:	f001 f8f3 	bl	801a810 <__gethex>
 801962a:	f010 070f 	ands.w	r7, r0, #15
 801962e:	4605      	mov	r5, r0
 8019630:	d005      	beq.n	801963e <_strtod_l+0x76>
 8019632:	2f06      	cmp	r7, #6
 8019634:	d12a      	bne.n	801968c <_strtod_l+0xc4>
 8019636:	3601      	adds	r6, #1
 8019638:	2300      	movs	r3, #0
 801963a:	9611      	str	r6, [sp, #68]	; 0x44
 801963c:	9308      	str	r3, [sp, #32]
 801963e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019640:	2b00      	cmp	r3, #0
 8019642:	f040 8555 	bne.w	801a0f0 <_strtod_l+0xb28>
 8019646:	9b08      	ldr	r3, [sp, #32]
 8019648:	ec49 8b10 	vmov	d0, r8, r9
 801964c:	b1cb      	cbz	r3, 8019682 <_strtod_l+0xba>
 801964e:	eeb1 0b40 	vneg.f64	d0, d0
 8019652:	b017      	add	sp, #92	; 0x5c
 8019654:	ecbd 8b0e 	vpop	{d8-d14}
 8019658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801965c:	2920      	cmp	r1, #32
 801965e:	d1cd      	bne.n	80195fc <_strtod_l+0x34>
 8019660:	3201      	adds	r2, #1
 8019662:	e7c0      	b.n	80195e6 <_strtod_l+0x1e>
 8019664:	292d      	cmp	r1, #45	; 0x2d
 8019666:	d1c9      	bne.n	80195fc <_strtod_l+0x34>
 8019668:	2101      	movs	r1, #1
 801966a:	9108      	str	r1, [sp, #32]
 801966c:	1c51      	adds	r1, r2, #1
 801966e:	9111      	str	r1, [sp, #68]	; 0x44
 8019670:	7852      	ldrb	r2, [r2, #1]
 8019672:	2a00      	cmp	r2, #0
 8019674:	d1c4      	bne.n	8019600 <_strtod_l+0x38>
 8019676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019678:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801967c:	2b00      	cmp	r3, #0
 801967e:	f040 8535 	bne.w	801a0ec <_strtod_l+0xb24>
 8019682:	ec49 8b10 	vmov	d0, r8, r9
 8019686:	e7e4      	b.n	8019652 <_strtod_l+0x8a>
 8019688:	2100      	movs	r1, #0
 801968a:	e7ee      	b.n	801966a <_strtod_l+0xa2>
 801968c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801968e:	b13a      	cbz	r2, 80196a0 <_strtod_l+0xd8>
 8019690:	2135      	movs	r1, #53	; 0x35
 8019692:	a814      	add	r0, sp, #80	; 0x50
 8019694:	f7ff ff3a 	bl	801950c <__copybits>
 8019698:	9912      	ldr	r1, [sp, #72]	; 0x48
 801969a:	4620      	mov	r0, r4
 801969c:	f7ff fb10 	bl	8018cc0 <_Bfree>
 80196a0:	1e7b      	subs	r3, r7, #1
 80196a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196a4:	2b04      	cmp	r3, #4
 80196a6:	d806      	bhi.n	80196b6 <_strtod_l+0xee>
 80196a8:	e8df f003 	tbb	[pc, r3]
 80196ac:	201d0314 	.word	0x201d0314
 80196b0:	14          	.byte	0x14
 80196b1:	00          	.byte	0x00
 80196b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80196b6:	05eb      	lsls	r3, r5, #23
 80196b8:	bf48      	it	mi
 80196ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80196be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80196c2:	0d1b      	lsrs	r3, r3, #20
 80196c4:	051b      	lsls	r3, r3, #20
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d1b9      	bne.n	801963e <_strtod_l+0x76>
 80196ca:	f7fe fb83 	bl	8017dd4 <__errno>
 80196ce:	2322      	movs	r3, #34	; 0x22
 80196d0:	6003      	str	r3, [r0, #0]
 80196d2:	e7b4      	b.n	801963e <_strtod_l+0x76>
 80196d4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80196d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80196dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80196e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80196e4:	e7e7      	b.n	80196b6 <_strtod_l+0xee>
 80196e6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801986c <_strtod_l+0x2a4>
 80196ea:	e7e4      	b.n	80196b6 <_strtod_l+0xee>
 80196ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80196f0:	f04f 38ff 	mov.w	r8, #4294967295
 80196f4:	e7df      	b.n	80196b6 <_strtod_l+0xee>
 80196f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80196f8:	1c5a      	adds	r2, r3, #1
 80196fa:	9211      	str	r2, [sp, #68]	; 0x44
 80196fc:	785b      	ldrb	r3, [r3, #1]
 80196fe:	2b30      	cmp	r3, #48	; 0x30
 8019700:	d0f9      	beq.n	80196f6 <_strtod_l+0x12e>
 8019702:	2b00      	cmp	r3, #0
 8019704:	d09b      	beq.n	801963e <_strtod_l+0x76>
 8019706:	2301      	movs	r3, #1
 8019708:	9306      	str	r3, [sp, #24]
 801970a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801970c:	9309      	str	r3, [sp, #36]	; 0x24
 801970e:	2300      	movs	r3, #0
 8019710:	9305      	str	r3, [sp, #20]
 8019712:	9307      	str	r3, [sp, #28]
 8019714:	461e      	mov	r6, r3
 8019716:	220a      	movs	r2, #10
 8019718:	9811      	ldr	r0, [sp, #68]	; 0x44
 801971a:	7805      	ldrb	r5, [r0, #0]
 801971c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8019720:	b2d9      	uxtb	r1, r3
 8019722:	2909      	cmp	r1, #9
 8019724:	d92b      	bls.n	801977e <_strtod_l+0x1b6>
 8019726:	4950      	ldr	r1, [pc, #320]	; (8019868 <_strtod_l+0x2a0>)
 8019728:	2201      	movs	r2, #1
 801972a:	f000 ffa9 	bl	801a680 <strncmp>
 801972e:	2800      	cmp	r0, #0
 8019730:	d035      	beq.n	801979e <_strtod_l+0x1d6>
 8019732:	2000      	movs	r0, #0
 8019734:	462a      	mov	r2, r5
 8019736:	4633      	mov	r3, r6
 8019738:	4683      	mov	fp, r0
 801973a:	4601      	mov	r1, r0
 801973c:	2a65      	cmp	r2, #101	; 0x65
 801973e:	d001      	beq.n	8019744 <_strtod_l+0x17c>
 8019740:	2a45      	cmp	r2, #69	; 0x45
 8019742:	d118      	bne.n	8019776 <_strtod_l+0x1ae>
 8019744:	b91b      	cbnz	r3, 801974e <_strtod_l+0x186>
 8019746:	9b06      	ldr	r3, [sp, #24]
 8019748:	4303      	orrs	r3, r0
 801974a:	d094      	beq.n	8019676 <_strtod_l+0xae>
 801974c:	2300      	movs	r3, #0
 801974e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8019752:	f10a 0201 	add.w	r2, sl, #1
 8019756:	9211      	str	r2, [sp, #68]	; 0x44
 8019758:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801975c:	2a2b      	cmp	r2, #43	; 0x2b
 801975e:	d075      	beq.n	801984c <_strtod_l+0x284>
 8019760:	2a2d      	cmp	r2, #45	; 0x2d
 8019762:	d07b      	beq.n	801985c <_strtod_l+0x294>
 8019764:	f04f 0e00 	mov.w	lr, #0
 8019768:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801976c:	2d09      	cmp	r5, #9
 801976e:	f240 8083 	bls.w	8019878 <_strtod_l+0x2b0>
 8019772:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019776:	2500      	movs	r5, #0
 8019778:	e09e      	b.n	80198b8 <_strtod_l+0x2f0>
 801977a:	2300      	movs	r3, #0
 801977c:	e7c4      	b.n	8019708 <_strtod_l+0x140>
 801977e:	2e08      	cmp	r6, #8
 8019780:	bfd5      	itete	le
 8019782:	9907      	ldrle	r1, [sp, #28]
 8019784:	9905      	ldrgt	r1, [sp, #20]
 8019786:	fb02 3301 	mlale	r3, r2, r1, r3
 801978a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801978e:	f100 0001 	add.w	r0, r0, #1
 8019792:	bfd4      	ite	le
 8019794:	9307      	strle	r3, [sp, #28]
 8019796:	9305      	strgt	r3, [sp, #20]
 8019798:	3601      	adds	r6, #1
 801979a:	9011      	str	r0, [sp, #68]	; 0x44
 801979c:	e7bc      	b.n	8019718 <_strtod_l+0x150>
 801979e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197a0:	1c5a      	adds	r2, r3, #1
 80197a2:	9211      	str	r2, [sp, #68]	; 0x44
 80197a4:	785a      	ldrb	r2, [r3, #1]
 80197a6:	b3ae      	cbz	r6, 8019814 <_strtod_l+0x24c>
 80197a8:	4683      	mov	fp, r0
 80197aa:	4633      	mov	r3, r6
 80197ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80197b0:	2909      	cmp	r1, #9
 80197b2:	d912      	bls.n	80197da <_strtod_l+0x212>
 80197b4:	2101      	movs	r1, #1
 80197b6:	e7c1      	b.n	801973c <_strtod_l+0x174>
 80197b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197ba:	1c5a      	adds	r2, r3, #1
 80197bc:	9211      	str	r2, [sp, #68]	; 0x44
 80197be:	785a      	ldrb	r2, [r3, #1]
 80197c0:	3001      	adds	r0, #1
 80197c2:	2a30      	cmp	r2, #48	; 0x30
 80197c4:	d0f8      	beq.n	80197b8 <_strtod_l+0x1f0>
 80197c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80197ca:	2b08      	cmp	r3, #8
 80197cc:	f200 8495 	bhi.w	801a0fa <_strtod_l+0xb32>
 80197d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80197d2:	9309      	str	r3, [sp, #36]	; 0x24
 80197d4:	4683      	mov	fp, r0
 80197d6:	2000      	movs	r0, #0
 80197d8:	4603      	mov	r3, r0
 80197da:	3a30      	subs	r2, #48	; 0x30
 80197dc:	f100 0101 	add.w	r1, r0, #1
 80197e0:	d012      	beq.n	8019808 <_strtod_l+0x240>
 80197e2:	448b      	add	fp, r1
 80197e4:	eb00 0c03 	add.w	ip, r0, r3
 80197e8:	4619      	mov	r1, r3
 80197ea:	250a      	movs	r5, #10
 80197ec:	4561      	cmp	r1, ip
 80197ee:	d113      	bne.n	8019818 <_strtod_l+0x250>
 80197f0:	1819      	adds	r1, r3, r0
 80197f2:	2908      	cmp	r1, #8
 80197f4:	f103 0301 	add.w	r3, r3, #1
 80197f8:	4403      	add	r3, r0
 80197fa:	dc1b      	bgt.n	8019834 <_strtod_l+0x26c>
 80197fc:	9807      	ldr	r0, [sp, #28]
 80197fe:	210a      	movs	r1, #10
 8019800:	fb01 2200 	mla	r2, r1, r0, r2
 8019804:	9207      	str	r2, [sp, #28]
 8019806:	2100      	movs	r1, #0
 8019808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801980a:	1c50      	adds	r0, r2, #1
 801980c:	9011      	str	r0, [sp, #68]	; 0x44
 801980e:	7852      	ldrb	r2, [r2, #1]
 8019810:	4608      	mov	r0, r1
 8019812:	e7cb      	b.n	80197ac <_strtod_l+0x1e4>
 8019814:	4630      	mov	r0, r6
 8019816:	e7d4      	b.n	80197c2 <_strtod_l+0x1fa>
 8019818:	2908      	cmp	r1, #8
 801981a:	f101 0101 	add.w	r1, r1, #1
 801981e:	dc03      	bgt.n	8019828 <_strtod_l+0x260>
 8019820:	9f07      	ldr	r7, [sp, #28]
 8019822:	436f      	muls	r7, r5
 8019824:	9707      	str	r7, [sp, #28]
 8019826:	e7e1      	b.n	80197ec <_strtod_l+0x224>
 8019828:	2910      	cmp	r1, #16
 801982a:	bfde      	ittt	le
 801982c:	9f05      	ldrle	r7, [sp, #20]
 801982e:	436f      	mulle	r7, r5
 8019830:	9705      	strle	r7, [sp, #20]
 8019832:	e7db      	b.n	80197ec <_strtod_l+0x224>
 8019834:	2b10      	cmp	r3, #16
 8019836:	bfdf      	itttt	le
 8019838:	9805      	ldrle	r0, [sp, #20]
 801983a:	210a      	movle	r1, #10
 801983c:	fb01 2200 	mlale	r2, r1, r0, r2
 8019840:	9205      	strle	r2, [sp, #20]
 8019842:	e7e0      	b.n	8019806 <_strtod_l+0x23e>
 8019844:	f04f 0b00 	mov.w	fp, #0
 8019848:	2101      	movs	r1, #1
 801984a:	e77c      	b.n	8019746 <_strtod_l+0x17e>
 801984c:	f04f 0e00 	mov.w	lr, #0
 8019850:	f10a 0202 	add.w	r2, sl, #2
 8019854:	9211      	str	r2, [sp, #68]	; 0x44
 8019856:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801985a:	e785      	b.n	8019768 <_strtod_l+0x1a0>
 801985c:	f04f 0e01 	mov.w	lr, #1
 8019860:	e7f6      	b.n	8019850 <_strtod_l+0x288>
 8019862:	bf00      	nop
 8019864:	0801b818 	.word	0x0801b818
 8019868:	0801b814 	.word	0x0801b814
 801986c:	7ff00000 	.word	0x7ff00000
 8019870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019872:	1c55      	adds	r5, r2, #1
 8019874:	9511      	str	r5, [sp, #68]	; 0x44
 8019876:	7852      	ldrb	r2, [r2, #1]
 8019878:	2a30      	cmp	r2, #48	; 0x30
 801987a:	d0f9      	beq.n	8019870 <_strtod_l+0x2a8>
 801987c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019880:	2d08      	cmp	r5, #8
 8019882:	f63f af78 	bhi.w	8019776 <_strtod_l+0x1ae>
 8019886:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801988a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801988c:	920a      	str	r2, [sp, #40]	; 0x28
 801988e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019890:	1c55      	adds	r5, r2, #1
 8019892:	9511      	str	r5, [sp, #68]	; 0x44
 8019894:	7852      	ldrb	r2, [r2, #1]
 8019896:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801989a:	2f09      	cmp	r7, #9
 801989c:	d937      	bls.n	801990e <_strtod_l+0x346>
 801989e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80198a0:	1bed      	subs	r5, r5, r7
 80198a2:	2d08      	cmp	r5, #8
 80198a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80198a8:	dc02      	bgt.n	80198b0 <_strtod_l+0x2e8>
 80198aa:	4565      	cmp	r5, ip
 80198ac:	bfa8      	it	ge
 80198ae:	4665      	movge	r5, ip
 80198b0:	f1be 0f00 	cmp.w	lr, #0
 80198b4:	d000      	beq.n	80198b8 <_strtod_l+0x2f0>
 80198b6:	426d      	negs	r5, r5
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d14d      	bne.n	8019958 <_strtod_l+0x390>
 80198bc:	9b06      	ldr	r3, [sp, #24]
 80198be:	4303      	orrs	r3, r0
 80198c0:	f47f aebd 	bne.w	801963e <_strtod_l+0x76>
 80198c4:	2900      	cmp	r1, #0
 80198c6:	f47f aed6 	bne.w	8019676 <_strtod_l+0xae>
 80198ca:	2a69      	cmp	r2, #105	; 0x69
 80198cc:	d027      	beq.n	801991e <_strtod_l+0x356>
 80198ce:	dc24      	bgt.n	801991a <_strtod_l+0x352>
 80198d0:	2a49      	cmp	r2, #73	; 0x49
 80198d2:	d024      	beq.n	801991e <_strtod_l+0x356>
 80198d4:	2a4e      	cmp	r2, #78	; 0x4e
 80198d6:	f47f aece 	bne.w	8019676 <_strtod_l+0xae>
 80198da:	4995      	ldr	r1, [pc, #596]	; (8019b30 <_strtod_l+0x568>)
 80198dc:	a811      	add	r0, sp, #68	; 0x44
 80198de:	f001 f9d7 	bl	801ac90 <__match>
 80198e2:	2800      	cmp	r0, #0
 80198e4:	f43f aec7 	beq.w	8019676 <_strtod_l+0xae>
 80198e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198ea:	781b      	ldrb	r3, [r3, #0]
 80198ec:	2b28      	cmp	r3, #40	; 0x28
 80198ee:	d12d      	bne.n	801994c <_strtod_l+0x384>
 80198f0:	4990      	ldr	r1, [pc, #576]	; (8019b34 <_strtod_l+0x56c>)
 80198f2:	aa14      	add	r2, sp, #80	; 0x50
 80198f4:	a811      	add	r0, sp, #68	; 0x44
 80198f6:	f001 f9df 	bl	801acb8 <__hexnan>
 80198fa:	2805      	cmp	r0, #5
 80198fc:	d126      	bne.n	801994c <_strtod_l+0x384>
 80198fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019900:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019904:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019908:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801990c:	e697      	b.n	801963e <_strtod_l+0x76>
 801990e:	250a      	movs	r5, #10
 8019910:	fb05 2c0c 	mla	ip, r5, ip, r2
 8019914:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8019918:	e7b9      	b.n	801988e <_strtod_l+0x2c6>
 801991a:	2a6e      	cmp	r2, #110	; 0x6e
 801991c:	e7db      	b.n	80198d6 <_strtod_l+0x30e>
 801991e:	4986      	ldr	r1, [pc, #536]	; (8019b38 <_strtod_l+0x570>)
 8019920:	a811      	add	r0, sp, #68	; 0x44
 8019922:	f001 f9b5 	bl	801ac90 <__match>
 8019926:	2800      	cmp	r0, #0
 8019928:	f43f aea5 	beq.w	8019676 <_strtod_l+0xae>
 801992c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801992e:	4983      	ldr	r1, [pc, #524]	; (8019b3c <_strtod_l+0x574>)
 8019930:	3b01      	subs	r3, #1
 8019932:	a811      	add	r0, sp, #68	; 0x44
 8019934:	9311      	str	r3, [sp, #68]	; 0x44
 8019936:	f001 f9ab 	bl	801ac90 <__match>
 801993a:	b910      	cbnz	r0, 8019942 <_strtod_l+0x37a>
 801993c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801993e:	3301      	adds	r3, #1
 8019940:	9311      	str	r3, [sp, #68]	; 0x44
 8019942:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8019b50 <_strtod_l+0x588>
 8019946:	f04f 0800 	mov.w	r8, #0
 801994a:	e678      	b.n	801963e <_strtod_l+0x76>
 801994c:	487c      	ldr	r0, [pc, #496]	; (8019b40 <_strtod_l+0x578>)
 801994e:	f000 febb 	bl	801a6c8 <nan>
 8019952:	ec59 8b10 	vmov	r8, r9, d0
 8019956:	e672      	b.n	801963e <_strtod_l+0x76>
 8019958:	eddd 7a07 	vldr	s15, [sp, #28]
 801995c:	eba5 020b 	sub.w	r2, r5, fp
 8019960:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019964:	2e00      	cmp	r6, #0
 8019966:	bf08      	it	eq
 8019968:	461e      	moveq	r6, r3
 801996a:	2b10      	cmp	r3, #16
 801996c:	9206      	str	r2, [sp, #24]
 801996e:	461a      	mov	r2, r3
 8019970:	bfa8      	it	ge
 8019972:	2210      	movge	r2, #16
 8019974:	2b09      	cmp	r3, #9
 8019976:	ec59 8b17 	vmov	r8, r9, d7
 801997a:	dd0c      	ble.n	8019996 <_strtod_l+0x3ce>
 801997c:	4971      	ldr	r1, [pc, #452]	; (8019b44 <_strtod_l+0x57c>)
 801997e:	eddd 6a05 	vldr	s13, [sp, #20]
 8019982:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019986:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801998a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801998e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019992:	ec59 8b16 	vmov	r8, r9, d6
 8019996:	2b0f      	cmp	r3, #15
 8019998:	dc37      	bgt.n	8019a0a <_strtod_l+0x442>
 801999a:	9906      	ldr	r1, [sp, #24]
 801999c:	2900      	cmp	r1, #0
 801999e:	f43f ae4e 	beq.w	801963e <_strtod_l+0x76>
 80199a2:	dd23      	ble.n	80199ec <_strtod_l+0x424>
 80199a4:	2916      	cmp	r1, #22
 80199a6:	dc0b      	bgt.n	80199c0 <_strtod_l+0x3f8>
 80199a8:	4b66      	ldr	r3, [pc, #408]	; (8019b44 <_strtod_l+0x57c>)
 80199aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80199ae:	ed93 7b00 	vldr	d7, [r3]
 80199b2:	ec49 8b16 	vmov	d6, r8, r9
 80199b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80199ba:	ec59 8b17 	vmov	r8, r9, d7
 80199be:	e63e      	b.n	801963e <_strtod_l+0x76>
 80199c0:	9806      	ldr	r0, [sp, #24]
 80199c2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80199c6:	4281      	cmp	r1, r0
 80199c8:	db1f      	blt.n	8019a0a <_strtod_l+0x442>
 80199ca:	4a5e      	ldr	r2, [pc, #376]	; (8019b44 <_strtod_l+0x57c>)
 80199cc:	f1c3 030f 	rsb	r3, r3, #15
 80199d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80199d4:	ed91 7b00 	vldr	d7, [r1]
 80199d8:	ec49 8b16 	vmov	d6, r8, r9
 80199dc:	1ac3      	subs	r3, r0, r3
 80199de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80199e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80199e6:	ed92 6b00 	vldr	d6, [r2]
 80199ea:	e7e4      	b.n	80199b6 <_strtod_l+0x3ee>
 80199ec:	9906      	ldr	r1, [sp, #24]
 80199ee:	3116      	adds	r1, #22
 80199f0:	db0b      	blt.n	8019a0a <_strtod_l+0x442>
 80199f2:	4b54      	ldr	r3, [pc, #336]	; (8019b44 <_strtod_l+0x57c>)
 80199f4:	ebab 0505 	sub.w	r5, fp, r5
 80199f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80199fc:	ed95 7b00 	vldr	d7, [r5]
 8019a00:	ec49 8b16 	vmov	d6, r8, r9
 8019a04:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019a08:	e7d7      	b.n	80199ba <_strtod_l+0x3f2>
 8019a0a:	9906      	ldr	r1, [sp, #24]
 8019a0c:	1a9a      	subs	r2, r3, r2
 8019a0e:	440a      	add	r2, r1
 8019a10:	2a00      	cmp	r2, #0
 8019a12:	dd6e      	ble.n	8019af2 <_strtod_l+0x52a>
 8019a14:	f012 000f 	ands.w	r0, r2, #15
 8019a18:	d00a      	beq.n	8019a30 <_strtod_l+0x468>
 8019a1a:	494a      	ldr	r1, [pc, #296]	; (8019b44 <_strtod_l+0x57c>)
 8019a1c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019a20:	ed91 7b00 	vldr	d7, [r1]
 8019a24:	ec49 8b16 	vmov	d6, r8, r9
 8019a28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019a2c:	ec59 8b17 	vmov	r8, r9, d7
 8019a30:	f032 020f 	bics.w	r2, r2, #15
 8019a34:	d04e      	beq.n	8019ad4 <_strtod_l+0x50c>
 8019a36:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8019a3a:	dd22      	ble.n	8019a82 <_strtod_l+0x4ba>
 8019a3c:	2500      	movs	r5, #0
 8019a3e:	462e      	mov	r6, r5
 8019a40:	9507      	str	r5, [sp, #28]
 8019a42:	462f      	mov	r7, r5
 8019a44:	2322      	movs	r3, #34	; 0x22
 8019a46:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019b50 <_strtod_l+0x588>
 8019a4a:	6023      	str	r3, [r4, #0]
 8019a4c:	f04f 0800 	mov.w	r8, #0
 8019a50:	9b07      	ldr	r3, [sp, #28]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	f43f adf3 	beq.w	801963e <_strtod_l+0x76>
 8019a58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	f7ff f930 	bl	8018cc0 <_Bfree>
 8019a60:	4639      	mov	r1, r7
 8019a62:	4620      	mov	r0, r4
 8019a64:	f7ff f92c 	bl	8018cc0 <_Bfree>
 8019a68:	4631      	mov	r1, r6
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	f7ff f928 	bl	8018cc0 <_Bfree>
 8019a70:	9907      	ldr	r1, [sp, #28]
 8019a72:	4620      	mov	r0, r4
 8019a74:	f7ff f924 	bl	8018cc0 <_Bfree>
 8019a78:	4629      	mov	r1, r5
 8019a7a:	4620      	mov	r0, r4
 8019a7c:	f7ff f920 	bl	8018cc0 <_Bfree>
 8019a80:	e5dd      	b.n	801963e <_strtod_l+0x76>
 8019a82:	2000      	movs	r0, #0
 8019a84:	ec49 8b17 	vmov	d7, r8, r9
 8019a88:	4f2f      	ldr	r7, [pc, #188]	; (8019b48 <_strtod_l+0x580>)
 8019a8a:	1112      	asrs	r2, r2, #4
 8019a8c:	4601      	mov	r1, r0
 8019a8e:	2a01      	cmp	r2, #1
 8019a90:	dc23      	bgt.n	8019ada <_strtod_l+0x512>
 8019a92:	b108      	cbz	r0, 8019a98 <_strtod_l+0x4d0>
 8019a94:	ec59 8b17 	vmov	r8, r9, d7
 8019a98:	4a2b      	ldr	r2, [pc, #172]	; (8019b48 <_strtod_l+0x580>)
 8019a9a:	482c      	ldr	r0, [pc, #176]	; (8019b4c <_strtod_l+0x584>)
 8019a9c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019aa0:	ed92 7b00 	vldr	d7, [r2]
 8019aa4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019aa8:	ec49 8b16 	vmov	d6, r8, r9
 8019aac:	4a28      	ldr	r2, [pc, #160]	; (8019b50 <_strtod_l+0x588>)
 8019aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019ab2:	ee17 1a90 	vmov	r1, s15
 8019ab6:	400a      	ands	r2, r1
 8019ab8:	4282      	cmp	r2, r0
 8019aba:	ec59 8b17 	vmov	r8, r9, d7
 8019abe:	d8bd      	bhi.n	8019a3c <_strtod_l+0x474>
 8019ac0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8019ac4:	4282      	cmp	r2, r0
 8019ac6:	bf86      	itte	hi
 8019ac8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8019b54 <_strtod_l+0x58c>
 8019acc:	f04f 38ff 	movhi.w	r8, #4294967295
 8019ad0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	9205      	str	r2, [sp, #20]
 8019ad8:	e076      	b.n	8019bc8 <_strtod_l+0x600>
 8019ada:	f012 0f01 	tst.w	r2, #1
 8019ade:	d004      	beq.n	8019aea <_strtod_l+0x522>
 8019ae0:	ed97 6b00 	vldr	d6, [r7]
 8019ae4:	2001      	movs	r0, #1
 8019ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019aea:	3101      	adds	r1, #1
 8019aec:	1052      	asrs	r2, r2, #1
 8019aee:	3708      	adds	r7, #8
 8019af0:	e7cd      	b.n	8019a8e <_strtod_l+0x4c6>
 8019af2:	d0ef      	beq.n	8019ad4 <_strtod_l+0x50c>
 8019af4:	4252      	negs	r2, r2
 8019af6:	f012 000f 	ands.w	r0, r2, #15
 8019afa:	d00a      	beq.n	8019b12 <_strtod_l+0x54a>
 8019afc:	4911      	ldr	r1, [pc, #68]	; (8019b44 <_strtod_l+0x57c>)
 8019afe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019b02:	ed91 7b00 	vldr	d7, [r1]
 8019b06:	ec49 8b16 	vmov	d6, r8, r9
 8019b0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019b0e:	ec59 8b17 	vmov	r8, r9, d7
 8019b12:	1112      	asrs	r2, r2, #4
 8019b14:	d0de      	beq.n	8019ad4 <_strtod_l+0x50c>
 8019b16:	2a1f      	cmp	r2, #31
 8019b18:	dd1e      	ble.n	8019b58 <_strtod_l+0x590>
 8019b1a:	2500      	movs	r5, #0
 8019b1c:	462e      	mov	r6, r5
 8019b1e:	9507      	str	r5, [sp, #28]
 8019b20:	462f      	mov	r7, r5
 8019b22:	2322      	movs	r3, #34	; 0x22
 8019b24:	f04f 0800 	mov.w	r8, #0
 8019b28:	f04f 0900 	mov.w	r9, #0
 8019b2c:	6023      	str	r3, [r4, #0]
 8019b2e:	e78f      	b.n	8019a50 <_strtod_l+0x488>
 8019b30:	0801b605 	.word	0x0801b605
 8019b34:	0801b82c 	.word	0x0801b82c
 8019b38:	0801b5fd 	.word	0x0801b5fd
 8019b3c:	0801b634 	.word	0x0801b634
 8019b40:	0801b9bd 	.word	0x0801b9bd
 8019b44:	0801b740 	.word	0x0801b740
 8019b48:	0801b718 	.word	0x0801b718
 8019b4c:	7ca00000 	.word	0x7ca00000
 8019b50:	7ff00000 	.word	0x7ff00000
 8019b54:	7fefffff 	.word	0x7fefffff
 8019b58:	f012 0110 	ands.w	r1, r2, #16
 8019b5c:	bf18      	it	ne
 8019b5e:	216a      	movne	r1, #106	; 0x6a
 8019b60:	9105      	str	r1, [sp, #20]
 8019b62:	ec49 8b17 	vmov	d7, r8, r9
 8019b66:	49be      	ldr	r1, [pc, #760]	; (8019e60 <_strtod_l+0x898>)
 8019b68:	2000      	movs	r0, #0
 8019b6a:	07d7      	lsls	r7, r2, #31
 8019b6c:	d504      	bpl.n	8019b78 <_strtod_l+0x5b0>
 8019b6e:	ed91 6b00 	vldr	d6, [r1]
 8019b72:	2001      	movs	r0, #1
 8019b74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b78:	1052      	asrs	r2, r2, #1
 8019b7a:	f101 0108 	add.w	r1, r1, #8
 8019b7e:	d1f4      	bne.n	8019b6a <_strtod_l+0x5a2>
 8019b80:	b108      	cbz	r0, 8019b86 <_strtod_l+0x5be>
 8019b82:	ec59 8b17 	vmov	r8, r9, d7
 8019b86:	9a05      	ldr	r2, [sp, #20]
 8019b88:	b1ba      	cbz	r2, 8019bba <_strtod_l+0x5f2>
 8019b8a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019b8e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8019b92:	2a00      	cmp	r2, #0
 8019b94:	4648      	mov	r0, r9
 8019b96:	dd10      	ble.n	8019bba <_strtod_l+0x5f2>
 8019b98:	2a1f      	cmp	r2, #31
 8019b9a:	f340 812c 	ble.w	8019df6 <_strtod_l+0x82e>
 8019b9e:	2a34      	cmp	r2, #52	; 0x34
 8019ba0:	bfde      	ittt	le
 8019ba2:	f04f 32ff 	movle.w	r2, #4294967295
 8019ba6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8019baa:	408a      	lslle	r2, r1
 8019bac:	f04f 0800 	mov.w	r8, #0
 8019bb0:	bfcc      	ite	gt
 8019bb2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019bb6:	ea02 0900 	andle.w	r9, r2, r0
 8019bba:	ec49 8b17 	vmov	d7, r8, r9
 8019bbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc6:	d0a8      	beq.n	8019b1a <_strtod_l+0x552>
 8019bc8:	9a07      	ldr	r2, [sp, #28]
 8019bca:	9200      	str	r2, [sp, #0]
 8019bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019bce:	4632      	mov	r2, r6
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	f7ff f8dd 	bl	8018d90 <__s2b>
 8019bd6:	9007      	str	r0, [sp, #28]
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	f43f af2f 	beq.w	8019a3c <_strtod_l+0x474>
 8019bde:	9a06      	ldr	r2, [sp, #24]
 8019be0:	2a00      	cmp	r2, #0
 8019be2:	ebab 0305 	sub.w	r3, fp, r5
 8019be6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8019e40 <_strtod_l+0x878>
 8019bea:	bfa8      	it	ge
 8019bec:	2300      	movge	r3, #0
 8019bee:	ed9f ab96 	vldr	d10, [pc, #600]	; 8019e48 <_strtod_l+0x880>
 8019bf2:	ed9f bb97 	vldr	d11, [pc, #604]	; 8019e50 <_strtod_l+0x888>
 8019bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bf8:	2500      	movs	r5, #0
 8019bfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8019c00:	462e      	mov	r6, r5
 8019c02:	9b07      	ldr	r3, [sp, #28]
 8019c04:	4620      	mov	r0, r4
 8019c06:	6859      	ldr	r1, [r3, #4]
 8019c08:	f7ff f81a 	bl	8018c40 <_Balloc>
 8019c0c:	4607      	mov	r7, r0
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	f43f af18 	beq.w	8019a44 <_strtod_l+0x47c>
 8019c14:	9b07      	ldr	r3, [sp, #28]
 8019c16:	691a      	ldr	r2, [r3, #16]
 8019c18:	3202      	adds	r2, #2
 8019c1a:	f103 010c 	add.w	r1, r3, #12
 8019c1e:	0092      	lsls	r2, r2, #2
 8019c20:	300c      	adds	r0, #12
 8019c22:	f7fe f904 	bl	8017e2e <memcpy>
 8019c26:	ec49 8b10 	vmov	d0, r8, r9
 8019c2a:	aa14      	add	r2, sp, #80	; 0x50
 8019c2c:	a913      	add	r1, sp, #76	; 0x4c
 8019c2e:	4620      	mov	r0, r4
 8019c30:	f7ff fbe2 	bl	80193f8 <__d2b>
 8019c34:	ec49 8b18 	vmov	d8, r8, r9
 8019c38:	9012      	str	r0, [sp, #72]	; 0x48
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	f43f af02 	beq.w	8019a44 <_strtod_l+0x47c>
 8019c40:	2101      	movs	r1, #1
 8019c42:	4620      	mov	r0, r4
 8019c44:	f7ff f93c 	bl	8018ec0 <__i2b>
 8019c48:	4606      	mov	r6, r0
 8019c4a:	2800      	cmp	r0, #0
 8019c4c:	f43f aefa 	beq.w	8019a44 <_strtod_l+0x47c>
 8019c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019c52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	bfab      	itete	ge
 8019c58:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8019c5a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8019c5c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8019c60:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019c64:	bfac      	ite	ge
 8019c66:	eb03 0b02 	addge.w	fp, r3, r2
 8019c6a:	eba2 0a03 	sublt.w	sl, r2, r3
 8019c6e:	9a05      	ldr	r2, [sp, #20]
 8019c70:	1a9b      	subs	r3, r3, r2
 8019c72:	440b      	add	r3, r1
 8019c74:	4a7b      	ldr	r2, [pc, #492]	; (8019e64 <_strtod_l+0x89c>)
 8019c76:	3b01      	subs	r3, #1
 8019c78:	4293      	cmp	r3, r2
 8019c7a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8019c7e:	f280 80cd 	bge.w	8019e1c <_strtod_l+0x854>
 8019c82:	1ad2      	subs	r2, r2, r3
 8019c84:	2a1f      	cmp	r2, #31
 8019c86:	eba1 0102 	sub.w	r1, r1, r2
 8019c8a:	f04f 0001 	mov.w	r0, #1
 8019c8e:	f300 80b9 	bgt.w	8019e04 <_strtod_l+0x83c>
 8019c92:	fa00 f302 	lsl.w	r3, r0, r2
 8019c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c98:	2300      	movs	r3, #0
 8019c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8019c9c:	eb0b 0301 	add.w	r3, fp, r1
 8019ca0:	9a05      	ldr	r2, [sp, #20]
 8019ca2:	459b      	cmp	fp, r3
 8019ca4:	448a      	add	sl, r1
 8019ca6:	4492      	add	sl, r2
 8019ca8:	465a      	mov	r2, fp
 8019caa:	bfa8      	it	ge
 8019cac:	461a      	movge	r2, r3
 8019cae:	4552      	cmp	r2, sl
 8019cb0:	bfa8      	it	ge
 8019cb2:	4652      	movge	r2, sl
 8019cb4:	2a00      	cmp	r2, #0
 8019cb6:	bfc2      	ittt	gt
 8019cb8:	1a9b      	subgt	r3, r3, r2
 8019cba:	ebaa 0a02 	subgt.w	sl, sl, r2
 8019cbe:	ebab 0b02 	subgt.w	fp, fp, r2
 8019cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cc4:	2a00      	cmp	r2, #0
 8019cc6:	dd18      	ble.n	8019cfa <_strtod_l+0x732>
 8019cc8:	4631      	mov	r1, r6
 8019cca:	4620      	mov	r0, r4
 8019ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8019cce:	f7ff f9b7 	bl	8019040 <__pow5mult>
 8019cd2:	4606      	mov	r6, r0
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	f43f aeb5 	beq.w	8019a44 <_strtod_l+0x47c>
 8019cda:	4601      	mov	r1, r0
 8019cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019cde:	4620      	mov	r0, r4
 8019ce0:	f7ff f904 	bl	8018eec <__multiply>
 8019ce4:	900e      	str	r0, [sp, #56]	; 0x38
 8019ce6:	2800      	cmp	r0, #0
 8019ce8:	f43f aeac 	beq.w	8019a44 <_strtod_l+0x47c>
 8019cec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f7fe ffe6 	bl	8018cc0 <_Bfree>
 8019cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cf8:	9212      	str	r2, [sp, #72]	; 0x48
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	f300 8093 	bgt.w	8019e26 <_strtod_l+0x85e>
 8019d00:	9b06      	ldr	r3, [sp, #24]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	dd08      	ble.n	8019d18 <_strtod_l+0x750>
 8019d06:	4639      	mov	r1, r7
 8019d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	f7ff f998 	bl	8019040 <__pow5mult>
 8019d10:	4607      	mov	r7, r0
 8019d12:	2800      	cmp	r0, #0
 8019d14:	f43f ae96 	beq.w	8019a44 <_strtod_l+0x47c>
 8019d18:	f1ba 0f00 	cmp.w	sl, #0
 8019d1c:	dd08      	ble.n	8019d30 <_strtod_l+0x768>
 8019d1e:	4639      	mov	r1, r7
 8019d20:	4652      	mov	r2, sl
 8019d22:	4620      	mov	r0, r4
 8019d24:	f7ff f9e6 	bl	80190f4 <__lshift>
 8019d28:	4607      	mov	r7, r0
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	f43f ae8a 	beq.w	8019a44 <_strtod_l+0x47c>
 8019d30:	f1bb 0f00 	cmp.w	fp, #0
 8019d34:	dd08      	ble.n	8019d48 <_strtod_l+0x780>
 8019d36:	4631      	mov	r1, r6
 8019d38:	465a      	mov	r2, fp
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	f7ff f9da 	bl	80190f4 <__lshift>
 8019d40:	4606      	mov	r6, r0
 8019d42:	2800      	cmp	r0, #0
 8019d44:	f43f ae7e 	beq.w	8019a44 <_strtod_l+0x47c>
 8019d48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019d4a:	463a      	mov	r2, r7
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	f7ff fa59 	bl	8019204 <__mdiff>
 8019d52:	4605      	mov	r5, r0
 8019d54:	2800      	cmp	r0, #0
 8019d56:	f43f ae75 	beq.w	8019a44 <_strtod_l+0x47c>
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019d60:	60c3      	str	r3, [r0, #12]
 8019d62:	4631      	mov	r1, r6
 8019d64:	f7ff fa32 	bl	80191cc <__mcmp>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	da7f      	bge.n	8019e6c <_strtod_l+0x8a4>
 8019d6c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8019d70:	f040 80a5 	bne.w	8019ebe <_strtod_l+0x8f6>
 8019d74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	f040 80a0 	bne.w	8019ebe <_strtod_l+0x8f6>
 8019d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019d82:	0d1b      	lsrs	r3, r3, #20
 8019d84:	051b      	lsls	r3, r3, #20
 8019d86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019d8a:	f240 8098 	bls.w	8019ebe <_strtod_l+0x8f6>
 8019d8e:	696b      	ldr	r3, [r5, #20]
 8019d90:	b91b      	cbnz	r3, 8019d9a <_strtod_l+0x7d2>
 8019d92:	692b      	ldr	r3, [r5, #16]
 8019d94:	2b01      	cmp	r3, #1
 8019d96:	f340 8092 	ble.w	8019ebe <_strtod_l+0x8f6>
 8019d9a:	4629      	mov	r1, r5
 8019d9c:	2201      	movs	r2, #1
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f7ff f9a8 	bl	80190f4 <__lshift>
 8019da4:	4631      	mov	r1, r6
 8019da6:	4605      	mov	r5, r0
 8019da8:	f7ff fa10 	bl	80191cc <__mcmp>
 8019dac:	2800      	cmp	r0, #0
 8019dae:	f340 8086 	ble.w	8019ebe <_strtod_l+0x8f6>
 8019db2:	9905      	ldr	r1, [sp, #20]
 8019db4:	4a2c      	ldr	r2, [pc, #176]	; (8019e68 <_strtod_l+0x8a0>)
 8019db6:	464b      	mov	r3, r9
 8019db8:	2900      	cmp	r1, #0
 8019dba:	f000 809f 	beq.w	8019efc <_strtod_l+0x934>
 8019dbe:	ea02 0109 	and.w	r1, r2, r9
 8019dc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019dc6:	f300 8099 	bgt.w	8019efc <_strtod_l+0x934>
 8019dca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019dce:	f77f aea8 	ble.w	8019b22 <_strtod_l+0x55a>
 8019dd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8019e58 <_strtod_l+0x890>
 8019dd6:	ec49 8b16 	vmov	d6, r8, r9
 8019dda:	4b23      	ldr	r3, [pc, #140]	; (8019e68 <_strtod_l+0x8a0>)
 8019ddc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019de0:	ee17 2a90 	vmov	r2, s15
 8019de4:	4013      	ands	r3, r2
 8019de6:	ec59 8b17 	vmov	r8, r9, d7
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	f47f ae34 	bne.w	8019a58 <_strtod_l+0x490>
 8019df0:	2322      	movs	r3, #34	; 0x22
 8019df2:	6023      	str	r3, [r4, #0]
 8019df4:	e630      	b.n	8019a58 <_strtod_l+0x490>
 8019df6:	f04f 31ff 	mov.w	r1, #4294967295
 8019dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8019dfe:	ea02 0808 	and.w	r8, r2, r8
 8019e02:	e6da      	b.n	8019bba <_strtod_l+0x5f2>
 8019e04:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019e08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019e0c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8019e10:	33e2      	adds	r3, #226	; 0xe2
 8019e12:	fa00 f303 	lsl.w	r3, r0, r3
 8019e16:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8019e1a:	e73f      	b.n	8019c9c <_strtod_l+0x6d4>
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019e24:	e73a      	b.n	8019c9c <_strtod_l+0x6d4>
 8019e26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019e28:	461a      	mov	r2, r3
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	f7ff f962 	bl	80190f4 <__lshift>
 8019e30:	9012      	str	r0, [sp, #72]	; 0x48
 8019e32:	2800      	cmp	r0, #0
 8019e34:	f47f af64 	bne.w	8019d00 <_strtod_l+0x738>
 8019e38:	e604      	b.n	8019a44 <_strtod_l+0x47c>
 8019e3a:	bf00      	nop
 8019e3c:	f3af 8000 	nop.w
 8019e40:	94a03595 	.word	0x94a03595
 8019e44:	3fcfffff 	.word	0x3fcfffff
 8019e48:	94a03595 	.word	0x94a03595
 8019e4c:	3fdfffff 	.word	0x3fdfffff
 8019e50:	35afe535 	.word	0x35afe535
 8019e54:	3fe00000 	.word	0x3fe00000
 8019e58:	00000000 	.word	0x00000000
 8019e5c:	39500000 	.word	0x39500000
 8019e60:	0801b840 	.word	0x0801b840
 8019e64:	fffffc02 	.word	0xfffffc02
 8019e68:	7ff00000 	.word	0x7ff00000
 8019e6c:	46cb      	mov	fp, r9
 8019e6e:	d15f      	bne.n	8019f30 <_strtod_l+0x968>
 8019e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019e74:	f1ba 0f00 	cmp.w	sl, #0
 8019e78:	d02a      	beq.n	8019ed0 <_strtod_l+0x908>
 8019e7a:	4aa7      	ldr	r2, [pc, #668]	; (801a118 <_strtod_l+0xb50>)
 8019e7c:	4293      	cmp	r3, r2
 8019e7e:	d12b      	bne.n	8019ed8 <_strtod_l+0x910>
 8019e80:	9b05      	ldr	r3, [sp, #20]
 8019e82:	4642      	mov	r2, r8
 8019e84:	b1fb      	cbz	r3, 8019ec6 <_strtod_l+0x8fe>
 8019e86:	4ba5      	ldr	r3, [pc, #660]	; (801a11c <_strtod_l+0xb54>)
 8019e88:	ea09 0303 	and.w	r3, r9, r3
 8019e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019e90:	f04f 31ff 	mov.w	r1, #4294967295
 8019e94:	d81a      	bhi.n	8019ecc <_strtod_l+0x904>
 8019e96:	0d1b      	lsrs	r3, r3, #20
 8019e98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d119      	bne.n	8019ed8 <_strtod_l+0x910>
 8019ea4:	4b9e      	ldr	r3, [pc, #632]	; (801a120 <_strtod_l+0xb58>)
 8019ea6:	459b      	cmp	fp, r3
 8019ea8:	d102      	bne.n	8019eb0 <_strtod_l+0x8e8>
 8019eaa:	3201      	adds	r2, #1
 8019eac:	f43f adca 	beq.w	8019a44 <_strtod_l+0x47c>
 8019eb0:	4b9a      	ldr	r3, [pc, #616]	; (801a11c <_strtod_l+0xb54>)
 8019eb2:	ea0b 0303 	and.w	r3, fp, r3
 8019eb6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019eba:	f04f 0800 	mov.w	r8, #0
 8019ebe:	9b05      	ldr	r3, [sp, #20]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d186      	bne.n	8019dd2 <_strtod_l+0x80a>
 8019ec4:	e5c8      	b.n	8019a58 <_strtod_l+0x490>
 8019ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8019eca:	e7e9      	b.n	8019ea0 <_strtod_l+0x8d8>
 8019ecc:	460b      	mov	r3, r1
 8019ece:	e7e7      	b.n	8019ea0 <_strtod_l+0x8d8>
 8019ed0:	ea53 0308 	orrs.w	r3, r3, r8
 8019ed4:	f43f af6d 	beq.w	8019db2 <_strtod_l+0x7ea>
 8019ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eda:	b1cb      	cbz	r3, 8019f10 <_strtod_l+0x948>
 8019edc:	ea13 0f0b 	tst.w	r3, fp
 8019ee0:	d0ed      	beq.n	8019ebe <_strtod_l+0x8f6>
 8019ee2:	9a05      	ldr	r2, [sp, #20]
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	f1ba 0f00 	cmp.w	sl, #0
 8019eec:	d014      	beq.n	8019f18 <_strtod_l+0x950>
 8019eee:	f7ff fb51 	bl	8019594 <sulp>
 8019ef2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8019ef6:	ec59 8b17 	vmov	r8, r9, d7
 8019efa:	e7e0      	b.n	8019ebe <_strtod_l+0x8f6>
 8019efc:	4013      	ands	r3, r2
 8019efe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019f02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019f06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019f0a:	f04f 38ff 	mov.w	r8, #4294967295
 8019f0e:	e7d6      	b.n	8019ebe <_strtod_l+0x8f6>
 8019f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f12:	ea13 0f08 	tst.w	r3, r8
 8019f16:	e7e3      	b.n	8019ee0 <_strtod_l+0x918>
 8019f18:	f7ff fb3c 	bl	8019594 <sulp>
 8019f1c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8019f20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f28:	ec59 8b10 	vmov	r8, r9, d0
 8019f2c:	d1c7      	bne.n	8019ebe <_strtod_l+0x8f6>
 8019f2e:	e5f8      	b.n	8019b22 <_strtod_l+0x55a>
 8019f30:	4631      	mov	r1, r6
 8019f32:	4628      	mov	r0, r5
 8019f34:	f7ff faba 	bl	80194ac <__ratio>
 8019f38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8019f3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f44:	d85f      	bhi.n	801a006 <_strtod_l+0xa3e>
 8019f46:	f1ba 0f00 	cmp.w	sl, #0
 8019f4a:	d166      	bne.n	801a01a <_strtod_l+0xa52>
 8019f4c:	f1b8 0f00 	cmp.w	r8, #0
 8019f50:	d14d      	bne.n	8019fee <_strtod_l+0xa26>
 8019f52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019f56:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d162      	bne.n	801a024 <_strtod_l+0xa5c>
 8019f5e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8019f62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8019f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f6a:	d401      	bmi.n	8019f70 <_strtod_l+0x9a8>
 8019f6c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8019f70:	eeb1 cb4d 	vneg.f64	d12, d13
 8019f74:	4869      	ldr	r0, [pc, #420]	; (801a11c <_strtod_l+0xb54>)
 8019f76:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801a128 <_strtod_l+0xb60>
 8019f7a:	ea0b 0100 	and.w	r1, fp, r0
 8019f7e:	4561      	cmp	r1, ip
 8019f80:	ec53 2b1c 	vmov	r2, r3, d12
 8019f84:	d17a      	bne.n	801a07c <_strtod_l+0xab4>
 8019f86:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8019f8a:	ec49 8b10 	vmov	d0, r8, r9
 8019f8e:	910a      	str	r1, [sp, #40]	; 0x28
 8019f90:	f7ff f9c2 	bl	8019318 <__ulp>
 8019f94:	ec49 8b1e 	vmov	d14, r8, r9
 8019f98:	4860      	ldr	r0, [pc, #384]	; (801a11c <_strtod_l+0xb54>)
 8019f9a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8019f9e:	ee1e 3a90 	vmov	r3, s29
 8019fa2:	4a60      	ldr	r2, [pc, #384]	; (801a124 <_strtod_l+0xb5c>)
 8019fa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019fa6:	4018      	ands	r0, r3
 8019fa8:	4290      	cmp	r0, r2
 8019faa:	ec59 8b1e 	vmov	r8, r9, d14
 8019fae:	d93c      	bls.n	801a02a <_strtod_l+0xa62>
 8019fb0:	ee18 2a90 	vmov	r2, s17
 8019fb4:	4b5a      	ldr	r3, [pc, #360]	; (801a120 <_strtod_l+0xb58>)
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	d104      	bne.n	8019fc4 <_strtod_l+0x9fc>
 8019fba:	ee18 3a10 	vmov	r3, s16
 8019fbe:	3301      	adds	r3, #1
 8019fc0:	f43f ad40 	beq.w	8019a44 <_strtod_l+0x47c>
 8019fc4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801a120 <_strtod_l+0xb58>
 8019fc8:	f04f 38ff 	mov.w	r8, #4294967295
 8019fcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019fce:	4620      	mov	r0, r4
 8019fd0:	f7fe fe76 	bl	8018cc0 <_Bfree>
 8019fd4:	4639      	mov	r1, r7
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	f7fe fe72 	bl	8018cc0 <_Bfree>
 8019fdc:	4631      	mov	r1, r6
 8019fde:	4620      	mov	r0, r4
 8019fe0:	f7fe fe6e 	bl	8018cc0 <_Bfree>
 8019fe4:	4629      	mov	r1, r5
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	f7fe fe6a 	bl	8018cc0 <_Bfree>
 8019fec:	e609      	b.n	8019c02 <_strtod_l+0x63a>
 8019fee:	f1b8 0f01 	cmp.w	r8, #1
 8019ff2:	d103      	bne.n	8019ffc <_strtod_l+0xa34>
 8019ff4:	f1b9 0f00 	cmp.w	r9, #0
 8019ff8:	f43f ad93 	beq.w	8019b22 <_strtod_l+0x55a>
 8019ffc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a000:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a004:	e7b6      	b.n	8019f74 <_strtod_l+0x9ac>
 801a006:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a00a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a00e:	f1ba 0f00 	cmp.w	sl, #0
 801a012:	d0ad      	beq.n	8019f70 <_strtod_l+0x9a8>
 801a014:	eeb0 cb4d 	vmov.f64	d12, d13
 801a018:	e7ac      	b.n	8019f74 <_strtod_l+0x9ac>
 801a01a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801a01e:	eeb0 db4c 	vmov.f64	d13, d12
 801a022:	e7a7      	b.n	8019f74 <_strtod_l+0x9ac>
 801a024:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a028:	e7a4      	b.n	8019f74 <_strtod_l+0x9ac>
 801a02a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a02e:	9b05      	ldr	r3, [sp, #20]
 801a030:	46cb      	mov	fp, r9
 801a032:	2b00      	cmp	r3, #0
 801a034:	d1ca      	bne.n	8019fcc <_strtod_l+0xa04>
 801a036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a03a:	0d1b      	lsrs	r3, r3, #20
 801a03c:	051b      	lsls	r3, r3, #20
 801a03e:	4299      	cmp	r1, r3
 801a040:	d1c4      	bne.n	8019fcc <_strtod_l+0xa04>
 801a042:	ec51 0b1d 	vmov	r0, r1, d13
 801a046:	f7e6 fb8f 	bl	8000768 <__aeabi_d2lz>
 801a04a:	f7e6 fb47 	bl	80006dc <__aeabi_l2d>
 801a04e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801a052:	ec41 0b17 	vmov	d7, r0, r1
 801a056:	ea4b 0b08 	orr.w	fp, fp, r8
 801a05a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801a05e:	ee3d db47 	vsub.f64	d13, d13, d7
 801a062:	d03c      	beq.n	801a0de <_strtod_l+0xb16>
 801a064:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a06c:	f53f acf4 	bmi.w	8019a58 <_strtod_l+0x490>
 801a070:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a078:	dda8      	ble.n	8019fcc <_strtod_l+0xa04>
 801a07a:	e4ed      	b.n	8019a58 <_strtod_l+0x490>
 801a07c:	9805      	ldr	r0, [sp, #20]
 801a07e:	b1f0      	cbz	r0, 801a0be <_strtod_l+0xaf6>
 801a080:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a084:	d81b      	bhi.n	801a0be <_strtod_l+0xaf6>
 801a086:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a110 <_strtod_l+0xb48>
 801a08a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a092:	d811      	bhi.n	801a0b8 <_strtod_l+0xaf0>
 801a094:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a098:	ee1d 3a10 	vmov	r3, s26
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	bf38      	it	cc
 801a0a0:	2301      	movcc	r3, #1
 801a0a2:	ee0d 3a10 	vmov	s26, r3
 801a0a6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a0aa:	f1ba 0f00 	cmp.w	sl, #0
 801a0ae:	d113      	bne.n	801a0d8 <_strtod_l+0xb10>
 801a0b0:	eeb1 7b4d 	vneg.f64	d7, d13
 801a0b4:	ec53 2b17 	vmov	r2, r3, d7
 801a0b8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a0bc:	1a43      	subs	r3, r0, r1
 801a0be:	eeb0 0b48 	vmov.f64	d0, d8
 801a0c2:	ec43 2b1c 	vmov	d12, r2, r3
 801a0c6:	910a      	str	r1, [sp, #40]	; 0x28
 801a0c8:	f7ff f926 	bl	8019318 <__ulp>
 801a0cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a0ce:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a0d2:	ec59 8b18 	vmov	r8, r9, d8
 801a0d6:	e7aa      	b.n	801a02e <_strtod_l+0xa66>
 801a0d8:	eeb0 7b4d 	vmov.f64	d7, d13
 801a0dc:	e7ea      	b.n	801a0b4 <_strtod_l+0xaec>
 801a0de:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e6:	f57f af71 	bpl.w	8019fcc <_strtod_l+0xa04>
 801a0ea:	e4b5      	b.n	8019a58 <_strtod_l+0x490>
 801a0ec:	2300      	movs	r3, #0
 801a0ee:	9308      	str	r3, [sp, #32]
 801a0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a0f4:	6013      	str	r3, [r2, #0]
 801a0f6:	f7ff baa6 	b.w	8019646 <_strtod_l+0x7e>
 801a0fa:	2a65      	cmp	r2, #101	; 0x65
 801a0fc:	f43f aba2 	beq.w	8019844 <_strtod_l+0x27c>
 801a100:	2a45      	cmp	r2, #69	; 0x45
 801a102:	f43f ab9f 	beq.w	8019844 <_strtod_l+0x27c>
 801a106:	2101      	movs	r1, #1
 801a108:	f7ff bbd8 	b.w	80198bc <_strtod_l+0x2f4>
 801a10c:	f3af 8000 	nop.w
 801a110:	ffc00000 	.word	0xffc00000
 801a114:	41dfffff 	.word	0x41dfffff
 801a118:	000fffff 	.word	0x000fffff
 801a11c:	7ff00000 	.word	0x7ff00000
 801a120:	7fefffff 	.word	0x7fefffff
 801a124:	7c9fffff 	.word	0x7c9fffff
 801a128:	7fe00000 	.word	0x7fe00000

0801a12c <_strtod_r>:
 801a12c:	4b01      	ldr	r3, [pc, #4]	; (801a134 <_strtod_r+0x8>)
 801a12e:	f7ff ba4b 	b.w	80195c8 <_strtod_l>
 801a132:	bf00      	nop
 801a134:	2400015c 	.word	0x2400015c

0801a138 <_strtol_l.constprop.0>:
 801a138:	2b01      	cmp	r3, #1
 801a13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a13e:	d001      	beq.n	801a144 <_strtol_l.constprop.0+0xc>
 801a140:	2b24      	cmp	r3, #36	; 0x24
 801a142:	d906      	bls.n	801a152 <_strtol_l.constprop.0+0x1a>
 801a144:	f7fd fe46 	bl	8017dd4 <__errno>
 801a148:	2316      	movs	r3, #22
 801a14a:	6003      	str	r3, [r0, #0]
 801a14c:	2000      	movs	r0, #0
 801a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a152:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a238 <_strtol_l.constprop.0+0x100>
 801a156:	460d      	mov	r5, r1
 801a158:	462e      	mov	r6, r5
 801a15a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a15e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a162:	f017 0708 	ands.w	r7, r7, #8
 801a166:	d1f7      	bne.n	801a158 <_strtol_l.constprop.0+0x20>
 801a168:	2c2d      	cmp	r4, #45	; 0x2d
 801a16a:	d132      	bne.n	801a1d2 <_strtol_l.constprop.0+0x9a>
 801a16c:	782c      	ldrb	r4, [r5, #0]
 801a16e:	2701      	movs	r7, #1
 801a170:	1cb5      	adds	r5, r6, #2
 801a172:	2b00      	cmp	r3, #0
 801a174:	d05b      	beq.n	801a22e <_strtol_l.constprop.0+0xf6>
 801a176:	2b10      	cmp	r3, #16
 801a178:	d109      	bne.n	801a18e <_strtol_l.constprop.0+0x56>
 801a17a:	2c30      	cmp	r4, #48	; 0x30
 801a17c:	d107      	bne.n	801a18e <_strtol_l.constprop.0+0x56>
 801a17e:	782c      	ldrb	r4, [r5, #0]
 801a180:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a184:	2c58      	cmp	r4, #88	; 0x58
 801a186:	d14d      	bne.n	801a224 <_strtol_l.constprop.0+0xec>
 801a188:	786c      	ldrb	r4, [r5, #1]
 801a18a:	2310      	movs	r3, #16
 801a18c:	3502      	adds	r5, #2
 801a18e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a192:	f108 38ff 	add.w	r8, r8, #4294967295
 801a196:	f04f 0e00 	mov.w	lr, #0
 801a19a:	fbb8 f9f3 	udiv	r9, r8, r3
 801a19e:	4676      	mov	r6, lr
 801a1a0:	fb03 8a19 	mls	sl, r3, r9, r8
 801a1a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a1a8:	f1bc 0f09 	cmp.w	ip, #9
 801a1ac:	d816      	bhi.n	801a1dc <_strtol_l.constprop.0+0xa4>
 801a1ae:	4664      	mov	r4, ip
 801a1b0:	42a3      	cmp	r3, r4
 801a1b2:	dd24      	ble.n	801a1fe <_strtol_l.constprop.0+0xc6>
 801a1b4:	f1be 3fff 	cmp.w	lr, #4294967295
 801a1b8:	d008      	beq.n	801a1cc <_strtol_l.constprop.0+0x94>
 801a1ba:	45b1      	cmp	r9, r6
 801a1bc:	d31c      	bcc.n	801a1f8 <_strtol_l.constprop.0+0xc0>
 801a1be:	d101      	bne.n	801a1c4 <_strtol_l.constprop.0+0x8c>
 801a1c0:	45a2      	cmp	sl, r4
 801a1c2:	db19      	blt.n	801a1f8 <_strtol_l.constprop.0+0xc0>
 801a1c4:	fb06 4603 	mla	r6, r6, r3, r4
 801a1c8:	f04f 0e01 	mov.w	lr, #1
 801a1cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a1d0:	e7e8      	b.n	801a1a4 <_strtol_l.constprop.0+0x6c>
 801a1d2:	2c2b      	cmp	r4, #43	; 0x2b
 801a1d4:	bf04      	itt	eq
 801a1d6:	782c      	ldrbeq	r4, [r5, #0]
 801a1d8:	1cb5      	addeq	r5, r6, #2
 801a1da:	e7ca      	b.n	801a172 <_strtol_l.constprop.0+0x3a>
 801a1dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a1e0:	f1bc 0f19 	cmp.w	ip, #25
 801a1e4:	d801      	bhi.n	801a1ea <_strtol_l.constprop.0+0xb2>
 801a1e6:	3c37      	subs	r4, #55	; 0x37
 801a1e8:	e7e2      	b.n	801a1b0 <_strtol_l.constprop.0+0x78>
 801a1ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a1ee:	f1bc 0f19 	cmp.w	ip, #25
 801a1f2:	d804      	bhi.n	801a1fe <_strtol_l.constprop.0+0xc6>
 801a1f4:	3c57      	subs	r4, #87	; 0x57
 801a1f6:	e7db      	b.n	801a1b0 <_strtol_l.constprop.0+0x78>
 801a1f8:	f04f 3eff 	mov.w	lr, #4294967295
 801a1fc:	e7e6      	b.n	801a1cc <_strtol_l.constprop.0+0x94>
 801a1fe:	f1be 3fff 	cmp.w	lr, #4294967295
 801a202:	d105      	bne.n	801a210 <_strtol_l.constprop.0+0xd8>
 801a204:	2322      	movs	r3, #34	; 0x22
 801a206:	6003      	str	r3, [r0, #0]
 801a208:	4646      	mov	r6, r8
 801a20a:	b942      	cbnz	r2, 801a21e <_strtol_l.constprop.0+0xe6>
 801a20c:	4630      	mov	r0, r6
 801a20e:	e79e      	b.n	801a14e <_strtol_l.constprop.0+0x16>
 801a210:	b107      	cbz	r7, 801a214 <_strtol_l.constprop.0+0xdc>
 801a212:	4276      	negs	r6, r6
 801a214:	2a00      	cmp	r2, #0
 801a216:	d0f9      	beq.n	801a20c <_strtol_l.constprop.0+0xd4>
 801a218:	f1be 0f00 	cmp.w	lr, #0
 801a21c:	d000      	beq.n	801a220 <_strtol_l.constprop.0+0xe8>
 801a21e:	1e69      	subs	r1, r5, #1
 801a220:	6011      	str	r1, [r2, #0]
 801a222:	e7f3      	b.n	801a20c <_strtol_l.constprop.0+0xd4>
 801a224:	2430      	movs	r4, #48	; 0x30
 801a226:	2b00      	cmp	r3, #0
 801a228:	d1b1      	bne.n	801a18e <_strtol_l.constprop.0+0x56>
 801a22a:	2308      	movs	r3, #8
 801a22c:	e7af      	b.n	801a18e <_strtol_l.constprop.0+0x56>
 801a22e:	2c30      	cmp	r4, #48	; 0x30
 801a230:	d0a5      	beq.n	801a17e <_strtol_l.constprop.0+0x46>
 801a232:	230a      	movs	r3, #10
 801a234:	e7ab      	b.n	801a18e <_strtol_l.constprop.0+0x56>
 801a236:	bf00      	nop
 801a238:	0801b869 	.word	0x0801b869

0801a23c <_strtol_r>:
 801a23c:	f7ff bf7c 	b.w	801a138 <_strtol_l.constprop.0>

0801a240 <__ssputs_r>:
 801a240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a244:	688e      	ldr	r6, [r1, #8]
 801a246:	461f      	mov	r7, r3
 801a248:	42be      	cmp	r6, r7
 801a24a:	680b      	ldr	r3, [r1, #0]
 801a24c:	4682      	mov	sl, r0
 801a24e:	460c      	mov	r4, r1
 801a250:	4690      	mov	r8, r2
 801a252:	d82c      	bhi.n	801a2ae <__ssputs_r+0x6e>
 801a254:	898a      	ldrh	r2, [r1, #12]
 801a256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a25a:	d026      	beq.n	801a2aa <__ssputs_r+0x6a>
 801a25c:	6965      	ldr	r5, [r4, #20]
 801a25e:	6909      	ldr	r1, [r1, #16]
 801a260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a264:	eba3 0901 	sub.w	r9, r3, r1
 801a268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a26c:	1c7b      	adds	r3, r7, #1
 801a26e:	444b      	add	r3, r9
 801a270:	106d      	asrs	r5, r5, #1
 801a272:	429d      	cmp	r5, r3
 801a274:	bf38      	it	cc
 801a276:	461d      	movcc	r5, r3
 801a278:	0553      	lsls	r3, r2, #21
 801a27a:	d527      	bpl.n	801a2cc <__ssputs_r+0x8c>
 801a27c:	4629      	mov	r1, r5
 801a27e:	f7fe fc53 	bl	8018b28 <_malloc_r>
 801a282:	4606      	mov	r6, r0
 801a284:	b360      	cbz	r0, 801a2e0 <__ssputs_r+0xa0>
 801a286:	6921      	ldr	r1, [r4, #16]
 801a288:	464a      	mov	r2, r9
 801a28a:	f7fd fdd0 	bl	8017e2e <memcpy>
 801a28e:	89a3      	ldrh	r3, [r4, #12]
 801a290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a298:	81a3      	strh	r3, [r4, #12]
 801a29a:	6126      	str	r6, [r4, #16]
 801a29c:	6165      	str	r5, [r4, #20]
 801a29e:	444e      	add	r6, r9
 801a2a0:	eba5 0509 	sub.w	r5, r5, r9
 801a2a4:	6026      	str	r6, [r4, #0]
 801a2a6:	60a5      	str	r5, [r4, #8]
 801a2a8:	463e      	mov	r6, r7
 801a2aa:	42be      	cmp	r6, r7
 801a2ac:	d900      	bls.n	801a2b0 <__ssputs_r+0x70>
 801a2ae:	463e      	mov	r6, r7
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	4632      	mov	r2, r6
 801a2b4:	4641      	mov	r1, r8
 801a2b6:	f000 f9c9 	bl	801a64c <memmove>
 801a2ba:	68a3      	ldr	r3, [r4, #8]
 801a2bc:	1b9b      	subs	r3, r3, r6
 801a2be:	60a3      	str	r3, [r4, #8]
 801a2c0:	6823      	ldr	r3, [r4, #0]
 801a2c2:	4433      	add	r3, r6
 801a2c4:	6023      	str	r3, [r4, #0]
 801a2c6:	2000      	movs	r0, #0
 801a2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2cc:	462a      	mov	r2, r5
 801a2ce:	f000 fda0 	bl	801ae12 <_realloc_r>
 801a2d2:	4606      	mov	r6, r0
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	d1e0      	bne.n	801a29a <__ssputs_r+0x5a>
 801a2d8:	6921      	ldr	r1, [r4, #16]
 801a2da:	4650      	mov	r0, sl
 801a2dc:	f7fe fbb0 	bl	8018a40 <_free_r>
 801a2e0:	230c      	movs	r3, #12
 801a2e2:	f8ca 3000 	str.w	r3, [sl]
 801a2e6:	89a3      	ldrh	r3, [r4, #12]
 801a2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2ec:	81a3      	strh	r3, [r4, #12]
 801a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a2f2:	e7e9      	b.n	801a2c8 <__ssputs_r+0x88>

0801a2f4 <_svfiprintf_r>:
 801a2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f8:	4698      	mov	r8, r3
 801a2fa:	898b      	ldrh	r3, [r1, #12]
 801a2fc:	061b      	lsls	r3, r3, #24
 801a2fe:	b09d      	sub	sp, #116	; 0x74
 801a300:	4607      	mov	r7, r0
 801a302:	460d      	mov	r5, r1
 801a304:	4614      	mov	r4, r2
 801a306:	d50e      	bpl.n	801a326 <_svfiprintf_r+0x32>
 801a308:	690b      	ldr	r3, [r1, #16]
 801a30a:	b963      	cbnz	r3, 801a326 <_svfiprintf_r+0x32>
 801a30c:	2140      	movs	r1, #64	; 0x40
 801a30e:	f7fe fc0b 	bl	8018b28 <_malloc_r>
 801a312:	6028      	str	r0, [r5, #0]
 801a314:	6128      	str	r0, [r5, #16]
 801a316:	b920      	cbnz	r0, 801a322 <_svfiprintf_r+0x2e>
 801a318:	230c      	movs	r3, #12
 801a31a:	603b      	str	r3, [r7, #0]
 801a31c:	f04f 30ff 	mov.w	r0, #4294967295
 801a320:	e0d0      	b.n	801a4c4 <_svfiprintf_r+0x1d0>
 801a322:	2340      	movs	r3, #64	; 0x40
 801a324:	616b      	str	r3, [r5, #20]
 801a326:	2300      	movs	r3, #0
 801a328:	9309      	str	r3, [sp, #36]	; 0x24
 801a32a:	2320      	movs	r3, #32
 801a32c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a330:	f8cd 800c 	str.w	r8, [sp, #12]
 801a334:	2330      	movs	r3, #48	; 0x30
 801a336:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a4dc <_svfiprintf_r+0x1e8>
 801a33a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a33e:	f04f 0901 	mov.w	r9, #1
 801a342:	4623      	mov	r3, r4
 801a344:	469a      	mov	sl, r3
 801a346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a34a:	b10a      	cbz	r2, 801a350 <_svfiprintf_r+0x5c>
 801a34c:	2a25      	cmp	r2, #37	; 0x25
 801a34e:	d1f9      	bne.n	801a344 <_svfiprintf_r+0x50>
 801a350:	ebba 0b04 	subs.w	fp, sl, r4
 801a354:	d00b      	beq.n	801a36e <_svfiprintf_r+0x7a>
 801a356:	465b      	mov	r3, fp
 801a358:	4622      	mov	r2, r4
 801a35a:	4629      	mov	r1, r5
 801a35c:	4638      	mov	r0, r7
 801a35e:	f7ff ff6f 	bl	801a240 <__ssputs_r>
 801a362:	3001      	adds	r0, #1
 801a364:	f000 80a9 	beq.w	801a4ba <_svfiprintf_r+0x1c6>
 801a368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a36a:	445a      	add	r2, fp
 801a36c:	9209      	str	r2, [sp, #36]	; 0x24
 801a36e:	f89a 3000 	ldrb.w	r3, [sl]
 801a372:	2b00      	cmp	r3, #0
 801a374:	f000 80a1 	beq.w	801a4ba <_svfiprintf_r+0x1c6>
 801a378:	2300      	movs	r3, #0
 801a37a:	f04f 32ff 	mov.w	r2, #4294967295
 801a37e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a382:	f10a 0a01 	add.w	sl, sl, #1
 801a386:	9304      	str	r3, [sp, #16]
 801a388:	9307      	str	r3, [sp, #28]
 801a38a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a38e:	931a      	str	r3, [sp, #104]	; 0x68
 801a390:	4654      	mov	r4, sl
 801a392:	2205      	movs	r2, #5
 801a394:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a398:	4850      	ldr	r0, [pc, #320]	; (801a4dc <_svfiprintf_r+0x1e8>)
 801a39a:	f7e5 ffb9 	bl	8000310 <memchr>
 801a39e:	9a04      	ldr	r2, [sp, #16]
 801a3a0:	b9d8      	cbnz	r0, 801a3da <_svfiprintf_r+0xe6>
 801a3a2:	06d0      	lsls	r0, r2, #27
 801a3a4:	bf44      	itt	mi
 801a3a6:	2320      	movmi	r3, #32
 801a3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3ac:	0711      	lsls	r1, r2, #28
 801a3ae:	bf44      	itt	mi
 801a3b0:	232b      	movmi	r3, #43	; 0x2b
 801a3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a3b6:	f89a 3000 	ldrb.w	r3, [sl]
 801a3ba:	2b2a      	cmp	r3, #42	; 0x2a
 801a3bc:	d015      	beq.n	801a3ea <_svfiprintf_r+0xf6>
 801a3be:	9a07      	ldr	r2, [sp, #28]
 801a3c0:	4654      	mov	r4, sl
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	f04f 0c0a 	mov.w	ip, #10
 801a3c8:	4621      	mov	r1, r4
 801a3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a3ce:	3b30      	subs	r3, #48	; 0x30
 801a3d0:	2b09      	cmp	r3, #9
 801a3d2:	d94d      	bls.n	801a470 <_svfiprintf_r+0x17c>
 801a3d4:	b1b0      	cbz	r0, 801a404 <_svfiprintf_r+0x110>
 801a3d6:	9207      	str	r2, [sp, #28]
 801a3d8:	e014      	b.n	801a404 <_svfiprintf_r+0x110>
 801a3da:	eba0 0308 	sub.w	r3, r0, r8
 801a3de:	fa09 f303 	lsl.w	r3, r9, r3
 801a3e2:	4313      	orrs	r3, r2
 801a3e4:	9304      	str	r3, [sp, #16]
 801a3e6:	46a2      	mov	sl, r4
 801a3e8:	e7d2      	b.n	801a390 <_svfiprintf_r+0x9c>
 801a3ea:	9b03      	ldr	r3, [sp, #12]
 801a3ec:	1d19      	adds	r1, r3, #4
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	9103      	str	r1, [sp, #12]
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	bfbb      	ittet	lt
 801a3f6:	425b      	neglt	r3, r3
 801a3f8:	f042 0202 	orrlt.w	r2, r2, #2
 801a3fc:	9307      	strge	r3, [sp, #28]
 801a3fe:	9307      	strlt	r3, [sp, #28]
 801a400:	bfb8      	it	lt
 801a402:	9204      	strlt	r2, [sp, #16]
 801a404:	7823      	ldrb	r3, [r4, #0]
 801a406:	2b2e      	cmp	r3, #46	; 0x2e
 801a408:	d10c      	bne.n	801a424 <_svfiprintf_r+0x130>
 801a40a:	7863      	ldrb	r3, [r4, #1]
 801a40c:	2b2a      	cmp	r3, #42	; 0x2a
 801a40e:	d134      	bne.n	801a47a <_svfiprintf_r+0x186>
 801a410:	9b03      	ldr	r3, [sp, #12]
 801a412:	1d1a      	adds	r2, r3, #4
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	9203      	str	r2, [sp, #12]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	bfb8      	it	lt
 801a41c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a420:	3402      	adds	r4, #2
 801a422:	9305      	str	r3, [sp, #20]
 801a424:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a4ec <_svfiprintf_r+0x1f8>
 801a428:	7821      	ldrb	r1, [r4, #0]
 801a42a:	2203      	movs	r2, #3
 801a42c:	4650      	mov	r0, sl
 801a42e:	f7e5 ff6f 	bl	8000310 <memchr>
 801a432:	b138      	cbz	r0, 801a444 <_svfiprintf_r+0x150>
 801a434:	9b04      	ldr	r3, [sp, #16]
 801a436:	eba0 000a 	sub.w	r0, r0, sl
 801a43a:	2240      	movs	r2, #64	; 0x40
 801a43c:	4082      	lsls	r2, r0
 801a43e:	4313      	orrs	r3, r2
 801a440:	3401      	adds	r4, #1
 801a442:	9304      	str	r3, [sp, #16]
 801a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a448:	4825      	ldr	r0, [pc, #148]	; (801a4e0 <_svfiprintf_r+0x1ec>)
 801a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a44e:	2206      	movs	r2, #6
 801a450:	f7e5 ff5e 	bl	8000310 <memchr>
 801a454:	2800      	cmp	r0, #0
 801a456:	d038      	beq.n	801a4ca <_svfiprintf_r+0x1d6>
 801a458:	4b22      	ldr	r3, [pc, #136]	; (801a4e4 <_svfiprintf_r+0x1f0>)
 801a45a:	bb1b      	cbnz	r3, 801a4a4 <_svfiprintf_r+0x1b0>
 801a45c:	9b03      	ldr	r3, [sp, #12]
 801a45e:	3307      	adds	r3, #7
 801a460:	f023 0307 	bic.w	r3, r3, #7
 801a464:	3308      	adds	r3, #8
 801a466:	9303      	str	r3, [sp, #12]
 801a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a46a:	4433      	add	r3, r6
 801a46c:	9309      	str	r3, [sp, #36]	; 0x24
 801a46e:	e768      	b.n	801a342 <_svfiprintf_r+0x4e>
 801a470:	fb0c 3202 	mla	r2, ip, r2, r3
 801a474:	460c      	mov	r4, r1
 801a476:	2001      	movs	r0, #1
 801a478:	e7a6      	b.n	801a3c8 <_svfiprintf_r+0xd4>
 801a47a:	2300      	movs	r3, #0
 801a47c:	3401      	adds	r4, #1
 801a47e:	9305      	str	r3, [sp, #20]
 801a480:	4619      	mov	r1, r3
 801a482:	f04f 0c0a 	mov.w	ip, #10
 801a486:	4620      	mov	r0, r4
 801a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a48c:	3a30      	subs	r2, #48	; 0x30
 801a48e:	2a09      	cmp	r2, #9
 801a490:	d903      	bls.n	801a49a <_svfiprintf_r+0x1a6>
 801a492:	2b00      	cmp	r3, #0
 801a494:	d0c6      	beq.n	801a424 <_svfiprintf_r+0x130>
 801a496:	9105      	str	r1, [sp, #20]
 801a498:	e7c4      	b.n	801a424 <_svfiprintf_r+0x130>
 801a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a49e:	4604      	mov	r4, r0
 801a4a0:	2301      	movs	r3, #1
 801a4a2:	e7f0      	b.n	801a486 <_svfiprintf_r+0x192>
 801a4a4:	ab03      	add	r3, sp, #12
 801a4a6:	9300      	str	r3, [sp, #0]
 801a4a8:	462a      	mov	r2, r5
 801a4aa:	4b0f      	ldr	r3, [pc, #60]	; (801a4e8 <_svfiprintf_r+0x1f4>)
 801a4ac:	a904      	add	r1, sp, #16
 801a4ae:	4638      	mov	r0, r7
 801a4b0:	f7fc fd6a 	bl	8016f88 <_printf_float>
 801a4b4:	1c42      	adds	r2, r0, #1
 801a4b6:	4606      	mov	r6, r0
 801a4b8:	d1d6      	bne.n	801a468 <_svfiprintf_r+0x174>
 801a4ba:	89ab      	ldrh	r3, [r5, #12]
 801a4bc:	065b      	lsls	r3, r3, #25
 801a4be:	f53f af2d 	bmi.w	801a31c <_svfiprintf_r+0x28>
 801a4c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a4c4:	b01d      	add	sp, #116	; 0x74
 801a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ca:	ab03      	add	r3, sp, #12
 801a4cc:	9300      	str	r3, [sp, #0]
 801a4ce:	462a      	mov	r2, r5
 801a4d0:	4b05      	ldr	r3, [pc, #20]	; (801a4e8 <_svfiprintf_r+0x1f4>)
 801a4d2:	a904      	add	r1, sp, #16
 801a4d4:	4638      	mov	r0, r7
 801a4d6:	f7fc ffdf 	bl	8017498 <_printf_i>
 801a4da:	e7eb      	b.n	801a4b4 <_svfiprintf_r+0x1c0>
 801a4dc:	0801b969 	.word	0x0801b969
 801a4e0:	0801b973 	.word	0x0801b973
 801a4e4:	08016f89 	.word	0x08016f89
 801a4e8:	0801a241 	.word	0x0801a241
 801a4ec:	0801b96f 	.word	0x0801b96f

0801a4f0 <__sflush_r>:
 801a4f0:	898a      	ldrh	r2, [r1, #12]
 801a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f6:	4605      	mov	r5, r0
 801a4f8:	0710      	lsls	r0, r2, #28
 801a4fa:	460c      	mov	r4, r1
 801a4fc:	d458      	bmi.n	801a5b0 <__sflush_r+0xc0>
 801a4fe:	684b      	ldr	r3, [r1, #4]
 801a500:	2b00      	cmp	r3, #0
 801a502:	dc05      	bgt.n	801a510 <__sflush_r+0x20>
 801a504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a506:	2b00      	cmp	r3, #0
 801a508:	dc02      	bgt.n	801a510 <__sflush_r+0x20>
 801a50a:	2000      	movs	r0, #0
 801a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a512:	2e00      	cmp	r6, #0
 801a514:	d0f9      	beq.n	801a50a <__sflush_r+0x1a>
 801a516:	2300      	movs	r3, #0
 801a518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a51c:	682f      	ldr	r7, [r5, #0]
 801a51e:	6a21      	ldr	r1, [r4, #32]
 801a520:	602b      	str	r3, [r5, #0]
 801a522:	d032      	beq.n	801a58a <__sflush_r+0x9a>
 801a524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a526:	89a3      	ldrh	r3, [r4, #12]
 801a528:	075a      	lsls	r2, r3, #29
 801a52a:	d505      	bpl.n	801a538 <__sflush_r+0x48>
 801a52c:	6863      	ldr	r3, [r4, #4]
 801a52e:	1ac0      	subs	r0, r0, r3
 801a530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a532:	b10b      	cbz	r3, 801a538 <__sflush_r+0x48>
 801a534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a536:	1ac0      	subs	r0, r0, r3
 801a538:	2300      	movs	r3, #0
 801a53a:	4602      	mov	r2, r0
 801a53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a53e:	6a21      	ldr	r1, [r4, #32]
 801a540:	4628      	mov	r0, r5
 801a542:	47b0      	blx	r6
 801a544:	1c43      	adds	r3, r0, #1
 801a546:	89a3      	ldrh	r3, [r4, #12]
 801a548:	d106      	bne.n	801a558 <__sflush_r+0x68>
 801a54a:	6829      	ldr	r1, [r5, #0]
 801a54c:	291d      	cmp	r1, #29
 801a54e:	d82b      	bhi.n	801a5a8 <__sflush_r+0xb8>
 801a550:	4a29      	ldr	r2, [pc, #164]	; (801a5f8 <__sflush_r+0x108>)
 801a552:	410a      	asrs	r2, r1
 801a554:	07d6      	lsls	r6, r2, #31
 801a556:	d427      	bmi.n	801a5a8 <__sflush_r+0xb8>
 801a558:	2200      	movs	r2, #0
 801a55a:	6062      	str	r2, [r4, #4]
 801a55c:	04d9      	lsls	r1, r3, #19
 801a55e:	6922      	ldr	r2, [r4, #16]
 801a560:	6022      	str	r2, [r4, #0]
 801a562:	d504      	bpl.n	801a56e <__sflush_r+0x7e>
 801a564:	1c42      	adds	r2, r0, #1
 801a566:	d101      	bne.n	801a56c <__sflush_r+0x7c>
 801a568:	682b      	ldr	r3, [r5, #0]
 801a56a:	b903      	cbnz	r3, 801a56e <__sflush_r+0x7e>
 801a56c:	6560      	str	r0, [r4, #84]	; 0x54
 801a56e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a570:	602f      	str	r7, [r5, #0]
 801a572:	2900      	cmp	r1, #0
 801a574:	d0c9      	beq.n	801a50a <__sflush_r+0x1a>
 801a576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a57a:	4299      	cmp	r1, r3
 801a57c:	d002      	beq.n	801a584 <__sflush_r+0x94>
 801a57e:	4628      	mov	r0, r5
 801a580:	f7fe fa5e 	bl	8018a40 <_free_r>
 801a584:	2000      	movs	r0, #0
 801a586:	6360      	str	r0, [r4, #52]	; 0x34
 801a588:	e7c0      	b.n	801a50c <__sflush_r+0x1c>
 801a58a:	2301      	movs	r3, #1
 801a58c:	4628      	mov	r0, r5
 801a58e:	47b0      	blx	r6
 801a590:	1c41      	adds	r1, r0, #1
 801a592:	d1c8      	bne.n	801a526 <__sflush_r+0x36>
 801a594:	682b      	ldr	r3, [r5, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d0c5      	beq.n	801a526 <__sflush_r+0x36>
 801a59a:	2b1d      	cmp	r3, #29
 801a59c:	d001      	beq.n	801a5a2 <__sflush_r+0xb2>
 801a59e:	2b16      	cmp	r3, #22
 801a5a0:	d101      	bne.n	801a5a6 <__sflush_r+0xb6>
 801a5a2:	602f      	str	r7, [r5, #0]
 801a5a4:	e7b1      	b.n	801a50a <__sflush_r+0x1a>
 801a5a6:	89a3      	ldrh	r3, [r4, #12]
 801a5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5ac:	81a3      	strh	r3, [r4, #12]
 801a5ae:	e7ad      	b.n	801a50c <__sflush_r+0x1c>
 801a5b0:	690f      	ldr	r7, [r1, #16]
 801a5b2:	2f00      	cmp	r7, #0
 801a5b4:	d0a9      	beq.n	801a50a <__sflush_r+0x1a>
 801a5b6:	0793      	lsls	r3, r2, #30
 801a5b8:	680e      	ldr	r6, [r1, #0]
 801a5ba:	bf08      	it	eq
 801a5bc:	694b      	ldreq	r3, [r1, #20]
 801a5be:	600f      	str	r7, [r1, #0]
 801a5c0:	bf18      	it	ne
 801a5c2:	2300      	movne	r3, #0
 801a5c4:	eba6 0807 	sub.w	r8, r6, r7
 801a5c8:	608b      	str	r3, [r1, #8]
 801a5ca:	f1b8 0f00 	cmp.w	r8, #0
 801a5ce:	dd9c      	ble.n	801a50a <__sflush_r+0x1a>
 801a5d0:	6a21      	ldr	r1, [r4, #32]
 801a5d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a5d4:	4643      	mov	r3, r8
 801a5d6:	463a      	mov	r2, r7
 801a5d8:	4628      	mov	r0, r5
 801a5da:	47b0      	blx	r6
 801a5dc:	2800      	cmp	r0, #0
 801a5de:	dc06      	bgt.n	801a5ee <__sflush_r+0xfe>
 801a5e0:	89a3      	ldrh	r3, [r4, #12]
 801a5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5e6:	81a3      	strh	r3, [r4, #12]
 801a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ec:	e78e      	b.n	801a50c <__sflush_r+0x1c>
 801a5ee:	4407      	add	r7, r0
 801a5f0:	eba8 0800 	sub.w	r8, r8, r0
 801a5f4:	e7e9      	b.n	801a5ca <__sflush_r+0xda>
 801a5f6:	bf00      	nop
 801a5f8:	dfbffffe 	.word	0xdfbffffe

0801a5fc <_fflush_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	690b      	ldr	r3, [r1, #16]
 801a600:	4605      	mov	r5, r0
 801a602:	460c      	mov	r4, r1
 801a604:	b913      	cbnz	r3, 801a60c <_fflush_r+0x10>
 801a606:	2500      	movs	r5, #0
 801a608:	4628      	mov	r0, r5
 801a60a:	bd38      	pop	{r3, r4, r5, pc}
 801a60c:	b118      	cbz	r0, 801a616 <_fflush_r+0x1a>
 801a60e:	6a03      	ldr	r3, [r0, #32]
 801a610:	b90b      	cbnz	r3, 801a616 <_fflush_r+0x1a>
 801a612:	f7fd faf3 	bl	8017bfc <__sinit>
 801a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d0f3      	beq.n	801a606 <_fflush_r+0xa>
 801a61e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a620:	07d0      	lsls	r0, r2, #31
 801a622:	d404      	bmi.n	801a62e <_fflush_r+0x32>
 801a624:	0599      	lsls	r1, r3, #22
 801a626:	d402      	bmi.n	801a62e <_fflush_r+0x32>
 801a628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a62a:	f7fd fbfe 	bl	8017e2a <__retarget_lock_acquire_recursive>
 801a62e:	4628      	mov	r0, r5
 801a630:	4621      	mov	r1, r4
 801a632:	f7ff ff5d 	bl	801a4f0 <__sflush_r>
 801a636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a638:	07da      	lsls	r2, r3, #31
 801a63a:	4605      	mov	r5, r0
 801a63c:	d4e4      	bmi.n	801a608 <_fflush_r+0xc>
 801a63e:	89a3      	ldrh	r3, [r4, #12]
 801a640:	059b      	lsls	r3, r3, #22
 801a642:	d4e1      	bmi.n	801a608 <_fflush_r+0xc>
 801a644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a646:	f7fd fbf1 	bl	8017e2c <__retarget_lock_release_recursive>
 801a64a:	e7dd      	b.n	801a608 <_fflush_r+0xc>

0801a64c <memmove>:
 801a64c:	4288      	cmp	r0, r1
 801a64e:	b510      	push	{r4, lr}
 801a650:	eb01 0402 	add.w	r4, r1, r2
 801a654:	d902      	bls.n	801a65c <memmove+0x10>
 801a656:	4284      	cmp	r4, r0
 801a658:	4623      	mov	r3, r4
 801a65a:	d807      	bhi.n	801a66c <memmove+0x20>
 801a65c:	1e43      	subs	r3, r0, #1
 801a65e:	42a1      	cmp	r1, r4
 801a660:	d008      	beq.n	801a674 <memmove+0x28>
 801a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a666:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a66a:	e7f8      	b.n	801a65e <memmove+0x12>
 801a66c:	4402      	add	r2, r0
 801a66e:	4601      	mov	r1, r0
 801a670:	428a      	cmp	r2, r1
 801a672:	d100      	bne.n	801a676 <memmove+0x2a>
 801a674:	bd10      	pop	{r4, pc}
 801a676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a67e:	e7f7      	b.n	801a670 <memmove+0x24>

0801a680 <strncmp>:
 801a680:	b510      	push	{r4, lr}
 801a682:	b16a      	cbz	r2, 801a6a0 <strncmp+0x20>
 801a684:	3901      	subs	r1, #1
 801a686:	1884      	adds	r4, r0, r2
 801a688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a68c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a690:	429a      	cmp	r2, r3
 801a692:	d103      	bne.n	801a69c <strncmp+0x1c>
 801a694:	42a0      	cmp	r0, r4
 801a696:	d001      	beq.n	801a69c <strncmp+0x1c>
 801a698:	2a00      	cmp	r2, #0
 801a69a:	d1f5      	bne.n	801a688 <strncmp+0x8>
 801a69c:	1ad0      	subs	r0, r2, r3
 801a69e:	bd10      	pop	{r4, pc}
 801a6a0:	4610      	mov	r0, r2
 801a6a2:	e7fc      	b.n	801a69e <strncmp+0x1e>

0801a6a4 <_sbrk_r>:
 801a6a4:	b538      	push	{r3, r4, r5, lr}
 801a6a6:	4d06      	ldr	r5, [pc, #24]	; (801a6c0 <_sbrk_r+0x1c>)
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	4604      	mov	r4, r0
 801a6ac:	4608      	mov	r0, r1
 801a6ae:	602b      	str	r3, [r5, #0]
 801a6b0:	f7e8 ffe8 	bl	8003684 <_sbrk>
 801a6b4:	1c43      	adds	r3, r0, #1
 801a6b6:	d102      	bne.n	801a6be <_sbrk_r+0x1a>
 801a6b8:	682b      	ldr	r3, [r5, #0]
 801a6ba:	b103      	cbz	r3, 801a6be <_sbrk_r+0x1a>
 801a6bc:	6023      	str	r3, [r4, #0]
 801a6be:	bd38      	pop	{r3, r4, r5, pc}
 801a6c0:	24003464 	.word	0x24003464
 801a6c4:	00000000 	.word	0x00000000

0801a6c8 <nan>:
 801a6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a6d0 <nan+0x8>
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	00000000 	.word	0x00000000
 801a6d4:	7ff80000 	.word	0x7ff80000

0801a6d8 <__assert_func>:
 801a6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6da:	4614      	mov	r4, r2
 801a6dc:	461a      	mov	r2, r3
 801a6de:	4b09      	ldr	r3, [pc, #36]	; (801a704 <__assert_func+0x2c>)
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	4605      	mov	r5, r0
 801a6e4:	68d8      	ldr	r0, [r3, #12]
 801a6e6:	b14c      	cbz	r4, 801a6fc <__assert_func+0x24>
 801a6e8:	4b07      	ldr	r3, [pc, #28]	; (801a708 <__assert_func+0x30>)
 801a6ea:	9100      	str	r1, [sp, #0]
 801a6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6f0:	4906      	ldr	r1, [pc, #24]	; (801a70c <__assert_func+0x34>)
 801a6f2:	462b      	mov	r3, r5
 801a6f4:	f000 fbca 	bl	801ae8c <fiprintf>
 801a6f8:	f000 fbda 	bl	801aeb0 <abort>
 801a6fc:	4b04      	ldr	r3, [pc, #16]	; (801a710 <__assert_func+0x38>)
 801a6fe:	461c      	mov	r4, r3
 801a700:	e7f3      	b.n	801a6ea <__assert_func+0x12>
 801a702:	bf00      	nop
 801a704:	24000158 	.word	0x24000158
 801a708:	0801b982 	.word	0x0801b982
 801a70c:	0801b98f 	.word	0x0801b98f
 801a710:	0801b9bd 	.word	0x0801b9bd

0801a714 <_calloc_r>:
 801a714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a716:	fba1 2402 	umull	r2, r4, r1, r2
 801a71a:	b94c      	cbnz	r4, 801a730 <_calloc_r+0x1c>
 801a71c:	4611      	mov	r1, r2
 801a71e:	9201      	str	r2, [sp, #4]
 801a720:	f7fe fa02 	bl	8018b28 <_malloc_r>
 801a724:	9a01      	ldr	r2, [sp, #4]
 801a726:	4605      	mov	r5, r0
 801a728:	b930      	cbnz	r0, 801a738 <_calloc_r+0x24>
 801a72a:	4628      	mov	r0, r5
 801a72c:	b003      	add	sp, #12
 801a72e:	bd30      	pop	{r4, r5, pc}
 801a730:	220c      	movs	r2, #12
 801a732:	6002      	str	r2, [r0, #0]
 801a734:	2500      	movs	r5, #0
 801a736:	e7f8      	b.n	801a72a <_calloc_r+0x16>
 801a738:	4621      	mov	r1, r4
 801a73a:	f7fd faf8 	bl	8017d2e <memset>
 801a73e:	e7f4      	b.n	801a72a <_calloc_r+0x16>

0801a740 <rshift>:
 801a740:	6903      	ldr	r3, [r0, #16]
 801a742:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a74a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a74e:	f100 0414 	add.w	r4, r0, #20
 801a752:	dd45      	ble.n	801a7e0 <rshift+0xa0>
 801a754:	f011 011f 	ands.w	r1, r1, #31
 801a758:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a75c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a760:	d10c      	bne.n	801a77c <rshift+0x3c>
 801a762:	f100 0710 	add.w	r7, r0, #16
 801a766:	4629      	mov	r1, r5
 801a768:	42b1      	cmp	r1, r6
 801a76a:	d334      	bcc.n	801a7d6 <rshift+0x96>
 801a76c:	1a9b      	subs	r3, r3, r2
 801a76e:	009b      	lsls	r3, r3, #2
 801a770:	1eea      	subs	r2, r5, #3
 801a772:	4296      	cmp	r6, r2
 801a774:	bf38      	it	cc
 801a776:	2300      	movcc	r3, #0
 801a778:	4423      	add	r3, r4
 801a77a:	e015      	b.n	801a7a8 <rshift+0x68>
 801a77c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a780:	f1c1 0820 	rsb	r8, r1, #32
 801a784:	40cf      	lsrs	r7, r1
 801a786:	f105 0e04 	add.w	lr, r5, #4
 801a78a:	46a1      	mov	r9, r4
 801a78c:	4576      	cmp	r6, lr
 801a78e:	46f4      	mov	ip, lr
 801a790:	d815      	bhi.n	801a7be <rshift+0x7e>
 801a792:	1a9a      	subs	r2, r3, r2
 801a794:	0092      	lsls	r2, r2, #2
 801a796:	3a04      	subs	r2, #4
 801a798:	3501      	adds	r5, #1
 801a79a:	42ae      	cmp	r6, r5
 801a79c:	bf38      	it	cc
 801a79e:	2200      	movcc	r2, #0
 801a7a0:	18a3      	adds	r3, r4, r2
 801a7a2:	50a7      	str	r7, [r4, r2]
 801a7a4:	b107      	cbz	r7, 801a7a8 <rshift+0x68>
 801a7a6:	3304      	adds	r3, #4
 801a7a8:	1b1a      	subs	r2, r3, r4
 801a7aa:	42a3      	cmp	r3, r4
 801a7ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a7b0:	bf08      	it	eq
 801a7b2:	2300      	moveq	r3, #0
 801a7b4:	6102      	str	r2, [r0, #16]
 801a7b6:	bf08      	it	eq
 801a7b8:	6143      	streq	r3, [r0, #20]
 801a7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7be:	f8dc c000 	ldr.w	ip, [ip]
 801a7c2:	fa0c fc08 	lsl.w	ip, ip, r8
 801a7c6:	ea4c 0707 	orr.w	r7, ip, r7
 801a7ca:	f849 7b04 	str.w	r7, [r9], #4
 801a7ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a7d2:	40cf      	lsrs	r7, r1
 801a7d4:	e7da      	b.n	801a78c <rshift+0x4c>
 801a7d6:	f851 cb04 	ldr.w	ip, [r1], #4
 801a7da:	f847 cf04 	str.w	ip, [r7, #4]!
 801a7de:	e7c3      	b.n	801a768 <rshift+0x28>
 801a7e0:	4623      	mov	r3, r4
 801a7e2:	e7e1      	b.n	801a7a8 <rshift+0x68>

0801a7e4 <__hexdig_fun>:
 801a7e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a7e8:	2b09      	cmp	r3, #9
 801a7ea:	d802      	bhi.n	801a7f2 <__hexdig_fun+0xe>
 801a7ec:	3820      	subs	r0, #32
 801a7ee:	b2c0      	uxtb	r0, r0
 801a7f0:	4770      	bx	lr
 801a7f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a7f6:	2b05      	cmp	r3, #5
 801a7f8:	d801      	bhi.n	801a7fe <__hexdig_fun+0x1a>
 801a7fa:	3847      	subs	r0, #71	; 0x47
 801a7fc:	e7f7      	b.n	801a7ee <__hexdig_fun+0xa>
 801a7fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a802:	2b05      	cmp	r3, #5
 801a804:	d801      	bhi.n	801a80a <__hexdig_fun+0x26>
 801a806:	3827      	subs	r0, #39	; 0x27
 801a808:	e7f1      	b.n	801a7ee <__hexdig_fun+0xa>
 801a80a:	2000      	movs	r0, #0
 801a80c:	4770      	bx	lr
	...

0801a810 <__gethex>:
 801a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a814:	4617      	mov	r7, r2
 801a816:	680a      	ldr	r2, [r1, #0]
 801a818:	b085      	sub	sp, #20
 801a81a:	f102 0b02 	add.w	fp, r2, #2
 801a81e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a822:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a826:	4681      	mov	r9, r0
 801a828:	468a      	mov	sl, r1
 801a82a:	9302      	str	r3, [sp, #8]
 801a82c:	32fe      	adds	r2, #254	; 0xfe
 801a82e:	eb02 030b 	add.w	r3, r2, fp
 801a832:	46d8      	mov	r8, fp
 801a834:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a838:	9301      	str	r3, [sp, #4]
 801a83a:	2830      	cmp	r0, #48	; 0x30
 801a83c:	d0f7      	beq.n	801a82e <__gethex+0x1e>
 801a83e:	f7ff ffd1 	bl	801a7e4 <__hexdig_fun>
 801a842:	4604      	mov	r4, r0
 801a844:	2800      	cmp	r0, #0
 801a846:	d138      	bne.n	801a8ba <__gethex+0xaa>
 801a848:	49a7      	ldr	r1, [pc, #668]	; (801aae8 <__gethex+0x2d8>)
 801a84a:	2201      	movs	r2, #1
 801a84c:	4640      	mov	r0, r8
 801a84e:	f7ff ff17 	bl	801a680 <strncmp>
 801a852:	4606      	mov	r6, r0
 801a854:	2800      	cmp	r0, #0
 801a856:	d169      	bne.n	801a92c <__gethex+0x11c>
 801a858:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a85c:	465d      	mov	r5, fp
 801a85e:	f7ff ffc1 	bl	801a7e4 <__hexdig_fun>
 801a862:	2800      	cmp	r0, #0
 801a864:	d064      	beq.n	801a930 <__gethex+0x120>
 801a866:	465a      	mov	r2, fp
 801a868:	7810      	ldrb	r0, [r2, #0]
 801a86a:	2830      	cmp	r0, #48	; 0x30
 801a86c:	4690      	mov	r8, r2
 801a86e:	f102 0201 	add.w	r2, r2, #1
 801a872:	d0f9      	beq.n	801a868 <__gethex+0x58>
 801a874:	f7ff ffb6 	bl	801a7e4 <__hexdig_fun>
 801a878:	2301      	movs	r3, #1
 801a87a:	fab0 f480 	clz	r4, r0
 801a87e:	0964      	lsrs	r4, r4, #5
 801a880:	465e      	mov	r6, fp
 801a882:	9301      	str	r3, [sp, #4]
 801a884:	4642      	mov	r2, r8
 801a886:	4615      	mov	r5, r2
 801a888:	3201      	adds	r2, #1
 801a88a:	7828      	ldrb	r0, [r5, #0]
 801a88c:	f7ff ffaa 	bl	801a7e4 <__hexdig_fun>
 801a890:	2800      	cmp	r0, #0
 801a892:	d1f8      	bne.n	801a886 <__gethex+0x76>
 801a894:	4994      	ldr	r1, [pc, #592]	; (801aae8 <__gethex+0x2d8>)
 801a896:	2201      	movs	r2, #1
 801a898:	4628      	mov	r0, r5
 801a89a:	f7ff fef1 	bl	801a680 <strncmp>
 801a89e:	b978      	cbnz	r0, 801a8c0 <__gethex+0xb0>
 801a8a0:	b946      	cbnz	r6, 801a8b4 <__gethex+0xa4>
 801a8a2:	1c6e      	adds	r6, r5, #1
 801a8a4:	4632      	mov	r2, r6
 801a8a6:	4615      	mov	r5, r2
 801a8a8:	3201      	adds	r2, #1
 801a8aa:	7828      	ldrb	r0, [r5, #0]
 801a8ac:	f7ff ff9a 	bl	801a7e4 <__hexdig_fun>
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	d1f8      	bne.n	801a8a6 <__gethex+0x96>
 801a8b4:	1b73      	subs	r3, r6, r5
 801a8b6:	009e      	lsls	r6, r3, #2
 801a8b8:	e004      	b.n	801a8c4 <__gethex+0xb4>
 801a8ba:	2400      	movs	r4, #0
 801a8bc:	4626      	mov	r6, r4
 801a8be:	e7e1      	b.n	801a884 <__gethex+0x74>
 801a8c0:	2e00      	cmp	r6, #0
 801a8c2:	d1f7      	bne.n	801a8b4 <__gethex+0xa4>
 801a8c4:	782b      	ldrb	r3, [r5, #0]
 801a8c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a8ca:	2b50      	cmp	r3, #80	; 0x50
 801a8cc:	d13d      	bne.n	801a94a <__gethex+0x13a>
 801a8ce:	786b      	ldrb	r3, [r5, #1]
 801a8d0:	2b2b      	cmp	r3, #43	; 0x2b
 801a8d2:	d02f      	beq.n	801a934 <__gethex+0x124>
 801a8d4:	2b2d      	cmp	r3, #45	; 0x2d
 801a8d6:	d031      	beq.n	801a93c <__gethex+0x12c>
 801a8d8:	1c69      	adds	r1, r5, #1
 801a8da:	f04f 0b00 	mov.w	fp, #0
 801a8de:	7808      	ldrb	r0, [r1, #0]
 801a8e0:	f7ff ff80 	bl	801a7e4 <__hexdig_fun>
 801a8e4:	1e42      	subs	r2, r0, #1
 801a8e6:	b2d2      	uxtb	r2, r2
 801a8e8:	2a18      	cmp	r2, #24
 801a8ea:	d82e      	bhi.n	801a94a <__gethex+0x13a>
 801a8ec:	f1a0 0210 	sub.w	r2, r0, #16
 801a8f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a8f4:	f7ff ff76 	bl	801a7e4 <__hexdig_fun>
 801a8f8:	f100 3cff 	add.w	ip, r0, #4294967295
 801a8fc:	fa5f fc8c 	uxtb.w	ip, ip
 801a900:	f1bc 0f18 	cmp.w	ip, #24
 801a904:	d91d      	bls.n	801a942 <__gethex+0x132>
 801a906:	f1bb 0f00 	cmp.w	fp, #0
 801a90a:	d000      	beq.n	801a90e <__gethex+0xfe>
 801a90c:	4252      	negs	r2, r2
 801a90e:	4416      	add	r6, r2
 801a910:	f8ca 1000 	str.w	r1, [sl]
 801a914:	b1dc      	cbz	r4, 801a94e <__gethex+0x13e>
 801a916:	9b01      	ldr	r3, [sp, #4]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	bf14      	ite	ne
 801a91c:	f04f 0800 	movne.w	r8, #0
 801a920:	f04f 0806 	moveq.w	r8, #6
 801a924:	4640      	mov	r0, r8
 801a926:	b005      	add	sp, #20
 801a928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a92c:	4645      	mov	r5, r8
 801a92e:	4626      	mov	r6, r4
 801a930:	2401      	movs	r4, #1
 801a932:	e7c7      	b.n	801a8c4 <__gethex+0xb4>
 801a934:	f04f 0b00 	mov.w	fp, #0
 801a938:	1ca9      	adds	r1, r5, #2
 801a93a:	e7d0      	b.n	801a8de <__gethex+0xce>
 801a93c:	f04f 0b01 	mov.w	fp, #1
 801a940:	e7fa      	b.n	801a938 <__gethex+0x128>
 801a942:	230a      	movs	r3, #10
 801a944:	fb03 0002 	mla	r0, r3, r2, r0
 801a948:	e7d0      	b.n	801a8ec <__gethex+0xdc>
 801a94a:	4629      	mov	r1, r5
 801a94c:	e7e0      	b.n	801a910 <__gethex+0x100>
 801a94e:	eba5 0308 	sub.w	r3, r5, r8
 801a952:	3b01      	subs	r3, #1
 801a954:	4621      	mov	r1, r4
 801a956:	2b07      	cmp	r3, #7
 801a958:	dc0a      	bgt.n	801a970 <__gethex+0x160>
 801a95a:	4648      	mov	r0, r9
 801a95c:	f7fe f970 	bl	8018c40 <_Balloc>
 801a960:	4604      	mov	r4, r0
 801a962:	b940      	cbnz	r0, 801a976 <__gethex+0x166>
 801a964:	4b61      	ldr	r3, [pc, #388]	; (801aaec <__gethex+0x2dc>)
 801a966:	4602      	mov	r2, r0
 801a968:	21e4      	movs	r1, #228	; 0xe4
 801a96a:	4861      	ldr	r0, [pc, #388]	; (801aaf0 <__gethex+0x2e0>)
 801a96c:	f7ff feb4 	bl	801a6d8 <__assert_func>
 801a970:	3101      	adds	r1, #1
 801a972:	105b      	asrs	r3, r3, #1
 801a974:	e7ef      	b.n	801a956 <__gethex+0x146>
 801a976:	f100 0a14 	add.w	sl, r0, #20
 801a97a:	2300      	movs	r3, #0
 801a97c:	495a      	ldr	r1, [pc, #360]	; (801aae8 <__gethex+0x2d8>)
 801a97e:	f8cd a004 	str.w	sl, [sp, #4]
 801a982:	469b      	mov	fp, r3
 801a984:	45a8      	cmp	r8, r5
 801a986:	d342      	bcc.n	801aa0e <__gethex+0x1fe>
 801a988:	9801      	ldr	r0, [sp, #4]
 801a98a:	f840 bb04 	str.w	fp, [r0], #4
 801a98e:	eba0 000a 	sub.w	r0, r0, sl
 801a992:	1080      	asrs	r0, r0, #2
 801a994:	6120      	str	r0, [r4, #16]
 801a996:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a99a:	4658      	mov	r0, fp
 801a99c:	f7fe fa42 	bl	8018e24 <__hi0bits>
 801a9a0:	683d      	ldr	r5, [r7, #0]
 801a9a2:	eba8 0000 	sub.w	r0, r8, r0
 801a9a6:	42a8      	cmp	r0, r5
 801a9a8:	dd59      	ble.n	801aa5e <__gethex+0x24e>
 801a9aa:	eba0 0805 	sub.w	r8, r0, r5
 801a9ae:	4641      	mov	r1, r8
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	f7fe fdce 	bl	8019552 <__any_on>
 801a9b6:	4683      	mov	fp, r0
 801a9b8:	b1b8      	cbz	r0, 801a9ea <__gethex+0x1da>
 801a9ba:	f108 33ff 	add.w	r3, r8, #4294967295
 801a9be:	1159      	asrs	r1, r3, #5
 801a9c0:	f003 021f 	and.w	r2, r3, #31
 801a9c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a9c8:	f04f 0b01 	mov.w	fp, #1
 801a9cc:	fa0b f202 	lsl.w	r2, fp, r2
 801a9d0:	420a      	tst	r2, r1
 801a9d2:	d00a      	beq.n	801a9ea <__gethex+0x1da>
 801a9d4:	455b      	cmp	r3, fp
 801a9d6:	dd06      	ble.n	801a9e6 <__gethex+0x1d6>
 801a9d8:	f1a8 0102 	sub.w	r1, r8, #2
 801a9dc:	4620      	mov	r0, r4
 801a9de:	f7fe fdb8 	bl	8019552 <__any_on>
 801a9e2:	2800      	cmp	r0, #0
 801a9e4:	d138      	bne.n	801aa58 <__gethex+0x248>
 801a9e6:	f04f 0b02 	mov.w	fp, #2
 801a9ea:	4641      	mov	r1, r8
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	f7ff fea7 	bl	801a740 <rshift>
 801a9f2:	4446      	add	r6, r8
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	42b3      	cmp	r3, r6
 801a9f8:	da41      	bge.n	801aa7e <__gethex+0x26e>
 801a9fa:	4621      	mov	r1, r4
 801a9fc:	4648      	mov	r0, r9
 801a9fe:	f7fe f95f 	bl	8018cc0 <_Bfree>
 801aa02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa04:	2300      	movs	r3, #0
 801aa06:	6013      	str	r3, [r2, #0]
 801aa08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801aa0c:	e78a      	b.n	801a924 <__gethex+0x114>
 801aa0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801aa12:	2a2e      	cmp	r2, #46	; 0x2e
 801aa14:	d014      	beq.n	801aa40 <__gethex+0x230>
 801aa16:	2b20      	cmp	r3, #32
 801aa18:	d106      	bne.n	801aa28 <__gethex+0x218>
 801aa1a:	9b01      	ldr	r3, [sp, #4]
 801aa1c:	f843 bb04 	str.w	fp, [r3], #4
 801aa20:	f04f 0b00 	mov.w	fp, #0
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	465b      	mov	r3, fp
 801aa28:	7828      	ldrb	r0, [r5, #0]
 801aa2a:	9303      	str	r3, [sp, #12]
 801aa2c:	f7ff feda 	bl	801a7e4 <__hexdig_fun>
 801aa30:	9b03      	ldr	r3, [sp, #12]
 801aa32:	f000 000f 	and.w	r0, r0, #15
 801aa36:	4098      	lsls	r0, r3
 801aa38:	ea4b 0b00 	orr.w	fp, fp, r0
 801aa3c:	3304      	adds	r3, #4
 801aa3e:	e7a1      	b.n	801a984 <__gethex+0x174>
 801aa40:	45a8      	cmp	r8, r5
 801aa42:	d8e8      	bhi.n	801aa16 <__gethex+0x206>
 801aa44:	2201      	movs	r2, #1
 801aa46:	4628      	mov	r0, r5
 801aa48:	9303      	str	r3, [sp, #12]
 801aa4a:	f7ff fe19 	bl	801a680 <strncmp>
 801aa4e:	4926      	ldr	r1, [pc, #152]	; (801aae8 <__gethex+0x2d8>)
 801aa50:	9b03      	ldr	r3, [sp, #12]
 801aa52:	2800      	cmp	r0, #0
 801aa54:	d1df      	bne.n	801aa16 <__gethex+0x206>
 801aa56:	e795      	b.n	801a984 <__gethex+0x174>
 801aa58:	f04f 0b03 	mov.w	fp, #3
 801aa5c:	e7c5      	b.n	801a9ea <__gethex+0x1da>
 801aa5e:	da0b      	bge.n	801aa78 <__gethex+0x268>
 801aa60:	eba5 0800 	sub.w	r8, r5, r0
 801aa64:	4621      	mov	r1, r4
 801aa66:	4642      	mov	r2, r8
 801aa68:	4648      	mov	r0, r9
 801aa6a:	f7fe fb43 	bl	80190f4 <__lshift>
 801aa6e:	eba6 0608 	sub.w	r6, r6, r8
 801aa72:	4604      	mov	r4, r0
 801aa74:	f100 0a14 	add.w	sl, r0, #20
 801aa78:	f04f 0b00 	mov.w	fp, #0
 801aa7c:	e7ba      	b.n	801a9f4 <__gethex+0x1e4>
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	42b3      	cmp	r3, r6
 801aa82:	dd73      	ble.n	801ab6c <__gethex+0x35c>
 801aa84:	1b9e      	subs	r6, r3, r6
 801aa86:	42b5      	cmp	r5, r6
 801aa88:	dc34      	bgt.n	801aaf4 <__gethex+0x2e4>
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	2b02      	cmp	r3, #2
 801aa8e:	d023      	beq.n	801aad8 <__gethex+0x2c8>
 801aa90:	2b03      	cmp	r3, #3
 801aa92:	d025      	beq.n	801aae0 <__gethex+0x2d0>
 801aa94:	2b01      	cmp	r3, #1
 801aa96:	d115      	bne.n	801aac4 <__gethex+0x2b4>
 801aa98:	42b5      	cmp	r5, r6
 801aa9a:	d113      	bne.n	801aac4 <__gethex+0x2b4>
 801aa9c:	2d01      	cmp	r5, #1
 801aa9e:	d10b      	bne.n	801aab8 <__gethex+0x2a8>
 801aaa0:	9a02      	ldr	r2, [sp, #8]
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	6013      	str	r3, [r2, #0]
 801aaa6:	2301      	movs	r3, #1
 801aaa8:	6123      	str	r3, [r4, #16]
 801aaaa:	f8ca 3000 	str.w	r3, [sl]
 801aaae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aab0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801aab4:	601c      	str	r4, [r3, #0]
 801aab6:	e735      	b.n	801a924 <__gethex+0x114>
 801aab8:	1e69      	subs	r1, r5, #1
 801aaba:	4620      	mov	r0, r4
 801aabc:	f7fe fd49 	bl	8019552 <__any_on>
 801aac0:	2800      	cmp	r0, #0
 801aac2:	d1ed      	bne.n	801aaa0 <__gethex+0x290>
 801aac4:	4621      	mov	r1, r4
 801aac6:	4648      	mov	r0, r9
 801aac8:	f7fe f8fa 	bl	8018cc0 <_Bfree>
 801aacc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aace:	2300      	movs	r3, #0
 801aad0:	6013      	str	r3, [r2, #0]
 801aad2:	f04f 0850 	mov.w	r8, #80	; 0x50
 801aad6:	e725      	b.n	801a924 <__gethex+0x114>
 801aad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d1f2      	bne.n	801aac4 <__gethex+0x2b4>
 801aade:	e7df      	b.n	801aaa0 <__gethex+0x290>
 801aae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d1dc      	bne.n	801aaa0 <__gethex+0x290>
 801aae6:	e7ed      	b.n	801aac4 <__gethex+0x2b4>
 801aae8:	0801b814 	.word	0x0801b814
 801aaec:	0801b6ad 	.word	0x0801b6ad
 801aaf0:	0801b9be 	.word	0x0801b9be
 801aaf4:	f106 38ff 	add.w	r8, r6, #4294967295
 801aaf8:	f1bb 0f00 	cmp.w	fp, #0
 801aafc:	d133      	bne.n	801ab66 <__gethex+0x356>
 801aafe:	f1b8 0f00 	cmp.w	r8, #0
 801ab02:	d004      	beq.n	801ab0e <__gethex+0x2fe>
 801ab04:	4641      	mov	r1, r8
 801ab06:	4620      	mov	r0, r4
 801ab08:	f7fe fd23 	bl	8019552 <__any_on>
 801ab0c:	4683      	mov	fp, r0
 801ab0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ab12:	2301      	movs	r3, #1
 801ab14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ab18:	f008 081f 	and.w	r8, r8, #31
 801ab1c:	fa03 f308 	lsl.w	r3, r3, r8
 801ab20:	4213      	tst	r3, r2
 801ab22:	4631      	mov	r1, r6
 801ab24:	4620      	mov	r0, r4
 801ab26:	bf18      	it	ne
 801ab28:	f04b 0b02 	orrne.w	fp, fp, #2
 801ab2c:	1bad      	subs	r5, r5, r6
 801ab2e:	f7ff fe07 	bl	801a740 <rshift>
 801ab32:	687e      	ldr	r6, [r7, #4]
 801ab34:	f04f 0802 	mov.w	r8, #2
 801ab38:	f1bb 0f00 	cmp.w	fp, #0
 801ab3c:	d04a      	beq.n	801abd4 <__gethex+0x3c4>
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	2b02      	cmp	r3, #2
 801ab42:	d016      	beq.n	801ab72 <__gethex+0x362>
 801ab44:	2b03      	cmp	r3, #3
 801ab46:	d018      	beq.n	801ab7a <__gethex+0x36a>
 801ab48:	2b01      	cmp	r3, #1
 801ab4a:	d109      	bne.n	801ab60 <__gethex+0x350>
 801ab4c:	f01b 0f02 	tst.w	fp, #2
 801ab50:	d006      	beq.n	801ab60 <__gethex+0x350>
 801ab52:	f8da 3000 	ldr.w	r3, [sl]
 801ab56:	ea4b 0b03 	orr.w	fp, fp, r3
 801ab5a:	f01b 0f01 	tst.w	fp, #1
 801ab5e:	d10f      	bne.n	801ab80 <__gethex+0x370>
 801ab60:	f048 0810 	orr.w	r8, r8, #16
 801ab64:	e036      	b.n	801abd4 <__gethex+0x3c4>
 801ab66:	f04f 0b01 	mov.w	fp, #1
 801ab6a:	e7d0      	b.n	801ab0e <__gethex+0x2fe>
 801ab6c:	f04f 0801 	mov.w	r8, #1
 801ab70:	e7e2      	b.n	801ab38 <__gethex+0x328>
 801ab72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab74:	f1c3 0301 	rsb	r3, r3, #1
 801ab78:	930f      	str	r3, [sp, #60]	; 0x3c
 801ab7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d0ef      	beq.n	801ab60 <__gethex+0x350>
 801ab80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ab84:	f104 0214 	add.w	r2, r4, #20
 801ab88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ab8c:	9301      	str	r3, [sp, #4]
 801ab8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ab92:	2300      	movs	r3, #0
 801ab94:	4694      	mov	ip, r2
 801ab96:	f852 1b04 	ldr.w	r1, [r2], #4
 801ab9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ab9e:	d01e      	beq.n	801abde <__gethex+0x3ce>
 801aba0:	3101      	adds	r1, #1
 801aba2:	f8cc 1000 	str.w	r1, [ip]
 801aba6:	f1b8 0f02 	cmp.w	r8, #2
 801abaa:	f104 0214 	add.w	r2, r4, #20
 801abae:	d13d      	bne.n	801ac2c <__gethex+0x41c>
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	3b01      	subs	r3, #1
 801abb4:	42ab      	cmp	r3, r5
 801abb6:	d10b      	bne.n	801abd0 <__gethex+0x3c0>
 801abb8:	1169      	asrs	r1, r5, #5
 801abba:	2301      	movs	r3, #1
 801abbc:	f005 051f 	and.w	r5, r5, #31
 801abc0:	fa03 f505 	lsl.w	r5, r3, r5
 801abc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801abc8:	421d      	tst	r5, r3
 801abca:	bf18      	it	ne
 801abcc:	f04f 0801 	movne.w	r8, #1
 801abd0:	f048 0820 	orr.w	r8, r8, #32
 801abd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abd6:	601c      	str	r4, [r3, #0]
 801abd8:	9b02      	ldr	r3, [sp, #8]
 801abda:	601e      	str	r6, [r3, #0]
 801abdc:	e6a2      	b.n	801a924 <__gethex+0x114>
 801abde:	4290      	cmp	r0, r2
 801abe0:	f842 3c04 	str.w	r3, [r2, #-4]
 801abe4:	d8d6      	bhi.n	801ab94 <__gethex+0x384>
 801abe6:	68a2      	ldr	r2, [r4, #8]
 801abe8:	4593      	cmp	fp, r2
 801abea:	db17      	blt.n	801ac1c <__gethex+0x40c>
 801abec:	6861      	ldr	r1, [r4, #4]
 801abee:	4648      	mov	r0, r9
 801abf0:	3101      	adds	r1, #1
 801abf2:	f7fe f825 	bl	8018c40 <_Balloc>
 801abf6:	4682      	mov	sl, r0
 801abf8:	b918      	cbnz	r0, 801ac02 <__gethex+0x3f2>
 801abfa:	4b1b      	ldr	r3, [pc, #108]	; (801ac68 <__gethex+0x458>)
 801abfc:	4602      	mov	r2, r0
 801abfe:	2184      	movs	r1, #132	; 0x84
 801ac00:	e6b3      	b.n	801a96a <__gethex+0x15a>
 801ac02:	6922      	ldr	r2, [r4, #16]
 801ac04:	3202      	adds	r2, #2
 801ac06:	f104 010c 	add.w	r1, r4, #12
 801ac0a:	0092      	lsls	r2, r2, #2
 801ac0c:	300c      	adds	r0, #12
 801ac0e:	f7fd f90e 	bl	8017e2e <memcpy>
 801ac12:	4621      	mov	r1, r4
 801ac14:	4648      	mov	r0, r9
 801ac16:	f7fe f853 	bl	8018cc0 <_Bfree>
 801ac1a:	4654      	mov	r4, sl
 801ac1c:	6922      	ldr	r2, [r4, #16]
 801ac1e:	1c51      	adds	r1, r2, #1
 801ac20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ac24:	6121      	str	r1, [r4, #16]
 801ac26:	2101      	movs	r1, #1
 801ac28:	6151      	str	r1, [r2, #20]
 801ac2a:	e7bc      	b.n	801aba6 <__gethex+0x396>
 801ac2c:	6921      	ldr	r1, [r4, #16]
 801ac2e:	4559      	cmp	r1, fp
 801ac30:	dd0b      	ble.n	801ac4a <__gethex+0x43a>
 801ac32:	2101      	movs	r1, #1
 801ac34:	4620      	mov	r0, r4
 801ac36:	f7ff fd83 	bl	801a740 <rshift>
 801ac3a:	68bb      	ldr	r3, [r7, #8]
 801ac3c:	3601      	adds	r6, #1
 801ac3e:	42b3      	cmp	r3, r6
 801ac40:	f6ff aedb 	blt.w	801a9fa <__gethex+0x1ea>
 801ac44:	f04f 0801 	mov.w	r8, #1
 801ac48:	e7c2      	b.n	801abd0 <__gethex+0x3c0>
 801ac4a:	f015 051f 	ands.w	r5, r5, #31
 801ac4e:	d0f9      	beq.n	801ac44 <__gethex+0x434>
 801ac50:	9b01      	ldr	r3, [sp, #4]
 801ac52:	441a      	add	r2, r3
 801ac54:	f1c5 0520 	rsb	r5, r5, #32
 801ac58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ac5c:	f7fe f8e2 	bl	8018e24 <__hi0bits>
 801ac60:	42a8      	cmp	r0, r5
 801ac62:	dbe6      	blt.n	801ac32 <__gethex+0x422>
 801ac64:	e7ee      	b.n	801ac44 <__gethex+0x434>
 801ac66:	bf00      	nop
 801ac68:	0801b6ad 	.word	0x0801b6ad

0801ac6c <L_shift>:
 801ac6c:	f1c2 0208 	rsb	r2, r2, #8
 801ac70:	0092      	lsls	r2, r2, #2
 801ac72:	b570      	push	{r4, r5, r6, lr}
 801ac74:	f1c2 0620 	rsb	r6, r2, #32
 801ac78:	6843      	ldr	r3, [r0, #4]
 801ac7a:	6804      	ldr	r4, [r0, #0]
 801ac7c:	fa03 f506 	lsl.w	r5, r3, r6
 801ac80:	432c      	orrs	r4, r5
 801ac82:	40d3      	lsrs	r3, r2
 801ac84:	6004      	str	r4, [r0, #0]
 801ac86:	f840 3f04 	str.w	r3, [r0, #4]!
 801ac8a:	4288      	cmp	r0, r1
 801ac8c:	d3f4      	bcc.n	801ac78 <L_shift+0xc>
 801ac8e:	bd70      	pop	{r4, r5, r6, pc}

0801ac90 <__match>:
 801ac90:	b530      	push	{r4, r5, lr}
 801ac92:	6803      	ldr	r3, [r0, #0]
 801ac94:	3301      	adds	r3, #1
 801ac96:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac9a:	b914      	cbnz	r4, 801aca2 <__match+0x12>
 801ac9c:	6003      	str	r3, [r0, #0]
 801ac9e:	2001      	movs	r0, #1
 801aca0:	bd30      	pop	{r4, r5, pc}
 801aca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aca6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801acaa:	2d19      	cmp	r5, #25
 801acac:	bf98      	it	ls
 801acae:	3220      	addls	r2, #32
 801acb0:	42a2      	cmp	r2, r4
 801acb2:	d0f0      	beq.n	801ac96 <__match+0x6>
 801acb4:	2000      	movs	r0, #0
 801acb6:	e7f3      	b.n	801aca0 <__match+0x10>

0801acb8 <__hexnan>:
 801acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acbc:	680b      	ldr	r3, [r1, #0]
 801acbe:	6801      	ldr	r1, [r0, #0]
 801acc0:	115e      	asrs	r6, r3, #5
 801acc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801acc6:	f013 031f 	ands.w	r3, r3, #31
 801acca:	b087      	sub	sp, #28
 801accc:	bf18      	it	ne
 801acce:	3604      	addne	r6, #4
 801acd0:	2500      	movs	r5, #0
 801acd2:	1f37      	subs	r7, r6, #4
 801acd4:	4682      	mov	sl, r0
 801acd6:	4690      	mov	r8, r2
 801acd8:	9301      	str	r3, [sp, #4]
 801acda:	f846 5c04 	str.w	r5, [r6, #-4]
 801acde:	46b9      	mov	r9, r7
 801ace0:	463c      	mov	r4, r7
 801ace2:	9502      	str	r5, [sp, #8]
 801ace4:	46ab      	mov	fp, r5
 801ace6:	784a      	ldrb	r2, [r1, #1]
 801ace8:	1c4b      	adds	r3, r1, #1
 801acea:	9303      	str	r3, [sp, #12]
 801acec:	b342      	cbz	r2, 801ad40 <__hexnan+0x88>
 801acee:	4610      	mov	r0, r2
 801acf0:	9105      	str	r1, [sp, #20]
 801acf2:	9204      	str	r2, [sp, #16]
 801acf4:	f7ff fd76 	bl	801a7e4 <__hexdig_fun>
 801acf8:	2800      	cmp	r0, #0
 801acfa:	d14f      	bne.n	801ad9c <__hexnan+0xe4>
 801acfc:	9a04      	ldr	r2, [sp, #16]
 801acfe:	9905      	ldr	r1, [sp, #20]
 801ad00:	2a20      	cmp	r2, #32
 801ad02:	d818      	bhi.n	801ad36 <__hexnan+0x7e>
 801ad04:	9b02      	ldr	r3, [sp, #8]
 801ad06:	459b      	cmp	fp, r3
 801ad08:	dd13      	ble.n	801ad32 <__hexnan+0x7a>
 801ad0a:	454c      	cmp	r4, r9
 801ad0c:	d206      	bcs.n	801ad1c <__hexnan+0x64>
 801ad0e:	2d07      	cmp	r5, #7
 801ad10:	dc04      	bgt.n	801ad1c <__hexnan+0x64>
 801ad12:	462a      	mov	r2, r5
 801ad14:	4649      	mov	r1, r9
 801ad16:	4620      	mov	r0, r4
 801ad18:	f7ff ffa8 	bl	801ac6c <L_shift>
 801ad1c:	4544      	cmp	r4, r8
 801ad1e:	d950      	bls.n	801adc2 <__hexnan+0x10a>
 801ad20:	2300      	movs	r3, #0
 801ad22:	f1a4 0904 	sub.w	r9, r4, #4
 801ad26:	f844 3c04 	str.w	r3, [r4, #-4]
 801ad2a:	f8cd b008 	str.w	fp, [sp, #8]
 801ad2e:	464c      	mov	r4, r9
 801ad30:	461d      	mov	r5, r3
 801ad32:	9903      	ldr	r1, [sp, #12]
 801ad34:	e7d7      	b.n	801ace6 <__hexnan+0x2e>
 801ad36:	2a29      	cmp	r2, #41	; 0x29
 801ad38:	d155      	bne.n	801ade6 <__hexnan+0x12e>
 801ad3a:	3102      	adds	r1, #2
 801ad3c:	f8ca 1000 	str.w	r1, [sl]
 801ad40:	f1bb 0f00 	cmp.w	fp, #0
 801ad44:	d04f      	beq.n	801ade6 <__hexnan+0x12e>
 801ad46:	454c      	cmp	r4, r9
 801ad48:	d206      	bcs.n	801ad58 <__hexnan+0xa0>
 801ad4a:	2d07      	cmp	r5, #7
 801ad4c:	dc04      	bgt.n	801ad58 <__hexnan+0xa0>
 801ad4e:	462a      	mov	r2, r5
 801ad50:	4649      	mov	r1, r9
 801ad52:	4620      	mov	r0, r4
 801ad54:	f7ff ff8a 	bl	801ac6c <L_shift>
 801ad58:	4544      	cmp	r4, r8
 801ad5a:	d934      	bls.n	801adc6 <__hexnan+0x10e>
 801ad5c:	f1a8 0204 	sub.w	r2, r8, #4
 801ad60:	4623      	mov	r3, r4
 801ad62:	f853 1b04 	ldr.w	r1, [r3], #4
 801ad66:	f842 1f04 	str.w	r1, [r2, #4]!
 801ad6a:	429f      	cmp	r7, r3
 801ad6c:	d2f9      	bcs.n	801ad62 <__hexnan+0xaa>
 801ad6e:	1b3b      	subs	r3, r7, r4
 801ad70:	f023 0303 	bic.w	r3, r3, #3
 801ad74:	3304      	adds	r3, #4
 801ad76:	3e03      	subs	r6, #3
 801ad78:	3401      	adds	r4, #1
 801ad7a:	42a6      	cmp	r6, r4
 801ad7c:	bf38      	it	cc
 801ad7e:	2304      	movcc	r3, #4
 801ad80:	4443      	add	r3, r8
 801ad82:	2200      	movs	r2, #0
 801ad84:	f843 2b04 	str.w	r2, [r3], #4
 801ad88:	429f      	cmp	r7, r3
 801ad8a:	d2fb      	bcs.n	801ad84 <__hexnan+0xcc>
 801ad8c:	683b      	ldr	r3, [r7, #0]
 801ad8e:	b91b      	cbnz	r3, 801ad98 <__hexnan+0xe0>
 801ad90:	4547      	cmp	r7, r8
 801ad92:	d126      	bne.n	801ade2 <__hexnan+0x12a>
 801ad94:	2301      	movs	r3, #1
 801ad96:	603b      	str	r3, [r7, #0]
 801ad98:	2005      	movs	r0, #5
 801ad9a:	e025      	b.n	801ade8 <__hexnan+0x130>
 801ad9c:	3501      	adds	r5, #1
 801ad9e:	2d08      	cmp	r5, #8
 801ada0:	f10b 0b01 	add.w	fp, fp, #1
 801ada4:	dd06      	ble.n	801adb4 <__hexnan+0xfc>
 801ada6:	4544      	cmp	r4, r8
 801ada8:	d9c3      	bls.n	801ad32 <__hexnan+0x7a>
 801adaa:	2300      	movs	r3, #0
 801adac:	f844 3c04 	str.w	r3, [r4, #-4]
 801adb0:	2501      	movs	r5, #1
 801adb2:	3c04      	subs	r4, #4
 801adb4:	6822      	ldr	r2, [r4, #0]
 801adb6:	f000 000f 	and.w	r0, r0, #15
 801adba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801adbe:	6020      	str	r0, [r4, #0]
 801adc0:	e7b7      	b.n	801ad32 <__hexnan+0x7a>
 801adc2:	2508      	movs	r5, #8
 801adc4:	e7b5      	b.n	801ad32 <__hexnan+0x7a>
 801adc6:	9b01      	ldr	r3, [sp, #4]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d0df      	beq.n	801ad8c <__hexnan+0xd4>
 801adcc:	f1c3 0320 	rsb	r3, r3, #32
 801add0:	f04f 32ff 	mov.w	r2, #4294967295
 801add4:	40da      	lsrs	r2, r3
 801add6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801adda:	4013      	ands	r3, r2
 801addc:	f846 3c04 	str.w	r3, [r6, #-4]
 801ade0:	e7d4      	b.n	801ad8c <__hexnan+0xd4>
 801ade2:	3f04      	subs	r7, #4
 801ade4:	e7d2      	b.n	801ad8c <__hexnan+0xd4>
 801ade6:	2004      	movs	r0, #4
 801ade8:	b007      	add	sp, #28
 801adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801adee <__ascii_mbtowc>:
 801adee:	b082      	sub	sp, #8
 801adf0:	b901      	cbnz	r1, 801adf4 <__ascii_mbtowc+0x6>
 801adf2:	a901      	add	r1, sp, #4
 801adf4:	b142      	cbz	r2, 801ae08 <__ascii_mbtowc+0x1a>
 801adf6:	b14b      	cbz	r3, 801ae0c <__ascii_mbtowc+0x1e>
 801adf8:	7813      	ldrb	r3, [r2, #0]
 801adfa:	600b      	str	r3, [r1, #0]
 801adfc:	7812      	ldrb	r2, [r2, #0]
 801adfe:	1e10      	subs	r0, r2, #0
 801ae00:	bf18      	it	ne
 801ae02:	2001      	movne	r0, #1
 801ae04:	b002      	add	sp, #8
 801ae06:	4770      	bx	lr
 801ae08:	4610      	mov	r0, r2
 801ae0a:	e7fb      	b.n	801ae04 <__ascii_mbtowc+0x16>
 801ae0c:	f06f 0001 	mvn.w	r0, #1
 801ae10:	e7f8      	b.n	801ae04 <__ascii_mbtowc+0x16>

0801ae12 <_realloc_r>:
 801ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae16:	4680      	mov	r8, r0
 801ae18:	4614      	mov	r4, r2
 801ae1a:	460e      	mov	r6, r1
 801ae1c:	b921      	cbnz	r1, 801ae28 <_realloc_r+0x16>
 801ae1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae22:	4611      	mov	r1, r2
 801ae24:	f7fd be80 	b.w	8018b28 <_malloc_r>
 801ae28:	b92a      	cbnz	r2, 801ae36 <_realloc_r+0x24>
 801ae2a:	f7fd fe09 	bl	8018a40 <_free_r>
 801ae2e:	4625      	mov	r5, r4
 801ae30:	4628      	mov	r0, r5
 801ae32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae36:	f000 f842 	bl	801aebe <_malloc_usable_size_r>
 801ae3a:	4284      	cmp	r4, r0
 801ae3c:	4607      	mov	r7, r0
 801ae3e:	d802      	bhi.n	801ae46 <_realloc_r+0x34>
 801ae40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ae44:	d812      	bhi.n	801ae6c <_realloc_r+0x5a>
 801ae46:	4621      	mov	r1, r4
 801ae48:	4640      	mov	r0, r8
 801ae4a:	f7fd fe6d 	bl	8018b28 <_malloc_r>
 801ae4e:	4605      	mov	r5, r0
 801ae50:	2800      	cmp	r0, #0
 801ae52:	d0ed      	beq.n	801ae30 <_realloc_r+0x1e>
 801ae54:	42bc      	cmp	r4, r7
 801ae56:	4622      	mov	r2, r4
 801ae58:	4631      	mov	r1, r6
 801ae5a:	bf28      	it	cs
 801ae5c:	463a      	movcs	r2, r7
 801ae5e:	f7fc ffe6 	bl	8017e2e <memcpy>
 801ae62:	4631      	mov	r1, r6
 801ae64:	4640      	mov	r0, r8
 801ae66:	f7fd fdeb 	bl	8018a40 <_free_r>
 801ae6a:	e7e1      	b.n	801ae30 <_realloc_r+0x1e>
 801ae6c:	4635      	mov	r5, r6
 801ae6e:	e7df      	b.n	801ae30 <_realloc_r+0x1e>

0801ae70 <__ascii_wctomb>:
 801ae70:	b149      	cbz	r1, 801ae86 <__ascii_wctomb+0x16>
 801ae72:	2aff      	cmp	r2, #255	; 0xff
 801ae74:	bf85      	ittet	hi
 801ae76:	238a      	movhi	r3, #138	; 0x8a
 801ae78:	6003      	strhi	r3, [r0, #0]
 801ae7a:	700a      	strbls	r2, [r1, #0]
 801ae7c:	f04f 30ff 	movhi.w	r0, #4294967295
 801ae80:	bf98      	it	ls
 801ae82:	2001      	movls	r0, #1
 801ae84:	4770      	bx	lr
 801ae86:	4608      	mov	r0, r1
 801ae88:	4770      	bx	lr
	...

0801ae8c <fiprintf>:
 801ae8c:	b40e      	push	{r1, r2, r3}
 801ae8e:	b503      	push	{r0, r1, lr}
 801ae90:	4601      	mov	r1, r0
 801ae92:	ab03      	add	r3, sp, #12
 801ae94:	4805      	ldr	r0, [pc, #20]	; (801aeac <fiprintf+0x20>)
 801ae96:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae9a:	6800      	ldr	r0, [r0, #0]
 801ae9c:	9301      	str	r3, [sp, #4]
 801ae9e:	f000 f83f 	bl	801af20 <_vfiprintf_r>
 801aea2:	b002      	add	sp, #8
 801aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aea8:	b003      	add	sp, #12
 801aeaa:	4770      	bx	lr
 801aeac:	24000158 	.word	0x24000158

0801aeb0 <abort>:
 801aeb0:	b508      	push	{r3, lr}
 801aeb2:	2006      	movs	r0, #6
 801aeb4:	f000 fa0c 	bl	801b2d0 <raise>
 801aeb8:	2001      	movs	r0, #1
 801aeba:	f7e8 fb6b 	bl	8003594 <_exit>

0801aebe <_malloc_usable_size_r>:
 801aebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aec2:	1f18      	subs	r0, r3, #4
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	bfbc      	itt	lt
 801aec8:	580b      	ldrlt	r3, [r1, r0]
 801aeca:	18c0      	addlt	r0, r0, r3
 801aecc:	4770      	bx	lr

0801aece <__sfputc_r>:
 801aece:	6893      	ldr	r3, [r2, #8]
 801aed0:	3b01      	subs	r3, #1
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	b410      	push	{r4}
 801aed6:	6093      	str	r3, [r2, #8]
 801aed8:	da08      	bge.n	801aeec <__sfputc_r+0x1e>
 801aeda:	6994      	ldr	r4, [r2, #24]
 801aedc:	42a3      	cmp	r3, r4
 801aede:	db01      	blt.n	801aee4 <__sfputc_r+0x16>
 801aee0:	290a      	cmp	r1, #10
 801aee2:	d103      	bne.n	801aeec <__sfputc_r+0x1e>
 801aee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aee8:	f000 b934 	b.w	801b154 <__swbuf_r>
 801aeec:	6813      	ldr	r3, [r2, #0]
 801aeee:	1c58      	adds	r0, r3, #1
 801aef0:	6010      	str	r0, [r2, #0]
 801aef2:	7019      	strb	r1, [r3, #0]
 801aef4:	4608      	mov	r0, r1
 801aef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aefa:	4770      	bx	lr

0801aefc <__sfputs_r>:
 801aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aefe:	4606      	mov	r6, r0
 801af00:	460f      	mov	r7, r1
 801af02:	4614      	mov	r4, r2
 801af04:	18d5      	adds	r5, r2, r3
 801af06:	42ac      	cmp	r4, r5
 801af08:	d101      	bne.n	801af0e <__sfputs_r+0x12>
 801af0a:	2000      	movs	r0, #0
 801af0c:	e007      	b.n	801af1e <__sfputs_r+0x22>
 801af0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af12:	463a      	mov	r2, r7
 801af14:	4630      	mov	r0, r6
 801af16:	f7ff ffda 	bl	801aece <__sfputc_r>
 801af1a:	1c43      	adds	r3, r0, #1
 801af1c:	d1f3      	bne.n	801af06 <__sfputs_r+0xa>
 801af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af20 <_vfiprintf_r>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	460d      	mov	r5, r1
 801af26:	b09d      	sub	sp, #116	; 0x74
 801af28:	4614      	mov	r4, r2
 801af2a:	4698      	mov	r8, r3
 801af2c:	4606      	mov	r6, r0
 801af2e:	b118      	cbz	r0, 801af38 <_vfiprintf_r+0x18>
 801af30:	6a03      	ldr	r3, [r0, #32]
 801af32:	b90b      	cbnz	r3, 801af38 <_vfiprintf_r+0x18>
 801af34:	f7fc fe62 	bl	8017bfc <__sinit>
 801af38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af3a:	07d9      	lsls	r1, r3, #31
 801af3c:	d405      	bmi.n	801af4a <_vfiprintf_r+0x2a>
 801af3e:	89ab      	ldrh	r3, [r5, #12]
 801af40:	059a      	lsls	r2, r3, #22
 801af42:	d402      	bmi.n	801af4a <_vfiprintf_r+0x2a>
 801af44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af46:	f7fc ff70 	bl	8017e2a <__retarget_lock_acquire_recursive>
 801af4a:	89ab      	ldrh	r3, [r5, #12]
 801af4c:	071b      	lsls	r3, r3, #28
 801af4e:	d501      	bpl.n	801af54 <_vfiprintf_r+0x34>
 801af50:	692b      	ldr	r3, [r5, #16]
 801af52:	b99b      	cbnz	r3, 801af7c <_vfiprintf_r+0x5c>
 801af54:	4629      	mov	r1, r5
 801af56:	4630      	mov	r0, r6
 801af58:	f000 f93a 	bl	801b1d0 <__swsetup_r>
 801af5c:	b170      	cbz	r0, 801af7c <_vfiprintf_r+0x5c>
 801af5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af60:	07dc      	lsls	r4, r3, #31
 801af62:	d504      	bpl.n	801af6e <_vfiprintf_r+0x4e>
 801af64:	f04f 30ff 	mov.w	r0, #4294967295
 801af68:	b01d      	add	sp, #116	; 0x74
 801af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af6e:	89ab      	ldrh	r3, [r5, #12]
 801af70:	0598      	lsls	r0, r3, #22
 801af72:	d4f7      	bmi.n	801af64 <_vfiprintf_r+0x44>
 801af74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af76:	f7fc ff59 	bl	8017e2c <__retarget_lock_release_recursive>
 801af7a:	e7f3      	b.n	801af64 <_vfiprintf_r+0x44>
 801af7c:	2300      	movs	r3, #0
 801af7e:	9309      	str	r3, [sp, #36]	; 0x24
 801af80:	2320      	movs	r3, #32
 801af82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af86:	f8cd 800c 	str.w	r8, [sp, #12]
 801af8a:	2330      	movs	r3, #48	; 0x30
 801af8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b140 <_vfiprintf_r+0x220>
 801af90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af94:	f04f 0901 	mov.w	r9, #1
 801af98:	4623      	mov	r3, r4
 801af9a:	469a      	mov	sl, r3
 801af9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afa0:	b10a      	cbz	r2, 801afa6 <_vfiprintf_r+0x86>
 801afa2:	2a25      	cmp	r2, #37	; 0x25
 801afa4:	d1f9      	bne.n	801af9a <_vfiprintf_r+0x7a>
 801afa6:	ebba 0b04 	subs.w	fp, sl, r4
 801afaa:	d00b      	beq.n	801afc4 <_vfiprintf_r+0xa4>
 801afac:	465b      	mov	r3, fp
 801afae:	4622      	mov	r2, r4
 801afb0:	4629      	mov	r1, r5
 801afb2:	4630      	mov	r0, r6
 801afb4:	f7ff ffa2 	bl	801aefc <__sfputs_r>
 801afb8:	3001      	adds	r0, #1
 801afba:	f000 80a9 	beq.w	801b110 <_vfiprintf_r+0x1f0>
 801afbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afc0:	445a      	add	r2, fp
 801afc2:	9209      	str	r2, [sp, #36]	; 0x24
 801afc4:	f89a 3000 	ldrb.w	r3, [sl]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	f000 80a1 	beq.w	801b110 <_vfiprintf_r+0x1f0>
 801afce:	2300      	movs	r3, #0
 801afd0:	f04f 32ff 	mov.w	r2, #4294967295
 801afd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afd8:	f10a 0a01 	add.w	sl, sl, #1
 801afdc:	9304      	str	r3, [sp, #16]
 801afde:	9307      	str	r3, [sp, #28]
 801afe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801afe4:	931a      	str	r3, [sp, #104]	; 0x68
 801afe6:	4654      	mov	r4, sl
 801afe8:	2205      	movs	r2, #5
 801afea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afee:	4854      	ldr	r0, [pc, #336]	; (801b140 <_vfiprintf_r+0x220>)
 801aff0:	f7e5 f98e 	bl	8000310 <memchr>
 801aff4:	9a04      	ldr	r2, [sp, #16]
 801aff6:	b9d8      	cbnz	r0, 801b030 <_vfiprintf_r+0x110>
 801aff8:	06d1      	lsls	r1, r2, #27
 801affa:	bf44      	itt	mi
 801affc:	2320      	movmi	r3, #32
 801affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b002:	0713      	lsls	r3, r2, #28
 801b004:	bf44      	itt	mi
 801b006:	232b      	movmi	r3, #43	; 0x2b
 801b008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b00c:	f89a 3000 	ldrb.w	r3, [sl]
 801b010:	2b2a      	cmp	r3, #42	; 0x2a
 801b012:	d015      	beq.n	801b040 <_vfiprintf_r+0x120>
 801b014:	9a07      	ldr	r2, [sp, #28]
 801b016:	4654      	mov	r4, sl
 801b018:	2000      	movs	r0, #0
 801b01a:	f04f 0c0a 	mov.w	ip, #10
 801b01e:	4621      	mov	r1, r4
 801b020:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b024:	3b30      	subs	r3, #48	; 0x30
 801b026:	2b09      	cmp	r3, #9
 801b028:	d94d      	bls.n	801b0c6 <_vfiprintf_r+0x1a6>
 801b02a:	b1b0      	cbz	r0, 801b05a <_vfiprintf_r+0x13a>
 801b02c:	9207      	str	r2, [sp, #28]
 801b02e:	e014      	b.n	801b05a <_vfiprintf_r+0x13a>
 801b030:	eba0 0308 	sub.w	r3, r0, r8
 801b034:	fa09 f303 	lsl.w	r3, r9, r3
 801b038:	4313      	orrs	r3, r2
 801b03a:	9304      	str	r3, [sp, #16]
 801b03c:	46a2      	mov	sl, r4
 801b03e:	e7d2      	b.n	801afe6 <_vfiprintf_r+0xc6>
 801b040:	9b03      	ldr	r3, [sp, #12]
 801b042:	1d19      	adds	r1, r3, #4
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	9103      	str	r1, [sp, #12]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	bfbb      	ittet	lt
 801b04c:	425b      	neglt	r3, r3
 801b04e:	f042 0202 	orrlt.w	r2, r2, #2
 801b052:	9307      	strge	r3, [sp, #28]
 801b054:	9307      	strlt	r3, [sp, #28]
 801b056:	bfb8      	it	lt
 801b058:	9204      	strlt	r2, [sp, #16]
 801b05a:	7823      	ldrb	r3, [r4, #0]
 801b05c:	2b2e      	cmp	r3, #46	; 0x2e
 801b05e:	d10c      	bne.n	801b07a <_vfiprintf_r+0x15a>
 801b060:	7863      	ldrb	r3, [r4, #1]
 801b062:	2b2a      	cmp	r3, #42	; 0x2a
 801b064:	d134      	bne.n	801b0d0 <_vfiprintf_r+0x1b0>
 801b066:	9b03      	ldr	r3, [sp, #12]
 801b068:	1d1a      	adds	r2, r3, #4
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	9203      	str	r2, [sp, #12]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	bfb8      	it	lt
 801b072:	f04f 33ff 	movlt.w	r3, #4294967295
 801b076:	3402      	adds	r4, #2
 801b078:	9305      	str	r3, [sp, #20]
 801b07a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b150 <_vfiprintf_r+0x230>
 801b07e:	7821      	ldrb	r1, [r4, #0]
 801b080:	2203      	movs	r2, #3
 801b082:	4650      	mov	r0, sl
 801b084:	f7e5 f944 	bl	8000310 <memchr>
 801b088:	b138      	cbz	r0, 801b09a <_vfiprintf_r+0x17a>
 801b08a:	9b04      	ldr	r3, [sp, #16]
 801b08c:	eba0 000a 	sub.w	r0, r0, sl
 801b090:	2240      	movs	r2, #64	; 0x40
 801b092:	4082      	lsls	r2, r0
 801b094:	4313      	orrs	r3, r2
 801b096:	3401      	adds	r4, #1
 801b098:	9304      	str	r3, [sp, #16]
 801b09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b09e:	4829      	ldr	r0, [pc, #164]	; (801b144 <_vfiprintf_r+0x224>)
 801b0a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b0a4:	2206      	movs	r2, #6
 801b0a6:	f7e5 f933 	bl	8000310 <memchr>
 801b0aa:	2800      	cmp	r0, #0
 801b0ac:	d03f      	beq.n	801b12e <_vfiprintf_r+0x20e>
 801b0ae:	4b26      	ldr	r3, [pc, #152]	; (801b148 <_vfiprintf_r+0x228>)
 801b0b0:	bb1b      	cbnz	r3, 801b0fa <_vfiprintf_r+0x1da>
 801b0b2:	9b03      	ldr	r3, [sp, #12]
 801b0b4:	3307      	adds	r3, #7
 801b0b6:	f023 0307 	bic.w	r3, r3, #7
 801b0ba:	3308      	adds	r3, #8
 801b0bc:	9303      	str	r3, [sp, #12]
 801b0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0c0:	443b      	add	r3, r7
 801b0c2:	9309      	str	r3, [sp, #36]	; 0x24
 801b0c4:	e768      	b.n	801af98 <_vfiprintf_r+0x78>
 801b0c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0ca:	460c      	mov	r4, r1
 801b0cc:	2001      	movs	r0, #1
 801b0ce:	e7a6      	b.n	801b01e <_vfiprintf_r+0xfe>
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	3401      	adds	r4, #1
 801b0d4:	9305      	str	r3, [sp, #20]
 801b0d6:	4619      	mov	r1, r3
 801b0d8:	f04f 0c0a 	mov.w	ip, #10
 801b0dc:	4620      	mov	r0, r4
 801b0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0e2:	3a30      	subs	r2, #48	; 0x30
 801b0e4:	2a09      	cmp	r2, #9
 801b0e6:	d903      	bls.n	801b0f0 <_vfiprintf_r+0x1d0>
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d0c6      	beq.n	801b07a <_vfiprintf_r+0x15a>
 801b0ec:	9105      	str	r1, [sp, #20]
 801b0ee:	e7c4      	b.n	801b07a <_vfiprintf_r+0x15a>
 801b0f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0f4:	4604      	mov	r4, r0
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	e7f0      	b.n	801b0dc <_vfiprintf_r+0x1bc>
 801b0fa:	ab03      	add	r3, sp, #12
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	462a      	mov	r2, r5
 801b100:	4b12      	ldr	r3, [pc, #72]	; (801b14c <_vfiprintf_r+0x22c>)
 801b102:	a904      	add	r1, sp, #16
 801b104:	4630      	mov	r0, r6
 801b106:	f7fb ff3f 	bl	8016f88 <_printf_float>
 801b10a:	4607      	mov	r7, r0
 801b10c:	1c78      	adds	r0, r7, #1
 801b10e:	d1d6      	bne.n	801b0be <_vfiprintf_r+0x19e>
 801b110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b112:	07d9      	lsls	r1, r3, #31
 801b114:	d405      	bmi.n	801b122 <_vfiprintf_r+0x202>
 801b116:	89ab      	ldrh	r3, [r5, #12]
 801b118:	059a      	lsls	r2, r3, #22
 801b11a:	d402      	bmi.n	801b122 <_vfiprintf_r+0x202>
 801b11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b11e:	f7fc fe85 	bl	8017e2c <__retarget_lock_release_recursive>
 801b122:	89ab      	ldrh	r3, [r5, #12]
 801b124:	065b      	lsls	r3, r3, #25
 801b126:	f53f af1d 	bmi.w	801af64 <_vfiprintf_r+0x44>
 801b12a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b12c:	e71c      	b.n	801af68 <_vfiprintf_r+0x48>
 801b12e:	ab03      	add	r3, sp, #12
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	462a      	mov	r2, r5
 801b134:	4b05      	ldr	r3, [pc, #20]	; (801b14c <_vfiprintf_r+0x22c>)
 801b136:	a904      	add	r1, sp, #16
 801b138:	4630      	mov	r0, r6
 801b13a:	f7fc f9ad 	bl	8017498 <_printf_i>
 801b13e:	e7e4      	b.n	801b10a <_vfiprintf_r+0x1ea>
 801b140:	0801b969 	.word	0x0801b969
 801b144:	0801b973 	.word	0x0801b973
 801b148:	08016f89 	.word	0x08016f89
 801b14c:	0801aefd 	.word	0x0801aefd
 801b150:	0801b96f 	.word	0x0801b96f

0801b154 <__swbuf_r>:
 801b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b156:	460e      	mov	r6, r1
 801b158:	4614      	mov	r4, r2
 801b15a:	4605      	mov	r5, r0
 801b15c:	b118      	cbz	r0, 801b166 <__swbuf_r+0x12>
 801b15e:	6a03      	ldr	r3, [r0, #32]
 801b160:	b90b      	cbnz	r3, 801b166 <__swbuf_r+0x12>
 801b162:	f7fc fd4b 	bl	8017bfc <__sinit>
 801b166:	69a3      	ldr	r3, [r4, #24]
 801b168:	60a3      	str	r3, [r4, #8]
 801b16a:	89a3      	ldrh	r3, [r4, #12]
 801b16c:	071a      	lsls	r2, r3, #28
 801b16e:	d525      	bpl.n	801b1bc <__swbuf_r+0x68>
 801b170:	6923      	ldr	r3, [r4, #16]
 801b172:	b31b      	cbz	r3, 801b1bc <__swbuf_r+0x68>
 801b174:	6823      	ldr	r3, [r4, #0]
 801b176:	6922      	ldr	r2, [r4, #16]
 801b178:	1a98      	subs	r0, r3, r2
 801b17a:	6963      	ldr	r3, [r4, #20]
 801b17c:	b2f6      	uxtb	r6, r6
 801b17e:	4283      	cmp	r3, r0
 801b180:	4637      	mov	r7, r6
 801b182:	dc04      	bgt.n	801b18e <__swbuf_r+0x3a>
 801b184:	4621      	mov	r1, r4
 801b186:	4628      	mov	r0, r5
 801b188:	f7ff fa38 	bl	801a5fc <_fflush_r>
 801b18c:	b9e0      	cbnz	r0, 801b1c8 <__swbuf_r+0x74>
 801b18e:	68a3      	ldr	r3, [r4, #8]
 801b190:	3b01      	subs	r3, #1
 801b192:	60a3      	str	r3, [r4, #8]
 801b194:	6823      	ldr	r3, [r4, #0]
 801b196:	1c5a      	adds	r2, r3, #1
 801b198:	6022      	str	r2, [r4, #0]
 801b19a:	701e      	strb	r6, [r3, #0]
 801b19c:	6962      	ldr	r2, [r4, #20]
 801b19e:	1c43      	adds	r3, r0, #1
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d004      	beq.n	801b1ae <__swbuf_r+0x5a>
 801b1a4:	89a3      	ldrh	r3, [r4, #12]
 801b1a6:	07db      	lsls	r3, r3, #31
 801b1a8:	d506      	bpl.n	801b1b8 <__swbuf_r+0x64>
 801b1aa:	2e0a      	cmp	r6, #10
 801b1ac:	d104      	bne.n	801b1b8 <__swbuf_r+0x64>
 801b1ae:	4621      	mov	r1, r4
 801b1b0:	4628      	mov	r0, r5
 801b1b2:	f7ff fa23 	bl	801a5fc <_fflush_r>
 801b1b6:	b938      	cbnz	r0, 801b1c8 <__swbuf_r+0x74>
 801b1b8:	4638      	mov	r0, r7
 801b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1bc:	4621      	mov	r1, r4
 801b1be:	4628      	mov	r0, r5
 801b1c0:	f000 f806 	bl	801b1d0 <__swsetup_r>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	d0d5      	beq.n	801b174 <__swbuf_r+0x20>
 801b1c8:	f04f 37ff 	mov.w	r7, #4294967295
 801b1cc:	e7f4      	b.n	801b1b8 <__swbuf_r+0x64>
	...

0801b1d0 <__swsetup_r>:
 801b1d0:	b538      	push	{r3, r4, r5, lr}
 801b1d2:	4b2a      	ldr	r3, [pc, #168]	; (801b27c <__swsetup_r+0xac>)
 801b1d4:	4605      	mov	r5, r0
 801b1d6:	6818      	ldr	r0, [r3, #0]
 801b1d8:	460c      	mov	r4, r1
 801b1da:	b118      	cbz	r0, 801b1e4 <__swsetup_r+0x14>
 801b1dc:	6a03      	ldr	r3, [r0, #32]
 801b1de:	b90b      	cbnz	r3, 801b1e4 <__swsetup_r+0x14>
 801b1e0:	f7fc fd0c 	bl	8017bfc <__sinit>
 801b1e4:	89a3      	ldrh	r3, [r4, #12]
 801b1e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b1ea:	0718      	lsls	r0, r3, #28
 801b1ec:	d422      	bmi.n	801b234 <__swsetup_r+0x64>
 801b1ee:	06d9      	lsls	r1, r3, #27
 801b1f0:	d407      	bmi.n	801b202 <__swsetup_r+0x32>
 801b1f2:	2309      	movs	r3, #9
 801b1f4:	602b      	str	r3, [r5, #0]
 801b1f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b1fa:	81a3      	strh	r3, [r4, #12]
 801b1fc:	f04f 30ff 	mov.w	r0, #4294967295
 801b200:	e034      	b.n	801b26c <__swsetup_r+0x9c>
 801b202:	0758      	lsls	r0, r3, #29
 801b204:	d512      	bpl.n	801b22c <__swsetup_r+0x5c>
 801b206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b208:	b141      	cbz	r1, 801b21c <__swsetup_r+0x4c>
 801b20a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b20e:	4299      	cmp	r1, r3
 801b210:	d002      	beq.n	801b218 <__swsetup_r+0x48>
 801b212:	4628      	mov	r0, r5
 801b214:	f7fd fc14 	bl	8018a40 <_free_r>
 801b218:	2300      	movs	r3, #0
 801b21a:	6363      	str	r3, [r4, #52]	; 0x34
 801b21c:	89a3      	ldrh	r3, [r4, #12]
 801b21e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b222:	81a3      	strh	r3, [r4, #12]
 801b224:	2300      	movs	r3, #0
 801b226:	6063      	str	r3, [r4, #4]
 801b228:	6923      	ldr	r3, [r4, #16]
 801b22a:	6023      	str	r3, [r4, #0]
 801b22c:	89a3      	ldrh	r3, [r4, #12]
 801b22e:	f043 0308 	orr.w	r3, r3, #8
 801b232:	81a3      	strh	r3, [r4, #12]
 801b234:	6923      	ldr	r3, [r4, #16]
 801b236:	b94b      	cbnz	r3, 801b24c <__swsetup_r+0x7c>
 801b238:	89a3      	ldrh	r3, [r4, #12]
 801b23a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b23e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b242:	d003      	beq.n	801b24c <__swsetup_r+0x7c>
 801b244:	4621      	mov	r1, r4
 801b246:	4628      	mov	r0, r5
 801b248:	f000 f884 	bl	801b354 <__smakebuf_r>
 801b24c:	89a0      	ldrh	r0, [r4, #12]
 801b24e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b252:	f010 0301 	ands.w	r3, r0, #1
 801b256:	d00a      	beq.n	801b26e <__swsetup_r+0x9e>
 801b258:	2300      	movs	r3, #0
 801b25a:	60a3      	str	r3, [r4, #8]
 801b25c:	6963      	ldr	r3, [r4, #20]
 801b25e:	425b      	negs	r3, r3
 801b260:	61a3      	str	r3, [r4, #24]
 801b262:	6923      	ldr	r3, [r4, #16]
 801b264:	b943      	cbnz	r3, 801b278 <__swsetup_r+0xa8>
 801b266:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b26a:	d1c4      	bne.n	801b1f6 <__swsetup_r+0x26>
 801b26c:	bd38      	pop	{r3, r4, r5, pc}
 801b26e:	0781      	lsls	r1, r0, #30
 801b270:	bf58      	it	pl
 801b272:	6963      	ldrpl	r3, [r4, #20]
 801b274:	60a3      	str	r3, [r4, #8]
 801b276:	e7f4      	b.n	801b262 <__swsetup_r+0x92>
 801b278:	2000      	movs	r0, #0
 801b27a:	e7f7      	b.n	801b26c <__swsetup_r+0x9c>
 801b27c:	24000158 	.word	0x24000158

0801b280 <_raise_r>:
 801b280:	291f      	cmp	r1, #31
 801b282:	b538      	push	{r3, r4, r5, lr}
 801b284:	4604      	mov	r4, r0
 801b286:	460d      	mov	r5, r1
 801b288:	d904      	bls.n	801b294 <_raise_r+0x14>
 801b28a:	2316      	movs	r3, #22
 801b28c:	6003      	str	r3, [r0, #0]
 801b28e:	f04f 30ff 	mov.w	r0, #4294967295
 801b292:	bd38      	pop	{r3, r4, r5, pc}
 801b294:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b296:	b112      	cbz	r2, 801b29e <_raise_r+0x1e>
 801b298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b29c:	b94b      	cbnz	r3, 801b2b2 <_raise_r+0x32>
 801b29e:	4620      	mov	r0, r4
 801b2a0:	f000 f830 	bl	801b304 <_getpid_r>
 801b2a4:	462a      	mov	r2, r5
 801b2a6:	4601      	mov	r1, r0
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2ae:	f000 b817 	b.w	801b2e0 <_kill_r>
 801b2b2:	2b01      	cmp	r3, #1
 801b2b4:	d00a      	beq.n	801b2cc <_raise_r+0x4c>
 801b2b6:	1c59      	adds	r1, r3, #1
 801b2b8:	d103      	bne.n	801b2c2 <_raise_r+0x42>
 801b2ba:	2316      	movs	r3, #22
 801b2bc:	6003      	str	r3, [r0, #0]
 801b2be:	2001      	movs	r0, #1
 801b2c0:	e7e7      	b.n	801b292 <_raise_r+0x12>
 801b2c2:	2400      	movs	r4, #0
 801b2c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	4798      	blx	r3
 801b2cc:	2000      	movs	r0, #0
 801b2ce:	e7e0      	b.n	801b292 <_raise_r+0x12>

0801b2d0 <raise>:
 801b2d0:	4b02      	ldr	r3, [pc, #8]	; (801b2dc <raise+0xc>)
 801b2d2:	4601      	mov	r1, r0
 801b2d4:	6818      	ldr	r0, [r3, #0]
 801b2d6:	f7ff bfd3 	b.w	801b280 <_raise_r>
 801b2da:	bf00      	nop
 801b2dc:	24000158 	.word	0x24000158

0801b2e0 <_kill_r>:
 801b2e0:	b538      	push	{r3, r4, r5, lr}
 801b2e2:	4d07      	ldr	r5, [pc, #28]	; (801b300 <_kill_r+0x20>)
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	4604      	mov	r4, r0
 801b2e8:	4608      	mov	r0, r1
 801b2ea:	4611      	mov	r1, r2
 801b2ec:	602b      	str	r3, [r5, #0]
 801b2ee:	f7e8 f941 	bl	8003574 <_kill>
 801b2f2:	1c43      	adds	r3, r0, #1
 801b2f4:	d102      	bne.n	801b2fc <_kill_r+0x1c>
 801b2f6:	682b      	ldr	r3, [r5, #0]
 801b2f8:	b103      	cbz	r3, 801b2fc <_kill_r+0x1c>
 801b2fa:	6023      	str	r3, [r4, #0]
 801b2fc:	bd38      	pop	{r3, r4, r5, pc}
 801b2fe:	bf00      	nop
 801b300:	24003464 	.word	0x24003464

0801b304 <_getpid_r>:
 801b304:	f7e8 b92e 	b.w	8003564 <_getpid>

0801b308 <__swhatbuf_r>:
 801b308:	b570      	push	{r4, r5, r6, lr}
 801b30a:	460c      	mov	r4, r1
 801b30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b310:	2900      	cmp	r1, #0
 801b312:	b096      	sub	sp, #88	; 0x58
 801b314:	4615      	mov	r5, r2
 801b316:	461e      	mov	r6, r3
 801b318:	da0d      	bge.n	801b336 <__swhatbuf_r+0x2e>
 801b31a:	89a3      	ldrh	r3, [r4, #12]
 801b31c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b320:	f04f 0100 	mov.w	r1, #0
 801b324:	bf0c      	ite	eq
 801b326:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b32a:	2340      	movne	r3, #64	; 0x40
 801b32c:	2000      	movs	r0, #0
 801b32e:	6031      	str	r1, [r6, #0]
 801b330:	602b      	str	r3, [r5, #0]
 801b332:	b016      	add	sp, #88	; 0x58
 801b334:	bd70      	pop	{r4, r5, r6, pc}
 801b336:	466a      	mov	r2, sp
 801b338:	f000 f848 	bl	801b3cc <_fstat_r>
 801b33c:	2800      	cmp	r0, #0
 801b33e:	dbec      	blt.n	801b31a <__swhatbuf_r+0x12>
 801b340:	9901      	ldr	r1, [sp, #4]
 801b342:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b346:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b34a:	4259      	negs	r1, r3
 801b34c:	4159      	adcs	r1, r3
 801b34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b352:	e7eb      	b.n	801b32c <__swhatbuf_r+0x24>

0801b354 <__smakebuf_r>:
 801b354:	898b      	ldrh	r3, [r1, #12]
 801b356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b358:	079d      	lsls	r5, r3, #30
 801b35a:	4606      	mov	r6, r0
 801b35c:	460c      	mov	r4, r1
 801b35e:	d507      	bpl.n	801b370 <__smakebuf_r+0x1c>
 801b360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b364:	6023      	str	r3, [r4, #0]
 801b366:	6123      	str	r3, [r4, #16]
 801b368:	2301      	movs	r3, #1
 801b36a:	6163      	str	r3, [r4, #20]
 801b36c:	b002      	add	sp, #8
 801b36e:	bd70      	pop	{r4, r5, r6, pc}
 801b370:	ab01      	add	r3, sp, #4
 801b372:	466a      	mov	r2, sp
 801b374:	f7ff ffc8 	bl	801b308 <__swhatbuf_r>
 801b378:	9900      	ldr	r1, [sp, #0]
 801b37a:	4605      	mov	r5, r0
 801b37c:	4630      	mov	r0, r6
 801b37e:	f7fd fbd3 	bl	8018b28 <_malloc_r>
 801b382:	b948      	cbnz	r0, 801b398 <__smakebuf_r+0x44>
 801b384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b388:	059a      	lsls	r2, r3, #22
 801b38a:	d4ef      	bmi.n	801b36c <__smakebuf_r+0x18>
 801b38c:	f023 0303 	bic.w	r3, r3, #3
 801b390:	f043 0302 	orr.w	r3, r3, #2
 801b394:	81a3      	strh	r3, [r4, #12]
 801b396:	e7e3      	b.n	801b360 <__smakebuf_r+0xc>
 801b398:	89a3      	ldrh	r3, [r4, #12]
 801b39a:	6020      	str	r0, [r4, #0]
 801b39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b3a0:	81a3      	strh	r3, [r4, #12]
 801b3a2:	9b00      	ldr	r3, [sp, #0]
 801b3a4:	6163      	str	r3, [r4, #20]
 801b3a6:	9b01      	ldr	r3, [sp, #4]
 801b3a8:	6120      	str	r0, [r4, #16]
 801b3aa:	b15b      	cbz	r3, 801b3c4 <__smakebuf_r+0x70>
 801b3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3b0:	4630      	mov	r0, r6
 801b3b2:	f000 f81d 	bl	801b3f0 <_isatty_r>
 801b3b6:	b128      	cbz	r0, 801b3c4 <__smakebuf_r+0x70>
 801b3b8:	89a3      	ldrh	r3, [r4, #12]
 801b3ba:	f023 0303 	bic.w	r3, r3, #3
 801b3be:	f043 0301 	orr.w	r3, r3, #1
 801b3c2:	81a3      	strh	r3, [r4, #12]
 801b3c4:	89a3      	ldrh	r3, [r4, #12]
 801b3c6:	431d      	orrs	r5, r3
 801b3c8:	81a5      	strh	r5, [r4, #12]
 801b3ca:	e7cf      	b.n	801b36c <__smakebuf_r+0x18>

0801b3cc <_fstat_r>:
 801b3cc:	b538      	push	{r3, r4, r5, lr}
 801b3ce:	4d07      	ldr	r5, [pc, #28]	; (801b3ec <_fstat_r+0x20>)
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	4608      	mov	r0, r1
 801b3d6:	4611      	mov	r1, r2
 801b3d8:	602b      	str	r3, [r5, #0]
 801b3da:	f7e8 f92a 	bl	8003632 <_fstat>
 801b3de:	1c43      	adds	r3, r0, #1
 801b3e0:	d102      	bne.n	801b3e8 <_fstat_r+0x1c>
 801b3e2:	682b      	ldr	r3, [r5, #0]
 801b3e4:	b103      	cbz	r3, 801b3e8 <_fstat_r+0x1c>
 801b3e6:	6023      	str	r3, [r4, #0]
 801b3e8:	bd38      	pop	{r3, r4, r5, pc}
 801b3ea:	bf00      	nop
 801b3ec:	24003464 	.word	0x24003464

0801b3f0 <_isatty_r>:
 801b3f0:	b538      	push	{r3, r4, r5, lr}
 801b3f2:	4d06      	ldr	r5, [pc, #24]	; (801b40c <_isatty_r+0x1c>)
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	4604      	mov	r4, r0
 801b3f8:	4608      	mov	r0, r1
 801b3fa:	602b      	str	r3, [r5, #0]
 801b3fc:	f7e8 f929 	bl	8003652 <_isatty>
 801b400:	1c43      	adds	r3, r0, #1
 801b402:	d102      	bne.n	801b40a <_isatty_r+0x1a>
 801b404:	682b      	ldr	r3, [r5, #0]
 801b406:	b103      	cbz	r3, 801b40a <_isatty_r+0x1a>
 801b408:	6023      	str	r3, [r4, #0]
 801b40a:	bd38      	pop	{r3, r4, r5, pc}
 801b40c:	24003464 	.word	0x24003464

0801b410 <_init>:
 801b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b412:	bf00      	nop
 801b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b416:	bc08      	pop	{r3}
 801b418:	469e      	mov	lr, r3
 801b41a:	4770      	bx	lr

0801b41c <_fini>:
 801b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b41e:	bf00      	nop
 801b420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b422:	bc08      	pop	{r3}
 801b424:	469e      	mov	lr, r3
 801b426:	4770      	bx	lr
