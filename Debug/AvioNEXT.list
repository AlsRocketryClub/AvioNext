
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ff8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e78  0801a2c8  0801a2c8  0002a2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c140  0801c140  0002c140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c148  0801c148  0002c148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c14c  0801c14c  0002c14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801c150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002630  240002d4  0801c424  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24002904  0801c424  00032904  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038988  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000631e  00000000  00000000  00068c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ba8  00000000  00000000  0006efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002948  00000000  00000000  00071b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ed2b  00000000  00000000  00074498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039eae  00000000  00000000  000b31c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ec09  00000000  00000000  000ed071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026bc7a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d37c  00000000  00000000  0026bccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a2b0 	.word	0x0801a2b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801a2b0 	.word	0x0801a2b0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ac4:	f006 f990 	bl	8006de8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000ad0:	f00c ff26 	bl	800d920 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000ad4:	1db9      	adds	r1, r7, #6
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000adc:	f00c ff20 	bl	800d920 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ae8:	f006 f97e 	bl	8006de8 <HAL_GPIO_WritePin>

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58020c00 	.word	0x58020c00
 8000af8:	240006b8 	.word	0x240006b8

08000afc <LG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);

	return reg_value;
}

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LG2_Write_Register+0x48>)
 8000b14:	f006 f968 	bl	8006de8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b18:	1df9      	adds	r1, r7, #7
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <LG2_Write_Register+0x4c>)
 8000b20:	f00c fefe 	bl	800d920 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b24:	1db9      	adds	r1, r7, #6
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <LG2_Write_Register+0x4c>)
 8000b2c:	f00c fef8 	bl	800d920 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <LG2_Write_Register+0x48>)
 8000b38:	f006 f956 	bl	8006de8 <HAL_GPIO_WritePin>

}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	240006b8 	.word	0x240006b8

08000b4c <Baro2_Read_Register>:
	for (int i = 0; i < 4; i++) {
		x[i] = temp[i];
	}
}

uint8_t Baro2_Read_Register(uint8_t addr) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1 << 7);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <Baro2_Read_Register+0x50>)
 8000b68:	f006 f93e 	bl	8006de8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b6c:	1df9      	adds	r1, r7, #7
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2201      	movs	r2, #1
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <Baro2_Read_Register+0x54>)
 8000b74:	f00c fed4 	bl	800d920 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b78:	f107 010f 	add.w	r1, r7, #15
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <Baro2_Read_Register+0x54>)
 8000b82:	f00d f8c9 	bl	800dd18 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <Baro2_Read_Register+0x50>)
 8000b8e:	f006 f92b 	bl	8006de8 <HAL_GPIO_WritePin>

	return reg_value;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	240006b8 	.word	0x240006b8

08000ba4 <Baro2_Write_Register>:

void Baro2_Write_Register(uint8_t addr, uint8_t data) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <Baro2_Write_Register+0x48>)
 8000bbc:	f006 f914 	bl	8006de8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000bc0:	1df9      	adds	r1, r7, #7
 8000bc2:	2364      	movs	r3, #100	; 0x64
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <Baro2_Write_Register+0x4c>)
 8000bc8:	f00c feaa 	bl	800d920 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000bcc:	1db9      	adds	r1, r7, #6
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <Baro2_Write_Register+0x4c>)
 8000bd4:	f00c fea4 	bl	800d920 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <Baro2_Write_Register+0x48>)
 8000be0:	f006 f902 	bl	8006de8 <HAL_GPIO_WritePin>

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58020c00 	.word	0x58020c00
 8000bf0:	240006b8 	.word	0x240006b8

08000bf4 <Baro2_Configure>:

void Baro2_Configure(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	int16_t cal_val = 0; //calibration value for soldering stresses, measured on 19/08/2024
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	80fb      	strh	r3, [r7, #6]
	int8_t cal_L = (int8_t)cal_val;
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	717b      	strb	r3, [r7, #5]
	int8_t cal_H = (int8_t)(cal_val>>8);
 8000c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c06:	121b      	asrs	r3, r3, #8
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	713b      	strb	r3, [r7, #4]

	Baro2_Write_Register(0x18, cal_L);
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2018      	movs	r0, #24
 8000c12:	f7ff ffc7 	bl	8000ba4 <Baro2_Write_Register>
	Baro2_Write_Register(0x19, cal_H);
 8000c16:	793b      	ldrb	r3, [r7, #4]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2019      	movs	r0, #25
 8000c1c:	f7ff ffc2 	bl	8000ba4 <Baro2_Write_Register>


	Baro2_Write_Register(0x10, 0b01000000); //50Hz refresh rate, low pass off
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	2010      	movs	r0, #16
 8000c24:	f7ff ffbe 	bl	8000ba4 <Baro2_Write_Register>
	Baro2_Write_Register(0x11, 0b00000010); //enables low noise mode
 8000c28:	2102      	movs	r1, #2
 8000c2a:	2011      	movs	r0, #17
 8000c2c:	f7ff ffba 	bl	8000ba4 <Baro2_Write_Register>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Baro2_Get_Pressure>:

int32_t Baro2_Get_Pressure(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t BARO_L = Baro2_Read_Register(0x28);
 8000c3e:	2028      	movs	r0, #40	; 0x28
 8000c40:	f7ff ff84 	bl	8000b4c <Baro2_Read_Register>
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
	uint8_t BARO_M = Baro2_Read_Register(0x29);
 8000c48:	2029      	movs	r0, #41	; 0x29
 8000c4a:	f7ff ff7f 	bl	8000b4c <Baro2_Read_Register>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71bb      	strb	r3, [r7, #6]
	uint8_t BARO_H = Baro2_Read_Register(0x2A);
 8000c52:	202a      	movs	r0, #42	; 0x2a
 8000c54:	f7ff ff7a 	bl	8000b4c <Baro2_Read_Register>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	717b      	strb	r3, [r7, #5]

	int32_t BARO = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
	BARO = ((int32_t)BARO_H << 24) | ((int32_t)BARO_M << 16) | ((int32_t)BARO_L << 8);
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	061a      	lsls	r2, r3, #24
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	041b      	lsls	r3, r3, #16
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	603b      	str	r3, [r7, #0]
	return BARO;
 8000c72:	683b      	ldr	r3, [r7, #0]

}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	0000      	movs	r0, r0
	...

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	ed2d 8b02 	vpush	{d8}
 8000c86:	f5ad 6dc9 	sub.w	sp, sp, #1608	; 0x648
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000c8c:	4bae      	ldr	r3, [pc, #696]	; (8000f48 <main+0x2c8>)
 8000c8e:	f507 64b9 	add.w	r4, r7, #1480	; 0x5c8
 8000c92:	461d      	mov	r5, r3
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9c:	c403      	stmia	r4!, {r0, r1}
 8000c9e:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f002 f972 	bl	8002f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f956 	bl	8000f54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ca8:	f000 f9d0 	bl	800104c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 ff58 	bl	8001b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb0:	f000 fef6 	bl	8001aa0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000cb4:	f000 fc50 	bl	8001558 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000cb8:	f000 fae0 	bl	800127c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000cbc:	f000 fea4 	bl	8001a08 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000cc0:	f000 f9f6 	bl	80010b0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000cc4:	f000 fd5a 	bl	800177c <MX_TIM4_Init>
  MX_ADC3_Init();
 8000cc8:	f000 fa6a 	bl	80011a0 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000ccc:	f000 fbee 	bl	80014ac <MX_SPI2_Init>
  MX_I2C2_Init();
 8000cd0:	f000 fb38 	bl	8001344 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000cd4:	f000 fc96 	bl	8001604 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000cd8:	f000 fdcc 	bl	8001874 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000cdc:	f000 fcea 	bl	80016b4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000ce0:	f013 ff42 	bl	8014b68 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000ce4:	f000 fb8c 	bl	8001400 <MX_SPI1_Init>
  MX_UART4_Init();
 8000ce8:	f000 fe42 	bl	8001970 <MX_UART4_Init>
  MX_FATFS_Init();
 8000cec:	f011 fcd0 	bl	8012690 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000cf0:	f000 fb68 	bl	80013c4 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8000cf4:	f000 fe18 	bl	8001928 <MX_TIM13_Init>

	//if (MAX_M10s_init(&hi2c2))
	//	Error_Handler();

	//MAX_M10S_init(&hi2c2);
	const int MAX = 50;
 8000cf8:	2332      	movs	r3, #50	; 0x32
 8000cfa:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
	const double SPEED = 2.0 / 2000;
 8000cfe:	a384      	add	r3, pc, #528	; (adr r3, 8000f10 <main+0x290>)
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8000d08:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	4b8a      	ldr	r3, [pc, #552]	; (8000f4c <main+0x2cc>)
 8000d22:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8000d26:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d32:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8000d36:	e9c1 2300 	strd	r2, r3, [r1]


	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8000d3a:	213c      	movs	r1, #60	; 0x3c
 8000d3c:	2010      	movs	r0, #16
 8000d3e:	f7ff fedd 	bl	8000afc <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01101000); //Gyroscope setup - CTRL2_G
 8000d42:	2168      	movs	r1, #104	; 0x68
 8000d44:	2011      	movs	r0, #17
 8000d46:	f7ff fed9 	bl	8000afc <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00001100); //disables I2C - CTRL4_C
 8000d4a:	210c      	movs	r1, #12
 8000d4c:	2013      	movs	r0, #19
 8000d4e:	f7ff fed5 	bl	8000afc <LG2_Write_Register>

	HAL_Delay(3000);
 8000d52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d56:	f002 f9a9 	bl	80030ac <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8000d5a:	21bf      	movs	r1, #191	; 0xbf
 8000d5c:	201c      	movs	r0, #28
 8000d5e:	f7ff fea5 	bl	8000aac <HG2_Write_Register>
	HAL_Delay(2);
 8000d62:	2002      	movs	r0, #2
 8000d64:	f002 f9a2 	bl	80030ac <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8000d68:	2158      	movs	r1, #88	; 0x58
 8000d6a:	201b      	movs	r0, #27
 8000d6c:	f7ff fe9e 	bl	8000aac <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8000d70:	21d8      	movs	r1, #216	; 0xd8
 8000d72:	201b      	movs	r0, #27
 8000d74:	f7ff fe9a 	bl	8000aac <HG2_Write_Register>

	Baro2_Configure();
 8000d78:	f7ff ff3c 	bl	8000bf4 <Baro2_Configure>

	double temperature = 275.15;
 8000d7c:	a366      	add	r3, pc, #408	; (adr r3, 8000f18 <main+0x298>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]
	double sea_level_pressure = 101.7;
 8000d8a:	a365      	add	r3, pc, #404	; (adr r3, 8000f20 <main+0x2a0>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8000d94:	e9c1 2300 	strd	r2, r3, [r1]

	int index = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	double avg_tab[100];
	for(int i = 0; i < 100; i++){
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 8000da4:	e012      	b.n	8000dcc <main+0x14c>
		avg_tab[i] = 0;
 8000da6:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8000daa:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 8000dae:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	18d1      	adds	r1, r2, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 100; i++){
 8000dc2:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 8000dcc:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 8000dd0:	2b63      	cmp	r3, #99	; 0x63
 8000dd2:	dde8      	ble.n	8000da6 <main+0x126>
	}
	while (1) {
		int32_t int_pressure = Baro2_Get_Pressure();
 8000dd4:	f7ff ff30 	bl	8000c38 <Baro2_Get_Pressure>
 8000dd8:	f8c7 062c 	str.w	r0, [r7, #1580]	; 0x62c
		double float_pressure = (double)int_pressure / (40960.0 * 256.0);
 8000ddc:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000de8:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000f28 <main+0x2a8>
 8000dec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000df0:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8000df4:	ed83 7b00 	vstr	d7, [r3]

		avg_tab[index] = float_pressure;
 8000df8:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8000dfc:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 8000e00:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	18d1      	adds	r1, r2, r3
 8000e08:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	e9c1 2300 	strd	r2, r3, [r1]
		index++;
 8000e14:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
		if(index > 99){
 8000e1e:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 8000e22:	2b63      	cmp	r3, #99	; 0x63
 8000e24:	dd02      	ble.n	8000e2c <main+0x1ac>
			index = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
		}

		double sum = 0;
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8000e38:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < 100; i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8000e42:	e018      	b.n	8000e76 <main+0x1f6>
			sum += avg_tab[i];
 8000e44:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8000e48:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 8000e4c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	ed93 7b00 	vldr	d7, [r3]
 8000e58:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8000e5c:	ed93 6b00 	vldr	d6, [r3]
 8000e60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e64:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8000e68:	ed83 7b00 	vstr	d7, [r3]
		for(int i = 0; i < 100; i++){
 8000e6c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8000e70:	3301      	adds	r3, #1
 8000e72:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8000e76:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8000e7a:	2b63      	cmp	r3, #99	; 0x63
 8000e7c:	dde2      	ble.n	8000e44 <main+0x1c4>
		}

		sum /= 100;
 8000e7e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8000e82:	ed93 6b00 	vldr	d6, [r3]
 8000e86:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8000f30 <main+0x2b0>
 8000e8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e8e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8000e92:	ed83 7b00 	vstr	d7, [r3]
		double altitude = (temperature/0.0065) *(1- pow((sum/sea_level_pressure), (1/5.256)));
 8000e96:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8000e9a:	ed93 7b00 	vldr	d7, [r3]
 8000e9e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000f38 <main+0x2b8>
 8000ea2:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8000ea6:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8000eaa:	ed93 6b00 	vldr	d6, [r3]
 8000eae:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000eb2:	ed93 7b00 	vldr	d7, [r3]
 8000eb6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000eba:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8000f40 <main+0x2c0>
 8000ebe:	eeb0 0b45 	vmov.f64	d0, d5
 8000ec2:	f018 ff31 	bl	8019d28 <pow>
 8000ec6:	eeb0 7b40 	vmov.f64	d7, d0
 8000eca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ece:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ed2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ed6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8000eda:	ed83 7b00 	vstr	d7, [r3]

		char data_gyro[50];
		sprintf(data_gyro, "%f\n", altitude);
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	4919      	ldr	r1, [pc, #100]	; (8000f50 <main+0x2d0>)
 8000eea:	f015 f9df 	bl	80162ac <siprintf>
		CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fa0d 	bl	8000310 <strlen>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f013 fef3 	bl	8014ce8 <CDC_Transmit_HS>
		HAL_Delay(20);
 8000f02:	2014      	movs	r0, #20
 8000f04:	f002 f8d2 	bl	80030ac <HAL_Delay>
	while (1) {
 8000f08:	e764      	b.n	8000dd4 <main+0x154>
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w
 8000f10:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f14:	3f50624d 	.word	0x3f50624d
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	40713266 	.word	0x40713266
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	40596ccc 	.word	0x40596ccc
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	41640000 	.word	0x41640000
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40590000 	.word	0x40590000
 8000f38:	76c8b439 	.word	0x76c8b439
 8000f3c:	3f7a9fbe 	.word	0x3f7a9fbe
 8000f40:	169985a6 	.word	0x169985a6
 8000f44:	3fc85a66 	.word	0x3fc85a66
 8000f48:	0801a2e0 	.word	0x0801a2e0
 8000f4c:	3ff00000 	.word	0x3ff00000
 8000f50:	0801a2dc 	.word	0x0801a2dc

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09c      	sub	sp, #112	; 0x70
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	224c      	movs	r2, #76	; 0x4c
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f014 fb4c 	bl	8015600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f014 fb46 	bl	8015600 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f74:	2002      	movs	r0, #2
 8000f76:	f007 fb4b 	bl	8008610 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <SystemClock_Config+0xf4>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f86:	4a30      	ldr	r2, [pc, #192]	; (8001048 <SystemClock_Config+0xf4>)
 8000f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <SystemClock_Config+0xf4>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f9a:	bf00      	nop
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <SystemClock_Config+0xf4>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa8:	d1f8      	bne.n	8000f9c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000faa:	2323      	movs	r3, #35	; 0x23
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fdc:	230c      	movs	r3, #12
 8000fde:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 fb59 	bl	80086a4 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ff8:	f000 ff2a 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	233f      	movs	r3, #63	; 0x3f
 8000ffe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2303      	movs	r3, #3
 8001002:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001008:	2308      	movs	r3, #8
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001018:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2101      	movs	r1, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f007 ff18 	bl	8008e58 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800102e:	f000 ff0f 	bl	8001e50 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001032:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001036:	2100      	movs	r1, #0
 8001038:	2000      	movs	r0, #0
 800103a:	f008 f8c3 	bl	80091c4 <HAL_RCC_MCOConfig>
}
 800103e:	bf00      	nop
 8001040:	3770      	adds	r7, #112	; 0x70
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58024800 	.word	0x58024800

0800104c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ae      	sub	sp, #184	; 0xb8
 8001050:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	22b8      	movs	r2, #184	; 0xb8
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f014 fad1 	bl	8015600 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800105e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800106a:	2304      	movs	r3, #4
 800106c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800106e:	230c      	movs	r3, #12
 8001070:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001072:	2304      	movs	r3, #4
 8001074:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800107e:	23c0      	movs	r3, #192	; 0xc0
 8001080:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f008 fad3 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80010a4:	f000 fed4 	bl	8001e50 <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	37b8      	adds	r7, #184	; 0xb8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2224      	movs	r2, #36	; 0x24
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f014 fa99 	bl	8015600 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_ADC1_Init+0xe8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010d6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80010da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC1_Init+0xe4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_ADC1_Init+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC1_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <MX_ADC1_Init+0xe4>)
 8001130:	f002 fa3c 	bl	80035ac <HAL_ADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800113a:	f000 fe89 	bl	8001e50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <MX_ADC1_Init+0xe4>)
 800114a:	f003 fa77 	bl	800463c <HAL_ADCEx_MultiModeConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001154:	f000 fe7c 	bl	8001e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_ADC1_Init+0xec>)
 800115a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115c:	2306      	movs	r3, #6
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001160:	2303      	movs	r3, #3
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001164:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001168:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116a:	2304      	movs	r3, #4
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC1_Init+0xe4>)
 800117e:	f002 fc1d 	bl	80039bc <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001188:	f000 fe62 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	240002f0 	.word	0x240002f0
 8001198:	40022000 	.word	0x40022000
 800119c:	2a000400 	.word	0x2a000400

080011a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2224      	movs	r2, #36	; 0x24
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f014 fa27 	bl	8015600 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011b4:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <MX_ADC3_Init+0xd4>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011ba:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011d4:	2204      	movs	r2, #4
 80011d6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC3_Init+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC3_Init+0xd0>)
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_ADC3_Init+0xd0>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_ADC3_Init+0xd0>)
 800120e:	2200      	movs	r2, #0
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC3_Init+0xd0>)
 8001214:	2200      	movs	r2, #0
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_ADC3_Init+0xd0>)
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC3_Init+0xd0>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_ADC3_Init+0xd0>)
 8001228:	f002 f9c0 	bl	80035ac <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001232:	f000 fe0d 	bl	8001e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_ADC3_Init+0xd8>)
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123a:	2306      	movs	r3, #6
 800123c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001242:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001246:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001248:	2304      	movs	r3, #4
 800124a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_ADC3_Init+0xd0>)
 800125a:	f002 fbaf 	bl	80039bc <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001264:	f000 fdf4 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24000360 	.word	0x24000360
 8001274:	58026000 	.word	0x58026000
 8001278:	04300002 	.word	0x04300002

0800127c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001282:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <MX_FDCAN3_Init+0xc4>)
 8001284:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800128c:	4b2b      	ldr	r3, [pc, #172]	; (800133c <MX_FDCAN3_Init+0xc0>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001294:	2200      	movs	r2, #0
 8001296:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_FDCAN3_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012a6:	2210      	movs	r2, #16
 80012a8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_FDCAN3_Init+0xc0>)
 80012fa:	2204      	movs	r2, #4
 80012fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001306:	2204      	movs	r2, #4
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_FDCAN3_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001312:	2200      	movs	r2, #0
 8001314:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001318:	2200      	movs	r2, #0
 800131a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_FDCAN3_Init+0xc0>)
 800131e:	2200      	movs	r2, #0
 8001320:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_FDCAN3_Init+0xc0>)
 8001324:	2204      	movs	r2, #4
 8001326:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_FDCAN3_Init+0xc0>)
 800132a:	f005 f839 	bl	80063a0 <HAL_FDCAN_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001334:	f000 fd8c 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	240004c0 	.word	0x240004c0
 8001340:	4000d400 	.word	0x4000d400

08001344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C2_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C2_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C2_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C2_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001380:	f005 fd4c 	bl	8006e1c <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fd61 	bl	8001e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001392:	f005 fded 	bl	8006f70 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fd58 	bl	8001e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C2_Init+0x74>)
 80013a4:	f005 fe2f 	bl	8007006 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fd4f 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000560 	.word	0x24000560
 80013bc:	40005800 	.word	0x40005800
 80013c0:	20303e5d 	.word	0x20303e5d

080013c4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <MX_SDMMC2_SD_Init+0x38>)
 80013cc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <MX_SDMMC2_SD_Init+0x34>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	240005b4 	.word	0x240005b4
 80013fc:	48022400 	.word	0x48022400

08001400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_SPI1_Init+0xa8>)
 8001408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800140c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800141a:	2207      	movs	r2, #7
 800141c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800142c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001434:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_SPI1_Init+0xa4>)
 8001492:	f00c f921 	bl	800d6d8 <HAL_SPI_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800149c:	f000 fcd8 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000630 	.word	0x24000630
 80014a8:	40013000 	.word	0x40013000

080014ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <MX_SPI2_Init+0xa8>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014c6:	2207      	movs	r2, #7
 80014c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80014e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_SPI2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_SPI2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_SPI2_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_SPI2_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_SPI2_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_SPI2_Init+0xa4>)
 800153e:	f00c f8cb 	bl	800d6d8 <HAL_SPI_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001548:	f000 fc82 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	240006b8 	.word	0x240006b8
 8001554:	40003800 	.word	0x40003800

08001558 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <MX_SPI3_Init+0xa4>)
 800155e:	4a28      	ldr	r2, [pc, #160]	; (8001600 <MX_SPI3_Init+0xa8>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_SPI3_Init+0xa4>)
 8001564:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001568:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_SPI3_Init+0xa4>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_SPI3_Init+0xa4>)
 8001572:	2207      	movs	r2, #7
 8001574:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_SPI3_Init+0xa4>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_SPI3_Init+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_SPI3_Init+0xa4>)
 8001584:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001588:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_SPI3_Init+0xa4>)
 800158c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001590:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_SPI3_Init+0xa4>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_SPI3_Init+0xa4>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_SPI3_Init+0xa4>)
 80015ea:	f00c f875 	bl	800d6d8 <HAL_SPI_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80015f4:	f000 fc2c 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24000740 	.word	0x24000740
 8001600:	40003c00 	.word	0x40003c00

08001604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001616:	463b      	mov	r3, r7
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	615a      	str	r2, [r3, #20]
 8001626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_TIM2_Init+0xac>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_TIM2_Init+0xac>)
 800163e:	225a      	movs	r2, #90	; 0x5a
 8001640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_TIM2_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001650:	f00c fe32 	bl	800e2b8 <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800165a:	f000 fbf9 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <MX_TIM2_Init+0xac>)
 800166e:	f00d fc5b 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001678:	f000 fbea 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167c:	2360      	movs	r3, #96	; 0x60
 800167e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2208      	movs	r2, #8
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <MX_TIM2_Init+0xac>)
 8001694:	f00c ff86 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800169e:	f000 fbd7 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016a2:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MX_TIM2_Init+0xac>)
 80016a4:	f001 f8f2 	bl	800288c <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	240007c8 	.word	0x240007c8

080016b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016ec:	225a      	movs	r2, #90	; 0x5a
 80016ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fc:	481d      	ldr	r0, [pc, #116]	; (8001774 <MX_TIM3_Init+0xc0>)
 80016fe:	f00c fddb 	bl	800e2b8 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001708:	f000 fba2 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4816      	ldr	r0, [pc, #88]	; (8001774 <MX_TIM3_Init+0xc0>)
 800171c:	f00d fc04 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001726:	f000 fb93 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	; 0x60
 800172c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM3_Init+0xc0>)
 8001742:	f00c ff2f 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800174c:	f000 fb80 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	2204      	movs	r2, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM3_Init+0xc0>)
 8001758:	f00c ff24 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001762:	f000 fb75 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM3_Init+0xc0>)
 8001768:	f001 f890 	bl	800288c <HAL_TIM_MspPostInit>

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	24000814 	.word	0x24000814
 8001778:	40000400 	.word	0x40000400

0800177c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <MX_TIM4_Init+0xf0>)
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <MX_TIM4_Init+0xf4>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <MX_TIM4_Init+0xf0>)
 80017a8:	221c      	movs	r2, #28
 80017aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <MX_TIM4_Init+0xf0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <MX_TIM4_Init+0xf0>)
 80017b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80017b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <MX_TIM4_Init+0xf0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <MX_TIM4_Init+0xf0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017c6:	4829      	ldr	r0, [pc, #164]	; (800186c <MX_TIM4_Init+0xf0>)
 80017c8:	f00c fd76 	bl	800e2b8 <HAL_TIM_PWM_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80017d2:	f000 fb3d 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4821      	ldr	r0, [pc, #132]	; (800186c <MX_TIM4_Init+0xf0>)
 80017e6:	f00d fb9f 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80017f0:	f000 fb2e 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	; 0x60
 80017f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <MX_TIM4_Init+0xf0>)
 800180c:	f00c feca 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001816:	f000 fb1b 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <MX_TIM4_Init+0xf0>)
 8001822:	f00c febf 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800182c:	f000 fb10 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	2208      	movs	r2, #8
 8001834:	4619      	mov	r1, r3
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_TIM4_Init+0xf0>)
 8001838:	f00c feb4 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001842:	f000 fb05 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	220c      	movs	r2, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM4_Init+0xf0>)
 800184e:	f00c fea9 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001858:	f000 fafa 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM4_Init+0xf0>)
 800185e:	f001 f815 	bl	800288c <HAL_TIM_MspPostInit>

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000860 	.word	0x24000860
 8001870:	40000800 	.word	0x40000800

08001874 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_TIM5_Init+0xac>)
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <MX_TIM5_Init+0xb0>)
 800189c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <MX_TIM5_Init+0xac>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_TIM5_Init+0xac>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MX_TIM5_Init+0xac>)
 80018ac:	225a      	movs	r2, #90	; 0x5a
 80018ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_TIM5_Init+0xac>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_TIM5_Init+0xac>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018bc:	4818      	ldr	r0, [pc, #96]	; (8001920 <MX_TIM5_Init+0xac>)
 80018be:	f00c fcfb 	bl	800e2b8 <HAL_TIM_PWM_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80018c8:	f000 fac2 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_TIM5_Init+0xac>)
 80018dc:	f00d fb24 	bl	800ef28 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80018e6:	f000 fab3 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ea:	2360      	movs	r3, #96	; 0x60
 80018ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	220c      	movs	r2, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM5_Init+0xac>)
 8001902:	f00c fe4f 	bl	800e5a4 <HAL_TIM_PWM_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800190c:	f000 faa0 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM5_Init+0xac>)
 8001912:	f000 ffbb 	bl	800288c <HAL_TIM_MspPostInit>

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	240008ac 	.word	0x240008ac
 8001924:	40000c00 	.word	0x40000c00

08001928 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_TIM13_Init+0x40>)
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <MX_TIM13_Init+0x44>)
 8001930:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_TIM13_Init+0x40>)
 8001934:	225f      	movs	r2, #95	; 0x5f
 8001936:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_TIM13_Init+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_TIM13_Init+0x40>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_TIM13_Init+0x40>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_TIM13_Init+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM13_Init+0x40>)
 8001954:	f00c fc59 	bl	800e20a <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800195e:	f000 fa77 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	240008f8 	.word	0x240008f8
 800196c:	40001c00 	.word	0x40001c00

08001970 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_UART4_Init+0x90>)
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <MX_UART4_Init+0x94>)
 8001978:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <MX_UART4_Init+0x90>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_UART4_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_UART4_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_UART4_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_UART4_Init+0x90>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_UART4_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_UART4_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_UART4_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_UART4_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_UART4_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <MX_UART4_Init+0x90>)
 80019ba:	f00d fb6f 	bl	800f09c <HAL_UART_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019c4:	f000 fa44 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c8:	2100      	movs	r1, #0
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_UART4_Init+0x90>)
 80019cc:	f00e fc75 	bl	80102ba <HAL_UARTEx_SetTxFifoThreshold>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f000 fa3b 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019da:	2100      	movs	r1, #0
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <MX_UART4_Init+0x90>)
 80019de:	f00e fcaa 	bl	8010336 <HAL_UARTEx_SetRxFifoThreshold>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80019e8:	f000 fa32 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_UART4_Init+0x90>)
 80019ee:	f00e fc2b 	bl	8010248 <HAL_UARTEx_DisableFifoMode>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80019f8:	f000 fa2a 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000b9c 	.word	0x24000b9c
 8001a04:	40004c00 	.word	0x40004c00

08001a08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_USART6_UART_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a52:	f00d fb23 	bl	800f09c <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 f9f8 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a64:	f00e fc29 	bl	80102ba <HAL_UARTEx_SetTxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001a6e:	f000 f9ef 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a76:	f00e fc5e 	bl	8010336 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f000 f9e6 	bl	8001e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_USART6_UART_Init+0x90>)
 8001a86:	f00e fbdf 	bl	8010248 <HAL_UARTEx_DisableFifoMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f000 f9de 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000c30 	.word	0x24000c30
 8001a9c:	40011400 	.word	0x40011400

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001ac6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_DMA_Init+0xbc>)
 8001ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	f002 ff65 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001aec:	200b      	movs	r0, #11
 8001aee:	f002 ff7c 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	200c      	movs	r0, #12
 8001af8:	f002 ff5d 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001afc:	200c      	movs	r0, #12
 8001afe:	f002 ff74 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	200d      	movs	r0, #13
 8001b08:	f002 ff55 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b0c:	200d      	movs	r0, #13
 8001b0e:	f002 ff6c 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	200e      	movs	r0, #14
 8001b18:	f002 ff4d 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b1c:	200e      	movs	r0, #14
 8001b1e:	f002 ff64 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200f      	movs	r0, #15
 8001b28:	f002 ff45 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f002 ff5c 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2010      	movs	r0, #16
 8001b38:	f002 ff3d 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b3c:	2010      	movs	r0, #16
 8001b3e:	f002 ff54 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2046      	movs	r0, #70	; 0x46
 8001b48:	f002 ff35 	bl	80049b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b4c:	2046      	movs	r0, #70	; 0x46
 8001b4e:	f002 ff4c 	bl	80049ea <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	58024400 	.word	0x58024400

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	; 0x38
 8001b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b76:	4bae      	ldr	r3, [pc, #696]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4aac      	ldr	r2, [pc, #688]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001b7e:	f043 0310 	orr.w	r3, r3, #16
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4baa      	ldr	r3, [pc, #680]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b94:	4ba6      	ldr	r3, [pc, #664]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	4aa5      	ldr	r2, [pc, #660]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001b9c:	f043 0320 	orr.w	r3, r3, #32
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba4:	4ba2      	ldr	r3, [pc, #648]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb2:	4b9f      	ldr	r3, [pc, #636]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	4a9d      	ldr	r2, [pc, #628]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc2:	4b9b      	ldr	r3, [pc, #620]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	4a96      	ldr	r2, [pc, #600]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be0:	4b93      	ldr	r3, [pc, #588]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	4a87      	ldr	r2, [pc, #540]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1c:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	4a7f      	ldr	r2, [pc, #508]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c48:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a78      	ldr	r2, [pc, #480]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <MX_GPIO_Init+0x2d0>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f241 5104 	movw	r1, #5380	; 0x1504
 8001c6c:	4871      	ldr	r0, [pc, #452]	; (8001e34 <MX_GPIO_Init+0x2d4>)
 8001c6e:	f005 f8bb 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f248 0106 	movw	r1, #32774	; 0x8006
 8001c78:	486f      	ldr	r0, [pc, #444]	; (8001e38 <MX_GPIO_Init+0x2d8>)
 8001c7a:	f005 f8b5 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2130      	movs	r1, #48	; 0x30
 8001c82:	486e      	ldr	r0, [pc, #440]	; (8001e3c <MX_GPIO_Init+0x2dc>)
 8001c84:	f005 f8b0 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	486c      	ldr	r0, [pc, #432]	; (8001e40 <MX_GPIO_Init+0x2e0>)
 8001c8e:	f005 f8ab 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001c98:	486a      	ldr	r0, [pc, #424]	; (8001e44 <MX_GPIO_Init+0x2e4>)
 8001c9a:	f005 f8a5 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210e      	movs	r1, #14
 8001ca2:	4869      	ldr	r0, [pc, #420]	; (8001e48 <MX_GPIO_Init+0x2e8>)
 8001ca4:	f005 f8a0 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001cae:	4867      	ldr	r0, [pc, #412]	; (8001e4c <MX_GPIO_Init+0x2ec>)
 8001cb0:	f005 f89a 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4864      	ldr	r0, [pc, #400]	; (8001e4c <MX_GPIO_Init+0x2ec>)
 8001cba:	f005 f895 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8001cbe:	f241 5304 	movw	r3, #5380	; 0x1504
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4857      	ldr	r0, [pc, #348]	; (8001e34 <MX_GPIO_Init+0x2d4>)
 8001cd8:	f004 fec6 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8001cdc:	f248 0306 	movw	r3, #32774	; 0x8006
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4850      	ldr	r0, [pc, #320]	; (8001e38 <MX_GPIO_Init+0x2d8>)
 8001cf6:	f004 feb7 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cfa:	2330      	movs	r3, #48	; 0x30
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	484a      	ldr	r0, [pc, #296]	; (8001e3c <MX_GPIO_Init+0x2dc>)
 8001d12:	f004 fea9 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8001d16:	2302      	movs	r3, #2
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4844      	ldr	r0, [pc, #272]	; (8001e40 <MX_GPIO_Init+0x2e0>)
 8001d2e:	f004 fe9b 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8001d32:	2304      	movs	r3, #4
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d42:	4619      	mov	r1, r3
 8001d44:	483e      	ldr	r0, [pc, #248]	; (8001e40 <MX_GPIO_Init+0x2e0>)
 8001d46:	f004 fe8f 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8001d4a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	4838      	ldr	r0, [pc, #224]	; (8001e44 <MX_GPIO_Init+0x2e4>)
 8001d64:	f004 fe80 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8001d68:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4831      	ldr	r0, [pc, #196]	; (8001e44 <MX_GPIO_Init+0x2e4>)
 8001d7e:	f004 fe73 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	482c      	ldr	r0, [pc, #176]	; (8001e48 <MX_GPIO_Init+0x2e8>)
 8001d96:	f004 fe67 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8001d9a:	230e      	movs	r3, #14
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <MX_GPIO_Init+0x2e8>)
 8001db2:	f004 fe59 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8001db6:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481a      	ldr	r0, [pc, #104]	; (8001e34 <MX_GPIO_Init+0x2d4>)
 8001dcc:	f004 fe4c 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8001dd0:	f240 7301 	movw	r3, #1793	; 0x701
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_GPIO_Init+0x2ec>)
 8001dea:	f004 fe3d 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8001dee:	2310      	movs	r3, #16
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4811      	ldr	r0, [pc, #68]	; (8001e48 <MX_GPIO_Init+0x2e8>)
 8001e02:	f004 fe31 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_GPIO_Init+0x2d8>)
 8001e24:	f004 fe20 	bl	8006a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e28:	bf00      	nop
 8001e2a:	3738      	adds	r7, #56	; 0x38
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58021000 	.word	0x58021000
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	58020800 	.word	0x58020800
 8001e40:	58020400 	.word	0x58020400
 8001e44:	58021400 	.word	0x58021400
 8001e48:	58021800 	.word	0x58021800
 8001e4c:	58020c00 	.word	0x58020c00

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_MspInit+0x30>)
 8001e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e68:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_MspInit+0x30>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_MspInit+0x30>)
 8001e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	58024400 	.word	0x58024400

08001e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <HAL_ADC_MspInit+0x194>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d159      	bne.n	8001f66 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eb8:	4a5b      	ldr	r2, [pc, #364]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ec2:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b55      	ldr	r3, [pc, #340]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b51      	ldr	r3, [pc, #324]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	484a      	ldr	r0, [pc, #296]	; (800202c <HAL_ADC_MspInit+0x19c>)
 8001f02:	f004 fdb1 	bl	8006a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f08:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_ADC_MspInit+0x1a4>)
 8001f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f0c:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f0e:	2209      	movs	r2, #9
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f48:	4839      	ldr	r0, [pc, #228]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f4a:	f002 fd69 	bl	8004a20 <HAL_DMA_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001f54:	f7ff ff7c 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <HAL_ADC_MspInit+0x1a0>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f64:	e059      	b.n	800201a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a33      	ldr	r2, [pc, #204]	; (8002038 <HAL_ADC_MspInit+0x1a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d154      	bne.n	800201a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_ADC_MspInit+0x198>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001fac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001fb0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001fb4:	f001 f89e 	bl	80030f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fba:	4a21      	ldr	r2, [pc, #132]	; (8002040 <HAL_ADC_MspInit+0x1b0>)
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fc0:	2273      	movs	r2, #115	; 0x73
 8001fc2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ff6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ffe:	480f      	ldr	r0, [pc, #60]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8002000:	f002 fd0e 	bl	8004a20 <HAL_DMA_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 800200a:	f7ff ff21 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8002012:	659a      	str	r2, [r3, #88]	; 0x58
 8002014:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_ADC_MspInit+0x1ac>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
}
 800201a:	bf00      	nop
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000
 8002028:	58024400 	.word	0x58024400
 800202c:	58020800 	.word	0x58020800
 8002030:	240003d0 	.word	0x240003d0
 8002034:	40020088 	.word	0x40020088
 8002038:	58026000 	.word	0x58026000
 800203c:	24000448 	.word	0x24000448
 8002040:	400204b8 	.word	0x400204b8

08002044 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0b8      	sub	sp, #224	; 0xe0
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	22b8      	movs	r2, #184	; 0xb8
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f013 facb 	bl	8015600 <memset>
  if(hfdcan->Instance==FDCAN3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_FDCAN_MspInit+0xc4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d144      	bne.n	80020fe <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002074:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002080:	2300      	movs	r3, #0
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4618      	mov	r0, r3
 800208a:	f007 fadb 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002094:	f7ff fedc 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 800209a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800209e:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 80020aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_FDCAN_MspInit+0xc8>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d4:	23c0      	movs	r3, #192	; 0xc0
 80020d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80020ec:	2302      	movs	r3, #2
 80020ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_FDCAN_MspInit+0xcc>)
 80020fa:	f004 fcb5 	bl	8006a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80020fe:	bf00      	nop
 8002100:	37e0      	adds	r7, #224	; 0xe0
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	4000d400 	.word	0x4000d400
 800210c:	58024400 	.word	0x58024400
 8002110:	58021400 	.word	0x58021400

08002114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0b8      	sub	sp, #224	; 0xe0
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	22b8      	movs	r2, #184	; 0xb8
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f013 fa63 	bl	8015600 <memset>
  if(hi2c->Instance==I2C2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_I2C_MspInit+0xd4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d14d      	bne.n	80021e0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002144:	f04f 0208 	mov.w	r2, #8
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	4618      	mov	r0, r3
 800215c:	f007 fa72 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002166:	f7ff fe73 	bl	8001e50 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a1e      	ldr	r2, [pc, #120]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 8002172:	f043 0320 	orr.w	r3, r3, #32
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218e:	2312      	movs	r3, #18
 8002190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021a0:	2304      	movs	r3, #4
 80021a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021aa:	4619      	mov	r1, r3
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <HAL_I2C_MspInit+0xdc>)
 80021ae:	f004 fc5b 	bl	8006a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 80021b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 80021ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_I2C_MspInit+0xd8>)
 80021c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2101      	movs	r1, #1
 80021d4:	2021      	movs	r0, #33	; 0x21
 80021d6:	f002 fbee 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80021da:	2021      	movs	r0, #33	; 0x21
 80021dc:	f002 fc05 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	37e0      	adds	r7, #224	; 0xe0
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40005800 	.word	0x40005800
 80021ec:	58024400 	.word	0x58024400
 80021f0:	58021400 	.word	0x58021400

080021f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0ba      	sub	sp, #232	; 0xe8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	22b8      	movs	r2, #184	; 0xb8
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f013 f9f3 	bl	8015600 <memset>
  if(hsd->Instance==SDMMC2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5d      	ldr	r2, [pc, #372]	; (8002394 <HAL_SD_MspInit+0x1a0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	f040 80b3 	bne.w	800238c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002232:	2300      	movs	r3, #0
 8002234:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002236:	f107 0318 	add.w	r3, r7, #24
 800223a:	4618      	mov	r0, r3
 800223c:	f007 fa02 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002246:	f7ff fe03 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 800224c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002250:	4a51      	ldr	r2, [pc, #324]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800225a:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 800225c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002268:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226e:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 800227a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002286:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 800228e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002296:	4b40      	ldr	r3, [pc, #256]	; (8002398 <HAL_SD_MspInit+0x1a4>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a4:	2340      	movs	r3, #64	; 0x40
 80022a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80022bc:	230b      	movs	r3, #11
 80022be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4834      	ldr	r0, [pc, #208]	; (800239c <HAL_SD_MspInit+0x1a8>)
 80022ca:	f004 fbcd 	bl	8006a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022da:	2301      	movs	r3, #1
 80022dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80022e6:	230b      	movs	r3, #11
 80022e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022f0:	4619      	mov	r1, r3
 80022f2:	482a      	ldr	r0, [pc, #168]	; (800239c <HAL_SD_MspInit+0x1a8>)
 80022f4:	f004 fbb8 	bl	8006a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002306:	2301      	movs	r3, #1
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002312:	230b      	movs	r3, #11
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800231c:	4619      	mov	r1, r3
 800231e:	4820      	ldr	r0, [pc, #128]	; (80023a0 <HAL_SD_MspInit+0x1ac>)
 8002320:	f004 fba2 	bl	8006a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800233e:	230b      	movs	r3, #11
 8002340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002344:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002348:	4619      	mov	r1, r3
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <HAL_SD_MspInit+0x1ac>)
 800234c:	f004 fb8c 	bl	8006a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002350:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800236a:	230a      	movs	r3, #10
 800236c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002370:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002374:	4619      	mov	r1, r3
 8002376:	480a      	ldr	r0, [pc, #40]	; (80023a0 <HAL_SD_MspInit+0x1ac>)
 8002378:	f004 fb76 	bl	8006a68 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	207c      	movs	r0, #124	; 0x7c
 8002382:	f002 fb18 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002386:	207c      	movs	r0, #124	; 0x7c
 8002388:	f002 fb2f 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	37e8      	adds	r7, #232	; 0xe8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	48022400 	.word	0x48022400
 8002398:	58024400 	.word	0x58024400
 800239c:	58020c00 	.word	0x58020c00
 80023a0:	58021800 	.word	0x58021800

080023a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	; (8002500 <HAL_SPI_MspInit+0x15c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12e      	bne.n	8002424 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023d6:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002402:	23e0      	movs	r3, #224	; 0xe0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002412:	2305      	movs	r3, #5
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241a:	4619      	mov	r1, r3
 800241c:	483a      	ldr	r0, [pc, #232]	; (8002508 <HAL_SPI_MspInit+0x164>)
 800241e:	f004 fb23 	bl	8006a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002422:	e068      	b.n	80024f6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_SPI_MspInit+0x168>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d12f      	bne.n	800248e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_SPI_MspInit+0x160>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	4a33      	ldr	r2, [pc, #204]	; (8002504 <HAL_SPI_MspInit+0x160>)
 8002436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_SPI_MspInit+0x160>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_SPI_MspInit+0x160>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <HAL_SPI_MspInit+0x160>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_SPI_MspInit+0x160>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800246a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800247c:	2305      	movs	r3, #5
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	4619      	mov	r1, r3
 8002486:	4822      	ldr	r0, [pc, #136]	; (8002510 <HAL_SPI_MspInit+0x16c>)
 8002488:	f004 faee 	bl	8006a68 <HAL_GPIO_Init>
}
 800248c:	e033      	b.n	80024f6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_SPI_MspInit+0x170>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d12e      	bne.n	80024f6 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_SPI_MspInit+0x160>)
 800249a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80024a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_SPI_MspInit+0x160>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024e6:	2306      	movs	r3, #6
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	4619      	mov	r1, r3
 80024f0:	4809      	ldr	r0, [pc, #36]	; (8002518 <HAL_SPI_MspInit+0x174>)
 80024f2:	f004 fab9 	bl	8006a68 <HAL_GPIO_Init>
}
 80024f6:	bf00      	nop
 80024f8:	3738      	adds	r7, #56	; 0x38
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40013000 	.word	0x40013000
 8002504:	58024400 	.word	0x58024400
 8002508:	58020000 	.word	0x58020000
 800250c:	40003800 	.word	0x40003800
 8002510:	58020400 	.word	0x58020400
 8002514:	40003c00 	.word	0x40003c00
 8002518:	58020800 	.word	0x58020800

0800251c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d15d      	bne.n	80025fa <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800253e:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002544:	4a8c      	ldr	r2, [pc, #560]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254e:	4b8a      	ldr	r3, [pc, #552]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4b86      	ldr	r3, [pc, #536]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002562:	4a85      	ldr	r2, [pc, #532]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256c:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257a:	2301      	movs	r3, #1
 800257c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	4879      	ldr	r0, [pc, #484]	; (800277c <HAL_TIM_PWM_MspInit+0x260>)
 8002596:	f004 fa67 	bl	8006a68 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800259a:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 800259c:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_TIM_PWM_MspInit+0x268>)
 800259e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80025a0:	4b77      	ldr	r3, [pc, #476]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025a2:	2214      	movs	r2, #20
 80025a4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ac:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ba:	4b71      	ldr	r3, [pc, #452]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025c0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025c2:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80025d0:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025d8:	2200      	movs	r2, #0
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80025dc:	4868      	ldr	r0, [pc, #416]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025de:	f002 fa1f 	bl	8004a20 <HAL_DMA_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80025e8:	f7ff fc32 	bl	8001e50 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025f2:	4a63      	ldr	r2, [pc, #396]	; (8002780 <HAL_TIM_PWM_MspInit+0x264>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025f8:	e119      	b.n	800282e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a62      	ldr	r2, [pc, #392]	; (8002788 <HAL_TIM_PWM_MspInit+0x26c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d16d      	bne.n	80026e0 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260a:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002614:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 8002616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002622:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002624:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <HAL_TIM_PWM_MspInit+0x274>)
 8002626:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 800262a:	2218      	movs	r2, #24
 800262c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262e:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800263a:	4b54      	ldr	r3, [pc, #336]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002640:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002648:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800264a:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 800264c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002650:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002652:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002658:	4b4c      	ldr	r3, [pc, #304]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800265e:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002664:	4849      	ldr	r0, [pc, #292]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002666:	f002 f9db 	bl	8004a20 <HAL_DMA_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002670:	f7ff fbee 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a45      	ldr	r2, [pc, #276]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
 800267a:	4a44      	ldr	r2, [pc, #272]	; (800278c <HAL_TIM_PWM_MspInit+0x270>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 8002682:	4a45      	ldr	r2, [pc, #276]	; (8002798 <HAL_TIM_PWM_MspInit+0x27c>)
 8002684:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 8002688:	2217      	movs	r2, #23
 800268a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002692:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002698:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 800269a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026a0:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80026c2:	4834      	ldr	r0, [pc, #208]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026c4:	f002 f9ac 	bl	8004a20 <HAL_DMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80026ce:	f7ff fbbf 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
 80026d8:	4a2e      	ldr	r2, [pc, #184]	; (8002794 <HAL_TIM_PWM_MspInit+0x278>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026de:	e0a6      	b.n	800282e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2d      	ldr	r2, [pc, #180]	; (800279c <HAL_TIM_PWM_MspInit+0x280>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d15e      	bne.n	80027a8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 80026ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f0:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_TIM_PWM_MspInit+0x25c>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002708:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800270a:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <HAL_TIM_PWM_MspInit+0x288>)
 800270c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002710:	221f      	movs	r2, #31
 8002712:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800272a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800272e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002736:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800274a:	4815      	ldr	r0, [pc, #84]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800274c:	f002 f968 	bl	8004a20 <HAL_DMA_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002756:	f7ff fb7b 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_TIM_PWM_MspInit+0x284>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201e      	movs	r0, #30
 800276c:	f002 f923 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002770:	201e      	movs	r0, #30
 8002772:	f002 f93a 	bl	80049ea <HAL_NVIC_EnableIRQ>
}
 8002776:	e05a      	b.n	800282e <HAL_TIM_PWM_MspInit+0x312>
 8002778:	58024400 	.word	0x58024400
 800277c:	58020000 	.word	0x58020000
 8002780:	24000944 	.word	0x24000944
 8002784:	40020028 	.word	0x40020028
 8002788:	40000400 	.word	0x40000400
 800278c:	240009bc 	.word	0x240009bc
 8002790:	40020058 	.word	0x40020058
 8002794:	24000a34 	.word	0x24000a34
 8002798:	40020070 	.word	0x40020070
 800279c:	40000800 	.word	0x40000800
 80027a0:	24000aac 	.word	0x24000aac
 80027a4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_TIM_PWM_MspInit+0x31c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13d      	bne.n	800282e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_TIM_PWM_MspInit+0x320>)
 80027b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_TIM_PWM_MspInit+0x320>)
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_TIM_PWM_MspInit+0x320>)
 80027c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027d2:	4a1c      	ldr	r2, [pc, #112]	; (8002844 <HAL_TIM_PWM_MspInit+0x328>)
 80027d4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027d8:	223a      	movs	r2, #58	; 0x3a
 80027da:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ee:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 80027fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027fe:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002812:	480b      	ldr	r0, [pc, #44]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 8002814:	f002 f904 	bl	8004a20 <HAL_DMA_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800281e:	f7ff fb17 	bl	8001e50 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a06      	ldr	r2, [pc, #24]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
 8002828:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_TIM_PWM_MspInit+0x324>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800282e:	bf00      	nop
 8002830:	3730      	adds	r7, #48	; 0x30
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40000c00 	.word	0x40000c00
 800283c:	58024400 	.word	0x58024400
 8002840:	24000b24 	.word	0x24000b24
 8002844:	40020040 	.word	0x40020040

08002848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_TIM_Base_MspInit+0x3c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_TIM_Base_MspInit+0x40>)
 800285c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_TIM_Base_MspInit+0x40>)
 8002862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_TIM_Base_MspInit+0x40>)
 800286c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40001c00 	.word	0x40001c00
 8002888:	58024400 	.word	0x58024400

0800288c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	; 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d120      	bne.n	80028f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b52      	ldr	r3, [pc, #328]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028be:	4b4e      	ldr	r3, [pc, #312]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028d6:	2302      	movs	r3, #2
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028de:	2301      	movs	r3, #1
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	4619      	mov	r1, r3
 80028e8:	4844      	ldr	r0, [pc, #272]	; (80029fc <HAL_TIM_MspPostInit+0x170>)
 80028ea:	f004 f8bd 	bl	8006a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80028ee:	e07f      	b.n	80029f0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a42      	ldr	r2, [pc, #264]	; (8002a00 <HAL_TIM_MspPostInit+0x174>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11f      	bne.n	800293a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002900:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 800290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002918:	2330      	movs	r3, #48	; 0x30
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002920:	2302      	movs	r3, #2
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002928:	2302      	movs	r3, #2
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4832      	ldr	r0, [pc, #200]	; (80029fc <HAL_TIM_MspPostInit+0x170>)
 8002934:	f004 f898 	bl	8006a68 <HAL_GPIO_Init>
}
 8002938:	e05a      	b.n	80029f0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <HAL_TIM_MspPostInit+0x178>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d131      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002962:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002974:	2302      	movs	r3, #2
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4822      	ldr	r0, [pc, #136]	; (8002a08 <HAL_TIM_MspPostInit+0x17c>)
 8002980:	f004 f872 	bl	8006a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800298e:	2302      	movs	r3, #2
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4819      	ldr	r0, [pc, #100]	; (8002a08 <HAL_TIM_MspPostInit+0x17c>)
 80029a2:	f004 f861 	bl	8006a68 <HAL_GPIO_Init>
}
 80029a6:	e023      	b.n	80029f0 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_TIM_MspPostInit+0x180>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11e      	bne.n	80029f0 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_MspPostInit+0x16c>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d0:	2308      	movs	r3, #8
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d8:	2302      	movs	r3, #2
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029e0:	2302      	movs	r3, #2
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	4809      	ldr	r0, [pc, #36]	; (8002a10 <HAL_TIM_MspPostInit+0x184>)
 80029ec:	f004 f83c 	bl	8006a68 <HAL_GPIO_Init>
}
 80029f0:	bf00      	nop
 80029f2:	3730      	adds	r7, #48	; 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	58024400 	.word	0x58024400
 80029fc:	58020400 	.word	0x58020400
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	58020c00 	.word	0x58020c00
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	58020000 	.word	0x58020000

08002a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ba      	sub	sp, #232	; 0xe8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	22b8      	movs	r2, #184	; 0xb8
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f012 fde3 	bl	8015600 <memset>
  if(huart->Instance==UART4)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_UART_MspInit+0x160>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d147      	bne.n	8002ad4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a44:	f04f 0202 	mov.w	r2, #2
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f006 fdf2 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a66:	f7ff f9f3 	bl	8001e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a70:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aca:	4619      	mov	r1, r3
 8002acc:	482b      	ldr	r0, [pc, #172]	; (8002b7c <HAL_UART_MspInit+0x168>)
 8002ace:	f003 ffcb 	bl	8006a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ad2:	e04a      	b.n	8002b6a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_UART_MspInit+0x16c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d145      	bne.n	8002b6a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ade:	f04f 0201 	mov.w	r2, #1
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f006 fda5 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b00:	f7ff f9a6 	bl	8001e50 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b0c:	f043 0320 	orr.w	r3, r3, #32
 8002b10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_UART_MspInit+0x164>)
 8002b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002b58:	2307      	movs	r3, #7
 8002b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4807      	ldr	r0, [pc, #28]	; (8002b84 <HAL_UART_MspInit+0x170>)
 8002b66:	f003 ff7f 	bl	8006a68 <HAL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	37e8      	adds	r7, #232	; 0xe8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40004c00 	.word	0x40004c00
 8002b78:	58024400 	.word	0x58024400
 8002b7c:	58020400 	.word	0x58020400
 8002b80:	40011400 	.word	0x40011400
 8002b84:	58020800 	.word	0x58020800

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 fa4a 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <DMA1_Stream0_IRQHandler+0x10>)
 8002be2:	f002 fa77 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	24000aac 	.word	0x24000aac

08002bf0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <DMA1_Stream1_IRQHandler+0x10>)
 8002bf6:	f002 fa6d 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	24000944 	.word	0x24000944

08002c04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <DMA1_Stream2_IRQHandler+0x10>)
 8002c0a:	f002 fa63 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	24000b24 	.word	0x24000b24

08002c18 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <DMA1_Stream3_IRQHandler+0x10>)
 8002c1e:	f002 fa59 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	240009bc 	.word	0x240009bc

08002c2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <DMA1_Stream4_IRQHandler+0x10>)
 8002c32:	f002 fa4f 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	24000a34 	.word	0x24000a34

08002c40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <DMA1_Stream5_IRQHandler+0x10>)
 8002c46:	f002 fa45 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	240003d0 	.word	0x240003d0

08002c54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <TIM4_IRQHandler+0x10>)
 8002c5a:	f00b fb84 	bl	800e366 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	24000860 	.word	0x24000860

08002c68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <I2C2_EV_IRQHandler+0x10>)
 8002c6e:	f004 f965 	bl	8006f3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	24000560 	.word	0x24000560

08002c7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA2_Stream7_IRQHandler+0x10>)
 8002c82:	f002 fa27 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	24000448 	.word	0x24000448

08002c90 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <OTG_HS_IRQHandler+0x10>)
 8002c96:	f004 fb5b 	bl	8007350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	240021c8 	.word	0x240021c8

08002ca4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <SDMMC2_IRQHandler+0x10>)
 8002caa:	f009 fb21 	bl	800c2f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	240005b4 	.word	0x240005b4

08002cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_kill>:

int _kill(int pid, int sig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd2:	f012 fc5d 	bl	8015590 <__errno>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2216      	movs	r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
  return -1;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_exit>:

void _exit (int status)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffe7 	bl	8002cc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cfa:	e7fe      	b.n	8002cfa <_exit+0x12>

08002cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00a      	b.n	8002d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d0e:	f3af 8000 	nop.w
 8002d12:	4601      	mov	r1, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	60ba      	str	r2, [r7, #8]
 8002d1a:	b2ca      	uxtb	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf0      	blt.n	8002d0e <_read+0x12>
  }

  return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e009      	b.n	8002d5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	60ba      	str	r2, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dbf1      	blt.n	8002d48 <_write+0x12>
  }
  return len;
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_close>:

int _close(int file)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d96:	605a      	str	r2, [r3, #4]
  return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_isatty>:

int _isatty(int file)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f012 fbc2 	bl	8015590 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	24050000 	.word	0x24050000
 8002e38:	00000800 	.word	0x00000800
 8002e3c:	24000cc4 	.word	0x24000cc4
 8002e40:	24002908 	.word	0x24002908

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <SystemInit+0xd0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <SystemInit+0xd0>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <SystemInit+0xd4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d807      	bhi.n	8002e74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e64:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <SystemInit+0xd4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 030f 	bic.w	r3, r3, #15
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <SystemInit+0xd4>)
 8002e6e:	f043 0307 	orr.w	r3, r3, #7
 8002e72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <SystemInit+0xd8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <SystemInit+0xd8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <SystemInit+0xd8>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e86:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <SystemInit+0xd8>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4924      	ldr	r1, [pc, #144]	; (8002f1c <SystemInit+0xd8>)
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <SystemInit+0xdc>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <SystemInit+0xd4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <SystemInit+0xd4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 030f 	bic.w	r3, r3, #15
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <SystemInit+0xd4>)
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <SystemInit+0xd8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <SystemInit+0xd8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <SystemInit+0xd8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <SystemInit+0xd8>)
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <SystemInit+0xe0>)
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <SystemInit+0xd8>)
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <SystemInit+0xe4>)
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <SystemInit+0xd8>)
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <SystemInit+0xe8>)
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <SystemInit+0xd8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <SystemInit+0xd8>)
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <SystemInit+0xe8>)
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <SystemInit+0xd8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <SystemInit+0xd8>)
 8002ee6:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <SystemInit+0xe8>)
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <SystemInit+0xd8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <SystemInit+0xd8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <SystemInit+0xd8>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <SystemInit+0xd8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <SystemInit+0xec>)
 8002f04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f08:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	52002000 	.word	0x52002000
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f24:	02020200 	.word	0x02020200
 8002f28:	01ff0000 	.word	0x01ff0000
 8002f2c:	01010280 	.word	0x01010280
 8002f30:	52004000 	.word	0x52004000

08002f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f38:	f7ff ff84 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f3e:	490d      	ldr	r1, [pc, #52]	; (8002f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f40:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f44:	e002      	b.n	8002f4c <LoopCopyDataInit>

08002f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4a:	3304      	adds	r3, #4

08002f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f50:	d3f9      	bcc.n	8002f46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f58:	e001      	b.n	8002f5e <LoopFillZerobss>

08002f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f5c:	3204      	adds	r2, #4

08002f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f60:	d3fb      	bcc.n	8002f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f62:	f012 fb1b 	bl	801559c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f66:	f7fd fe8b 	bl	8000c80 <main>
  bx  lr
 8002f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f6c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002f70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f74:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8002f78:	0801c150 	.word	0x0801c150
  ldr r2, =_sbss
 8002f7c:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8002f80:	24002904 	.word	0x24002904

08002f84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f84:	e7fe      	b.n	8002f84 <ADC3_IRQHandler>
	...

08002f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8e:	2003      	movs	r0, #3
 8002f90:	f001 fd06 	bl	80049a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f94:	f006 f980 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_Init+0x68>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <HAL_Init+0x6c>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_Init+0x68>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_Init+0x6c>)
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_Init+0x70>)
 8002fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_Init+0x74>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd2:	200f      	movs	r0, #15
 8002fd4:	f000 f814 	bl	8003000 <HAL_InitTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e002      	b.n	8002fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe2:	f7fe ff3b 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	0801a388 	.word	0x0801a388
 8002ff8:	24000004 	.word	0x24000004
 8002ffc:	24000000 	.word	0x24000000

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_InitTick+0x60>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e021      	b.n	8003058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_InitTick+0x64>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_InitTick+0x60>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	fbb3 f3f1 	udiv	r3, r3, r1
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fceb 	bl	8004a06 <HAL_SYSTICK_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00e      	b.n	8003058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d80a      	bhi.n	8003056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003040:	2200      	movs	r2, #0
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f001 fcb5 	bl	80049b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_InitTick+0x68>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	2400000c 	.word	0x2400000c
 8003064:	24000000 	.word	0x24000000
 8003068:	24000008 	.word	0x24000008

0800306c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x20>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x24>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_IncTick+0x24>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	2400000c 	.word	0x2400000c
 8003090:	24000cc8 	.word	0x24000cc8

08003094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetTick+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	24000cc8 	.word	0x24000cc8

080030ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff ffee 	bl	8003094 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d005      	beq.n	80030d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_Delay+0x44>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030d2:	bf00      	nop
 80030d4:	f7ff ffde 	bl	8003094 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d8f7      	bhi.n	80030d4 <HAL_Delay+0x28>
  {
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2400000c 	.word	0x2400000c

080030f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	4904      	ldr	r1, [pc, #16]	; (800311c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	58000400 	.word	0x58000400

08003120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	461a      	mov	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <LL_ADC_SetOffset+0x60>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10b      	bne.n	80031c4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031c2:	e00b      	b.n	80031dc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	58026000 	.word	0x58026000

080031ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	461a      	mov	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	611a      	str	r2, [r3, #16]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3360      	adds	r3, #96	; 0x60
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]
  }
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	58026000 	.word	0x58026000

08003290 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <LL_ADC_SetOffsetSaturation+0x40>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10e      	bne.n	80032c2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	431a      	orrs	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	58026000 	.word	0x58026000

080032d4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <LL_ADC_SetOffsetSign+0x40>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10e      	bne.n	8003306 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	58026000 	.word	0x58026000

08003318 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3360      	adds	r3, #96	; 0x60
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <LL_ADC_SetOffsetState+0x50>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800334a:	e007      	b.n	800335c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	431a      	orrs	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]
}
 800335c:	bf00      	nop
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	58026000 	.word	0x58026000

0800336c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3330      	adds	r3, #48	; 0x30
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	211f      	movs	r1, #31
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	f003 011f 	and.w	r1, r3, #31
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	431a      	orrs	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3314      	adds	r3, #20
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	0e5b      	lsrs	r3, r3, #25
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	0d1b      	lsrs	r3, r3, #20
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2107      	movs	r1, #7
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	401a      	ands	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0d1b      	lsrs	r3, r3, #20
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	431a      	orrs	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <LL_ADC_SetChannelSingleDiff+0x78>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d115      	bne.n	800345c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0318 	and.w	r3, r3, #24
 8003446:	4914      	ldr	r1, [pc, #80]	; (8003498 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003448:	40d9      	lsrs	r1, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	400b      	ands	r3, r1
 800344e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003452:	431a      	orrs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800345a:	e014      	b.n	8003486 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0318 	and.w	r3, r3, #24
 8003472:	4909      	ldr	r1, [pc, #36]	; (8003498 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003474:	40d9      	lsrs	r1, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	400b      	ands	r3, r1
 800347a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347e:	431a      	orrs	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	58026000 	.word	0x58026000
 8003498:	000fffff 	.word	0x000fffff

0800349c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6093      	str	r3, [r2, #8]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	5fffffc0 	.word	0x5fffffc0

080034c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d4:	d101      	bne.n	80034da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <LL_ADC_EnableInternalRegulator+0x24>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	6fffffc0 	.word	0x6fffffc0

08003510 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003524:	d101      	bne.n	800352a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <LL_ADC_IsEnabled+0x18>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <LL_ADC_IsEnabled+0x1a>
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d101      	bne.n	8003576 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d101      	bne.n	800359c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1ee      	b.n	80039a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fe fc5b 	bl	8001e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff67 	bl	80034c0 <LL_ADC_IsDeepPowerDownEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff4d 	bl	800349c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff82 	bl	8003510 <LL_ADC_IsInternalRegulatorEnabled>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff66 	bl	80034e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800361c:	4b8e      	ldr	r3, [pc, #568]	; (8003858 <HAL_ADC_Init+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	4a8e      	ldr	r2, [pc, #568]	; (800385c <HAL_ADC_Init+0x2b0>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	3301      	adds	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800362e:	e002      	b.n	8003636 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3b01      	subs	r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f9      	bne.n	8003630 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff65 	bl	8003510 <LL_ADC_IsInternalRegulatorEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff76 	bl	800355e <LL_ADC_REG_IsConversionOngoing>
 8003672:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 8188 	bne.w	8003992 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 8184 	bne.w	8003992 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff4a 	bl	8003538 <LL_ADC_IsEnabled>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d136      	bne.n	8003718 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6c      	ldr	r2, [pc, #432]	; (8003860 <HAL_ADC_Init+0x2b4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_ADC_Init+0x112>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_ADC_Init+0x2b8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10e      	bne.n	80036dc <HAL_ADC_Init+0x130>
 80036be:	4868      	ldr	r0, [pc, #416]	; (8003860 <HAL_ADC_Init+0x2b4>)
 80036c0:	f7ff ff3a 	bl	8003538 <LL_ADC_IsEnabled>
 80036c4:	4604      	mov	r4, r0
 80036c6:	4867      	ldr	r0, [pc, #412]	; (8003864 <HAL_ADC_Init+0x2b8>)
 80036c8:	f7ff ff36 	bl	8003538 <LL_ADC_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4323      	orrs	r3, r4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e008      	b.n	80036ee <HAL_ADC_Init+0x142>
 80036dc:	4862      	ldr	r0, [pc, #392]	; (8003868 <HAL_ADC_Init+0x2bc>)
 80036de:	f7ff ff2b 	bl	8003538 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d012      	beq.n	8003718 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5a      	ldr	r2, [pc, #360]	; (8003860 <HAL_ADC_Init+0x2b4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_ADC_Init+0x15a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_ADC_Init+0x2b8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d101      	bne.n	800370a <HAL_ADC_Init+0x15e>
 8003706:	4a59      	ldr	r2, [pc, #356]	; (800386c <HAL_ADC_Init+0x2c0>)
 8003708:	e000      	b.n	800370c <HAL_ADC_Init+0x160>
 800370a:	4a59      	ldr	r2, [pc, #356]	; (8003870 <HAL_ADC_Init+0x2c4>)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7ff fd04 	bl	8003120 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_ADC_Init+0x2bc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d129      	bne.n	8003776 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e5b      	ldrb	r3, [r3, #25]
 8003726:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800372c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003732:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d013      	beq.n	8003764 <HAL_ADC_Init+0x1b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d00d      	beq.n	8003760 <HAL_ADC_Init+0x1b4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b1c      	cmp	r3, #28
 800374a:	d007      	beq.n	800375c <HAL_ADC_Init+0x1b0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b18      	cmp	r3, #24
 8003752:	d101      	bne.n	8003758 <HAL_ADC_Init+0x1ac>
 8003754:	2318      	movs	r3, #24
 8003756:	e006      	b.n	8003766 <HAL_ADC_Init+0x1ba>
 8003758:	2300      	movs	r3, #0
 800375a:	e004      	b.n	8003766 <HAL_ADC_Init+0x1ba>
 800375c:	2310      	movs	r3, #16
 800375e:	e002      	b.n	8003766 <HAL_ADC_Init+0x1ba>
 8003760:	2308      	movs	r3, #8
 8003762:	e000      	b.n	8003766 <HAL_ADC_Init+0x1ba>
 8003764:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003766:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e00e      	b.n	8003794 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7e5b      	ldrb	r3, [r3, #25]
 800377a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003780:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003786:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d106      	bne.n	80037ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	3b01      	subs	r3, #1
 80037a4:	045b      	lsls	r3, r3, #17
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a26      	ldr	r2, [pc, #152]	; (8003868 <HAL_ADC_Init+0x2bc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d115      	bne.n	80037fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_ADC_Init+0x2c8>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	69b9      	ldr	r1, [r7, #24]
 80037e2:	430b      	orrs	r3, r1
 80037e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	611a      	str	r2, [r3, #16]
 80037fc:	e009      	b.n	8003812 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_ADC_Init+0x2cc>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	430b      	orrs	r3, r1
 8003810:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fea1 	bl	800355e <LL_ADC_REG_IsConversionOngoing>
 800381c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff feae 	bl	8003584 <LL_ADC_INJ_IsConversionOngoing>
 8003828:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 808e 	bne.w	800394e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 808a 	bne.w	800394e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_ADC_Init+0x2bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d11b      	bne.n	800387c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
 8003848:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003850:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e018      	b.n	800388a <HAL_ADC_Init+0x2de>
 8003858:	24000000 	.word	0x24000000
 800385c:	053e2d63 	.word	0x053e2d63
 8003860:	40022000 	.word	0x40022000
 8003864:	40022100 	.word	0x40022100
 8003868:	58026000 	.word	0x58026000
 800386c:	40022300 	.word	0x40022300
 8003870:	58026300 	.word	0x58026300
 8003874:	fff04007 	.word	0xfff04007
 8003878:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7e1b      	ldrb	r3, [r3, #24]
 8003880:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_ADC_Init+0x400>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	430b      	orrs	r3, r1
 800389c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d137      	bne.n	8003918 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3f      	ldr	r2, [pc, #252]	; (80039b0 <HAL_ADC_Init+0x404>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d116      	bne.n	80038e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <HAL_ADC_Init+0x408>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038d6:	430a      	orrs	r2, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	e020      	b.n	8003928 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <HAL_ADC_Init+0x40c>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0411      	lsls	r1, r2, #16
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003908:	430a      	orrs	r2, r1
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	611a      	str	r2, [r3, #16]
 8003916:	e007      	b.n	8003928 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_ADC_Init+0x404>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d002      	beq.n	800394e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fd63 	bl	8004414 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10c      	bne.n	8003970 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	f023 010f 	bic.w	r1, r3, #15
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
 800396e:	e007      	b.n	8003980 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020f 	bic.w	r2, r2, #15
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	661a      	str	r2, [r3, #96]	; 0x60
 8003990:	e007      	b.n	80039a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3724      	adds	r7, #36	; 0x24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	ffffbffc 	.word	0xffffbffc
 80039b0:	58026000 	.word	0x58026000
 80039b4:	fc00f81f 	.word	0xfc00f81f
 80039b8:	fc00f81e 	.word	0xfc00f81e

080039bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b0b9      	sub	sp, #228	; 0xe4
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4aa9      	ldr	r2, [pc, #676]	; (8003c84 <HAL_ADC_ConfigChannel+0x2c8>)
 80039de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d102      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x34>
 80039ea:	2302      	movs	r3, #2
 80039ec:	f000 bcfa 	b.w	80043e4 <HAL_ADC_ConfigChannel+0xa28>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fdae 	bl	800355e <LL_ADC_REG_IsConversionOngoing>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 84de 	bne.w	80043c6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a9e      	ldr	r2, [pc, #632]	; (8003c88 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d033      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x76>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0e9b      	lsrs	r3, r3, #26
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	e01d      	b.n	8003a6e <HAL_ADC_ConfigChannel+0xb2>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003a56:	2320      	movs	r3, #32
 8003a58:	e004      	b.n	8003a64 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2201      	movs	r2, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	69d1      	ldr	r1, [r2, #28]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f7ff fc6f 	bl	800336c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fd63 	bl	800355e <LL_ADC_REG_IsConversionOngoing>
 8003a98:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fd6f 	bl	8003584 <LL_ADC_INJ_IsConversionOngoing>
 8003aa6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 8270 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ab4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 826b 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7ff fc7a 	bl	80033c4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a6c      	ldr	r2, [pc, #432]	; (8003c88 <HAL_ADC_ConfigChannel+0x2cc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10d      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003af4:	e032      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_ADC_ConfigChannel+0x2d0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x160>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	e01d      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x19c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x186>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	e00a      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x19c>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d048      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6919      	ldr	r1, [r3, #16]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b74:	f7ff fb08 	bl	8003188 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_ADC_ConfigChannel+0x2cc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d119      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6919      	ldr	r1, [r3, #16]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f7ff fba0 	bl	80032d4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x1f0>
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003baa:	e000      	b.n	8003bae <HAL_ADC_ConfigChannel+0x1f2>
 8003bac:	2300      	movs	r3, #0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff fb6e 	bl	8003290 <LL_ADC_SetOffsetSaturation>
 8003bb4:	e1ee      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6919      	ldr	r1, [r3, #16]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x212>
 8003bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bcc:	e000      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x214>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f7ff fb3b 	bl	800324c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	7e1b      	ldrb	r3, [r3, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x230>
 8003be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bea:	e000      	b.n	8003bee <HAL_ADC_ConfigChannel+0x232>
 8003bec:	2300      	movs	r3, #0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f7ff fb12 	bl	8003218 <LL_ADC_SetDataRightShift>
 8003bf4:	e1ce      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_ADC_ConfigChannel+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	f040 8181 	bne.w	8003f04 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff faef 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x272>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fae4 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	0e9b      	lsrs	r3, r3, #26
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	e01e      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x2b0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fad9 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e004      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003c60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x2d4>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	e01e      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x306>
 8003c84:	47ff0000 	.word	0x47ff0000
 8003c88:	58026000 	.word	0x58026000
 8003c8c:	5c001000 	.word	0x5c001000
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e004      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003cb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fb22 	bl	8003318 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fa86 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x344>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fa7b 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	f003 021f 	and.w	r2, r3, #31
 8003cfe:	e01e      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x382>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fa70 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x39a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	e018      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x3cc>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e004      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003d7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d106      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fabf 	bl	8003318 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fa23 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x40a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fa18 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	0e9b      	lsrs	r3, r3, #26
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	e01e      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x448>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fa0d 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e004      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x460>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	e014      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x48a>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	e004      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d106      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fa60 	bl	8003318 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2103      	movs	r1, #3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f9c4 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x4c8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2103      	movs	r1, #3
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f9b9 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	0e9b      	lsrs	r3, r3, #26
 8003e7e:	f003 021f 	and.w	r2, r3, #31
 8003e82:	e017      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x4f8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2103      	movs	r1, #3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f9ae 	bl	80031ec <LL_ADC_GetOffsetChannel>
 8003e90:	4603      	mov	r3, r0
 8003e92:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	e003      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x510>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	e011      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x534>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003edc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e003      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d14f      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2103      	movs	r1, #3
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fa0b 	bl	8003318 <LL_ADC_SetOffsetState>
 8003f02:	e047      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	069b      	lsls	r3, r3, #26
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f4a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f6e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff facd 	bl	8003538 <LL_ADC_IsEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 8219 	bne.w	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7ff fa32 	bl	800341c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4aa1      	ldr	r2, [pc, #644]	; (8004244 <HAL_ADC_ConfigChannel+0x888>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	f040 812e 	bne.w	8004220 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x630>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	0e9b      	lsrs	r3, r3, #26
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	bf94      	ite	ls
 8003fe4:	2301      	movls	r3, #1
 8003fe6:	2300      	movhi	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e019      	b.n	8004020 <HAL_ADC_ConfigChannel+0x664>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff4:	fa93 f3a3 	rbit	r3, r3
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e003      	b.n	8004010 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3301      	adds	r3, #1
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	2b09      	cmp	r3, #9
 8004018:	bf94      	ite	ls
 800401a:	2301      	movls	r3, #1
 800401c:	2300      	movhi	r3, #0
 800401e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004020:	2b00      	cmp	r3, #0
 8004022:	d079      	beq.n	8004118 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x684>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	3301      	adds	r3, #1
 8004038:	069b      	lsls	r3, r3, #26
 800403a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800403e:	e015      	b.n	800406c <HAL_ADC_ConfigChannel+0x6b0>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800404e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004050:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e003      	b.n	8004064 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	069b      	lsls	r3, r3, #26
 8004068:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_ADC_ConfigChannel+0x6d0>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	3301      	adds	r3, #1
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	e017      	b.n	80040bc <HAL_ADC_ConfigChannel+0x700>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80040a4:	2320      	movs	r3, #32
 80040a6:	e003      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80040a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2101      	movs	r1, #1
 80040b8:	fa01 f303 	lsl.w	r3, r1, r3
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x726>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0e9b      	lsrs	r3, r3, #26
 80040d2:	3301      	adds	r3, #1
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	051b      	lsls	r3, r3, #20
 80040e0:	e018      	b.n	8004114 <HAL_ADC_ConfigChannel+0x758>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80040fa:	2320      	movs	r3, #32
 80040fc:	e003      	b.n	8004106 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	3301      	adds	r3, #1
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004114:	430b      	orrs	r3, r1
 8004116:	e07e      	b.n	8004216 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x778>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	0e9b      	lsrs	r3, r3, #26
 800412a:	3301      	adds	r3, #1
 800412c:	069b      	lsls	r3, r3, #26
 800412e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004132:	e015      	b.n	8004160 <HAL_ADC_ConfigChannel+0x7a4>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800414c:	2320      	movs	r3, #32
 800414e:	e003      	b.n	8004158 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	069b      	lsls	r3, r3, #26
 800415c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x7c4>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0e9b      	lsrs	r3, r3, #26
 8004172:	3301      	adds	r3, #1
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2101      	movs	r1, #1
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	e017      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x7f4>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	61bb      	str	r3, [r7, #24]
  return result;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004198:	2320      	movs	r3, #32
 800419a:	e003      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	ea42 0103 	orr.w	r1, r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x820>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0e9b      	lsrs	r3, r3, #26
 80041c6:	3301      	adds	r3, #1
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	3b1e      	subs	r3, #30
 80041d4:	051b      	lsls	r3, r3, #20
 80041d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041da:	e01b      	b.n	8004214 <HAL_ADC_ConfigChannel+0x858>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	60fb      	str	r3, [r7, #12]
  return result;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80041f4:	2320      	movs	r3, #32
 80041f6:	e003      	b.n	8004200 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	3301      	adds	r3, #1
 8004202:	f003 021f 	and.w	r2, r3, #31
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	3b1e      	subs	r3, #30
 800420e:	051b      	lsls	r3, r3, #20
 8004210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004214:	430b      	orrs	r3, r1
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	4619      	mov	r1, r3
 800421c:	f7ff f8d2 	bl	80033c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f280 80d7 	bge.w	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a06      	ldr	r2, [pc, #24]	; (8004248 <HAL_ADC_ConfigChannel+0x88c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_ADC_ConfigChannel+0x882>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_ADC_ConfigChannel+0x890>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10a      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x898>
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <HAL_ADC_ConfigChannel+0x894>)
 8004240:	e009      	b.n	8004256 <HAL_ADC_ConfigChannel+0x89a>
 8004242:	bf00      	nop
 8004244:	47ff0000 	.word	0x47ff0000
 8004248:	40022000 	.word	0x40022000
 800424c:	40022100 	.word	0x40022100
 8004250:	40022300 	.word	0x40022300
 8004254:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_ADC_ConfigChannel+0xa30>)
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe ff88 	bl	800316c <LL_ADC_GetCommonPathInternalCh>
 800425c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a62      	ldr	r2, [pc, #392]	; (80043f0 <HAL_ADC_ConfigChannel+0xa34>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d004      	beq.n	8004274 <HAL_ADC_ConfigChannel+0x8b8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a61      	ldr	r2, [pc, #388]	; (80043f4 <HAL_ADC_ConfigChannel+0xa38>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d10e      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x8d6>
 8004274:	485e      	ldr	r0, [pc, #376]	; (80043f0 <HAL_ADC_ConfigChannel+0xa34>)
 8004276:	f7ff f95f 	bl	8003538 <LL_ADC_IsEnabled>
 800427a:	4604      	mov	r4, r0
 800427c:	485d      	ldr	r0, [pc, #372]	; (80043f4 <HAL_ADC_ConfigChannel+0xa38>)
 800427e:	f7ff f95b 	bl	8003538 <LL_ADC_IsEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	4323      	orrs	r3, r4
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e008      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x8e8>
 8004292:	4859      	ldr	r0, [pc, #356]	; (80043f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004294:	f7ff f950 	bl	8003538 <LL_ADC_IsEnabled>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8084 	beq.w	80043b2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a53      	ldr	r2, [pc, #332]	; (80043fc <HAL_ADC_ConfigChannel+0xa40>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d132      	bne.n	800431a <HAL_ADC_ConfigChannel+0x95e>
 80042b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d12c      	bne.n	800431a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <HAL_ADC_ConfigChannel+0xa3c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	f040 8086 	bne.w	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a47      	ldr	r2, [pc, #284]	; (80043f0 <HAL_ADC_ConfigChannel+0xa34>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x924>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a46      	ldr	r2, [pc, #280]	; (80043f4 <HAL_ADC_ConfigChannel+0xa38>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x928>
 80042e0:	4a47      	ldr	r2, [pc, #284]	; (8004400 <HAL_ADC_ConfigChannel+0xa44>)
 80042e2:	e000      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x92a>
 80042e4:	4a41      	ldr	r2, [pc, #260]	; (80043ec <HAL_ADC_ConfigChannel+0xa30>)
 80042e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7fe ff28 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f6:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_ADC_ConfigChannel+0xa48>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	4a42      	ldr	r2, [pc, #264]	; (8004408 <HAL_ADC_ConfigChannel+0xa4c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	3301      	adds	r3, #1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800430a:	e002      	b.n	8004312 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3b01      	subs	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004318:	e05e      	b.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <HAL_ADC_ConfigChannel+0xa50>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d120      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x9aa>
 8004324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d14e      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <HAL_ADC_ConfigChannel+0xa34>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_ADC_ConfigChannel+0x992>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <HAL_ADC_ConfigChannel+0xa38>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x996>
 800434e:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <HAL_ADC_ConfigChannel+0xa44>)
 8004350:	e000      	b.n	8004354 <HAL_ADC_ConfigChannel+0x998>
 8004352:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_ADC_ConfigChannel+0xa30>)
 8004354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7fe fef1 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004364:	e038      	b.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <HAL_ADC_ConfigChannel+0xa54>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d133      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
 8004370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d12d      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d128      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_ADC_ConfigChannel+0xa34>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_ADC_ConfigChannel+0x9de>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_ADC_ConfigChannel+0xa38>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x9e2>
 800439a:	4a19      	ldr	r2, [pc, #100]	; (8004400 <HAL_ADC_ConfigChannel+0xa44>)
 800439c:	e000      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x9e4>
 800439e:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_ADC_ConfigChannel+0xa30>)
 80043a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fe fecb 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
 80043b0:	e012      	b.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80043c4:	e008      	b.n	80043d8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043e0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	37e4      	adds	r7, #228	; 0xe4
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd90      	pop	{r4, r7, pc}
 80043ec:	58026300 	.word	0x58026300
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40022100 	.word	0x40022100
 80043f8:	58026000 	.word	0x58026000
 80043fc:	c7520000 	.word	0xc7520000
 8004400:	40022300 	.word	0x40022300
 8004404:	24000000 	.word	0x24000000
 8004408:	053e2d63 	.word	0x053e2d63
 800440c:	c3210000 	.word	0xc3210000
 8004410:	cb840000 	.word	0xcb840000

08004414 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6c      	ldr	r2, [pc, #432]	; (80045d4 <ADC_ConfigureBoostMode+0x1c0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <ADC_ConfigureBoostMode+0x1c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6b      	ldr	r2, [pc, #428]	; (80045d8 <ADC_ConfigureBoostMode+0x1c4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d109      	bne.n	8004444 <ADC_ConfigureBoostMode+0x30>
 8004430:	4b6a      	ldr	r3, [pc, #424]	; (80045dc <ADC_ConfigureBoostMode+0x1c8>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e008      	b.n	8004456 <ADC_ConfigureBoostMode+0x42>
 8004444:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <ADC_ConfigureBoostMode+0x1cc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01c      	beq.n	8004494 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800445a:	f005 f897 	bl	800958c <HAL_RCC_GetHCLKFreq>
 800445e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004468:	d010      	beq.n	800448c <ADC_ConfigureBoostMode+0x78>
 800446a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800446e:	d873      	bhi.n	8004558 <ADC_ConfigureBoostMode+0x144>
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d002      	beq.n	800447c <ADC_ConfigureBoostMode+0x68>
 8004476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447a:	d16d      	bne.n	8004558 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	60fb      	str	r3, [r7, #12]
        break;
 800448a:	e068      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	089b      	lsrs	r3, r3, #2
 8004490:	60fb      	str	r3, [r7, #12]
        break;
 8004492:	e064      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004494:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	f006 fa72 	bl	800a984 <HAL_RCCEx_GetPeriphCLKFreq>
 80044a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044aa:	d051      	beq.n	8004550 <ADC_ConfigureBoostMode+0x13c>
 80044ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044b0:	d854      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044b6:	d047      	beq.n	8004548 <ADC_ConfigureBoostMode+0x134>
 80044b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044bc:	d84e      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c2:	d03d      	beq.n	8004540 <ADC_ConfigureBoostMode+0x12c>
 80044c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c8:	d848      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ce:	d033      	beq.n	8004538 <ADC_ConfigureBoostMode+0x124>
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d4:	d842      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044da:	d029      	beq.n	8004530 <ADC_ConfigureBoostMode+0x11c>
 80044dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044e0:	d83c      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044e6:	d01a      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 80044e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044ec:	d836      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044f2:	d014      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 80044f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044f8:	d830      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d00e      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004504:	d82a      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 8004506:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800450a:	d008      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 800450c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004510:	d824      	bhi.n	800455c <ADC_ConfigureBoostMode+0x148>
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004516:	d002      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 8004518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800451c:	d11e      	bne.n	800455c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	0c9b      	lsrs	r3, r3, #18
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	60fb      	str	r3, [r7, #12]
        break;
 800452e:	e016      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
        break;
 8004536:	e012      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e00e      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e00a      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	09db      	lsrs	r3, r3, #7
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e006      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	60fb      	str	r3, [r7, #12]
        break;
 8004556:	e002      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800455c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <ADC_ConfigureBoostMode+0x1d0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d808      	bhi.n	800457e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800457a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800457c:	e025      	b.n	80045ca <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <ADC_ConfigureBoostMode+0x1d4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d80a      	bhi.n	800459c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004598:	609a      	str	r2, [r3, #8]
}
 800459a:	e016      	b.n	80045ca <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <ADC_ConfigureBoostMode+0x1d8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d80a      	bhi.n	80045ba <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	e007      	b.n	80045ca <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045c8:	609a      	str	r2, [r3, #8]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40022000 	.word	0x40022000
 80045d8:	40022100 	.word	0x40022100
 80045dc:	40022300 	.word	0x40022300
 80045e0:	58026300 	.word	0x58026300
 80045e4:	005f5e10 	.word	0x005f5e10
 80045e8:	00bebc20 	.word	0x00bebc20
 80045ec:	017d7840 	.word	0x017d7840

080045f0 <LL_ADC_IsEnabled>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <LL_ADC_IsEnabled+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_ADC_IsEnabled+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_ADC_REG_IsConversionOngoing>:
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d101      	bne.n	800462e <LL_ADC_REG_IsConversionOngoing+0x18>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b0a3      	sub	sp, #140	; 0x8c
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0c1      	b.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004662:	2300      	movs	r3, #0
 8004664:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004666:	2300      	movs	r3, #0
 8004668:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a5e      	ldr	r2, [pc, #376]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d102      	bne.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004674:	4b5d      	ldr	r3, [pc, #372]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e001      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0a0      	b.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ffb9 	bl	8004616 <LL_ADC_REG_IsConversionOngoing>
 80046a4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ffb2 	bl	8004616 <LL_ADC_REG_IsConversionOngoing>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8081 	bne.w	80047bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d17c      	bne.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a48      	ldr	r2, [pc, #288]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a46      	ldr	r2, [pc, #280]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80046d8:	e000      	b.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80046da:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80046dc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d039      	beq.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3a      	ldr	r2, [pc, #232]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a39      	ldr	r2, [pc, #228]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10e      	bne.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800470c:	4836      	ldr	r0, [pc, #216]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800470e:	f7ff ff6f 	bl	80045f0 <LL_ADC_IsEnabled>
 8004712:	4604      	mov	r4, r0
 8004714:	4835      	ldr	r0, [pc, #212]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004716:	f7ff ff6b 	bl	80045f0 <LL_ADC_IsEnabled>
 800471a:	4603      	mov	r3, r0
 800471c:	4323      	orrs	r3, r4
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	e008      	b.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800472a:	4833      	ldr	r0, [pc, #204]	; (80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800472c:	f7ff ff60 	bl	80045f0 <LL_ADC_IsEnabled>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d047      	beq.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004746:	4013      	ands	r3, r2
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	430a      	orrs	r2, r1
 8004752:	431a      	orrs	r2, r3
 8004754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004756:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004758:	e03a      	b.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800475a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004764:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10e      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800477a:	481b      	ldr	r0, [pc, #108]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800477c:	f7ff ff38 	bl	80045f0 <LL_ADC_IsEnabled>
 8004780:	4604      	mov	r4, r0
 8004782:	481a      	ldr	r0, [pc, #104]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004784:	f7ff ff34 	bl	80045f0 <LL_ADC_IsEnabled>
 8004788:	4603      	mov	r3, r0
 800478a:	4323      	orrs	r3, r4
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e008      	b.n	80047aa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004798:	4817      	ldr	r0, [pc, #92]	; (80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800479a:	f7ff ff29 	bl	80045f0 <LL_ADC_IsEnabled>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047ba:	e009      	b.n	80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80047ce:	e000      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80047da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80047de:	4618      	mov	r0, r3
 80047e0:	378c      	adds	r7, #140	; 0x8c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022100 	.word	0x40022100
 80047f0:	40022300 	.word	0x40022300
 80047f4:	58026300 	.word	0x58026300
 80047f8:	58026000 	.word	0x58026000
 80047fc:	fffff0e0 	.word	0xfffff0e0

08004800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <__NVIC_SetPriorityGrouping+0x40>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800481c:	4013      	ands	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <__NVIC_SetPriorityGrouping+0x44>)
 800482a:	4313      	orrs	r3, r2
 800482c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <__NVIC_SetPriorityGrouping+0x40>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	60d3      	str	r3, [r2, #12]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00
 8004844:	05fa0000 	.word	0x05fa0000

08004848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <__NVIC_GetPriorityGrouping+0x18>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0307 	and.w	r3, r3, #7
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800486e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004872:	2b00      	cmp	r3, #0
 8004874:	db0b      	blt.n	800488e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	f003 021f 	and.w	r2, r3, #31
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <__NVIC_EnableIRQ+0x38>)
 800487e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2001      	movs	r0, #1
 8004886:	fa00 f202 	lsl.w	r2, r0, r2
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000e100 	.word	0xe000e100

080048a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	db0a      	blt.n	80048ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	; (80048ec <__NVIC_SetPriority+0x4c>)
 80048ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048be:	0112      	lsls	r2, r2, #4
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	440b      	add	r3, r1
 80048c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c8:	e00a      	b.n	80048e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4908      	ldr	r1, [pc, #32]	; (80048f0 <__NVIC_SetPriority+0x50>)
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	3b04      	subs	r3, #4
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	440b      	add	r3, r1
 80048de:	761a      	strb	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000e100 	.word	0xe000e100
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f1c3 0307 	rsb	r3, r3, #7
 800490e:	2b04      	cmp	r3, #4
 8004910:	bf28      	it	cs
 8004912:	2304      	movcs	r3, #4
 8004914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3304      	adds	r3, #4
 800491a:	2b06      	cmp	r3, #6
 800491c:	d902      	bls.n	8004924 <NVIC_EncodePriority+0x30>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3b03      	subs	r3, #3
 8004922:	e000      	b.n	8004926 <NVIC_EncodePriority+0x32>
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	401a      	ands	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800493c:	f04f 31ff 	mov.w	r1, #4294967295
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	43d9      	mvns	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494c:	4313      	orrs	r3, r2
         );
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496c:	d301      	bcc.n	8004972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496e:	2301      	movs	r3, #1
 8004970:	e00f      	b.n	8004992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <SysTick_Config+0x40>)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800497a:	210f      	movs	r1, #15
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	f7ff ff8e 	bl	80048a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <SysTick_Config+0x40>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <SysTick_Config+0x40>)
 800498c:	2207      	movs	r2, #7
 800498e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	e000e010 	.word	0xe000e010

080049a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff ff29 	bl	8004800 <__NVIC_SetPriorityGrouping>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	4603      	mov	r3, r0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049c4:	f7ff ff40 	bl	8004848 <__NVIC_GetPriorityGrouping>
 80049c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7ff ff90 	bl	80048f4 <NVIC_EncodePriority>
 80049d4:	4602      	mov	r2, r0
 80049d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff5f 	bl	80048a0 <__NVIC_SetPriority>
}
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	4603      	mov	r3, r0
 80049f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff33 	bl	8004864 <__NVIC_EnableIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ffa4 	bl	800495c <SysTick_Config>
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a28:	f7fe fb34 	bl	8003094 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e314      	b.n	8005062 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a66      	ldr	r2, [pc, #408]	; (8004bd8 <HAL_DMA_Init+0x1b8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d04a      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_DMA_Init+0x1bc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d045      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <HAL_DMA_Init+0x1c0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d040      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a62      	ldr	r2, [pc, #392]	; (8004be4 <HAL_DMA_Init+0x1c4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d03b      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a60      	ldr	r2, [pc, #384]	; (8004be8 <HAL_DMA_Init+0x1c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d036      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	; (8004bec <HAL_DMA_Init+0x1cc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d031      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	; (8004bf0 <HAL_DMA_Init+0x1d0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d02c      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	; (8004bf4 <HAL_DMA_Init+0x1d4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d027      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	; (8004bf8 <HAL_DMA_Init+0x1d8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d022      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a59      	ldr	r2, [pc, #356]	; (8004bfc <HAL_DMA_Init+0x1dc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01d      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_DMA_Init+0x1e0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d018      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a56      	ldr	r2, [pc, #344]	; (8004c04 <HAL_DMA_Init+0x1e4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d013      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	; (8004c08 <HAL_DMA_Init+0x1e8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a53      	ldr	r2, [pc, #332]	; (8004c0c <HAL_DMA_Init+0x1ec>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_DMA_Init+0x1f0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d004      	beq.n	8004ad8 <HAL_DMA_Init+0xb8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a50      	ldr	r2, [pc, #320]	; (8004c14 <HAL_DMA_Init+0x1f4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_DMA_Init+0xbc>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_DMA_Init+0xbe>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 813c 	beq.w	8004d5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <HAL_DMA_Init+0x1b8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a36      	ldr	r2, [pc, #216]	; (8004bdc <HAL_DMA_Init+0x1bc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <HAL_DMA_Init+0x1c0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a33      	ldr	r2, [pc, #204]	; (8004be4 <HAL_DMA_Init+0x1c4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a31      	ldr	r2, [pc, #196]	; (8004be8 <HAL_DMA_Init+0x1c8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a30      	ldr	r2, [pc, #192]	; (8004bec <HAL_DMA_Init+0x1cc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2e      	ldr	r2, [pc, #184]	; (8004bf0 <HAL_DMA_Init+0x1d0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <HAL_DMA_Init+0x1d4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <HAL_DMA_Init+0x1d8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_DMA_Init+0x1dc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <HAL_DMA_Init+0x1e0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <HAL_DMA_Init+0x1e4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a25      	ldr	r2, [pc, #148]	; (8004c08 <HAL_DMA_Init+0x1e8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <HAL_DMA_Init+0x1ec>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	; (8004c10 <HAL_DMA_Init+0x1f0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Init+0x174>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_DMA_Init+0x1f4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <HAL_DMA_Init+0x186>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e007      	b.n	8004bb6 <HAL_DMA_Init+0x196>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bb6:	e02f      	b.n	8004c18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bb8:	f7fe fa6c 	bl	8003094 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d928      	bls.n	8004c18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e244      	b.n	8005062 <HAL_DMA_Init+0x642>
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1c8      	bne.n	8004bb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4b84      	ldr	r3, [pc, #528]	; (8004e44 <HAL_DMA_Init+0x424>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d107      	bne.n	8004c7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4313      	orrs	r3, r2
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b28      	cmp	r3, #40	; 0x28
 8004c82:	d903      	bls.n	8004c8c <HAL_DMA_Init+0x26c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8a:	d91f      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b3e      	cmp	r3, #62	; 0x3e
 8004c92:	d903      	bls.n	8004c9c <HAL_DMA_Init+0x27c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b42      	cmp	r3, #66	; 0x42
 8004c9a:	d917      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b46      	cmp	r3, #70	; 0x46
 8004ca2:	d903      	bls.n	8004cac <HAL_DMA_Init+0x28c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b48      	cmp	r3, #72	; 0x48
 8004caa:	d90f      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b4e      	cmp	r3, #78	; 0x4e
 8004cb2:	d903      	bls.n	8004cbc <HAL_DMA_Init+0x29c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b52      	cmp	r3, #82	; 0x52
 8004cba:	d907      	bls.n	8004ccc <HAL_DMA_Init+0x2ac>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b73      	cmp	r3, #115	; 0x73
 8004cc2:	d905      	bls.n	8004cd0 <HAL_DMA_Init+0x2b0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b77      	cmp	r3, #119	; 0x77
 8004cca:	d801      	bhi.n	8004cd0 <HAL_DMA_Init+0x2b0>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_DMA_Init+0x2b2>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d117      	bne.n	8004d38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 f9b6 	bl	800608c <DMA_CheckFifoParam>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e194      	b.n	8005062 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 f8f1 	bl	8005f28 <DMA_CalcBaseAndBitshift>
 8004d46:	4603      	mov	r3, r0
 8004d48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	223f      	movs	r2, #63	; 0x3f
 8004d54:	409a      	lsls	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	e0ca      	b.n	8004ef2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_DMA_Init+0x428>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d022      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <HAL_DMA_Init+0x42c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d01d      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a36      	ldr	r2, [pc, #216]	; (8004e50 <HAL_DMA_Init+0x430>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a35      	ldr	r2, [pc, #212]	; (8004e54 <HAL_DMA_Init+0x434>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <HAL_DMA_Init+0x438>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a32      	ldr	r2, [pc, #200]	; (8004e5c <HAL_DMA_Init+0x43c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <HAL_DMA_Init+0x440>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_DMA_Init+0x38c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <HAL_DMA_Init+0x444>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_DMA_Init+0x390>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_Init+0x392>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8094 	beq.w	8004ee0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <HAL_DMA_Init+0x428>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d021      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_DMA_Init+0x42c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d01c      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_DMA_Init+0x430>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d017      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_DMA_Init+0x434>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d012      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_DMA_Init+0x438>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00d      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <HAL_DMA_Init+0x43c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d008      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_DMA_Init+0x440>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <HAL_DMA_Init+0x3e6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_DMA_Init+0x444>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_DMA_Init+0x448>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b40      	cmp	r3, #64	; 0x40
 8004e2e:	d01d      	beq.n	8004e6c <HAL_DMA_Init+0x44c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d102      	bne.n	8004e3e <HAL_DMA_Init+0x41e>
 8004e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3c:	e017      	b.n	8004e6e <HAL_DMA_Init+0x44e>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e015      	b.n	8004e6e <HAL_DMA_Init+0x44e>
 8004e42:	bf00      	nop
 8004e44:	fe10803f 	.word	0xfe10803f
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
 8004e68:	fffe000f 	.word	0xfffe000f
 8004e6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68d2      	ldr	r2, [r2, #12]
 8004e72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_DMA_Init+0x64c>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4a6e      	ldr	r2, [pc, #440]	; (8005070 <HAL_DMA_Init+0x650>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f001 f82f 	bl	8005f28 <DMA_CalcBaseAndBitshift>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	e008      	b.n	8004ef2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0b7      	b.n	8005062 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5f      	ldr	r2, [pc, #380]	; (8005074 <HAL_DMA_Init+0x654>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d072      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a5d      	ldr	r2, [pc, #372]	; (8005078 <HAL_DMA_Init+0x658>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d06d      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5c      	ldr	r2, [pc, #368]	; (800507c <HAL_DMA_Init+0x65c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d068      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5a      	ldr	r2, [pc, #360]	; (8005080 <HAL_DMA_Init+0x660>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d063      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a59      	ldr	r2, [pc, #356]	; (8005084 <HAL_DMA_Init+0x664>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d05e      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a57      	ldr	r2, [pc, #348]	; (8005088 <HAL_DMA_Init+0x668>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d059      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a56      	ldr	r2, [pc, #344]	; (800508c <HAL_DMA_Init+0x66c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d054      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a54      	ldr	r2, [pc, #336]	; (8005090 <HAL_DMA_Init+0x670>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d04f      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a53      	ldr	r2, [pc, #332]	; (8005094 <HAL_DMA_Init+0x674>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d04a      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a51      	ldr	r2, [pc, #324]	; (8005098 <HAL_DMA_Init+0x678>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d045      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a50      	ldr	r2, [pc, #320]	; (800509c <HAL_DMA_Init+0x67c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d040      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4e      	ldr	r2, [pc, #312]	; (80050a0 <HAL_DMA_Init+0x680>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d03b      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a4d      	ldr	r2, [pc, #308]	; (80050a4 <HAL_DMA_Init+0x684>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d036      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_DMA_Init+0x688>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4a      	ldr	r2, [pc, #296]	; (80050ac <HAL_DMA_Init+0x68c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d02c      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a48      	ldr	r2, [pc, #288]	; (80050b0 <HAL_DMA_Init+0x690>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d027      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a47      	ldr	r2, [pc, #284]	; (80050b4 <HAL_DMA_Init+0x694>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a45      	ldr	r2, [pc, #276]	; (80050b8 <HAL_DMA_Init+0x698>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a44      	ldr	r2, [pc, #272]	; (80050bc <HAL_DMA_Init+0x69c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_DMA_Init+0x6a0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a41      	ldr	r2, [pc, #260]	; (80050c4 <HAL_DMA_Init+0x6a4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3f      	ldr	r2, [pc, #252]	; (80050c8 <HAL_DMA_Init+0x6a8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3e      	ldr	r2, [pc, #248]	; (80050cc <HAL_DMA_Init+0x6ac>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_DMA_Init+0x5c2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3c      	ldr	r2, [pc, #240]	; (80050d0 <HAL_DMA_Init+0x6b0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_DMA_Init+0x5c6>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_DMA_Init+0x5c8>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d032      	beq.n	8005052 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 f8c9 	bl	8006184 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d102      	bne.n	8005000 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005014:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_DMA_Init+0x620>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d80c      	bhi.n	8005040 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f946 	bl	80062b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e008      	b.n	8005052 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	a7fdabf8 	.word	0xa7fdabf8
 8005070:	cccccccd 	.word	0xcccccccd
 8005074:	40020010 	.word	0x40020010
 8005078:	40020028 	.word	0x40020028
 800507c:	40020040 	.word	0x40020040
 8005080:	40020058 	.word	0x40020058
 8005084:	40020070 	.word	0x40020070
 8005088:	40020088 	.word	0x40020088
 800508c:	400200a0 	.word	0x400200a0
 8005090:	400200b8 	.word	0x400200b8
 8005094:	40020410 	.word	0x40020410
 8005098:	40020428 	.word	0x40020428
 800509c:	40020440 	.word	0x40020440
 80050a0:	40020458 	.word	0x40020458
 80050a4:	40020470 	.word	0x40020470
 80050a8:	40020488 	.word	0x40020488
 80050ac:	400204a0 	.word	0x400204a0
 80050b0:	400204b8 	.word	0x400204b8
 80050b4:	58025408 	.word	0x58025408
 80050b8:	5802541c 	.word	0x5802541c
 80050bc:	58025430 	.word	0x58025430
 80050c0:	58025444 	.word	0x58025444
 80050c4:	58025458 	.word	0x58025458
 80050c8:	5802546c 	.word	0x5802546c
 80050cc:	58025480 	.word	0x58025480
 80050d0:	58025494 	.word	0x58025494

080050d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050e0:	4b67      	ldr	r3, [pc, #412]	; (8005280 <HAL_DMA_IRQHandler+0x1ac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a67      	ldr	r2, [pc, #412]	; (8005284 <HAL_DMA_IRQHandler+0x1b0>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	0a9b      	lsrs	r3, r3, #10
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a5f      	ldr	r2, [pc, #380]	; (8005288 <HAL_DMA_IRQHandler+0x1b4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d04a      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5d      	ldr	r2, [pc, #372]	; (800528c <HAL_DMA_IRQHandler+0x1b8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d045      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a5c      	ldr	r2, [pc, #368]	; (8005290 <HAL_DMA_IRQHandler+0x1bc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d040      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a5a      	ldr	r2, [pc, #360]	; (8005294 <HAL_DMA_IRQHandler+0x1c0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d03b      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a59      	ldr	r2, [pc, #356]	; (8005298 <HAL_DMA_IRQHandler+0x1c4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d036      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a57      	ldr	r2, [pc, #348]	; (800529c <HAL_DMA_IRQHandler+0x1c8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d031      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_DMA_IRQHandler+0x1cc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d02c      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a54      	ldr	r2, [pc, #336]	; (80052a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d027      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a53      	ldr	r2, [pc, #332]	; (80052a8 <HAL_DMA_IRQHandler+0x1d4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a51      	ldr	r2, [pc, #324]	; (80052ac <HAL_DMA_IRQHandler+0x1d8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01d      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a50      	ldr	r2, [pc, #320]	; (80052b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4e      	ldr	r2, [pc, #312]	; (80052b4 <HAL_DMA_IRQHandler+0x1e0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4d      	ldr	r2, [pc, #308]	; (80052b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4b      	ldr	r2, [pc, #300]	; (80052bc <HAL_DMA_IRQHandler+0x1e8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a4a      	ldr	r2, [pc, #296]	; (80052c0 <HAL_DMA_IRQHandler+0x1ec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_DMA_IRQHandler+0xd2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a48      	ldr	r2, [pc, #288]	; (80052c4 <HAL_DMA_IRQHandler+0x1f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <HAL_DMA_IRQHandler+0xd6>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_DMA_IRQHandler+0xd8>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 842b 	beq.w	8005a08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2208      	movs	r2, #8
 80051bc:	409a      	lsls	r2, r3
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80a2 	beq.w	800530c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <HAL_DMA_IRQHandler+0x1b4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d04a      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2d      	ldr	r2, [pc, #180]	; (800528c <HAL_DMA_IRQHandler+0x1b8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d045      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <HAL_DMA_IRQHandler+0x1bc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d040      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <HAL_DMA_IRQHandler+0x1c0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d03b      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a28      	ldr	r2, [pc, #160]	; (8005298 <HAL_DMA_IRQHandler+0x1c4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d036      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <HAL_DMA_IRQHandler+0x1c8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d031      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <HAL_DMA_IRQHandler+0x1cc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02c      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d027      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_DMA_IRQHandler+0x1d4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a21      	ldr	r2, [pc, #132]	; (80052ac <HAL_DMA_IRQHandler+0x1d8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d01d      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_DMA_IRQHandler+0x1e0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_DMA_IRQHandler+0x1e8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <HAL_DMA_IRQHandler+0x1ec>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_DMA_IRQHandler+0x194>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_DMA_IRQHandler+0x1f0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d12f      	bne.n	80052c8 <HAL_DMA_IRQHandler+0x1f4>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e02e      	b.n	80052dc <HAL_DMA_IRQHandler+0x208>
 800527e:	bf00      	nop
 8005280:	24000000 	.word	0x24000000
 8005284:	1b4e81b5 	.word	0x1b4e81b5
 8005288:	40020010 	.word	0x40020010
 800528c:	40020028 	.word	0x40020028
 8005290:	40020040 	.word	0x40020040
 8005294:	40020058 	.word	0x40020058
 8005298:	40020070 	.word	0x40020070
 800529c:	40020088 	.word	0x40020088
 80052a0:	400200a0 	.word	0x400200a0
 80052a4:	400200b8 	.word	0x400200b8
 80052a8:	40020410 	.word	0x40020410
 80052ac:	40020428 	.word	0x40020428
 80052b0:	40020440 	.word	0x40020440
 80052b4:	40020458 	.word	0x40020458
 80052b8:	40020470 	.word	0x40020470
 80052bc:	40020488 	.word	0x40020488
 80052c0:	400204a0 	.word	0x400204a0
 80052c4:	400204b8 	.word	0x400204b8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d015      	beq.n	800530c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2208      	movs	r2, #8
 80052fa:	409a      	lsls	r2, r3
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f043 0201 	orr.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d06e      	beq.n	8005400 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a69      	ldr	r2, [pc, #420]	; (80054cc <HAL_DMA_IRQHandler+0x3f8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d04a      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a67      	ldr	r2, [pc, #412]	; (80054d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d045      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a66      	ldr	r2, [pc, #408]	; (80054d4 <HAL_DMA_IRQHandler+0x400>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d040      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a64      	ldr	r2, [pc, #400]	; (80054d8 <HAL_DMA_IRQHandler+0x404>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d03b      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a63      	ldr	r2, [pc, #396]	; (80054dc <HAL_DMA_IRQHandler+0x408>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d036      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a61      	ldr	r2, [pc, #388]	; (80054e0 <HAL_DMA_IRQHandler+0x40c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a60      	ldr	r2, [pc, #384]	; (80054e4 <HAL_DMA_IRQHandler+0x410>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d02c      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a5e      	ldr	r2, [pc, #376]	; (80054e8 <HAL_DMA_IRQHandler+0x414>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d027      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a5d      	ldr	r2, [pc, #372]	; (80054ec <HAL_DMA_IRQHandler+0x418>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d022      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a5b      	ldr	r2, [pc, #364]	; (80054f0 <HAL_DMA_IRQHandler+0x41c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01d      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5a      	ldr	r2, [pc, #360]	; (80054f4 <HAL_DMA_IRQHandler+0x420>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a58      	ldr	r2, [pc, #352]	; (80054f8 <HAL_DMA_IRQHandler+0x424>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a57      	ldr	r2, [pc, #348]	; (80054fc <HAL_DMA_IRQHandler+0x428>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a55      	ldr	r2, [pc, #340]	; (8005500 <HAL_DMA_IRQHandler+0x42c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a54      	ldr	r2, [pc, #336]	; (8005504 <HAL_DMA_IRQHandler+0x430>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x2ee>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a52      	ldr	r2, [pc, #328]	; (8005508 <HAL_DMA_IRQHandler+0x434>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10a      	bne.n	80053d8 <HAL_DMA_IRQHandler+0x304>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e003      	b.n	80053e0 <HAL_DMA_IRQHandler+0x30c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2201      	movs	r2, #1
 80053ee:	409a      	lsls	r2, r3
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f043 0202 	orr.w	r2, r3, #2
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2204      	movs	r2, #4
 800540a:	409a      	lsls	r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 808f 	beq.w	8005534 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <HAL_DMA_IRQHandler+0x3f8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <HAL_DMA_IRQHandler+0x400>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a27      	ldr	r2, [pc, #156]	; (80054d8 <HAL_DMA_IRQHandler+0x404>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a26      	ldr	r2, [pc, #152]	; (80054dc <HAL_DMA_IRQHandler+0x408>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a24      	ldr	r2, [pc, #144]	; (80054e0 <HAL_DMA_IRQHandler+0x40c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <HAL_DMA_IRQHandler+0x410>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HAL_DMA_IRQHandler+0x414>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a20      	ldr	r2, [pc, #128]	; (80054ec <HAL_DMA_IRQHandler+0x418>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <HAL_DMA_IRQHandler+0x41c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <HAL_DMA_IRQHandler+0x420>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <HAL_DMA_IRQHandler+0x424>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <HAL_DMA_IRQHandler+0x428>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a18      	ldr	r2, [pc, #96]	; (8005500 <HAL_DMA_IRQHandler+0x42c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a17      	ldr	r2, [pc, #92]	; (8005504 <HAL_DMA_IRQHandler+0x430>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a15      	ldr	r2, [pc, #84]	; (8005508 <HAL_DMA_IRQHandler+0x434>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d12a      	bne.n	800550c <HAL_DMA_IRQHandler+0x438>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e023      	b.n	8005514 <HAL_DMA_IRQHandler+0x440>
 80054cc:	40020010 	.word	0x40020010
 80054d0:	40020028 	.word	0x40020028
 80054d4:	40020040 	.word	0x40020040
 80054d8:	40020058 	.word	0x40020058
 80054dc:	40020070 	.word	0x40020070
 80054e0:	40020088 	.word	0x40020088
 80054e4:	400200a0 	.word	0x400200a0
 80054e8:	400200b8 	.word	0x400200b8
 80054ec:	40020410 	.word	0x40020410
 80054f0:	40020428 	.word	0x40020428
 80054f4:	40020440 	.word	0x40020440
 80054f8:	40020458 	.word	0x40020458
 80054fc:	40020470 	.word	0x40020470
 8005500:	40020488 	.word	0x40020488
 8005504:	400204a0 	.word	0x400204a0
 8005508:	400204b8 	.word	0x400204b8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2204      	movs	r2, #4
 8005522:	409a      	lsls	r2, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552c:	f043 0204 	orr.w	r2, r3, #4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2210      	movs	r2, #16
 800553e:	409a      	lsls	r2, r3
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a6 	beq.w	8005696 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a85      	ldr	r2, [pc, #532]	; (8005764 <HAL_DMA_IRQHandler+0x690>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d04a      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a83      	ldr	r2, [pc, #524]	; (8005768 <HAL_DMA_IRQHandler+0x694>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d045      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a82      	ldr	r2, [pc, #520]	; (800576c <HAL_DMA_IRQHandler+0x698>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d040      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_DMA_IRQHandler+0x69c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d03b      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7f      	ldr	r2, [pc, #508]	; (8005774 <HAL_DMA_IRQHandler+0x6a0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d036      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7d      	ldr	r2, [pc, #500]	; (8005778 <HAL_DMA_IRQHandler+0x6a4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d031      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a7c      	ldr	r2, [pc, #496]	; (800577c <HAL_DMA_IRQHandler+0x6a8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d02c      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a7a      	ldr	r2, [pc, #488]	; (8005780 <HAL_DMA_IRQHandler+0x6ac>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d027      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a79      	ldr	r2, [pc, #484]	; (8005784 <HAL_DMA_IRQHandler+0x6b0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d022      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a77      	ldr	r2, [pc, #476]	; (8005788 <HAL_DMA_IRQHandler+0x6b4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01d      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a76      	ldr	r2, [pc, #472]	; (800578c <HAL_DMA_IRQHandler+0x6b8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d018      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a74      	ldr	r2, [pc, #464]	; (8005790 <HAL_DMA_IRQHandler+0x6bc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d013      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a73      	ldr	r2, [pc, #460]	; (8005794 <HAL_DMA_IRQHandler+0x6c0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00e      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a71      	ldr	r2, [pc, #452]	; (8005798 <HAL_DMA_IRQHandler+0x6c4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d009      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a70      	ldr	r2, [pc, #448]	; (800579c <HAL_DMA_IRQHandler+0x6c8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d004      	beq.n	80055ea <HAL_DMA_IRQHandler+0x516>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a6e      	ldr	r2, [pc, #440]	; (80057a0 <HAL_DMA_IRQHandler+0x6cc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d10a      	bne.n	8005600 <HAL_DMA_IRQHandler+0x52c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e009      	b.n	8005614 <HAL_DMA_IRQHandler+0x540>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf14      	ite	ne
 800560e:	2301      	movne	r3, #1
 8005610:	2300      	moveq	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d03e      	beq.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2210      	movs	r2, #16
 8005622:	409a      	lsls	r2, r3
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d018      	beq.n	8005668 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d108      	bne.n	8005656 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d024      	beq.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
 8005654:	e01f      	b.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01b      	beq.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	e016      	b.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0208 	bic.w	r2, r2, #8
 8005684:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2220      	movs	r2, #32
 80056a0:	409a      	lsls	r2, r3
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8110 	beq.w	80058cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	; (8005764 <HAL_DMA_IRQHandler+0x690>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d04a      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2b      	ldr	r2, [pc, #172]	; (8005768 <HAL_DMA_IRQHandler+0x694>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d045      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a29      	ldr	r2, [pc, #164]	; (800576c <HAL_DMA_IRQHandler+0x698>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d040      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a28      	ldr	r2, [pc, #160]	; (8005770 <HAL_DMA_IRQHandler+0x69c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d03b      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a26      	ldr	r2, [pc, #152]	; (8005774 <HAL_DMA_IRQHandler+0x6a0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d036      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a25      	ldr	r2, [pc, #148]	; (8005778 <HAL_DMA_IRQHandler+0x6a4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d031      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a23      	ldr	r2, [pc, #140]	; (800577c <HAL_DMA_IRQHandler+0x6a8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d02c      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a22      	ldr	r2, [pc, #136]	; (8005780 <HAL_DMA_IRQHandler+0x6ac>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d027      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a20      	ldr	r2, [pc, #128]	; (8005784 <HAL_DMA_IRQHandler+0x6b0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1f      	ldr	r2, [pc, #124]	; (8005788 <HAL_DMA_IRQHandler+0x6b4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d01d      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_DMA_IRQHandler+0x6b8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HAL_DMA_IRQHandler+0x6bc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <HAL_DMA_IRQHandler+0x6c0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a19      	ldr	r2, [pc, #100]	; (8005798 <HAL_DMA_IRQHandler+0x6c4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_DMA_IRQHandler+0x6c8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_DMA_IRQHandler+0x678>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <HAL_DMA_IRQHandler+0x6cc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d12b      	bne.n	80057a4 <HAL_DMA_IRQHandler+0x6d0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e02a      	b.n	80057b8 <HAL_DMA_IRQHandler+0x6e4>
 8005762:	bf00      	nop
 8005764:	40020010 	.word	0x40020010
 8005768:	40020028 	.word	0x40020028
 800576c:	40020040 	.word	0x40020040
 8005770:	40020058 	.word	0x40020058
 8005774:	40020070 	.word	0x40020070
 8005778:	40020088 	.word	0x40020088
 800577c:	400200a0 	.word	0x400200a0
 8005780:	400200b8 	.word	0x400200b8
 8005784:	40020410 	.word	0x40020410
 8005788:	40020428 	.word	0x40020428
 800578c:	40020440 	.word	0x40020440
 8005790:	40020458 	.word	0x40020458
 8005794:	40020470 	.word	0x40020470
 8005798:	40020488 	.word	0x40020488
 800579c:	400204a0 	.word	0x400204a0
 80057a0:	400204b8 	.word	0x400204b8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8087 	beq.w	80058cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2220      	movs	r2, #32
 80057c8:	409a      	lsls	r2, r3
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d139      	bne.n	800584e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0216 	bic.w	r2, r2, #22
 80057e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <HAL_DMA_IRQHandler+0x736>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0208 	bic.w	r2, r2, #8
 8005818:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	223f      	movs	r2, #63	; 0x3f
 8005824:	409a      	lsls	r2, r3
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 834a 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
          }
          return;
 800584c:	e344      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d108      	bne.n	800587c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	2b00      	cmp	r3, #0
 8005870:	d02c      	beq.n	80058cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e027      	b.n	80058cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d023      	beq.n	80058cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
 800588c:	e01e      	b.n	80058cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0210 	bic.w	r2, r2, #16
 80058aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8306 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8088 	beq.w	80059f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2204      	movs	r2, #4
 80058e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a7a      	ldr	r2, [pc, #488]	; (8005adc <HAL_DMA_IRQHandler+0xa08>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04a      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a79      	ldr	r2, [pc, #484]	; (8005ae0 <HAL_DMA_IRQHandler+0xa0c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d045      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a77      	ldr	r2, [pc, #476]	; (8005ae4 <HAL_DMA_IRQHandler+0xa10>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d040      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a76      	ldr	r2, [pc, #472]	; (8005ae8 <HAL_DMA_IRQHandler+0xa14>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d03b      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a74      	ldr	r2, [pc, #464]	; (8005aec <HAL_DMA_IRQHandler+0xa18>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d036      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a73      	ldr	r2, [pc, #460]	; (8005af0 <HAL_DMA_IRQHandler+0xa1c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d031      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a71      	ldr	r2, [pc, #452]	; (8005af4 <HAL_DMA_IRQHandler+0xa20>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02c      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a70      	ldr	r2, [pc, #448]	; (8005af8 <HAL_DMA_IRQHandler+0xa24>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d027      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a6e      	ldr	r2, [pc, #440]	; (8005afc <HAL_DMA_IRQHandler+0xa28>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6d      	ldr	r2, [pc, #436]	; (8005b00 <HAL_DMA_IRQHandler+0xa2c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a6b      	ldr	r2, [pc, #428]	; (8005b04 <HAL_DMA_IRQHandler+0xa30>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6a      	ldr	r2, [pc, #424]	; (8005b08 <HAL_DMA_IRQHandler+0xa34>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a68      	ldr	r2, [pc, #416]	; (8005b0c <HAL_DMA_IRQHandler+0xa38>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a67      	ldr	r2, [pc, #412]	; (8005b10 <HAL_DMA_IRQHandler+0xa3c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <HAL_DMA_IRQHandler+0xa40>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_DMA_IRQHandler+0x8b8>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a64      	ldr	r2, [pc, #400]	; (8005b18 <HAL_DMA_IRQHandler+0xa44>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <HAL_DMA_IRQHandler+0x8ca>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e007      	b.n	80059ae <HAL_DMA_IRQHandler+0x8da>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3301      	adds	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d307      	bcc.n	80059ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f2      	bne.n	80059ae <HAL_DMA_IRQHandler+0x8da>
 80059c8:	e000      	b.n	80059cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80059ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80059e2:	e003      	b.n	80059ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8272 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
 8005a06:	e26c      	b.n	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a43      	ldr	r2, [pc, #268]	; (8005b1c <HAL_DMA_IRQHandler+0xa48>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d022      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a42      	ldr	r2, [pc, #264]	; (8005b20 <HAL_DMA_IRQHandler+0xa4c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d01d      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a40      	ldr	r2, [pc, #256]	; (8005b24 <HAL_DMA_IRQHandler+0xa50>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d018      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	; (8005b28 <HAL_DMA_IRQHandler+0xa54>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3d      	ldr	r2, [pc, #244]	; (8005b2c <HAL_DMA_IRQHandler+0xa58>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00e      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3c      	ldr	r2, [pc, #240]	; (8005b30 <HAL_DMA_IRQHandler+0xa5c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d009      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3a      	ldr	r2, [pc, #232]	; (8005b34 <HAL_DMA_IRQHandler+0xa60>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x984>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a39      	ldr	r2, [pc, #228]	; (8005b38 <HAL_DMA_IRQHandler+0xa64>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x988>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <HAL_DMA_IRQHandler+0x98a>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 823f 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2204      	movs	r2, #4
 8005a76:	409a      	lsls	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80cd 	beq.w	8005c1c <HAL_DMA_IRQHandler+0xb48>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80c7 	beq.w	8005c1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2204      	movs	r2, #4
 8005a98:	409a      	lsls	r2, r3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d049      	beq.n	8005b3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8210 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ac4:	e20a      	b.n	8005edc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8206 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad8:	e200      	b.n	8005edc <HAL_DMA_IRQHandler+0xe08>
 8005ada:	bf00      	nop
 8005adc:	40020010 	.word	0x40020010
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020040 	.word	0x40020040
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	40020070 	.word	0x40020070
 8005af0:	40020088 	.word	0x40020088
 8005af4:	400200a0 	.word	0x400200a0
 8005af8:	400200b8 	.word	0x400200b8
 8005afc:	40020410 	.word	0x40020410
 8005b00:	40020428 	.word	0x40020428
 8005b04:	40020440 	.word	0x40020440
 8005b08:	40020458 	.word	0x40020458
 8005b0c:	40020470 	.word	0x40020470
 8005b10:	40020488 	.word	0x40020488
 8005b14:	400204a0 	.word	0x400204a0
 8005b18:	400204b8 	.word	0x400204b8
 8005b1c:	58025408 	.word	0x58025408
 8005b20:	5802541c 	.word	0x5802541c
 8005b24:	58025430 	.word	0x58025430
 8005b28:	58025444 	.word	0x58025444
 8005b2c:	58025458 	.word	0x58025458
 8005b30:	5802546c 	.word	0x5802546c
 8005b34:	58025480 	.word	0x58025480
 8005b38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d160      	bne.n	8005c08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7f      	ldr	r2, [pc, #508]	; (8005d48 <HAL_DMA_IRQHandler+0xc74>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d04a      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_DMA_IRQHandler+0xc78>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d045      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7c      	ldr	r2, [pc, #496]	; (8005d50 <HAL_DMA_IRQHandler+0xc7c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d040      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7a      	ldr	r2, [pc, #488]	; (8005d54 <HAL_DMA_IRQHandler+0xc80>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d03b      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a79      	ldr	r2, [pc, #484]	; (8005d58 <HAL_DMA_IRQHandler+0xc84>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d036      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a77      	ldr	r2, [pc, #476]	; (8005d5c <HAL_DMA_IRQHandler+0xc88>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d031      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a76      	ldr	r2, [pc, #472]	; (8005d60 <HAL_DMA_IRQHandler+0xc8c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d02c      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a74      	ldr	r2, [pc, #464]	; (8005d64 <HAL_DMA_IRQHandler+0xc90>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d027      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a73      	ldr	r2, [pc, #460]	; (8005d68 <HAL_DMA_IRQHandler+0xc94>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d022      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a71      	ldr	r2, [pc, #452]	; (8005d6c <HAL_DMA_IRQHandler+0xc98>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01d      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a70      	ldr	r2, [pc, #448]	; (8005d70 <HAL_DMA_IRQHandler+0xc9c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <HAL_DMA_IRQHandler+0xca0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d013      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a6d      	ldr	r2, [pc, #436]	; (8005d78 <HAL_DMA_IRQHandler+0xca4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6b      	ldr	r2, [pc, #428]	; (8005d7c <HAL_DMA_IRQHandler+0xca8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6a      	ldr	r2, [pc, #424]	; (8005d80 <HAL_DMA_IRQHandler+0xcac>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xb12>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a68      	ldr	r2, [pc, #416]	; (8005d84 <HAL_DMA_IRQHandler+0xcb0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d108      	bne.n	8005bf8 <HAL_DMA_IRQHandler+0xb24>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0208 	bic.w	r2, r2, #8
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	e007      	b.n	8005c08 <HAL_DMA_IRQHandler+0xb34>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8165 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c1a:	e15f      	b.n	8005edc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	2202      	movs	r2, #2
 8005c26:	409a      	lsls	r2, r3
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80c5 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xce8>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80bf 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2202      	movs	r2, #2
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 813a 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c74:	e134      	b.n	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8130 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c88:	e12a      	b.n	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8089 	bne.w	8005da8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <HAL_DMA_IRQHandler+0xc74>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d04a      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <HAL_DMA_IRQHandler+0xc78>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d045      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a28      	ldr	r2, [pc, #160]	; (8005d50 <HAL_DMA_IRQHandler+0xc7c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d040      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <HAL_DMA_IRQHandler+0xc80>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d03b      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <HAL_DMA_IRQHandler+0xc84>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <HAL_DMA_IRQHandler+0xc88>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d031      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a22      	ldr	r2, [pc, #136]	; (8005d60 <HAL_DMA_IRQHandler+0xc8c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d02c      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_DMA_IRQHandler+0xc90>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d027      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_DMA_IRQHandler+0xc94>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d022      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <HAL_DMA_IRQHandler+0xc98>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01d      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <HAL_DMA_IRQHandler+0xc9c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d018      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <HAL_DMA_IRQHandler+0xca0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <HAL_DMA_IRQHandler+0xca4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <HAL_DMA_IRQHandler+0xca8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <HAL_DMA_IRQHandler+0xcac>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_DMA_IRQHandler+0xc62>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <HAL_DMA_IRQHandler+0xcb0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d128      	bne.n	8005d88 <HAL_DMA_IRQHandler+0xcb4>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0214 	bic.w	r2, r2, #20
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e027      	b.n	8005d98 <HAL_DMA_IRQHandler+0xcc4>
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 020a 	bic.w	r2, r2, #10
 8005d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8097 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dba:	e091      	b.n	8005ee0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8088 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8082 	beq.w	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a41      	ldr	r2, [pc, #260]	; (8005ee8 <HAL_DMA_IRQHandler+0xe14>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d04a      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a3f      	ldr	r2, [pc, #252]	; (8005eec <HAL_DMA_IRQHandler+0xe18>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d045      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a3e      	ldr	r2, [pc, #248]	; (8005ef0 <HAL_DMA_IRQHandler+0xe1c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d040      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <HAL_DMA_IRQHandler+0xe20>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d03b      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ef8 <HAL_DMA_IRQHandler+0xe24>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d036      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_DMA_IRQHandler+0xe28>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d031      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <HAL_DMA_IRQHandler+0xe2c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d02c      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a36      	ldr	r2, [pc, #216]	; (8005f04 <HAL_DMA_IRQHandler+0xe30>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d027      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a35      	ldr	r2, [pc, #212]	; (8005f08 <HAL_DMA_IRQHandler+0xe34>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a33      	ldr	r2, [pc, #204]	; (8005f0c <HAL_DMA_IRQHandler+0xe38>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01d      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <HAL_DMA_IRQHandler+0xe3c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d018      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <HAL_DMA_IRQHandler+0xe40>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a2f      	ldr	r2, [pc, #188]	; (8005f18 <HAL_DMA_IRQHandler+0xe44>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00e      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2d      	ldr	r2, [pc, #180]	; (8005f1c <HAL_DMA_IRQHandler+0xe48>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d009      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <HAL_DMA_IRQHandler+0xe4c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_DMA_IRQHandler+0xdaa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <HAL_DMA_IRQHandler+0xe50>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <HAL_DMA_IRQHandler+0xdbc>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 021c 	bic.w	r2, r2, #28
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e007      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xdcc>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 020e 	bic.w	r2, r2, #14
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
 8005ed6:	e004      	b.n	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ed8:	bf00      	nop
 8005eda:	e002      	b.n	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005edc:	bf00      	nop
 8005ede:	e000      	b.n	8005ee2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ee0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ee2:	3728      	adds	r7, #40	; 0x28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40020010 	.word	0x40020010
 8005eec:	40020028 	.word	0x40020028
 8005ef0:	40020040 	.word	0x40020040
 8005ef4:	40020058 	.word	0x40020058
 8005ef8:	40020070 	.word	0x40020070
 8005efc:	40020088 	.word	0x40020088
 8005f00:	400200a0 	.word	0x400200a0
 8005f04:	400200b8 	.word	0x400200b8
 8005f08:	40020410 	.word	0x40020410
 8005f0c:	40020428 	.word	0x40020428
 8005f10:	40020440 	.word	0x40020440
 8005f14:	40020458 	.word	0x40020458
 8005f18:	40020470 	.word	0x40020470
 8005f1c:	40020488 	.word	0x40020488
 8005f20:	400204a0 	.word	0x400204a0
 8005f24:	400204b8 	.word	0x400204b8

08005f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a42      	ldr	r2, [pc, #264]	; (8006040 <DMA_CalcBaseAndBitshift+0x118>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d04a      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a41      	ldr	r2, [pc, #260]	; (8006044 <DMA_CalcBaseAndBitshift+0x11c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d045      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a3f      	ldr	r2, [pc, #252]	; (8006048 <DMA_CalcBaseAndBitshift+0x120>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d040      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a3e      	ldr	r2, [pc, #248]	; (800604c <DMA_CalcBaseAndBitshift+0x124>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d03b      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a3c      	ldr	r2, [pc, #240]	; (8006050 <DMA_CalcBaseAndBitshift+0x128>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d036      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a3b      	ldr	r2, [pc, #236]	; (8006054 <DMA_CalcBaseAndBitshift+0x12c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d031      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a39      	ldr	r2, [pc, #228]	; (8006058 <DMA_CalcBaseAndBitshift+0x130>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02c      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a38      	ldr	r2, [pc, #224]	; (800605c <DMA_CalcBaseAndBitshift+0x134>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a36      	ldr	r2, [pc, #216]	; (8006060 <DMA_CalcBaseAndBitshift+0x138>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d022      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a35      	ldr	r2, [pc, #212]	; (8006064 <DMA_CalcBaseAndBitshift+0x13c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01d      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a33      	ldr	r2, [pc, #204]	; (8006068 <DMA_CalcBaseAndBitshift+0x140>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d018      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a32      	ldr	r2, [pc, #200]	; (800606c <DMA_CalcBaseAndBitshift+0x144>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d013      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a30      	ldr	r2, [pc, #192]	; (8006070 <DMA_CalcBaseAndBitshift+0x148>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00e      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2f      	ldr	r2, [pc, #188]	; (8006074 <DMA_CalcBaseAndBitshift+0x14c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	; (8006078 <DMA_CalcBaseAndBitshift+0x150>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a2c      	ldr	r2, [pc, #176]	; (800607c <DMA_CalcBaseAndBitshift+0x154>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <DMA_CalcBaseAndBitshift+0xac>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <DMA_CalcBaseAndBitshift+0xae>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d024      	beq.n	8006024 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	3b10      	subs	r3, #16
 8005fe2:	4a27      	ldr	r2, [pc, #156]	; (8006080 <DMA_CalcBaseAndBitshift+0x158>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	4a24      	ldr	r2, [pc, #144]	; (8006084 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ff4:	5cd3      	ldrb	r3, [r2, r3]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d908      	bls.n	8006014 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <DMA_CalcBaseAndBitshift+0x160>)
 800600a:	4013      	ands	r3, r2
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	659a      	str	r2, [r3, #88]	; 0x58
 8006012:	e00d      	b.n	8006030 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <DMA_CalcBaseAndBitshift+0x160>)
 800601c:	4013      	ands	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6593      	str	r3, [r2, #88]	; 0x58
 8006022:	e005      	b.n	8006030 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40020010 	.word	0x40020010
 8006044:	40020028 	.word	0x40020028
 8006048:	40020040 	.word	0x40020040
 800604c:	40020058 	.word	0x40020058
 8006050:	40020070 	.word	0x40020070
 8006054:	40020088 	.word	0x40020088
 8006058:	400200a0 	.word	0x400200a0
 800605c:	400200b8 	.word	0x400200b8
 8006060:	40020410 	.word	0x40020410
 8006064:	40020428 	.word	0x40020428
 8006068:	40020440 	.word	0x40020440
 800606c:	40020458 	.word	0x40020458
 8006070:	40020470 	.word	0x40020470
 8006074:	40020488 	.word	0x40020488
 8006078:	400204a0 	.word	0x400204a0
 800607c:	400204b8 	.word	0x400204b8
 8006080:	aaaaaaab 	.word	0xaaaaaaab
 8006084:	0801a398 	.word	0x0801a398
 8006088:	fffffc00 	.word	0xfffffc00

0800608c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d120      	bne.n	80060e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d858      	bhi.n	800615a <DMA_CheckFifoParam+0xce>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <DMA_CheckFifoParam+0x24>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060d3 	.word	0x080060d3
 80060b8:	080060c1 	.word	0x080060c1
 80060bc:	0800615b 	.word	0x0800615b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d048      	beq.n	800615e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060d0:	e045      	b.n	800615e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060da:	d142      	bne.n	8006162 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060e0:	e03f      	b.n	8006162 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	d123      	bne.n	8006134 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d838      	bhi.n	8006166 <DMA_CheckFifoParam+0xda>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <DMA_CheckFifoParam+0x70>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006113 	.word	0x08006113
 8006104:	0800610d 	.word	0x0800610d
 8006108:	08006125 	.word	0x08006125
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
        break;
 8006110:	e030      	b.n	8006174 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d025      	beq.n	800616a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006122:	e022      	b.n	800616a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800612c:	d11f      	bne.n	800616e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006132:	e01c      	b.n	800616e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	2b02      	cmp	r3, #2
 800613a:	d902      	bls.n	8006142 <DMA_CheckFifoParam+0xb6>
 800613c:	2b03      	cmp	r3, #3
 800613e:	d003      	beq.n	8006148 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006140:	e018      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
        break;
 8006146:	e015      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
    break;
 8006158:	e00b      	b.n	8006172 <DMA_CheckFifoParam+0xe6>
        break;
 800615a:	bf00      	nop
 800615c:	e00a      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        break;
 800615e:	bf00      	nop
 8006160:	e008      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        break;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        break;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        break;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
        break;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <DMA_CheckFifoParam+0xe8>
    break;
 8006172:	bf00      	nop
    }
  }

  return status;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop

08006184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a38      	ldr	r2, [pc, #224]	; (8006278 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a36      	ldr	r2, [pc, #216]	; (800627c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a35      	ldr	r2, [pc, #212]	; (8006280 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a33      	ldr	r2, [pc, #204]	; (8006284 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a32      	ldr	r2, [pc, #200]	; (8006288 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a30      	ldr	r2, [pc, #192]	; (800628c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2f      	ldr	r2, [pc, #188]	; (8006290 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2d      	ldr	r2, [pc, #180]	; (8006294 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01a      	beq.n	8006222 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	3b08      	subs	r3, #8
 80061f4:	4a28      	ldr	r2, [pc, #160]	; (8006298 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006210:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2201      	movs	r2, #1
 800621a:	409a      	lsls	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006220:	e024      	b.n	800626c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	3b10      	subs	r3, #16
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d806      	bhi.n	800624a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d902      	bls.n	800624a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3308      	adds	r3, #8
 8006248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800625c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2201      	movs	r2, #1
 8006266:	409a      	lsls	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	58025408 	.word	0x58025408
 800627c:	5802541c 	.word	0x5802541c
 8006280:	58025430 	.word	0x58025430
 8006284:	58025444 	.word	0x58025444
 8006288:	58025458 	.word	0x58025458
 800628c:	5802546c 	.word	0x5802546c
 8006290:	58025480 	.word	0x58025480
 8006294:	58025494 	.word	0x58025494
 8006298:	cccccccd 	.word	0xcccccccd
 800629c:	16009600 	.word	0x16009600
 80062a0:	58025880 	.word	0x58025880
 80062a4:	aaaaaaab 	.word	0xaaaaaaab
 80062a8:	400204b8 	.word	0x400204b8
 80062ac:	4002040f 	.word	0x4002040f
 80062b0:	10008200 	.word	0x10008200
 80062b4:	40020880 	.word	0x40020880

080062b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d04a      	beq.n	8006364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d847      	bhi.n	8006364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a24      	ldr	r2, [pc, #144]	; (8006374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01d      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a21      	ldr	r2, [pc, #132]	; (800637c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1b      	ldr	r2, [pc, #108]	; (800638c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a15      	ldr	r2, [pc, #84]	; (8006394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006340:	671a      	str	r2, [r3, #112]	; 0x70
 8006342:	e009      	b.n	8006358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a11      	ldr	r2, [pc, #68]	; (800639c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006356:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3b01      	subs	r3, #1
 800635c:	2201      	movs	r2, #1
 800635e:	409a      	lsls	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	58025408 	.word	0x58025408
 8006374:	5802541c 	.word	0x5802541c
 8006378:	58025430 	.word	0x58025430
 800637c:	58025444 	.word	0x58025444
 8006380:	58025458 	.word	0x58025458
 8006384:	5802546c 	.word	0x5802546c
 8006388:	58025480 	.word	0x58025480
 800638c:	58025494 	.word	0x58025494
 8006390:	1600963f 	.word	0x1600963f
 8006394:	58025940 	.word	0x58025940
 8006398:	1000823f 	.word	0x1000823f
 800639c:	40020940 	.word	0x40020940

080063a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b098      	sub	sp, #96	; 0x60
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80063a8:	4a84      	ldr	r2, [pc, #528]	; (80065bc <HAL_FDCAN_Init+0x21c>)
 80063aa:	f107 030c 	add.w	r3, r7, #12
 80063ae:	4611      	mov	r1, r2
 80063b0:	224c      	movs	r2, #76	; 0x4c
 80063b2:	4618      	mov	r0, r3
 80063b4:	f00f f916 	bl	80155e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e1c6      	b.n	8006750 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a7e      	ldr	r2, [pc, #504]	; (80065c0 <HAL_FDCAN_Init+0x220>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d106      	bne.n	80063da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb fe28 	bl	8002044 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0210 	bic.w	r2, r2, #16
 8006402:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006404:	f7fc fe46 	bl	8003094 <HAL_GetTick>
 8006408:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800640a:	e014      	b.n	8006436 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800640c:	f7fc fe42 	bl	8003094 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b0a      	cmp	r3, #10
 8006418:	d90d      	bls.n	8006436 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006420:	f043 0201 	orr.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2203      	movs	r2, #3
 800642e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e18c      	b.n	8006750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d0e3      	beq.n	800640c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006454:	f7fc fe1e 	bl	8003094 <HAL_GetTick>
 8006458:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800645a:	e014      	b.n	8006486 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800645c:	f7fc fe1a 	bl	8003094 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b0a      	cmp	r3, #10
 8006468:	d90d      	bls.n	8006486 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006470:	f043 0201 	orr.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2203      	movs	r2, #3
 800647e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e164      	b.n	8006750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0e3      	beq.n	800645c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0202 	orr.w	r2, r2, #2
 80064a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	7c1b      	ldrb	r3, [r3, #16]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d108      	bne.n	80064be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ba:	619a      	str	r2, [r3, #24]
 80064bc:	e007      	b.n	80064ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7c5b      	ldrb	r3, [r3, #17]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d108      	bne.n	80064e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e4:	619a      	str	r2, [r3, #24]
 80064e6:	e007      	b.n	80064f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7c9b      	ldrb	r3, [r3, #18]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d108      	bne.n	8006512 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800650e:	619a      	str	r2, [r3, #24]
 8006510:	e007      	b.n	8006522 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006520:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006546:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0210 	bic.w	r2, r2, #16
 8006556:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d108      	bne.n	8006572 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0204 	orr.w	r2, r2, #4
 800656e:	619a      	str	r2, [r3, #24]
 8006570:	e030      	b.n	80065d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02c      	beq.n	80065d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d020      	beq.n	80065c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006590:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0210 	orr.w	r2, r2, #16
 80065a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d114      	bne.n	80065d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699a      	ldr	r2, [r3, #24]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0220 	orr.w	r2, r2, #32
 80065b8:	619a      	str	r2, [r3, #24]
 80065ba:	e00b      	b.n	80065d4 <HAL_FDCAN_Init+0x234>
 80065bc:	0801a300 	.word	0x0801a300
 80065c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0220 	orr.w	r2, r2, #32
 80065d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	3b01      	subs	r3, #1
 80065da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80065ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80065fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006608:	d115      	bne.n	8006636 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	3b01      	subs	r3, #1
 8006616:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006618:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	3b01      	subs	r3, #1
 8006620:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006622:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	3b01      	subs	r3, #1
 800662c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006632:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006634:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	4413      	add	r3, r2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d011      	beq.n	8006686 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800666a:	f023 0107 	bic.w	r1, r3, #7
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	3360      	adds	r3, #96	; 0x60
 8006676:	443b      	add	r3, r7
 8006678:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d011      	beq.n	80066b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006696:	f023 0107 	bic.w	r1, r3, #7
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	3360      	adds	r3, #96	; 0x60
 80066a2:	443b      	add	r3, r7
 80066a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d012      	beq.n	80066e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80066c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	3360      	adds	r3, #96	; 0x60
 80066ce:	443b      	add	r3, r7
 80066d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80066d4:	011a      	lsls	r2, r3, #4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80066f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	3360      	adds	r3, #96	; 0x60
 80066fc:	443b      	add	r3, r7
 80066fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006702:	021a      	lsls	r2, r3, #8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a11      	ldr	r2, [pc, #68]	; (8006758 <HAL_FDCAN_Init+0x3b8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d107      	bne.n	8006728 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f022 0203 	bic.w	r2, r2, #3
 8006726:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f80b 	bl	800675c <FDCAN_CalcultateRamBlockAddresses>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800674c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006750:	4618      	mov	r0, r3
 8006752:	3760      	adds	r7, #96	; 0x60
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	4000a000 	.word	0x4000a000

0800675c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006772:	4ba7      	ldr	r3, [pc, #668]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006774:	4013      	ands	r3, r2
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0091      	lsls	r1, r2, #2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	430b      	orrs	r3, r1
 8006780:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	041a      	lsls	r2, r3, #16
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4413      	add	r3, r2
 80067a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067b2:	4b97      	ldr	r3, [pc, #604]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	0091      	lsls	r1, r2, #2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	430b      	orrs	r3, r1
 80067c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d4:	041a      	lsls	r2, r3, #16
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	4413      	add	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80067f4:	4b86      	ldr	r3, [pc, #536]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0091      	lsls	r1, r2, #2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	430b      	orrs	r3, r1
 8006802:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800680e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	041a      	lsls	r2, r3, #16
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4413      	add	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800683c:	4b74      	ldr	r3, [pc, #464]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	0091      	lsls	r1, r2, #2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	430b      	orrs	r3, r1
 800684a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006856:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685e:	041a      	lsls	r2, r3, #16
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006884:	4b62      	ldr	r3, [pc, #392]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006886:	4013      	ands	r3, r2
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	0091      	lsls	r1, r2, #2
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	430b      	orrs	r3, r1
 8006892:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80068b0:	4b57      	ldr	r3, [pc, #348]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0091      	lsls	r1, r2, #2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	430b      	orrs	r3, r1
 80068be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	041a      	lsls	r2, r3, #16
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4413      	add	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0091      	lsls	r1, r2, #2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	430b      	orrs	r3, r1
 8006900:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800690c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	041a      	lsls	r2, r3, #16
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006928:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006930:	061a      	lsls	r2, r3, #24
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	4b34      	ldr	r3, [pc, #208]	; (8006a14 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006942:	4413      	add	r3, r2
 8006944:	009a      	lsls	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	441a      	add	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	441a      	add	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d915      	bls.n	8006a38 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006a0c:	e006      	b.n	8006a1c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006a0e:	bf00      	nop
 8006a10:	ffff0003 	.word	0xffff0003
 8006a14:	10002b00 	.word	0x10002b00
 8006a18:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a22:	f043 0220 	orr.w	r2, r3, #32
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e010      	b.n	8006a5a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e005      	b.n	8006a4c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3f3      	bcc.n	8006a40 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop

08006a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a76:	4b86      	ldr	r3, [pc, #536]	; (8006c90 <HAL_GPIO_Init+0x228>)
 8006a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a7a:	e18c      	b.n	8006d96 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	2101      	movs	r1, #1
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 817e 	beq.w	8006d90 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d005      	beq.n	8006aac <HAL_GPIO_Init+0x44>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d130      	bne.n	8006b0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43db      	mvns	r3, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4013      	ands	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	f003 0201 	and.w	r2, r3, #1
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d017      	beq.n	8006b4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	2203      	movs	r2, #3
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d123      	bne.n	8006b9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	08da      	lsrs	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	08da      	lsrs	r2, r3, #3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3208      	adds	r2, #8
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	2203      	movs	r2, #3
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f003 0203 	and.w	r2, r3, #3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80d8 	beq.w	8006d90 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be0:	4b2c      	ldr	r3, [pc, #176]	; (8006c94 <HAL_GPIO_Init+0x22c>)
 8006be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be6:	4a2b      	ldr	r2, [pc, #172]	; (8006c94 <HAL_GPIO_Init+0x22c>)
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_GPIO_Init+0x22c>)
 8006bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bfe:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <HAL_GPIO_Init+0x230>)
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	089b      	lsrs	r3, r3, #2
 8006c04:	3302      	adds	r3, #2
 8006c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	220f      	movs	r2, #15
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <HAL_GPIO_Init+0x234>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d04a      	beq.n	8006cc0 <HAL_GPIO_Init+0x258>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ca0 <HAL_GPIO_Init+0x238>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02b      	beq.n	8006c8a <HAL_GPIO_Init+0x222>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1b      	ldr	r2, [pc, #108]	; (8006ca4 <HAL_GPIO_Init+0x23c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d025      	beq.n	8006c86 <HAL_GPIO_Init+0x21e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_GPIO_Init+0x240>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01f      	beq.n	8006c82 <HAL_GPIO_Init+0x21a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_GPIO_Init+0x244>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d019      	beq.n	8006c7e <HAL_GPIO_Init+0x216>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <HAL_GPIO_Init+0x248>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_GPIO_Init+0x212>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a17      	ldr	r2, [pc, #92]	; (8006cb4 <HAL_GPIO_Init+0x24c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00d      	beq.n	8006c76 <HAL_GPIO_Init+0x20e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <HAL_GPIO_Init+0x250>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <HAL_GPIO_Init+0x20a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_GPIO_Init+0x254>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <HAL_GPIO_Init+0x206>
 8006c6a:	2309      	movs	r3, #9
 8006c6c:	e029      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c6e:	230a      	movs	r3, #10
 8006c70:	e027      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c72:	2307      	movs	r3, #7
 8006c74:	e025      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c76:	2306      	movs	r3, #6
 8006c78:	e023      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c7a:	2305      	movs	r3, #5
 8006c7c:	e021      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	e01f      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c82:	2303      	movs	r3, #3
 8006c84:	e01d      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e01b      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e019      	b.n	8006cc2 <HAL_GPIO_Init+0x25a>
 8006c8e:	bf00      	nop
 8006c90:	58000080 	.word	0x58000080
 8006c94:	58024400 	.word	0x58024400
 8006c98:	58000400 	.word	0x58000400
 8006c9c:	58020000 	.word	0x58020000
 8006ca0:	58020400 	.word	0x58020400
 8006ca4:	58020800 	.word	0x58020800
 8006ca8:	58020c00 	.word	0x58020c00
 8006cac:	58021000 	.word	0x58021000
 8006cb0:	58021400 	.word	0x58021400
 8006cb4:	58021800 	.word	0x58021800
 8006cb8:	58021c00 	.word	0x58021c00
 8006cbc:	58022400 	.word	0x58022400
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	f002 0203 	and.w	r2, r2, #3
 8006cc8:	0092      	lsls	r2, r2, #2
 8006cca:	4093      	lsls	r3, r2
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cd2:	4938      	ldr	r1, [pc, #224]	; (8006db4 <HAL_GPIO_Init+0x34c>)
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	089b      	lsrs	r3, r3, #2
 8006cd8:	3302      	adds	r3, #2
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	4013      	ands	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f47f ae6b 	bne.w	8006a7c <HAL_GPIO_Init+0x14>
  }
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	3724      	adds	r7, #36	; 0x24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	58000400 	.word	0x58000400

08006db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	887b      	ldrh	r3, [r7, #2]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	e001      	b.n	8006dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
 8006df4:	4613      	mov	r3, r2
 8006df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006df8:	787b      	ldrb	r3, [r7, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e04:	e003      	b.n	8006e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e06:	887b      	ldrh	r3, [r7, #2]
 8006e08:	041a      	lsls	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e07f      	b.n	8006f2e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fb f966 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2224      	movs	r2, #36	; 0x24
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0201 	bic.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d107      	bne.n	8006e96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	e006      	b.n	8006ea4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d104      	bne.n	8006eb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6859      	ldr	r1, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b1d      	ldr	r3, [pc, #116]	; (8006f38 <HAL_I2C_Init+0x11c>)
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ed4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69d9      	ldr	r1, [r3, #28]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	02008000 	.word	0x02008000

08006f3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d138      	bne.n	8006ff8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e032      	b.n	8006ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2224      	movs	r2, #36	; 0x24
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6819      	ldr	r1, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b20      	cmp	r3, #32
 800701a:	d139      	bne.n	8007090 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007026:	2302      	movs	r3, #2
 8007028:	e033      	b.n	8007092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2224      	movs	r2, #36	; 0x24
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007058:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e000      	b.n	8007092 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800709e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a0:	b08f      	sub	sp, #60	; 0x3c
 80070a2:	af0a      	add	r7, sp, #40	; 0x28
 80070a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e116      	b.n	80072de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f00d ff54 	bl	8014f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2203      	movs	r2, #3
 80070d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f00a f899 	bl	8011226 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	687e      	ldr	r6, [r7, #4]
 80070fc:	466d      	mov	r5, sp
 80070fe:	f106 0410 	add.w	r4, r6, #16
 8007102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800710a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800710e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007112:	1d33      	adds	r3, r6, #4
 8007114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007116:	6838      	ldr	r0, [r7, #0]
 8007118:	f009 ff64 	bl	8010fe4 <USB_CoreInit>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e0d7      	b.n	80072de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2100      	movs	r1, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f00a f887 	bl	8011248 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e04a      	b.n	80071d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007140:	7bfa      	ldrb	r2, [r7, #15]
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	333d      	adds	r3, #61	; 0x3d
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007154:	7bfa      	ldrb	r2, [r7, #15]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	333c      	adds	r3, #60	; 0x3c
 8007164:	7bfa      	ldrb	r2, [r7, #15]
 8007166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007168:	7bfa      	ldrb	r2, [r7, #15]
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	b298      	uxth	r0, r3
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	3356      	adds	r3, #86	; 0x56
 800717c:	4602      	mov	r2, r0
 800717e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007180:	7bfa      	ldrb	r2, [r7, #15]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	3340      	adds	r3, #64	; 0x40
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007194:	7bfa      	ldrb	r2, [r7, #15]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	3344      	adds	r3, #68	; 0x44
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071a8:	7bfa      	ldrb	r2, [r7, #15]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4613      	mov	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	3348      	adds	r3, #72	; 0x48
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071bc:	7bfa      	ldrb	r2, [r7, #15]
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	334c      	adds	r3, #76	; 0x4c
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3301      	adds	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	7bfa      	ldrb	r2, [r7, #15]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d3af      	bcc.n	8007140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071e0:	2300      	movs	r3, #0
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e044      	b.n	8007270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071e6:	7bfa      	ldrb	r2, [r7, #15]
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800720e:	7bfa      	ldrb	r2, [r7, #15]
 8007210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007212:	7bfa      	ldrb	r2, [r7, #15]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800723e:	7bfa      	ldrb	r2, [r7, #15]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	3301      	adds	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	7bfa      	ldrb	r2, [r7, #15]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d3b5      	bcc.n	80071e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	687e      	ldr	r6, [r7, #4]
 8007282:	466d      	mov	r5, sp
 8007284:	f106 0410 	add.w	r4, r6, #16
 8007288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800728c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800728e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007294:	e885 0003 	stmia.w	r5, {r0, r1}
 8007298:	1d33      	adds	r3, r6, #4
 800729a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f00a f81f 	bl	80112e0 <USB_DevInit>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e014      	b.n	80072de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d102      	bne.n	80072d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 f96f 	bl	80085b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f00b f861 	bl	801239e <USB_DevDisconnect>

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_PCD_Start+0x1c>
 80072fe:	2302      	movs	r3, #2
 8007300:	e022      	b.n	8007348 <HAL_PCD_Start+0x62>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800731a:	2b01      	cmp	r3, #1
 800731c:	d105      	bne.n	800732a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f009 ff68 	bl	8011204 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f00b f80f 	bl	801235c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b08d      	sub	sp, #52	; 0x34
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f00b f8cd 	bl	8012506 <USB_GetMode>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	f040 84b7 	bne.w	8007ce2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f00b f831 	bl	80123e0 <USB_ReadInterrupts>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 84ad 	beq.w	8007ce0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f00b f81e 	bl	80123e0 <USB_ReadInterrupts>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d107      	bne.n	80073be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f002 0202 	and.w	r2, r2, #2
 80073bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f00b f80c 	bl	80123e0 <USB_ReadInterrupts>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d161      	bne.n	8007496 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0210 	bic.w	r2, r2, #16
 80073e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	4613      	mov	r3, r2
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	3304      	adds	r3, #4
 8007400:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	0c5b      	lsrs	r3, r3, #17
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	2b02      	cmp	r3, #2
 800740c:	d124      	bne.n	8007458 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007414:	4013      	ands	r3, r2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d035      	beq.n	8007486 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	091b      	lsrs	r3, r3, #4
 8007422:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	6a38      	ldr	r0, [r7, #32]
 800742e:	f00a fe43 	bl	80120b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743e:	441a      	add	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	695a      	ldr	r2, [r3, #20]
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	091b      	lsrs	r3, r3, #4
 800744c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007450:	441a      	add	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	615a      	str	r2, [r3, #20]
 8007456:	e016      	b.n	8007486 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	0c5b      	lsrs	r3, r3, #17
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	2b06      	cmp	r3, #6
 8007462:	d110      	bne.n	8007486 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800746a:	2208      	movs	r2, #8
 800746c:	4619      	mov	r1, r3
 800746e:	6a38      	ldr	r0, [r7, #32]
 8007470:	f00a fe22 	bl	80120b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007480:	441a      	add	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699a      	ldr	r2, [r3, #24]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0210 	orr.w	r2, r2, #16
 8007494:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f00a ffa0 	bl	80123e0 <USB_ReadInterrupts>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074aa:	f040 80a7 	bne.w	80075fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f00a ffa5 	bl	8012406 <USB_ReadDevAllOutEpInterrupt>
 80074bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80074be:	e099      	b.n	80075f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 808e 	beq.w	80075e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	4611      	mov	r1, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f00a ffc9 	bl	801246e <USB_ReadDevOutEPInterrupt>
 80074dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00c      	beq.n	8007502 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	461a      	mov	r2, r3
 80074f6:	2301      	movs	r3, #1
 80074f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80074fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fed1 	bl	80082a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00c      	beq.n	8007526 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	461a      	mov	r2, r3
 800751a:	2308      	movs	r3, #8
 800751c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800751e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 ffa7 	bl	8008474 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d008      	beq.n	8007542 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	461a      	mov	r2, r3
 800753e:	2310      	movs	r3, #16
 8007540:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d030      	beq.n	80075ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007554:	2b80      	cmp	r3, #128	; 0x80
 8007556:	d109      	bne.n	800756c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800756a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800756c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756e:	4613      	mov	r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	78db      	ldrb	r3, [r3, #3]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d108      	bne.n	800759c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2200      	movs	r2, #0
 800758e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	b2db      	uxtb	r3, r3
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f00d fde6 	bl	8015168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	461a      	mov	r2, r3
 80075aa:	2302      	movs	r3, #2
 80075ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	461a      	mov	r2, r3
 80075c6:	2320      	movs	r3, #32
 80075c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e0:	461a      	mov	r2, r3
 80075e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	3301      	adds	r3, #1
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	085b      	lsrs	r3, r3, #1
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f47f af62 	bne.w	80074c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4618      	mov	r0, r3
 8007602:	f00a feed 	bl	80123e0 <USB_ReadInterrupts>
 8007606:	4603      	mov	r3, r0
 8007608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800760c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007610:	f040 80db 	bne.w	80077ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f00a ff0e 	bl	801243a <USB_ReadDevAllInEpInterrupt>
 800761e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007624:	e0cd      	b.n	80077c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80c2 	beq.w	80077b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f00a ff34 	bl	80124aa <USB_ReadDevInEPInterrupt>
 8007642:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d057      	beq.n	80076fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	f003 030f 	and.w	r3, r3, #15
 8007654:	2201      	movs	r2, #1
 8007656:	fa02 f303 	lsl.w	r3, r2, r3
 800765a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	43db      	mvns	r3, r3
 8007668:	69f9      	ldr	r1, [r7, #28]
 800766a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800766e:	4013      	ands	r3, r2
 8007670:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	461a      	mov	r2, r3
 8007680:	2301      	movs	r3, #1
 8007682:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d132      	bne.n	80076f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007690:	4613      	mov	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	3348      	adds	r3, #72	; 0x48
 800769c:	6819      	ldr	r1, [r3, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a2:	4613      	mov	r3, r2
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4403      	add	r3, r0
 80076ac:	3344      	adds	r3, #68	; 0x44
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4419      	add	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b6:	4613      	mov	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4403      	add	r3, r0
 80076c0:	3348      	adds	r3, #72	; 0x48
 80076c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d113      	bne.n	80076f2 <HAL_PCD_IRQHandler+0x3a2>
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ce:	4613      	mov	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	334c      	adds	r3, #76	; 0x4c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d108      	bne.n	80076f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076ea:	461a      	mov	r2, r3
 80076ec:	2101      	movs	r1, #1
 80076ee:	f00a ff3d 	bl	801256c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f00d fcb0 	bl	801505e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	461a      	mov	r2, r3
 8007716:	2308      	movs	r3, #8
 8007718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0310 	and.w	r3, r3, #16
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	461a      	mov	r2, r3
 8007732:	2310      	movs	r3, #16
 8007734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	461a      	mov	r2, r3
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d023      	beq.n	80077a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800775c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800775e:	6a38      	ldr	r0, [r7, #32]
 8007760:	f009 ff1c 	bl	801159c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	3338      	adds	r3, #56	; 0x38
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	3304      	adds	r3, #4
 8007776:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d108      	bne.n	8007792 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f00d fcfd 	bl	801518c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	461a      	mov	r2, r3
 80077a0:	2302      	movs	r3, #2
 80077a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fcea 	bl	800818a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	3301      	adds	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f47f af2e 	bne.w	8007626 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f00a fe06 	bl	80123e0 <USB_ReadInterrupts>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077de:	d122      	bne.n	8007826 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d108      	bne.n	8007810 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fef5 	bl	80085f8 <HAL_PCDEx_LPM_Callback>
 800780e:	e002      	b.n	8007816 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f00d fc9b 	bl	801514c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695a      	ldr	r2, [r3, #20]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f00a fdd8 	bl	80123e0 <USB_ReadInterrupts>
 8007830:	4603      	mov	r3, r0
 8007832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783a:	d112      	bne.n	8007862 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d102      	bne.n	8007852 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f00d fc57 	bl	8015100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007860:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f00a fdba 	bl	80123e0 <USB_ReadInterrupts>
 800786c:	4603      	mov	r3, r0
 800786e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007876:	d121      	bne.n	80078bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007886:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d111      	bne.n	80078b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	f003 020f 	and.w	r2, r3, #15
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80078ac:	2101      	movs	r1, #1
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fea2 	bl	80085f8 <HAL_PCDEx_LPM_Callback>
 80078b4:	e002      	b.n	80078bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f00d fc22 	bl	8015100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f00a fd8d 	bl	80123e0 <USB_ReadInterrupts>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	f040 80b7 	bne.w	8007a42 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2110      	movs	r1, #16
 80078ee:	4618      	mov	r0, r3
 80078f0:	f009 fe54 	bl	801159c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078f4:	2300      	movs	r3, #0
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078f8:	e046      	b.n	8007988 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007906:	461a      	mov	r2, r3
 8007908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800790c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	69fa      	ldr	r2, [r7, #28]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800792c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	461a      	mov	r2, r3
 800793c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007940:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007960:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007980:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	3301      	adds	r3, #1
 8007986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798e:	429a      	cmp	r2, r3
 8007990:	d3b3      	bcc.n	80078fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80079a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d016      	beq.n	80079dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079be:	f043 030b 	orr.w	r3, r3, #11
 80079c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d4:	f043 030b 	orr.w	r3, r3, #11
 80079d8:	6453      	str	r3, [r2, #68]	; 0x44
 80079da:	e015      	b.n	8007a08 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	4619      	mov	r1, r3
 80079ec:	f242 032b 	movw	r3, #8235	; 0x202b
 80079f0:	4313      	orrs	r3, r2
 80079f2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a02:	f043 030b 	orr.w	r3, r3, #11
 8007a06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	f00a fd9d 	bl	801256c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	695a      	ldr	r2, [r3, #20]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f00a fcca 	bl	80123e0 <USB_ReadInterrupts>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	d124      	bne.n	8007aa2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f00a fd61 	bl	8012524 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f009 fe15 	bl	8011696 <USB_GetDevSpeed>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681c      	ldr	r4, [r3, #0]
 8007a78:	f001 fd88 	bl	800958c <HAL_RCC_GetHCLKFreq>
 8007a7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	4620      	mov	r0, r4
 8007a88:	f009 fb1a 	bl	80110c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f00d fb0e 	bl	80150ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f00a fc9a 	bl	80123e0 <USB_ReadInterrupts>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d10a      	bne.n	8007acc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f00d faeb 	bl	8015092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f002 0208 	and.w	r2, r2, #8
 8007aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00a fc85 	bl	80123e0 <USB_ReadInterrupts>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d122      	bne.n	8007b26 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aec:	2301      	movs	r3, #1
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	e014      	b.n	8007b1c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	4613      	mov	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d105      	bne.n	8007b16 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fb09 	bl	8008128 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	3301      	adds	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e5      	bcc.n	8007af2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f00a fc58 	bl	80123e0 <USB_ReadInterrupts>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3a:	d13b      	bne.n	8007bb4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	e02b      	b.n	8007b9a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	4613      	mov	r3, r2
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	3340      	adds	r3, #64	; 0x40
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d115      	bne.n	8007b94 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007b68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da12      	bge.n	8007b94 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	333f      	adds	r3, #63	; 0x3f
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 faca 	bl	8008128 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	3301      	adds	r3, #1
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d3ce      	bcc.n	8007b42 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f00a fc11 	bl	80123e0 <USB_ReadInterrupts>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bc8:	d155      	bne.n	8007c76 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bca:	2301      	movs	r3, #1
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bce:	e045      	b.n	8007c5c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d12e      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007bf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da2b      	bge.n	8007c56 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007c0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d121      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c16:	4613      	mov	r3, r2
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007c24:	2201      	movs	r2, #1
 8007c26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c52:	6053      	str	r3, [r2, #4]
            break;
 8007c54:	e007      	b.n	8007c66 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	3301      	adds	r3, #1
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d3b4      	bcc.n	8007bd0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695a      	ldr	r2, [r3, #20]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f00a fbb0 	bl	80123e0 <USB_ReadInterrupts>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8a:	d10a      	bne.n	8007ca2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f00d fa8f 	bl	80151b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f00a fb9a 	bl	80123e0 <USB_ReadInterrupts>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d115      	bne.n	8007ce2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f00d fa7f 	bl	80151cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6859      	ldr	r1, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	e000      	b.n	8007ce2 <HAL_PCD_IRQHandler+0x992>
      return;
 8007ce0:	bf00      	nop
    }
  }
}
 8007ce2:	3734      	adds	r7, #52	; 0x34
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd90      	pop	{r4, r7, pc}

08007ce8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_PCD_SetAddress+0x1a>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e013      	b.n	8007d2a <HAL_PCD_SetAddress+0x42>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f00a faf8 	bl	8012310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	70fb      	strb	r3, [r7, #3]
 8007d44:	460b      	mov	r3, r1
 8007d46:	803b      	strh	r3, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da0f      	bge.n	8007d78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	3338      	adds	r3, #56	; 0x38
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	705a      	strb	r2, [r3, #1]
 8007d76:	e00f      	b.n	8007d98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 020f 	and.w	r2, r3, #15
 8007d7e:	4613      	mov	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007da4:	883a      	ldrh	r2, [r7, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	78ba      	ldrb	r2, [r7, #2]
 8007dae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007dc2:	78bb      	ldrb	r3, [r7, #2]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d102      	bne.n	8007dce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_PCD_EP_Open+0xaa>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e00e      	b.n	8007dfa <HAL_PCD_EP_Open+0xc8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68f9      	ldr	r1, [r7, #12]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f009 fc78 	bl	80116e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da0f      	bge.n	8007e36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	3338      	adds	r3, #56	; 0x38
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	705a      	strb	r2, [r3, #1]
 8007e34:	e00f      	b.n	8007e56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_PCD_EP_Close+0x6e>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e00e      	b.n	8007e8e <HAL_PCD_EP_Close+0x8c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68f9      	ldr	r1, [r7, #12]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f009 fcb6 	bl	80117f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b086      	sub	sp, #24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d102      	bne.n	8007ef2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	f009 fd52 	bl	80119a8 <USB_EPStartXfer>

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8007f30:	681b      	ldr	r3, [r3, #0]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	f003 020f 	and.w	r2, r3, #15
 8007f54:	4613      	mov	r3, r2
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	3338      	adds	r3, #56	; 0x38
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	3304      	adds	r3, #4
 8007f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d102      	bne.n	8007f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6979      	ldr	r1, [r7, #20]
 8007fa6:	f009 fcff 	bl	80119a8 <USB_EPStartXfer>

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 020f 	and.w	r2, r3, #15
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d901      	bls.n	8007fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e050      	b.n	8008074 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da0f      	bge.n	8007ffa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 020f 	and.w	r2, r3, #15
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	3338      	adds	r3, #56	; 0x38
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	3304      	adds	r3, #4
 8007ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	705a      	strb	r2, [r3, #1]
 8007ff8:	e00d      	b.n	8008016 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	3304      	adds	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	b2da      	uxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_PCD_EP_SetStall+0x82>
 8008032:	2302      	movs	r3, #2
 8008034:	e01e      	b.n	8008074 <HAL_PCD_EP_SetStall+0xc0>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4618      	mov	r0, r3
 8008046:	f00a f88f 	bl	8012168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	b2d9      	uxtb	r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008064:	461a      	mov	r2, r3
 8008066:	f00a fa81 	bl	801256c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	f003 020f 	and.w	r2, r3, #15
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d901      	bls.n	800809a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e042      	b.n	8008120 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800809a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da0f      	bge.n	80080c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	f003 020f 	and.w	r2, r3, #15
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	3338      	adds	r3, #56	; 0x38
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	4413      	add	r3, r2
 80080b6:	3304      	adds	r3, #4
 80080b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	705a      	strb	r2, [r3, #1]
 80080c0:	e00f      	b.n	80080e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	f003 020f 	and.w	r2, r3, #15
 80080c8:	4613      	mov	r3, r2
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4413      	add	r3, r2
 80080d8:	3304      	adds	r3, #4
 80080da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_PCD_EP_ClrStall+0x86>
 80080fe:	2302      	movs	r3, #2
 8008100:	e00e      	b.n	8008120 <HAL_PCD_EP_ClrStall+0xa4>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68f9      	ldr	r1, [r7, #12]
 8008110:	4618      	mov	r0, r3
 8008112:	f00a f897 	bl	8012244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0c      	bge.n	8008156 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 020f 	and.w	r2, r3, #15
 8008142:	4613      	mov	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	3338      	adds	r3, #56	; 0x38
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e00c      	b.n	8008170 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	f003 020f 	and.w	r2, r3, #15
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	3304      	adds	r3, #4
 800816e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68f9      	ldr	r1, [r7, #12]
 8008176:	4618      	mov	r0, r3
 8008178:	f009 feb6 	bl	8011ee8 <USB_EPStopXfer>
 800817c:	4603      	mov	r3, r0
 800817e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008180:	7afb      	ldrb	r3, [r7, #11]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08a      	sub	sp, #40	; 0x28
 800818e:	af02      	add	r7, sp, #8
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4613      	mov	r3, r2
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	3338      	adds	r3, #56	; 0x38
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	3304      	adds	r3, #4
 80081b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d901      	bls.n	80081c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e06c      	b.n	800829c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d902      	bls.n	80081de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3303      	adds	r3, #3
 80081e2:	089b      	lsrs	r3, r3, #2
 80081e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081e6:	e02b      	b.n	8008240 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d902      	bls.n	8008204 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3303      	adds	r3, #3
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68d9      	ldr	r1, [r3, #12]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	b2da      	uxtb	r2, r3
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800821c:	b2db      	uxtb	r3, r3
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	4603      	mov	r3, r0
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f009 ff0a 	bl	801203c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	441a      	add	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	695a      	ldr	r2, [r3, #20]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	441a      	add	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	b29b      	uxth	r3, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	429a      	cmp	r2, r3
 8008254:	d809      	bhi.n	800826a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800825e:	429a      	cmp	r2, r3
 8008260:	d203      	bcs.n	800826a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1be      	bne.n	80081e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	429a      	cmp	r2, r3
 8008274:	d811      	bhi.n	800829a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	2201      	movs	r2, #1
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	43db      	mvns	r3, r3
 8008290:	6939      	ldr	r1, [r7, #16]
 8008292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008296:	4013      	ands	r3, r2
 8008298:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3720      	adds	r7, #32
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	333c      	adds	r3, #60	; 0x3c
 80082bc:	3304      	adds	r3, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d17b      	bne.n	80083d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d015      	beq.n	8008310 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4a61      	ldr	r2, [pc, #388]	; (800846c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	f240 80b9 	bls.w	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80b3 	beq.w	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008306:	461a      	mov	r2, r3
 8008308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830c:	6093      	str	r3, [r2, #8]
 800830e:	e0a7      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f003 0320 	and.w	r3, r3, #32
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	4413      	add	r3, r2
 8008322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008326:	461a      	mov	r2, r3
 8008328:	2320      	movs	r3, #32
 800832a:	6093      	str	r3, [r2, #8]
 800832c:	e098      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008334:	2b00      	cmp	r3, #0
 8008336:	f040 8093 	bne.w	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	4a4b      	ldr	r2, [pc, #300]	; (800846c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d90f      	bls.n	8008362 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	461a      	mov	r2, r3
 800835a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835e:	6093      	str	r3, [r2, #8]
 8008360:	e07e      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	3304      	adds	r3, #4
 8008376:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	0159      	lsls	r1, r3, #5
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	440b      	add	r3, r1
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d114      	bne.n	80083c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083ac:	461a      	mov	r2, r3
 80083ae:	2101      	movs	r1, #1
 80083b0:	f00a f8dc 	bl	801256c <USB_EP0_OutStart>
 80083b4:	e006      	b.n	80083c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	441a      	add	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f00c fe2c 	bl	8015028 <HAL_PCD_DataOutStageCallback>
 80083d0:	e046      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4a26      	ldr	r2, [pc, #152]	; (8008470 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d124      	bne.n	8008424 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f0:	461a      	mov	r2, r3
 80083f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083f6:	6093      	str	r3, [r2, #8]
 80083f8:	e032      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	461a      	mov	r2, r3
 8008412:	2320      	movs	r3, #32
 8008414:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f00c fe03 	bl	8015028 <HAL_PCD_DataOutStageCallback>
 8008422:	e01d      	b.n	8008460 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d114      	bne.n	8008454 <PCD_EP_OutXfrComplete_int+0x1b0>
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	4613      	mov	r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d108      	bne.n	8008454 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800844c:	461a      	mov	r2, r3
 800844e:	2100      	movs	r1, #0
 8008450:	f00a f88c 	bl	801256c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f00c fde4 	bl	8015028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	4f54300a 	.word	0x4f54300a
 8008470:	4f54310a 	.word	0x4f54310a

08008474 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	333c      	adds	r3, #60	; 0x3c
 800848c:	3304      	adds	r3, #4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a15      	ldr	r2, [pc, #84]	; (80084fc <PCD_EP_OutSetupPacket_int+0x88>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d90e      	bls.n	80084c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	461a      	mov	r2, r3
 80084c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f00c fd9b 	bl	8015004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <PCD_EP_OutSetupPacket_int+0x88>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d90c      	bls.n	80084f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d108      	bne.n	80084f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084e8:	461a      	mov	r2, r3
 80084ea:	2101      	movs	r1, #1
 80084ec:	f00a f83e 	bl	801256c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	4f54300a 	.word	0x4f54300a

08008500 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
 800850c:	4613      	mov	r3, r2
 800850e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d107      	bne.n	800852e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800851e:	883b      	ldrh	r3, [r7, #0]
 8008520:	0419      	lsls	r1, r3, #16
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	430a      	orrs	r2, r1
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
 800852c:	e028      	b.n	8008580 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	0c1b      	lsrs	r3, r3, #16
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	4413      	add	r3, r2
 800853a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
 8008540:	e00d      	b.n	800855e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	3340      	adds	r3, #64	; 0x40
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	4413      	add	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	3301      	adds	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
 800855e:	7bfa      	ldrb	r2, [r7, #15]
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	3b01      	subs	r3, #1
 8008564:	429a      	cmp	r2, r3
 8008566:	d3ec      	bcc.n	8008542 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008568:	883b      	ldrh	r3, [r7, #0]
 800856a:	0418      	lsls	r0, r3, #16
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6819      	ldr	r1, [r3, #0]
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	3b01      	subs	r3, #1
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	4302      	orrs	r2, r0
 8008578:	3340      	adds	r3, #64	; 0x40
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	887a      	ldrh	r2, [r7, #2]
 80085a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	10000003 	.word	0x10000003

080085f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008618:	4b19      	ldr	r3, [pc, #100]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d00a      	beq.n	800863a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008624:	4b16      	ldr	r3, [pc, #88]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d001      	beq.n	8008636 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e01f      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e01d      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f023 0207 	bic.w	r2, r3, #7
 8008642:	490f      	ldr	r1, [pc, #60]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800864a:	f7fa fd23 	bl	8003094 <HAL_GetTick>
 800864e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008650:	e009      	b.n	8008666 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008652:	f7fa fd1f 	bl	8003094 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008660:	d901      	bls.n	8008666 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e007      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	d1ee      	bne.n	8008652 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	58024800 	.word	0x58024800

08008684 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4a04      	ldr	r2, [pc, #16]	; (80086a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800868e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008692:	60d3      	str	r3, [r2, #12]
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	58024800 	.word	0x58024800

080086a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e3c8      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 8087 	beq.w	80087d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086c4:	4b88      	ldr	r3, [pc, #544]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086ce:	4b86      	ldr	r3, [pc, #536]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d007      	beq.n	80086ea <HAL_RCC_OscConfig+0x46>
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b18      	cmp	r3, #24
 80086de:	d110      	bne.n	8008702 <HAL_RCC_OscConfig+0x5e>
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d10b      	bne.n	8008702 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ea:	4b7f      	ldr	r3, [pc, #508]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d06c      	beq.n	80087d0 <HAL_RCC_OscConfig+0x12c>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d168      	bne.n	80087d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e3a2      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800870a:	d106      	bne.n	800871a <HAL_RCC_OscConfig+0x76>
 800870c:	4b76      	ldr	r3, [pc, #472]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a75      	ldr	r2, [pc, #468]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	e02e      	b.n	8008778 <HAL_RCC_OscConfig+0xd4>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10c      	bne.n	800873c <HAL_RCC_OscConfig+0x98>
 8008722:	4b71      	ldr	r3, [pc, #452]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a70      	ldr	r2, [pc, #448]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	4b6e      	ldr	r3, [pc, #440]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a6d      	ldr	r2, [pc, #436]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e01d      	b.n	8008778 <HAL_RCC_OscConfig+0xd4>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008744:	d10c      	bne.n	8008760 <HAL_RCC_OscConfig+0xbc>
 8008746:	4b68      	ldr	r3, [pc, #416]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a67      	ldr	r2, [pc, #412]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800874c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b65      	ldr	r3, [pc, #404]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a64      	ldr	r2, [pc, #400]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e00b      	b.n	8008778 <HAL_RCC_OscConfig+0xd4>
 8008760:	4b61      	ldr	r3, [pc, #388]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a60      	ldr	r2, [pc, #384]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	4b5e      	ldr	r3, [pc, #376]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a5d      	ldr	r2, [pc, #372]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d013      	beq.n	80087a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fa fc88 	bl	8003094 <HAL_GetTick>
 8008784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008788:	f7fa fc84 	bl	8003094 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b64      	cmp	r3, #100	; 0x64
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e356      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800879a:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f0      	beq.n	8008788 <HAL_RCC_OscConfig+0xe4>
 80087a6:	e014      	b.n	80087d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fa fc74 	bl	8003094 <HAL_GetTick>
 80087ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b0:	f7fa fc70 	bl	8003094 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b64      	cmp	r3, #100	; 0x64
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e342      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087c2:	4b49      	ldr	r3, [pc, #292]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x10c>
 80087ce:	e000      	b.n	80087d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 808c 	beq.w	80088f8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087ea:	4b3f      	ldr	r3, [pc, #252]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <HAL_RCC_OscConfig+0x162>
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	2b18      	cmp	r3, #24
 80087fa:	d137      	bne.n	800886c <HAL_RCC_OscConfig+0x1c8>
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d132      	bne.n	800886c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008806:	4b38      	ldr	r3, [pc, #224]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_RCC_OscConfig+0x17a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e314      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800881e:	4b32      	ldr	r3, [pc, #200]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f023 0219 	bic.w	r2, r3, #25
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	492f      	ldr	r1, [pc, #188]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800882c:	4313      	orrs	r3, r2
 800882e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008830:	f7fa fc30 	bl	8003094 <HAL_GetTick>
 8008834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008838:	f7fa fc2c 	bl	8003094 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e2fe      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800884a:	4b27      	ldr	r3, [pc, #156]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f0      	beq.n	8008838 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	061b      	lsls	r3, r3, #24
 8008864:	4920      	ldr	r1, [pc, #128]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008866:	4313      	orrs	r3, r2
 8008868:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800886a:	e045      	b.n	80088f8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d026      	beq.n	80088c2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008874:	4b1c      	ldr	r3, [pc, #112]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f023 0219 	bic.w	r2, r3, #25
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	4919      	ldr	r1, [pc, #100]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 8008882:	4313      	orrs	r3, r2
 8008884:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008886:	f7fa fc05 	bl	8003094 <HAL_GetTick>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800888e:	f7fa fc01 	bl	8003094 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e2d3      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088a0:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0f0      	beq.n	800888e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ac:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	061b      	lsls	r3, r3, #24
 80088ba:	490b      	ldr	r1, [pc, #44]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	604b      	str	r3, [r1, #4]
 80088c0:	e01a      	b.n	80088f8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <HAL_RCC_OscConfig+0x244>)
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ce:	f7fa fbe1 	bl	8003094 <HAL_GetTick>
 80088d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088d4:	e00a      	b.n	80088ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088d6:	f7fa fbdd 	bl	8003094 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d903      	bls.n	80088ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e2af      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
 80088e8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80088ec:	4b96      	ldr	r3, [pc, #600]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1ee      	bne.n	80088d6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0310 	and.w	r3, r3, #16
 8008900:	2b00      	cmp	r3, #0
 8008902:	d06a      	beq.n	80089da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008904:	4b90      	ldr	r3, [pc, #576]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800890e:	4b8e      	ldr	r3, [pc, #568]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b08      	cmp	r3, #8
 8008918:	d007      	beq.n	800892a <HAL_RCC_OscConfig+0x286>
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b18      	cmp	r3, #24
 800891e:	d11b      	bne.n	8008958 <HAL_RCC_OscConfig+0x2b4>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	2b01      	cmp	r3, #1
 8008928:	d116      	bne.n	8008958 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800892a:	4b87      	ldr	r3, [pc, #540]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <HAL_RCC_OscConfig+0x29e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	2b80      	cmp	r3, #128	; 0x80
 800893c:	d001      	beq.n	8008942 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e282      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008942:	4b81      	ldr	r3, [pc, #516]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	061b      	lsls	r3, r3, #24
 8008950:	497d      	ldr	r1, [pc, #500]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008952:	4313      	orrs	r3, r2
 8008954:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008956:	e040      	b.n	80089da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d023      	beq.n	80089a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008960:	4b79      	ldr	r3, [pc, #484]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a78      	ldr	r2, [pc, #480]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fa fb92 	bl	8003094 <HAL_GetTick>
 8008970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008974:	f7fa fb8e 	bl	8003094 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e260      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008986:	4b70      	ldr	r3, [pc, #448]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f0      	beq.n	8008974 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008992:	4b6d      	ldr	r3, [pc, #436]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	061b      	lsls	r3, r3, #24
 80089a0:	4969      	ldr	r1, [pc, #420]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60cb      	str	r3, [r1, #12]
 80089a6:	e018      	b.n	80089da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80089a8:	4b67      	ldr	r3, [pc, #412]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a66      	ldr	r2, [pc, #408]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b4:	f7fa fb6e 	bl	8003094 <HAL_GetTick>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089bc:	f7fa fb6a 	bl	8003094 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e23c      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80089ce:	4b5e      	ldr	r3, [pc, #376]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d036      	beq.n	8008a54 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d019      	beq.n	8008a22 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ee:	4b56      	ldr	r3, [pc, #344]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f2:	4a55      	ldr	r2, [pc, #340]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fa:	f7fa fb4b 	bl	8003094 <HAL_GetTick>
 80089fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a00:	e008      	b.n	8008a14 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a02:	f7fa fb47 	bl	8003094 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e219      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008a14:	4b4c      	ldr	r3, [pc, #304]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0f0      	beq.n	8008a02 <HAL_RCC_OscConfig+0x35e>
 8008a20:	e018      	b.n	8008a54 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a22:	4b49      	ldr	r3, [pc, #292]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a26:	4a48      	ldr	r2, [pc, #288]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2e:	f7fa fb31 	bl	8003094 <HAL_GetTick>
 8008a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a34:	e008      	b.n	8008a48 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a36:	f7fa fb2d 	bl	8003094 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d901      	bls.n	8008a48 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e1ff      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a48:	4b3f      	ldr	r3, [pc, #252]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f0      	bne.n	8008a36 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d036      	beq.n	8008ace <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d019      	beq.n	8008a9c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a68:	4b37      	ldr	r3, [pc, #220]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a36      	ldr	r2, [pc, #216]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a74:	f7fa fb0e 	bl	8003094 <HAL_GetTick>
 8008a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a7c:	f7fa fb0a 	bl	8003094 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e1dc      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0f0      	beq.n	8008a7c <HAL_RCC_OscConfig+0x3d8>
 8008a9a:	e018      	b.n	8008ace <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a9c:	4b2a      	ldr	r3, [pc, #168]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a29      	ldr	r2, [pc, #164]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008aa8:	f7fa faf4 	bl	8003094 <HAL_GetTick>
 8008aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ab0:	f7fa faf0 	bl	8003094 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e1c2      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ac2:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 8086 	beq.w	8008be8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <HAL_RCC_OscConfig+0x4a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <HAL_RCC_OscConfig+0x4a8>)
 8008ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ae8:	f7fa fad4 	bl	8003094 <HAL_GetTick>
 8008aec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af0:	f7fa fad0 	bl	8003094 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b64      	cmp	r3, #100	; 0x64
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e1a2      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b02:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <HAL_RCC_OscConfig+0x4a8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d106      	bne.n	8008b24 <HAL_RCC_OscConfig+0x480>
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	4a0b      	ldr	r2, [pc, #44]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b1c:	f043 0301 	orr.w	r3, r3, #1
 8008b20:	6713      	str	r3, [r2, #112]	; 0x70
 8008b22:	e032      	b.n	8008b8a <HAL_RCC_OscConfig+0x4e6>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d111      	bne.n	8008b50 <HAL_RCC_OscConfig+0x4ac>
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b30:	4a05      	ldr	r2, [pc, #20]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	6713      	str	r3, [r2, #112]	; 0x70
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3c:	4a02      	ldr	r2, [pc, #8]	; (8008b48 <HAL_RCC_OscConfig+0x4a4>)
 8008b3e:	f023 0304 	bic.w	r3, r3, #4
 8008b42:	6713      	str	r3, [r2, #112]	; 0x70
 8008b44:	e021      	b.n	8008b8a <HAL_RCC_OscConfig+0x4e6>
 8008b46:	bf00      	nop
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	58024800 	.word	0x58024800
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	d10c      	bne.n	8008b72 <HAL_RCC_OscConfig+0x4ce>
 8008b58:	4b83      	ldr	r3, [pc, #524]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5c:	4a82      	ldr	r2, [pc, #520]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b5e:	f043 0304 	orr.w	r3, r3, #4
 8008b62:	6713      	str	r3, [r2, #112]	; 0x70
 8008b64:	4b80      	ldr	r3, [pc, #512]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	4a7f      	ldr	r2, [pc, #508]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b70:	e00b      	b.n	8008b8a <HAL_RCC_OscConfig+0x4e6>
 8008b72:	4b7d      	ldr	r3, [pc, #500]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	4a7c      	ldr	r2, [pc, #496]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b7e:	4b7a      	ldr	r3, [pc, #488]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b82:	4a79      	ldr	r2, [pc, #484]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d015      	beq.n	8008bbe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b92:	f7fa fa7f 	bl	8003094 <HAL_GetTick>
 8008b96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b98:	e00a      	b.n	8008bb0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9a:	f7fa fa7b 	bl	8003094 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e14b      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bb0:	4b6d      	ldr	r3, [pc, #436]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0ee      	beq.n	8008b9a <HAL_RCC_OscConfig+0x4f6>
 8008bbc:	e014      	b.n	8008be8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fa fa69 	bl	8003094 <HAL_GetTick>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7fa fa65 	bl	8003094 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e135      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008bdc:	4b62      	ldr	r3, [pc, #392]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1ee      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 812a 	beq.w	8008e46 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008bf2:	4b5d      	ldr	r3, [pc, #372]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bfa:	2b18      	cmp	r3, #24
 8008bfc:	f000 80ba 	beq.w	8008d74 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	f040 8095 	bne.w	8008d34 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c0a:	4b57      	ldr	r3, [pc, #348]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a56      	ldr	r2, [pc, #344]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c16:	f7fa fa3d 	bl	8003094 <HAL_GetTick>
 8008c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c1e:	f7fa fa39 	bl	8003094 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e10b      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c30:	4b4d      	ldr	r3, [pc, #308]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f0      	bne.n	8008c1e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c3c:	4b4a      	ldr	r3, [pc, #296]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c40:	4b4a      	ldr	r3, [pc, #296]	; (8008d6c <HAL_RCC_OscConfig+0x6c8>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c4c:	0112      	lsls	r2, r2, #4
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	4945      	ldr	r1, [pc, #276]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	628b      	str	r3, [r1, #40]	; 0x28
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	3b01      	subs	r3, #1
 8008c66:	025b      	lsls	r3, r3, #9
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	3b01      	subs	r3, #1
 8008c72:	041b      	lsls	r3, r3, #16
 8008c74:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	061b      	lsls	r3, r3, #24
 8008c82:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c86:	4938      	ldr	r1, [pc, #224]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008c8c:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	4a35      	ldr	r2, [pc, #212]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c98:	4b33      	ldr	r3, [pc, #204]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c9c:	4b34      	ldr	r3, [pc, #208]	; (8008d70 <HAL_RCC_OscConfig+0x6cc>)
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ca4:	00d2      	lsls	r2, r2, #3
 8008ca6:	4930      	ldr	r1, [pc, #192]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008cac:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	f023 020c 	bic.w	r2, r3, #12
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	492b      	ldr	r1, [pc, #172]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008cbe:	4b2a      	ldr	r3, [pc, #168]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	f023 0202 	bic.w	r2, r3, #2
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	4927      	ldr	r1, [pc, #156]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008cd0:	4b25      	ldr	r3, [pc, #148]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	4a24      	ldr	r2, [pc, #144]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cdc:	4b22      	ldr	r3, [pc, #136]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ce8:	4b1f      	ldr	r3, [pc, #124]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4a1e      	ldr	r2, [pc, #120]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008cf4:	4b1c      	ldr	r3, [pc, #112]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a18      	ldr	r2, [pc, #96]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fa f9c2 	bl	8003094 <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d14:	f7fa f9be 	bl	8003094 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e090      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d26:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x670>
 8008d32:	e088      	b.n	8008e46 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d34:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fa f9a8 	bl	8003094 <HAL_GetTick>
 8008d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d48:	f7fa f9a4 	bl	8003094 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e076      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d5a:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <HAL_RCC_OscConfig+0x6c4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x6a4>
 8008d66:	e06e      	b.n	8008e46 <HAL_RCC_OscConfig+0x7a2>
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	fffffc0c 	.word	0xfffffc0c
 8008d70:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d74:	4b36      	ldr	r3, [pc, #216]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d7a:	4b35      	ldr	r3, [pc, #212]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d031      	beq.n	8008dec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f003 0203 	and.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d12a      	bne.n	8008dec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	091b      	lsrs	r3, r3, #4
 8008d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d122      	bne.n	8008dec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d11a      	bne.n	8008dec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	0a5b      	lsrs	r3, r3, #9
 8008dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d111      	bne.n	8008dec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d108      	bne.n	8008dec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0e1b      	lsrs	r3, r3, #24
 8008dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d001      	beq.n	8008df0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e02b      	b.n	8008e48 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008df0:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df4:	08db      	lsrs	r3, r3, #3
 8008df6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d01f      	beq.n	8008e46 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	4a11      	ldr	r2, [pc, #68]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e12:	f7fa f93f 	bl	8003094 <HAL_GetTick>
 8008e16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008e18:	bf00      	nop
 8008e1a:	f7fa f93b 	bl	8003094 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d0f9      	beq.n	8008e1a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e26:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2a:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <HAL_RCC_OscConfig+0x7b0>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e32:	00d2      	lsls	r2, r2, #3
 8008e34:	4906      	ldr	r1, [pc, #24]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <HAL_RCC_OscConfig+0x7ac>)
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3730      	adds	r7, #48	; 0x30
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	58024400 	.word	0x58024400
 8008e54:	ffff0007 	.word	0xffff0007

08008e58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e19c      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e6c:	4b8a      	ldr	r3, [pc, #552]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 030f 	and.w	r3, r3, #15
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d910      	bls.n	8008e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7a:	4b87      	ldr	r3, [pc, #540]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f023 020f 	bic.w	r2, r3, #15
 8008e82:	4985      	ldr	r1, [pc, #532]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e8a:	4b83      	ldr	r3, [pc, #524]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d001      	beq.n	8008e9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e184      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d010      	beq.n	8008eca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	4b7b      	ldr	r3, [pc, #492]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d908      	bls.n	8008eca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008eb8:	4b78      	ldr	r3, [pc, #480]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	4975      	ldr	r1, [pc, #468]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d010      	beq.n	8008ef8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	695a      	ldr	r2, [r3, #20]
 8008eda:	4b70      	ldr	r3, [pc, #448]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d908      	bls.n	8008ef8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ee6:	4b6d      	ldr	r3, [pc, #436]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	496a      	ldr	r1, [pc, #424]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0310 	and.w	r3, r3, #16
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d010      	beq.n	8008f26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	4b64      	ldr	r3, [pc, #400]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f0a:	69db      	ldr	r3, [r3, #28]
 8008f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d908      	bls.n	8008f26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f14:	4b61      	ldr	r3, [pc, #388]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	495e      	ldr	r1, [pc, #376]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d010      	beq.n	8008f54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	4b59      	ldr	r3, [pc, #356]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d908      	bls.n	8008f54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f42:	4b56      	ldr	r3, [pc, #344]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	4953      	ldr	r1, [pc, #332]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	4b4d      	ldr	r3, [pc, #308]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d908      	bls.n	8008f82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f70:	4b4a      	ldr	r3, [pc, #296]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	f023 020f 	bic.w	r2, r3, #15
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	4947      	ldr	r1, [pc, #284]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d055      	beq.n	800903a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f8e:	4b43      	ldr	r3, [pc, #268]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	4940      	ldr	r1, [pc, #256]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d107      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fa8:	4b3c      	ldr	r3, [pc, #240]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d121      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0f6      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fc0:	4b36      	ldr	r3, [pc, #216]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d115      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e0ea      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fd8:	4b30      	ldr	r3, [pc, #192]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d109      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e0de      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fe8:	4b2c      	ldr	r3, [pc, #176]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e0d6      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ff8:	4b28      	ldr	r3, [pc, #160]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f023 0207 	bic.w	r2, r3, #7
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4925      	ldr	r1, [pc, #148]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8009006:	4313      	orrs	r3, r2
 8009008:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900a:	f7fa f843 	bl	8003094 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009010:	e00a      	b.n	8009028 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009012:	f7fa f83f 	bl	8003094 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009020:	4293      	cmp	r3, r2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e0be      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009028:	4b1c      	ldr	r3, [pc, #112]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	00db      	lsls	r3, r3, #3
 8009036:	429a      	cmp	r2, r3
 8009038:	d1eb      	bne.n	8009012 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d010      	beq.n	8009068 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	429a      	cmp	r2, r3
 8009054:	d208      	bcs.n	8009068 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f023 020f 	bic.w	r2, r3, #15
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	490e      	ldr	r1, [pc, #56]	; (800909c <HAL_RCC_ClockConfig+0x244>)
 8009064:	4313      	orrs	r3, r2
 8009066:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009068:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d214      	bcs.n	80090a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009076:	4b08      	ldr	r3, [pc, #32]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f023 020f 	bic.w	r2, r3, #15
 800907e:	4906      	ldr	r1, [pc, #24]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	4313      	orrs	r3, r2
 8009084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009086:	4b04      	ldr	r3, [pc, #16]	; (8009098 <HAL_RCC_ClockConfig+0x240>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d005      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e086      	b.n	80091a6 <HAL_RCC_ClockConfig+0x34e>
 8009098:	52002000 	.word	0x52002000
 800909c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d010      	beq.n	80090ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	4b3f      	ldr	r3, [pc, #252]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d208      	bcs.n	80090ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090bc:	4b3c      	ldr	r3, [pc, #240]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	4939      	ldr	r1, [pc, #228]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0308 	and.w	r3, r3, #8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d010      	beq.n	80090fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	4b34      	ldr	r3, [pc, #208]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d208      	bcs.n	80090fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090ea:	4b31      	ldr	r3, [pc, #196]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	492e      	ldr	r1, [pc, #184]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	2b00      	cmp	r3, #0
 8009106:	d010      	beq.n	800912a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699a      	ldr	r2, [r3, #24]
 800910c:	4b28      	ldr	r3, [pc, #160]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009114:	429a      	cmp	r2, r3
 8009116:	d208      	bcs.n	800912a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009118:	4b25      	ldr	r3, [pc, #148]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	4922      	ldr	r1, [pc, #136]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 8009126:	4313      	orrs	r3, r2
 8009128:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0320 	and.w	r3, r3, #32
 8009132:	2b00      	cmp	r3, #0
 8009134:	d010      	beq.n	8009158 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69da      	ldr	r2, [r3, #28]
 800913a:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009142:	429a      	cmp	r2, r3
 8009144:	d208      	bcs.n	8009158 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009146:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	4917      	ldr	r1, [pc, #92]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 8009154:	4313      	orrs	r3, r2
 8009156:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009158:	f000 f89e 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 800915c:	4602      	mov	r2, r0
 800915e:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	0a1b      	lsrs	r3, r3, #8
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	4912      	ldr	r1, [pc, #72]	; (80091b4 <HAL_RCC_ClockConfig+0x35c>)
 800916a:	5ccb      	ldrb	r3, [r1, r3]
 800916c:	f003 031f 	and.w	r3, r3, #31
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
 8009174:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009176:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <HAL_RCC_ClockConfig+0x358>)
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <HAL_RCC_ClockConfig+0x35c>)
 8009180:	5cd3      	ldrb	r3, [r2, r3]
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	fa22 f303 	lsr.w	r3, r2, r3
 800918c:	4a0a      	ldr	r2, [pc, #40]	; (80091b8 <HAL_RCC_ClockConfig+0x360>)
 800918e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <HAL_RCC_ClockConfig+0x364>)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009196:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <HAL_RCC_ClockConfig+0x368>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7f9 ff30 	bl	8003000 <HAL_InitTick>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	58024400 	.word	0x58024400
 80091b4:	0801a388 	.word	0x0801a388
 80091b8:	24000004 	.word	0x24000004
 80091bc:	24000000 	.word	0x24000000
 80091c0:	24000008 	.word	0x24000008

080091c4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b08c      	sub	sp, #48	; 0x30
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d12a      	bne.n	800922c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80091d6:	4b2d      	ldr	r3, [pc, #180]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 80091d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091dc:	4a2b      	ldr	r2, [pc, #172]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 80091de:	f043 0301 	orr.w	r3, r3, #1
 80091e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 80091e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	61bb      	str	r3, [r7, #24]
 80091f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80091f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fa:	2302      	movs	r3, #2
 80091fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091fe:	2303      	movs	r3, #3
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009206:	2300      	movs	r3, #0
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800920a:	f107 031c 	add.w	r3, r7, #28
 800920e:	4619      	mov	r1, r3
 8009210:	481f      	ldr	r0, [pc, #124]	; (8009290 <HAL_RCC_MCOConfig+0xcc>)
 8009212:	f7fd fc29 	bl	8006a68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009216:	4b1d      	ldr	r3, [pc, #116]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	430b      	orrs	r3, r1
 8009224:	4919      	ldr	r1, [pc, #100]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 8009226:	4313      	orrs	r3, r2
 8009228:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800922a:	e02a      	b.n	8009282 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800922c:	4b17      	ldr	r3, [pc, #92]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 800922e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009232:	4a16      	ldr	r2, [pc, #88]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 8009234:	f043 0304 	orr.w	r3, r3, #4
 8009238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 800923e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	617b      	str	r3, [r7, #20]
 8009248:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800924a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800924e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009250:	2302      	movs	r3, #2
 8009252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009254:	2303      	movs	r3, #3
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009258:	2300      	movs	r3, #0
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800925c:	2300      	movs	r3, #0
 800925e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009260:	f107 031c 	add.w	r3, r7, #28
 8009264:	4619      	mov	r1, r3
 8009266:	480b      	ldr	r0, [pc, #44]	; (8009294 <HAL_RCC_MCOConfig+0xd0>)
 8009268:	f7fd fbfe 	bl	8006a68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	01d9      	lsls	r1, r3, #7
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	430b      	orrs	r3, r1
 800927c:	4903      	ldr	r1, [pc, #12]	; (800928c <HAL_RCC_MCOConfig+0xc8>)
 800927e:	4313      	orrs	r3, r2
 8009280:	610b      	str	r3, [r1, #16]
}
 8009282:	bf00      	nop
 8009284:	3730      	adds	r7, #48	; 0x30
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	58024400 	.word	0x58024400
 8009290:	58020000 	.word	0x58020000
 8009294:	58020800 	.word	0x58020800

08009298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009298:	b480      	push	{r7}
 800929a:	b089      	sub	sp, #36	; 0x24
 800929c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800929e:	4bb3      	ldr	r3, [pc, #716]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092a6:	2b18      	cmp	r3, #24
 80092a8:	f200 8155 	bhi.w	8009556 <HAL_RCC_GetSysClockFreq+0x2be>
 80092ac:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80092ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b2:	bf00      	nop
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009557 	.word	0x08009557
 80092bc:	08009557 	.word	0x08009557
 80092c0:	08009557 	.word	0x08009557
 80092c4:	08009557 	.word	0x08009557
 80092c8:	08009557 	.word	0x08009557
 80092cc:	08009557 	.word	0x08009557
 80092d0:	08009557 	.word	0x08009557
 80092d4:	0800933f 	.word	0x0800933f
 80092d8:	08009557 	.word	0x08009557
 80092dc:	08009557 	.word	0x08009557
 80092e0:	08009557 	.word	0x08009557
 80092e4:	08009557 	.word	0x08009557
 80092e8:	08009557 	.word	0x08009557
 80092ec:	08009557 	.word	0x08009557
 80092f0:	08009557 	.word	0x08009557
 80092f4:	08009345 	.word	0x08009345
 80092f8:	08009557 	.word	0x08009557
 80092fc:	08009557 	.word	0x08009557
 8009300:	08009557 	.word	0x08009557
 8009304:	08009557 	.word	0x08009557
 8009308:	08009557 	.word	0x08009557
 800930c:	08009557 	.word	0x08009557
 8009310:	08009557 	.word	0x08009557
 8009314:	0800934b 	.word	0x0800934b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009318:	4b94      	ldr	r3, [pc, #592]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d009      	beq.n	8009338 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009324:	4b91      	ldr	r3, [pc, #580]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	08db      	lsrs	r3, r3, #3
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	4a90      	ldr	r2, [pc, #576]	; (8009570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009330:	fa22 f303 	lsr.w	r3, r2, r3
 8009334:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009336:	e111      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009338:	4b8d      	ldr	r3, [pc, #564]	; (8009570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800933a:	61bb      	str	r3, [r7, #24]
      break;
 800933c:	e10e      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800933e:	4b8d      	ldr	r3, [pc, #564]	; (8009574 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009340:	61bb      	str	r3, [r7, #24]
      break;
 8009342:	e10b      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009344:	4b8c      	ldr	r3, [pc, #560]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009346:	61bb      	str	r3, [r7, #24]
      break;
 8009348:	e108      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800934a:	4b88      	ldr	r3, [pc, #544]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009354:	4b85      	ldr	r3, [pc, #532]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009358:	091b      	lsrs	r3, r3, #4
 800935a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800935e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009360:	4b82      	ldr	r3, [pc, #520]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800936a:	4b80      	ldr	r3, [pc, #512]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	08db      	lsrs	r3, r3, #3
 8009370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80e1 	beq.w	8009550 <HAL_RCC_GetSysClockFreq+0x2b8>
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b02      	cmp	r3, #2
 8009392:	f000 8083 	beq.w	800949c <HAL_RCC_GetSysClockFreq+0x204>
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b02      	cmp	r3, #2
 800939a:	f200 80a1 	bhi.w	80094e0 <HAL_RCC_GetSysClockFreq+0x248>
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_RCC_GetSysClockFreq+0x114>
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d056      	beq.n	8009458 <HAL_RCC_GetSysClockFreq+0x1c0>
 80093aa:	e099      	b.n	80094e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ac:	4b6f      	ldr	r3, [pc, #444]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02d      	beq.n	8009414 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b8:	4b6c      	ldr	r3, [pc, #432]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	4a6b      	ldr	r2, [pc, #428]	; (8009570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e2:	4b62      	ldr	r3, [pc, #392]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80093f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800957c <HAL_RCC_GetSysClockFreq+0x2e4>
 80093fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009412:	e087      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009580 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009426:	4b51      	ldr	r3, [pc, #324]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009436:	ed97 6a02 	vldr	s12, [r7, #8]
 800943a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800957c <HAL_RCC_GetSysClockFreq+0x2e4>
 800943e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800944a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009456:	e065      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009584 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946a:	4b40      	ldr	r3, [pc, #256]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947a:	ed97 6a02 	vldr	s12, [r7, #8]
 800947e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800957c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800949a:	e043      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2f0>
 80094aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ae:	4b2f      	ldr	r3, [pc, #188]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094be:	ed97 6a02 	vldr	s12, [r7, #8]
 80094c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800957c <HAL_RCC_GetSysClockFreq+0x2e4>
 80094c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094de:	e021      	b.n	8009524 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009584 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f2:	4b1e      	ldr	r3, [pc, #120]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009502:	ed97 6a02 	vldr	s12, [r7, #8]
 8009506:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800957c <HAL_RCC_GetSysClockFreq+0x2e4>
 800950a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009522:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	0a5b      	lsrs	r3, r3, #9
 800952a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952e:	3301      	adds	r3, #1
 8009530:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800953c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009548:	ee17 3a90 	vmov	r3, s15
 800954c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800954e:	e005      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	61bb      	str	r3, [r7, #24]
      break;
 8009554:	e002      	b.n	800955c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009556:	4b07      	ldr	r3, [pc, #28]	; (8009574 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009558:	61bb      	str	r3, [r7, #24]
      break;
 800955a:	bf00      	nop
  }

  return sysclockfreq;
 800955c:	69bb      	ldr	r3, [r7, #24]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3724      	adds	r7, #36	; 0x24
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	03d09000 	.word	0x03d09000
 8009574:	003d0900 	.word	0x003d0900
 8009578:	02faf080 	.word	0x02faf080
 800957c:	46000000 	.word	0x46000000
 8009580:	4c742400 	.word	0x4c742400
 8009584:	4a742400 	.word	0x4a742400
 8009588:	4c3ebc20 	.word	0x4c3ebc20

0800958c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009592:	f7ff fe81 	bl	8009298 <HAL_RCC_GetSysClockFreq>
 8009596:	4602      	mov	r2, r0
 8009598:	4b10      	ldr	r3, [pc, #64]	; (80095dc <HAL_RCC_GetHCLKFreq+0x50>)
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	0a1b      	lsrs	r3, r3, #8
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	490f      	ldr	r1, [pc, #60]	; (80095e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80095a4:	5ccb      	ldrb	r3, [r1, r3]
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	fa22 f303 	lsr.w	r3, r2, r3
 80095ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <HAL_RCC_GetHCLKFreq+0x50>)
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80095ba:	5cd3      	ldrb	r3, [r2, r3]
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	fa22 f303 	lsr.w	r3, r2, r3
 80095c6:	4a07      	ldr	r2, [pc, #28]	; (80095e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80095c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095ca:	4a07      	ldr	r2, [pc, #28]	; (80095e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80095d2:	681b      	ldr	r3, [r3, #0]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	58024400 	.word	0x58024400
 80095e0:	0801a388 	.word	0x0801a388
 80095e4:	24000004 	.word	0x24000004
 80095e8:	24000000 	.word	0x24000000

080095ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095f0:	f7ff ffcc 	bl	800958c <HAL_RCC_GetHCLKFreq>
 80095f4:	4602      	mov	r2, r0
 80095f6:	4b06      	ldr	r3, [pc, #24]	; (8009610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009602:	5ccb      	ldrb	r3, [r1, r3]
 8009604:	f003 031f 	and.w	r3, r3, #31
 8009608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800960c:	4618      	mov	r0, r3
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58024400 	.word	0x58024400
 8009614:	0801a388 	.word	0x0801a388

08009618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800961c:	f7ff ffb6 	bl	800958c <HAL_RCC_GetHCLKFreq>
 8009620:	4602      	mov	r2, r0
 8009622:	4b06      	ldr	r3, [pc, #24]	; (800963c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	0a1b      	lsrs	r3, r3, #8
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	4904      	ldr	r1, [pc, #16]	; (8009640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800962e:	5ccb      	ldrb	r3, [r1, r3]
 8009630:	f003 031f 	and.w	r3, r3, #31
 8009634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009638:	4618      	mov	r0, r3
 800963a:	bd80      	pop	{r7, pc}
 800963c:	58024400 	.word	0x58024400
 8009640:	0801a388 	.word	0x0801a388

08009644 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009648:	b0c6      	sub	sp, #280	; 0x118
 800964a:	af00      	add	r7, sp, #0
 800964c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009656:	2300      	movs	r3, #0
 8009658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009668:	2500      	movs	r5, #0
 800966a:	ea54 0305 	orrs.w	r3, r4, r5
 800966e:	d049      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800967a:	d02f      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800967c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009680:	d828      	bhi.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009686:	d01a      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800968c:	d822      	bhi.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009696:	d007      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009698:	e01c      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969a:	4bab      	ldr	r3, [pc, #684]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	4aaa      	ldr	r2, [pc, #680]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096a6:	e01a      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ac:	3308      	adds	r3, #8
 80096ae:	2102      	movs	r1, #2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f002 fa49 	bl	800bb48 <RCCEx_PLL2_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096bc:	e00f      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	3328      	adds	r3, #40	; 0x28
 80096c4:	2102      	movs	r1, #2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f002 faf0 	bl	800bcac <RCCEx_PLL3_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80096d2:	e004      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80096da:	e000      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80096dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80096e6:	4b98      	ldr	r3, [pc, #608]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f4:	4a94      	ldr	r2, [pc, #592]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096f6:	430b      	orrs	r3, r1
 80096f8:	6513      	str	r3, [r2, #80]	; 0x50
 80096fa:	e003      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009700:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009710:	f04f 0900 	mov.w	r9, #0
 8009714:	ea58 0309 	orrs.w	r3, r8, r9
 8009718:	d047      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009720:	2b04      	cmp	r3, #4
 8009722:	d82a      	bhi.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	08009741 	.word	0x08009741
 8009730:	0800974f 	.word	0x0800974f
 8009734:	08009765 	.word	0x08009765
 8009738:	08009783 	.word	0x08009783
 800973c:	08009783 	.word	0x08009783
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009740:	4b81      	ldr	r3, [pc, #516]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	4a80      	ldr	r2, [pc, #512]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800974a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800974c:	e01a      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800974e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009752:	3308      	adds	r3, #8
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f002 f9f6 	bl	800bb48 <RCCEx_PLL2_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009762:	e00f      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009768:	3328      	adds	r3, #40	; 0x28
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f002 fa9d 	bl	800bcac <RCCEx_PLL3_Config>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009778:	e004      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009780:	e000      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009784:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10a      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800978c:	4b6e      	ldr	r3, [pc, #440]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800978e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009790:	f023 0107 	bic.w	r1, r3, #7
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979a:	4a6b      	ldr	r2, [pc, #428]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800979c:	430b      	orrs	r3, r1
 800979e:	6513      	str	r3, [r2, #80]	; 0x50
 80097a0:	e003      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80097a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80097b6:	f04f 0b00 	mov.w	fp, #0
 80097ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80097be:	d05b      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097c8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80097cc:	d03b      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80097ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80097d2:	d834      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097d8:	d037      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80097da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097de:	d82e      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097e4:	d033      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80097e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80097ea:	d828      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f0:	d01a      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80097f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097f6:	d822      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80097fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009800:	d007      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009802:	e01c      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009804:	4b50      	ldr	r3, [pc, #320]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a4f      	ldr	r2, [pc, #316]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800980a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009810:	e01e      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009816:	3308      	adds	r3, #8
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f002 f994 	bl	800bb48 <RCCEx_PLL2_Config>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009826:	e013      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982c:	3328      	adds	r3, #40	; 0x28
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f002 fa3b 	bl	800bcac <RCCEx_PLL3_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800983c:	e008      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009844:	e004      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009846:	bf00      	nop
 8009848:	e002      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800984a:	bf00      	nop
 800984c:	e000      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800984e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10b      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009858:	4b3b      	ldr	r3, [pc, #236]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800985a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009868:	4a37      	ldr	r2, [pc, #220]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800986a:	430b      	orrs	r3, r1
 800986c:	6593      	str	r3, [r2, #88]	; 0x58
 800986e:	e003      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009888:	2300      	movs	r3, #0
 800988a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800988e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009892:	460b      	mov	r3, r1
 8009894:	4313      	orrs	r3, r2
 8009896:	d05d      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800989c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098a0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098a4:	d03b      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80098a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80098aa:	d834      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098b0:	d037      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80098b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098b6:	d82e      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098bc:	d033      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80098be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80098c2:	d828      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098c8:	d01a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80098ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ce:	d822      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098d8:	d007      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80098da:	e01c      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4b1a      	ldr	r3, [pc, #104]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4a19      	ldr	r2, [pc, #100]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e8:	e01e      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ee:	3308      	adds	r3, #8
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f002 f928 	bl	800bb48 <RCCEx_PLL2_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80098fe:	e013      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009904:	3328      	adds	r3, #40	; 0x28
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f002 f9cf 	bl	800bcac <RCCEx_PLL3_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009914:	e008      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800991c:	e004      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009928:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10d      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009934:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800993c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009940:	4a01      	ldr	r2, [pc, #4]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009942:	430b      	orrs	r3, r1
 8009944:	6593      	str	r3, [r2, #88]	; 0x58
 8009946:	e005      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009960:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800996a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	d03a      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997a:	2b30      	cmp	r3, #48	; 0x30
 800997c:	d01f      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800997e:	2b30      	cmp	r3, #48	; 0x30
 8009980:	d819      	bhi.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009982:	2b20      	cmp	r3, #32
 8009984:	d00c      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009986:	2b20      	cmp	r3, #32
 8009988:	d815      	bhi.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d019      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800998e:	2b10      	cmp	r3, #16
 8009990:	d111      	bne.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009992:	4baa      	ldr	r3, [pc, #680]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	4aa9      	ldr	r2, [pc, #676]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800999e:	e011      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a4:	3308      	adds	r3, #8
 80099a6:	2102      	movs	r1, #2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f002 f8cd 	bl	800bb48 <RCCEx_PLL2_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80099b4:	e006      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099bc:	e002      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80099c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80099cc:	4b9b      	ldr	r3, [pc, #620]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099da:	4a98      	ldr	r2, [pc, #608]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099dc:	430b      	orrs	r3, r1
 80099de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099e0:	e003      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80099f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099fa:	2300      	movs	r3, #0
 80099fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009a04:	460b      	mov	r3, r1
 8009a06:	4313      	orrs	r3, r2
 8009a08:	d051      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a14:	d035      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a1a:	d82e      	bhi.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a20:	d031      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a26:	d828      	bhi.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2c:	d01a      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a32:	d822      	bhi.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3c:	d007      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009a3e:	e01c      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a40:	4b7e      	ldr	r3, [pc, #504]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	4a7d      	ldr	r2, [pc, #500]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a4c:	e01c      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a52:	3308      	adds	r3, #8
 8009a54:	2100      	movs	r1, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f002 f876 	bl	800bb48 <RCCEx_PLL2_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a62:	e011      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a68:	3328      	adds	r3, #40	; 0x28
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 f91d 	bl	800bcac <RCCEx_PLL3_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a78:	e006      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a80:	e002      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a82:	bf00      	nop
 8009a84:	e000      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a90:	4b6a      	ldr	r3, [pc, #424]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9e:	4a67      	ldr	r2, [pc, #412]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8009aa4:	e003      	b.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009aaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ac4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4313      	orrs	r3, r2
 8009acc:	d053      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ad8:	d033      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ade:	d82c      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ae4:	d02f      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009aea:	d826      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009af0:	d02b      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009af6:	d820      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009afc:	d012      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b02:	d81a      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d022      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b0c:	d115      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b12:	3308      	adds	r3, #8
 8009b14:	2101      	movs	r1, #1
 8009b16:	4618      	mov	r0, r3
 8009b18:	f002 f816 	bl	800bb48 <RCCEx_PLL2_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b22:	e015      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b28:	3328      	adds	r3, #40	; 0x28
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 f8bd 	bl	800bcac <RCCEx_PLL3_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009b38:	e00a      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b40:	e006      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b42:	bf00      	nop
 8009b44:	e004      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b46:	bf00      	nop
 8009b48:	e002      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b4a:	bf00      	nop
 8009b4c:	e000      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b58:	4b38      	ldr	r3, [pc, #224]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b66:	4a35      	ldr	r2, [pc, #212]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6513      	str	r3, [r2, #80]	; 0x50
 8009b6c:	e003      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b72:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b90:	460b      	mov	r3, r1
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d058      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba2:	d033      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba8:	d82c      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bae:	d02f      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb4:	d826      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009bb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bba:	d02b      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009bc0:	d820      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc6:	d012      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bcc:	d81a      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d022      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd6:	d115      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bdc:	3308      	adds	r3, #8
 8009bde:	2101      	movs	r1, #1
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 ffb1 	bl	800bb48 <RCCEx_PLL2_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009bec:	e015      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf2:	3328      	adds	r3, #40	; 0x28
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 f858 	bl	800bcac <RCCEx_PLL3_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009c02:	e00a      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c0a:	e006      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009c0c:	bf00      	nop
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10e      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c22:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c32:	4a02      	ldr	r2, [pc, #8]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6593      	str	r3, [r2, #88]	; 0x58
 8009c38:	e006      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009c3a:	bf00      	nop
 8009c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4313      	orrs	r3, r2
 8009c66:	d037      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c72:	d00e      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c78:	d816      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d018      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c82:	d111      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c84:	4bc4      	ldr	r3, [pc, #784]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4ac3      	ldr	r2, [pc, #780]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c90:	e00f      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c96:	3308      	adds	r3, #8
 8009c98:	2101      	movs	r1, #1
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 ff54 	bl	800bb48 <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ca6:	e004      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cae:	e000      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10a      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cba:	4bb7      	ldr	r3, [pc, #732]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc8:	4ab3      	ldr	r2, [pc, #716]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cca:	430b      	orrs	r3, r1
 8009ccc:	6513      	str	r3, [r2, #80]	; 0x50
 8009cce:	e003      	b.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009cee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	d039      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d81c      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009d02:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d08:	08009d45 	.word	0x08009d45
 8009d0c:	08009d19 	.word	0x08009d19
 8009d10:	08009d27 	.word	0x08009d27
 8009d14:	08009d45 	.word	0x08009d45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d18:	4b9f      	ldr	r3, [pc, #636]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	4a9e      	ldr	r2, [pc, #632]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d24:	e00f      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 ff0a 	bl	800bb48 <RCCEx_PLL2_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009d3a:	e004      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d42:	e000      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d4e:	4b92      	ldr	r3, [pc, #584]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f023 0103 	bic.w	r1, r3, #3
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5c:	4a8e      	ldr	r2, [pc, #568]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d62:	e003      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	f000 8099 	beq.w	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d8e:	4b83      	ldr	r3, [pc, #524]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a82      	ldr	r2, [pc, #520]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d9a:	f7f9 f97b 	bl	8003094 <HAL_GetTick>
 8009d9e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009da2:	e00b      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009da4:	f7f9 f976 	bl	8003094 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b64      	cmp	r3, #100	; 0x64
 8009db2:	d903      	bls.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009dba:	e005      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dbc:	4b77      	ldr	r3, [pc, #476]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0ed      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d173      	bne.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009dd0:	4b71      	ldr	r3, [pc, #452]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009dd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ddc:	4053      	eors	r3, r2
 8009dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d015      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009de6:	4b6c      	ldr	r3, [pc, #432]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009df2:	4b69      	ldr	r3, [pc, #420]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df6:	4a68      	ldr	r2, [pc, #416]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dfe:	4b66      	ldr	r3, [pc, #408]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a65      	ldr	r2, [pc, #404]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009e0a:	4a63      	ldr	r2, [pc, #396]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1e:	d118      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e20:	f7f9 f938 	bl	8003094 <HAL_GetTick>
 8009e24:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e28:	e00d      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e2a:	f7f9 f933 	bl	8003094 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d903      	bls.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009e44:	e005      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e46:	4b54      	ldr	r3, [pc, #336]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0eb      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d129      	bne.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e6a:	d10e      	bne.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009e6c:	4b4a      	ldr	r3, [pc, #296]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e7c:	091a      	lsrs	r2, r3, #4
 8009e7e:	4b48      	ldr	r3, [pc, #288]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	4a45      	ldr	r2, [pc, #276]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e84:	430b      	orrs	r3, r1
 8009e86:	6113      	str	r3, [r2, #16]
 8009e88:	e005      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009e8a:	4b43      	ldr	r3, [pc, #268]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	4a42      	ldr	r2, [pc, #264]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e94:	6113      	str	r3, [r2, #16]
 8009e96:	4b40      	ldr	r3, [pc, #256]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ea6:	4a3c      	ldr	r2, [pc, #240]	; (8009f98 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ea8:	430b      	orrs	r3, r1
 8009eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8009eac:	e008      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009eae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009eb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8009eb6:	e003      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f002 0301 	and.w	r3, r2, #1
 8009ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ed6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009eda:	460b      	mov	r3, r1
 8009edc:	4313      	orrs	r3, r2
 8009ede:	f000 808f 	beq.w	800a000 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ee8:	2b28      	cmp	r3, #40	; 0x28
 8009eea:	d871      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009fd9 	.word	0x08009fd9
 8009ef8:	08009fd1 	.word	0x08009fd1
 8009efc:	08009fd1 	.word	0x08009fd1
 8009f00:	08009fd1 	.word	0x08009fd1
 8009f04:	08009fd1 	.word	0x08009fd1
 8009f08:	08009fd1 	.word	0x08009fd1
 8009f0c:	08009fd1 	.word	0x08009fd1
 8009f10:	08009fd1 	.word	0x08009fd1
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009fd1 	.word	0x08009fd1
 8009f1c:	08009fd1 	.word	0x08009fd1
 8009f20:	08009fd1 	.word	0x08009fd1
 8009f24:	08009fd1 	.word	0x08009fd1
 8009f28:	08009fd1 	.word	0x08009fd1
 8009f2c:	08009fd1 	.word	0x08009fd1
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	08009fbb 	.word	0x08009fbb
 8009f38:	08009fd1 	.word	0x08009fd1
 8009f3c:	08009fd1 	.word	0x08009fd1
 8009f40:	08009fd1 	.word	0x08009fd1
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009fd1 	.word	0x08009fd1
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009fd1 	.word	0x08009fd1
 8009f54:	08009fd9 	.word	0x08009fd9
 8009f58:	08009fd1 	.word	0x08009fd1
 8009f5c:	08009fd1 	.word	0x08009fd1
 8009f60:	08009fd1 	.word	0x08009fd1
 8009f64:	08009fd1 	.word	0x08009fd1
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009fd1 	.word	0x08009fd1
 8009f70:	08009fd1 	.word	0x08009fd1
 8009f74:	08009fd9 	.word	0x08009fd9
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009fd1 	.word	0x08009fd1
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	08009fd1 	.word	0x08009fd1
 8009f90:	08009fd1 	.word	0x08009fd1
 8009f94:	08009fd9 	.word	0x08009fd9
 8009f98:	58024400 	.word	0x58024400
 8009f9c:	58024800 	.word	0x58024800
 8009fa0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa8:	3308      	adds	r3, #8
 8009faa:	2101      	movs	r1, #1
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 fdcb 	bl	800bb48 <RCCEx_PLL2_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fb8:	e00f      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbe:	3328      	adds	r3, #40	; 0x28
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fe72 	bl	800bcac <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009fce:	e004      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009fe2:	4bbf      	ldr	r3, [pc, #764]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ff0:	4abb      	ldr	r2, [pc, #748]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	6553      	str	r3, [r2, #84]	; 0x54
 8009ff6:	e003      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ffc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f002 0302 	and.w	r3, r2, #2
 800a00c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a010:	2300      	movs	r3, #0
 800a012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a016:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4313      	orrs	r3, r2
 800a01e:	d041      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a026:	2b05      	cmp	r3, #5
 800a028:	d824      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a07d 	.word	0x0800a07d
 800a034:	0800a049 	.word	0x0800a049
 800a038:	0800a05f 	.word	0x0800a05f
 800a03c:	0800a07d 	.word	0x0800a07d
 800a040:	0800a07d 	.word	0x0800a07d
 800a044:	0800a07d 	.word	0x0800a07d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04c:	3308      	adds	r3, #8
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fd79 	bl	800bb48 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a05c:	e00f      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a062:	3328      	adds	r3, #40	; 0x28
 800a064:	2101      	movs	r1, #1
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fe20 	bl	800bcac <RCCEx_PLL3_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a072:	e004      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a07a:	e000      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a07e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a086:	4b96      	ldr	r3, [pc, #600]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08a:	f023 0107 	bic.w	r1, r3, #7
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	4a92      	ldr	r2, [pc, #584]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a096:	430b      	orrs	r3, r1
 800a098:	6553      	str	r3, [r2, #84]	; 0x54
 800a09a:	e003      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f002 0304 	and.w	r3, r2, #4
 800a0b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	d044      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0cc:	2b05      	cmp	r3, #5
 800a0ce:	d825      	bhi.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a125 	.word	0x0800a125
 800a0dc:	0800a0f1 	.word	0x0800a0f1
 800a0e0:	0800a107 	.word	0x0800a107
 800a0e4:	0800a125 	.word	0x0800a125
 800a0e8:	0800a125 	.word	0x0800a125
 800a0ec:	0800a125 	.word	0x0800a125
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fd25 	bl	800bb48 <RCCEx_PLL2_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a104:	e00f      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10a:	3328      	adds	r3, #40	; 0x28
 800a10c:	2101      	movs	r1, #1
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 fdcc 	bl	800bcac <RCCEx_PLL3_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a11a:	e004      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a122:	e000      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10b      	bne.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a12e:	4b6c      	ldr	r3, [pc, #432]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a132:	f023 0107 	bic.w	r1, r3, #7
 800a136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13e:	4a68      	ldr	r2, [pc, #416]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a140:	430b      	orrs	r3, r1
 800a142:	6593      	str	r3, [r2, #88]	; 0x58
 800a144:	e003      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a146:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a14a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f002 0320 	and.w	r3, r2, #32
 800a15a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a15e:	2300      	movs	r3, #0
 800a160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a164:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a168:	460b      	mov	r3, r1
 800a16a:	4313      	orrs	r3, r2
 800a16c:	d055      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a17a:	d033      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a17c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a180:	d82c      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a186:	d02f      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18c:	d826      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a18e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a192:	d02b      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a194:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a198:	d820      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a19a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19e:	d012      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a4:	d81a      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d022      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a1aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1ae:	d115      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 fcc5 	bl	800bb48 <RCCEx_PLL2_Config>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1c4:	e015      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	3328      	adds	r3, #40	; 0x28
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 fd6c 	bl	800bcac <RCCEx_PLL3_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a1da:	e00a      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1e2:	e006      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1e4:	bf00      	nop
 800a1e6:	e004      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1e8:	bf00      	nop
 800a1ea:	e002      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1ec:	bf00      	nop
 800a1ee:	e000      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1fa:	4b39      	ldr	r3, [pc, #228]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a20a:	4a35      	ldr	r2, [pc, #212]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6553      	str	r3, [r2, #84]	; 0x54
 800a210:	e003      	b.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a216:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a226:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a22a:	2300      	movs	r3, #0
 800a22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a230:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a234:	460b      	mov	r3, r1
 800a236:	4313      	orrs	r3, r2
 800a238:	d058      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a242:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a246:	d033      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a248:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a24c:	d82c      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a24e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a252:	d02f      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a258:	d826      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a25a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a25e:	d02b      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a264:	d820      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a26a:	d012      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a270:	d81a      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d022      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27a:	d115      	bne.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a280:	3308      	adds	r3, #8
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f001 fc5f 	bl	800bb48 <RCCEx_PLL2_Config>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a290:	e015      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a296:	3328      	adds	r3, #40	; 0x28
 800a298:	2102      	movs	r1, #2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f001 fd06 	bl	800bcac <RCCEx_PLL3_Config>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a2a6:	e00a      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2ae:	e006      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a2b0:	bf00      	nop
 800a2b2:	e004      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a2b4:	bf00      	nop
 800a2b6:	e002      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a2b8:	bf00      	nop
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10e      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2c6:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2d6:	4a02      	ldr	r2, [pc, #8]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6593      	str	r3, [r2, #88]	; 0x58
 800a2dc:	e006      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a2de:	bf00      	nop
 800a2e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a2f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a302:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a306:	460b      	mov	r3, r1
 800a308:	4313      	orrs	r3, r2
 800a30a:	d055      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a314:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a318:	d033      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a31a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a31e:	d82c      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a324:	d02f      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a32a:	d826      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a32c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a330:	d02b      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a332:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a336:	d820      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a33c:	d012      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a33e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a342:	d81a      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a344:	2b00      	cmp	r3, #0
 800a346:	d022      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a34c:	d115      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	3308      	adds	r3, #8
 800a354:	2100      	movs	r1, #0
 800a356:	4618      	mov	r0, r3
 800a358:	f001 fbf6 	bl	800bb48 <RCCEx_PLL2_Config>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a362:	e015      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a368:	3328      	adds	r3, #40	; 0x28
 800a36a:	2102      	movs	r1, #2
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fc9d 	bl	800bcac <RCCEx_PLL3_Config>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a378:	e00a      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a380:	e006      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a382:	bf00      	nop
 800a384:	e004      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a386:	bf00      	nop
 800a388:	e002      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a38a:	bf00      	nop
 800a38c:	e000      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a38e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a390:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a398:	4ba0      	ldr	r3, [pc, #640]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a39c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3a8:	4a9c      	ldr	r2, [pc, #624]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3aa:	430b      	orrs	r3, r1
 800a3ac:	6593      	str	r3, [r2, #88]	; 0x58
 800a3ae:	e003      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f002 0308 	and.w	r3, r2, #8
 800a3c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	d01e      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e4:	d10c      	bne.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ea:	3328      	adds	r3, #40	; 0x28
 800a3ec:	2102      	movs	r1, #2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f001 fc5c 	bl	800bcac <RCCEx_PLL3_Config>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a400:	4b86      	ldr	r3, [pc, #536]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a410:	4a82      	ldr	r2, [pc, #520]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a412:	430b      	orrs	r3, r1
 800a414:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f002 0310 	and.w	r3, r2, #16
 800a422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a426:	2300      	movs	r3, #0
 800a428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a42c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a430:	460b      	mov	r3, r1
 800a432:	4313      	orrs	r3, r2
 800a434:	d01e      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a442:	d10c      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a448:	3328      	adds	r3, #40	; 0x28
 800a44a:	2102      	movs	r1, #2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fc2d 	bl	800bcac <RCCEx_PLL3_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a45e:	4b6f      	ldr	r3, [pc, #444]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a46a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a46e:	4a6b      	ldr	r2, [pc, #428]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a470:	430b      	orrs	r3, r1
 800a472:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a480:	67bb      	str	r3, [r7, #120]	; 0x78
 800a482:	2300      	movs	r3, #0
 800a484:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a486:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a48a:	460b      	mov	r3, r1
 800a48c:	4313      	orrs	r3, r2
 800a48e:	d03e      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a49c:	d022      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a2:	d81b      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ac:	d00b      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a4ae:	e015      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f001 fb45 	bl	800bb48 <RCCEx_PLL2_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4c4:	e00f      	b.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ca:	3328      	adds	r3, #40	; 0x28
 800a4cc:	2102      	movs	r1, #2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f001 fbec 	bl	800bcac <RCCEx_PLL3_Config>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a4da:	e004      	b.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4e2:	e000      	b.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a4e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a4ee:	4b4b      	ldr	r3, [pc, #300]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a4f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4fe:	4a47      	ldr	r2, [pc, #284]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a500:	430b      	orrs	r3, r1
 800a502:	6593      	str	r3, [r2, #88]	; 0x58
 800a504:	e003      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a50a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a51a:	673b      	str	r3, [r7, #112]	; 0x70
 800a51c:	2300      	movs	r3, #0
 800a51e:	677b      	str	r3, [r7, #116]	; 0x74
 800a520:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a524:	460b      	mov	r3, r1
 800a526:	4313      	orrs	r3, r2
 800a528:	d03b      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a532:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a536:	d01f      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a53c:	d818      	bhi.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a53e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a542:	d003      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a548:	d007      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a54a:	e011      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a54c:	4b33      	ldr	r3, [pc, #204]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	4a32      	ldr	r2, [pc, #200]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a558:	e00f      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55e:	3328      	adds	r3, #40	; 0x28
 800a560:	2101      	movs	r1, #1
 800a562:	4618      	mov	r0, r3
 800a564:	f001 fba2 	bl	800bcac <RCCEx_PLL3_Config>
 800a568:	4603      	mov	r3, r0
 800a56a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a56e:	e004      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a576:	e000      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a57a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10b      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a582:	4b26      	ldr	r3, [pc, #152]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a586:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a592:	4a22      	ldr	r2, [pc, #136]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a594:	430b      	orrs	r3, r1
 800a596:	6553      	str	r3, [r2, #84]	; 0x54
 800a598:	e003      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a59e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a5ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	d034      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5cc:	d007      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a5ce:	e011      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5d0:	4b12      	ldr	r3, [pc, #72]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4a11      	ldr	r2, [pc, #68]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5dc:	e00e      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	2102      	movs	r1, #2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 faae 	bl	800bb48 <RCCEx_PLL2_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a5f2:	e003      	b.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10d      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a612:	4a02      	ldr	r2, [pc, #8]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a614:	430b      	orrs	r3, r1
 800a616:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a618:	e006      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a61a:	bf00      	nop
 800a61c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a624:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a634:	663b      	str	r3, [r7, #96]	; 0x60
 800a636:	2300      	movs	r3, #0
 800a638:	667b      	str	r3, [r7, #100]	; 0x64
 800a63a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a63e:	460b      	mov	r3, r1
 800a640:	4313      	orrs	r3, r2
 800a642:	d00c      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a648:	3328      	adds	r3, #40	; 0x28
 800a64a:	2102      	movs	r1, #2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 fb2d 	bl	800bcac <RCCEx_PLL3_Config>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a66a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a66c:	2300      	movs	r3, #0
 800a66e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a670:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a674:	460b      	mov	r3, r1
 800a676:	4313      	orrs	r3, r2
 800a678:	d036      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a684:	d018      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a68a:	d811      	bhi.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a690:	d014      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a696:	d80b      	bhi.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d011      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a69c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a0:	d106      	bne.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a2:	4bb7      	ldr	r3, [pc, #732]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	4ab6      	ldr	r2, [pc, #728]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6b6:	e004      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a6b8:	bf00      	nop
 800a6ba:	e002      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a6bc:	bf00      	nop
 800a6be:	e000      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a6c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6ca:	4bad      	ldr	r3, [pc, #692]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d8:	4aa9      	ldr	r2, [pc, #676]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	6553      	str	r3, [r2, #84]	; 0x54
 800a6de:	e003      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a6f4:	653b      	str	r3, [r7, #80]	; 0x50
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	657b      	str	r3, [r7, #84]	; 0x54
 800a6fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d009      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a704:	4b9e      	ldr	r3, [pc, #632]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a712:	4a9b      	ldr	r2, [pc, #620]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a724:	64bb      	str	r3, [r7, #72]	; 0x48
 800a726:	2300      	movs	r3, #0
 800a728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a72a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a72e:	460b      	mov	r3, r1
 800a730:	4313      	orrs	r3, r2
 800a732:	d009      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a734:	4b92      	ldr	r3, [pc, #584]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a738:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a742:	4a8f      	ldr	r2, [pc, #572]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a750:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a754:	643b      	str	r3, [r7, #64]	; 0x40
 800a756:	2300      	movs	r3, #0
 800a758:	647b      	str	r3, [r7, #68]	; 0x44
 800a75a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a75e:	460b      	mov	r3, r1
 800a760:	4313      	orrs	r3, r2
 800a762:	d00e      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a764:	4b86      	ldr	r3, [pc, #536]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	4a85      	ldr	r2, [pc, #532]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a76a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a76e:	6113      	str	r3, [r2, #16]
 800a770:	4b83      	ldr	r3, [pc, #524]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a772:	6919      	ldr	r1, [r3, #16]
 800a774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a778:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a77c:	4a80      	ldr	r2, [pc, #512]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a77e:	430b      	orrs	r3, r1
 800a780:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a794:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a798:	460b      	mov	r3, r1
 800a79a:	4313      	orrs	r3, r2
 800a79c:	d009      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a79e:	4b78      	ldr	r3, [pc, #480]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ac:	4a74      	ldr	r2, [pc, #464]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a7be:	633b      	str	r3, [r7, #48]	; 0x30
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	d00a      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7ce:	4b6c      	ldr	r3, [pc, #432]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	4a68      	ldr	r2, [pc, #416]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	62b9      	str	r1, [r7, #40]	; 0x28
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	d011      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a804:	3308      	adds	r3, #8
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 f99d 	bl	800bb48 <RCCEx_PLL2_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a814:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	2100      	movs	r1, #0
 800a82e:	6239      	str	r1, [r7, #32]
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	627b      	str	r3, [r7, #36]	; 0x24
 800a836:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a83a:	460b      	mov	r3, r1
 800a83c:	4313      	orrs	r3, r2
 800a83e:	d011      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	3308      	adds	r3, #8
 800a846:	2101      	movs	r1, #1
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 f97d 	bl	800bb48 <RCCEx_PLL2_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a854:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a85c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a860:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	2100      	movs	r1, #0
 800a86e:	61b9      	str	r1, [r7, #24]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a87a:	460b      	mov	r3, r1
 800a87c:	4313      	orrs	r3, r2
 800a87e:	d011      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	3308      	adds	r3, #8
 800a886:	2102      	movs	r1, #2
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 f95d 	bl	800bb48 <RCCEx_PLL2_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	6139      	str	r1, [r7, #16]
 800a8b0:	f003 0308 	and.w	r3, r3, #8
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	d011      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c4:	3328      	adds	r3, #40	; 0x28
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 f9ef 	bl	800bcac <RCCEx_PLL3_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800a8d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d011      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	3328      	adds	r3, #40	; 0x28
 800a906:	2101      	movs	r1, #1
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 f9cf 	bl	800bcac <RCCEx_PLL3_Config>
 800a90e:	4603      	mov	r3, r0
 800a910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a914:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	2100      	movs	r1, #0
 800a92e:	6039      	str	r1, [r7, #0]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	607b      	str	r3, [r7, #4]
 800a936:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a93a:	460b      	mov	r3, r1
 800a93c:	4313      	orrs	r3, r2
 800a93e:	d011      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	3328      	adds	r3, #40	; 0x28
 800a946:	2102      	movs	r1, #2
 800a948:	4618      	mov	r0, r3
 800a94a:	f001 f9af 	bl	800bcac <RCCEx_PLL3_Config>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a954:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800a964:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e000      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
}
 800a972:	4618      	mov	r0, r3
 800a974:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800a978:	46bd      	mov	sp, r7
 800a97a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a97e:	bf00      	nop
 800a980:	58024400 	.word	0x58024400

0800a984 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b090      	sub	sp, #64	; 0x40
 800a988:	af00      	add	r7, sp, #0
 800a98a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a992:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a996:	430b      	orrs	r3, r1
 800a998:	f040 8094 	bne.w	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a99c:	4b9b      	ldr	r3, [pc, #620]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	f200 8087 	bhi.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a9ae:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800a9c9 	.word	0x0800a9c9
 800a9b8:	0800a9f1 	.word	0x0800a9f1
 800a9bc:	0800aa19 	.word	0x0800aa19
 800a9c0:	0800aab5 	.word	0x0800aab5
 800a9c4:	0800aa41 	.word	0x0800aa41
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9c8:	4b90      	ldr	r3, [pc, #576]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9d4:	d108      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 ff62 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e4:	f000 bc93 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ec:	f000 bc8f 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9f0:	4b86      	ldr	r3, [pc, #536]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9fc:	d108      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fe:	f107 0318 	add.w	r3, r7, #24
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fca6 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0c:	f000 bc7f 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa14:	f000 bc7b 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa18:	4b7c      	ldr	r3, [pc, #496]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa24:	d108      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fde6 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa34:	f000 bc6b 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa3c:	f000 bc67 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa40:	4b72      	ldr	r3, [pc, #456]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa4a:	4b70      	ldr	r3, [pc, #448]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d10c      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d109      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa5c:	4b6b      	ldr	r3, [pc, #428]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	08db      	lsrs	r3, r3, #3
 800aa62:	f003 0303 	and.w	r3, r3, #3
 800aa66:	4a6a      	ldr	r2, [pc, #424]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aa68:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa6e:	e01f      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa70:	4b66      	ldr	r3, [pc, #408]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa7c:	d106      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa84:	d102      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa86:	4b63      	ldr	r3, [pc, #396]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa8a:	e011      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa8c:	4b5f      	ldr	r3, [pc, #380]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa98:	d106      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa0:	d102      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aaa2:	4b5d      	ldr	r3, [pc, #372]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa6:	e003      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aaac:	f000 bc2f 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aab0:	f000 bc2d 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aab4:	4b59      	ldr	r3, [pc, #356]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab8:	f000 bc29 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac0:	f000 bc25 	b.w	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aacc:	430b      	orrs	r3, r1
 800aace:	f040 80a7 	bne.w	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aad2:	4b4e      	ldr	r3, [pc, #312]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aada:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aae2:	d054      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aaea:	f200 808b 	bhi.w	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aaf4:	f000 8083 	beq.w	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aafe:	f200 8081 	bhi.w	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab08:	d02f      	beq.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab10:	d878      	bhi.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab1e:	d012      	beq.n	800ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ab20:	e070      	b.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab22:	4b3a      	ldr	r3, [pc, #232]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab2e:	d107      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 feb5 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3e:	e3e6      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab44:	e3e3      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab46:	4b31      	ldr	r3, [pc, #196]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab52:	d107      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab54:	f107 0318 	add.w	r3, r7, #24
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fbfb 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab62:	e3d4      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e3d1      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab6a:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab76:	d107      	bne.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab78:	f107 030c 	add.w	r3, r7, #12
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f000 fd3d 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab86:	e3c2      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab8c:	e3bf      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab8e:	4b1f      	ldr	r3, [pc, #124]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d10c      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abaa:	4b18      	ldr	r3, [pc, #96]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	08db      	lsrs	r3, r3, #3
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	4a16      	ldr	r2, [pc, #88]	; (800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abb6:	fa22 f303 	lsr.w	r3, r2, r3
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abbc:	e01e      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abca:	d106      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800abcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abd2:	d102      	bne.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abd4:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd8:	e010      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abda:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe6:	d106      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800abe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abee:	d102      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abf0:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf4:	e002      	b.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abfa:	e388      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abfc:	e387      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abfe:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac02:	e384      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac08:	e381      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac0a:	bf00      	nop
 800ac0c:	58024400 	.word	0x58024400
 800ac10:	03d09000 	.word	0x03d09000
 800ac14:	003d0900 	.word	0x003d0900
 800ac18:	02faf080 	.word	0x02faf080
 800ac1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ac20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac24:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	f040 809c 	bne.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ac2e:	4b9e      	ldr	r3, [pc, #632]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac32:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ac36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac3e:	d054      	beq.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac46:	f200 808b 	bhi.w	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac50:	f000 8083 	beq.w	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac5a:	f200 8081 	bhi.w	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac64:	d02f      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac6c:	d878      	bhi.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac7a:	d012      	beq.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ac7c:	e070      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac7e:	4b8a      	ldr	r3, [pc, #552]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8a:	d107      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fe07 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9a:	e338      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca0:	e335      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aca2:	4b81      	ldr	r3, [pc, #516]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acae:	d107      	bne.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb0:	f107 0318 	add.w	r3, r7, #24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fb4d 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acbe:	e326      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc4:	e323      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acc6:	4b78      	ldr	r3, [pc, #480]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd2:	d107      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acd4:	f107 030c 	add.w	r3, r7, #12
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fc8f 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace2:	e314      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace8:	e311      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acea:	4b6f      	ldr	r3, [pc, #444]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acf2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acf4:	4b6c      	ldr	r3, [pc, #432]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	d10c      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ad00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d109      	bne.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad06:	4b68      	ldr	r3, [pc, #416]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	08db      	lsrs	r3, r3, #3
 800ad0c:	f003 0303 	and.w	r3, r3, #3
 800ad10:	4a66      	ldr	r2, [pc, #408]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ad12:	fa22 f303 	lsr.w	r3, r2, r3
 800ad16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad18:	e01e      	b.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad1a:	4b63      	ldr	r3, [pc, #396]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad26:	d106      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad2e:	d102      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad30:	4b5f      	ldr	r3, [pc, #380]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad34:	e010      	b.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad36:	4b5c      	ldr	r3, [pc, #368]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad42:	d106      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ad44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad4a:	d102      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad4c:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad50:	e002      	b.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad56:	e2da      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad58:	e2d9      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad5a:	4b57      	ldr	r3, [pc, #348]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad5e:	e2d6      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad64:	e2d3      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	f040 80a7 	bne.w	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad74:	4b4c      	ldr	r3, [pc, #304]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ad7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad84:	d055      	beq.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad8c:	f200 8096 	bhi.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad96:	f000 8084 	beq.w	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ada0:	f200 808c 	bhi.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adaa:	d030      	beq.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800adac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adb2:	f200 8083 	bhi.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adc2:	d012      	beq.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800adc4:	e07a      	b.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adc6:	4b38      	ldr	r3, [pc, #224]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add2:	d107      	bne.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800add4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fd63 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade2:	e294      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade8:	e291      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adea:	4b2f      	ldr	r3, [pc, #188]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adf6:	d107      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adf8:	f107 0318 	add.w	r3, r7, #24
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 faa9 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae06:	e282      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0c:	e27f      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae0e:	4b26      	ldr	r3, [pc, #152]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae1a:	d107      	bne.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae1c:	f107 030c 	add.w	r3, r7, #12
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fbeb 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae2a:	e270      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae30:	e26d      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae3c:	4b1a      	ldr	r3, [pc, #104]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d10c      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ae48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae4e:	4b16      	ldr	r3, [pc, #88]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	08db      	lsrs	r3, r3, #3
 800ae54:	f003 0303 	and.w	r3, r3, #3
 800ae58:	4a14      	ldr	r2, [pc, #80]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae60:	e01e      	b.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae62:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6e:	d106      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae76:	d102      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7c:	e010      	b.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae7e:	4b0a      	ldr	r3, [pc, #40]	; (800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae8a:	d106      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae92:	d102      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae94:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae98:	e002      	b.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae9e:	e236      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aea0:	e235      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea6:	e232      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aea8:	58024400 	.word	0x58024400
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	003d0900 	.word	0x003d0900
 800aeb4:	02faf080 	.word	0x02faf080
 800aeb8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aec0:	e225      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aec6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aeca:	430b      	orrs	r3, r1
 800aecc:	f040 8085 	bne.w	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aed0:	4b9c      	ldr	r3, [pc, #624]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aed8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aee0:	d06b      	beq.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aee8:	d874      	bhi.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aef0:	d056      	beq.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aef8:	d86c      	bhi.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af00:	d03b      	beq.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af08:	d864      	bhi.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af10:	d021      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af18:	d85c      	bhi.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d004      	beq.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af26:	d004      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800af28:	e054      	b.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800af2a:	f7fe fb5f 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800af2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af30:	e1ed      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af32:	4b84      	ldr	r3, [pc, #528]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af40:	f107 0318 	add.w	r3, r7, #24
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fa05 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e1de      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e1db      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af56:	4b7b      	ldr	r3, [pc, #492]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af64:	f107 030c 	add.w	r3, r7, #12
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fb47 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af72:	e1cc      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af78:	e1c9      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af7a:	4b72      	ldr	r3, [pc, #456]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b04      	cmp	r3, #4
 800af84:	d109      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af86:	4b6f      	ldr	r3, [pc, #444]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	08db      	lsrs	r3, r3, #3
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	4a6d      	ldr	r2, [pc, #436]	; (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800af92:	fa22 f303 	lsr.w	r3, r2, r3
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af98:	e1b9      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af9e:	e1b6      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afa0:	4b68      	ldr	r3, [pc, #416]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afac:	d102      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800afae:	4b67      	ldr	r3, [pc, #412]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb2:	e1ac      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb8:	e1a9      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afba:	4b62      	ldr	r3, [pc, #392]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc6:	d102      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800afc8:	4b61      	ldr	r3, [pc, #388]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afcc:	e19f      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd2:	e19c      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd8:	e199      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800afda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afde:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800afe2:	430b      	orrs	r3, r1
 800afe4:	d173      	bne.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800afe6:	4b57      	ldr	r3, [pc, #348]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800afe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800afee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aff6:	d02f      	beq.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800affe:	d863      	bhi.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b00c:	d012      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b00e:	e05b      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b010:	4b4c      	ldr	r3, [pc, #304]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b01c:	d107      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b01e:	f107 0318 	add.w	r3, r7, #24
 800b022:	4618      	mov	r0, r3
 800b024:	f000 f996 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b02c:	e16f      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b032:	e16c      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b034:	4b43      	ldr	r3, [pc, #268]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b03c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b040:	d107      	bne.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b042:	f107 030c 	add.w	r3, r7, #12
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fad8 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b050:	e15d      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b056:	e15a      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b058:	4b3a      	ldr	r3, [pc, #232]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b05a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b060:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b062:	4b38      	ldr	r3, [pc, #224]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0304 	and.w	r3, r3, #4
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d10c      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	2b00      	cmp	r3, #0
 800b072:	d109      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b074:	4b33      	ldr	r3, [pc, #204]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	08db      	lsrs	r3, r3, #3
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	4a32      	ldr	r2, [pc, #200]	; (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b080:	fa22 f303 	lsr.w	r3, r2, r3
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b086:	e01e      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b088:	4b2e      	ldr	r3, [pc, #184]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b094:	d106      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b09c:	d102      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b09e:	4b2b      	ldr	r3, [pc, #172]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a2:	e010      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0a4:	4b27      	ldr	r3, [pc, #156]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b0:	d106      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b8:	d102      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0ba:	4b25      	ldr	r3, [pc, #148]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0be:	e002      	b.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0c4:	e123      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0c6:	e122      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0cc:	e11f      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	d13c      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b0da:	4b1a      	ldr	r3, [pc, #104]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0e2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d004      	beq.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f0:	d012      	beq.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b0f2:	e023      	b.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0f4:	4b13      	ldr	r3, [pc, #76]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b100:	d107      	bne.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fbcc 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b110:	e0fd      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b116:	e0fa      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b118:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b124:	d107      	bne.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b126:	f107 0318 	add.w	r3, r7, #24
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f912 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b134:	e0eb      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13a:	e0e8      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b140:	e0e5      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b142:	bf00      	nop
 800b144:	58024400 	.word	0x58024400
 800b148:	03d09000 	.word	0x03d09000
 800b14c:	003d0900 	.word	0x003d0900
 800b150:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b158:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b15c:	430b      	orrs	r3, r1
 800b15e:	f040 8085 	bne.w	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b162:	4b6d      	ldr	r3, [pc, #436]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b166:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b16a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b172:	d06b      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b17a:	d874      	bhi.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b182:	d056      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b18a:	d86c      	bhi.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b192:	d03b      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b19a:	d864      	bhi.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1a2:	d021      	beq.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1aa:	d85c      	bhi.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1b8:	d004      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b1ba:	e054      	b.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b1bc:	f000 f8b4 	bl	800b328 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1c2:	e0a4      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1c4:	4b54      	ldr	r3, [pc, #336]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1d0:	d107      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1d2:	f107 0318 	add.w	r3, r7, #24
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f8bc 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e0:	e095      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e6:	e092      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1e8:	4b4b      	ldr	r3, [pc, #300]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f4:	d107      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f6:	f107 030c 	add.w	r3, r7, #12
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f9fe 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b204:	e083      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20a:	e080      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b20c:	4b42      	ldr	r3, [pc, #264]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0304 	and.w	r3, r3, #4
 800b214:	2b04      	cmp	r3, #4
 800b216:	d109      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b218:	4b3f      	ldr	r3, [pc, #252]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	4a3e      	ldr	r2, [pc, #248]	; (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22a:	e070      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b230:	e06d      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b232:	4b39      	ldr	r3, [pc, #228]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b23e:	d102      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b240:	4b37      	ldr	r3, [pc, #220]	; (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b244:	e063      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24a:	e060      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b24c:	4b32      	ldr	r3, [pc, #200]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b258:	d102      	bne.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b25a:	4b32      	ldr	r3, [pc, #200]	; (800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b25e:	e056      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b264:	e053      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b26a:	e050      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b26c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b270:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b274:	430b      	orrs	r3, r1
 800b276:	d148      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b278:	4b27      	ldr	r3, [pc, #156]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b280:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b288:	d02a      	beq.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b290:	d838      	bhi.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b29e:	d00d      	beq.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b2a0:	e030      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2a2:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ae:	d102      	bne.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b2b0:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b4:	e02b      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ba:	e028      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2bc:	4b16      	ldr	r3, [pc, #88]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2c8:	d107      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fae8 	bl	800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d8:	e019      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2de:	e016      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e0:	4b0d      	ldr	r3, [pc, #52]	; (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ec:	d107      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2ee:	f107 0318 	add.w	r3, r7, #24
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f82e 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2fc:	e007      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b302:	e004      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b308:	e001      	b.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b310:	4618      	mov	r0, r3
 800b312:	3740      	adds	r7, #64	; 0x40
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	58024400 	.word	0x58024400
 800b31c:	03d09000 	.word	0x03d09000
 800b320:	003d0900 	.word	0x003d0900
 800b324:	02faf080 	.word	0x02faf080

0800b328 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b32c:	f7fe f92e 	bl	800958c <HAL_RCC_GetHCLKFreq>
 800b330:	4602      	mov	r2, r0
 800b332:	4b06      	ldr	r3, [pc, #24]	; (800b34c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	091b      	lsrs	r3, r3, #4
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	4904      	ldr	r1, [pc, #16]	; (800b350 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b33e:	5ccb      	ldrb	r3, [r1, r3]
 800b340:	f003 031f 	and.w	r3, r3, #31
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b348:	4618      	mov	r0, r3
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	58024400 	.word	0x58024400
 800b350:	0801a388 	.word	0x0801a388

0800b354 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b354:	b480      	push	{r7}
 800b356:	b089      	sub	sp, #36	; 0x24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b35c:	4ba1      	ldr	r3, [pc, #644]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b366:	4b9f      	ldr	r3, [pc, #636]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	0b1b      	lsrs	r3, r3, #12
 800b36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b370:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b372:	4b9c      	ldr	r3, [pc, #624]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	091b      	lsrs	r3, r3, #4
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b37e:	4b99      	ldr	r3, [pc, #612]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b382:	08db      	lsrs	r3, r3, #3
 800b384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	fb02 f303 	mul.w	r3, r2, r3
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b396:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8111 	beq.w	800b5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	f000 8083 	beq.w	800b4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	f200 80a1 	bhi.w	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d056      	beq.n	800b46c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b3be:	e099      	b.n	800b4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3c0:	4b88      	ldr	r3, [pc, #544]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0320 	and.w	r3, r3, #32
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d02d      	beq.n	800b428 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3cc:	4b85      	ldr	r3, [pc, #532]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	08db      	lsrs	r3, r3, #3
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	4a84      	ldr	r2, [pc, #528]	; (800b5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f6:	4b7b      	ldr	r3, [pc, #492]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b406:	ed97 6a03 	vldr	s12, [r7, #12]
 800b40a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b422:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b426:	e087      	b.n	800b538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b432:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43a:	4b6a      	ldr	r3, [pc, #424]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b44e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b46a:	e065      	b.n	800b538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	ee07 3a90 	vmov	s15, r3
 800b472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b476:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47e:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b492:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ae:	e043      	b.n	800b538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b5f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c2:	4b48      	ldr	r3, [pc, #288]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4f2:	e021      	b.n	800b538 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b506:	4b37      	ldr	r3, [pc, #220]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b516:	ed97 6a03 	vldr	s12, [r7, #12]
 800b51a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b536:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b538:	4b2a      	ldr	r3, [pc, #168]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	0a5b      	lsrs	r3, r3, #9
 800b53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b54e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b552:	edd7 6a07 	vldr	s13, [r7, #28]
 800b556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b55e:	ee17 2a90 	vmov	r2, s15
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b566:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b570:	ee07 3a90 	vmov	s15, r3
 800b574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b57c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b580:	edd7 6a07 	vldr	s13, [r7, #28]
 800b584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58c:	ee17 2a90 	vmov	r2, s15
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b594:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b598:	0e1b      	lsrs	r3, r3, #24
 800b59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ba:	ee17 2a90 	vmov	r2, s15
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b5c2:	e008      	b.n	800b5d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	609a      	str	r2, [r3, #8]
}
 800b5d6:	bf00      	nop
 800b5d8:	3724      	adds	r7, #36	; 0x24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	58024400 	.word	0x58024400
 800b5e8:	03d09000 	.word	0x03d09000
 800b5ec:	46000000 	.word	0x46000000
 800b5f0:	4c742400 	.word	0x4c742400
 800b5f4:	4a742400 	.word	0x4a742400
 800b5f8:	4c3ebc20 	.word	0x4c3ebc20

0800b5fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b089      	sub	sp, #36	; 0x24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b604:	4ba1      	ldr	r3, [pc, #644]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b608:	f003 0303 	and.w	r3, r3, #3
 800b60c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b60e:	4b9f      	ldr	r3, [pc, #636]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b612:	0d1b      	lsrs	r3, r3, #20
 800b614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b618:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b61a:	4b9c      	ldr	r3, [pc, #624]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	0a1b      	lsrs	r3, r3, #8
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b626:	4b99      	ldr	r3, [pc, #612]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62a:	08db      	lsrs	r3, r3, #3
 800b62c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	fb02 f303 	mul.w	r3, r2, r3
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 8111 	beq.w	800b86c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	f000 8083 	beq.w	800b758 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b02      	cmp	r3, #2
 800b656:	f200 80a1 	bhi.w	800b79c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d056      	beq.n	800b714 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b666:	e099      	b.n	800b79c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b668:	4b88      	ldr	r3, [pc, #544]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0320 	and.w	r3, r3, #32
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02d      	beq.n	800b6d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b674:	4b85      	ldr	r3, [pc, #532]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	08db      	lsrs	r3, r3, #3
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	4a84      	ldr	r2, [pc, #528]	; (800b890 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b680:	fa22 f303 	lsr.w	r3, r2, r3
 800b684:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	ee07 3a90 	vmov	s15, r3
 800b68c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b69e:	4b7b      	ldr	r3, [pc, #492]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6ce:	e087      	b.n	800b7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	ee07 3a90 	vmov	s15, r3
 800b6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b898 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e2:	4b6a      	ldr	r3, [pc, #424]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b70e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b712:	e065      	b.n	800b7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b89c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b726:	4b59      	ldr	r3, [pc, #356]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b736:	ed97 6a03 	vldr	s12, [r7, #12]
 800b73a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b756:	e043      	b.n	800b7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b762:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b76a:	4b48      	ldr	r3, [pc, #288]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b77a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b77e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b78a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b79a:	e021      	b.n	800b7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b89c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ae:	4b37      	ldr	r3, [pc, #220]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b7e0:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e4:	0a5b      	lsrs	r3, r3, #9
 800b7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ea:	ee07 3a90 	vmov	s15, r3
 800b7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b806:	ee17 2a90 	vmov	r2, s15
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b80e:	4b1f      	ldr	r3, [pc, #124]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b824:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b828:	edd7 6a07 	vldr	s13, [r7, #28]
 800b82c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b834:	ee17 2a90 	vmov	r2, s15
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b83c:	4b13      	ldr	r3, [pc, #76]	; (800b88c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b840:	0e1b      	lsrs	r3, r3, #24
 800b842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b852:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b856:	edd7 6a07 	vldr	s13, [r7, #28]
 800b85a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b85e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b862:	ee17 2a90 	vmov	r2, s15
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b86a:	e008      	b.n	800b87e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	609a      	str	r2, [r3, #8]
}
 800b87e:	bf00      	nop
 800b880:	3724      	adds	r7, #36	; 0x24
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	58024400 	.word	0x58024400
 800b890:	03d09000 	.word	0x03d09000
 800b894:	46000000 	.word	0x46000000
 800b898:	4c742400 	.word	0x4c742400
 800b89c:	4a742400 	.word	0x4a742400
 800b8a0:	4c3ebc20 	.word	0x4c3ebc20

0800b8a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	; 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8ac:	4ba0      	ldr	r3, [pc, #640]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b0:	f003 0303 	and.w	r3, r3, #3
 800b8b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b8b6:	4b9e      	ldr	r3, [pc, #632]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ba:	091b      	lsrs	r3, r3, #4
 800b8bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b8c2:	4b9b      	ldr	r3, [pc, #620]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8cc:	4b98      	ldr	r3, [pc, #608]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d0:	08db      	lsrs	r3, r3, #3
 800b8d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	ee07 3a90 	vmov	s15, r3
 800b8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8111 	beq.w	800bb12 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	f000 8083 	beq.w	800b9fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	f200 80a1 	bhi.w	800ba42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d056      	beq.n	800b9ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b90c:	e099      	b.n	800ba42 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b90e:	4b88      	ldr	r3, [pc, #544]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b00      	cmp	r3, #0
 800b918:	d02d      	beq.n	800b976 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b91a:	4b85      	ldr	r3, [pc, #532]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	08db      	lsrs	r3, r3, #3
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	4a83      	ldr	r2, [pc, #524]	; (800bb34 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b926:	fa22 f303 	lsr.w	r3, r2, r3
 800b92a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b944:	4b7a      	ldr	r3, [pc, #488]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b94c:	ee07 3a90 	vmov	s15, r3
 800b950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b954:	ed97 6a03 	vldr	s12, [r7, #12]
 800b958:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b95c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b96c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b970:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b974:	e087      	b.n	800ba86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	ee07 3a90 	vmov	s15, r3
 800b97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b980:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b988:	4b69      	ldr	r3, [pc, #420]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b990:	ee07 3a90 	vmov	s15, r3
 800b994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b998:	ed97 6a03 	vldr	s12, [r7, #12]
 800b99c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9b8:	e065      	b.n	800ba86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb40 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b9c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9cc:	4b58      	ldr	r3, [pc, #352]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d4:	ee07 3a90 	vmov	s15, r3
 800b9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9fc:	e043      	b.n	800ba86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba08:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ba0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba10:	4b47      	ldr	r3, [pc, #284]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba20:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba24:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba40:	e021      	b.n	800ba86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb3c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba54:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba64:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba68:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba84:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ba86:	4b2a      	ldr	r3, [pc, #168]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8a:	0a5b      	lsrs	r3, r3, #9
 800ba8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baac:	ee17 2a90 	vmov	r2, s15
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bab4:	4b1e      	ldr	r3, [pc, #120]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	0c1b      	lsrs	r3, r3, #16
 800baba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bace:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bada:	ee17 2a90 	vmov	r2, s15
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bae2:	4b13      	ldr	r3, [pc, #76]	; (800bb30 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae6:	0e1b      	lsrs	r3, r3, #24
 800bae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baec:	ee07 3a90 	vmov	s15, r3
 800baf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bafc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb08:	ee17 2a90 	vmov	r2, s15
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bb10:	e008      	b.n	800bb24 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	609a      	str	r2, [r3, #8]
}
 800bb24:	bf00      	nop
 800bb26:	3724      	adds	r7, #36	; 0x24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	58024400 	.word	0x58024400
 800bb34:	03d09000 	.word	0x03d09000
 800bb38:	46000000 	.word	0x46000000
 800bb3c:	4c742400 	.word	0x4c742400
 800bb40:	4a742400 	.word	0x4a742400
 800bb44:	4c3ebc20 	.word	0x4c3ebc20

0800bb48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb56:	4b53      	ldr	r3, [pc, #332]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5a:	f003 0303 	and.w	r3, r3, #3
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d101      	bne.n	800bb66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e099      	b.n	800bc9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb66:	4b4f      	ldr	r3, [pc, #316]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a4e      	ldr	r2, [pc, #312]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bb6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb72:	f7f7 fa8f 	bl	8003094 <HAL_GetTick>
 800bb76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb78:	e008      	b.n	800bb8c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb7a:	f7f7 fa8b 	bl	8003094 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e086      	b.n	800bc9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb8c:	4b45      	ldr	r3, [pc, #276]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb98:	4b42      	ldr	r3, [pc, #264]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	031b      	lsls	r3, r3, #12
 800bba6:	493f      	ldr	r1, [pc, #252]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	628b      	str	r3, [r1, #40]	; 0x28
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	025b      	lsls	r3, r3, #9
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	061b      	lsls	r3, r3, #24
 800bbd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bbdc:	4931      	ldr	r1, [pc, #196]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbe2:	4b30      	ldr	r3, [pc, #192]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	492d      	ldr	r1, [pc, #180]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbf4:	4b2b      	ldr	r3, [pc, #172]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	f023 0220 	bic.w	r2, r3, #32
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	4928      	ldr	r1, [pc, #160]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc06:	4b27      	ldr	r3, [pc, #156]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	4a26      	ldr	r2, [pc, #152]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc0c:	f023 0310 	bic.w	r3, r3, #16
 800bc10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc12:	4b24      	ldr	r3, [pc, #144]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc16:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <RCCEx_PLL2_Config+0x160>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	69d2      	ldr	r2, [r2, #28]
 800bc1e:	00d2      	lsls	r2, r2, #3
 800bc20:	4920      	ldr	r1, [pc, #128]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc26:	4b1f      	ldr	r3, [pc, #124]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	4a1e      	ldr	r2, [pc, #120]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc2c:	f043 0310 	orr.w	r3, r3, #16
 800bc30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc38:	4b1a      	ldr	r3, [pc, #104]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc44:	e00f      	b.n	800bc66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d106      	bne.n	800bc5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc4c:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4a14      	ldr	r2, [pc, #80]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc58:	e005      	b.n	800bc66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	4a11      	ldr	r2, [pc, #68]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a0e      	ldr	r2, [pc, #56]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc72:	f7f7 fa0f 	bl	8003094 <HAL_GetTick>
 800bc76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc78:	e008      	b.n	800bc8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc7a:	f7f7 fa0b 	bl	8003094 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d901      	bls.n	800bc8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e006      	b.n	800bc9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc8c:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <RCCEx_PLL2_Config+0x15c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0f0      	beq.n	800bc7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	58024400 	.word	0x58024400
 800bca8:	ffff0007 	.word	0xffff0007

0800bcac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcba:	4b53      	ldr	r3, [pc, #332]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d101      	bne.n	800bcca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e099      	b.n	800bdfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcca:	4b4f      	ldr	r3, [pc, #316]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a4e      	ldr	r2, [pc, #312]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bcd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcd6:	f7f7 f9dd 	bl	8003094 <HAL_GetTick>
 800bcda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcdc:	e008      	b.n	800bcf0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bcde:	f7f7 f9d9 	bl	8003094 <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d901      	bls.n	800bcf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e086      	b.n	800bdfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcf0:	4b45      	ldr	r3, [pc, #276]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1f0      	bne.n	800bcde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bcfc:	4b42      	ldr	r3, [pc, #264]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	051b      	lsls	r3, r3, #20
 800bd0a:	493f      	ldr	r1, [pc, #252]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	628b      	str	r3, [r1, #40]	; 0x28
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	025b      	lsls	r3, r3, #9
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	431a      	orrs	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	041b      	lsls	r3, r3, #16
 800bd2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd32:	431a      	orrs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	061b      	lsls	r3, r3, #24
 800bd3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd40:	4931      	ldr	r1, [pc, #196]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd46:	4b30      	ldr	r3, [pc, #192]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	492d      	ldr	r1, [pc, #180]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd54:	4313      	orrs	r3, r2
 800bd56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd58:	4b2b      	ldr	r3, [pc, #172]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	4928      	ldr	r1, [pc, #160]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd66:	4313      	orrs	r3, r2
 800bd68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd6a:	4b27      	ldr	r3, [pc, #156]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd6e:	4a26      	ldr	r2, [pc, #152]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd76:	4b24      	ldr	r3, [pc, #144]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd7a:	4b24      	ldr	r3, [pc, #144]	; (800be0c <RCCEx_PLL3_Config+0x160>)
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	69d2      	ldr	r2, [r2, #28]
 800bd82:	00d2      	lsls	r2, r2, #3
 800bd84:	4920      	ldr	r1, [pc, #128]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd8a:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	4a1e      	ldr	r2, [pc, #120]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d106      	bne.n	800bdaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd9c:	4b1a      	ldr	r3, [pc, #104]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	4a19      	ldr	r2, [pc, #100]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bda2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bda6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bda8:	e00f      	b.n	800bdca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d106      	bne.n	800bdbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bdb0:	4b15      	ldr	r3, [pc, #84]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	4a14      	ldr	r2, [pc, #80]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bdba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdbc:	e005      	b.n	800bdca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bdbe:	4b12      	ldr	r3, [pc, #72]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc2:	4a11      	ldr	r2, [pc, #68]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdca:	4b0f      	ldr	r3, [pc, #60]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a0e      	ldr	r2, [pc, #56]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdd6:	f7f7 f95d 	bl	8003094 <HAL_GetTick>
 800bdda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bddc:	e008      	b.n	800bdf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bdde:	f7f7 f959 	bl	8003094 <HAL_GetTick>
 800bde2:	4602      	mov	r2, r0
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d901      	bls.n	800bdf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e006      	b.n	800bdfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <RCCEx_PLL3_Config+0x15c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0f0      	beq.n	800bdde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	58024400 	.word	0x58024400
 800be0c:	ffff0007 	.word	0xffff0007

0800be10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08a      	sub	sp, #40	; 0x28
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e075      	b.n	800bf0e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d105      	bne.n	800be3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7f6 f9dd 	bl	80021f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2204      	movs	r2, #4
 800be3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f868 	bl	800bf18 <HAL_SD_InitCard>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e05d      	b.n	800bf0e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fdaf 	bl	800c9bc <HAL_SD_GetCardStatus>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be64:	2301      	movs	r3, #1
 800be66:	e052      	b.n	800bf0e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be68:	7e3b      	ldrb	r3, [r7, #24]
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be6e:	7e7b      	ldrb	r3, [r7, #25]
 800be70:	b2db      	uxtb	r3, r3
 800be72:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d10a      	bne.n	800be92 <HAL_SD_Init+0x82>
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d102      	bne.n	800be88 <HAL_SD_Init+0x78>
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d004      	beq.n	800be92 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be8e:	659a      	str	r2, [r3, #88]	; 0x58
 800be90:	e00b      	b.n	800beaa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be96:	2b01      	cmp	r3, #1
 800be98:	d104      	bne.n	800bea4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bea0:	659a      	str	r2, [r3, #88]	; 0x58
 800bea2:	e002      	b.n	800beaa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	4619      	mov	r1, r3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fe6d 	bl	800cb90 <HAL_SD_ConfigWideBusOperation>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e026      	b.n	800bf0e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800bec0:	f7f7 f8e8 	bl	8003094 <HAL_GetTick>
 800bec4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bec6:	e011      	b.n	800beec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bec8:	f7f7 f8e4 	bl	8003094 <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed6:	d109      	bne.n	800beec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bede:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e010      	b.n	800bf0e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 ff61 	bl	800cdb4 <HAL_SD_GetCardState>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d1e7      	bne.n	800bec8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3728      	adds	r7, #40	; 0x28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf18:	b590      	push	{r4, r7, lr}
 800bf1a:	b08d      	sub	sp, #52	; 0x34
 800bf1c:	af02      	add	r7, sp, #8
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bf30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf34:	f04f 0100 	mov.w	r1, #0
 800bf38:	f7fe fd24 	bl	800a984 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf3c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d109      	bne.n	800bf58 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2201      	movs	r2, #1
 800bf48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bf52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e070      	b.n	800c03a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	4a39      	ldr	r2, [pc, #228]	; (800c044 <HAL_SD_InitCard+0x12c>)
 800bf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf62:	091b      	lsrs	r3, r3, #4
 800bf64:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681c      	ldr	r4, [r3, #0]
 800bf6a:	466a      	mov	r2, sp
 800bf6c:	f107 0318 	add.w	r3, r7, #24
 800bf70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf74:	e882 0003 	stmia.w	r2, {r0, r1}
 800bf78:	f107 030c 	add.w	r3, r7, #12
 800bf7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f004 fa66 	bl	8010450 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f004 faa9 	bl	80104e0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d005      	beq.n	800bfa0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d007      	beq.n	800bfb6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bfa6:	4a28      	ldr	r2, [pc, #160]	; (800c048 <HAL_SD_InitCard+0x130>)
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfae:	3301      	adds	r3, #1
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f7 f87b 	bl	80030ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 ffea 	bl	800cf90 <SD_PowerON>
 800bfbc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00b      	beq.n	800bfdc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e02e      	b.n	800c03a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 ff09 	bl	800cdf4 <SD_InitCard>
 800bfe2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00b      	beq.n	800c002 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	431a      	orrs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	e01b      	b.n	800c03a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c00a:	4618      	mov	r0, r3
 800c00c:	f004 fafe 	bl	801060c <SDMMC_CmdBlockLength>
 800c010:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00f      	beq.n	800c038 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a0b      	ldr	r2, [pc, #44]	; (800c04c <HAL_SD_InitCard+0x134>)
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c024:	6a3b      	ldr	r3, [r7, #32]
 800c026:	431a      	orrs	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e000      	b.n	800c03a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	372c      	adds	r7, #44	; 0x2c
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd90      	pop	{r4, r7, pc}
 800c042:	bf00      	nop
 800c044:	014f8b59 	.word	0x014f8b59
 800c048:	00012110 	.word	0x00012110
 800c04c:	1fe00fff 	.word	0x1fe00fff

0800c050 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08c      	sub	sp, #48	; 0x30
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d107      	bne.n	800c078 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e08d      	b.n	800c194 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b01      	cmp	r3, #1
 800c082:	f040 8086 	bne.w	800c192 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c096:	429a      	cmp	r2, r3
 800c098:	d907      	bls.n	800c0aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c09e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e074      	b.n	800c194 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	025a      	lsls	r2, r3, #9
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d002      	beq.n	800c0d6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d2:	025b      	lsls	r3, r3, #9
 800c0d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0da:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	025b      	lsls	r3, r3, #9
 800c0e0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0e2:	2390      	movs	r3, #144	; 0x90
 800c0e4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f107 0210 	add.w	r2, r7, #16
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f004 fa59 	bl	80105b4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c110:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2201      	movs	r2, #1
 800c120:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d90a      	bls.n	800c13e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2282      	movs	r2, #130	; 0x82
 800c12c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c134:	4618      	mov	r0, r3
 800c136:	f004 faaf 	bl	8010698 <SDMMC_CmdReadMultiBlock>
 800c13a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c13c:	e009      	b.n	800c152 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2281      	movs	r2, #129	; 0x81
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c14a:	4618      	mov	r0, r3
 800c14c:	f004 fa81 	bl	8010652 <SDMMC_CmdReadSingleBlock>
 800c150:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d012      	beq.n	800c17e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a0f      	ldr	r2, [pc, #60]	; (800c19c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	431a      	orrs	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e00a      	b.n	800c194 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c18c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	e000      	b.n	800c194 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c192:	2302      	movs	r3, #2
  }
}
 800c194:	4618      	mov	r0, r3
 800c196:	3730      	adds	r7, #48	; 0x30
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	1fe00fff 	.word	0x1fe00fff

0800c1a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08c      	sub	sp, #48	; 0x30
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d107      	bne.n	800c1c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e08d      	b.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	f040 8086 	bne.w	800c2e2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d907      	bls.n	800c1fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e074      	b.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	025a      	lsls	r2, r3, #9
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d002      	beq.n	800c226 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	025b      	lsls	r3, r3, #9
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c226:	f04f 33ff 	mov.w	r3, #4294967295
 800c22a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	025b      	lsls	r3, r3, #9
 800c230:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c232:	2390      	movs	r3, #144	; 0x90
 800c234:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c236:	2300      	movs	r3, #0
 800c238:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c23e:	2300      	movs	r3, #0
 800c240:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f107 0210 	add.w	r2, r7, #16
 800c24a:	4611      	mov	r1, r2
 800c24c:	4618      	mov	r0, r3
 800c24e:	f004 f9b1 	bl	80105b4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c260:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2201      	movs	r2, #1
 800c270:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d90a      	bls.n	800c28e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	22a0      	movs	r2, #160	; 0xa0
 800c27c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c284:	4618      	mov	r0, r3
 800c286:	f004 fa4d 	bl	8010724 <SDMMC_CmdWriteMultiBlock>
 800c28a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c28c:	e009      	b.n	800c2a2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2290      	movs	r2, #144	; 0x90
 800c292:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c29a:	4618      	mov	r0, r3
 800c29c:	f004 fa1f 	bl	80106de <SDMMC_CmdWriteSingleBlock>
 800c2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d012      	beq.n	800c2ce <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a0f      	ldr	r2, [pc, #60]	; (800c2ec <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c2ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e00a      	b.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c2dc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e000      	b.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c2e2:	2302      	movs	r3, #2
  }
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3730      	adds	r7, #48	; 0x30
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	1fe00fff 	.word	0x1fe00fff

0800c2f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <HAL_SD_IRQHandler+0x2e>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f003 0308 	and.w	r3, r3, #8
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 f926 	bl	800d568 <SD_Read_IT>
 800c31c:	e19a      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80ac 	beq.w	800c486 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c336:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b59      	ldr	r3, [pc, #356]	; (800c4a8 <HAL_SD_IRQHandler+0x1b8>)
 800c344:	400b      	ands	r3, r1
 800c346:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c356:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68da      	ldr	r2, [r3, #12]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c366:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d038      	beq.n	800c3e4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d104      	bne.n	800c386 <HAL_SD_IRQHandler+0x96>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f003 0320 	and.w	r3, r3, #32
 800c382:	2b00      	cmp	r3, #0
 800c384:	d011      	beq.n	800c3aa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f004 f9ee 	bl	801076c <SDMMC_CmdStopTransfer>
 800c390:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d008      	beq.n	800c3aa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 f95b 	bl	800c660 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a3f      	ldr	r2, [pc, #252]	; (800c4ac <HAL_SD_IRQHandler+0x1bc>)
 800c3b0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d104      	bne.n	800c3d4 <HAL_SD_IRQHandler+0xe4>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d003      	beq.n	800c3dc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f006 f9ef 	bl	80127b8 <HAL_SD_RxCpltCallback>
 800c3da:	e13b      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f006 f9e1 	bl	80127a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c3e2:	e137      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8132 	beq.w	800c654 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2200      	movs	r2, #0
 800c406:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d104      	bne.n	800c41c <HAL_SD_IRQHandler+0x12c>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f003 0320 	and.w	r3, r3, #32
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d011      	beq.n	800c440 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4618      	mov	r0, r3
 800c422:	f004 f9a3 	bl	801076c <SDMMC_CmdStopTransfer>
 800c426:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d008      	beq.n	800c440 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	431a      	orrs	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f910 	bl	800c660 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f003 0310 	and.w	r3, r3, #16
 800c454:	2b00      	cmp	r3, #0
 800c456:	d104      	bne.n	800c462 <HAL_SD_IRQHandler+0x172>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f003 0320 	and.w	r3, r3, #32
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f006 f99e 	bl	80127a4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <HAL_SD_IRQHandler+0x18e>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 80eb 	beq.w	800c654 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f006 f99a 	bl	80127b8 <HAL_SD_RxCpltCallback>
}
 800c484:	e0e6      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00d      	beq.n	800c4b0 <HAL_SD_IRQHandler+0x1c0>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f003 0308 	and.w	r3, r3, #8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d008      	beq.n	800c4b0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f001 f8a8 	bl	800d5f4 <SD_Write_IT>
 800c4a4:	e0d6      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
 800c4a6:	bf00      	nop
 800c4a8:	ffff3ec5 	.word	0xffff3ec5
 800c4ac:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f000 809d 	beq.w	800c5fa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d2:	f043 0202 	orr.w	r2, r3, #2
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e0:	f003 0308 	and.w	r3, r3, #8
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ec:	f043 0208 	orr.w	r2, r3, #8
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c506:	f043 0220 	orr.w	r2, r3, #32
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c514:	f003 0310 	and.w	r3, r3, #16
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d005      	beq.n	800c528 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	f043 0210 	orr.w	r2, r3, #16
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a4b      	ldr	r2, [pc, #300]	; (800c65c <HAL_SD_IRQHandler+0x36c>)
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c53e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c54e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c55e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c56e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4618      	mov	r0, r3
 800c576:	f004 f8f9 	bl	801076c <SDMMC_CmdStopTransfer>
 800c57a:	4602      	mov	r2, r0
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c580:	431a      	orrs	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68da      	ldr	r2, [r3, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c594:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c59e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f003 0308 	and.w	r3, r3, #8
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f851 	bl	800c660 <HAL_SD_ErrorCallback>
}
 800c5be:	e049      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d044      	beq.n	800c654 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d040      	beq.n	800c654 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c5e0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f834 	bl	800c660 <HAL_SD_ErrorCallback>
}
 800c5f8:	e02c      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d025      	beq.n	800c654 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c610:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10c      	bne.n	800c63a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f003 0320 	and.w	r3, r3, #32
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 f84a 	bl	800d6c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c630:	e010      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 f832 	bl	800d69c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c638:	e00c      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f003 0320 	and.w	r3, r3, #32
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f001 f833 	bl	800d6b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c64a:	e003      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 f81b 	bl	800d688 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c652:	e7ff      	b.n	800c654 <HAL_SD_IRQHandler+0x364>
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	18000f3a 	.word	0x18000f3a

0800c660 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c682:	0f9b      	lsrs	r3, r3, #30
 800c684:	b2da      	uxtb	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c68e:	0e9b      	lsrs	r3, r3, #26
 800c690:	b2db      	uxtb	r3, r3
 800c692:	f003 030f 	and.w	r3, r3, #15
 800c696:	b2da      	uxtb	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6a0:	0e1b      	lsrs	r3, r3, #24
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 0303 	and.w	r3, r3, #3
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b2:	0c1b      	lsrs	r3, r3, #16
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6d4:	0d1b      	lsrs	r3, r3, #20
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6e0:	0c1b      	lsrs	r3, r3, #16
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f003 030f 	and.w	r3, r3, #15
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6f2:	0bdb      	lsrs	r3, r3, #15
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c704:	0b9b      	lsrs	r3, r3, #14
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c716:	0b5b      	lsrs	r3, r3, #13
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c728:	0b1b      	lsrs	r3, r3, #12
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	b2da      	uxtb	r2, r3
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2200      	movs	r2, #0
 800c73a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c740:	2b00      	cmp	r3, #0
 800c742:	d163      	bne.n	800c80c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c748:	009a      	lsls	r2, r3, #2
 800c74a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c74e:	4013      	ands	r3, r2
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c754:	0f92      	lsrs	r2, r2, #30
 800c756:	431a      	orrs	r2, r3
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c760:	0edb      	lsrs	r3, r3, #27
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0307 	and.w	r3, r3, #7
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c772:	0e1b      	lsrs	r3, r3, #24
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f003 0307 	and.w	r3, r3, #7
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c784:	0d5b      	lsrs	r3, r3, #21
 800c786:	b2db      	uxtb	r3, r3
 800c788:	f003 0307 	and.w	r3, r3, #7
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c796:	0c9b      	lsrs	r3, r3, #18
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7a8:	0bdb      	lsrs	r3, r3, #15
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	f003 0307 	and.w	r3, r3, #7
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	7e1b      	ldrb	r3, [r3, #24]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	3302      	adds	r3, #2
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c7d6:	fb03 f202 	mul.w	r2, r3, r2
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	7a1b      	ldrb	r3, [r3, #8]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 030f 	and.w	r3, r3, #15
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	409a      	lsls	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c7f8:	0a52      	lsrs	r2, r2, #9
 800c7fa:	fb03 f202 	mul.w	r2, r3, r2
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c808:	655a      	str	r2, [r3, #84]	; 0x54
 800c80a:	e031      	b.n	800c870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	2b01      	cmp	r3, #1
 800c812:	d11d      	bne.n	800c850 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c818:	041b      	lsls	r3, r3, #16
 800c81a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c822:	0c1b      	lsrs	r3, r3, #16
 800c824:	431a      	orrs	r2, r3
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	3301      	adds	r3, #1
 800c830:	029a      	lsls	r2, r3, #10
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c844:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	655a      	str	r2, [r3, #84]	; 0x54
 800c84e:	e00f      	b.n	800c870 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a58      	ldr	r2, [pc, #352]	; (800c9b8 <HAL_SD_GetCardCSD+0x344>)
 800c856:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c85c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e09d      	b.n	800c9ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c874:	0b9b      	lsrs	r3, r3, #14
 800c876:	b2db      	uxtb	r3, r3
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c886:	09db      	lsrs	r3, r3, #7
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8a8:	0fdb      	lsrs	r3, r3, #31
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8b4:	0f5b      	lsrs	r3, r3, #29
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f003 0303 	and.w	r3, r3, #3
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8c6:	0e9b      	lsrs	r3, r3, #26
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f003 0307 	and.w	r3, r3, #7
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d8:	0d9b      	lsrs	r3, r3, #22
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	f003 030f 	and.w	r3, r3, #15
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ea:	0d5b      	lsrs	r3, r3, #21
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c906:	0c1b      	lsrs	r3, r3, #16
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c91a:	0bdb      	lsrs	r3, r3, #15
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c92e:	0b9b      	lsrs	r3, r3, #14
 800c930:	b2db      	uxtb	r3, r3
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	b2da      	uxtb	r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c942:	0b5b      	lsrs	r3, r3, #13
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c956:	0b1b      	lsrs	r3, r3, #12
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f003 0301 	and.w	r3, r3, #1
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c96a:	0a9b      	lsrs	r3, r3, #10
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	f003 0303 	and.w	r3, r3, #3
 800c972:	b2da      	uxtb	r2, r3
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c97e:	0a1b      	lsrs	r3, r3, #8
 800c980:	b2db      	uxtb	r3, r3
 800c982:	f003 0303 	and.w	r3, r3, #3
 800c986:	b2da      	uxtb	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c992:	085b      	lsrs	r3, r3, #1
 800c994:	b2db      	uxtb	r3, r3
 800c996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr
 800c9b8:	1fe00fff 	.word	0x1fe00fff

0800c9bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b094      	sub	sp, #80	; 0x50
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	d101      	bne.n	800c9dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e0a7      	b.n	800cb2c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c9dc:	f107 0308 	add.w	r3, r7, #8
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fb62 	bl	800d0ac <SD_SendSDStatus>
 800c9e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d011      	beq.n	800ca14 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a4f      	ldr	r2, [pc, #316]	; (800cb34 <HAL_SD_GetCardStatus+0x178>)
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ca12:	e070      	b.n	800caf6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	099b      	lsrs	r3, r3, #6
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	095b      	lsrs	r3, r3, #5
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	0a1b      	lsrs	r3, r3, #8
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	0e1b      	lsrs	r3, r3, #24
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	061a      	lsls	r2, r3, #24
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	021b      	lsls	r3, r3, #8
 800ca56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca5a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	0a1b      	lsrs	r3, r3, #8
 800ca60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca64:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	0e1b      	lsrs	r3, r3, #24
 800ca6a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	0a1b      	lsrs	r3, r3, #8
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	0d1b      	lsrs	r3, r3, #20
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	f003 030f 	and.w	r3, r3, #15
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	0c1b      	lsrs	r3, r3, #16
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	4313      	orrs	r3, r2
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	0a9b      	lsrs	r3, r3, #10
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	0a1b      	lsrs	r3, r3, #8
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 0303 	and.w	r3, r3, #3
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	091b      	lsrs	r3, r3, #4
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f003 030f 	and.w	r3, r3, #15
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 030f 	and.w	r3, r3, #15
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	0e1b      	lsrs	r3, r3, #24
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cafe:	4618      	mov	r0, r3
 800cb00:	f003 fd84 	bl	801060c <SDMMC_CmdBlockLength>
 800cb04:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00d      	beq.n	800cb28 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a08      	ldr	r2, [pc, #32]	; (800cb34 <HAL_SD_GetCardStatus+0x178>)
 800cb12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb18:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800cb28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3750      	adds	r7, #80	; 0x50
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	1fe00fff 	.word	0x1fe00fff

0800cb38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b08d      	sub	sp, #52	; 0x34
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2203      	movs	r2, #3
 800cba4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d02e      	beq.n	800cc0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbb6:	d106      	bne.n	800cbc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	635a      	str	r2, [r3, #52]	; 0x34
 800cbc4:	e029      	b.n	800cc1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbcc:	d10a      	bne.n	800cbe4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fb64 	bl	800d29c <SD_WideBus_Enable>
 800cbd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	431a      	orrs	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	635a      	str	r2, [r3, #52]	; 0x34
 800cbe2:	e01a      	b.n	800cc1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10a      	bne.n	800cc00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fba1 	bl	800d332 <SD_WideBus_Disable>
 800cbf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	635a      	str	r2, [r3, #52]	; 0x34
 800cbfe:	e00c      	b.n	800cc1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	635a      	str	r2, [r3, #52]	; 0x34
 800cc0c:	e005      	b.n	800cc1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d007      	beq.n	800cc32 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a5f      	ldr	r2, [pc, #380]	; (800cda4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cc28:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc30:	e096      	b.n	800cd60 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cc32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cc36:	f04f 0100 	mov.w	r1, #0
 800cc3a:	f7fd fea3 	bl	800a984 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc3e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 8083 	beq.w	800cd4e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	695a      	ldr	r2, [r3, #20]
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	4950      	ldr	r1, [pc, #320]	; (800cda8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc66:	fba1 1303 	umull	r1, r3, r1, r3
 800cc6a:	0e1b      	lsrs	r3, r3, #24
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d303      	bcc.n	800cc78 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	61bb      	str	r3, [r7, #24]
 800cc76:	e05a      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc80:	d103      	bne.n	800cc8a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	61bb      	str	r3, [r7, #24]
 800cc88:	e051      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc92:	d126      	bne.n	800cce2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	695b      	ldr	r3, [r3, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10e      	bne.n	800ccba <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4a43      	ldr	r2, [pc, #268]	; (800cdac <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d906      	bls.n	800ccb2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	4a40      	ldr	r2, [pc, #256]	; (800cda8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cca8:	fba2 2303 	umull	r2, r3, r2, r3
 800ccac:	0e5b      	lsrs	r3, r3, #25
 800ccae:	61bb      	str	r3, [r7, #24]
 800ccb0:	e03d      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	61bb      	str	r3, [r7, #24]
 800ccb8:	e039      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc6:	4a39      	ldr	r2, [pc, #228]	; (800cdac <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d906      	bls.n	800ccda <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	4a36      	ldr	r2, [pc, #216]	; (800cda8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd4:	0e5b      	lsrs	r3, r3, #25
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e029      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	61bb      	str	r3, [r7, #24]
 800cce0:	e025      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10e      	bne.n	800cd08 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	4a30      	ldr	r2, [pc, #192]	; (800cdb0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d906      	bls.n	800cd00 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4a2c      	ldr	r2, [pc, #176]	; (800cda8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccf6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccfa:	0e1b      	lsrs	r3, r3, #24
 800ccfc:	61bb      	str	r3, [r7, #24]
 800ccfe:	e016      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	61bb      	str	r3, [r7, #24]
 800cd06:	e012      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	695b      	ldr	r3, [r3, #20]
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	69fa      	ldr	r2, [r7, #28]
 800cd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd14:	4a26      	ldr	r2, [pc, #152]	; (800cdb0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d906      	bls.n	800cd28 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	4a22      	ldr	r2, [pc, #136]	; (800cda8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cd1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd22:	0e1b      	lsrs	r3, r3, #24
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	e002      	b.n	800cd2e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681c      	ldr	r4, [r3, #0]
 800cd32:	466a      	mov	r2, sp
 800cd34:	f107 0314 	add.w	r3, r7, #20
 800cd38:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd3c:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd40:	f107 0308 	add.w	r3, r7, #8
 800cd44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd46:	4620      	mov	r0, r4
 800cd48:	f003 fb82 	bl	8010450 <SDMMC_Init>
 800cd4c:	e008      	b.n	800cd60 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f003 fc4f 	bl	801060c <SDMMC_CmdBlockLength>
 800cd6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd70:	6a3b      	ldr	r3, [r7, #32]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00c      	beq.n	800cd90 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a0a      	ldr	r2, [pc, #40]	; (800cda4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd82:	6a3b      	ldr	r3, [r7, #32]
 800cd84:	431a      	orrs	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800cd98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	372c      	adds	r7, #44	; 0x2c
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd90      	pop	{r4, r7, pc}
 800cda4:	1fe00fff 	.word	0x1fe00fff
 800cda8:	55e63b89 	.word	0x55e63b89
 800cdac:	02faf080 	.word	0x02faf080
 800cdb0:	017d7840 	.word	0x017d7840

0800cdb4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cdc0:	f107 030c 	add.w	r3, r7, #12
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fa40 	bl	800d24c <SD_SendStatus>
 800cdcc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d005      	beq.n	800cde0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	431a      	orrs	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	0a5b      	lsrs	r3, r3, #9
 800cde4:	f003 030f 	and.w	r3, r3, #15
 800cde8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdea:	693b      	ldr	r3, [r7, #16]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b090      	sub	sp, #64	; 0x40
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ce00:	f7f6 f948 	bl	8003094 <HAL_GetTick>
 800ce04:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f003 fb79 	bl	8010502 <SDMMC_GetPowerState>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d102      	bne.n	800ce1c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ce1a:	e0b5      	b.n	800cf88 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	d02e      	beq.n	800ce82 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f003 fdc4 	bl	80109b6 <SDMMC_CmdSendCID>
 800ce2e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <SD_InitCard+0x46>
    {
      return errorstate;
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	e0a6      	b.n	800cf88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2100      	movs	r1, #0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f003 fba4 	bl	801058e <SDMMC_GetResponse>
 800ce46:	4602      	mov	r2, r0
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2104      	movs	r1, #4
 800ce52:	4618      	mov	r0, r3
 800ce54:	f003 fb9b 	bl	801058e <SDMMC_GetResponse>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2108      	movs	r1, #8
 800ce64:	4618      	mov	r0, r3
 800ce66:	f003 fb92 	bl	801058e <SDMMC_GetResponse>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	210c      	movs	r1, #12
 800ce76:	4618      	mov	r0, r3
 800ce78:	f003 fb89 	bl	801058e <SDMMC_GetResponse>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d01d      	beq.n	800cec6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ce8a:	e019      	b.n	800cec0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f107 020a 	add.w	r2, r7, #10
 800ce94:	4611      	mov	r1, r2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f003 fdcc 	bl	8010a34 <SDMMC_CmdSetRelAdd>
 800ce9c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	e06f      	b.n	800cf88 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800cea8:	f7f6 f8f4 	bl	8003094 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	f241 3287 	movw	r2, #4999	; 0x1387
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d902      	bls.n	800cec0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ceba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cebe:	e063      	b.n	800cf88 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800cec0:	897b      	ldrh	r3, [r7, #10]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0e2      	beq.n	800ce8c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceca:	2b03      	cmp	r3, #3
 800cecc:	d036      	beq.n	800cf3c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cece:	897b      	ldrh	r3, [r7, #10]
 800ced0:	461a      	mov	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cede:	041b      	lsls	r3, r3, #16
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f003 fd86 	bl	80109f4 <SDMMC_CmdSendCSD>
 800cee8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <SD_InitCard+0x100>
    {
      return errorstate;
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	e049      	b.n	800cf88 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2100      	movs	r1, #0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f003 fb47 	bl	801058e <SDMMC_GetResponse>
 800cf00:	4602      	mov	r2, r0
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2104      	movs	r1, #4
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f003 fb3e 	bl	801058e <SDMMC_GetResponse>
 800cf12:	4602      	mov	r2, r0
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2108      	movs	r1, #8
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f003 fb35 	bl	801058e <SDMMC_GetResponse>
 800cf24:	4602      	mov	r2, r0
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	210c      	movs	r1, #12
 800cf30:	4618      	mov	r0, r3
 800cf32:	f003 fb2c 	bl	801058e <SDMMC_GetResponse>
 800cf36:	4602      	mov	r2, r0
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2104      	movs	r1, #4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f003 fb23 	bl	801058e <SDMMC_GetResponse>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	0d1a      	lsrs	r2, r3, #20
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf50:	f107 030c 	add.w	r3, r7, #12
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff fb8c 	bl	800c674 <HAL_SD_GetCardCSD>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf66:	e00f      	b.n	800cf88 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf70:	041b      	lsls	r3, r3, #16
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f003 fc35 	bl	80107e4 <SDMMC_CmdSelDesel>
 800cf7a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <SD_InitCard+0x192>
  {
    return errorstate;
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	e000      	b.n	800cf88 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3740      	adds	r7, #64	; 0x40
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f003 fc3e 	bl	801082a <SDMMC_CmdGoIdleState>
 800cfae:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <SD_PowerON+0x2a>
  {
    return errorstate;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	e072      	b.n	800d0a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f003 fc51 	bl	8010866 <SDMMC_CmdOperCond>
 800cfc4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfcc:	d10d      	bne.n	800cfea <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f003 fc26 	bl	801082a <SDMMC_CmdGoIdleState>
 800cfde:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d004      	beq.n	800cff0 <SD_PowerON+0x60>
    {
      return errorstate;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	e05a      	b.n	800d0a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d137      	bne.n	800d068 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2100      	movs	r1, #0
 800cffe:	4618      	mov	r0, r3
 800d000:	f003 fc51 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d004:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d02d      	beq.n	800d068 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d00c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d010:	e046      	b.n	800d0a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2100      	movs	r1, #0
 800d018:	4618      	mov	r0, r3
 800d01a:	f003 fc44 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d01e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <SD_PowerON+0x9a>
    {
      return errorstate;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	e03a      	b.n	800d0a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	491e      	ldr	r1, [pc, #120]	; (800d0a8 <SD_PowerON+0x118>)
 800d030:	4618      	mov	r0, r3
 800d032:	f003 fc5b 	bl	80108ec <SDMMC_CmdAppOperCommand>
 800d036:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d03e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d042:	e02d      	b.n	800d0a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2100      	movs	r1, #0
 800d04a:	4618      	mov	r0, r3
 800d04c:	f003 fa9f 	bl	801058e <SDMMC_GetResponse>
 800d050:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	0fdb      	lsrs	r3, r3, #31
 800d056:	2b01      	cmp	r3, #1
 800d058:	d101      	bne.n	800d05e <SD_PowerON+0xce>
 800d05a:	2301      	movs	r3, #1
 800d05c:	e000      	b.n	800d060 <SD_PowerON+0xd0>
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]

    count++;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	3301      	adds	r3, #1
 800d066:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d06e:	4293      	cmp	r3, r2
 800d070:	d802      	bhi.n	800d078 <SD_PowerON+0xe8>
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0cc      	beq.n	800d012 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d07e:	4293      	cmp	r3, r2
 800d080:	d902      	bls.n	800d088 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d086:	e00b      	b.n	800d0a0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	c1100000 	.word	0xc1100000

0800d0ac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08c      	sub	sp, #48	; 0x30
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d0b6:	f7f5 ffed 	bl	8003094 <HAL_GetTick>
 800d0ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f003 fa61 	bl	801058e <SDMMC_GetResponse>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0d6:	d102      	bne.n	800d0de <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0dc:	e0b0      	b.n	800d240 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2140      	movs	r1, #64	; 0x40
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f003 fa91 	bl	801060c <SDMMC_CmdBlockLength>
 800d0ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d005      	beq.n	800d0fe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	e0a0      	b.n	800d240 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d106:	041b      	lsls	r3, r3, #16
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f003 fbcb 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d110:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	e08d      	b.n	800d240 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d124:	f04f 33ff 	mov.w	r3, #4294967295
 800d128:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d12a:	2340      	movs	r3, #64	; 0x40
 800d12c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d12e:	2360      	movs	r3, #96	; 0x60
 800d130:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d132:	2302      	movs	r3, #2
 800d134:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d136:	2300      	movs	r3, #0
 800d138:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f107 0208 	add.w	r2, r7, #8
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f003 fa33 	bl	80105b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4618      	mov	r0, r3
 800d154:	f003 fcb3 	bl	8010abe <SDMMC_CmdStatusRegister>
 800d158:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d02b      	beq.n	800d1b8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	e069      	b.n	800d240 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d013      	beq.n	800d1a2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d17a:	2300      	movs	r3, #0
 800d17c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d17e:	e00d      	b.n	800d19c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f003 f98d 	bl	80104a4 <SDMMC_ReadFIFO>
 800d18a:	4602      	mov	r2, r0
 800d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18e:	601a      	str	r2, [r3, #0]
        pData++;
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	3304      	adds	r3, #4
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	3301      	adds	r3, #1
 800d19a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	2b07      	cmp	r3, #7
 800d1a0:	d9ee      	bls.n	800d180 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1a2:	f7f5 ff77 	bl	8003094 <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b0:	d102      	bne.n	800d1b8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1b6:	e043      	b.n	800d240 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0d2      	beq.n	800d16c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1cc:	f003 0308 	and.w	r3, r3, #8
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d1d4:	2308      	movs	r3, #8
 800d1d6:	e033      	b.n	800d240 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	e02a      	b.n	800d240 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f0:	f003 0320 	and.w	r3, r3, #32
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d017      	beq.n	800d228 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d1f8:	2320      	movs	r3, #32
 800d1fa:	e021      	b.n	800d240 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4618      	mov	r0, r3
 800d202:	f003 f94f 	bl	80104a4 <SDMMC_ReadFIFO>
 800d206:	4602      	mov	r2, r0
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	601a      	str	r2, [r3, #0]
    pData++;
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	3304      	adds	r3, #4
 800d210:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d212:	f7f5 ff3f 	bl	8003094 <HAL_GetTick>
 800d216:	4602      	mov	r2, r0
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d220:	d102      	bne.n	800d228 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d226:	e00b      	b.n	800d240 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e2      	bne.n	800d1fc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a03      	ldr	r2, [pc, #12]	; (800d248 <SD_SendSDStatus+0x19c>)
 800d23c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3730      	adds	r7, #48	; 0x30
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	18000f3a 	.word	0x18000f3a

0800d24c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d102      	bne.n	800d262 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d25c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d260:	e018      	b.n	800d294 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d26a:	041b      	lsls	r3, r3, #16
 800d26c:	4619      	mov	r1, r3
 800d26e:	4610      	mov	r0, r2
 800d270:	f003 fc02 	bl	8010a78 <SDMMC_CmdSendStatus>
 800d274:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	e009      	b.n	800d294 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2100      	movs	r1, #0
 800d286:	4618      	mov	r0, r3
 800d288:	f003 f981 	bl	801058e <SDMMC_GetResponse>
 800d28c:	4602      	mov	r2, r0
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f003 f96b 	bl	801058e <SDMMC_GetResponse>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2c2:	d102      	bne.n	800d2ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2c8:	e02f      	b.n	800d32a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d2ca:	f107 030c 	add.w	r3, r7, #12
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f879 	bl	800d3c8 <SD_FindSCR>
 800d2d6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	e023      	b.n	800d32a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01c      	beq.n	800d326 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f4:	041b      	lsls	r3, r3, #16
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	f003 fad4 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d2fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d001      	beq.n	800d30a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	e00f      	b.n	800d32a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2102      	movs	r1, #2
 800d310:	4618      	mov	r0, r3
 800d312:	f003 fb0b 	bl	801092c <SDMMC_CmdBusWidth>
 800d316:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	e003      	b.n	800d32a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d322:	2300      	movs	r3, #0
 800d324:	e001      	b.n	800d32a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d326:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b086      	sub	sp, #24
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d33a:	2300      	movs	r3, #0
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	2300      	movs	r3, #0
 800d340:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2100      	movs	r1, #0
 800d348:	4618      	mov	r0, r3
 800d34a:	f003 f920 	bl	801058e <SDMMC_GetResponse>
 800d34e:	4603      	mov	r3, r0
 800d350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d358:	d102      	bne.n	800d360 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d35a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d35e:	e02f      	b.n	800d3c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d360:	f107 030c 	add.w	r3, r7, #12
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f82e 	bl	800d3c8 <SD_FindSCR>
 800d36c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	e023      	b.n	800d3c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d01c      	beq.n	800d3bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38a:	041b      	lsls	r3, r3, #16
 800d38c:	4619      	mov	r1, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	f003 fa89 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d394:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	e00f      	b.n	800d3c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f003 fac0 	bl	801092c <SDMMC_CmdBusWidth>
 800d3ac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	e003      	b.n	800d3c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e001      	b.n	800d3c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08e      	sub	sp, #56	; 0x38
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3d2:	f7f5 fe5f 	bl	8003094 <HAL_GetTick>
 800d3d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60bb      	str	r3, [r7, #8]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2108      	movs	r1, #8
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f003 f90c 	bl	801060c <SDMMC_CmdBlockLength>
 800d3f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	e0ad      	b.n	800d55c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d408:	041b      	lsls	r3, r3, #16
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f003 fa4a 	bl	80108a6 <SDMMC_CmdAppCommand>
 800d412:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <SD_FindSCR+0x56>
  {
    return errorstate;
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	e09e      	b.n	800d55c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d41e:	f04f 33ff 	mov.w	r3, #4294967295
 800d422:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d424:	2308      	movs	r3, #8
 800d426:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d428:	2330      	movs	r3, #48	; 0x30
 800d42a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d42c:	2302      	movs	r3, #2
 800d42e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d430:	2300      	movs	r3, #0
 800d432:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d434:	2301      	movs	r3, #1
 800d436:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f107 0210 	add.w	r2, r7, #16
 800d440:	4611      	mov	r1, r2
 800d442:	4618      	mov	r0, r3
 800d444:	f003 f8b6 	bl	80105b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f003 fa90 	bl	8010972 <SDMMC_CmdSendSCR>
 800d452:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	2b00      	cmp	r3, #0
 800d458:	d027      	beq.n	800d4aa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	e07e      	b.n	800d55c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d113      	bne.n	800d494 <SD_FindSCR+0xcc>
 800d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d110      	bne.n	800d494 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4618      	mov	r0, r3
 800d478:	f003 f814 	bl	80104a4 <SDMMC_ReadFIFO>
 800d47c:	4603      	mov	r3, r0
 800d47e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f003 f80d 	bl	80104a4 <SDMMC_ReadFIFO>
 800d48a:	4603      	mov	r3, r0
 800d48c:	60fb      	str	r3, [r7, #12]
      index++;
 800d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d490:	3301      	adds	r3, #1
 800d492:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d494:	f7f5 fdfe 	bl	8003094 <HAL_GetTick>
 800d498:	4602      	mov	r2, r0
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a2:	d102      	bne.n	800d4aa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4a8:	e058      	b.n	800d55c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4b0:	f240 532a 	movw	r3, #1322	; 0x52a
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0d1      	beq.n	800d45e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c0:	f003 0308 	and.w	r3, r3, #8
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d005      	beq.n	800d4d4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	e043      	b.n	800d55c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	e036      	b.n	800d55c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f4:	f003 0320 	and.w	r3, r3, #32
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2220      	movs	r2, #32
 800d502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d504:	2320      	movs	r3, #32
 800d506:	e029      	b.n	800d55c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a15      	ldr	r2, [pc, #84]	; (800d564 <SD_FindSCR+0x19c>)
 800d50e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	061a      	lsls	r2, r3, #24
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d51c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	0a1b      	lsrs	r3, r3, #8
 800d522:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d526:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	0e1b      	lsrs	r3, r3, #24
 800d52c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	601a      	str	r2, [r3, #0]
    scr++;
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	3304      	adds	r3, #4
 800d536:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	061a      	lsls	r2, r3, #24
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d544:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	0a1b      	lsrs	r3, r3, #8
 800d54a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d54e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	0e1b      	lsrs	r3, r3, #24
 800d554:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3738      	adds	r7, #56	; 0x38
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	18000f3a 	.word	0x18000f3a

0800d568 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57a:	2b1f      	cmp	r3, #31
 800d57c:	d936      	bls.n	800d5ec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	e027      	b.n	800d5d4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4618      	mov	r0, r3
 800d58a:	f002 ff8b 	bl	80104a4 <SDMMC_ReadFIFO>
 800d58e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	b2da      	uxtb	r2, r3
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	3301      	adds	r3, #1
 800d59c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	0a1b      	lsrs	r3, r3, #8
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	0c1b      	lsrs	r3, r3, #16
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	0e1b      	lsrs	r3, r3, #24
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	617b      	str	r3, [r7, #20]
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	2b07      	cmp	r3, #7
 800d5d8:	d9d4      	bls.n	800d584 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	693a      	ldr	r2, [r7, #16]
 800d5de:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e4:	f1a3 0220 	sub.w	r2, r3, #32
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	69db      	ldr	r3, [r3, #28]
 800d600:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a1b      	ldr	r3, [r3, #32]
 800d606:	2b1f      	cmp	r3, #31
 800d608:	d93a      	bls.n	800d680 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]
 800d60e:	e02b      	b.n	800d668 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	3301      	adds	r3, #1
 800d61a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	021a      	lsls	r2, r3, #8
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	4313      	orrs	r3, r2
 800d626:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	3301      	adds	r3, #1
 800d62c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	041a      	lsls	r2, r3, #16
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4313      	orrs	r3, r2
 800d638:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	3301      	adds	r3, #1
 800d63e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	061a      	lsls	r2, r3, #24
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	4313      	orrs	r3, r2
 800d64a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	3301      	adds	r3, #1
 800d650:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f107 020c 	add.w	r2, r7, #12
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f002 ff2e 	bl	80104be <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	3301      	adds	r3, #1
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	2b07      	cmp	r3, #7
 800d66c:	d9d0      	bls.n	800d610 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	f1a3 0220 	sub.w	r2, r3, #32
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	621a      	str	r2, [r3, #32]
  }
}
 800d680:	bf00      	nop
 800d682:	3718      	adds	r7, #24
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e10f      	b.n	800d90a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a87      	ldr	r2, [pc, #540]	; (800d914 <HAL_SPI_Init+0x23c>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d00f      	beq.n	800d71a <HAL_SPI_Init+0x42>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a86      	ldr	r2, [pc, #536]	; (800d918 <HAL_SPI_Init+0x240>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00a      	beq.n	800d71a <HAL_SPI_Init+0x42>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a84      	ldr	r2, [pc, #528]	; (800d91c <HAL_SPI_Init+0x244>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d005      	beq.n	800d71a <HAL_SPI_Init+0x42>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	2b0f      	cmp	r3, #15
 800d714:	d901      	bls.n	800d71a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e0f7      	b.n	800d90a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fd5a 	bl	800e1d4 <SPI_GetPacketSize>
 800d720:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a7b      	ldr	r2, [pc, #492]	; (800d914 <HAL_SPI_Init+0x23c>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d00c      	beq.n	800d746 <HAL_SPI_Init+0x6e>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a79      	ldr	r2, [pc, #484]	; (800d918 <HAL_SPI_Init+0x240>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d007      	beq.n	800d746 <HAL_SPI_Init+0x6e>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a78      	ldr	r2, [pc, #480]	; (800d91c <HAL_SPI_Init+0x244>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d002      	beq.n	800d746 <HAL_SPI_Init+0x6e>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b08      	cmp	r3, #8
 800d744:	d811      	bhi.n	800d76a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d74a:	4a72      	ldr	r2, [pc, #456]	; (800d914 <HAL_SPI_Init+0x23c>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d009      	beq.n	800d764 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a70      	ldr	r2, [pc, #448]	; (800d918 <HAL_SPI_Init+0x240>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d004      	beq.n	800d764 <HAL_SPI_Init+0x8c>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a6f      	ldr	r2, [pc, #444]	; (800d91c <HAL_SPI_Init+0x244>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d104      	bne.n	800d76e <HAL_SPI_Init+0x96>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b10      	cmp	r3, #16
 800d768:	d901      	bls.n	800d76e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e0cd      	b.n	800d90a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d774:	b2db      	uxtb	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7f4 fe0e 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2202      	movs	r2, #2
 800d78c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f022 0201 	bic.w	r2, r2, #1
 800d79e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d7aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7b4:	d119      	bne.n	800d7ea <HAL_SPI_Init+0x112>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7be:	d103      	bne.n	800d7c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10c      	bne.n	800d7ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d7d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7d8:	d107      	bne.n	800d7ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d7e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00f      	beq.n	800d816 <HAL_SPI_Init+0x13e>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	2b06      	cmp	r3, #6
 800d7fc:	d90b      	bls.n	800d816 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	e007      	b.n	800d826 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d824:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	69da      	ldr	r2, [r3, #28]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82e:	431a      	orrs	r2, r3
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	431a      	orrs	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d838:	ea42 0103 	orr.w	r1, r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68da      	ldr	r2, [r3, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	430a      	orrs	r2, r1
 800d846:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d850:	431a      	orrs	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d856:	431a      	orrs	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	431a      	orrs	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	431a      	orrs	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	431a      	orrs	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	431a      	orrs	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d87a:	431a      	orrs	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	431a      	orrs	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d886:	ea42 0103 	orr.w	r1, r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d113      	bne.n	800d8c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0201 	bic.w	r2, r2, #1
 800d8d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	430a      	orrs	r2, r1
 800d8f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	40013000 	.word	0x40013000
 800d918:	40003800 	.word	0x40003800
 800d91c:	40003c00 	.word	0x40003c00

0800d920 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af02      	add	r7, sp, #8
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	4613      	mov	r3, r2
 800d92e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	3320      	adds	r3, #32
 800d936:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d942:	2b01      	cmp	r3, #1
 800d944:	d101      	bne.n	800d94a <HAL_SPI_Transmit+0x2a>
 800d946:	2302      	movs	r3, #2
 800d948:	e1e1      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2201      	movs	r2, #1
 800d94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d952:	f7f5 fb9f 	bl	8003094 <HAL_GetTick>
 800d956:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b01      	cmp	r3, #1
 800d962:	d007      	beq.n	800d974 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d964:	2302      	movs	r3, #2
 800d966:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d970:	7efb      	ldrb	r3, [r7, #27]
 800d972:	e1cc      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d002      	beq.n	800d980 <HAL_SPI_Transmit+0x60>
 800d97a:	88fb      	ldrh	r3, [r7, #6]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d107      	bne.n	800d990 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d98c:	7efb      	ldrb	r3, [r7, #27]
 800d98e:	e1be      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2203      	movs	r2, #3
 800d994:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	88fa      	ldrh	r2, [r7, #6]
 800d9aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	88fa      	ldrh	r2, [r7, #6]
 800d9b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d9e0:	d108      	bne.n	800d9f4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	e009      	b.n	800da08 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800da06:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	4b96      	ldr	r3, [pc, #600]	; (800dc68 <HAL_SPI_Transmit+0x348>)
 800da10:	4013      	ands	r3, r2
 800da12:	88f9      	ldrh	r1, [r7, #6]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	6812      	ldr	r2, [r2, #0]
 800da18:	430b      	orrs	r3, r1
 800da1a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f042 0201 	orr.w	r2, r2, #1
 800da2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da34:	d107      	bne.n	800da46 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	2b0f      	cmp	r3, #15
 800da4c:	d947      	bls.n	800dade <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800da4e:	e03f      	b.n	800dad0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d114      	bne.n	800da88 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6812      	ldr	r2, [r2, #0]
 800da68:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da6e:	1d1a      	adds	r2, r3, #4
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	3b01      	subs	r3, #1
 800da7e:	b29a      	uxth	r2, r3
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800da86:	e023      	b.n	800dad0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da88:	f7f5 fb04 	bl	8003094 <HAL_GetTick>
 800da8c:	4602      	mov	r2, r0
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d803      	bhi.n	800daa0 <HAL_SPI_Transmit+0x180>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d102      	bne.n	800daa6 <HAL_SPI_Transmit+0x186>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d114      	bne.n	800dad0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f000 fac6 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	e11e      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1b9      	bne.n	800da50 <HAL_SPI_Transmit+0x130>
 800dadc:	e0f1      	b.n	800dcc2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	2b07      	cmp	r3, #7
 800dae4:	f240 80e6 	bls.w	800dcb4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dae8:	e05d      	b.n	800dba6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d132      	bne.n	800db5e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dafe:	b29b      	uxth	r3, r3
 800db00:	2b01      	cmp	r3, #1
 800db02:	d918      	bls.n	800db36 <HAL_SPI_Transmit+0x216>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d014      	beq.n	800db36 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6812      	ldr	r2, [r2, #0]
 800db16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db1c:	1d1a      	adds	r2, r3, #4
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db28:	b29b      	uxth	r3, r3
 800db2a:	3b02      	subs	r3, #2
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800db34:	e037      	b.n	800dba6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db3a:	881a      	ldrh	r2, [r3, #0]
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db44:	1c9a      	adds	r2, r3, #2
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db50:	b29b      	uxth	r3, r3
 800db52:	3b01      	subs	r3, #1
 800db54:	b29a      	uxth	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800db5c:	e023      	b.n	800dba6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db5e:	f7f5 fa99 	bl	8003094 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d803      	bhi.n	800db76 <HAL_SPI_Transmit+0x256>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db74:	d102      	bne.n	800db7c <HAL_SPI_Transmit+0x25c>
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d114      	bne.n	800dba6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 fa5b 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2201      	movs	r2, #1
 800db9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dba2:	2303      	movs	r3, #3
 800dba4:	e0b3      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d19b      	bne.n	800daea <HAL_SPI_Transmit+0x1ca>
 800dbb2:	e086      	b.n	800dcc2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d154      	bne.n	800dc6c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d918      	bls.n	800dc00 <HAL_SPI_Transmit+0x2e0>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd2:	2b40      	cmp	r3, #64	; 0x40
 800dbd4:	d914      	bls.n	800dc00 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6812      	ldr	r2, [r2, #0]
 800dbe0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbe6:	1d1a      	adds	r2, r3, #4
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	3b04      	subs	r3, #4
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dbfe:	e059      	b.n	800dcb4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d917      	bls.n	800dc3c <HAL_SPI_Transmit+0x31c>
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d013      	beq.n	800dc3c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc18:	881a      	ldrh	r2, [r3, #0]
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc22:	1c9a      	adds	r2, r3, #2
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	3b02      	subs	r3, #2
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc3a:	e03b      	b.n	800dcb4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3320      	adds	r3, #32
 800dc46:	7812      	ldrb	r2, [r2, #0]
 800dc48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc66:	e025      	b.n	800dcb4 <HAL_SPI_Transmit+0x394>
 800dc68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc6c:	f7f5 fa12 	bl	8003094 <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d803      	bhi.n	800dc84 <HAL_SPI_Transmit+0x364>
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc82:	d102      	bne.n	800dc8a <HAL_SPI_Transmit+0x36a>
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d114      	bne.n	800dcb4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f000 f9d4 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e02c      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f47f af79 	bne.w	800dbb4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2108      	movs	r1, #8
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f000 fa53 	bl	800e178 <SPI_WaitOnFlagUntilTimeout>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d007      	beq.n	800dce8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcde:	f043 0220 	orr.w	r2, r3, #32
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 f9a5 	bl	800e038 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e000      	b.n	800dd0e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800dd0c:	7efb      	ldrb	r3, [r7, #27]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop

0800dd18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	4613      	mov	r3, r2
 800dd26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3330      	adds	r3, #48	; 0x30
 800dd32:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d101      	bne.n	800dd42 <HAL_SPI_Receive+0x2a>
 800dd3e:	2302      	movs	r3, #2
 800dd40:	e173      	b.n	800e02a <HAL_SPI_Receive+0x312>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd4a:	f7f5 f9a3 	bl	8003094 <HAL_GetTick>
 800dd4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d007      	beq.n	800dd6c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd68:	7ffb      	ldrb	r3, [r7, #31]
 800dd6a:	e15e      	b.n	800e02a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <HAL_SPI_Receive+0x60>
 800dd72:	88fb      	ldrh	r3, [r7, #6]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d107      	bne.n	800dd88 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd84:	7ffb      	ldrb	r3, [r7, #31]
 800dd86:	e150      	b.n	800e02a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2204      	movs	r2, #4
 800dd8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	88fa      	ldrh	r2, [r7, #6]
 800dda2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	88fa      	ldrh	r2, [r7, #6]
 800ddaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ddd8:	d108      	bne.n	800ddec <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dde8:	601a      	str	r2, [r3, #0]
 800ddea:	e009      	b.n	800de00 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ddfe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	4b8b      	ldr	r3, [pc, #556]	; (800e034 <HAL_SPI_Receive+0x31c>)
 800de08:	4013      	ands	r3, r2
 800de0a:	88f9      	ldrh	r1, [r7, #6]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	6812      	ldr	r2, [r2, #0]
 800de10:	430b      	orrs	r3, r1
 800de12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f042 0201 	orr.w	r2, r2, #1
 800de22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de2c:	d107      	bne.n	800de3e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	2b0f      	cmp	r3, #15
 800de44:	d948      	bls.n	800ded8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de46:	e040      	b.n	800deca <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	695a      	ldr	r2, [r3, #20]
 800de4e:	f248 0308 	movw	r3, #32776	; 0x8008
 800de52:	4013      	ands	r3, r2
 800de54:	2b00      	cmp	r3, #0
 800de56:	d014      	beq.n	800de82 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de68:	1d1a      	adds	r2, r3, #4
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b01      	subs	r3, #1
 800de78:	b29a      	uxth	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de80:	e023      	b.n	800deca <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de82:	f7f5 f907 	bl	8003094 <HAL_GetTick>
 800de86:	4602      	mov	r2, r0
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d803      	bhi.n	800de9a <HAL_SPI_Receive+0x182>
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d102      	bne.n	800dea0 <HAL_SPI_Receive+0x188>
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d114      	bne.n	800deca <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f8c9 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e0af      	b.n	800e02a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1b8      	bne.n	800de48 <HAL_SPI_Receive+0x130>
 800ded6:	e095      	b.n	800e004 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	2b07      	cmp	r3, #7
 800dede:	f240 808b 	bls.w	800dff8 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dee2:	e03f      	b.n	800df64 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	2b01      	cmp	r3, #1
 800def0:	d114      	bne.n	800df1c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	69ba      	ldr	r2, [r7, #24]
 800def8:	8812      	ldrh	r2, [r2, #0]
 800defa:	b292      	uxth	r2, r2
 800defc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df02:	1c9a      	adds	r2, r3, #2
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df0e:	b29b      	uxth	r3, r3
 800df10:	3b01      	subs	r3, #1
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df1a:	e023      	b.n	800df64 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df1c:	f7f5 f8ba 	bl	8003094 <HAL_GetTick>
 800df20:	4602      	mov	r2, r0
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d803      	bhi.n	800df34 <HAL_SPI_Receive+0x21c>
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df32:	d102      	bne.n	800df3a <HAL_SPI_Receive+0x222>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d114      	bne.n	800df64 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 f87c 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e062      	b.n	800e02a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1b9      	bne.n	800dee4 <HAL_SPI_Receive+0x1cc>
 800df70:	e048      	b.n	800e004 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	f003 0301 	and.w	r3, r3, #1
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d117      	bne.n	800dfb0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8c:	7812      	ldrb	r2, [r2, #0]
 800df8e:	b2d2      	uxtb	r2, r2
 800df90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfae:	e023      	b.n	800dff8 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfb0:	f7f5 f870 	bl	8003094 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d803      	bhi.n	800dfc8 <HAL_SPI_Receive+0x2b0>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d102      	bne.n	800dfce <HAL_SPI_Receive+0x2b6>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d114      	bne.n	800dff8 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 f832 	bl	800e038 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dff4:	2303      	movs	r3, #3
 800dff6:	e018      	b.n	800e02a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dffe:	b29b      	uxth	r3, r3
 800e000:	2b00      	cmp	r3, #0
 800e002:	d1b6      	bne.n	800df72 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 f817 	bl	800e038 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e000      	b.n	800e02a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800e028:	7ffb      	ldrb	r3, [r7, #31]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3720      	adds	r7, #32
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	ffff0000 	.word	0xffff0000

0800e038 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0208 	orr.w	r2, r2, #8
 800e056:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	699a      	ldr	r2, [r3, #24]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f042 0210 	orr.w	r2, r2, #16
 800e066:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f022 0201 	bic.w	r2, r2, #1
 800e076:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6919      	ldr	r1, [r3, #16]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	4b3c      	ldr	r3, [pc, #240]	; (800e174 <SPI_CloseTransfer+0x13c>)
 800e084:	400b      	ands	r3, r1
 800e086:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	689a      	ldr	r2, [r3, #8]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e096:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	d014      	beq.n	800e0ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f003 0320 	and.w	r3, r3, #32
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00f      	beq.n	800e0ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	699a      	ldr	r2, [r3, #24]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f042 0220 	orr.w	r2, r2, #32
 800e0cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d014      	beq.n	800e104 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00f      	beq.n	800e104 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ea:	f043 0204 	orr.w	r2, r3, #4
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	699a      	ldr	r2, [r3, #24]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e102:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d00f      	beq.n	800e12e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e114:	f043 0201 	orr.w	r2, r3, #1
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	699a      	ldr	r2, [r3, #24]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e12c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00f      	beq.n	800e158 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e13e:	f043 0208 	orr.w	r2, r3, #8
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	699a      	ldr	r2, [r3, #24]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e156:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e168:	bf00      	nop
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	fffffc90 	.word	0xfffffc90

0800e178 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4613      	mov	r3, r2
 800e186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e188:	e010      	b.n	800e1ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e18a:	f7f4 ff83 	bl	8003094 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d803      	bhi.n	800e1a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d102      	bne.n	800e1a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	e00f      	b.n	800e1cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	695a      	ldr	r2, [r3, #20]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2301      	moveq	r3, #1
 800e1be:	2300      	movne	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d0df      	beq.n	800e18a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e0:	095b      	lsrs	r3, r3, #5
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	3307      	adds	r3, #7
 800e1f2:	08db      	lsrs	r3, r3, #3
 800e1f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b082      	sub	sp, #8
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e049      	b.n	800e2b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d106      	bne.n	800e236 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7f4 fb09 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2202      	movs	r2, #2
 800e23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3304      	adds	r3, #4
 800e246:	4619      	mov	r1, r3
 800e248:	4610      	mov	r0, r2
 800e24a:	f000 faf1 	bl	800e830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e049      	b.n	800e35e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7f4 f91c 	bl	800251c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f000 fa9a 	bl	800e830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2201      	movs	r2, #1
 800e300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	f003 0302 	and.w	r3, r3, #2
 800e378:	2b02      	cmp	r3, #2
 800e37a:	d122      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f003 0302 	and.w	r3, r3, #2
 800e386:	2b02      	cmp	r3, #2
 800e388:	d11b      	bne.n	800e3c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f06f 0202 	mvn.w	r2, #2
 800e392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	f003 0303 	and.w	r3, r3, #3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d003      	beq.n	800e3b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fa23 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e3ae:	e005      	b.n	800e3bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fa15 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fa26 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b04      	cmp	r3, #4
 800e3ce:	d122      	bne.n	800e416 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f003 0304 	and.w	r3, r3, #4
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d11b      	bne.n	800e416 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f06f 0204 	mvn.w	r2, #4
 800e3e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f9f9 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e402:	e005      	b.n	800e410 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f9eb 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 f9fc 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	691b      	ldr	r3, [r3, #16]
 800e41c:	f003 0308 	and.w	r3, r3, #8
 800e420:	2b08      	cmp	r3, #8
 800e422:	d122      	bne.n	800e46a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b08      	cmp	r3, #8
 800e430:	d11b      	bne.n	800e46a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f06f 0208 	mvn.w	r2, #8
 800e43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2204      	movs	r2, #4
 800e440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f9cf 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e456:	e005      	b.n	800e464 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f9c1 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f9d2 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	691b      	ldr	r3, [r3, #16]
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b10      	cmp	r3, #16
 800e476:	d122      	bne.n	800e4be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	f003 0310 	and.w	r3, r3, #16
 800e482:	2b10      	cmp	r3, #16
 800e484:	d11b      	bne.n	800e4be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f06f 0210 	mvn.w	r2, #16
 800e48e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2208      	movs	r2, #8
 800e494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f9a5 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e4aa:	e005      	b.n	800e4b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f997 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f9a8 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	f003 0301 	and.w	r3, r3, #1
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d10e      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d107      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f06f 0201 	mvn.w	r2, #1
 800e4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 f971 	bl	800e7cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f4:	2b80      	cmp	r3, #128	; 0x80
 800e4f6:	d10e      	bne.n	800e516 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e502:	2b80      	cmp	r3, #128	; 0x80
 800e504:	d107      	bne.n	800e516 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fdaf 	bl	800f074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e524:	d10e      	bne.n	800e544 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e530:	2b80      	cmp	r3, #128	; 0x80
 800e532:	d107      	bne.n	800e544 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fda2 	bl	800f088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e54e:	2b40      	cmp	r3, #64	; 0x40
 800e550:	d10e      	bne.n	800e570 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d107      	bne.n	800e570 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f956 	bl	800e81c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	f003 0320 	and.w	r3, r3, #32
 800e57a:	2b20      	cmp	r3, #32
 800e57c:	d10e      	bne.n	800e59c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	f003 0320 	and.w	r3, r3, #32
 800e588:	2b20      	cmp	r3, #32
 800e58a:	d107      	bne.n	800e59c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f06f 0220 	mvn.w	r2, #32
 800e594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fd62 	bl	800f060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d101      	bne.n	800e5c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e5be:	2302      	movs	r3, #2
 800e5c0:	e0ff      	b.n	800e7c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b14      	cmp	r3, #20
 800e5ce:	f200 80f0 	bhi.w	800e7b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e5d2:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d8:	0800e62d 	.word	0x0800e62d
 800e5dc:	0800e7b3 	.word	0x0800e7b3
 800e5e0:	0800e7b3 	.word	0x0800e7b3
 800e5e4:	0800e7b3 	.word	0x0800e7b3
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e7b3 	.word	0x0800e7b3
 800e5f0:	0800e7b3 	.word	0x0800e7b3
 800e5f4:	0800e7b3 	.word	0x0800e7b3
 800e5f8:	0800e6af 	.word	0x0800e6af
 800e5fc:	0800e7b3 	.word	0x0800e7b3
 800e600:	0800e7b3 	.word	0x0800e7b3
 800e604:	0800e7b3 	.word	0x0800e7b3
 800e608:	0800e6ef 	.word	0x0800e6ef
 800e60c:	0800e7b3 	.word	0x0800e7b3
 800e610:	0800e7b3 	.word	0x0800e7b3
 800e614:	0800e7b3 	.word	0x0800e7b3
 800e618:	0800e731 	.word	0x0800e731
 800e61c:	0800e7b3 	.word	0x0800e7b3
 800e620:	0800e7b3 	.word	0x0800e7b3
 800e624:	0800e7b3 	.word	0x0800e7b3
 800e628:	0800e771 	.word	0x0800e771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f9a2 	bl	800e97c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	699a      	ldr	r2, [r3, #24]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f042 0208 	orr.w	r2, r2, #8
 800e646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	699a      	ldr	r2, [r3, #24]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f022 0204 	bic.w	r2, r2, #4
 800e656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6999      	ldr	r1, [r3, #24]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691a      	ldr	r2, [r3, #16]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	430a      	orrs	r2, r1
 800e668:	619a      	str	r2, [r3, #24]
      break;
 800e66a:	e0a5      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68b9      	ldr	r1, [r7, #8]
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fa12 	bl	800ea9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699a      	ldr	r2, [r3, #24]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	699a      	ldr	r2, [r3, #24]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6999      	ldr	r1, [r3, #24]
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	021a      	lsls	r2, r3, #8
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	619a      	str	r2, [r3, #24]
      break;
 800e6ac:	e084      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fa7b 	bl	800ebb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69da      	ldr	r2, [r3, #28]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f042 0208 	orr.w	r2, r2, #8
 800e6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	69da      	ldr	r2, [r3, #28]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f022 0204 	bic.w	r2, r2, #4
 800e6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69d9      	ldr	r1, [r3, #28]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	61da      	str	r2, [r3, #28]
      break;
 800e6ec:	e064      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68b9      	ldr	r1, [r7, #8]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fae3 	bl	800ecc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	69da      	ldr	r2, [r3, #28]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69da      	ldr	r2, [r3, #28]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	69d9      	ldr	r1, [r3, #28]
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	021a      	lsls	r2, r3, #8
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	430a      	orrs	r2, r1
 800e72c:	61da      	str	r2, [r3, #28]
      break;
 800e72e:	e043      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fb2c 	bl	800ed94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f042 0208 	orr.w	r2, r2, #8
 800e74a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f022 0204 	bic.w	r2, r2, #4
 800e75a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	691a      	ldr	r2, [r3, #16]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e76e:	e023      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	68b9      	ldr	r1, [r7, #8]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fb70 	bl	800ee5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e78a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e79a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	021a      	lsls	r2, r3, #8
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e7b0:	e002      	b.n	800e7b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	75fb      	strb	r3, [r7, #23]
      break;
 800e7b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3718      	adds	r7, #24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop

0800e7cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a44      	ldr	r2, [pc, #272]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d013      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e84e:	d00f      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a41      	ldr	r2, [pc, #260]	; (800e958 <TIM_Base_SetConfig+0x128>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d00b      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a40      	ldr	r2, [pc, #256]	; (800e95c <TIM_Base_SetConfig+0x12c>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d007      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a3f      	ldr	r2, [pc, #252]	; (800e960 <TIM_Base_SetConfig+0x130>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d003      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a3e      	ldr	r2, [pc, #248]	; (800e964 <TIM_Base_SetConfig+0x134>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d108      	bne.n	800e882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a33      	ldr	r2, [pc, #204]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d027      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e890:	d023      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a30      	ldr	r2, [pc, #192]	; (800e958 <TIM_Base_SetConfig+0x128>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d01f      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a2f      	ldr	r2, [pc, #188]	; (800e95c <TIM_Base_SetConfig+0x12c>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d01b      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a2e      	ldr	r2, [pc, #184]	; (800e960 <TIM_Base_SetConfig+0x130>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d017      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a2d      	ldr	r2, [pc, #180]	; (800e964 <TIM_Base_SetConfig+0x134>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d013      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a2c      	ldr	r2, [pc, #176]	; (800e968 <TIM_Base_SetConfig+0x138>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d00f      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a2b      	ldr	r2, [pc, #172]	; (800e96c <TIM_Base_SetConfig+0x13c>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d00b      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a2a      	ldr	r2, [pc, #168]	; (800e970 <TIM_Base_SetConfig+0x140>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d007      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a29      	ldr	r2, [pc, #164]	; (800e974 <TIM_Base_SetConfig+0x144>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d003      	beq.n	800e8da <TIM_Base_SetConfig+0xaa>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a28      	ldr	r2, [pc, #160]	; (800e978 <TIM_Base_SetConfig+0x148>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d108      	bne.n	800e8ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	695b      	ldr	r3, [r3, #20]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	689a      	ldr	r2, [r3, #8]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a10      	ldr	r2, [pc, #64]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d00f      	beq.n	800e938 <TIM_Base_SetConfig+0x108>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a12      	ldr	r2, [pc, #72]	; (800e964 <TIM_Base_SetConfig+0x134>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00b      	beq.n	800e938 <TIM_Base_SetConfig+0x108>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a11      	ldr	r2, [pc, #68]	; (800e968 <TIM_Base_SetConfig+0x138>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d007      	beq.n	800e938 <TIM_Base_SetConfig+0x108>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a10      	ldr	r2, [pc, #64]	; (800e96c <TIM_Base_SetConfig+0x13c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d003      	beq.n	800e938 <TIM_Base_SetConfig+0x108>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a0f      	ldr	r2, [pc, #60]	; (800e970 <TIM_Base_SetConfig+0x140>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d103      	bne.n	800e940 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	691a      	ldr	r2, [r3, #16]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	615a      	str	r2, [r3, #20]
}
 800e946:	bf00      	nop
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	40010000 	.word	0x40010000
 800e958:	40000400 	.word	0x40000400
 800e95c:	40000800 	.word	0x40000800
 800e960:	40000c00 	.word	0x40000c00
 800e964:	40010400 	.word	0x40010400
 800e968:	40014000 	.word	0x40014000
 800e96c:	40014400 	.word	0x40014400
 800e970:	40014800 	.word	0x40014800
 800e974:	4000e000 	.word	0x4000e000
 800e978:	4000e400 	.word	0x4000e400

0800e97c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b087      	sub	sp, #28
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	f023 0201 	bic.w	r2, r3, #1
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	4b37      	ldr	r3, [pc, #220]	; (800ea84 <TIM_OC1_SetConfig+0x108>)
 800e9a8:	4013      	ands	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f023 0303 	bic.w	r3, r3, #3
 800e9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	f023 0302 	bic.w	r3, r3, #2
 800e9c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a2d      	ldr	r2, [pc, #180]	; (800ea88 <TIM_OC1_SetConfig+0x10c>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00f      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x7c>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a2c      	ldr	r2, [pc, #176]	; (800ea8c <TIM_OC1_SetConfig+0x110>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00b      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x7c>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a2b      	ldr	r2, [pc, #172]	; (800ea90 <TIM_OC1_SetConfig+0x114>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d007      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x7c>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a2a      	ldr	r2, [pc, #168]	; (800ea94 <TIM_OC1_SetConfig+0x118>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d003      	beq.n	800e9f8 <TIM_OC1_SetConfig+0x7c>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a29      	ldr	r2, [pc, #164]	; (800ea98 <TIM_OC1_SetConfig+0x11c>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d10c      	bne.n	800ea12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	f023 0308 	bic.w	r3, r3, #8
 800e9fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	f023 0304 	bic.w	r3, r3, #4
 800ea10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a1c      	ldr	r2, [pc, #112]	; (800ea88 <TIM_OC1_SetConfig+0x10c>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d00f      	beq.n	800ea3a <TIM_OC1_SetConfig+0xbe>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a1b      	ldr	r2, [pc, #108]	; (800ea8c <TIM_OC1_SetConfig+0x110>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d00b      	beq.n	800ea3a <TIM_OC1_SetConfig+0xbe>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a1a      	ldr	r2, [pc, #104]	; (800ea90 <TIM_OC1_SetConfig+0x114>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d007      	beq.n	800ea3a <TIM_OC1_SetConfig+0xbe>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a19      	ldr	r2, [pc, #100]	; (800ea94 <TIM_OC1_SetConfig+0x118>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d003      	beq.n	800ea3a <TIM_OC1_SetConfig+0xbe>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4a18      	ldr	r2, [pc, #96]	; (800ea98 <TIM_OC1_SetConfig+0x11c>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d111      	bne.n	800ea5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	693a      	ldr	r2, [r7, #16]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	697a      	ldr	r2, [r7, #20]
 800ea76:	621a      	str	r2, [r3, #32]
}
 800ea78:	bf00      	nop
 800ea7a:	371c      	adds	r7, #28
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	fffeff8f 	.word	0xfffeff8f
 800ea88:	40010000 	.word	0x40010000
 800ea8c:	40010400 	.word	0x40010400
 800ea90:	40014000 	.word	0x40014000
 800ea94:	40014400 	.word	0x40014400
 800ea98:	40014800 	.word	0x40014800

0800ea9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b087      	sub	sp, #28
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a1b      	ldr	r3, [r3, #32]
 800eaaa:	f023 0210 	bic.w	r2, r3, #16
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	4b34      	ldr	r3, [pc, #208]	; (800eb98 <TIM_OC2_SetConfig+0xfc>)
 800eac8:	4013      	ands	r3, r2
 800eaca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ead2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	021b      	lsls	r3, r3, #8
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	4313      	orrs	r3, r2
 800eade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f023 0320 	bic.w	r3, r3, #32
 800eae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a29      	ldr	r2, [pc, #164]	; (800eb9c <TIM_OC2_SetConfig+0x100>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d003      	beq.n	800eb04 <TIM_OC2_SetConfig+0x68>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4a28      	ldr	r2, [pc, #160]	; (800eba0 <TIM_OC2_SetConfig+0x104>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d10d      	bne.n	800eb20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	011b      	lsls	r3, r3, #4
 800eb12:	697a      	ldr	r2, [r7, #20]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a1e      	ldr	r2, [pc, #120]	; (800eb9c <TIM_OC2_SetConfig+0x100>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00f      	beq.n	800eb48 <TIM_OC2_SetConfig+0xac>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a1d      	ldr	r2, [pc, #116]	; (800eba0 <TIM_OC2_SetConfig+0x104>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d00b      	beq.n	800eb48 <TIM_OC2_SetConfig+0xac>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a1c      	ldr	r2, [pc, #112]	; (800eba4 <TIM_OC2_SetConfig+0x108>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d007      	beq.n	800eb48 <TIM_OC2_SetConfig+0xac>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a1b      	ldr	r2, [pc, #108]	; (800eba8 <TIM_OC2_SetConfig+0x10c>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d003      	beq.n	800eb48 <TIM_OC2_SetConfig+0xac>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4a1a      	ldr	r2, [pc, #104]	; (800ebac <TIM_OC2_SetConfig+0x110>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d113      	bne.n	800eb70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	693a      	ldr	r2, [r7, #16]
 800eb74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	685a      	ldr	r2, [r3, #4]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	697a      	ldr	r2, [r7, #20]
 800eb88:	621a      	str	r2, [r3, #32]
}
 800eb8a:	bf00      	nop
 800eb8c:	371c      	adds	r7, #28
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	feff8fff 	.word	0xfeff8fff
 800eb9c:	40010000 	.word	0x40010000
 800eba0:	40010400 	.word	0x40010400
 800eba4:	40014000 	.word	0x40014000
 800eba8:	40014400 	.word	0x40014400
 800ebac:	40014800 	.word	0x40014800

0800ebb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	4b33      	ldr	r3, [pc, #204]	; (800eca8 <TIM_OC3_SetConfig+0xf8>)
 800ebdc:	4013      	ands	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f023 0303 	bic.w	r3, r3, #3
 800ebe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	021b      	lsls	r3, r3, #8
 800ec00:	697a      	ldr	r2, [r7, #20]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a28      	ldr	r2, [pc, #160]	; (800ecac <TIM_OC3_SetConfig+0xfc>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d003      	beq.n	800ec16 <TIM_OC3_SetConfig+0x66>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a27      	ldr	r2, [pc, #156]	; (800ecb0 <TIM_OC3_SetConfig+0x100>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d10d      	bne.n	800ec32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	021b      	lsls	r3, r3, #8
 800ec24:	697a      	ldr	r2, [r7, #20]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4a1d      	ldr	r2, [pc, #116]	; (800ecac <TIM_OC3_SetConfig+0xfc>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d00f      	beq.n	800ec5a <TIM_OC3_SetConfig+0xaa>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a1c      	ldr	r2, [pc, #112]	; (800ecb0 <TIM_OC3_SetConfig+0x100>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d00b      	beq.n	800ec5a <TIM_OC3_SetConfig+0xaa>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4a1b      	ldr	r2, [pc, #108]	; (800ecb4 <TIM_OC3_SetConfig+0x104>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d007      	beq.n	800ec5a <TIM_OC3_SetConfig+0xaa>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a1a      	ldr	r2, [pc, #104]	; (800ecb8 <TIM_OC3_SetConfig+0x108>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d003      	beq.n	800ec5a <TIM_OC3_SetConfig+0xaa>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a19      	ldr	r2, [pc, #100]	; (800ecbc <TIM_OC3_SetConfig+0x10c>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d113      	bne.n	800ec82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	011b      	lsls	r3, r3, #4
 800ec70:	693a      	ldr	r2, [r7, #16]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	699b      	ldr	r3, [r3, #24]
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	693a      	ldr	r2, [r7, #16]
 800ec86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	697a      	ldr	r2, [r7, #20]
 800ec9a:	621a      	str	r2, [r3, #32]
}
 800ec9c:	bf00      	nop
 800ec9e:	371c      	adds	r7, #28
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr
 800eca8:	fffeff8f 	.word	0xfffeff8f
 800ecac:	40010000 	.word	0x40010000
 800ecb0:	40010400 	.word	0x40010400
 800ecb4:	40014000 	.word	0x40014000
 800ecb8:	40014400 	.word	0x40014400
 800ecbc:	40014800 	.word	0x40014800

0800ecc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b087      	sub	sp, #28
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	69db      	ldr	r3, [r3, #28]
 800ece6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	4b24      	ldr	r3, [pc, #144]	; (800ed7c <TIM_OC4_SetConfig+0xbc>)
 800ecec:	4013      	ands	r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	4313      	orrs	r3, r2
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	031b      	lsls	r3, r3, #12
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a19      	ldr	r2, [pc, #100]	; (800ed80 <TIM_OC4_SetConfig+0xc0>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d00f      	beq.n	800ed40 <TIM_OC4_SetConfig+0x80>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a18      	ldr	r2, [pc, #96]	; (800ed84 <TIM_OC4_SetConfig+0xc4>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d00b      	beq.n	800ed40 <TIM_OC4_SetConfig+0x80>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a17      	ldr	r2, [pc, #92]	; (800ed88 <TIM_OC4_SetConfig+0xc8>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d007      	beq.n	800ed40 <TIM_OC4_SetConfig+0x80>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a16      	ldr	r2, [pc, #88]	; (800ed8c <TIM_OC4_SetConfig+0xcc>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d003      	beq.n	800ed40 <TIM_OC4_SetConfig+0x80>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a15      	ldr	r2, [pc, #84]	; (800ed90 <TIM_OC4_SetConfig+0xd0>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d109      	bne.n	800ed54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	019b      	lsls	r3, r3, #6
 800ed4e:	697a      	ldr	r2, [r7, #20]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	685a      	ldr	r2, [r3, #4]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	693a      	ldr	r2, [r7, #16]
 800ed6c:	621a      	str	r2, [r3, #32]
}
 800ed6e:	bf00      	nop
 800ed70:	371c      	adds	r7, #28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	feff8fff 	.word	0xfeff8fff
 800ed80:	40010000 	.word	0x40010000
 800ed84:	40010400 	.word	0x40010400
 800ed88:	40014000 	.word	0x40014000
 800ed8c:	40014400 	.word	0x40014400
 800ed90:	40014800 	.word	0x40014800

0800ed94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <TIM_OC5_SetConfig+0xb0>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	4313      	orrs	r3, r2
 800edcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800edd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	041b      	lsls	r3, r3, #16
 800eddc:	693a      	ldr	r2, [r7, #16]
 800edde:	4313      	orrs	r3, r2
 800ede0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4a18      	ldr	r2, [pc, #96]	; (800ee48 <TIM_OC5_SetConfig+0xb4>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d00f      	beq.n	800ee0a <TIM_OC5_SetConfig+0x76>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4a17      	ldr	r2, [pc, #92]	; (800ee4c <TIM_OC5_SetConfig+0xb8>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d00b      	beq.n	800ee0a <TIM_OC5_SetConfig+0x76>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4a16      	ldr	r2, [pc, #88]	; (800ee50 <TIM_OC5_SetConfig+0xbc>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d007      	beq.n	800ee0a <TIM_OC5_SetConfig+0x76>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4a15      	ldr	r2, [pc, #84]	; (800ee54 <TIM_OC5_SetConfig+0xc0>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d003      	beq.n	800ee0a <TIM_OC5_SetConfig+0x76>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a14      	ldr	r2, [pc, #80]	; (800ee58 <TIM_OC5_SetConfig+0xc4>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d109      	bne.n	800ee1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	021b      	lsls	r3, r3, #8
 800ee18:	697a      	ldr	r2, [r7, #20]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	697a      	ldr	r2, [r7, #20]
 800ee22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	621a      	str	r2, [r3, #32]
}
 800ee38:	bf00      	nop
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	fffeff8f 	.word	0xfffeff8f
 800ee48:	40010000 	.word	0x40010000
 800ee4c:	40010400 	.word	0x40010400
 800ee50:	40014000 	.word	0x40014000
 800ee54:	40014400 	.word	0x40014400
 800ee58:	40014800 	.word	0x40014800

0800ee5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b087      	sub	sp, #28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4b22      	ldr	r3, [pc, #136]	; (800ef10 <TIM_OC6_SetConfig+0xb4>)
 800ee88:	4013      	ands	r3, r2
 800ee8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	021b      	lsls	r3, r3, #8
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	4313      	orrs	r3, r2
 800ee96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	051b      	lsls	r3, r3, #20
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a19      	ldr	r2, [pc, #100]	; (800ef14 <TIM_OC6_SetConfig+0xb8>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d00f      	beq.n	800eed4 <TIM_OC6_SetConfig+0x78>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a18      	ldr	r2, [pc, #96]	; (800ef18 <TIM_OC6_SetConfig+0xbc>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d00b      	beq.n	800eed4 <TIM_OC6_SetConfig+0x78>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a17      	ldr	r2, [pc, #92]	; (800ef1c <TIM_OC6_SetConfig+0xc0>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d007      	beq.n	800eed4 <TIM_OC6_SetConfig+0x78>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a16      	ldr	r2, [pc, #88]	; (800ef20 <TIM_OC6_SetConfig+0xc4>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d003      	beq.n	800eed4 <TIM_OC6_SetConfig+0x78>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a15      	ldr	r2, [pc, #84]	; (800ef24 <TIM_OC6_SetConfig+0xc8>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d109      	bne.n	800eee8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eeda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	695b      	ldr	r3, [r3, #20]
 800eee0:	029b      	lsls	r3, r3, #10
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	4313      	orrs	r3, r2
 800eee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	621a      	str	r2, [r3, #32]
}
 800ef02:	bf00      	nop
 800ef04:	371c      	adds	r7, #28
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	feff8fff 	.word	0xfeff8fff
 800ef14:	40010000 	.word	0x40010000
 800ef18:	40010400 	.word	0x40010400
 800ef1c:	40014000 	.word	0x40014000
 800ef20:	40014400 	.word	0x40014400
 800ef24:	40014800 	.word	0x40014800

0800ef28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d101      	bne.n	800ef40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	e077      	b.n	800f030 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2201      	movs	r2, #1
 800ef44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2202      	movs	r2, #2
 800ef4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a35      	ldr	r2, [pc, #212]	; (800f03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d004      	beq.n	800ef74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a34      	ldr	r2, [pc, #208]	; (800f040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d108      	bne.n	800ef86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ef7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a25      	ldr	r2, [pc, #148]	; (800f03c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d02c      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efb2:	d027      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a22      	ldr	r2, [pc, #136]	; (800f044 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d022      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4a21      	ldr	r2, [pc, #132]	; (800f048 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d01d      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a1f      	ldr	r2, [pc, #124]	; (800f04c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d018      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a1a      	ldr	r2, [pc, #104]	; (800f040 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d013      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a1b      	ldr	r2, [pc, #108]	; (800f050 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d00e      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a1a      	ldr	r2, [pc, #104]	; (800f054 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d009      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a18      	ldr	r2, [pc, #96]	; (800f058 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d004      	beq.n	800f004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a17      	ldr	r2, [pc, #92]	; (800f05c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d10c      	bne.n	800f01e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f00a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	4313      	orrs	r3, r2
 800f014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2201      	movs	r2, #1
 800f022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	40010000 	.word	0x40010000
 800f040:	40010400 	.word	0x40010400
 800f044:	40000400 	.word	0x40000400
 800f048:	40000800 	.word	0x40000800
 800f04c:	40000c00 	.word	0x40000c00
 800f050:	40001800 	.word	0x40001800
 800f054:	40014000 	.word	0x40014000
 800f058:	4000e000 	.word	0x4000e000
 800f05c:	4000e400 	.word	0x4000e400

0800f060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f068:	bf00      	nop
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f07c:	bf00      	nop
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e042      	b.n	800f134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d106      	bne.n	800f0c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7f3 fca7 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2224      	movs	r2, #36	; 0x24
 800f0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f022 0201 	bic.w	r2, r2, #1
 800f0dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f82c 	bl	800f13c <UART_SetConfig>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d101      	bne.n	800f0ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	e022      	b.n	800f134 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fe8c 	bl	800fe14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f10a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689a      	ldr	r2, [r3, #8]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f11a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f042 0201 	orr.w	r2, r2, #1
 800f12a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 ff13 	bl	800ff58 <UART_CheckIdleState>
 800f132:	4603      	mov	r3, r0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f13c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f140:	b092      	sub	sp, #72	; 0x48
 800f142:	af00      	add	r7, sp, #0
 800f144:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f146:	2300      	movs	r3, #0
 800f148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	689a      	ldr	r2, [r3, #8]
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	431a      	orrs	r2, r3
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	695b      	ldr	r3, [r3, #20]
 800f15a:	431a      	orrs	r2, r3
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	69db      	ldr	r3, [r3, #28]
 800f160:	4313      	orrs	r3, r2
 800f162:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	4bbe      	ldr	r3, [pc, #760]	; (800f464 <UART_SetConfig+0x328>)
 800f16c:	4013      	ands	r3, r2
 800f16e:	697a      	ldr	r2, [r7, #20]
 800f170:	6812      	ldr	r2, [r2, #0]
 800f172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f174:	430b      	orrs	r3, r1
 800f176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	68da      	ldr	r2, [r3, #12]
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	430a      	orrs	r2, r1
 800f18c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	699b      	ldr	r3, [r3, #24]
 800f192:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4ab3      	ldr	r2, [pc, #716]	; (800f468 <UART_SetConfig+0x32c>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d004      	beq.n	800f1a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	689a      	ldr	r2, [r3, #8]
 800f1ae:	4baf      	ldr	r3, [pc, #700]	; (800f46c <UART_SetConfig+0x330>)
 800f1b0:	4013      	ands	r3, r2
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	6812      	ldr	r2, [r2, #0]
 800f1b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1b8:	430b      	orrs	r3, r1
 800f1ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c2:	f023 010f 	bic.w	r1, r3, #15
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4aa6      	ldr	r2, [pc, #664]	; (800f470 <UART_SetConfig+0x334>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d177      	bne.n	800f2cc <UART_SetConfig+0x190>
 800f1dc:	4ba5      	ldr	r3, [pc, #660]	; (800f474 <UART_SetConfig+0x338>)
 800f1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f1e4:	2b28      	cmp	r3, #40	; 0x28
 800f1e6:	d86d      	bhi.n	800f2c4 <UART_SetConfig+0x188>
 800f1e8:	a201      	add	r2, pc, #4	; (adr r2, 800f1f0 <UART_SetConfig+0xb4>)
 800f1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ee:	bf00      	nop
 800f1f0:	0800f295 	.word	0x0800f295
 800f1f4:	0800f2c5 	.word	0x0800f2c5
 800f1f8:	0800f2c5 	.word	0x0800f2c5
 800f1fc:	0800f2c5 	.word	0x0800f2c5
 800f200:	0800f2c5 	.word	0x0800f2c5
 800f204:	0800f2c5 	.word	0x0800f2c5
 800f208:	0800f2c5 	.word	0x0800f2c5
 800f20c:	0800f2c5 	.word	0x0800f2c5
 800f210:	0800f29d 	.word	0x0800f29d
 800f214:	0800f2c5 	.word	0x0800f2c5
 800f218:	0800f2c5 	.word	0x0800f2c5
 800f21c:	0800f2c5 	.word	0x0800f2c5
 800f220:	0800f2c5 	.word	0x0800f2c5
 800f224:	0800f2c5 	.word	0x0800f2c5
 800f228:	0800f2c5 	.word	0x0800f2c5
 800f22c:	0800f2c5 	.word	0x0800f2c5
 800f230:	0800f2a5 	.word	0x0800f2a5
 800f234:	0800f2c5 	.word	0x0800f2c5
 800f238:	0800f2c5 	.word	0x0800f2c5
 800f23c:	0800f2c5 	.word	0x0800f2c5
 800f240:	0800f2c5 	.word	0x0800f2c5
 800f244:	0800f2c5 	.word	0x0800f2c5
 800f248:	0800f2c5 	.word	0x0800f2c5
 800f24c:	0800f2c5 	.word	0x0800f2c5
 800f250:	0800f2ad 	.word	0x0800f2ad
 800f254:	0800f2c5 	.word	0x0800f2c5
 800f258:	0800f2c5 	.word	0x0800f2c5
 800f25c:	0800f2c5 	.word	0x0800f2c5
 800f260:	0800f2c5 	.word	0x0800f2c5
 800f264:	0800f2c5 	.word	0x0800f2c5
 800f268:	0800f2c5 	.word	0x0800f2c5
 800f26c:	0800f2c5 	.word	0x0800f2c5
 800f270:	0800f2b5 	.word	0x0800f2b5
 800f274:	0800f2c5 	.word	0x0800f2c5
 800f278:	0800f2c5 	.word	0x0800f2c5
 800f27c:	0800f2c5 	.word	0x0800f2c5
 800f280:	0800f2c5 	.word	0x0800f2c5
 800f284:	0800f2c5 	.word	0x0800f2c5
 800f288:	0800f2c5 	.word	0x0800f2c5
 800f28c:	0800f2c5 	.word	0x0800f2c5
 800f290:	0800f2bd 	.word	0x0800f2bd
 800f294:	2301      	movs	r3, #1
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29a:	e326      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f29c:	2304      	movs	r3, #4
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a2:	e322      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2aa:	e31e      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2ac:	2310      	movs	r3, #16
 800f2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b2:	e31a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2b4:	2320      	movs	r3, #32
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ba:	e316      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2bc:	2340      	movs	r3, #64	; 0x40
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c2:	e312      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2c4:	2380      	movs	r3, #128	; 0x80
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ca:	e30e      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a69      	ldr	r2, [pc, #420]	; (800f478 <UART_SetConfig+0x33c>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d130      	bne.n	800f338 <UART_SetConfig+0x1fc>
 800f2d6:	4b67      	ldr	r3, [pc, #412]	; (800f474 <UART_SetConfig+0x338>)
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	f003 0307 	and.w	r3, r3, #7
 800f2de:	2b05      	cmp	r3, #5
 800f2e0:	d826      	bhi.n	800f330 <UART_SetConfig+0x1f4>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <UART_SetConfig+0x1ac>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f301 	.word	0x0800f301
 800f2ec:	0800f309 	.word	0x0800f309
 800f2f0:	0800f311 	.word	0x0800f311
 800f2f4:	0800f319 	.word	0x0800f319
 800f2f8:	0800f321 	.word	0x0800f321
 800f2fc:	0800f329 	.word	0x0800f329
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f306:	e2f0      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f308:	2304      	movs	r3, #4
 800f30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30e:	e2ec      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f310:	2308      	movs	r3, #8
 800f312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f316:	e2e8      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f318:	2310      	movs	r3, #16
 800f31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31e:	e2e4      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f320:	2320      	movs	r3, #32
 800f322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f326:	e2e0      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f328:	2340      	movs	r3, #64	; 0x40
 800f32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32e:	e2dc      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f330:	2380      	movs	r3, #128	; 0x80
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f336:	e2d8      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a4f      	ldr	r2, [pc, #316]	; (800f47c <UART_SetConfig+0x340>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d130      	bne.n	800f3a4 <UART_SetConfig+0x268>
 800f342:	4b4c      	ldr	r3, [pc, #304]	; (800f474 <UART_SetConfig+0x338>)
 800f344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f346:	f003 0307 	and.w	r3, r3, #7
 800f34a:	2b05      	cmp	r3, #5
 800f34c:	d826      	bhi.n	800f39c <UART_SetConfig+0x260>
 800f34e:	a201      	add	r2, pc, #4	; (adr r2, 800f354 <UART_SetConfig+0x218>)
 800f350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f354:	0800f36d 	.word	0x0800f36d
 800f358:	0800f375 	.word	0x0800f375
 800f35c:	0800f37d 	.word	0x0800f37d
 800f360:	0800f385 	.word	0x0800f385
 800f364:	0800f38d 	.word	0x0800f38d
 800f368:	0800f395 	.word	0x0800f395
 800f36c:	2300      	movs	r3, #0
 800f36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f372:	e2ba      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f374:	2304      	movs	r3, #4
 800f376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f37a:	e2b6      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f37c:	2308      	movs	r3, #8
 800f37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f382:	e2b2      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f384:	2310      	movs	r3, #16
 800f386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f38a:	e2ae      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f38c:	2320      	movs	r3, #32
 800f38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f392:	e2aa      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f394:	2340      	movs	r3, #64	; 0x40
 800f396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f39a:	e2a6      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f39c:	2380      	movs	r3, #128	; 0x80
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3a2:	e2a2      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4a35      	ldr	r2, [pc, #212]	; (800f480 <UART_SetConfig+0x344>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d130      	bne.n	800f410 <UART_SetConfig+0x2d4>
 800f3ae:	4b31      	ldr	r3, [pc, #196]	; (800f474 <UART_SetConfig+0x338>)
 800f3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b2:	f003 0307 	and.w	r3, r3, #7
 800f3b6:	2b05      	cmp	r3, #5
 800f3b8:	d826      	bhi.n	800f408 <UART_SetConfig+0x2cc>
 800f3ba:	a201      	add	r2, pc, #4	; (adr r2, 800f3c0 <UART_SetConfig+0x284>)
 800f3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c0:	0800f3d9 	.word	0x0800f3d9
 800f3c4:	0800f3e1 	.word	0x0800f3e1
 800f3c8:	0800f3e9 	.word	0x0800f3e9
 800f3cc:	0800f3f1 	.word	0x0800f3f1
 800f3d0:	0800f3f9 	.word	0x0800f3f9
 800f3d4:	0800f401 	.word	0x0800f401
 800f3d8:	2300      	movs	r3, #0
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3de:	e284      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f3e0:	2304      	movs	r3, #4
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3e6:	e280      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f3e8:	2308      	movs	r3, #8
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ee:	e27c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f3f0:	2310      	movs	r3, #16
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3f6:	e278      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f3f8:	2320      	movs	r3, #32
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3fe:	e274      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f400:	2340      	movs	r3, #64	; 0x40
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f406:	e270      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f408:	2380      	movs	r3, #128	; 0x80
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40e:	e26c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a1b      	ldr	r2, [pc, #108]	; (800f484 <UART_SetConfig+0x348>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d142      	bne.n	800f4a0 <UART_SetConfig+0x364>
 800f41a:	4b16      	ldr	r3, [pc, #88]	; (800f474 <UART_SetConfig+0x338>)
 800f41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f41e:	f003 0307 	and.w	r3, r3, #7
 800f422:	2b05      	cmp	r3, #5
 800f424:	d838      	bhi.n	800f498 <UART_SetConfig+0x35c>
 800f426:	a201      	add	r2, pc, #4	; (adr r2, 800f42c <UART_SetConfig+0x2f0>)
 800f428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42c:	0800f445 	.word	0x0800f445
 800f430:	0800f44d 	.word	0x0800f44d
 800f434:	0800f455 	.word	0x0800f455
 800f438:	0800f45d 	.word	0x0800f45d
 800f43c:	0800f489 	.word	0x0800f489
 800f440:	0800f491 	.word	0x0800f491
 800f444:	2300      	movs	r3, #0
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f44a:	e24e      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f44c:	2304      	movs	r3, #4
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f452:	e24a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f454:	2308      	movs	r3, #8
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f45a:	e246      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f45c:	2310      	movs	r3, #16
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f462:	e242      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f464:	cfff69f3 	.word	0xcfff69f3
 800f468:	58000c00 	.word	0x58000c00
 800f46c:	11fff4ff 	.word	0x11fff4ff
 800f470:	40011000 	.word	0x40011000
 800f474:	58024400 	.word	0x58024400
 800f478:	40004400 	.word	0x40004400
 800f47c:	40004800 	.word	0x40004800
 800f480:	40004c00 	.word	0x40004c00
 800f484:	40005000 	.word	0x40005000
 800f488:	2320      	movs	r3, #32
 800f48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48e:	e22c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f490:	2340      	movs	r3, #64	; 0x40
 800f492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f496:	e228      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f498:	2380      	movs	r3, #128	; 0x80
 800f49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f49e:	e224      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4ab1      	ldr	r2, [pc, #708]	; (800f76c <UART_SetConfig+0x630>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d176      	bne.n	800f598 <UART_SetConfig+0x45c>
 800f4aa:	4bb1      	ldr	r3, [pc, #708]	; (800f770 <UART_SetConfig+0x634>)
 800f4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4b2:	2b28      	cmp	r3, #40	; 0x28
 800f4b4:	d86c      	bhi.n	800f590 <UART_SetConfig+0x454>
 800f4b6:	a201      	add	r2, pc, #4	; (adr r2, 800f4bc <UART_SetConfig+0x380>)
 800f4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4bc:	0800f561 	.word	0x0800f561
 800f4c0:	0800f591 	.word	0x0800f591
 800f4c4:	0800f591 	.word	0x0800f591
 800f4c8:	0800f591 	.word	0x0800f591
 800f4cc:	0800f591 	.word	0x0800f591
 800f4d0:	0800f591 	.word	0x0800f591
 800f4d4:	0800f591 	.word	0x0800f591
 800f4d8:	0800f591 	.word	0x0800f591
 800f4dc:	0800f569 	.word	0x0800f569
 800f4e0:	0800f591 	.word	0x0800f591
 800f4e4:	0800f591 	.word	0x0800f591
 800f4e8:	0800f591 	.word	0x0800f591
 800f4ec:	0800f591 	.word	0x0800f591
 800f4f0:	0800f591 	.word	0x0800f591
 800f4f4:	0800f591 	.word	0x0800f591
 800f4f8:	0800f591 	.word	0x0800f591
 800f4fc:	0800f571 	.word	0x0800f571
 800f500:	0800f591 	.word	0x0800f591
 800f504:	0800f591 	.word	0x0800f591
 800f508:	0800f591 	.word	0x0800f591
 800f50c:	0800f591 	.word	0x0800f591
 800f510:	0800f591 	.word	0x0800f591
 800f514:	0800f591 	.word	0x0800f591
 800f518:	0800f591 	.word	0x0800f591
 800f51c:	0800f579 	.word	0x0800f579
 800f520:	0800f591 	.word	0x0800f591
 800f524:	0800f591 	.word	0x0800f591
 800f528:	0800f591 	.word	0x0800f591
 800f52c:	0800f591 	.word	0x0800f591
 800f530:	0800f591 	.word	0x0800f591
 800f534:	0800f591 	.word	0x0800f591
 800f538:	0800f591 	.word	0x0800f591
 800f53c:	0800f581 	.word	0x0800f581
 800f540:	0800f591 	.word	0x0800f591
 800f544:	0800f591 	.word	0x0800f591
 800f548:	0800f591 	.word	0x0800f591
 800f54c:	0800f591 	.word	0x0800f591
 800f550:	0800f591 	.word	0x0800f591
 800f554:	0800f591 	.word	0x0800f591
 800f558:	0800f591 	.word	0x0800f591
 800f55c:	0800f589 	.word	0x0800f589
 800f560:	2301      	movs	r3, #1
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f566:	e1c0      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f568:	2304      	movs	r3, #4
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f56e:	e1bc      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f570:	2308      	movs	r3, #8
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f576:	e1b8      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f578:	2310      	movs	r3, #16
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57e:	e1b4      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f580:	2320      	movs	r3, #32
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f586:	e1b0      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f588:	2340      	movs	r3, #64	; 0x40
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58e:	e1ac      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f590:	2380      	movs	r3, #128	; 0x80
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f596:	e1a8      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a75      	ldr	r2, [pc, #468]	; (800f774 <UART_SetConfig+0x638>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d130      	bne.n	800f604 <UART_SetConfig+0x4c8>
 800f5a2:	4b73      	ldr	r3, [pc, #460]	; (800f770 <UART_SetConfig+0x634>)
 800f5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5a6:	f003 0307 	and.w	r3, r3, #7
 800f5aa:	2b05      	cmp	r3, #5
 800f5ac:	d826      	bhi.n	800f5fc <UART_SetConfig+0x4c0>
 800f5ae:	a201      	add	r2, pc, #4	; (adr r2, 800f5b4 <UART_SetConfig+0x478>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f5cd 	.word	0x0800f5cd
 800f5b8:	0800f5d5 	.word	0x0800f5d5
 800f5bc:	0800f5dd 	.word	0x0800f5dd
 800f5c0:	0800f5e5 	.word	0x0800f5e5
 800f5c4:	0800f5ed 	.word	0x0800f5ed
 800f5c8:	0800f5f5 	.word	0x0800f5f5
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d2:	e18a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5d4:	2304      	movs	r3, #4
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5da:	e186      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5dc:	2308      	movs	r3, #8
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e2:	e182      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5e4:	2310      	movs	r3, #16
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ea:	e17e      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5ec:	2320      	movs	r3, #32
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f2:	e17a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5f4:	2340      	movs	r3, #64	; 0x40
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fa:	e176      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f5fc:	2380      	movs	r3, #128	; 0x80
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e172      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a5b      	ldr	r2, [pc, #364]	; (800f778 <UART_SetConfig+0x63c>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d130      	bne.n	800f670 <UART_SetConfig+0x534>
 800f60e:	4b58      	ldr	r3, [pc, #352]	; (800f770 <UART_SetConfig+0x634>)
 800f610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f612:	f003 0307 	and.w	r3, r3, #7
 800f616:	2b05      	cmp	r3, #5
 800f618:	d826      	bhi.n	800f668 <UART_SetConfig+0x52c>
 800f61a:	a201      	add	r2, pc, #4	; (adr r2, 800f620 <UART_SetConfig+0x4e4>)
 800f61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f620:	0800f639 	.word	0x0800f639
 800f624:	0800f641 	.word	0x0800f641
 800f628:	0800f649 	.word	0x0800f649
 800f62c:	0800f651 	.word	0x0800f651
 800f630:	0800f659 	.word	0x0800f659
 800f634:	0800f661 	.word	0x0800f661
 800f638:	2300      	movs	r3, #0
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63e:	e154      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f640:	2304      	movs	r3, #4
 800f642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f646:	e150      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f648:	2308      	movs	r3, #8
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64e:	e14c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f650:	2310      	movs	r3, #16
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f656:	e148      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f658:	2320      	movs	r3, #32
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65e:	e144      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f660:	2340      	movs	r3, #64	; 0x40
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f666:	e140      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f668:	2380      	movs	r3, #128	; 0x80
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e13c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a41      	ldr	r2, [pc, #260]	; (800f77c <UART_SetConfig+0x640>)
 800f676:	4293      	cmp	r3, r2
 800f678:	f040 8082 	bne.w	800f780 <UART_SetConfig+0x644>
 800f67c:	4b3c      	ldr	r3, [pc, #240]	; (800f770 <UART_SetConfig+0x634>)
 800f67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f684:	2b28      	cmp	r3, #40	; 0x28
 800f686:	d86d      	bhi.n	800f764 <UART_SetConfig+0x628>
 800f688:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <UART_SetConfig+0x554>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	0800f735 	.word	0x0800f735
 800f694:	0800f765 	.word	0x0800f765
 800f698:	0800f765 	.word	0x0800f765
 800f69c:	0800f765 	.word	0x0800f765
 800f6a0:	0800f765 	.word	0x0800f765
 800f6a4:	0800f765 	.word	0x0800f765
 800f6a8:	0800f765 	.word	0x0800f765
 800f6ac:	0800f765 	.word	0x0800f765
 800f6b0:	0800f73d 	.word	0x0800f73d
 800f6b4:	0800f765 	.word	0x0800f765
 800f6b8:	0800f765 	.word	0x0800f765
 800f6bc:	0800f765 	.word	0x0800f765
 800f6c0:	0800f765 	.word	0x0800f765
 800f6c4:	0800f765 	.word	0x0800f765
 800f6c8:	0800f765 	.word	0x0800f765
 800f6cc:	0800f765 	.word	0x0800f765
 800f6d0:	0800f745 	.word	0x0800f745
 800f6d4:	0800f765 	.word	0x0800f765
 800f6d8:	0800f765 	.word	0x0800f765
 800f6dc:	0800f765 	.word	0x0800f765
 800f6e0:	0800f765 	.word	0x0800f765
 800f6e4:	0800f765 	.word	0x0800f765
 800f6e8:	0800f765 	.word	0x0800f765
 800f6ec:	0800f765 	.word	0x0800f765
 800f6f0:	0800f74d 	.word	0x0800f74d
 800f6f4:	0800f765 	.word	0x0800f765
 800f6f8:	0800f765 	.word	0x0800f765
 800f6fc:	0800f765 	.word	0x0800f765
 800f700:	0800f765 	.word	0x0800f765
 800f704:	0800f765 	.word	0x0800f765
 800f708:	0800f765 	.word	0x0800f765
 800f70c:	0800f765 	.word	0x0800f765
 800f710:	0800f755 	.word	0x0800f755
 800f714:	0800f765 	.word	0x0800f765
 800f718:	0800f765 	.word	0x0800f765
 800f71c:	0800f765 	.word	0x0800f765
 800f720:	0800f765 	.word	0x0800f765
 800f724:	0800f765 	.word	0x0800f765
 800f728:	0800f765 	.word	0x0800f765
 800f72c:	0800f765 	.word	0x0800f765
 800f730:	0800f75d 	.word	0x0800f75d
 800f734:	2301      	movs	r3, #1
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73a:	e0d6      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f73c:	2304      	movs	r3, #4
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f742:	e0d2      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f744:	2308      	movs	r3, #8
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74a:	e0ce      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f74c:	2310      	movs	r3, #16
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f752:	e0ca      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f754:	2320      	movs	r3, #32
 800f756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75a:	e0c6      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f75c:	2340      	movs	r3, #64	; 0x40
 800f75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f762:	e0c2      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f764:	2380      	movs	r3, #128	; 0x80
 800f766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76a:	e0be      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f76c:	40011400 	.word	0x40011400
 800f770:	58024400 	.word	0x58024400
 800f774:	40007800 	.word	0x40007800
 800f778:	40007c00 	.word	0x40007c00
 800f77c:	40011800 	.word	0x40011800
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4aad      	ldr	r2, [pc, #692]	; (800fa3c <UART_SetConfig+0x900>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d176      	bne.n	800f878 <UART_SetConfig+0x73c>
 800f78a:	4bad      	ldr	r3, [pc, #692]	; (800fa40 <UART_SetConfig+0x904>)
 800f78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f78e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f792:	2b28      	cmp	r3, #40	; 0x28
 800f794:	d86c      	bhi.n	800f870 <UART_SetConfig+0x734>
 800f796:	a201      	add	r2, pc, #4	; (adr r2, 800f79c <UART_SetConfig+0x660>)
 800f798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f79c:	0800f841 	.word	0x0800f841
 800f7a0:	0800f871 	.word	0x0800f871
 800f7a4:	0800f871 	.word	0x0800f871
 800f7a8:	0800f871 	.word	0x0800f871
 800f7ac:	0800f871 	.word	0x0800f871
 800f7b0:	0800f871 	.word	0x0800f871
 800f7b4:	0800f871 	.word	0x0800f871
 800f7b8:	0800f871 	.word	0x0800f871
 800f7bc:	0800f849 	.word	0x0800f849
 800f7c0:	0800f871 	.word	0x0800f871
 800f7c4:	0800f871 	.word	0x0800f871
 800f7c8:	0800f871 	.word	0x0800f871
 800f7cc:	0800f871 	.word	0x0800f871
 800f7d0:	0800f871 	.word	0x0800f871
 800f7d4:	0800f871 	.word	0x0800f871
 800f7d8:	0800f871 	.word	0x0800f871
 800f7dc:	0800f851 	.word	0x0800f851
 800f7e0:	0800f871 	.word	0x0800f871
 800f7e4:	0800f871 	.word	0x0800f871
 800f7e8:	0800f871 	.word	0x0800f871
 800f7ec:	0800f871 	.word	0x0800f871
 800f7f0:	0800f871 	.word	0x0800f871
 800f7f4:	0800f871 	.word	0x0800f871
 800f7f8:	0800f871 	.word	0x0800f871
 800f7fc:	0800f859 	.word	0x0800f859
 800f800:	0800f871 	.word	0x0800f871
 800f804:	0800f871 	.word	0x0800f871
 800f808:	0800f871 	.word	0x0800f871
 800f80c:	0800f871 	.word	0x0800f871
 800f810:	0800f871 	.word	0x0800f871
 800f814:	0800f871 	.word	0x0800f871
 800f818:	0800f871 	.word	0x0800f871
 800f81c:	0800f861 	.word	0x0800f861
 800f820:	0800f871 	.word	0x0800f871
 800f824:	0800f871 	.word	0x0800f871
 800f828:	0800f871 	.word	0x0800f871
 800f82c:	0800f871 	.word	0x0800f871
 800f830:	0800f871 	.word	0x0800f871
 800f834:	0800f871 	.word	0x0800f871
 800f838:	0800f871 	.word	0x0800f871
 800f83c:	0800f869 	.word	0x0800f869
 800f840:	2301      	movs	r3, #1
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e050      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f848:	2304      	movs	r3, #4
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e04c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f850:	2308      	movs	r3, #8
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f856:	e048      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f858:	2310      	movs	r3, #16
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e044      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f860:	2320      	movs	r3, #32
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e040      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f868:	2340      	movs	r3, #64	; 0x40
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e03c      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f870:	2380      	movs	r3, #128	; 0x80
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e038      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a71      	ldr	r2, [pc, #452]	; (800fa44 <UART_SetConfig+0x908>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d130      	bne.n	800f8e4 <UART_SetConfig+0x7a8>
 800f882:	4b6f      	ldr	r3, [pc, #444]	; (800fa40 <UART_SetConfig+0x904>)
 800f884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f886:	f003 0307 	and.w	r3, r3, #7
 800f88a:	2b05      	cmp	r3, #5
 800f88c:	d826      	bhi.n	800f8dc <UART_SetConfig+0x7a0>
 800f88e:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <UART_SetConfig+0x758>)
 800f890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f894:	0800f8ad 	.word	0x0800f8ad
 800f898:	0800f8b5 	.word	0x0800f8b5
 800f89c:	0800f8bd 	.word	0x0800f8bd
 800f8a0:	0800f8c5 	.word	0x0800f8c5
 800f8a4:	0800f8cd 	.word	0x0800f8cd
 800f8a8:	0800f8d5 	.word	0x0800f8d5
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e01a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ba:	e016      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8bc:	2308      	movs	r3, #8
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c2:	e012      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ca:	e00e      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8cc:	2320      	movs	r3, #32
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d2:	e00a      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e006      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8dc:	2380      	movs	r3, #128	; 0x80
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e002      	b.n	800f8ea <UART_SetConfig+0x7ae>
 800f8e4:	2380      	movs	r3, #128	; 0x80
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a55      	ldr	r2, [pc, #340]	; (800fa44 <UART_SetConfig+0x908>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	f040 80f8 	bne.w	800fae6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f8f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8fa:	2b20      	cmp	r3, #32
 800f8fc:	dc46      	bgt.n	800f98c <UART_SetConfig+0x850>
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	db75      	blt.n	800f9ee <UART_SetConfig+0x8b2>
 800f902:	3b02      	subs	r3, #2
 800f904:	2b1e      	cmp	r3, #30
 800f906:	d872      	bhi.n	800f9ee <UART_SetConfig+0x8b2>
 800f908:	a201      	add	r2, pc, #4	; (adr r2, 800f910 <UART_SetConfig+0x7d4>)
 800f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90e:	bf00      	nop
 800f910:	0800f993 	.word	0x0800f993
 800f914:	0800f9ef 	.word	0x0800f9ef
 800f918:	0800f99b 	.word	0x0800f99b
 800f91c:	0800f9ef 	.word	0x0800f9ef
 800f920:	0800f9ef 	.word	0x0800f9ef
 800f924:	0800f9ef 	.word	0x0800f9ef
 800f928:	0800f9ab 	.word	0x0800f9ab
 800f92c:	0800f9ef 	.word	0x0800f9ef
 800f930:	0800f9ef 	.word	0x0800f9ef
 800f934:	0800f9ef 	.word	0x0800f9ef
 800f938:	0800f9ef 	.word	0x0800f9ef
 800f93c:	0800f9ef 	.word	0x0800f9ef
 800f940:	0800f9ef 	.word	0x0800f9ef
 800f944:	0800f9ef 	.word	0x0800f9ef
 800f948:	0800f9bb 	.word	0x0800f9bb
 800f94c:	0800f9ef 	.word	0x0800f9ef
 800f950:	0800f9ef 	.word	0x0800f9ef
 800f954:	0800f9ef 	.word	0x0800f9ef
 800f958:	0800f9ef 	.word	0x0800f9ef
 800f95c:	0800f9ef 	.word	0x0800f9ef
 800f960:	0800f9ef 	.word	0x0800f9ef
 800f964:	0800f9ef 	.word	0x0800f9ef
 800f968:	0800f9ef 	.word	0x0800f9ef
 800f96c:	0800f9ef 	.word	0x0800f9ef
 800f970:	0800f9ef 	.word	0x0800f9ef
 800f974:	0800f9ef 	.word	0x0800f9ef
 800f978:	0800f9ef 	.word	0x0800f9ef
 800f97c:	0800f9ef 	.word	0x0800f9ef
 800f980:	0800f9ef 	.word	0x0800f9ef
 800f984:	0800f9ef 	.word	0x0800f9ef
 800f988:	0800f9e1 	.word	0x0800f9e1
 800f98c:	2b40      	cmp	r3, #64	; 0x40
 800f98e:	d02a      	beq.n	800f9e6 <UART_SetConfig+0x8aa>
 800f990:	e02d      	b.n	800f9ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f992:	f7fb fcc9 	bl	800b328 <HAL_RCCEx_GetD3PCLK1Freq>
 800f996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f998:	e02f      	b.n	800f9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fb fcd8 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9a8:	e027      	b.n	800f9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9aa:	f107 0318 	add.w	r3, r7, #24
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fb fe24 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b8:	e01f      	b.n	800f9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9ba:	4b21      	ldr	r3, [pc, #132]	; (800fa40 <UART_SetConfig+0x904>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f003 0320 	and.w	r3, r3, #32
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9c6:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <UART_SetConfig+0x904>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	08db      	lsrs	r3, r3, #3
 800f9cc:	f003 0303 	and.w	r3, r3, #3
 800f9d0:	4a1d      	ldr	r2, [pc, #116]	; (800fa48 <UART_SetConfig+0x90c>)
 800f9d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9d8:	e00f      	b.n	800f9fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f9da:	4b1b      	ldr	r3, [pc, #108]	; (800fa48 <UART_SetConfig+0x90c>)
 800f9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9de:	e00c      	b.n	800f9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9e0:	4b1a      	ldr	r3, [pc, #104]	; (800fa4c <UART_SetConfig+0x910>)
 800f9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e4:	e009      	b.n	800f9fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9ec:	e005      	b.n	800f9fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f9f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f000 81ee 	beq.w	800fdde <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa06:	4a12      	ldr	r2, [pc, #72]	; (800fa50 <UART_SetConfig+0x914>)
 800fa08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa10:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa14:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	005b      	lsls	r3, r3, #1
 800fa1e:	4413      	add	r3, r2
 800fa20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d305      	bcc.n	800fa32 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d910      	bls.n	800fa54 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fa38:	e1d1      	b.n	800fdde <UART_SetConfig+0xca2>
 800fa3a:	bf00      	nop
 800fa3c:	40011c00 	.word	0x40011c00
 800fa40:	58024400 	.word	0x58024400
 800fa44:	58000c00 	.word	0x58000c00
 800fa48:	03d09000 	.word	0x03d09000
 800fa4c:	003d0900 	.word	0x003d0900
 800fa50:	0801a3a0 	.word	0x0801a3a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa56:	2200      	movs	r2, #0
 800fa58:	60bb      	str	r3, [r7, #8]
 800fa5a:	60fa      	str	r2, [r7, #12]
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa60:	4ac0      	ldr	r2, [pc, #768]	; (800fd64 <UART_SetConfig+0xc28>)
 800fa62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	2200      	movs	r2, #0
 800fa6a:	603b      	str	r3, [r7, #0]
 800fa6c:	607a      	str	r2, [r7, #4]
 800fa6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa76:	f7f0 fe5f 	bl	8000738 <__aeabi_uldivmod>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	4610      	mov	r0, r2
 800fa80:	4619      	mov	r1, r3
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	f04f 0300 	mov.w	r3, #0
 800fa8a:	020b      	lsls	r3, r1, #8
 800fa8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa90:	0202      	lsls	r2, r0, #8
 800fa92:	6979      	ldr	r1, [r7, #20]
 800fa94:	6849      	ldr	r1, [r1, #4]
 800fa96:	0849      	lsrs	r1, r1, #1
 800fa98:	2000      	movs	r0, #0
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	eb12 0804 	adds.w	r8, r2, r4
 800faa2:	eb43 0905 	adc.w	r9, r3, r5
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	469a      	mov	sl, r3
 800faae:	4693      	mov	fp, r2
 800fab0:	4652      	mov	r2, sl
 800fab2:	465b      	mov	r3, fp
 800fab4:	4640      	mov	r0, r8
 800fab6:	4649      	mov	r1, r9
 800fab8:	f7f0 fe3e 	bl	8000738 <__aeabi_uldivmod>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	4613      	mov	r3, r2
 800fac2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800faca:	d308      	bcc.n	800fade <UART_SetConfig+0x9a2>
 800facc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800face:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fad2:	d204      	bcs.n	800fade <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fada:	60da      	str	r2, [r3, #12]
 800fadc:	e17f      	b.n	800fdde <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fade:	2301      	movs	r3, #1
 800fae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fae4:	e17b      	b.n	800fdde <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faee:	f040 80bd 	bne.w	800fc6c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800faf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800faf6:	2b20      	cmp	r3, #32
 800faf8:	dc48      	bgt.n	800fb8c <UART_SetConfig+0xa50>
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	db7b      	blt.n	800fbf6 <UART_SetConfig+0xaba>
 800fafe:	2b20      	cmp	r3, #32
 800fb00:	d879      	bhi.n	800fbf6 <UART_SetConfig+0xaba>
 800fb02:	a201      	add	r2, pc, #4	; (adr r2, 800fb08 <UART_SetConfig+0x9cc>)
 800fb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb08:	0800fb93 	.word	0x0800fb93
 800fb0c:	0800fb9b 	.word	0x0800fb9b
 800fb10:	0800fbf7 	.word	0x0800fbf7
 800fb14:	0800fbf7 	.word	0x0800fbf7
 800fb18:	0800fba3 	.word	0x0800fba3
 800fb1c:	0800fbf7 	.word	0x0800fbf7
 800fb20:	0800fbf7 	.word	0x0800fbf7
 800fb24:	0800fbf7 	.word	0x0800fbf7
 800fb28:	0800fbb3 	.word	0x0800fbb3
 800fb2c:	0800fbf7 	.word	0x0800fbf7
 800fb30:	0800fbf7 	.word	0x0800fbf7
 800fb34:	0800fbf7 	.word	0x0800fbf7
 800fb38:	0800fbf7 	.word	0x0800fbf7
 800fb3c:	0800fbf7 	.word	0x0800fbf7
 800fb40:	0800fbf7 	.word	0x0800fbf7
 800fb44:	0800fbf7 	.word	0x0800fbf7
 800fb48:	0800fbc3 	.word	0x0800fbc3
 800fb4c:	0800fbf7 	.word	0x0800fbf7
 800fb50:	0800fbf7 	.word	0x0800fbf7
 800fb54:	0800fbf7 	.word	0x0800fbf7
 800fb58:	0800fbf7 	.word	0x0800fbf7
 800fb5c:	0800fbf7 	.word	0x0800fbf7
 800fb60:	0800fbf7 	.word	0x0800fbf7
 800fb64:	0800fbf7 	.word	0x0800fbf7
 800fb68:	0800fbf7 	.word	0x0800fbf7
 800fb6c:	0800fbf7 	.word	0x0800fbf7
 800fb70:	0800fbf7 	.word	0x0800fbf7
 800fb74:	0800fbf7 	.word	0x0800fbf7
 800fb78:	0800fbf7 	.word	0x0800fbf7
 800fb7c:	0800fbf7 	.word	0x0800fbf7
 800fb80:	0800fbf7 	.word	0x0800fbf7
 800fb84:	0800fbf7 	.word	0x0800fbf7
 800fb88:	0800fbe9 	.word	0x0800fbe9
 800fb8c:	2b40      	cmp	r3, #64	; 0x40
 800fb8e:	d02e      	beq.n	800fbee <UART_SetConfig+0xab2>
 800fb90:	e031      	b.n	800fbf6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb92:	f7f9 fd2b 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800fb96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb98:	e033      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb9a:	f7f9 fd3d 	bl	8009618 <HAL_RCC_GetPCLK2Freq>
 800fb9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fba0:	e02f      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fb fbd4 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbb0:	e027      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbb2:	f107 0318 	add.w	r3, r7, #24
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7fb fd20 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbc0:	e01f      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbc2:	4b69      	ldr	r3, [pc, #420]	; (800fd68 <UART_SetConfig+0xc2c>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f003 0320 	and.w	r3, r3, #32
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d009      	beq.n	800fbe2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbce:	4b66      	ldr	r3, [pc, #408]	; (800fd68 <UART_SetConfig+0xc2c>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	08db      	lsrs	r3, r3, #3
 800fbd4:	f003 0303 	and.w	r3, r3, #3
 800fbd8:	4a64      	ldr	r2, [pc, #400]	; (800fd6c <UART_SetConfig+0xc30>)
 800fbda:	fa22 f303 	lsr.w	r3, r2, r3
 800fbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fbe0:	e00f      	b.n	800fc02 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fbe2:	4b62      	ldr	r3, [pc, #392]	; (800fd6c <UART_SetConfig+0xc30>)
 800fbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbe6:	e00c      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbe8:	4b61      	ldr	r3, [pc, #388]	; (800fd70 <UART_SetConfig+0xc34>)
 800fbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbec:	e009      	b.n	800fc02 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbf4:	e005      	b.n	800fc02 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 80ea 	beq.w	800fdde <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0e:	4a55      	ldr	r2, [pc, #340]	; (800fd64 <UART_SetConfig+0xc28>)
 800fc10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc14:	461a      	mov	r2, r3
 800fc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc1c:	005a      	lsls	r2, r3, #1
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	085b      	lsrs	r3, r3, #1
 800fc24:	441a      	add	r2, r3
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	2b0f      	cmp	r3, #15
 800fc34:	d916      	bls.n	800fc64 <UART_SetConfig+0xb28>
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc3c:	d212      	bcs.n	800fc64 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	f023 030f 	bic.w	r3, r3, #15
 800fc46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4a:	085b      	lsrs	r3, r3, #1
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	f003 0307 	and.w	r3, r3, #7
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fc56:	4313      	orrs	r3, r2
 800fc58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc60:	60da      	str	r2, [r3, #12]
 800fc62:	e0bc      	b.n	800fdde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fc64:	2301      	movs	r3, #1
 800fc66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc6a:	e0b8      	b.n	800fdde <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fc6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc70:	2b20      	cmp	r3, #32
 800fc72:	dc4b      	bgt.n	800fd0c <UART_SetConfig+0xbd0>
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f2c0 8087 	blt.w	800fd88 <UART_SetConfig+0xc4c>
 800fc7a:	2b20      	cmp	r3, #32
 800fc7c:	f200 8084 	bhi.w	800fd88 <UART_SetConfig+0xc4c>
 800fc80:	a201      	add	r2, pc, #4	; (adr r2, 800fc88 <UART_SetConfig+0xb4c>)
 800fc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc86:	bf00      	nop
 800fc88:	0800fd13 	.word	0x0800fd13
 800fc8c:	0800fd1b 	.word	0x0800fd1b
 800fc90:	0800fd89 	.word	0x0800fd89
 800fc94:	0800fd89 	.word	0x0800fd89
 800fc98:	0800fd23 	.word	0x0800fd23
 800fc9c:	0800fd89 	.word	0x0800fd89
 800fca0:	0800fd89 	.word	0x0800fd89
 800fca4:	0800fd89 	.word	0x0800fd89
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd89 	.word	0x0800fd89
 800fcb0:	0800fd89 	.word	0x0800fd89
 800fcb4:	0800fd89 	.word	0x0800fd89
 800fcb8:	0800fd89 	.word	0x0800fd89
 800fcbc:	0800fd89 	.word	0x0800fd89
 800fcc0:	0800fd89 	.word	0x0800fd89
 800fcc4:	0800fd89 	.word	0x0800fd89
 800fcc8:	0800fd43 	.word	0x0800fd43
 800fccc:	0800fd89 	.word	0x0800fd89
 800fcd0:	0800fd89 	.word	0x0800fd89
 800fcd4:	0800fd89 	.word	0x0800fd89
 800fcd8:	0800fd89 	.word	0x0800fd89
 800fcdc:	0800fd89 	.word	0x0800fd89
 800fce0:	0800fd89 	.word	0x0800fd89
 800fce4:	0800fd89 	.word	0x0800fd89
 800fce8:	0800fd89 	.word	0x0800fd89
 800fcec:	0800fd89 	.word	0x0800fd89
 800fcf0:	0800fd89 	.word	0x0800fd89
 800fcf4:	0800fd89 	.word	0x0800fd89
 800fcf8:	0800fd89 	.word	0x0800fd89
 800fcfc:	0800fd89 	.word	0x0800fd89
 800fd00:	0800fd89 	.word	0x0800fd89
 800fd04:	0800fd89 	.word	0x0800fd89
 800fd08:	0800fd7b 	.word	0x0800fd7b
 800fd0c:	2b40      	cmp	r3, #64	; 0x40
 800fd0e:	d037      	beq.n	800fd80 <UART_SetConfig+0xc44>
 800fd10:	e03a      	b.n	800fd88 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd12:	f7f9 fc6b 	bl	80095ec <HAL_RCC_GetPCLK1Freq>
 800fd16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd18:	e03c      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd1a:	f7f9 fc7d 	bl	8009618 <HAL_RCC_GetPCLK2Freq>
 800fd1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd20:	e038      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fb fb14 	bl	800b354 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd30:	e030      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd32:	f107 0318 	add.w	r3, r7, #24
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fb fc60 	bl	800b5fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd40:	e028      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd42:	4b09      	ldr	r3, [pc, #36]	; (800fd68 <UART_SetConfig+0xc2c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f003 0320 	and.w	r3, r3, #32
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d012      	beq.n	800fd74 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd4e:	4b06      	ldr	r3, [pc, #24]	; (800fd68 <UART_SetConfig+0xc2c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	08db      	lsrs	r3, r3, #3
 800fd54:	f003 0303 	and.w	r3, r3, #3
 800fd58:	4a04      	ldr	r2, [pc, #16]	; (800fd6c <UART_SetConfig+0xc30>)
 800fd5a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd60:	e018      	b.n	800fd94 <UART_SetConfig+0xc58>
 800fd62:	bf00      	nop
 800fd64:	0801a3a0 	.word	0x0801a3a0
 800fd68:	58024400 	.word	0x58024400
 800fd6c:	03d09000 	.word	0x03d09000
 800fd70:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fd74:	4b24      	ldr	r3, [pc, #144]	; (800fe08 <UART_SetConfig+0xccc>)
 800fd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd78:	e00c      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd7a:	4b24      	ldr	r3, [pc, #144]	; (800fe0c <UART_SetConfig+0xcd0>)
 800fd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd7e:	e009      	b.n	800fd94 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd86:	e005      	b.n	800fd94 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd92:	bf00      	nop
    }

    if (pclk != 0U)
 800fd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d021      	beq.n	800fdde <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9e:	4a1c      	ldr	r2, [pc, #112]	; (800fe10 <UART_SetConfig+0xcd4>)
 800fda0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fda4:	461a      	mov	r2, r3
 800fda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda8:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	085b      	lsrs	r3, r3, #1
 800fdb2:	441a      	add	r2, r3
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdbc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc0:	2b0f      	cmp	r3, #15
 800fdc2:	d909      	bls.n	800fdd8 <UART_SetConfig+0xc9c>
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdca:	d205      	bcs.n	800fdd8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	60da      	str	r2, [r3, #12]
 800fdd6:	e002      	b.n	800fdde <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fdd8:	2301      	movs	r3, #1
 800fdda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fdfa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3748      	adds	r7, #72	; 0x48
 800fe02:	46bd      	mov	sp, r7
 800fe04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fe08:	03d09000 	.word	0x03d09000
 800fe0c:	003d0900 	.word	0x003d0900
 800fe10:	0801a3a0 	.word	0x0801a3a0

0800fe14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00a      	beq.n	800fe3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	430a      	orrs	r2, r1
 800fe3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00a      	beq.n	800fe60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	430a      	orrs	r2, r1
 800fe5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe64:	f003 0304 	and.w	r3, r3, #4
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00a      	beq.n	800fe82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	430a      	orrs	r2, r1
 800fe80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe86:	f003 0308 	and.w	r3, r3, #8
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00a      	beq.n	800fea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	430a      	orrs	r2, r1
 800fea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea8:	f003 0310 	and.w	r3, r3, #16
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00a      	beq.n	800fec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	430a      	orrs	r2, r1
 800fec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feca:	f003 0320 	and.w	r3, r3, #32
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00a      	beq.n	800fee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	689b      	ldr	r3, [r3, #8]
 800fed8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	430a      	orrs	r2, r1
 800fee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d01a      	beq.n	800ff2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	430a      	orrs	r2, r1
 800ff08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff12:	d10a      	bne.n	800ff2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00a      	beq.n	800ff4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	430a      	orrs	r2, r1
 800ff4a:	605a      	str	r2, [r3, #4]
  }
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b098      	sub	sp, #96	; 0x60
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff68:	f7f3 f894 	bl	8003094 <HAL_GetTick>
 800ff6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f003 0308 	and.w	r3, r3, #8
 800ff78:	2b08      	cmp	r3, #8
 800ff7a:	d12f      	bne.n	800ffdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff84:	2200      	movs	r2, #0
 800ff86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 f88e 	bl	80100ac <UART_WaitOnFlagUntilTimeout>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d022      	beq.n	800ffdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	e853 3f00 	ldrex	r3, [r3]
 800ffa2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffaa:	653b      	str	r3, [r7, #80]	; 0x50
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffb4:	647b      	str	r3, [r7, #68]	; 0x44
 800ffb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffbc:	e841 2300 	strex	r3, r2, [r1]
 800ffc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d1e6      	bne.n	800ff96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2220      	movs	r2, #32
 800ffcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffd8:	2303      	movs	r3, #3
 800ffda:	e063      	b.n	80100a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	f003 0304 	and.w	r3, r3, #4
 800ffe6:	2b04      	cmp	r3, #4
 800ffe8:	d149      	bne.n	801007e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fff2:	2200      	movs	r2, #0
 800fff4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f857 	bl	80100ac <UART_WaitOnFlagUntilTimeout>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d03c      	beq.n	801007e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	e853 3f00 	ldrex	r3, [r3]
 8010010:	623b      	str	r3, [r7, #32]
   return(result);
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010018:	64fb      	str	r3, [r7, #76]	; 0x4c
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010022:	633b      	str	r3, [r7, #48]	; 0x30
 8010024:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801002a:	e841 2300 	strex	r3, r2, [r1]
 801002e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010032:	2b00      	cmp	r3, #0
 8010034:	d1e6      	bne.n	8010004 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3308      	adds	r3, #8
 801003c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	e853 3f00 	ldrex	r3, [r3]
 8010044:	60fb      	str	r3, [r7, #12]
   return(result);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f023 0301 	bic.w	r3, r3, #1
 801004c:	64bb      	str	r3, [r7, #72]	; 0x48
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	3308      	adds	r3, #8
 8010054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010056:	61fa      	str	r2, [r7, #28]
 8010058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801005a:	69b9      	ldr	r1, [r7, #24]
 801005c:	69fa      	ldr	r2, [r7, #28]
 801005e:	e841 2300 	strex	r3, r2, [r1]
 8010062:	617b      	str	r3, [r7, #20]
   return(result);
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1e5      	bne.n	8010036 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2220      	movs	r2, #32
 801006e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801007a:	2303      	movs	r3, #3
 801007c:	e012      	b.n	80100a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2220      	movs	r2, #32
 8010082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2220      	movs	r2, #32
 801008a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3758      	adds	r7, #88	; 0x58
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	603b      	str	r3, [r7, #0]
 80100b8:	4613      	mov	r3, r2
 80100ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100bc:	e049      	b.n	8010152 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c4:	d045      	beq.n	8010152 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100c6:	f7f2 ffe5 	bl	8003094 <HAL_GetTick>
 80100ca:	4602      	mov	r2, r0
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	69ba      	ldr	r2, [r7, #24]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d302      	bcc.n	80100dc <UART_WaitOnFlagUntilTimeout+0x30>
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80100dc:	2303      	movs	r3, #3
 80100de:	e048      	b.n	8010172 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f003 0304 	and.w	r3, r3, #4
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d031      	beq.n	8010152 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	69db      	ldr	r3, [r3, #28]
 80100f4:	f003 0308 	and.w	r3, r3, #8
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d110      	bne.n	801011e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2208      	movs	r2, #8
 8010102:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f000 f839 	bl	801017c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2208      	movs	r2, #8
 801010e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2200      	movs	r2, #0
 8010116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e029      	b.n	8010172 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801012c:	d111      	bne.n	8010152 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f000 f81f 	bl	801017c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2220      	movs	r2, #32
 8010142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2200      	movs	r2, #0
 801014a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e00f      	b.n	8010172 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69da      	ldr	r2, [r3, #28]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	4013      	ands	r3, r2
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	429a      	cmp	r2, r3
 8010160:	bf0c      	ite	eq
 8010162:	2301      	moveq	r3, #1
 8010164:	2300      	movne	r3, #0
 8010166:	b2db      	uxtb	r3, r3
 8010168:	461a      	mov	r2, r3
 801016a:	79fb      	ldrb	r3, [r7, #7]
 801016c:	429a      	cmp	r2, r3
 801016e:	d0a6      	beq.n	80100be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010170:	2300      	movs	r3, #0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
	...

0801017c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801017c:	b480      	push	{r7}
 801017e:	b095      	sub	sp, #84	; 0x54
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801018a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018c:	e853 3f00 	ldrex	r3, [r3]
 8010190:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010198:	64fb      	str	r3, [r7, #76]	; 0x4c
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101a2:	643b      	str	r3, [r7, #64]	; 0x40
 80101a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101aa:	e841 2300 	strex	r3, r2, [r1]
 80101ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e6      	bne.n	8010184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101be:	6a3b      	ldr	r3, [r7, #32]
 80101c0:	e853 3f00 	ldrex	r3, [r3]
 80101c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80101c6:	69fa      	ldr	r2, [r7, #28]
 80101c8:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <UART_EndRxTransfer+0xc8>)
 80101ca:	4013      	ands	r3, r2
 80101cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3308      	adds	r3, #8
 80101d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80101d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101de:	e841 2300 	strex	r3, r2, [r1]
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1e5      	bne.n	80101b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d118      	bne.n	8010224 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	e853 3f00 	ldrex	r3, [r3]
 80101fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	f023 0310 	bic.w	r3, r3, #16
 8010206:	647b      	str	r3, [r7, #68]	; 0x44
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010210:	61bb      	str	r3, [r7, #24]
 8010212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010214:	6979      	ldr	r1, [r7, #20]
 8010216:	69ba      	ldr	r2, [r7, #24]
 8010218:	e841 2300 	strex	r3, r2, [r1]
 801021c:	613b      	str	r3, [r7, #16]
   return(result);
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e6      	bne.n	80101f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2220      	movs	r2, #32
 8010228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010238:	bf00      	nop
 801023a:	3754      	adds	r7, #84	; 0x54
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	effffffe 	.word	0xeffffffe

08010248 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010256:	2b01      	cmp	r3, #1
 8010258:	d101      	bne.n	801025e <HAL_UARTEx_DisableFifoMode+0x16>
 801025a:	2302      	movs	r3, #2
 801025c:	e027      	b.n	80102ae <HAL_UARTEx_DisableFifoMode+0x66>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2201      	movs	r2, #1
 8010262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2224      	movs	r2, #36	; 0x24
 801026a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f022 0201 	bic.w	r2, r2, #1
 8010284:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801028c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2220      	movs	r2, #32
 80102a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b084      	sub	sp, #16
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d101      	bne.n	80102d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80102ce:	2302      	movs	r3, #2
 80102d0:	e02d      	b.n	801032e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2224      	movs	r2, #36	; 0x24
 80102de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f022 0201 	bic.w	r2, r2, #1
 80102f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	430a      	orrs	r2, r1
 801030c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f850 	bl	80103b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2220      	movs	r2, #32
 8010320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b084      	sub	sp, #16
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010346:	2b01      	cmp	r3, #1
 8010348:	d101      	bne.n	801034e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801034a:	2302      	movs	r3, #2
 801034c:	e02d      	b.n	80103aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2201      	movs	r2, #1
 8010352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2224      	movs	r2, #36	; 0x24
 801035a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f022 0201 	bic.w	r2, r2, #1
 8010374:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	683a      	ldr	r2, [r7, #0]
 8010386:	430a      	orrs	r2, r1
 8010388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f812 	bl	80103b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2220      	movs	r2, #32
 801039c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
	...

080103b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d108      	bne.n	80103d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2201      	movs	r2, #1
 80103d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80103d4:	e031      	b.n	801043a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80103d6:	2310      	movs	r3, #16
 80103d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80103da:	2310      	movs	r3, #16
 80103dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	0e5b      	lsrs	r3, r3, #25
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	f003 0307 	and.w	r3, r3, #7
 80103ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	0f5b      	lsrs	r3, r3, #29
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	f003 0307 	and.w	r3, r3, #7
 80103fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103fe:	7bbb      	ldrb	r3, [r7, #14]
 8010400:	7b3a      	ldrb	r2, [r7, #12]
 8010402:	4911      	ldr	r1, [pc, #68]	; (8010448 <UARTEx_SetNbDataToProcess+0x94>)
 8010404:	5c8a      	ldrb	r2, [r1, r2]
 8010406:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801040a:	7b3a      	ldrb	r2, [r7, #12]
 801040c:	490f      	ldr	r1, [pc, #60]	; (801044c <UARTEx_SetNbDataToProcess+0x98>)
 801040e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010410:	fb93 f3f2 	sdiv	r3, r3, r2
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	7b7a      	ldrb	r2, [r7, #13]
 8010420:	4909      	ldr	r1, [pc, #36]	; (8010448 <UARTEx_SetNbDataToProcess+0x94>)
 8010422:	5c8a      	ldrb	r2, [r1, r2]
 8010424:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010428:	7b7a      	ldrb	r2, [r7, #13]
 801042a:	4908      	ldr	r1, [pc, #32]	; (801044c <UARTEx_SetNbDataToProcess+0x98>)
 801042c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801042e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010432:	b29a      	uxth	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801043a:	bf00      	nop
 801043c:	3714      	adds	r7, #20
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	0801a3b8 	.word	0x0801a3b8
 801044c:	0801a3c0 	.word	0x0801a3c0

08010450 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010450:	b084      	sub	sp, #16
 8010452:	b480      	push	{r7}
 8010454:	b085      	sub	sp, #20
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	f107 001c 	add.w	r0, r7, #28
 801045e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010462:	2300      	movs	r3, #0
 8010464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010466:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010468:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801046a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801046e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010470:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8010472:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010476:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685a      	ldr	r2, [r3, #4]
 8010482:	4b07      	ldr	r3, [pc, #28]	; (80104a0 <SDMMC_Init+0x50>)
 8010484:	4013      	ands	r3, r2
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	431a      	orrs	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3714      	adds	r7, #20
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	b004      	add	sp, #16
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	ffc02c00 	.word	0xffc02c00

080104a4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	370c      	adds	r7, #12
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr

080104be <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80104be:	b480      	push	{r7}
 80104c0:	b083      	sub	sp, #12
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f043 0203 	orr.w	r2, r3, #3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	370c      	adds	r7, #12
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010502:	b480      	push	{r7}
 8010504:	b083      	sub	sp, #12
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f003 0303 	and.w	r3, r3, #3
}
 8010512:	4618      	mov	r0, r3
 8010514:	370c      	adds	r7, #12
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
	...

08010520 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010520:	b480      	push	{r7}
 8010522:	b085      	sub	sp, #20
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801053e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010544:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801054a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	4313      	orrs	r3, r2
 8010550:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	68da      	ldr	r2, [r3, #12]
 8010556:	4b06      	ldr	r3, [pc, #24]	; (8010570 <SDMMC_SendCommand+0x50>)
 8010558:	4013      	ands	r3, r2
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	431a      	orrs	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	fffee0c0 	.word	0xfffee0c0

08010574 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	b2db      	uxtb	r3, r3
}
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr

0801058e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801058e:	b480      	push	{r7}
 8010590:	b085      	sub	sp, #20
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	3314      	adds	r3, #20
 801059c:	461a      	mov	r2, r3
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	4413      	add	r3, r2
 80105a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3714      	adds	r7, #20
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	685a      	ldr	r2, [r3, #4]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80105da:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80105e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80105e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	431a      	orrs	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80105fe:	2300      	movs	r3, #0

}
 8010600:	4618      	mov	r0, r3
 8010602:	3714      	adds	r7, #20
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b088      	sub	sp, #32
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801061a:	2310      	movs	r3, #16
 801061c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801061e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010624:	2300      	movs	r3, #0
 8010626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801062c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801062e:	f107 0308 	add.w	r3, r7, #8
 8010632:	4619      	mov	r1, r3
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff ff73 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801063a:	f241 3288 	movw	r2, #5000	; 0x1388
 801063e:	2110      	movs	r1, #16
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fa5f 	bl	8010b04 <SDMMC_GetCmdResp1>
 8010646:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010648:	69fb      	ldr	r3, [r7, #28]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3720      	adds	r7, #32
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b088      	sub	sp, #32
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010660:	2311      	movs	r3, #17
 8010662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801066a:	2300      	movs	r3, #0
 801066c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010674:	f107 0308 	add.w	r3, r7, #8
 8010678:	4619      	mov	r1, r3
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7ff ff50 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010680:	f241 3288 	movw	r2, #5000	; 0x1388
 8010684:	2111      	movs	r1, #17
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fa3c 	bl	8010b04 <SDMMC_GetCmdResp1>
 801068c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801068e:	69fb      	ldr	r3, [r7, #28]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3720      	adds	r7, #32
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b088      	sub	sp, #32
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80106a6:	2312      	movs	r3, #18
 80106a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106b0:	2300      	movs	r3, #0
 80106b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106ba:	f107 0308 	add.w	r3, r7, #8
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ff ff2d 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80106c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80106ca:	2112      	movs	r1, #18
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f000 fa19 	bl	8010b04 <SDMMC_GetCmdResp1>
 80106d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106d4:	69fb      	ldr	r3, [r7, #28]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3720      	adds	r7, #32
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b088      	sub	sp, #32
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80106ec:	2318      	movs	r3, #24
 80106ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106f6:	2300      	movs	r3, #0
 80106f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010700:	f107 0308 	add.w	r3, r7, #8
 8010704:	4619      	mov	r1, r3
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff ff0a 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801070c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010710:	2118      	movs	r1, #24
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f9f6 	bl	8010b04 <SDMMC_GetCmdResp1>
 8010718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071a:	69fb      	ldr	r3, [r7, #28]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3720      	adds	r7, #32
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010732:	2319      	movs	r3, #25
 8010734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010736:	f44f 7380 	mov.w	r3, #256	; 0x100
 801073a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801073c:	2300      	movs	r3, #0
 801073e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010746:	f107 0308 	add.w	r3, r7, #8
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fee7 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010752:	f241 3288 	movw	r2, #5000	; 0x1388
 8010756:	2119      	movs	r1, #25
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f000 f9d3 	bl	8010b04 <SDMMC_GetCmdResp1>
 801075e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010760:	69fb      	ldr	r3, [r7, #28]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3720      	adds	r7, #32
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b088      	sub	sp, #32
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010774:	2300      	movs	r3, #0
 8010776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010778:	230c      	movs	r3, #12
 801077a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010782:	2300      	movs	r3, #0
 8010784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801078a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107a4:	f107 0308 	add.w	r3, r7, #8
 80107a8:	4619      	mov	r1, r3
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff feb8 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80107b0:	4a0b      	ldr	r2, [pc, #44]	; (80107e0 <SDMMC_CmdStopTransfer+0x74>)
 80107b2:	210c      	movs	r1, #12
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f9a5 	bl	8010b04 <SDMMC_GetCmdResp1>
 80107ba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80107ce:	d101      	bne.n	80107d4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80107d0:	2300      	movs	r3, #0
 80107d2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80107d4:	69fb      	ldr	r3, [r7, #28]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3720      	adds	r7, #32
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	05f5e100 	.word	0x05f5e100

080107e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b088      	sub	sp, #32
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80107f2:	2307      	movs	r3, #7
 80107f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107fc:	2300      	movs	r3, #0
 80107fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010806:	f107 0308 	add.w	r3, r7, #8
 801080a:	4619      	mov	r1, r3
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7ff fe87 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010812:	f241 3288 	movw	r2, #5000	; 0x1388
 8010816:	2107      	movs	r1, #7
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 f973 	bl	8010b04 <SDMMC_GetCmdResp1>
 801081e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010820:	69fb      	ldr	r3, [r7, #28]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3720      	adds	r7, #32
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b088      	sub	sp, #32
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010832:	2300      	movs	r3, #0
 8010834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010836:	2300      	movs	r3, #0
 8010838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801083a:	2300      	movs	r3, #0
 801083c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801083e:	2300      	movs	r3, #0
 8010840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010848:	f107 0308 	add.w	r3, r7, #8
 801084c:	4619      	mov	r1, r3
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f7ff fe66 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fb97 	bl	8010f88 <SDMMC_GetCmdError>
 801085a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801085c:	69fb      	ldr	r3, [r7, #28]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3720      	adds	r7, #32
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b088      	sub	sp, #32
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801086e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010874:	2308      	movs	r3, #8
 8010876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010878:	f44f 7380 	mov.w	r3, #256	; 0x100
 801087c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801087e:	2300      	movs	r3, #0
 8010880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010888:	f107 0308 	add.w	r3, r7, #8
 801088c:	4619      	mov	r1, r3
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7ff fe46 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fb29 	bl	8010eec <SDMMC_GetCmdResp7>
 801089a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801089c:	69fb      	ldr	r3, [r7, #28]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3720      	adds	r7, #32
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b088      	sub	sp, #32
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80108b4:	2337      	movs	r3, #55	; 0x37
 80108b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108be:	2300      	movs	r3, #0
 80108c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108c8:	f107 0308 	add.w	r3, r7, #8
 80108cc:	4619      	mov	r1, r3
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff fe26 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80108d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108d8:	2137      	movs	r1, #55	; 0x37
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 f912 	bl	8010b04 <SDMMC_GetCmdResp1>
 80108e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108e2:	69fb      	ldr	r3, [r7, #28]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3720      	adds	r7, #32
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80108fa:	2329      	movs	r3, #41	; 0x29
 80108fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010904:	2300      	movs	r3, #0
 8010906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801090c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801090e:	f107 0308 	add.w	r3, r7, #8
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff fe03 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fa2e 	bl	8010d7c <SDMMC_GetCmdResp3>
 8010920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010922:	69fb      	ldr	r3, [r7, #28]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3720      	adds	r7, #32
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801093a:	2306      	movs	r3, #6
 801093c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010944:	2300      	movs	r3, #0
 8010946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801094c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801094e:	f107 0308 	add.w	r3, r7, #8
 8010952:	4619      	mov	r1, r3
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff fde3 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801095a:	f241 3288 	movw	r2, #5000	; 0x1388
 801095e:	2106      	movs	r1, #6
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 f8cf 	bl	8010b04 <SDMMC_GetCmdResp1>
 8010966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010968:	69fb      	ldr	r3, [r7, #28]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3720      	adds	r7, #32
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b088      	sub	sp, #32
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801097a:	2300      	movs	r3, #0
 801097c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801097e:	2333      	movs	r3, #51	; 0x33
 8010980:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010988:	2300      	movs	r3, #0
 801098a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801098c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010990:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010992:	f107 0308 	add.w	r3, r7, #8
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fdc1 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801099e:	f241 3288 	movw	r2, #5000	; 0x1388
 80109a2:	2133      	movs	r1, #51	; 0x33
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 f8ad 	bl	8010b04 <SDMMC_GetCmdResp1>
 80109aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ac:	69fb      	ldr	r3, [r7, #28]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3720      	adds	r7, #32
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}

080109b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80109b6:	b580      	push	{r7, lr}
 80109b8:	b088      	sub	sp, #32
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80109be:	2300      	movs	r3, #0
 80109c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80109c2:	2302      	movs	r3, #2
 80109c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80109c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80109ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109cc:	2300      	movs	r3, #0
 80109ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d6:	f107 0308 	add.w	r3, r7, #8
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff fd9f 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f980 	bl	8010ce8 <SDMMC_GetCmdResp2>
 80109e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ea:	69fb      	ldr	r3, [r7, #28]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3720      	adds	r7, #32
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a02:	2309      	movs	r3, #9
 8010a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a16:	f107 0308 	add.w	r3, r7, #8
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff fd7f 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f960 	bl	8010ce8 <SDMMC_GetCmdResp2>
 8010a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3720      	adds	r7, #32
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b088      	sub	sp, #32
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010a42:	2303      	movs	r3, #3
 8010a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a56:	f107 0308 	add.w	r3, r7, #8
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7ff fd5f 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010a62:	683a      	ldr	r2, [r7, #0]
 8010a64:	2103      	movs	r1, #3
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 f9c8 	bl	8010dfc <SDMMC_GetCmdResp6>
 8010a6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a6e:	69fb      	ldr	r3, [r7, #28]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3720      	adds	r7, #32
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010a86:	230d      	movs	r3, #13
 8010a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a90:	2300      	movs	r3, #0
 8010a92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a9a:	f107 0308 	add.w	r3, r7, #8
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff fd3d 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aaa:	210d      	movs	r1, #13
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f829 	bl	8010b04 <SDMMC_GetCmdResp1>
 8010ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab4:	69fb      	ldr	r3, [r7, #28]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3720      	adds	r7, #32
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b088      	sub	sp, #32
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010aca:	230d      	movs	r3, #13
 8010acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010adc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ade:	f107 0308 	add.w	r3, r7, #8
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff fd1b 	bl	8010520 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aee:	210d      	movs	r1, #13
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f807 	bl	8010b04 <SDMMC_GetCmdResp1>
 8010af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af8:	69fb      	ldr	r3, [r7, #28]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
	...

08010b04 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	607a      	str	r2, [r7, #4]
 8010b10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010b12:	4b70      	ldr	r3, [pc, #448]	; (8010cd4 <SDMMC_GetCmdResp1+0x1d0>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a70      	ldr	r2, [pc, #448]	; (8010cd8 <SDMMC_GetCmdResp1+0x1d4>)
 8010b18:	fba2 2303 	umull	r2, r3, r2, r3
 8010b1c:	0a5a      	lsrs	r2, r3, #9
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	fb02 f303 	mul.w	r3, r2, r3
 8010b24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	1e5a      	subs	r2, r3, #1
 8010b2a:	61fa      	str	r2, [r7, #28]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d102      	bne.n	8010b36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b34:	e0c9      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010b3c:	69ba      	ldr	r2, [r7, #24]
 8010b3e:	4b67      	ldr	r3, [pc, #412]	; (8010cdc <SDMMC_GetCmdResp1+0x1d8>)
 8010b40:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d0ef      	beq.n	8010b26 <SDMMC_GetCmdResp1+0x22>
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d1ea      	bne.n	8010b26 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b54:	f003 0304 	and.w	r3, r3, #4
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d004      	beq.n	8010b66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2204      	movs	r2, #4
 8010b60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b62:	2304      	movs	r3, #4
 8010b64:	e0b1      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d004      	beq.n	8010b7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2201      	movs	r2, #1
 8010b76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e0a6      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	4a58      	ldr	r2, [pc, #352]	; (8010ce0 <SDMMC_GetCmdResp1+0x1dc>)
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f7ff fcf6 	bl	8010574 <SDMMC_GetCommandResponse>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	7afb      	ldrb	r3, [r7, #11]
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d001      	beq.n	8010b96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b92:	2301      	movs	r3, #1
 8010b94:	e099      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b96:	2100      	movs	r1, #0
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f7ff fcf8 	bl	801058e <SDMMC_GetResponse>
 8010b9e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ba0:	697a      	ldr	r2, [r7, #20]
 8010ba2:	4b50      	ldr	r3, [pc, #320]	; (8010ce4 <SDMMC_GetCmdResp1+0x1e0>)
 8010ba4:	4013      	ands	r3, r2
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d101      	bne.n	8010bae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e08d      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	da02      	bge.n	8010bba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010bb8:	e087      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010bc4:	2340      	movs	r3, #64	; 0x40
 8010bc6:	e080      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010bd2:	2380      	movs	r3, #128	; 0x80
 8010bd4:	e079      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010be4:	e071      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bf4:	e069      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d002      	beq.n	8010c06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c04:	e061      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c14:	e059      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c24:	e051      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c34:	e049      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d002      	beq.n	8010c46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010c44:	e041      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d002      	beq.n	8010c56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c54:	e039      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c64:	e031      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d002      	beq.n	8010c76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010c74:	e029      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010c80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010c84:	e021      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d002      	beq.n	8010c96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010c94:	e019      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ca4:	e011      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010cb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010cb4:	e009      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f003 0308 	and.w	r3, r3, #8
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010cc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010cc4:	e001      	b.n	8010cca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3720      	adds	r7, #32
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	24000000 	.word	0x24000000
 8010cd8:	10624dd3 	.word	0x10624dd3
 8010cdc:	00200045 	.word	0x00200045
 8010ce0:	002000c5 	.word	0x002000c5
 8010ce4:	fdffe008 	.word	0xfdffe008

08010ce8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010cf0:	4b1f      	ldr	r3, [pc, #124]	; (8010d70 <SDMMC_GetCmdResp2+0x88>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a1f      	ldr	r2, [pc, #124]	; (8010d74 <SDMMC_GetCmdResp2+0x8c>)
 8010cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cfa:	0a5b      	lsrs	r3, r3, #9
 8010cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d00:	fb02 f303 	mul.w	r3, r2, r3
 8010d04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	1e5a      	subs	r2, r3, #1
 8010d0a:	60fa      	str	r2, [r7, #12]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d14:	e026      	b.n	8010d64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d0ef      	beq.n	8010d06 <SDMMC_GetCmdResp2+0x1e>
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d1ea      	bne.n	8010d06 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d34:	f003 0304 	and.w	r3, r3, #4
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d004      	beq.n	8010d46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2204      	movs	r2, #4
 8010d40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d42:	2304      	movs	r3, #4
 8010d44:	e00e      	b.n	8010d64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d004      	beq.n	8010d5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2201      	movs	r2, #1
 8010d56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e003      	b.n	8010d64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	4a06      	ldr	r2, [pc, #24]	; (8010d78 <SDMMC_GetCmdResp2+0x90>)
 8010d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010d62:	2300      	movs	r3, #0
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3714      	adds	r7, #20
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	24000000 	.word	0x24000000
 8010d74:	10624dd3 	.word	0x10624dd3
 8010d78:	002000c5 	.word	0x002000c5

08010d7c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010d84:	4b1a      	ldr	r3, [pc, #104]	; (8010df0 <SDMMC_GetCmdResp3+0x74>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a1a      	ldr	r2, [pc, #104]	; (8010df4 <SDMMC_GetCmdResp3+0x78>)
 8010d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8010d8e:	0a5b      	lsrs	r3, r3, #9
 8010d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d94:	fb02 f303 	mul.w	r3, r2, r3
 8010d98:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	1e5a      	subs	r2, r3, #1
 8010d9e:	60fa      	str	r2, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d102      	bne.n	8010daa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010da4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010da8:	e01b      	b.n	8010de2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d0ef      	beq.n	8010d9a <SDMMC_GetCmdResp3+0x1e>
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1ea      	bne.n	8010d9a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d004      	beq.n	8010dda <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2204      	movs	r2, #4
 8010dd4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dd6:	2304      	movs	r3, #4
 8010dd8:	e003      	b.n	8010de2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4a06      	ldr	r2, [pc, #24]	; (8010df8 <SDMMC_GetCmdResp3+0x7c>)
 8010dde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3714      	adds	r7, #20
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	24000000 	.word	0x24000000
 8010df4:	10624dd3 	.word	0x10624dd3
 8010df8:	002000c5 	.word	0x002000c5

08010dfc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	460b      	mov	r3, r1
 8010e06:	607a      	str	r2, [r7, #4]
 8010e08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010e0a:	4b35      	ldr	r3, [pc, #212]	; (8010ee0 <SDMMC_GetCmdResp6+0xe4>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	4a35      	ldr	r2, [pc, #212]	; (8010ee4 <SDMMC_GetCmdResp6+0xe8>)
 8010e10:	fba2 2303 	umull	r2, r3, r2, r3
 8010e14:	0a5b      	lsrs	r3, r3, #9
 8010e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e1a:	fb02 f303 	mul.w	r3, r2, r3
 8010e1e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	1e5a      	subs	r2, r3, #1
 8010e24:	61fa      	str	r2, [r7, #28]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e2e:	e052      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e34:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d0ef      	beq.n	8010e20 <SDMMC_GetCmdResp6+0x24>
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1ea      	bne.n	8010e20 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	f003 0304 	and.w	r3, r3, #4
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d004      	beq.n	8010e60 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2204      	movs	r2, #4
 8010e5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e5c:	2304      	movs	r3, #4
 8010e5e:	e03a      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d004      	beq.n	8010e76 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2201      	movs	r2, #1
 8010e70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e72:	2301      	movs	r3, #1
 8010e74:	e02f      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	f7ff fb7c 	bl	8010574 <SDMMC_GetCommandResponse>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	461a      	mov	r2, r3
 8010e80:	7afb      	ldrb	r3, [r7, #11]
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d001      	beq.n	8010e8a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e86:	2301      	movs	r3, #1
 8010e88:	e025      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	4a16      	ldr	r2, [pc, #88]	; (8010ee8 <SDMMC_GetCmdResp6+0xec>)
 8010e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010e90:	2100      	movs	r1, #0
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f7ff fb7b 	bl	801058e <SDMMC_GetResponse>
 8010e98:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d106      	bne.n	8010eb2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	0c1b      	lsrs	r3, r3, #16
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e011      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d002      	beq.n	8010ec2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ec0:	e009      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d002      	beq.n	8010ed2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ed0:	e001      	b.n	8010ed6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3720      	adds	r7, #32
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	24000000 	.word	0x24000000
 8010ee4:	10624dd3 	.word	0x10624dd3
 8010ee8:	002000c5 	.word	0x002000c5

08010eec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ef4:	4b22      	ldr	r3, [pc, #136]	; (8010f80 <SDMMC_GetCmdResp7+0x94>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a22      	ldr	r2, [pc, #136]	; (8010f84 <SDMMC_GetCmdResp7+0x98>)
 8010efa:	fba2 2303 	umull	r2, r3, r2, r3
 8010efe:	0a5b      	lsrs	r3, r3, #9
 8010f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f04:	fb02 f303 	mul.w	r3, r2, r3
 8010f08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	1e5a      	subs	r2, r3, #1
 8010f0e:	60fa      	str	r2, [r7, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f18:	e02c      	b.n	8010f74 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0ef      	beq.n	8010f0a <SDMMC_GetCmdResp7+0x1e>
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1ea      	bne.n	8010f0a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f38:	f003 0304 	and.w	r3, r3, #4
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d004      	beq.n	8010f4a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2204      	movs	r2, #4
 8010f44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f46:	2304      	movs	r3, #4
 8010f48:	e014      	b.n	8010f74 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d004      	beq.n	8010f60 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e009      	b.n	8010f74 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2240      	movs	r2, #64	; 0x40
 8010f70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f72:	2300      	movs	r3, #0

}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3714      	adds	r7, #20
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr
 8010f80:	24000000 	.word	0x24000000
 8010f84:	10624dd3 	.word	0x10624dd3

08010f88 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f90:	4b11      	ldr	r3, [pc, #68]	; (8010fd8 <SDMMC_GetCmdError+0x50>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4a11      	ldr	r2, [pc, #68]	; (8010fdc <SDMMC_GetCmdError+0x54>)
 8010f96:	fba2 2303 	umull	r2, r3, r2, r3
 8010f9a:	0a5b      	lsrs	r3, r3, #9
 8010f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fa0:	fb02 f303 	mul.w	r3, r2, r3
 8010fa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	1e5a      	subs	r2, r3, #1
 8010faa:	60fa      	str	r2, [r7, #12]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d102      	bne.n	8010fb6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fb4:	e009      	b.n	8010fca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0f1      	beq.n	8010fa6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4a06      	ldr	r2, [pc, #24]	; (8010fe0 <SDMMC_GetCmdError+0x58>)
 8010fc6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	24000000 	.word	0x24000000
 8010fdc:	10624dd3 	.word	0x10624dd3
 8010fe0:	002000c5 	.word	0x002000c5

08010fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fe4:	b084      	sub	sp, #16
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	f107 001c 	add.w	r0, r7, #28
 8010ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d120      	bne.n	801103e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	68da      	ldr	r2, [r3, #12]
 801100c:	4b2a      	ldr	r3, [pc, #168]	; (80110b8 <USB_CoreInit+0xd4>)
 801100e:	4013      	ands	r3, r2
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011022:	2b01      	cmp	r3, #1
 8011024:	d105      	bne.n	8011032 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f001 faf8 	bl	8012628 <USB_CoreReset>
 8011038:	4603      	mov	r3, r0
 801103a:	73fb      	strb	r3, [r7, #15]
 801103c:	e01a      	b.n	8011074 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f001 faec 	bl	8012628 <USB_CoreReset>
 8011050:	4603      	mov	r3, r0
 8011052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801105e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	639a      	str	r2, [r3, #56]	; 0x38
 8011066:	e005      	b.n	8011074 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	2b01      	cmp	r3, #1
 8011078:	d116      	bne.n	80110a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801107e:	b29a      	uxth	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011088:	4b0c      	ldr	r3, [pc, #48]	; (80110bc <USB_CoreInit+0xd8>)
 801108a:	4313      	orrs	r3, r2
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	689b      	ldr	r3, [r3, #8]
 8011094:	f043 0206 	orr.w	r2, r3, #6
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	689b      	ldr	r3, [r3, #8]
 80110a0:	f043 0220 	orr.w	r2, r3, #32
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110b4:	b004      	add	sp, #16
 80110b6:	4770      	bx	lr
 80110b8:	ffbdffbf 	.word	0xffbdffbf
 80110bc:	03ee0000 	.word	0x03ee0000

080110c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b087      	sub	sp, #28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4613      	mov	r3, r2
 80110cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	d165      	bne.n	80111a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	4a41      	ldr	r2, [pc, #260]	; (80111dc <USB_SetTurnaroundTime+0x11c>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d906      	bls.n	80110ea <USB_SetTurnaroundTime+0x2a>
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	4a40      	ldr	r2, [pc, #256]	; (80111e0 <USB_SetTurnaroundTime+0x120>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d202      	bcs.n	80110ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80110e4:	230f      	movs	r3, #15
 80110e6:	617b      	str	r3, [r7, #20]
 80110e8:	e062      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	4a3c      	ldr	r2, [pc, #240]	; (80111e0 <USB_SetTurnaroundTime+0x120>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d306      	bcc.n	8011100 <USB_SetTurnaroundTime+0x40>
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	4a3b      	ldr	r2, [pc, #236]	; (80111e4 <USB_SetTurnaroundTime+0x124>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d202      	bcs.n	8011100 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80110fa:	230e      	movs	r3, #14
 80110fc:	617b      	str	r3, [r7, #20]
 80110fe:	e057      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	4a38      	ldr	r2, [pc, #224]	; (80111e4 <USB_SetTurnaroundTime+0x124>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d306      	bcc.n	8011116 <USB_SetTurnaroundTime+0x56>
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	4a37      	ldr	r2, [pc, #220]	; (80111e8 <USB_SetTurnaroundTime+0x128>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d202      	bcs.n	8011116 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011110:	230d      	movs	r3, #13
 8011112:	617b      	str	r3, [r7, #20]
 8011114:	e04c      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	4a33      	ldr	r2, [pc, #204]	; (80111e8 <USB_SetTurnaroundTime+0x128>)
 801111a:	4293      	cmp	r3, r2
 801111c:	d306      	bcc.n	801112c <USB_SetTurnaroundTime+0x6c>
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	4a32      	ldr	r2, [pc, #200]	; (80111ec <USB_SetTurnaroundTime+0x12c>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d802      	bhi.n	801112c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011126:	230c      	movs	r3, #12
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	e041      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	4a2f      	ldr	r2, [pc, #188]	; (80111ec <USB_SetTurnaroundTime+0x12c>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d906      	bls.n	8011142 <USB_SetTurnaroundTime+0x82>
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	4a2e      	ldr	r2, [pc, #184]	; (80111f0 <USB_SetTurnaroundTime+0x130>)
 8011138:	4293      	cmp	r3, r2
 801113a:	d802      	bhi.n	8011142 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801113c:	230b      	movs	r3, #11
 801113e:	617b      	str	r3, [r7, #20]
 8011140:	e036      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	4a2a      	ldr	r2, [pc, #168]	; (80111f0 <USB_SetTurnaroundTime+0x130>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d906      	bls.n	8011158 <USB_SetTurnaroundTime+0x98>
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	4a29      	ldr	r2, [pc, #164]	; (80111f4 <USB_SetTurnaroundTime+0x134>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d802      	bhi.n	8011158 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011152:	230a      	movs	r3, #10
 8011154:	617b      	str	r3, [r7, #20]
 8011156:	e02b      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	4a26      	ldr	r2, [pc, #152]	; (80111f4 <USB_SetTurnaroundTime+0x134>)
 801115c:	4293      	cmp	r3, r2
 801115e:	d906      	bls.n	801116e <USB_SetTurnaroundTime+0xae>
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	4a25      	ldr	r2, [pc, #148]	; (80111f8 <USB_SetTurnaroundTime+0x138>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d202      	bcs.n	801116e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011168:	2309      	movs	r3, #9
 801116a:	617b      	str	r3, [r7, #20]
 801116c:	e020      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	4a21      	ldr	r2, [pc, #132]	; (80111f8 <USB_SetTurnaroundTime+0x138>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d306      	bcc.n	8011184 <USB_SetTurnaroundTime+0xc4>
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	4a20      	ldr	r2, [pc, #128]	; (80111fc <USB_SetTurnaroundTime+0x13c>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d802      	bhi.n	8011184 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801117e:	2308      	movs	r3, #8
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	e015      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	4a1d      	ldr	r2, [pc, #116]	; (80111fc <USB_SetTurnaroundTime+0x13c>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d906      	bls.n	801119a <USB_SetTurnaroundTime+0xda>
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	4a1c      	ldr	r2, [pc, #112]	; (8011200 <USB_SetTurnaroundTime+0x140>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d202      	bcs.n	801119a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011194:	2307      	movs	r3, #7
 8011196:	617b      	str	r3, [r7, #20]
 8011198:	e00a      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801119a:	2306      	movs	r3, #6
 801119c:	617b      	str	r3, [r7, #20]
 801119e:	e007      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80111a0:	79fb      	ldrb	r3, [r7, #7]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80111a6:	2309      	movs	r3, #9
 80111a8:	617b      	str	r3, [r7, #20]
 80111aa:	e001      	b.n	80111b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80111ac:	2309      	movs	r3, #9
 80111ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68da      	ldr	r2, [r3, #12]
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	029b      	lsls	r3, r3, #10
 80111c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80111c8:	431a      	orrs	r2, r3
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	371c      	adds	r7, #28
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr
 80111dc:	00d8acbf 	.word	0x00d8acbf
 80111e0:	00e4e1c0 	.word	0x00e4e1c0
 80111e4:	00f42400 	.word	0x00f42400
 80111e8:	01067380 	.word	0x01067380
 80111ec:	011a499f 	.word	0x011a499f
 80111f0:	01312cff 	.word	0x01312cff
 80111f4:	014ca43f 	.word	0x014ca43f
 80111f8:	016e3600 	.word	0x016e3600
 80111fc:	01a6ab1f 	.word	0x01a6ab1f
 8011200:	01e84800 	.word	0x01e84800

08011204 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	f043 0201 	orr.w	r2, r3, #1
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr

08011226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011226:	b480      	push	{r7}
 8011228:	b083      	sub	sp, #12
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	f023 0201 	bic.w	r2, r3, #1
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	370c      	adds	r7, #12
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	460b      	mov	r3, r1
 8011252:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011254:	2300      	movs	r3, #0
 8011256:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011264:	78fb      	ldrb	r3, [r7, #3]
 8011266:	2b01      	cmp	r3, #1
 8011268:	d115      	bne.n	8011296 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011276:	2001      	movs	r0, #1
 8011278:	f7f1 ff18 	bl	80030ac <HAL_Delay>
      ms++;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	3301      	adds	r3, #1
 8011280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f001 f93f 	bl	8012506 <USB_GetMode>
 8011288:	4603      	mov	r3, r0
 801128a:	2b01      	cmp	r3, #1
 801128c:	d01e      	beq.n	80112cc <USB_SetCurrentMode+0x84>
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b31      	cmp	r3, #49	; 0x31
 8011292:	d9f0      	bls.n	8011276 <USB_SetCurrentMode+0x2e>
 8011294:	e01a      	b.n	80112cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011296:	78fb      	ldrb	r3, [r7, #3]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d115      	bne.n	80112c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80112a8:	2001      	movs	r0, #1
 80112aa:	f7f1 feff 	bl	80030ac <HAL_Delay>
      ms++;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	3301      	adds	r3, #1
 80112b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f001 f926 	bl	8012506 <USB_GetMode>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d005      	beq.n	80112cc <USB_SetCurrentMode+0x84>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b31      	cmp	r3, #49	; 0x31
 80112c4:	d9f0      	bls.n	80112a8 <USB_SetCurrentMode+0x60>
 80112c6:	e001      	b.n	80112cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80112c8:	2301      	movs	r3, #1
 80112ca:	e005      	b.n	80112d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2b32      	cmp	r3, #50	; 0x32
 80112d0:	d101      	bne.n	80112d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80112d2:	2301      	movs	r3, #1
 80112d4:	e000      	b.n	80112d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3710      	adds	r7, #16
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80112e0:	b084      	sub	sp, #16
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b086      	sub	sp, #24
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80112ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80112fa:	2300      	movs	r3, #0
 80112fc:	613b      	str	r3, [r7, #16]
 80112fe:	e009      	b.n	8011314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011300:	687a      	ldr	r2, [r7, #4]
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	3340      	adds	r3, #64	; 0x40
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	4413      	add	r3, r2
 801130a:	2200      	movs	r2, #0
 801130c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	3301      	adds	r3, #1
 8011312:	613b      	str	r3, [r7, #16]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	2b0e      	cmp	r3, #14
 8011318:	d9f2      	bls.n	8011300 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801131a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801131c:	2b00      	cmp	r3, #0
 801131e:	d11c      	bne.n	801135a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801132e:	f043 0302 	orr.w	r3, r3, #2
 8011332:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011338:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	601a      	str	r2, [r3, #0]
 8011358:	e005      	b.n	8011366 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801135e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801136c:	461a      	mov	r2, r3
 801136e:	2300      	movs	r3, #0
 8011370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011378:	4619      	mov	r1, r3
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011380:	461a      	mov	r2, r3
 8011382:	680b      	ldr	r3, [r1, #0]
 8011384:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011388:	2b01      	cmp	r3, #1
 801138a:	d10c      	bne.n	80113a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801138c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138e:	2b00      	cmp	r3, #0
 8011390:	d104      	bne.n	801139c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011392:	2100      	movs	r1, #0
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f000 f965 	bl	8011664 <USB_SetDevSpeed>
 801139a:	e008      	b.n	80113ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801139c:	2101      	movs	r1, #1
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 f960 	bl	8011664 <USB_SetDevSpeed>
 80113a4:	e003      	b.n	80113ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80113a6:	2103      	movs	r1, #3
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f000 f95b 	bl	8011664 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80113ae:	2110      	movs	r1, #16
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 f8f3 	bl	801159c <USB_FlushTxFifo>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d001      	beq.n	80113c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80113bc:	2301      	movs	r3, #1
 80113be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f000 f91f 	bl	8011604 <USB_FlushRxFifo>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d001      	beq.n	80113d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80113cc:	2301      	movs	r3, #1
 80113ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113d6:	461a      	mov	r2, r3
 80113d8:	2300      	movs	r3, #0
 80113da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113e2:	461a      	mov	r2, r3
 80113e4:	2300      	movs	r3, #0
 80113e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113ee:	461a      	mov	r2, r3
 80113f0:	2300      	movs	r3, #0
 80113f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80113f4:	2300      	movs	r3, #0
 80113f6:	613b      	str	r3, [r7, #16]
 80113f8:	e043      	b.n	8011482 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	015a      	lsls	r2, r3, #5
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	4413      	add	r3, r2
 8011402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801140c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011410:	d118      	bne.n	8011444 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10a      	bne.n	801142e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	4413      	add	r3, r2
 8011420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011424:	461a      	mov	r2, r3
 8011426:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	e013      	b.n	8011456 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	015a      	lsls	r2, r3, #5
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	4413      	add	r3, r2
 8011436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801143a:	461a      	mov	r2, r3
 801143c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011440:	6013      	str	r3, [r2, #0]
 8011442:	e008      	b.n	8011456 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	015a      	lsls	r2, r3, #5
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4413      	add	r3, r2
 801144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011450:	461a      	mov	r2, r3
 8011452:	2300      	movs	r3, #0
 8011454:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	015a      	lsls	r2, r3, #5
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	4413      	add	r3, r2
 801145e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011462:	461a      	mov	r2, r3
 8011464:	2300      	movs	r3, #0
 8011466:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	015a      	lsls	r2, r3, #5
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	4413      	add	r3, r2
 8011470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011474:	461a      	mov	r2, r3
 8011476:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801147a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	3301      	adds	r3, #1
 8011480:	613b      	str	r3, [r7, #16]
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	693a      	ldr	r2, [r7, #16]
 8011486:	429a      	cmp	r2, r3
 8011488:	d3b7      	bcc.n	80113fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801148a:	2300      	movs	r3, #0
 801148c:	613b      	str	r3, [r7, #16]
 801148e:	e043      	b.n	8011518 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	015a      	lsls	r2, r3, #5
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	4413      	add	r3, r2
 8011498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114a6:	d118      	bne.n	80114da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d10a      	bne.n	80114c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	015a      	lsls	r2, r3, #5
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	4413      	add	r3, r2
 80114b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ba:	461a      	mov	r2, r3
 80114bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80114c0:	6013      	str	r3, [r2, #0]
 80114c2:	e013      	b.n	80114ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	015a      	lsls	r2, r3, #5
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	4413      	add	r3, r2
 80114cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114d0:	461a      	mov	r2, r3
 80114d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80114d6:	6013      	str	r3, [r2, #0]
 80114d8:	e008      	b.n	80114ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	015a      	lsls	r2, r3, #5
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	4413      	add	r3, r2
 80114e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114e6:	461a      	mov	r2, r3
 80114e8:	2300      	movs	r3, #0
 80114ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	015a      	lsls	r2, r3, #5
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114f8:	461a      	mov	r2, r3
 80114fa:	2300      	movs	r3, #0
 80114fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	015a      	lsls	r2, r3, #5
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	4413      	add	r3, r2
 8011506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801150a:	461a      	mov	r2, r3
 801150c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011510:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	3301      	adds	r3, #1
 8011516:	613b      	str	r3, [r7, #16]
 8011518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151a:	693a      	ldr	r2, [r7, #16]
 801151c:	429a      	cmp	r2, r3
 801151e:	d3b7      	bcc.n	8011490 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011526:	691b      	ldr	r3, [r3, #16]
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801152e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011532:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011540:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d105      	bne.n	8011554 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	699b      	ldr	r3, [r3, #24]
 801154c:	f043 0210 	orr.w	r2, r3, #16
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	699a      	ldr	r2, [r3, #24]
 8011558:	4b0e      	ldr	r3, [pc, #56]	; (8011594 <USB_DevInit+0x2b4>)
 801155a:	4313      	orrs	r3, r2
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011562:	2b00      	cmp	r3, #0
 8011564:	d005      	beq.n	8011572 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	699b      	ldr	r3, [r3, #24]
 801156a:	f043 0208 	orr.w	r2, r3, #8
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011574:	2b01      	cmp	r3, #1
 8011576:	d105      	bne.n	8011584 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	699a      	ldr	r2, [r3, #24]
 801157c:	4b06      	ldr	r3, [pc, #24]	; (8011598 <USB_DevInit+0x2b8>)
 801157e:	4313      	orrs	r3, r2
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011584:	7dfb      	ldrb	r3, [r7, #23]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3718      	adds	r7, #24
 801158a:	46bd      	mov	sp, r7
 801158c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011590:	b004      	add	sp, #16
 8011592:	4770      	bx	lr
 8011594:	803c3800 	.word	0x803c3800
 8011598:	40000004 	.word	0x40000004

0801159c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	3301      	adds	r3, #1
 80115ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	4a13      	ldr	r2, [pc, #76]	; (8011600 <USB_FlushTxFifo+0x64>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d901      	bls.n	80115bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80115b8:	2303      	movs	r3, #3
 80115ba:	e01b      	b.n	80115f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	691b      	ldr	r3, [r3, #16]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	daf2      	bge.n	80115aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80115c4:	2300      	movs	r3, #0
 80115c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	019b      	lsls	r3, r3, #6
 80115cc:	f043 0220 	orr.w	r2, r3, #32
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3301      	adds	r3, #1
 80115d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	4a08      	ldr	r2, [pc, #32]	; (8011600 <USB_FlushTxFifo+0x64>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d901      	bls.n	80115e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80115e2:	2303      	movs	r3, #3
 80115e4:	e006      	b.n	80115f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	f003 0320 	and.w	r3, r3, #32
 80115ee:	2b20      	cmp	r3, #32
 80115f0:	d0f0      	beq.n	80115d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	00030d40 	.word	0x00030d40

08011604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011604:	b480      	push	{r7}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801160c:	2300      	movs	r3, #0
 801160e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	3301      	adds	r3, #1
 8011614:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	4a11      	ldr	r2, [pc, #68]	; (8011660 <USB_FlushRxFifo+0x5c>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d901      	bls.n	8011622 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801161e:	2303      	movs	r3, #3
 8011620:	e018      	b.n	8011654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	daf2      	bge.n	8011610 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801162a:	2300      	movs	r3, #0
 801162c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2210      	movs	r2, #16
 8011632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	3301      	adds	r3, #1
 8011638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	4a08      	ldr	r2, [pc, #32]	; (8011660 <USB_FlushRxFifo+0x5c>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d901      	bls.n	8011646 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011642:	2303      	movs	r3, #3
 8011644:	e006      	b.n	8011654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	f003 0310 	and.w	r3, r3, #16
 801164e:	2b10      	cmp	r3, #16
 8011650:	d0f0      	beq.n	8011634 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	00030d40 	.word	0x00030d40

08011664 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	78fb      	ldrb	r3, [r7, #3]
 801167e:	68f9      	ldr	r1, [r7, #12]
 8011680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011684:	4313      	orrs	r3, r2
 8011686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011688:	2300      	movs	r3, #0
}
 801168a:	4618      	mov	r0, r3
 801168c:	3714      	adds	r7, #20
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011696:	b480      	push	{r7}
 8011698:	b087      	sub	sp, #28
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116a8:	689b      	ldr	r3, [r3, #8]
 80116aa:	f003 0306 	and.w	r3, r3, #6
 80116ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d102      	bne.n	80116bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80116b6:	2300      	movs	r3, #0
 80116b8:	75fb      	strb	r3, [r7, #23]
 80116ba:	e00a      	b.n	80116d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d002      	beq.n	80116c8 <USB_GetDevSpeed+0x32>
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2b06      	cmp	r3, #6
 80116c6:	d102      	bne.n	80116ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80116c8:	2302      	movs	r3, #2
 80116ca:	75fb      	strb	r3, [r7, #23]
 80116cc:	e001      	b.n	80116d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80116ce:	230f      	movs	r3, #15
 80116d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80116d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	371c      	adds	r7, #28
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	785b      	ldrb	r3, [r3, #1]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d139      	bne.n	8011770 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011702:	69da      	ldr	r2, [r3, #28]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	f003 030f 	and.w	r3, r3, #15
 801170c:	2101      	movs	r1, #1
 801170e:	fa01 f303 	lsl.w	r3, r1, r3
 8011712:	b29b      	uxth	r3, r3
 8011714:	68f9      	ldr	r1, [r7, #12]
 8011716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801171a:	4313      	orrs	r3, r2
 801171c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	015a      	lsls	r2, r3, #5
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	4413      	add	r3, r2
 8011726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011730:	2b00      	cmp	r3, #0
 8011732:	d153      	bne.n	80117dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	015a      	lsls	r2, r3, #5
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	4413      	add	r3, r2
 801173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	689b      	ldr	r3, [r3, #8]
 8011746:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	791b      	ldrb	r3, [r3, #4]
 801174e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011750:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	059b      	lsls	r3, r3, #22
 8011756:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011758:	431a      	orrs	r2, r3
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	0159      	lsls	r1, r3, #5
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	440b      	add	r3, r1
 8011762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011766:	4619      	mov	r1, r3
 8011768:	4b20      	ldr	r3, [pc, #128]	; (80117ec <USB_ActivateEndpoint+0x10c>)
 801176a:	4313      	orrs	r3, r2
 801176c:	600b      	str	r3, [r1, #0]
 801176e:	e035      	b.n	80117dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011776:	69da      	ldr	r2, [r3, #28]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	f003 030f 	and.w	r3, r3, #15
 8011780:	2101      	movs	r1, #1
 8011782:	fa01 f303 	lsl.w	r3, r1, r3
 8011786:	041b      	lsls	r3, r3, #16
 8011788:	68f9      	ldr	r1, [r7, #12]
 801178a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801178e:	4313      	orrs	r3, r2
 8011790:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	015a      	lsls	r2, r3, #5
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	4413      	add	r3, r2
 801179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d119      	bne.n	80117dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	015a      	lsls	r2, r3, #5
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4413      	add	r3, r2
 80117b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	791b      	ldrb	r3, [r3, #4]
 80117c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80117c4:	430b      	orrs	r3, r1
 80117c6:	431a      	orrs	r2, r3
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	0159      	lsls	r1, r3, #5
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	440b      	add	r3, r1
 80117d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117d4:	4619      	mov	r1, r3
 80117d6:	4b05      	ldr	r3, [pc, #20]	; (80117ec <USB_ActivateEndpoint+0x10c>)
 80117d8:	4313      	orrs	r3, r2
 80117da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80117dc:	2300      	movs	r3, #0
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3714      	adds	r7, #20
 80117e2:	46bd      	mov	sp, r7
 80117e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	10008000 	.word	0x10008000

080117f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	785b      	ldrb	r3, [r3, #1]
 8011808:	2b01      	cmp	r3, #1
 801180a:	d161      	bne.n	80118d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	015a      	lsls	r2, r3, #5
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	4413      	add	r3, r2
 8011814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801181e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011822:	d11f      	bne.n	8011864 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	015a      	lsls	r2, r3, #5
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	4413      	add	r3, r2
 801182c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	0151      	lsls	r1, r2, #5
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	440a      	add	r2, r1
 801183a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801183e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011842:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	015a      	lsls	r2, r3, #5
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	4413      	add	r3, r2
 801184c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	0151      	lsls	r1, r2, #5
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	440a      	add	r2, r1
 801185a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801185e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011862:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	f003 030f 	and.w	r3, r3, #15
 8011874:	2101      	movs	r1, #1
 8011876:	fa01 f303 	lsl.w	r3, r1, r3
 801187a:	b29b      	uxth	r3, r3
 801187c:	43db      	mvns	r3, r3
 801187e:	68f9      	ldr	r1, [r7, #12]
 8011880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011884:	4013      	ands	r3, r2
 8011886:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801188e:	69da      	ldr	r2, [r3, #28]
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	f003 030f 	and.w	r3, r3, #15
 8011898:	2101      	movs	r1, #1
 801189a:	fa01 f303 	lsl.w	r3, r1, r3
 801189e:	b29b      	uxth	r3, r3
 80118a0:	43db      	mvns	r3, r3
 80118a2:	68f9      	ldr	r1, [r7, #12]
 80118a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118a8:	4013      	ands	r3, r2
 80118aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	015a      	lsls	r2, r3, #5
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	4413      	add	r3, r2
 80118b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	0159      	lsls	r1, r3, #5
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	440b      	add	r3, r1
 80118c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118c6:	4619      	mov	r1, r3
 80118c8:	4b35      	ldr	r3, [pc, #212]	; (80119a0 <USB_DeactivateEndpoint+0x1b0>)
 80118ca:	4013      	ands	r3, r2
 80118cc:	600b      	str	r3, [r1, #0]
 80118ce:	e060      	b.n	8011992 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	015a      	lsls	r2, r3, #5
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	4413      	add	r3, r2
 80118d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80118e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118e6:	d11f      	bne.n	8011928 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	0151      	lsls	r1, r2, #5
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	440a      	add	r2, r1
 80118fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011906:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	015a      	lsls	r2, r3, #5
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4413      	add	r3, r2
 8011910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	0151      	lsls	r1, r2, #5
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	440a      	add	r2, r1
 801191e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801192e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 030f 	and.w	r3, r3, #15
 8011938:	2101      	movs	r1, #1
 801193a:	fa01 f303 	lsl.w	r3, r1, r3
 801193e:	041b      	lsls	r3, r3, #16
 8011940:	43db      	mvns	r3, r3
 8011942:	68f9      	ldr	r1, [r7, #12]
 8011944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011948:	4013      	ands	r3, r2
 801194a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011952:	69da      	ldr	r2, [r3, #28]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	f003 030f 	and.w	r3, r3, #15
 801195c:	2101      	movs	r1, #1
 801195e:	fa01 f303 	lsl.w	r3, r1, r3
 8011962:	041b      	lsls	r3, r3, #16
 8011964:	43db      	mvns	r3, r3
 8011966:	68f9      	ldr	r1, [r7, #12]
 8011968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801196c:	4013      	ands	r3, r2
 801196e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	015a      	lsls	r2, r3, #5
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	4413      	add	r3, r2
 8011978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	0159      	lsls	r1, r3, #5
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	440b      	add	r3, r1
 8011986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801198a:	4619      	mov	r1, r3
 801198c:	4b05      	ldr	r3, [pc, #20]	; (80119a4 <USB_DeactivateEndpoint+0x1b4>)
 801198e:	4013      	ands	r3, r2
 8011990:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	ec337800 	.word	0xec337800
 80119a4:	eff37800 	.word	0xeff37800

080119a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b08a      	sub	sp, #40	; 0x28
 80119ac:	af02      	add	r7, sp, #8
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	4613      	mov	r3, r2
 80119b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	785b      	ldrb	r3, [r3, #1]
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	f040 8181 	bne.w	8011ccc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d132      	bne.n	8011a38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	015a      	lsls	r2, r3, #5
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	4413      	add	r3, r2
 80119da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119de:	691a      	ldr	r2, [r3, #16]
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	0159      	lsls	r1, r3, #5
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	440b      	add	r3, r1
 80119e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ec:	4619      	mov	r1, r3
 80119ee:	4ba5      	ldr	r3, [pc, #660]	; (8011c84 <USB_EPStartXfer+0x2dc>)
 80119f0:	4013      	ands	r3, r2
 80119f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	69ba      	ldr	r2, [r7, #24]
 8011a04:	0151      	lsls	r1, r2, #5
 8011a06:	69fa      	ldr	r2, [r7, #28]
 8011a08:	440a      	add	r2, r1
 8011a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	015a      	lsls	r2, r3, #5
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a20:	691a      	ldr	r2, [r3, #16]
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	0159      	lsls	r1, r3, #5
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	440b      	add	r3, r1
 8011a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4b95      	ldr	r3, [pc, #596]	; (8011c88 <USB_EPStartXfer+0x2e0>)
 8011a32:	4013      	ands	r3, r2
 8011a34:	610b      	str	r3, [r1, #16]
 8011a36:	e092      	b.n	8011b5e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	015a      	lsls	r2, r3, #5
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	4413      	add	r3, r2
 8011a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a44:	691a      	ldr	r2, [r3, #16]
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	0159      	lsls	r1, r3, #5
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	440b      	add	r3, r1
 8011a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a52:	4619      	mov	r1, r3
 8011a54:	4b8c      	ldr	r3, [pc, #560]	; (8011c88 <USB_EPStartXfer+0x2e0>)
 8011a56:	4013      	ands	r3, r2
 8011a58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	015a      	lsls	r2, r3, #5
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	4413      	add	r3, r2
 8011a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a66:	691a      	ldr	r2, [r3, #16]
 8011a68:	69bb      	ldr	r3, [r7, #24]
 8011a6a:	0159      	lsls	r1, r3, #5
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	440b      	add	r3, r1
 8011a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a74:	4619      	mov	r1, r3
 8011a76:	4b83      	ldr	r3, [pc, #524]	; (8011c84 <USB_EPStartXfer+0x2dc>)
 8011a78:	4013      	ands	r3, r2
 8011a7a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011a7c:	69bb      	ldr	r3, [r7, #24]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d11a      	bne.n	8011ab8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	691a      	ldr	r2, [r3, #16]
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d903      	bls.n	8011a96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	689a      	ldr	r2, [r3, #8]
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	015a      	lsls	r2, r3, #5
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	69ba      	ldr	r2, [r7, #24]
 8011aa6:	0151      	lsls	r1, r2, #5
 8011aa8:	69fa      	ldr	r2, [r7, #28]
 8011aaa:	440a      	add	r2, r1
 8011aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ab4:	6113      	str	r3, [r2, #16]
 8011ab6:	e01b      	b.n	8011af0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	015a      	lsls	r2, r3, #5
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	4413      	add	r3, r2
 8011ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ac4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	6919      	ldr	r1, [r3, #16]
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	440b      	add	r3, r1
 8011ad0:	1e59      	subs	r1, r3, #1
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	689b      	ldr	r3, [r3, #8]
 8011ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8011ada:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011adc:	4b6b      	ldr	r3, [pc, #428]	; (8011c8c <USB_EPStartXfer+0x2e4>)
 8011ade:	400b      	ands	r3, r1
 8011ae0:	69b9      	ldr	r1, [r7, #24]
 8011ae2:	0148      	lsls	r0, r1, #5
 8011ae4:	69f9      	ldr	r1, [r7, #28]
 8011ae6:	4401      	add	r1, r0
 8011ae8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011aec:	4313      	orrs	r3, r2
 8011aee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	015a      	lsls	r2, r3, #5
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	4413      	add	r3, r2
 8011af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011afc:	691a      	ldr	r2, [r3, #16]
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	691b      	ldr	r3, [r3, #16]
 8011b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011b06:	69b9      	ldr	r1, [r7, #24]
 8011b08:	0148      	lsls	r0, r1, #5
 8011b0a:	69f9      	ldr	r1, [r7, #28]
 8011b0c:	4401      	add	r1, r0
 8011b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011b12:	4313      	orrs	r3, r2
 8011b14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	791b      	ldrb	r3, [r3, #4]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d11f      	bne.n	8011b5e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	015a      	lsls	r2, r3, #5
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	4413      	add	r3, r2
 8011b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	69ba      	ldr	r2, [r7, #24]
 8011b2e:	0151      	lsls	r1, r2, #5
 8011b30:	69fa      	ldr	r2, [r7, #28]
 8011b32:	440a      	add	r2, r1
 8011b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011b3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	015a      	lsls	r2, r3, #5
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	4413      	add	r3, r2
 8011b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b4a:	691b      	ldr	r3, [r3, #16]
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	0151      	lsls	r1, r2, #5
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	440a      	add	r2, r1
 8011b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011b5e:	79fb      	ldrb	r3, [r7, #7]
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	d14b      	bne.n	8011bfc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	69db      	ldr	r3, [r3, #28]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d009      	beq.n	8011b80 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	015a      	lsls	r2, r3, #5
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	4413      	add	r3, r2
 8011b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b78:	461a      	mov	r2, r3
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	69db      	ldr	r3, [r3, #28]
 8011b7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	791b      	ldrb	r3, [r3, #4]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d128      	bne.n	8011bda <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d110      	bne.n	8011bba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	015a      	lsls	r2, r3, #5
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	69ba      	ldr	r2, [r7, #24]
 8011ba8:	0151      	lsls	r1, r2, #5
 8011baa:	69fa      	ldr	r2, [r7, #28]
 8011bac:	440a      	add	r2, r1
 8011bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011bb6:	6013      	str	r3, [r2, #0]
 8011bb8:	e00f      	b.n	8011bda <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	015a      	lsls	r2, r3, #5
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	69ba      	ldr	r2, [r7, #24]
 8011bca:	0151      	lsls	r1, r2, #5
 8011bcc:	69fa      	ldr	r2, [r7, #28]
 8011bce:	440a      	add	r2, r1
 8011bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	015a      	lsls	r2, r3, #5
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	4413      	add	r3, r2
 8011be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	69ba      	ldr	r2, [r7, #24]
 8011bea:	0151      	lsls	r1, r2, #5
 8011bec:	69fa      	ldr	r2, [r7, #28]
 8011bee:	440a      	add	r2, r1
 8011bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011bf8:	6013      	str	r3, [r2, #0]
 8011bfa:	e16a      	b.n	8011ed2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	015a      	lsls	r2, r3, #5
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	4413      	add	r3, r2
 8011c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	69ba      	ldr	r2, [r7, #24]
 8011c0c:	0151      	lsls	r1, r2, #5
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	440a      	add	r2, r1
 8011c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	791b      	ldrb	r3, [r3, #4]
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d015      	beq.n	8011c50 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	691b      	ldr	r3, [r3, #16]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f000 8152 	beq.w	8011ed2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	f003 030f 	and.w	r3, r3, #15
 8011c3e:	2101      	movs	r1, #1
 8011c40:	fa01 f303 	lsl.w	r3, r1, r3
 8011c44:	69f9      	ldr	r1, [r7, #28]
 8011c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	634b      	str	r3, [r1, #52]	; 0x34
 8011c4e:	e140      	b.n	8011ed2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d117      	bne.n	8011c90 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011c60:	69bb      	ldr	r3, [r7, #24]
 8011c62:	015a      	lsls	r2, r3, #5
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	4413      	add	r3, r2
 8011c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	69ba      	ldr	r2, [r7, #24]
 8011c70:	0151      	lsls	r1, r2, #5
 8011c72:	69fa      	ldr	r2, [r7, #28]
 8011c74:	440a      	add	r2, r1
 8011c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c7e:	6013      	str	r3, [r2, #0]
 8011c80:	e016      	b.n	8011cb0 <USB_EPStartXfer+0x308>
 8011c82:	bf00      	nop
 8011c84:	e007ffff 	.word	0xe007ffff
 8011c88:	fff80000 	.word	0xfff80000
 8011c8c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011c90:	69bb      	ldr	r3, [r7, #24]
 8011c92:	015a      	lsls	r2, r3, #5
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	4413      	add	r3, r2
 8011c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	69ba      	ldr	r2, [r7, #24]
 8011ca0:	0151      	lsls	r1, r2, #5
 8011ca2:	69fa      	ldr	r2, [r7, #28]
 8011ca4:	440a      	add	r2, r1
 8011ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	68d9      	ldr	r1, [r3, #12]
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	781a      	ldrb	r2, [r3, #0]
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	691b      	ldr	r3, [r3, #16]
 8011cbc:	b298      	uxth	r0, r3
 8011cbe:	79fb      	ldrb	r3, [r7, #7]
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f000 f9b9 	bl	801203c <USB_WritePacket>
 8011cca:	e102      	b.n	8011ed2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	015a      	lsls	r2, r3, #5
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cd8:	691a      	ldr	r2, [r3, #16]
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	0159      	lsls	r1, r3, #5
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	440b      	add	r3, r1
 8011ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	4b7c      	ldr	r3, [pc, #496]	; (8011edc <USB_EPStartXfer+0x534>)
 8011cea:	4013      	ands	r3, r2
 8011cec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	015a      	lsls	r2, r3, #5
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cfa:	691a      	ldr	r2, [r3, #16]
 8011cfc:	69bb      	ldr	r3, [r7, #24]
 8011cfe:	0159      	lsls	r1, r3, #5
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	440b      	add	r3, r1
 8011d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4b75      	ldr	r3, [pc, #468]	; (8011ee0 <USB_EPStartXfer+0x538>)
 8011d0c:	4013      	ands	r3, r2
 8011d0e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d12f      	bne.n	8011d76 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	691b      	ldr	r3, [r3, #16]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d003      	beq.n	8011d26 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	689a      	ldr	r2, [r3, #8]
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	689a      	ldr	r2, [r3, #8]
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	015a      	lsls	r2, r3, #5
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	4413      	add	r3, r2
 8011d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d3a:	691a      	ldr	r2, [r3, #16]
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	6a1b      	ldr	r3, [r3, #32]
 8011d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d44:	69b9      	ldr	r1, [r7, #24]
 8011d46:	0148      	lsls	r0, r1, #5
 8011d48:	69f9      	ldr	r1, [r7, #28]
 8011d4a:	4401      	add	r1, r0
 8011d4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011d50:	4313      	orrs	r3, r2
 8011d52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	015a      	lsls	r2, r3, #5
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	4413      	add	r3, r2
 8011d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d60:	691b      	ldr	r3, [r3, #16]
 8011d62:	69ba      	ldr	r2, [r7, #24]
 8011d64:	0151      	lsls	r1, r2, #5
 8011d66:	69fa      	ldr	r2, [r7, #28]
 8011d68:	440a      	add	r2, r1
 8011d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d72:	6113      	str	r3, [r2, #16]
 8011d74:	e05f      	b.n	8011e36 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	691b      	ldr	r3, [r3, #16]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d123      	bne.n	8011dc6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	015a      	lsls	r2, r3, #5
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	4413      	add	r3, r2
 8011d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d8a:	691a      	ldr	r2, [r3, #16]
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	689b      	ldr	r3, [r3, #8]
 8011d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d94:	69b9      	ldr	r1, [r7, #24]
 8011d96:	0148      	lsls	r0, r1, #5
 8011d98:	69f9      	ldr	r1, [r7, #28]
 8011d9a:	4401      	add	r1, r0
 8011d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011da0:	4313      	orrs	r3, r2
 8011da2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	015a      	lsls	r2, r3, #5
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	4413      	add	r3, r2
 8011dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011db0:	691b      	ldr	r3, [r3, #16]
 8011db2:	69ba      	ldr	r2, [r7, #24]
 8011db4:	0151      	lsls	r1, r2, #5
 8011db6:	69fa      	ldr	r2, [r7, #28]
 8011db8:	440a      	add	r2, r1
 8011dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011dc2:	6113      	str	r3, [r2, #16]
 8011dc4:	e037      	b.n	8011e36 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	691a      	ldr	r2, [r3, #16]
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	4413      	add	r3, r2
 8011dd0:	1e5a      	subs	r2, r3, #1
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dda:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	8afa      	ldrh	r2, [r7, #22]
 8011de2:	fb03 f202 	mul.w	r2, r3, r2
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011dea:	69bb      	ldr	r3, [r7, #24]
 8011dec:	015a      	lsls	r2, r3, #5
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	4413      	add	r3, r2
 8011df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011df6:	691a      	ldr	r2, [r3, #16]
 8011df8:	8afb      	ldrh	r3, [r7, #22]
 8011dfa:	04d9      	lsls	r1, r3, #19
 8011dfc:	4b39      	ldr	r3, [pc, #228]	; (8011ee4 <USB_EPStartXfer+0x53c>)
 8011dfe:	400b      	ands	r3, r1
 8011e00:	69b9      	ldr	r1, [r7, #24]
 8011e02:	0148      	lsls	r0, r1, #5
 8011e04:	69f9      	ldr	r1, [r7, #28]
 8011e06:	4401      	add	r1, r0
 8011e08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	015a      	lsls	r2, r3, #5
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	4413      	add	r3, r2
 8011e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e1c:	691a      	ldr	r2, [r3, #16]
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	6a1b      	ldr	r3, [r3, #32]
 8011e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e26:	69b9      	ldr	r1, [r7, #24]
 8011e28:	0148      	lsls	r0, r1, #5
 8011e2a:	69f9      	ldr	r1, [r7, #28]
 8011e2c:	4401      	add	r1, r0
 8011e2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011e32:	4313      	orrs	r3, r2
 8011e34:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011e36:	79fb      	ldrb	r3, [r7, #7]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d10d      	bne.n	8011e58 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d009      	beq.n	8011e58 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	68d9      	ldr	r1, [r3, #12]
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e54:	460a      	mov	r2, r1
 8011e56:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	791b      	ldrb	r3, [r3, #4]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d128      	bne.n	8011eb2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011e60:	69fb      	ldr	r3, [r7, #28]
 8011e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d110      	bne.n	8011e92 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	69ba      	ldr	r2, [r7, #24]
 8011e80:	0151      	lsls	r1, r2, #5
 8011e82:	69fa      	ldr	r2, [r7, #28]
 8011e84:	440a      	add	r2, r1
 8011e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e8e:	6013      	str	r3, [r2, #0]
 8011e90:	e00f      	b.n	8011eb2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	015a      	lsls	r2, r3, #5
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	4413      	add	r3, r2
 8011e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	69ba      	ldr	r2, [r7, #24]
 8011ea2:	0151      	lsls	r1, r2, #5
 8011ea4:	69fa      	ldr	r2, [r7, #28]
 8011ea6:	440a      	add	r2, r1
 8011ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011eb0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	015a      	lsls	r2, r3, #5
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	4413      	add	r3, r2
 8011eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	69ba      	ldr	r2, [r7, #24]
 8011ec2:	0151      	lsls	r1, r2, #5
 8011ec4:	69fa      	ldr	r2, [r7, #28]
 8011ec6:	440a      	add	r2, r1
 8011ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011ed0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3720      	adds	r7, #32
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	fff80000 	.word	0xfff80000
 8011ee0:	e007ffff 	.word	0xe007ffff
 8011ee4:	1ff80000 	.word	0x1ff80000

08011ee8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b087      	sub	sp, #28
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	785b      	ldrb	r3, [r3, #1]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d14a      	bne.n	8011f9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	015a      	lsls	r2, r3, #5
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	4413      	add	r3, r2
 8011f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f1e:	f040 8086 	bne.w	801202e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	015a      	lsls	r2, r3, #5
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	683a      	ldr	r2, [r7, #0]
 8011f34:	7812      	ldrb	r2, [r2, #0]
 8011f36:	0151      	lsls	r1, r2, #5
 8011f38:	693a      	ldr	r2, [r7, #16]
 8011f3a:	440a      	add	r2, r1
 8011f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011f44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	015a      	lsls	r2, r3, #5
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	4413      	add	r3, r2
 8011f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	683a      	ldr	r2, [r7, #0]
 8011f58:	7812      	ldrb	r2, [r2, #0]
 8011f5a:	0151      	lsls	r1, r2, #5
 8011f5c:	693a      	ldr	r2, [r7, #16]
 8011f5e:	440a      	add	r2, r1
 8011f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d902      	bls.n	8011f80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011f7e:	e056      	b.n	801202e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	015a      	lsls	r2, r3, #5
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	4413      	add	r3, r2
 8011f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f98:	d0e7      	beq.n	8011f6a <USB_EPStopXfer+0x82>
 8011f9a:	e048      	b.n	801202e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	015a      	lsls	r2, r3, #5
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fb4:	d13b      	bne.n	801202e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	015a      	lsls	r2, r3, #5
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	683a      	ldr	r2, [r7, #0]
 8011fc8:	7812      	ldrb	r2, [r2, #0]
 8011fca:	0151      	lsls	r1, r2, #5
 8011fcc:	693a      	ldr	r2, [r7, #16]
 8011fce:	440a      	add	r2, r1
 8011fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011fd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	015a      	lsls	r2, r3, #5
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	4413      	add	r3, r2
 8011fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	7812      	ldrb	r2, [r2, #0]
 8011fee:	0151      	lsls	r1, r2, #5
 8011ff0:	693a      	ldr	r2, [r7, #16]
 8011ff2:	440a      	add	r2, r1
 8011ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	3301      	adds	r3, #1
 8012002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f242 7210 	movw	r2, #10000	; 0x2710
 801200a:	4293      	cmp	r3, r2
 801200c:	d902      	bls.n	8012014 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801200e:	2301      	movs	r3, #1
 8012010:	75fb      	strb	r3, [r7, #23]
          break;
 8012012:	e00c      	b.n	801202e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	015a      	lsls	r2, r3, #5
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	4413      	add	r3, r2
 801201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801202c:	d0e7      	beq.n	8011ffe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801202e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012030:	4618      	mov	r0, r3
 8012032:	371c      	adds	r7, #28
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr

0801203c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801203c:	b480      	push	{r7}
 801203e:	b089      	sub	sp, #36	; 0x24
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	4611      	mov	r1, r2
 8012048:	461a      	mov	r2, r3
 801204a:	460b      	mov	r3, r1
 801204c:	71fb      	strb	r3, [r7, #7]
 801204e:	4613      	mov	r3, r2
 8012050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801205a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801205e:	2b00      	cmp	r3, #0
 8012060:	d123      	bne.n	80120aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012062:	88bb      	ldrh	r3, [r7, #4]
 8012064:	3303      	adds	r3, #3
 8012066:	089b      	lsrs	r3, r3, #2
 8012068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801206a:	2300      	movs	r3, #0
 801206c:	61bb      	str	r3, [r7, #24]
 801206e:	e018      	b.n	80120a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012070:	79fb      	ldrb	r3, [r7, #7]
 8012072:	031a      	lsls	r2, r3, #12
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	4413      	add	r3, r2
 8012078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801207c:	461a      	mov	r2, r3
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	3301      	adds	r3, #1
 8012088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	3301      	adds	r3, #1
 801208e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	3301      	adds	r3, #1
 8012094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012096:	69fb      	ldr	r3, [r7, #28]
 8012098:	3301      	adds	r3, #1
 801209a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	3301      	adds	r3, #1
 80120a0:	61bb      	str	r3, [r7, #24]
 80120a2:	69ba      	ldr	r2, [r7, #24]
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d3e2      	bcc.n	8012070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80120aa:	2300      	movs	r3, #0
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3724      	adds	r7, #36	; 0x24
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b08b      	sub	sp, #44	; 0x2c
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	4613      	mov	r3, r2
 80120c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80120ce:	88fb      	ldrh	r3, [r7, #6]
 80120d0:	089b      	lsrs	r3, r3, #2
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80120d6:	88fb      	ldrh	r3, [r7, #6]
 80120d8:	f003 0303 	and.w	r3, r3, #3
 80120dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80120de:	2300      	movs	r3, #0
 80120e0:	623b      	str	r3, [r7, #32]
 80120e2:	e014      	b.n	801210e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	3301      	adds	r3, #1
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	3301      	adds	r3, #1
 80120fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	3301      	adds	r3, #1
 8012100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012104:	3301      	adds	r3, #1
 8012106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	3301      	adds	r3, #1
 801210c:	623b      	str	r3, [r7, #32]
 801210e:	6a3a      	ldr	r2, [r7, #32]
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	429a      	cmp	r2, r3
 8012114:	d3e6      	bcc.n	80120e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012116:	8bfb      	ldrh	r3, [r7, #30]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d01e      	beq.n	801215a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801211c:	2300      	movs	r3, #0
 801211e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012120:	69bb      	ldr	r3, [r7, #24]
 8012122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012126:	461a      	mov	r2, r3
 8012128:	f107 0310 	add.w	r3, r7, #16
 801212c:	6812      	ldr	r2, [r2, #0]
 801212e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012130:	693a      	ldr	r2, [r7, #16]
 8012132:	6a3b      	ldr	r3, [r7, #32]
 8012134:	b2db      	uxtb	r3, r3
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	fa22 f303 	lsr.w	r3, r2, r3
 801213c:	b2da      	uxtb	r2, r3
 801213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012140:	701a      	strb	r2, [r3, #0]
      i++;
 8012142:	6a3b      	ldr	r3, [r7, #32]
 8012144:	3301      	adds	r3, #1
 8012146:	623b      	str	r3, [r7, #32]
      pDest++;
 8012148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214a:	3301      	adds	r3, #1
 801214c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801214e:	8bfb      	ldrh	r3, [r7, #30]
 8012150:	3b01      	subs	r3, #1
 8012152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012154:	8bfb      	ldrh	r3, [r7, #30]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1ea      	bne.n	8012130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801215c:	4618      	mov	r0, r3
 801215e:	372c      	adds	r7, #44	; 0x2c
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	785b      	ldrb	r3, [r3, #1]
 8012180:	2b01      	cmp	r3, #1
 8012182:	d12c      	bne.n	80121de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012184:	68bb      	ldr	r3, [r7, #8]
 8012186:	015a      	lsls	r2, r3, #5
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	4413      	add	r3, r2
 801218c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	db12      	blt.n	80121bc <USB_EPSetStall+0x54>
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d00f      	beq.n	80121bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	015a      	lsls	r2, r3, #5
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	4413      	add	r3, r2
 80121a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	0151      	lsls	r1, r2, #5
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	440a      	add	r2, r1
 80121b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80121ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	015a      	lsls	r2, r3, #5
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	4413      	add	r3, r2
 80121c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	0151      	lsls	r1, r2, #5
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	440a      	add	r2, r1
 80121d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	e02b      	b.n	8012236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	015a      	lsls	r2, r3, #5
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	4413      	add	r3, r2
 80121e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	db12      	blt.n	8012216 <USB_EPSetStall+0xae>
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00f      	beq.n	8012216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	015a      	lsls	r2, r3, #5
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	4413      	add	r3, r2
 80121fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	68ba      	ldr	r2, [r7, #8]
 8012206:	0151      	lsls	r1, r2, #5
 8012208:	68fa      	ldr	r2, [r7, #12]
 801220a:	440a      	add	r2, r1
 801220c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	015a      	lsls	r2, r3, #5
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	4413      	add	r3, r2
 801221e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	68ba      	ldr	r2, [r7, #8]
 8012226:	0151      	lsls	r1, r2, #5
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	440a      	add	r2, r1
 801222c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012236:	2300      	movs	r3, #0
}
 8012238:	4618      	mov	r0, r3
 801223a:	3714      	adds	r7, #20
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	785b      	ldrb	r3, [r3, #1]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d128      	bne.n	80122b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	015a      	lsls	r2, r3, #5
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	4413      	add	r3, r2
 8012268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	68ba      	ldr	r2, [r7, #8]
 8012270:	0151      	lsls	r1, r2, #5
 8012272:	68fa      	ldr	r2, [r7, #12]
 8012274:	440a      	add	r2, r1
 8012276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801227a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801227e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	791b      	ldrb	r3, [r3, #4]
 8012284:	2b03      	cmp	r3, #3
 8012286:	d003      	beq.n	8012290 <USB_EPClearStall+0x4c>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	791b      	ldrb	r3, [r3, #4]
 801228c:	2b02      	cmp	r3, #2
 801228e:	d138      	bne.n	8012302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	015a      	lsls	r2, r3, #5
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4413      	add	r3, r2
 8012298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	68ba      	ldr	r2, [r7, #8]
 80122a0:	0151      	lsls	r1, r2, #5
 80122a2:	68fa      	ldr	r2, [r7, #12]
 80122a4:	440a      	add	r2, r1
 80122a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	e027      	b.n	8012302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	015a      	lsls	r2, r3, #5
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	4413      	add	r3, r2
 80122ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	68ba      	ldr	r2, [r7, #8]
 80122c2:	0151      	lsls	r1, r2, #5
 80122c4:	68fa      	ldr	r2, [r7, #12]
 80122c6:	440a      	add	r2, r1
 80122c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80122d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	791b      	ldrb	r3, [r3, #4]
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d003      	beq.n	80122e2 <USB_EPClearStall+0x9e>
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	791b      	ldrb	r3, [r3, #4]
 80122de:	2b02      	cmp	r3, #2
 80122e0:	d10f      	bne.n	8012302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	015a      	lsls	r2, r3, #5
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	4413      	add	r3, r2
 80122ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	0151      	lsls	r1, r2, #5
 80122f4:	68fa      	ldr	r2, [r7, #12]
 80122f6:	440a      	add	r2, r1
 80122f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012310:	b480      	push	{r7}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	460b      	mov	r3, r1
 801231a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801232e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	78fb      	ldrb	r3, [r7, #3]
 801233e:	011b      	lsls	r3, r3, #4
 8012340:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012344:	68f9      	ldr	r1, [r7, #12]
 8012346:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801234a:	4313      	orrs	r3, r2
 801234c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3714      	adds	r7, #20
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012376:	f023 0303 	bic.w	r3, r3, #3
 801237a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	68fa      	ldr	r2, [r7, #12]
 8012386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801238a:	f023 0302 	bic.w	r3, r3, #2
 801238e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	4618      	mov	r0, r3
 8012394:	3714      	adds	r7, #20
 8012396:	46bd      	mov	sp, r7
 8012398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239c:	4770      	bx	lr

0801239e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801239e:	b480      	push	{r7}
 80123a0:	b085      	sub	sp, #20
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80123b8:	f023 0303 	bic.w	r3, r3, #3
 80123bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80123cc:	f043 0302 	orr.w	r3, r3, #2
 80123d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b085      	sub	sp, #20
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	695b      	ldr	r3, [r3, #20]
 80123ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	699b      	ldr	r3, [r3, #24]
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	4013      	ands	r3, r2
 80123f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80123f8:	68fb      	ldr	r3, [r7, #12]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012406:	b480      	push	{r7}
 8012408:	b085      	sub	sp, #20
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012418:	699b      	ldr	r3, [r3, #24]
 801241a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	4013      	ands	r3, r2
 8012428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	0c1b      	lsrs	r3, r3, #16
}
 801242e:	4618      	mov	r0, r3
 8012430:	3714      	adds	r7, #20
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr

0801243a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801243a:	b480      	push	{r7}
 801243c:	b085      	sub	sp, #20
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801244c:	699b      	ldr	r3, [r3, #24]
 801244e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012456:	69db      	ldr	r3, [r3, #28]
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	4013      	ands	r3, r2
 801245c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	b29b      	uxth	r3, r3
}
 8012462:	4618      	mov	r0, r3
 8012464:	3714      	adds	r7, #20
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801246e:	b480      	push	{r7}
 8012470:	b085      	sub	sp, #20
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
 8012476:	460b      	mov	r3, r1
 8012478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801247e:	78fb      	ldrb	r3, [r7, #3]
 8012480:	015a      	lsls	r2, r3, #5
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	4413      	add	r3, r2
 8012486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801248a:	689b      	ldr	r3, [r3, #8]
 801248c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012494:	695b      	ldr	r3, [r3, #20]
 8012496:	68ba      	ldr	r2, [r7, #8]
 8012498:	4013      	ands	r3, r2
 801249a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801249c:	68bb      	ldr	r3, [r7, #8]
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3714      	adds	r7, #20
 80124a2:	46bd      	mov	sp, r7
 80124a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a8:	4770      	bx	lr

080124aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80124aa:	b480      	push	{r7}
 80124ac:	b087      	sub	sp, #28
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	460b      	mov	r3, r1
 80124b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80124ce:	78fb      	ldrb	r3, [r7, #3]
 80124d0:	f003 030f 	and.w	r3, r3, #15
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	fa22 f303 	lsr.w	r3, r2, r3
 80124da:	01db      	lsls	r3, r3, #7
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	693a      	ldr	r2, [r7, #16]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80124e4:	78fb      	ldrb	r3, [r7, #3]
 80124e6:	015a      	lsls	r2, r3, #5
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	4413      	add	r3, r2
 80124ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	693a      	ldr	r2, [r7, #16]
 80124f4:	4013      	ands	r3, r2
 80124f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80124f8:	68bb      	ldr	r3, [r7, #8]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	371c      	adds	r7, #28
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	695b      	ldr	r3, [r3, #20]
 8012512:	f003 0301 	and.w	r3, r3, #1
}
 8012516:	4618      	mov	r0, r3
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
	...

08012524 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012524:	b480      	push	{r7}
 8012526:	b085      	sub	sp, #20
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801253e:	4619      	mov	r1, r3
 8012540:	4b09      	ldr	r3, [pc, #36]	; (8012568 <USB_ActivateSetup+0x44>)
 8012542:	4013      	ands	r3, r2
 8012544:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr
 8012568:	fffff800 	.word	0xfffff800

0801256c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801256c:	b480      	push	{r7}
 801256e:	b087      	sub	sp, #28
 8012570:	af00      	add	r7, sp, #0
 8012572:	60f8      	str	r0, [r7, #12]
 8012574:	460b      	mov	r3, r1
 8012576:	607a      	str	r2, [r7, #4]
 8012578:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	333c      	adds	r3, #60	; 0x3c
 8012582:	3304      	adds	r3, #4
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	4a26      	ldr	r2, [pc, #152]	; (8012624 <USB_EP0_OutStart+0xb8>)
 801258c:	4293      	cmp	r3, r2
 801258e:	d90a      	bls.n	80125a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801259c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125a0:	d101      	bne.n	80125a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80125a2:	2300      	movs	r3, #0
 80125a4:	e037      	b.n	8012616 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ac:	461a      	mov	r2, r3
 80125ae:	2300      	movs	r3, #0
 80125b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b8:	691b      	ldr	r3, [r3, #16]
 80125ba:	697a      	ldr	r2, [r7, #20]
 80125bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80125c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125cc:	691b      	ldr	r3, [r3, #16]
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125d4:	f043 0318 	orr.w	r3, r3, #24
 80125d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125e0:	691b      	ldr	r3, [r3, #16]
 80125e2:	697a      	ldr	r2, [r7, #20]
 80125e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80125ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80125ee:	7afb      	ldrb	r3, [r7, #11]
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d10f      	bne.n	8012614 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125fa:	461a      	mov	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	697a      	ldr	r2, [r7, #20]
 801260a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801260e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012614:	2300      	movs	r3, #0
}
 8012616:	4618      	mov	r0, r3
 8012618:	371c      	adds	r7, #28
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	4f54300a 	.word	0x4f54300a

08012628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012628:	b480      	push	{r7}
 801262a:	b085      	sub	sp, #20
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012630:	2300      	movs	r3, #0
 8012632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	3301      	adds	r3, #1
 8012638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	4a13      	ldr	r2, [pc, #76]	; (801268c <USB_CoreReset+0x64>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d901      	bls.n	8012646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012642:	2303      	movs	r3, #3
 8012644:	e01b      	b.n	801267e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	691b      	ldr	r3, [r3, #16]
 801264a:	2b00      	cmp	r3, #0
 801264c:	daf2      	bge.n	8012634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801264e:	2300      	movs	r3, #0
 8012650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	691b      	ldr	r3, [r3, #16]
 8012656:	f043 0201 	orr.w	r2, r3, #1
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3301      	adds	r3, #1
 8012662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	4a09      	ldr	r2, [pc, #36]	; (801268c <USB_CoreReset+0x64>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d901      	bls.n	8012670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801266c:	2303      	movs	r3, #3
 801266e:	e006      	b.n	801267e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	f003 0301 	and.w	r3, r3, #1
 8012678:	2b01      	cmp	r3, #1
 801267a:	d0f0      	beq.n	801265e <USB_CoreReset+0x36>

  return HAL_OK;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	00030d40 	.word	0x00030d40

08012690 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012694:	4904      	ldr	r1, [pc, #16]	; (80126a8 <MX_FATFS_Init+0x18>)
 8012696:	4805      	ldr	r0, [pc, #20]	; (80126ac <MX_FATFS_Init+0x1c>)
 8012698:	f002 fa56 	bl	8014b48 <FATFS_LinkDriver>
 801269c:	4603      	mov	r3, r0
 801269e:	461a      	mov	r2, r3
 80126a0:	4b03      	ldr	r3, [pc, #12]	; (80126b0 <MX_FATFS_Init+0x20>)
 80126a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80126a4:	bf00      	nop
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	24000cd0 	.word	0x24000cd0
 80126ac:	0801a3c8 	.word	0x0801a3c8
 80126b0:	24000ccc 	.word	0x24000ccc

080126b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80126be:	f000 f885 	bl	80127cc <BSP_SD_IsDetected>
 80126c2:	4603      	mov	r3, r0
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d001      	beq.n	80126cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80126c8:	2302      	movs	r3, #2
 80126ca:	e012      	b.n	80126f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80126cc:	480b      	ldr	r0, [pc, #44]	; (80126fc <BSP_SD_Init+0x48>)
 80126ce:	f7f9 fb9f 	bl	800be10 <HAL_SD_Init>
 80126d2:	4603      	mov	r3, r0
 80126d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80126d6:	79fb      	ldrb	r3, [r7, #7]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d109      	bne.n	80126f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80126dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80126e0:	4806      	ldr	r0, [pc, #24]	; (80126fc <BSP_SD_Init+0x48>)
 80126e2:	f7fa fa55 	bl	800cb90 <HAL_SD_ConfigWideBusOperation>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80126ec:	2301      	movs	r3, #1
 80126ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80126f0:	79fb      	ldrb	r3, [r7, #7]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	240005b4 	.word	0x240005b4

08012700 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801270c:	2300      	movs	r3, #0
 801270e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	68ba      	ldr	r2, [r7, #8]
 8012714:	68f9      	ldr	r1, [r7, #12]
 8012716:	4806      	ldr	r0, [pc, #24]	; (8012730 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012718:	f7f9 fc9a 	bl	800c050 <HAL_SD_ReadBlocks_DMA>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012722:	2301      	movs	r3, #1
 8012724:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012726:	7dfb      	ldrb	r3, [r7, #23]
}
 8012728:	4618      	mov	r0, r3
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	240005b4 	.word	0x240005b4

08012734 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012740:	2300      	movs	r3, #0
 8012742:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	68ba      	ldr	r2, [r7, #8]
 8012748:	68f9      	ldr	r1, [r7, #12]
 801274a:	4806      	ldr	r0, [pc, #24]	; (8012764 <BSP_SD_WriteBlocks_DMA+0x30>)
 801274c:	f7f9 fd28 	bl	800c1a0 <HAL_SD_WriteBlocks_DMA>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801275a:	7dfb      	ldrb	r3, [r7, #23]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	240005b4 	.word	0x240005b4

08012768 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801276c:	4805      	ldr	r0, [pc, #20]	; (8012784 <BSP_SD_GetCardState+0x1c>)
 801276e:	f7fa fb21 	bl	800cdb4 <HAL_SD_GetCardState>
 8012772:	4603      	mov	r3, r0
 8012774:	2b04      	cmp	r3, #4
 8012776:	bf14      	ite	ne
 8012778:	2301      	movne	r3, #1
 801277a:	2300      	moveq	r3, #0
 801277c:	b2db      	uxtb	r3, r3
}
 801277e:	4618      	mov	r0, r3
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	240005b4 	.word	0x240005b4

08012788 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	4803      	ldr	r0, [pc, #12]	; (80127a0 <BSP_SD_GetCardInfo+0x18>)
 8012794:	f7fa f9d0 	bl	800cb38 <HAL_SD_GetCardInfo>
}
 8012798:	bf00      	nop
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	240005b4 	.word	0x240005b4

080127a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80127ac:	f000 f9a0 	bl	8012af0 <BSP_SD_WriteCpltCallback>
}
 80127b0:	bf00      	nop
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}

080127b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80127c0:	f000 f9a2 	bl	8012b08 <BSP_SD_ReadCpltCallback>
}
 80127c4:	bf00      	nop
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80127d2:	2301      	movs	r3, #1
 80127d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80127d6:	f000 f80b 	bl	80127f0 <BSP_PlatformIsDetected>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80127e0:	2300      	movs	r3, #0
 80127e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80127e4:	79fb      	ldrb	r3, [r7, #7]
 80127e6:	b2db      	uxtb	r3, r3
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80127f6:	2301      	movs	r3, #1
 80127f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80127fa:	2104      	movs	r1, #4
 80127fc:	4806      	ldr	r0, [pc, #24]	; (8012818 <BSP_PlatformIsDetected+0x28>)
 80127fe:	f7f4 fadb 	bl	8006db8 <HAL_GPIO_ReadPin>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d001      	beq.n	801280c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012808:	2300      	movs	r3, #0
 801280a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801280c:	79fb      	ldrb	r3, [r7, #7]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3708      	adds	r7, #8
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	58020400 	.word	0x58020400

0801281c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012824:	f7f0 fc36 	bl	8003094 <HAL_GetTick>
 8012828:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801282a:	e006      	b.n	801283a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801282c:	f7ff ff9c 	bl	8012768 <BSP_SD_GetCardState>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012836:	2300      	movs	r3, #0
 8012838:	e009      	b.n	801284e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801283a:	f7f0 fc2b 	bl	8003094 <HAL_GetTick>
 801283e:	4602      	mov	r2, r0
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	1ad3      	subs	r3, r2, r3
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	429a      	cmp	r2, r3
 8012848:	d8f0      	bhi.n	801282c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801284a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801284e:	4618      	mov	r0, r3
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
	...

08012858 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	4603      	mov	r3, r0
 8012860:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012862:	4b0b      	ldr	r3, [pc, #44]	; (8012890 <SD_CheckStatus+0x38>)
 8012864:	2201      	movs	r2, #1
 8012866:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012868:	f7ff ff7e 	bl	8012768 <BSP_SD_GetCardState>
 801286c:	4603      	mov	r3, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d107      	bne.n	8012882 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012872:	4b07      	ldr	r3, [pc, #28]	; (8012890 <SD_CheckStatus+0x38>)
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	b2db      	uxtb	r3, r3
 8012878:	f023 0301 	bic.w	r3, r3, #1
 801287c:	b2da      	uxtb	r2, r3
 801287e:	4b04      	ldr	r3, [pc, #16]	; (8012890 <SD_CheckStatus+0x38>)
 8012880:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012882:	4b03      	ldr	r3, [pc, #12]	; (8012890 <SD_CheckStatus+0x38>)
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	b2db      	uxtb	r3, r3
}
 8012888:	4618      	mov	r0, r3
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	2400000d 	.word	0x2400000d

08012894 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801289e:	f7ff ff09 	bl	80126b4 <BSP_SD_Init>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d107      	bne.n	80128b8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80128a8:	79fb      	ldrb	r3, [r7, #7]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff ffd4 	bl	8012858 <SD_CheckStatus>
 80128b0:	4603      	mov	r3, r0
 80128b2:	461a      	mov	r2, r3
 80128b4:	4b04      	ldr	r3, [pc, #16]	; (80128c8 <SD_initialize+0x34>)
 80128b6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80128b8:	4b03      	ldr	r3, [pc, #12]	; (80128c8 <SD_initialize+0x34>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	b2db      	uxtb	r3, r3
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	2400000d 	.word	0x2400000d

080128cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	4603      	mov	r3, r0
 80128d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80128d6:	79fb      	ldrb	r3, [r7, #7]
 80128d8:	4618      	mov	r0, r3
 80128da:	f7ff ffbd 	bl	8012858 <SD_CheckStatus>
 80128de:	4603      	mov	r3, r0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b086      	sub	sp, #24
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	60b9      	str	r1, [r7, #8]
 80128f0:	607a      	str	r2, [r7, #4]
 80128f2:	603b      	str	r3, [r7, #0]
 80128f4:	4603      	mov	r3, r0
 80128f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80128f8:	2301      	movs	r3, #1
 80128fa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80128fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8012900:	f7ff ff8c 	bl	801281c <SD_CheckStatusWithTimeout>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	da01      	bge.n	801290e <SD_read+0x26>
  {
    return res;
 801290a:	7dfb      	ldrb	r3, [r7, #23]
 801290c:	e03b      	b.n	8012986 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	6879      	ldr	r1, [r7, #4]
 8012912:	68b8      	ldr	r0, [r7, #8]
 8012914:	f7ff fef4 	bl	8012700 <BSP_SD_ReadBlocks_DMA>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	d132      	bne.n	8012984 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801291e:	4b1c      	ldr	r3, [pc, #112]	; (8012990 <SD_read+0xa8>)
 8012920:	2200      	movs	r2, #0
 8012922:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012924:	f7f0 fbb6 	bl	8003094 <HAL_GetTick>
 8012928:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801292a:	bf00      	nop
 801292c:	4b18      	ldr	r3, [pc, #96]	; (8012990 <SD_read+0xa8>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d108      	bne.n	8012946 <SD_read+0x5e>
 8012934:	f7f0 fbae 	bl	8003094 <HAL_GetTick>
 8012938:	4602      	mov	r2, r0
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012942:	4293      	cmp	r3, r2
 8012944:	d9f2      	bls.n	801292c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012946:	4b12      	ldr	r3, [pc, #72]	; (8012990 <SD_read+0xa8>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d102      	bne.n	8012954 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801294e:	2301      	movs	r3, #1
 8012950:	75fb      	strb	r3, [r7, #23]
 8012952:	e017      	b.n	8012984 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012954:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <SD_read+0xa8>)
 8012956:	2200      	movs	r2, #0
 8012958:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801295a:	f7f0 fb9b 	bl	8003094 <HAL_GetTick>
 801295e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012960:	e007      	b.n	8012972 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012962:	f7ff ff01 	bl	8012768 <BSP_SD_GetCardState>
 8012966:	4603      	mov	r3, r0
 8012968:	2b00      	cmp	r3, #0
 801296a:	d102      	bne.n	8012972 <SD_read+0x8a>
          {
            res = RES_OK;
 801296c:	2300      	movs	r3, #0
 801296e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012970:	e008      	b.n	8012984 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012972:	f7f0 fb8f 	bl	8003094 <HAL_GetTick>
 8012976:	4602      	mov	r2, r0
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012980:	4293      	cmp	r3, r2
 8012982:	d9ee      	bls.n	8012962 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012984:	7dfb      	ldrb	r3, [r7, #23]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3718      	adds	r7, #24
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	24000cd8 	.word	0x24000cd8

08012994 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af00      	add	r7, sp, #0
 801299a:	60b9      	str	r1, [r7, #8]
 801299c:	607a      	str	r2, [r7, #4]
 801299e:	603b      	str	r3, [r7, #0]
 80129a0:	4603      	mov	r3, r0
 80129a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80129a4:	2301      	movs	r3, #1
 80129a6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80129a8:	4b24      	ldr	r3, [pc, #144]	; (8012a3c <SD_write+0xa8>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80129ae:	f247 5030 	movw	r0, #30000	; 0x7530
 80129b2:	f7ff ff33 	bl	801281c <SD_CheckStatusWithTimeout>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	da01      	bge.n	80129c0 <SD_write+0x2c>
  {
    return res;
 80129bc:	7dfb      	ldrb	r3, [r7, #23]
 80129be:	e038      	b.n	8012a32 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80129c0:	683a      	ldr	r2, [r7, #0]
 80129c2:	6879      	ldr	r1, [r7, #4]
 80129c4:	68b8      	ldr	r0, [r7, #8]
 80129c6:	f7ff feb5 	bl	8012734 <BSP_SD_WriteBlocks_DMA>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d12f      	bne.n	8012a30 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80129d0:	f7f0 fb60 	bl	8003094 <HAL_GetTick>
 80129d4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80129d6:	bf00      	nop
 80129d8:	4b18      	ldr	r3, [pc, #96]	; (8012a3c <SD_write+0xa8>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d108      	bne.n	80129f2 <SD_write+0x5e>
 80129e0:	f7f0 fb58 	bl	8003094 <HAL_GetTick>
 80129e4:	4602      	mov	r2, r0
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d9f2      	bls.n	80129d8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80129f2:	4b12      	ldr	r3, [pc, #72]	; (8012a3c <SD_write+0xa8>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d102      	bne.n	8012a00 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80129fa:	2301      	movs	r3, #1
 80129fc:	75fb      	strb	r3, [r7, #23]
 80129fe:	e017      	b.n	8012a30 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012a00:	4b0e      	ldr	r3, [pc, #56]	; (8012a3c <SD_write+0xa8>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012a06:	f7f0 fb45 	bl	8003094 <HAL_GetTick>
 8012a0a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a0c:	e007      	b.n	8012a1e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012a0e:	f7ff feab 	bl	8012768 <BSP_SD_GetCardState>
 8012a12:	4603      	mov	r3, r0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d102      	bne.n	8012a1e <SD_write+0x8a>
          {
            res = RES_OK;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8012a1c:	e008      	b.n	8012a30 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a1e:	f7f0 fb39 	bl	8003094 <HAL_GetTick>
 8012a22:	4602      	mov	r2, r0
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	1ad3      	subs	r3, r2, r3
 8012a28:	f247 522f 	movw	r2, #29999	; 0x752f
 8012a2c:	4293      	cmp	r3, r2
 8012a2e:	d9ee      	bls.n	8012a0e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3718      	adds	r7, #24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	24000cd4 	.word	0x24000cd4

08012a40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b08c      	sub	sp, #48	; 0x30
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	4603      	mov	r3, r0
 8012a48:	603a      	str	r2, [r7, #0]
 8012a4a:	71fb      	strb	r3, [r7, #7]
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012a56:	4b25      	ldr	r3, [pc, #148]	; (8012aec <SD_ioctl+0xac>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	f003 0301 	and.w	r3, r3, #1
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d001      	beq.n	8012a68 <SD_ioctl+0x28>
 8012a64:	2303      	movs	r3, #3
 8012a66:	e03c      	b.n	8012ae2 <SD_ioctl+0xa2>

  switch (cmd)
 8012a68:	79bb      	ldrb	r3, [r7, #6]
 8012a6a:	2b03      	cmp	r3, #3
 8012a6c:	d834      	bhi.n	8012ad8 <SD_ioctl+0x98>
 8012a6e:	a201      	add	r2, pc, #4	; (adr r2, 8012a74 <SD_ioctl+0x34>)
 8012a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a74:	08012a85 	.word	0x08012a85
 8012a78:	08012a8d 	.word	0x08012a8d
 8012a7c:	08012aa5 	.word	0x08012aa5
 8012a80:	08012abf 	.word	0x08012abf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012a8a:	e028      	b.n	8012ade <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012a8c:	f107 0308 	add.w	r3, r7, #8
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ff fe79 	bl	8012788 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012a96:	6a3a      	ldr	r2, [r7, #32]
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012aa2:	e01c      	b.n	8012ade <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012aa4:	f107 0308 	add.w	r3, r7, #8
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7ff fe6d 	bl	8012788 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012abc:	e00f      	b.n	8012ade <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012abe:	f107 0308 	add.w	r3, r7, #8
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7ff fe60 	bl	8012788 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	0a5a      	lsrs	r2, r3, #9
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012ad6:	e002      	b.n	8012ade <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012ad8:	2304      	movs	r3, #4
 8012ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3730      	adds	r7, #48	; 0x30
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	2400000d 	.word	0x2400000d

08012af0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012af0:	b480      	push	{r7}
 8012af2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012af4:	4b03      	ldr	r3, [pc, #12]	; (8012b04 <BSP_SD_WriteCpltCallback+0x14>)
 8012af6:	2201      	movs	r2, #1
 8012af8:	601a      	str	r2, [r3, #0]
}
 8012afa:	bf00      	nop
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr
 8012b04:	24000cd4 	.word	0x24000cd4

08012b08 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012b0c:	4b03      	ldr	r3, [pc, #12]	; (8012b1c <BSP_SD_ReadCpltCallback+0x14>)
 8012b0e:	2201      	movs	r2, #1
 8012b10:	601a      	str	r2, [r3, #0]
}
 8012b12:	bf00      	nop
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr
 8012b1c:	24000cd8 	.word	0x24000cd8

08012b20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012b30:	f002 fcea 	bl	8015508 <USBD_static_malloc>
 8012b34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d109      	bne.n	8012b50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	32b0      	adds	r2, #176	; 0xb0
 8012b46:	2100      	movs	r1, #0
 8012b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012b4c:	2302      	movs	r3, #2
 8012b4e:	e0d4      	b.n	8012cfa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012b50:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012b54:	2100      	movs	r1, #0
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f002 fd52 	bl	8015600 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	32b0      	adds	r2, #176	; 0xb0
 8012b66:	68f9      	ldr	r1, [r7, #12]
 8012b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	32b0      	adds	r2, #176	; 0xb0
 8012b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	7c1b      	ldrb	r3, [r3, #16]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d138      	bne.n	8012bfa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b88:	4b5e      	ldr	r3, [pc, #376]	; (8012d04 <USBD_CDC_Init+0x1e4>)
 8012b8a:	7819      	ldrb	r1, [r3, #0]
 8012b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b90:	2202      	movs	r2, #2
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f002 fb95 	bl	80152c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012b98:	4b5a      	ldr	r3, [pc, #360]	; (8012d04 <USBD_CDC_Init+0x1e4>)
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	f003 020f 	and.w	r2, r3, #15
 8012ba0:	6879      	ldr	r1, [r7, #4]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4413      	add	r3, r2
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	440b      	add	r3, r1
 8012bac:	3324      	adds	r3, #36	; 0x24
 8012bae:	2201      	movs	r2, #1
 8012bb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012bb2:	4b55      	ldr	r3, [pc, #340]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012bb4:	7819      	ldrb	r1, [r3, #0]
 8012bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bba:	2202      	movs	r2, #2
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f002 fb80 	bl	80152c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012bc2:	4b51      	ldr	r3, [pc, #324]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	f003 020f 	and.w	r2, r3, #15
 8012bca:	6879      	ldr	r1, [r7, #4]
 8012bcc:	4613      	mov	r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4413      	add	r3, r2
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	440b      	add	r3, r1
 8012bd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012bda:	2201      	movs	r2, #1
 8012bdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012bde:	4b4b      	ldr	r3, [pc, #300]	; (8012d0c <USBD_CDC_Init+0x1ec>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	f003 020f 	and.w	r2, r3, #15
 8012be6:	6879      	ldr	r1, [r7, #4]
 8012be8:	4613      	mov	r3, r2
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	4413      	add	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	440b      	add	r3, r1
 8012bf2:	3326      	adds	r3, #38	; 0x26
 8012bf4:	2210      	movs	r2, #16
 8012bf6:	801a      	strh	r2, [r3, #0]
 8012bf8:	e035      	b.n	8012c66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012bfa:	4b42      	ldr	r3, [pc, #264]	; (8012d04 <USBD_CDC_Init+0x1e4>)
 8012bfc:	7819      	ldrb	r1, [r3, #0]
 8012bfe:	2340      	movs	r3, #64	; 0x40
 8012c00:	2202      	movs	r2, #2
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f002 fb5d 	bl	80152c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012c08:	4b3e      	ldr	r3, [pc, #248]	; (8012d04 <USBD_CDC_Init+0x1e4>)
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	f003 020f 	and.w	r2, r3, #15
 8012c10:	6879      	ldr	r1, [r7, #4]
 8012c12:	4613      	mov	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	4413      	add	r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	440b      	add	r3, r1
 8012c1c:	3324      	adds	r3, #36	; 0x24
 8012c1e:	2201      	movs	r2, #1
 8012c20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012c22:	4b39      	ldr	r3, [pc, #228]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012c24:	7819      	ldrb	r1, [r3, #0]
 8012c26:	2340      	movs	r3, #64	; 0x40
 8012c28:	2202      	movs	r2, #2
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f002 fb49 	bl	80152c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012c30:	4b35      	ldr	r3, [pc, #212]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 020f 	and.w	r2, r3, #15
 8012c38:	6879      	ldr	r1, [r7, #4]
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	440b      	add	r3, r1
 8012c44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012c48:	2201      	movs	r2, #1
 8012c4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012c4c:	4b2f      	ldr	r3, [pc, #188]	; (8012d0c <USBD_CDC_Init+0x1ec>)
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	f003 020f 	and.w	r2, r3, #15
 8012c54:	6879      	ldr	r1, [r7, #4]
 8012c56:	4613      	mov	r3, r2
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	4413      	add	r3, r2
 8012c5c:	009b      	lsls	r3, r3, #2
 8012c5e:	440b      	add	r3, r1
 8012c60:	3326      	adds	r3, #38	; 0x26
 8012c62:	2210      	movs	r2, #16
 8012c64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012c66:	4b29      	ldr	r3, [pc, #164]	; (8012d0c <USBD_CDC_Init+0x1ec>)
 8012c68:	7819      	ldrb	r1, [r3, #0]
 8012c6a:	2308      	movs	r3, #8
 8012c6c:	2203      	movs	r2, #3
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f002 fb27 	bl	80152c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012c74:	4b25      	ldr	r3, [pc, #148]	; (8012d0c <USBD_CDC_Init+0x1ec>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	f003 020f 	and.w	r2, r3, #15
 8012c7c:	6879      	ldr	r1, [r7, #4]
 8012c7e:	4613      	mov	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	4413      	add	r3, r2
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	440b      	add	r3, r1
 8012c88:	3324      	adds	r3, #36	; 0x24
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2200      	movs	r2, #0
 8012c92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	33b0      	adds	r3, #176	; 0xb0
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	4413      	add	r3, r2
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d101      	bne.n	8012cc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012cc4:	2302      	movs	r3, #2
 8012cc6:	e018      	b.n	8012cfa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	7c1b      	ldrb	r3, [r3, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d10a      	bne.n	8012ce6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012cd0:	4b0d      	ldr	r3, [pc, #52]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012cd2:	7819      	ldrb	r1, [r3, #0]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f002 fbde 	bl	80154a0 <USBD_LL_PrepareReceive>
 8012ce4:	e008      	b.n	8012cf8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012ce6:	4b08      	ldr	r3, [pc, #32]	; (8012d08 <USBD_CDC_Init+0x1e8>)
 8012ce8:	7819      	ldrb	r1, [r3, #0]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012cf0:	2340      	movs	r3, #64	; 0x40
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f002 fbd4 	bl	80154a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012cf8:	2300      	movs	r3, #0
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	24000097 	.word	0x24000097
 8012d08:	24000098 	.word	0x24000098
 8012d0c:	24000099 	.word	0x24000099

08012d10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	460b      	mov	r3, r1
 8012d1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012d1c:	4b3a      	ldr	r3, [pc, #232]	; (8012e08 <USBD_CDC_DeInit+0xf8>)
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	4619      	mov	r1, r3
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f002 faf3 	bl	801530e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012d28:	4b37      	ldr	r3, [pc, #220]	; (8012e08 <USBD_CDC_DeInit+0xf8>)
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	f003 020f 	and.w	r2, r3, #15
 8012d30:	6879      	ldr	r1, [r7, #4]
 8012d32:	4613      	mov	r3, r2
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	4413      	add	r3, r2
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	440b      	add	r3, r1
 8012d3c:	3324      	adds	r3, #36	; 0x24
 8012d3e:	2200      	movs	r2, #0
 8012d40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012d42:	4b32      	ldr	r3, [pc, #200]	; (8012e0c <USBD_CDC_DeInit+0xfc>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	4619      	mov	r1, r3
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f002 fae0 	bl	801530e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012d4e:	4b2f      	ldr	r3, [pc, #188]	; (8012e0c <USBD_CDC_DeInit+0xfc>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	f003 020f 	and.w	r2, r3, #15
 8012d56:	6879      	ldr	r1, [r7, #4]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	4413      	add	r3, r2
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	440b      	add	r3, r1
 8012d62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012d66:	2200      	movs	r2, #0
 8012d68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012d6a:	4b29      	ldr	r3, [pc, #164]	; (8012e10 <USBD_CDC_DeInit+0x100>)
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	4619      	mov	r1, r3
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f002 facc 	bl	801530e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012d76:	4b26      	ldr	r3, [pc, #152]	; (8012e10 <USBD_CDC_DeInit+0x100>)
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	f003 020f 	and.w	r2, r3, #15
 8012d7e:	6879      	ldr	r1, [r7, #4]
 8012d80:	4613      	mov	r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	4413      	add	r3, r2
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	440b      	add	r3, r1
 8012d8a:	3324      	adds	r3, #36	; 0x24
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012d90:	4b1f      	ldr	r3, [pc, #124]	; (8012e10 <USBD_CDC_DeInit+0x100>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	f003 020f 	and.w	r2, r3, #15
 8012d98:	6879      	ldr	r1, [r7, #4]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	4413      	add	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	440b      	add	r3, r1
 8012da4:	3326      	adds	r3, #38	; 0x26
 8012da6:	2200      	movs	r2, #0
 8012da8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	32b0      	adds	r2, #176	; 0xb0
 8012db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d01f      	beq.n	8012dfc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	33b0      	adds	r3, #176	; 0xb0
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4413      	add	r3, r2
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	32b0      	adds	r2, #176	; 0xb0
 8012dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f002 fba0 	bl	8015524 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	32b0      	adds	r2, #176	; 0xb0
 8012dee:	2100      	movs	r1, #0
 8012df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3708      	adds	r7, #8
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	24000097 	.word	0x24000097
 8012e0c:	24000098 	.word	0x24000098
 8012e10:	24000099 	.word	0x24000099

08012e14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b086      	sub	sp, #24
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	32b0      	adds	r2, #176	; 0xb0
 8012e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e32:	2300      	movs	r3, #0
 8012e34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e36:	2300      	movs	r3, #0
 8012e38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012e40:	2303      	movs	r3, #3
 8012e42:	e0bf      	b.n	8012fc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d050      	beq.n	8012ef2 <USBD_CDC_Setup+0xde>
 8012e50:	2b20      	cmp	r3, #32
 8012e52:	f040 80af 	bne.w	8012fb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	88db      	ldrh	r3, [r3, #6]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d03a      	beq.n	8012ed4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	b25b      	sxtb	r3, r3
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	da1b      	bge.n	8012ea0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	33b0      	adds	r3, #176	; 0xb0
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	4413      	add	r3, r2
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	689b      	ldr	r3, [r3, #8]
 8012e7a:	683a      	ldr	r2, [r7, #0]
 8012e7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012e7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e80:	683a      	ldr	r2, [r7, #0]
 8012e82:	88d2      	ldrh	r2, [r2, #6]
 8012e84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	88db      	ldrh	r3, [r3, #6]
 8012e8a:	2b07      	cmp	r3, #7
 8012e8c:	bf28      	it	cs
 8012e8e:	2307      	movcs	r3, #7
 8012e90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	89fa      	ldrh	r2, [r7, #14]
 8012e96:	4619      	mov	r1, r3
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f001 fd89 	bl	80149b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012e9e:	e090      	b.n	8012fc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	785a      	ldrb	r2, [r3, #1]
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	88db      	ldrh	r3, [r3, #6]
 8012eae:	2b3f      	cmp	r3, #63	; 0x3f
 8012eb0:	d803      	bhi.n	8012eba <USBD_CDC_Setup+0xa6>
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	88db      	ldrh	r3, [r3, #6]
 8012eb6:	b2da      	uxtb	r2, r3
 8012eb8:	e000      	b.n	8012ebc <USBD_CDC_Setup+0xa8>
 8012eba:	2240      	movs	r2, #64	; 0x40
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012ec2:	6939      	ldr	r1, [r7, #16]
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012eca:	461a      	mov	r2, r3
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f001 fd9b 	bl	8014a08 <USBD_CtlPrepareRx>
      break;
 8012ed2:	e076      	b.n	8012fc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	33b0      	adds	r3, #176	; 0xb0
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	4413      	add	r3, r2
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	7850      	ldrb	r0, [r2, #1]
 8012eea:	2200      	movs	r2, #0
 8012eec:	6839      	ldr	r1, [r7, #0]
 8012eee:	4798      	blx	r3
      break;
 8012ef0:	e067      	b.n	8012fc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	785b      	ldrb	r3, [r3, #1]
 8012ef6:	2b0b      	cmp	r3, #11
 8012ef8:	d851      	bhi.n	8012f9e <USBD_CDC_Setup+0x18a>
 8012efa:	a201      	add	r2, pc, #4	; (adr r2, 8012f00 <USBD_CDC_Setup+0xec>)
 8012efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f00:	08012f31 	.word	0x08012f31
 8012f04:	08012fad 	.word	0x08012fad
 8012f08:	08012f9f 	.word	0x08012f9f
 8012f0c:	08012f9f 	.word	0x08012f9f
 8012f10:	08012f9f 	.word	0x08012f9f
 8012f14:	08012f9f 	.word	0x08012f9f
 8012f18:	08012f9f 	.word	0x08012f9f
 8012f1c:	08012f9f 	.word	0x08012f9f
 8012f20:	08012f9f 	.word	0x08012f9f
 8012f24:	08012f9f 	.word	0x08012f9f
 8012f28:	08012f5b 	.word	0x08012f5b
 8012f2c:	08012f85 	.word	0x08012f85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d107      	bne.n	8012f4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f3c:	f107 030a 	add.w	r3, r7, #10
 8012f40:	2202      	movs	r2, #2
 8012f42:	4619      	mov	r1, r3
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f001 fd33 	bl	80149b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f4a:	e032      	b.n	8012fb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f001 fcbd 	bl	80148ce <USBD_CtlError>
            ret = USBD_FAIL;
 8012f54:	2303      	movs	r3, #3
 8012f56:	75fb      	strb	r3, [r7, #23]
          break;
 8012f58:	e02b      	b.n	8012fb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	2b03      	cmp	r3, #3
 8012f64:	d107      	bne.n	8012f76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f66:	f107 030d 	add.w	r3, r7, #13
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f001 fd1e 	bl	80149b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f74:	e01d      	b.n	8012fb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012f76:	6839      	ldr	r1, [r7, #0]
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f001 fca8 	bl	80148ce <USBD_CtlError>
            ret = USBD_FAIL;
 8012f7e:	2303      	movs	r3, #3
 8012f80:	75fb      	strb	r3, [r7, #23]
          break;
 8012f82:	e016      	b.n	8012fb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	2b03      	cmp	r3, #3
 8012f8e:	d00f      	beq.n	8012fb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012f90:	6839      	ldr	r1, [r7, #0]
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f001 fc9b 	bl	80148ce <USBD_CtlError>
            ret = USBD_FAIL;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f9c:	e008      	b.n	8012fb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f9e:	6839      	ldr	r1, [r7, #0]
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f001 fc94 	bl	80148ce <USBD_CtlError>
          ret = USBD_FAIL;
 8012fa6:	2303      	movs	r3, #3
 8012fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8012faa:	e002      	b.n	8012fb2 <USBD_CDC_Setup+0x19e>
          break;
 8012fac:	bf00      	nop
 8012fae:	e008      	b.n	8012fc2 <USBD_CDC_Setup+0x1ae>
          break;
 8012fb0:	bf00      	nop
      }
      break;
 8012fb2:	e006      	b.n	8012fc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f001 fc89 	bl	80148ce <USBD_CtlError>
      ret = USBD_FAIL;
 8012fbc:	2303      	movs	r3, #3
 8012fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8012fc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8012fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3718      	adds	r7, #24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012fde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	32b0      	adds	r2, #176	; 0xb0
 8012fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d101      	bne.n	8012ff6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	e065      	b.n	80130c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	32b0      	adds	r2, #176	; 0xb0
 8013000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013004:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013006:	78fb      	ldrb	r3, [r7, #3]
 8013008:	f003 020f 	and.w	r2, r3, #15
 801300c:	6879      	ldr	r1, [r7, #4]
 801300e:	4613      	mov	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4413      	add	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	440b      	add	r3, r1
 8013018:	3318      	adds	r3, #24
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d02f      	beq.n	8013080 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	f003 020f 	and.w	r2, r3, #15
 8013026:	6879      	ldr	r1, [r7, #4]
 8013028:	4613      	mov	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	4413      	add	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	440b      	add	r3, r1
 8013032:	3318      	adds	r3, #24
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	78fb      	ldrb	r3, [r7, #3]
 8013038:	f003 010f 	and.w	r1, r3, #15
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	460b      	mov	r3, r1
 8013040:	00db      	lsls	r3, r3, #3
 8013042:	440b      	add	r3, r1
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4403      	add	r3, r0
 8013048:	3344      	adds	r3, #68	; 0x44
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013050:	fb01 f303 	mul.w	r3, r1, r3
 8013054:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013056:	2b00      	cmp	r3, #0
 8013058:	d112      	bne.n	8013080 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801305a:	78fb      	ldrb	r3, [r7, #3]
 801305c:	f003 020f 	and.w	r2, r3, #15
 8013060:	6879      	ldr	r1, [r7, #4]
 8013062:	4613      	mov	r3, r2
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	440b      	add	r3, r1
 801306c:	3318      	adds	r3, #24
 801306e:	2200      	movs	r2, #0
 8013070:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013072:	78f9      	ldrb	r1, [r7, #3]
 8013074:	2300      	movs	r3, #0
 8013076:	2200      	movs	r2, #0
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f002 f9f0 	bl	801545e <USBD_LL_Transmit>
 801307e:	e01f      	b.n	80130c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	2200      	movs	r2, #0
 8013084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	33b0      	adds	r3, #176	; 0xb0
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4413      	add	r3, r2
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	691b      	ldr	r3, [r3, #16]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d010      	beq.n	80130c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	33b0      	adds	r3, #176	; 0xb0
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	4413      	add	r3, r2
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	691b      	ldr	r3, [r3, #16]
 80130b0:	68ba      	ldr	r2, [r7, #8]
 80130b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80130b6:	68ba      	ldr	r2, [r7, #8]
 80130b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80130bc:	78fa      	ldrb	r2, [r7, #3]
 80130be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b084      	sub	sp, #16
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
 80130d2:	460b      	mov	r3, r1
 80130d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	32b0      	adds	r2, #176	; 0xb0
 80130e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	32b0      	adds	r2, #176	; 0xb0
 80130f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d101      	bne.n	80130fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80130f8:	2303      	movs	r3, #3
 80130fa:	e01a      	b.n	8013132 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80130fc:	78fb      	ldrb	r3, [r7, #3]
 80130fe:	4619      	mov	r1, r3
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f002 f9ee 	bl	80154e2 <USBD_LL_GetRxDataSize>
 8013106:	4602      	mov	r2, r0
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	33b0      	adds	r3, #176	; 0xb0
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801312c:	4611      	mov	r1, r2
 801312e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	3710      	adds	r7, #16
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801313a:	b580      	push	{r7, lr}
 801313c:	b084      	sub	sp, #16
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	32b0      	adds	r2, #176	; 0xb0
 801314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013150:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013158:	2303      	movs	r3, #3
 801315a:	e025      	b.n	80131a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	33b0      	adds	r3, #176	; 0xb0
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	4413      	add	r3, r2
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d01a      	beq.n	80131a6 <USBD_CDC_EP0_RxReady+0x6c>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013176:	2bff      	cmp	r3, #255	; 0xff
 8013178:	d015      	beq.n	80131a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013180:	687a      	ldr	r2, [r7, #4]
 8013182:	33b0      	adds	r3, #176	; 0xb0
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	4413      	add	r3, r2
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013192:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801319a:	b292      	uxth	r2, r2
 801319c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	22ff      	movs	r2, #255	; 0xff
 80131a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80131a6:	2300      	movs	r3, #0
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3710      	adds	r7, #16
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131b8:	2182      	movs	r1, #130	; 0x82
 80131ba:	4818      	ldr	r0, [pc, #96]	; (801321c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131bc:	f000 fd4f 	bl	8013c5e <USBD_GetEpDesc>
 80131c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131c2:	2101      	movs	r1, #1
 80131c4:	4815      	ldr	r0, [pc, #84]	; (801321c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131c6:	f000 fd4a 	bl	8013c5e <USBD_GetEpDesc>
 80131ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80131cc:	2181      	movs	r1, #129	; 0x81
 80131ce:	4813      	ldr	r0, [pc, #76]	; (801321c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80131d0:	f000 fd45 	bl	8013c5e <USBD_GetEpDesc>
 80131d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	2210      	movs	r2, #16
 80131e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d006      	beq.n	80131f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	2200      	movs	r2, #0
 80131ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80131f0:	711a      	strb	r2, [r3, #4]
 80131f2:	2200      	movs	r2, #0
 80131f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d006      	beq.n	801320a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	2200      	movs	r2, #0
 8013200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013204:	711a      	strb	r2, [r3, #4]
 8013206:	2200      	movs	r2, #0
 8013208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2243      	movs	r2, #67	; 0x43
 801320e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013210:	4b02      	ldr	r3, [pc, #8]	; (801321c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013212:	4618      	mov	r0, r3
 8013214:	3718      	adds	r7, #24
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	24000054 	.word	0x24000054

08013220 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b086      	sub	sp, #24
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013228:	2182      	movs	r1, #130	; 0x82
 801322a:	4818      	ldr	r0, [pc, #96]	; (801328c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801322c:	f000 fd17 	bl	8013c5e <USBD_GetEpDesc>
 8013230:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013232:	2101      	movs	r1, #1
 8013234:	4815      	ldr	r0, [pc, #84]	; (801328c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013236:	f000 fd12 	bl	8013c5e <USBD_GetEpDesc>
 801323a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801323c:	2181      	movs	r1, #129	; 0x81
 801323e:	4813      	ldr	r0, [pc, #76]	; (801328c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013240:	f000 fd0d 	bl	8013c5e <USBD_GetEpDesc>
 8013244:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	2210      	movs	r2, #16
 8013250:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d006      	beq.n	8013266 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	2200      	movs	r2, #0
 801325c:	711a      	strb	r2, [r3, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	f042 0202 	orr.w	r2, r2, #2
 8013264:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d006      	beq.n	801327a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2200      	movs	r2, #0
 8013270:	711a      	strb	r2, [r3, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	f042 0202 	orr.w	r2, r2, #2
 8013278:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2243      	movs	r2, #67	; 0x43
 801327e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013280:	4b02      	ldr	r3, [pc, #8]	; (801328c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013282:	4618      	mov	r0, r3
 8013284:	3718      	adds	r7, #24
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	24000054 	.word	0x24000054

08013290 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013298:	2182      	movs	r1, #130	; 0x82
 801329a:	4818      	ldr	r0, [pc, #96]	; (80132fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801329c:	f000 fcdf 	bl	8013c5e <USBD_GetEpDesc>
 80132a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80132a2:	2101      	movs	r1, #1
 80132a4:	4815      	ldr	r0, [pc, #84]	; (80132fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132a6:	f000 fcda 	bl	8013c5e <USBD_GetEpDesc>
 80132aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80132ac:	2181      	movs	r1, #129	; 0x81
 80132ae:	4813      	ldr	r0, [pc, #76]	; (80132fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80132b0:	f000 fcd5 	bl	8013c5e <USBD_GetEpDesc>
 80132b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	2210      	movs	r2, #16
 80132c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d006      	beq.n	80132d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132d0:	711a      	strb	r2, [r3, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d006      	beq.n	80132ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2200      	movs	r2, #0
 80132e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80132e4:	711a      	strb	r2, [r3, #4]
 80132e6:	2200      	movs	r2, #0
 80132e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2243      	movs	r2, #67	; 0x43
 80132ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132f0:	4b02      	ldr	r3, [pc, #8]	; (80132fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3718      	adds	r7, #24
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	24000054 	.word	0x24000054

08013300 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	220a      	movs	r2, #10
 801330c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801330e:	4b03      	ldr	r3, [pc, #12]	; (801331c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013310:	4618      	mov	r0, r3
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr
 801331c:	24000010 	.word	0x24000010

08013320 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013330:	2303      	movs	r3, #3
 8013332:	e009      	b.n	8013348 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	33b0      	adds	r3, #176	; 0xb0
 801333e:	009b      	lsls	r3, r3, #2
 8013340:	4413      	add	r3, r2
 8013342:	683a      	ldr	r2, [r7, #0]
 8013344:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013346:	2300      	movs	r3, #0
}
 8013348:	4618      	mov	r0, r3
 801334a:	370c      	adds	r7, #12
 801334c:	46bd      	mov	sp, r7
 801334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013352:	4770      	bx	lr

08013354 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013354:	b480      	push	{r7}
 8013356:	b087      	sub	sp, #28
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	32b0      	adds	r2, #176	; 0xb0
 801336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801336e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d101      	bne.n	801337a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013376:	2303      	movs	r3, #3
 8013378:	e008      	b.n	801338c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	371c      	adds	r7, #28
 8013390:	46bd      	mov	sp, r7
 8013392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013396:	4770      	bx	lr

08013398 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	32b0      	adds	r2, #176	; 0xb0
 80133ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d101      	bne.n	80133bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80133b8:	2303      	movs	r3, #3
 80133ba:	e004      	b.n	80133c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	683a      	ldr	r2, [r7, #0]
 80133c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3714      	adds	r7, #20
 80133ca:	46bd      	mov	sp, r7
 80133cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d0:	4770      	bx	lr
	...

080133d4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b084      	sub	sp, #16
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	32b0      	adds	r2, #176	; 0xb0
 80133e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133ea:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80133ec:	2301      	movs	r3, #1
 80133ee:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80133f6:	2303      	movs	r3, #3
 80133f8:	e025      	b.n	8013446 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013400:	2b00      	cmp	r3, #0
 8013402:	d11f      	bne.n	8013444 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	2201      	movs	r2, #1
 8013408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801340c:	4b10      	ldr	r3, [pc, #64]	; (8013450 <USBD_CDC_TransmitPacket+0x7c>)
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	f003 020f 	and.w	r2, r3, #15
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	4613      	mov	r3, r2
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	4413      	add	r3, r2
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	4403      	add	r3, r0
 8013426:	3318      	adds	r3, #24
 8013428:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801342a:	4b09      	ldr	r3, [pc, #36]	; (8013450 <USBD_CDC_TransmitPacket+0x7c>)
 801342c:	7819      	ldrb	r1, [r3, #0]
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f002 f80f 	bl	801545e <USBD_LL_Transmit>

    ret = USBD_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013444:	7bfb      	ldrb	r3, [r7, #15]
}
 8013446:	4618      	mov	r0, r3
 8013448:	3710      	adds	r7, #16
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	24000097 	.word	0x24000097

08013454 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	32b0      	adds	r2, #176	; 0xb0
 8013466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801346a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	32b0      	adds	r2, #176	; 0xb0
 8013476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d101      	bne.n	8013482 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801347e:	2303      	movs	r3, #3
 8013480:	e018      	b.n	80134b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	7c1b      	ldrb	r3, [r3, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d10a      	bne.n	80134a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801348a:	4b0c      	ldr	r3, [pc, #48]	; (80134bc <USBD_CDC_ReceivePacket+0x68>)
 801348c:	7819      	ldrb	r1, [r3, #0]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f002 f801 	bl	80154a0 <USBD_LL_PrepareReceive>
 801349e:	e008      	b.n	80134b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134a0:	4b06      	ldr	r3, [pc, #24]	; (80134bc <USBD_CDC_ReceivePacket+0x68>)
 80134a2:	7819      	ldrb	r1, [r3, #0]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80134aa:	2340      	movs	r3, #64	; 0x40
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f001 fff7 	bl	80154a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80134b2:	2300      	movs	r3, #0
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3710      	adds	r7, #16
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	24000098 	.word	0x24000098

080134c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b086      	sub	sp, #24
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	4613      	mov	r3, r2
 80134cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80134d4:	2303      	movs	r3, #3
 80134d6:	e01f      	b.n	8013518 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2200      	movs	r2, #0
 80134e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2200      	movs	r2, #0
 80134ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	68ba      	ldr	r2, [r7, #8]
 80134fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2201      	movs	r2, #1
 8013502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	79fa      	ldrb	r2, [r7, #7]
 801350a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f001 fe6b 	bl	80151e8 <USBD_LL_Init>
 8013512:	4603      	mov	r3, r0
 8013514:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013516:	7dfb      	ldrb	r3, [r7, #23]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801352a:	2300      	movs	r3, #0
 801352c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013534:	2303      	movs	r3, #3
 8013536:	e025      	b.n	8013584 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	683a      	ldr	r2, [r7, #0]
 801353c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	32ae      	adds	r2, #174	; 0xae
 801354a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013550:	2b00      	cmp	r3, #0
 8013552:	d00f      	beq.n	8013574 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	32ae      	adds	r2, #174	; 0xae
 801355e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013564:	f107 020e 	add.w	r2, r7, #14
 8013568:	4610      	mov	r0, r2
 801356a:	4798      	blx	r3
 801356c:	4602      	mov	r2, r0
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801357a:	1c5a      	adds	r2, r3, #1
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013582:	2300      	movs	r3, #0
}
 8013584:	4618      	mov	r0, r3
 8013586:	3710      	adds	r7, #16
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f001 fe79 	bl	801528c <USBD_LL_Start>
 801359a:	4603      	mov	r3, r0
}
 801359c:	4618      	mov	r0, r3
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80135ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	370c      	adds	r7, #12
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr

080135ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b084      	sub	sp, #16
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	460b      	mov	r3, r1
 80135c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135c6:	2300      	movs	r3, #0
 80135c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d009      	beq.n	80135e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	78fa      	ldrb	r2, [r7, #3]
 80135de:	4611      	mov	r1, r2
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	4798      	blx	r3
 80135e4:	4603      	mov	r3, r0
 80135e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80135e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b084      	sub	sp, #16
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	6078      	str	r0, [r7, #4]
 80135fa:	460b      	mov	r3, r1
 80135fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80135fe:	2300      	movs	r3, #0
 8013600:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	78fa      	ldrb	r2, [r7, #3]
 801360c:	4611      	mov	r1, r2
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	4798      	blx	r3
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d001      	beq.n	801361c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013618:	2303      	movs	r3, #3
 801361a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801361c:	7bfb      	ldrb	r3, [r7, #15]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}

08013626 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013626:	b580      	push	{r7, lr}
 8013628:	b084      	sub	sp, #16
 801362a:	af00      	add	r7, sp, #0
 801362c:	6078      	str	r0, [r7, #4]
 801362e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013636:	6839      	ldr	r1, [r7, #0]
 8013638:	4618      	mov	r0, r3
 801363a:	f001 f90e 	bl	801485a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2201      	movs	r2, #1
 8013642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801364c:	461a      	mov	r2, r3
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801365a:	f003 031f 	and.w	r3, r3, #31
 801365e:	2b02      	cmp	r3, #2
 8013660:	d01a      	beq.n	8013698 <USBD_LL_SetupStage+0x72>
 8013662:	2b02      	cmp	r3, #2
 8013664:	d822      	bhi.n	80136ac <USBD_LL_SetupStage+0x86>
 8013666:	2b00      	cmp	r3, #0
 8013668:	d002      	beq.n	8013670 <USBD_LL_SetupStage+0x4a>
 801366a:	2b01      	cmp	r3, #1
 801366c:	d00a      	beq.n	8013684 <USBD_LL_SetupStage+0x5e>
 801366e:	e01d      	b.n	80136ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013676:	4619      	mov	r1, r3
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f000 fb65 	bl	8013d48 <USBD_StdDevReq>
 801367e:	4603      	mov	r3, r0
 8013680:	73fb      	strb	r3, [r7, #15]
      break;
 8013682:	e020      	b.n	80136c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801368a:	4619      	mov	r1, r3
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 fbcd 	bl	8013e2c <USBD_StdItfReq>
 8013692:	4603      	mov	r3, r0
 8013694:	73fb      	strb	r3, [r7, #15]
      break;
 8013696:	e016      	b.n	80136c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801369e:	4619      	mov	r1, r3
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f000 fc2f 	bl	8013f04 <USBD_StdEPReq>
 80136a6:	4603      	mov	r3, r0
 80136a8:	73fb      	strb	r3, [r7, #15]
      break;
 80136aa:	e00c      	b.n	80136c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80136b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80136b6:	b2db      	uxtb	r3, r3
 80136b8:	4619      	mov	r1, r3
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f001 fe46 	bl	801534c <USBD_LL_StallEP>
 80136c0:	4603      	mov	r3, r0
 80136c2:	73fb      	strb	r3, [r7, #15]
      break;
 80136c4:	bf00      	nop
  }

  return ret;
 80136c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	460b      	mov	r3, r1
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80136de:	2300      	movs	r3, #0
 80136e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80136e2:	7afb      	ldrb	r3, [r7, #11]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d16e      	bne.n	80137c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80136ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80136f6:	2b03      	cmp	r3, #3
 80136f8:	f040 8098 	bne.w	801382c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	689a      	ldr	r2, [r3, #8]
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	68db      	ldr	r3, [r3, #12]
 8013704:	429a      	cmp	r2, r3
 8013706:	d913      	bls.n	8013730 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	689a      	ldr	r2, [r3, #8]
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	1ad2      	subs	r2, r2, r3
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	68da      	ldr	r2, [r3, #12]
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	689b      	ldr	r3, [r3, #8]
 801371e:	4293      	cmp	r3, r2
 8013720:	bf28      	it	cs
 8013722:	4613      	movcs	r3, r2
 8013724:	461a      	mov	r2, r3
 8013726:	6879      	ldr	r1, [r7, #4]
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f001 f98a 	bl	8014a42 <USBD_CtlContinueRx>
 801372e:	e07d      	b.n	801382c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013736:	f003 031f 	and.w	r3, r3, #31
 801373a:	2b02      	cmp	r3, #2
 801373c:	d014      	beq.n	8013768 <USBD_LL_DataOutStage+0x98>
 801373e:	2b02      	cmp	r3, #2
 8013740:	d81d      	bhi.n	801377e <USBD_LL_DataOutStage+0xae>
 8013742:	2b00      	cmp	r3, #0
 8013744:	d002      	beq.n	801374c <USBD_LL_DataOutStage+0x7c>
 8013746:	2b01      	cmp	r3, #1
 8013748:	d003      	beq.n	8013752 <USBD_LL_DataOutStage+0x82>
 801374a:	e018      	b.n	801377e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801374c:	2300      	movs	r3, #0
 801374e:	75bb      	strb	r3, [r7, #22]
            break;
 8013750:	e018      	b.n	8013784 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013758:	b2db      	uxtb	r3, r3
 801375a:	4619      	mov	r1, r3
 801375c:	68f8      	ldr	r0, [r7, #12]
 801375e:	f000 fa64 	bl	8013c2a <USBD_CoreFindIF>
 8013762:	4603      	mov	r3, r0
 8013764:	75bb      	strb	r3, [r7, #22]
            break;
 8013766:	e00d      	b.n	8013784 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801376e:	b2db      	uxtb	r3, r3
 8013770:	4619      	mov	r1, r3
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f000 fa66 	bl	8013c44 <USBD_CoreFindEP>
 8013778:	4603      	mov	r3, r0
 801377a:	75bb      	strb	r3, [r7, #22]
            break;
 801377c:	e002      	b.n	8013784 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801377e:	2300      	movs	r3, #0
 8013780:	75bb      	strb	r3, [r7, #22]
            break;
 8013782:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013784:	7dbb      	ldrb	r3, [r7, #22]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d119      	bne.n	80137be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b03      	cmp	r3, #3
 8013794:	d113      	bne.n	80137be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013796:	7dba      	ldrb	r2, [r7, #22]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	32ae      	adds	r2, #174	; 0xae
 801379c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d00b      	beq.n	80137be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80137a6:	7dba      	ldrb	r2, [r7, #22]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80137ae:	7dba      	ldrb	r2, [r7, #22]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	32ae      	adds	r2, #174	; 0xae
 80137b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80137be:	68f8      	ldr	r0, [r7, #12]
 80137c0:	f001 f950 	bl	8014a64 <USBD_CtlSendStatus>
 80137c4:	e032      	b.n	801382c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80137c6:	7afb      	ldrb	r3, [r7, #11]
 80137c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	4619      	mov	r1, r3
 80137d0:	68f8      	ldr	r0, [r7, #12]
 80137d2:	f000 fa37 	bl	8013c44 <USBD_CoreFindEP>
 80137d6:	4603      	mov	r3, r0
 80137d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137da:	7dbb      	ldrb	r3, [r7, #22]
 80137dc:	2bff      	cmp	r3, #255	; 0xff
 80137de:	d025      	beq.n	801382c <USBD_LL_DataOutStage+0x15c>
 80137e0:	7dbb      	ldrb	r3, [r7, #22]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d122      	bne.n	801382c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	2b03      	cmp	r3, #3
 80137f0:	d117      	bne.n	8013822 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80137f2:	7dba      	ldrb	r2, [r7, #22]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	32ae      	adds	r2, #174	; 0xae
 80137f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137fc:	699b      	ldr	r3, [r3, #24]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00f      	beq.n	8013822 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013802:	7dba      	ldrb	r2, [r7, #22]
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801380a:	7dba      	ldrb	r2, [r7, #22]
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	32ae      	adds	r2, #174	; 0xae
 8013810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013814:	699b      	ldr	r3, [r3, #24]
 8013816:	7afa      	ldrb	r2, [r7, #11]
 8013818:	4611      	mov	r1, r2
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	4798      	blx	r3
 801381e:	4603      	mov	r3, r0
 8013820:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013822:	7dfb      	ldrb	r3, [r7, #23]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d001      	beq.n	801382c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013828:	7dfb      	ldrb	r3, [r7, #23]
 801382a:	e000      	b.n	801382e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801382c:	2300      	movs	r3, #0
}
 801382e:	4618      	mov	r0, r3
 8013830:	3718      	adds	r7, #24
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013836:	b580      	push	{r7, lr}
 8013838:	b086      	sub	sp, #24
 801383a:	af00      	add	r7, sp, #0
 801383c:	60f8      	str	r0, [r7, #12]
 801383e:	460b      	mov	r3, r1
 8013840:	607a      	str	r2, [r7, #4]
 8013842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013844:	7afb      	ldrb	r3, [r7, #11]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d16f      	bne.n	801392a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	3314      	adds	r3, #20
 801384e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013856:	2b02      	cmp	r3, #2
 8013858:	d15a      	bne.n	8013910 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	689a      	ldr	r2, [r3, #8]
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	429a      	cmp	r2, r3
 8013864:	d914      	bls.n	8013890 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	689a      	ldr	r2, [r3, #8]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	1ad2      	subs	r2, r2, r3
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	689b      	ldr	r3, [r3, #8]
 8013878:	461a      	mov	r2, r3
 801387a:	6879      	ldr	r1, [r7, #4]
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f001 f8b2 	bl	80149e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013882:	2300      	movs	r3, #0
 8013884:	2200      	movs	r2, #0
 8013886:	2100      	movs	r1, #0
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f001 fe09 	bl	80154a0 <USBD_LL_PrepareReceive>
 801388e:	e03f      	b.n	8013910 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	68da      	ldr	r2, [r3, #12]
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	429a      	cmp	r2, r3
 801389a:	d11c      	bne.n	80138d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	685a      	ldr	r2, [r3, #4]
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d316      	bcc.n	80138d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	685a      	ldr	r2, [r3, #4]
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d20f      	bcs.n	80138d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80138b6:	2200      	movs	r2, #0
 80138b8:	2100      	movs	r1, #0
 80138ba:	68f8      	ldr	r0, [r7, #12]
 80138bc:	f001 f893 	bl	80149e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2200      	movs	r2, #0
 80138c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80138c8:	2300      	movs	r3, #0
 80138ca:	2200      	movs	r2, #0
 80138cc:	2100      	movs	r1, #0
 80138ce:	68f8      	ldr	r0, [r7, #12]
 80138d0:	f001 fde6 	bl	80154a0 <USBD_LL_PrepareReceive>
 80138d4:	e01c      	b.n	8013910 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d10f      	bne.n	8013902 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138e8:	68db      	ldr	r3, [r3, #12]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d009      	beq.n	8013902 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138fc:	68db      	ldr	r3, [r3, #12]
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013902:	2180      	movs	r1, #128	; 0x80
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f001 fd21 	bl	801534c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	f001 f8bd 	bl	8014a8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d03a      	beq.n	8013990 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f7ff fe42 	bl	80135a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	2200      	movs	r2, #0
 8013924:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013928:	e032      	b.n	8013990 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801392a:	7afb      	ldrb	r3, [r7, #11]
 801392c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013930:	b2db      	uxtb	r3, r3
 8013932:	4619      	mov	r1, r3
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f000 f985 	bl	8013c44 <USBD_CoreFindEP>
 801393a:	4603      	mov	r3, r0
 801393c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801393e:	7dfb      	ldrb	r3, [r7, #23]
 8013940:	2bff      	cmp	r3, #255	; 0xff
 8013942:	d025      	beq.n	8013990 <USBD_LL_DataInStage+0x15a>
 8013944:	7dfb      	ldrb	r3, [r7, #23]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d122      	bne.n	8013990 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013950:	b2db      	uxtb	r3, r3
 8013952:	2b03      	cmp	r3, #3
 8013954:	d11c      	bne.n	8013990 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013956:	7dfa      	ldrb	r2, [r7, #23]
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	32ae      	adds	r2, #174	; 0xae
 801395c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d014      	beq.n	8013990 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013966:	7dfa      	ldrb	r2, [r7, #23]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801396e:	7dfa      	ldrb	r2, [r7, #23]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	32ae      	adds	r2, #174	; 0xae
 8013974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013978:	695b      	ldr	r3, [r3, #20]
 801397a:	7afa      	ldrb	r2, [r7, #11]
 801397c:	4611      	mov	r1, r2
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	4798      	blx	r3
 8013982:	4603      	mov	r3, r0
 8013984:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013986:	7dbb      	ldrb	r3, [r7, #22]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801398c:	7dbb      	ldrb	r3, [r7, #22]
 801398e:	e000      	b.n	8013992 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3718      	adds	r7, #24
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b084      	sub	sp, #16
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80139a2:	2300      	movs	r3, #0
 80139a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2201      	movs	r2, #1
 80139aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2200      	movs	r2, #0
 80139b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2200      	movs	r2, #0
 80139c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d014      	beq.n	8013a00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d00e      	beq.n	8013a00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	6852      	ldr	r2, [r2, #4]
 80139ee:	b2d2      	uxtb	r2, r2
 80139f0:	4611      	mov	r1, r2
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	4798      	blx	r3
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d001      	beq.n	8013a00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80139fc:	2303      	movs	r3, #3
 80139fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a00:	2340      	movs	r3, #64	; 0x40
 8013a02:	2200      	movs	r2, #0
 8013a04:	2100      	movs	r1, #0
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f001 fc5b 	bl	80152c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2240      	movs	r2, #64	; 0x40
 8013a18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a1c:	2340      	movs	r3, #64	; 0x40
 8013a1e:	2200      	movs	r2, #0
 8013a20:	2180      	movs	r1, #128	; 0x80
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f001 fc4d 	bl	80152c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2240      	movs	r2, #64	; 0x40
 8013a32:	621a      	str	r2, [r3, #32]

  return ret;
 8013a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3710      	adds	r7, #16
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013a3e:	b480      	push	{r7}
 8013a40:	b083      	sub	sp, #12
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
 8013a46:	460b      	mov	r3, r1
 8013a48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	78fa      	ldrb	r2, [r7, #3]
 8013a4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013a5e:	b480      	push	{r7}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	2b04      	cmp	r3, #4
 8013a70:	d006      	beq.n	8013a80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a78:	b2da      	uxtb	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2204      	movs	r2, #4
 8013a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013a96:	b480      	push	{r7}
 8013a98:	b083      	sub	sp, #12
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b04      	cmp	r3, #4
 8013aa8:	d106      	bne.n	8013ab8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013ab0:	b2da      	uxtb	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	370c      	adds	r7, #12
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr

08013ac6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b082      	sub	sp, #8
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	2b03      	cmp	r3, #3
 8013ad8:	d110      	bne.n	8013afc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00b      	beq.n	8013afc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013aea:	69db      	ldr	r3, [r3, #28]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d005      	beq.n	8013afc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013af6:	69db      	ldr	r3, [r3, #28]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3708      	adds	r7, #8
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}

08013b06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013b06:	b580      	push	{r7, lr}
 8013b08:	b082      	sub	sp, #8
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	6078      	str	r0, [r7, #4]
 8013b0e:	460b      	mov	r3, r1
 8013b10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	32ae      	adds	r2, #174	; 0xae
 8013b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d101      	bne.n	8013b28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b24:	2303      	movs	r3, #3
 8013b26:	e01c      	b.n	8013b62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b2e:	b2db      	uxtb	r3, r3
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d115      	bne.n	8013b60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	32ae      	adds	r2, #174	; 0xae
 8013b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b42:	6a1b      	ldr	r3, [r3, #32]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00b      	beq.n	8013b60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	32ae      	adds	r2, #174	; 0xae
 8013b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b56:	6a1b      	ldr	r3, [r3, #32]
 8013b58:	78fa      	ldrb	r2, [r7, #3]
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b60:	2300      	movs	r3, #0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b082      	sub	sp, #8
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]
 8013b72:	460b      	mov	r3, r1
 8013b74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	32ae      	adds	r2, #174	; 0xae
 8013b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013b88:	2303      	movs	r3, #3
 8013b8a:	e01c      	b.n	8013bc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d115      	bne.n	8013bc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	32ae      	adds	r2, #174	; 0xae
 8013ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d00b      	beq.n	8013bc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	32ae      	adds	r2, #174	; 0xae
 8013bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bbc:	78fa      	ldrb	r2, [r7, #3]
 8013bbe:	4611      	mov	r1, r2
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3708      	adds	r7, #8
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013bce:	b480      	push	{r7}
 8013bd0:	b083      	sub	sp, #12
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	370c      	adds	r7, #12
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr

08013be4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013bec:	2300      	movs	r3, #0
 8013bee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00e      	beq.n	8013c20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	6852      	ldr	r2, [r2, #4]
 8013c0e:	b2d2      	uxtb	r2, r2
 8013c10:	4611      	mov	r1, r2
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	4798      	blx	r3
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d001      	beq.n	8013c20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013c1c:	2303      	movs	r3, #3
 8013c1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013c2a:	b480      	push	{r7}
 8013c2c:	b083      	sub	sp, #12
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	6078      	str	r0, [r7, #4]
 8013c32:	460b      	mov	r3, r1
 8013c34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013c50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	370c      	adds	r7, #12
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr

08013c5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013c5e:	b580      	push	{r7, lr}
 8013c60:	b086      	sub	sp, #24
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
 8013c66:	460b      	mov	r3, r1
 8013c68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013c72:	2300      	movs	r3, #0
 8013c74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	885b      	ldrh	r3, [r3, #2]
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d920      	bls.n	8013cc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013c8e:	e013      	b.n	8013cb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013c90:	f107 030a 	add.w	r3, r7, #10
 8013c94:	4619      	mov	r1, r3
 8013c96:	6978      	ldr	r0, [r7, #20]
 8013c98:	f000 f81b 	bl	8013cd2 <USBD_GetNextDesc>
 8013c9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	785b      	ldrb	r3, [r3, #1]
 8013ca2:	2b05      	cmp	r3, #5
 8013ca4:	d108      	bne.n	8013cb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	789b      	ldrb	r3, [r3, #2]
 8013cae:	78fa      	ldrb	r2, [r7, #3]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d008      	beq.n	8013cc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	885b      	ldrh	r3, [r3, #2]
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	897b      	ldrh	r3, [r7, #10]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d8e5      	bhi.n	8013c90 <USBD_GetEpDesc+0x32>
 8013cc4:	e000      	b.n	8013cc8 <USBD_GetEpDesc+0x6a>
          break;
 8013cc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013cc8:	693b      	ldr	r3, [r7, #16]
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}

08013cd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013cd2:	b480      	push	{r7}
 8013cd4:	b085      	sub	sp, #20
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	881a      	ldrh	r2, [r3, #0]
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	4413      	add	r3, r2
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b087      	sub	sp, #28
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	3301      	adds	r3, #1
 8013d22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013d2a:	8a3b      	ldrh	r3, [r7, #16]
 8013d2c:	021b      	lsls	r3, r3, #8
 8013d2e:	b21a      	sxth	r2, r3
 8013d30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013d34:	4313      	orrs	r3, r2
 8013d36:	b21b      	sxth	r3, r3
 8013d38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	371c      	adds	r7, #28
 8013d40:	46bd      	mov	sp, r7
 8013d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d46:	4770      	bx	lr

08013d48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d52:	2300      	movs	r3, #0
 8013d54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	781b      	ldrb	r3, [r3, #0]
 8013d5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013d5e:	2b40      	cmp	r3, #64	; 0x40
 8013d60:	d005      	beq.n	8013d6e <USBD_StdDevReq+0x26>
 8013d62:	2b40      	cmp	r3, #64	; 0x40
 8013d64:	d857      	bhi.n	8013e16 <USBD_StdDevReq+0xce>
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d00f      	beq.n	8013d8a <USBD_StdDevReq+0x42>
 8013d6a:	2b20      	cmp	r3, #32
 8013d6c:	d153      	bne.n	8013e16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	32ae      	adds	r2, #174	; 0xae
 8013d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d7c:	689b      	ldr	r3, [r3, #8]
 8013d7e:	6839      	ldr	r1, [r7, #0]
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	4798      	blx	r3
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]
      break;
 8013d88:	e04a      	b.n	8013e20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	785b      	ldrb	r3, [r3, #1]
 8013d8e:	2b09      	cmp	r3, #9
 8013d90:	d83b      	bhi.n	8013e0a <USBD_StdDevReq+0xc2>
 8013d92:	a201      	add	r2, pc, #4	; (adr r2, 8013d98 <USBD_StdDevReq+0x50>)
 8013d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d98:	08013ded 	.word	0x08013ded
 8013d9c:	08013e01 	.word	0x08013e01
 8013da0:	08013e0b 	.word	0x08013e0b
 8013da4:	08013df7 	.word	0x08013df7
 8013da8:	08013e0b 	.word	0x08013e0b
 8013dac:	08013dcb 	.word	0x08013dcb
 8013db0:	08013dc1 	.word	0x08013dc1
 8013db4:	08013e0b 	.word	0x08013e0b
 8013db8:	08013de3 	.word	0x08013de3
 8013dbc:	08013dd5 	.word	0x08013dd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013dc0:	6839      	ldr	r1, [r7, #0]
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f000 fa3c 	bl	8014240 <USBD_GetDescriptor>
          break;
 8013dc8:	e024      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013dca:	6839      	ldr	r1, [r7, #0]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 fba1 	bl	8014514 <USBD_SetAddress>
          break;
 8013dd2:	e01f      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f000 fbe0 	bl	801459c <USBD_SetConfig>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	73fb      	strb	r3, [r7, #15]
          break;
 8013de0:	e018      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013de2:	6839      	ldr	r1, [r7, #0]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 fc83 	bl	80146f0 <USBD_GetConfig>
          break;
 8013dea:	e013      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013dec:	6839      	ldr	r1, [r7, #0]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 fcb4 	bl	801475c <USBD_GetStatus>
          break;
 8013df4:	e00e      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013df6:	6839      	ldr	r1, [r7, #0]
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f000 fce3 	bl	80147c4 <USBD_SetFeature>
          break;
 8013dfe:	e009      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fd07 	bl	8014816 <USBD_ClrFeature>
          break;
 8013e08:	e004      	b.n	8013e14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 fd5e 	bl	80148ce <USBD_CtlError>
          break;
 8013e12:	bf00      	nop
      }
      break;
 8013e14:	e004      	b.n	8013e20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013e16:	6839      	ldr	r1, [r7, #0]
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 fd58 	bl	80148ce <USBD_CtlError>
      break;
 8013e1e:	bf00      	nop
  }

  return ret;
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3710      	adds	r7, #16
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop

08013e2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e36:	2300      	movs	r3, #0
 8013e38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e42:	2b40      	cmp	r3, #64	; 0x40
 8013e44:	d005      	beq.n	8013e52 <USBD_StdItfReq+0x26>
 8013e46:	2b40      	cmp	r3, #64	; 0x40
 8013e48:	d852      	bhi.n	8013ef0 <USBD_StdItfReq+0xc4>
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d001      	beq.n	8013e52 <USBD_StdItfReq+0x26>
 8013e4e:	2b20      	cmp	r3, #32
 8013e50:	d14e      	bne.n	8013ef0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	2b02      	cmp	r3, #2
 8013e5e:	d840      	bhi.n	8013ee2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	889b      	ldrh	r3, [r3, #4]
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d836      	bhi.n	8013ed8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	889b      	ldrh	r3, [r3, #4]
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	4619      	mov	r1, r3
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ff fed9 	bl	8013c2a <USBD_CoreFindIF>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e7c:	7bbb      	ldrb	r3, [r7, #14]
 8013e7e:	2bff      	cmp	r3, #255	; 0xff
 8013e80:	d01d      	beq.n	8013ebe <USBD_StdItfReq+0x92>
 8013e82:	7bbb      	ldrb	r3, [r7, #14]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d11a      	bne.n	8013ebe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013e88:	7bba      	ldrb	r2, [r7, #14]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	32ae      	adds	r2, #174	; 0xae
 8013e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d00f      	beq.n	8013eb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013e98:	7bba      	ldrb	r2, [r7, #14]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013ea0:	7bba      	ldrb	r2, [r7, #14]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	32ae      	adds	r2, #174	; 0xae
 8013ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eaa:	689b      	ldr	r3, [r3, #8]
 8013eac:	6839      	ldr	r1, [r7, #0]
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	4798      	blx	r3
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013eb6:	e004      	b.n	8013ec2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013eb8:	2303      	movs	r3, #3
 8013eba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ebc:	e001      	b.n	8013ec2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013ebe:	2303      	movs	r3, #3
 8013ec0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	88db      	ldrh	r3, [r3, #6]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d110      	bne.n	8013eec <USBD_StdItfReq+0xc0>
 8013eca:	7bfb      	ldrb	r3, [r7, #15]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d10d      	bne.n	8013eec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 fdc7 	bl	8014a64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013ed6:	e009      	b.n	8013eec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fcf7 	bl	80148ce <USBD_CtlError>
          break;
 8013ee0:	e004      	b.n	8013eec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013ee2:	6839      	ldr	r1, [r7, #0]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f000 fcf2 	bl	80148ce <USBD_CtlError>
          break;
 8013eea:	e000      	b.n	8013eee <USBD_StdItfReq+0xc2>
          break;
 8013eec:	bf00      	nop
      }
      break;
 8013eee:	e004      	b.n	8013efa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013ef0:	6839      	ldr	r1, [r7, #0]
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 fceb 	bl	80148ce <USBD_CtlError>
      break;
 8013ef8:	bf00      	nop
  }

  return ret;
 8013efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3710      	adds	r7, #16
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	889b      	ldrh	r3, [r3, #4]
 8013f16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f20:	2b40      	cmp	r3, #64	; 0x40
 8013f22:	d007      	beq.n	8013f34 <USBD_StdEPReq+0x30>
 8013f24:	2b40      	cmp	r3, #64	; 0x40
 8013f26:	f200 817f 	bhi.w	8014228 <USBD_StdEPReq+0x324>
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d02a      	beq.n	8013f84 <USBD_StdEPReq+0x80>
 8013f2e:	2b20      	cmp	r3, #32
 8013f30:	f040 817a 	bne.w	8014228 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f34:	7bbb      	ldrb	r3, [r7, #14]
 8013f36:	4619      	mov	r1, r3
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7ff fe83 	bl	8013c44 <USBD_CoreFindEP>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f42:	7b7b      	ldrb	r3, [r7, #13]
 8013f44:	2bff      	cmp	r3, #255	; 0xff
 8013f46:	f000 8174 	beq.w	8014232 <USBD_StdEPReq+0x32e>
 8013f4a:	7b7b      	ldrb	r3, [r7, #13]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f040 8170 	bne.w	8014232 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013f52:	7b7a      	ldrb	r2, [r7, #13]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013f5a:	7b7a      	ldrb	r2, [r7, #13]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	32ae      	adds	r2, #174	; 0xae
 8013f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	f000 8163 	beq.w	8014232 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013f6c:	7b7a      	ldrb	r2, [r7, #13]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	32ae      	adds	r2, #174	; 0xae
 8013f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	6839      	ldr	r1, [r7, #0]
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	4798      	blx	r3
 8013f7e:	4603      	mov	r3, r0
 8013f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013f82:	e156      	b.n	8014232 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	785b      	ldrb	r3, [r3, #1]
 8013f88:	2b03      	cmp	r3, #3
 8013f8a:	d008      	beq.n	8013f9e <USBD_StdEPReq+0x9a>
 8013f8c:	2b03      	cmp	r3, #3
 8013f8e:	f300 8145 	bgt.w	801421c <USBD_StdEPReq+0x318>
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f000 809b 	beq.w	80140ce <USBD_StdEPReq+0x1ca>
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d03c      	beq.n	8014016 <USBD_StdEPReq+0x112>
 8013f9c:	e13e      	b.n	801421c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	2b02      	cmp	r3, #2
 8013fa8:	d002      	beq.n	8013fb0 <USBD_StdEPReq+0xac>
 8013faa:	2b03      	cmp	r3, #3
 8013fac:	d016      	beq.n	8013fdc <USBD_StdEPReq+0xd8>
 8013fae:	e02c      	b.n	801400a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fb0:	7bbb      	ldrb	r3, [r7, #14]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00d      	beq.n	8013fd2 <USBD_StdEPReq+0xce>
 8013fb6:	7bbb      	ldrb	r3, [r7, #14]
 8013fb8:	2b80      	cmp	r3, #128	; 0x80
 8013fba:	d00a      	beq.n	8013fd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013fbc:	7bbb      	ldrb	r3, [r7, #14]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f001 f9c3 	bl	801534c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fc6:	2180      	movs	r1, #128	; 0x80
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f001 f9bf 	bl	801534c <USBD_LL_StallEP>
 8013fce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013fd0:	e020      	b.n	8014014 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013fd2:	6839      	ldr	r1, [r7, #0]
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f000 fc7a 	bl	80148ce <USBD_CtlError>
              break;
 8013fda:	e01b      	b.n	8014014 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	885b      	ldrh	r3, [r3, #2]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d10e      	bne.n	8014002 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013fe4:	7bbb      	ldrb	r3, [r7, #14]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00b      	beq.n	8014002 <USBD_StdEPReq+0xfe>
 8013fea:	7bbb      	ldrb	r3, [r7, #14]
 8013fec:	2b80      	cmp	r3, #128	; 0x80
 8013fee:	d008      	beq.n	8014002 <USBD_StdEPReq+0xfe>
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	88db      	ldrh	r3, [r3, #6]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d104      	bne.n	8014002 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ff8:	7bbb      	ldrb	r3, [r7, #14]
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f001 f9a5 	bl	801534c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fd2e 	bl	8014a64 <USBD_CtlSendStatus>

              break;
 8014008:	e004      	b.n	8014014 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801400a:	6839      	ldr	r1, [r7, #0]
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 fc5e 	bl	80148ce <USBD_CtlError>
              break;
 8014012:	bf00      	nop
          }
          break;
 8014014:	e107      	b.n	8014226 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801401c:	b2db      	uxtb	r3, r3
 801401e:	2b02      	cmp	r3, #2
 8014020:	d002      	beq.n	8014028 <USBD_StdEPReq+0x124>
 8014022:	2b03      	cmp	r3, #3
 8014024:	d016      	beq.n	8014054 <USBD_StdEPReq+0x150>
 8014026:	e04b      	b.n	80140c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014028:	7bbb      	ldrb	r3, [r7, #14]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d00d      	beq.n	801404a <USBD_StdEPReq+0x146>
 801402e:	7bbb      	ldrb	r3, [r7, #14]
 8014030:	2b80      	cmp	r3, #128	; 0x80
 8014032:	d00a      	beq.n	801404a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014034:	7bbb      	ldrb	r3, [r7, #14]
 8014036:	4619      	mov	r1, r3
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f001 f987 	bl	801534c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801403e:	2180      	movs	r1, #128	; 0x80
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f001 f983 	bl	801534c <USBD_LL_StallEP>
 8014046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014048:	e040      	b.n	80140cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801404a:	6839      	ldr	r1, [r7, #0]
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f000 fc3e 	bl	80148ce <USBD_CtlError>
              break;
 8014052:	e03b      	b.n	80140cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	885b      	ldrh	r3, [r3, #2]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d136      	bne.n	80140ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801405c:	7bbb      	ldrb	r3, [r7, #14]
 801405e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014062:	2b00      	cmp	r3, #0
 8014064:	d004      	beq.n	8014070 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014066:	7bbb      	ldrb	r3, [r7, #14]
 8014068:	4619      	mov	r1, r3
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f001 f98d 	bl	801538a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 fcf7 	bl	8014a64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014076:	7bbb      	ldrb	r3, [r7, #14]
 8014078:	4619      	mov	r1, r3
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f7ff fde2 	bl	8013c44 <USBD_CoreFindEP>
 8014080:	4603      	mov	r3, r0
 8014082:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014084:	7b7b      	ldrb	r3, [r7, #13]
 8014086:	2bff      	cmp	r3, #255	; 0xff
 8014088:	d01f      	beq.n	80140ca <USBD_StdEPReq+0x1c6>
 801408a:	7b7b      	ldrb	r3, [r7, #13]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d11c      	bne.n	80140ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014090:	7b7a      	ldrb	r2, [r7, #13]
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014098:	7b7a      	ldrb	r2, [r7, #13]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	32ae      	adds	r2, #174	; 0xae
 801409e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140a2:	689b      	ldr	r3, [r3, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d010      	beq.n	80140ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80140a8:	7b7a      	ldrb	r2, [r7, #13]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	32ae      	adds	r2, #174	; 0xae
 80140ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	6839      	ldr	r1, [r7, #0]
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	4798      	blx	r3
 80140ba:	4603      	mov	r3, r0
 80140bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80140be:	e004      	b.n	80140ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80140c0:	6839      	ldr	r1, [r7, #0]
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 fc03 	bl	80148ce <USBD_CtlError>
              break;
 80140c8:	e000      	b.n	80140cc <USBD_StdEPReq+0x1c8>
              break;
 80140ca:	bf00      	nop
          }
          break;
 80140cc:	e0ab      	b.n	8014226 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b02      	cmp	r3, #2
 80140d8:	d002      	beq.n	80140e0 <USBD_StdEPReq+0x1dc>
 80140da:	2b03      	cmp	r3, #3
 80140dc:	d032      	beq.n	8014144 <USBD_StdEPReq+0x240>
 80140de:	e097      	b.n	8014210 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140e0:	7bbb      	ldrb	r3, [r7, #14]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d007      	beq.n	80140f6 <USBD_StdEPReq+0x1f2>
 80140e6:	7bbb      	ldrb	r3, [r7, #14]
 80140e8:	2b80      	cmp	r3, #128	; 0x80
 80140ea:	d004      	beq.n	80140f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 fbed 	bl	80148ce <USBD_CtlError>
                break;
 80140f4:	e091      	b.n	801421a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	da0b      	bge.n	8014116 <USBD_StdEPReq+0x212>
 80140fe:	7bbb      	ldrb	r3, [r7, #14]
 8014100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014104:	4613      	mov	r3, r2
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4413      	add	r3, r2
 801410a:	009b      	lsls	r3, r3, #2
 801410c:	3310      	adds	r3, #16
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	4413      	add	r3, r2
 8014112:	3304      	adds	r3, #4
 8014114:	e00b      	b.n	801412e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014116:	7bbb      	ldrb	r3, [r7, #14]
 8014118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801411c:	4613      	mov	r3, r2
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	4413      	add	r3, r2
 8014122:	009b      	lsls	r3, r3, #2
 8014124:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	4413      	add	r3, r2
 801412c:	3304      	adds	r3, #4
 801412e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	2200      	movs	r2, #0
 8014134:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2202      	movs	r2, #2
 801413a:	4619      	mov	r1, r3
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 fc37 	bl	80149b0 <USBD_CtlSendData>
              break;
 8014142:	e06a      	b.n	801421a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014148:	2b00      	cmp	r3, #0
 801414a:	da11      	bge.n	8014170 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801414c:	7bbb      	ldrb	r3, [r7, #14]
 801414e:	f003 020f 	and.w	r2, r3, #15
 8014152:	6879      	ldr	r1, [r7, #4]
 8014154:	4613      	mov	r3, r2
 8014156:	009b      	lsls	r3, r3, #2
 8014158:	4413      	add	r3, r2
 801415a:	009b      	lsls	r3, r3, #2
 801415c:	440b      	add	r3, r1
 801415e:	3324      	adds	r3, #36	; 0x24
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d117      	bne.n	8014196 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014166:	6839      	ldr	r1, [r7, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 fbb0 	bl	80148ce <USBD_CtlError>
                  break;
 801416e:	e054      	b.n	801421a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014170:	7bbb      	ldrb	r3, [r7, #14]
 8014172:	f003 020f 	and.w	r2, r3, #15
 8014176:	6879      	ldr	r1, [r7, #4]
 8014178:	4613      	mov	r3, r2
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	4413      	add	r3, r2
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	440b      	add	r3, r1
 8014182:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d104      	bne.n	8014196 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801418c:	6839      	ldr	r1, [r7, #0]
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f000 fb9d 	bl	80148ce <USBD_CtlError>
                  break;
 8014194:	e041      	b.n	801421a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801419a:	2b00      	cmp	r3, #0
 801419c:	da0b      	bge.n	80141b6 <USBD_StdEPReq+0x2b2>
 801419e:	7bbb      	ldrb	r3, [r7, #14]
 80141a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80141a4:	4613      	mov	r3, r2
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	4413      	add	r3, r2
 80141aa:	009b      	lsls	r3, r3, #2
 80141ac:	3310      	adds	r3, #16
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	4413      	add	r3, r2
 80141b2:	3304      	adds	r3, #4
 80141b4:	e00b      	b.n	80141ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80141b6:	7bbb      	ldrb	r3, [r7, #14]
 80141b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141bc:	4613      	mov	r3, r2
 80141be:	009b      	lsls	r3, r3, #2
 80141c0:	4413      	add	r3, r2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	4413      	add	r3, r2
 80141cc:	3304      	adds	r3, #4
 80141ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d002      	beq.n	80141dc <USBD_StdEPReq+0x2d8>
 80141d6:	7bbb      	ldrb	r3, [r7, #14]
 80141d8:	2b80      	cmp	r3, #128	; 0x80
 80141da:	d103      	bne.n	80141e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	2200      	movs	r2, #0
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e00e      	b.n	8014202 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80141e4:	7bbb      	ldrb	r3, [r7, #14]
 80141e6:	4619      	mov	r1, r3
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f001 f8ed 	bl	80153c8 <USBD_LL_IsStallEP>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d003      	beq.n	80141fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	2201      	movs	r2, #1
 80141f8:	601a      	str	r2, [r3, #0]
 80141fa:	e002      	b.n	8014202 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	2200      	movs	r2, #0
 8014200:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	2202      	movs	r2, #2
 8014206:	4619      	mov	r1, r3
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 fbd1 	bl	80149b0 <USBD_CtlSendData>
              break;
 801420e:	e004      	b.n	801421a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014210:	6839      	ldr	r1, [r7, #0]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 fb5b 	bl	80148ce <USBD_CtlError>
              break;
 8014218:	bf00      	nop
          }
          break;
 801421a:	e004      	b.n	8014226 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fb55 	bl	80148ce <USBD_CtlError>
          break;
 8014224:	bf00      	nop
      }
      break;
 8014226:	e005      	b.n	8014234 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014228:	6839      	ldr	r1, [r7, #0]
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f000 fb4f 	bl	80148ce <USBD_CtlError>
      break;
 8014230:	e000      	b.n	8014234 <USBD_StdEPReq+0x330>
      break;
 8014232:	bf00      	nop
  }

  return ret;
 8014234:	7bfb      	ldrb	r3, [r7, #15]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
	...

08014240 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801424a:	2300      	movs	r3, #0
 801424c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801424e:	2300      	movs	r3, #0
 8014250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014252:	2300      	movs	r3, #0
 8014254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	885b      	ldrh	r3, [r3, #2]
 801425a:	0a1b      	lsrs	r3, r3, #8
 801425c:	b29b      	uxth	r3, r3
 801425e:	3b01      	subs	r3, #1
 8014260:	2b06      	cmp	r3, #6
 8014262:	f200 8128 	bhi.w	80144b6 <USBD_GetDescriptor+0x276>
 8014266:	a201      	add	r2, pc, #4	; (adr r2, 801426c <USBD_GetDescriptor+0x2c>)
 8014268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801426c:	08014289 	.word	0x08014289
 8014270:	080142a1 	.word	0x080142a1
 8014274:	080142e1 	.word	0x080142e1
 8014278:	080144b7 	.word	0x080144b7
 801427c:	080144b7 	.word	0x080144b7
 8014280:	08014457 	.word	0x08014457
 8014284:	08014483 	.word	0x08014483
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	7c12      	ldrb	r2, [r2, #16]
 8014294:	f107 0108 	add.w	r1, r7, #8
 8014298:	4610      	mov	r0, r2
 801429a:	4798      	blx	r3
 801429c:	60f8      	str	r0, [r7, #12]
      break;
 801429e:	e112      	b.n	80144c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	7c1b      	ldrb	r3, [r3, #16]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d10d      	bne.n	80142c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142b0:	f107 0208 	add.w	r2, r7, #8
 80142b4:	4610      	mov	r0, r2
 80142b6:	4798      	blx	r3
 80142b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	3301      	adds	r3, #1
 80142be:	2202      	movs	r2, #2
 80142c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80142c2:	e100      	b.n	80144c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142cc:	f107 0208 	add.w	r2, r7, #8
 80142d0:	4610      	mov	r0, r2
 80142d2:	4798      	blx	r3
 80142d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	3301      	adds	r3, #1
 80142da:	2202      	movs	r2, #2
 80142dc:	701a      	strb	r2, [r3, #0]
      break;
 80142de:	e0f2      	b.n	80144c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	885b      	ldrh	r3, [r3, #2]
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b05      	cmp	r3, #5
 80142e8:	f200 80ac 	bhi.w	8014444 <USBD_GetDescriptor+0x204>
 80142ec:	a201      	add	r2, pc, #4	; (adr r2, 80142f4 <USBD_GetDescriptor+0xb4>)
 80142ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f2:	bf00      	nop
 80142f4:	0801430d 	.word	0x0801430d
 80142f8:	08014341 	.word	0x08014341
 80142fc:	08014375 	.word	0x08014375
 8014300:	080143a9 	.word	0x080143a9
 8014304:	080143dd 	.word	0x080143dd
 8014308:	08014411 	.word	0x08014411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00b      	beq.n	8014330 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	7c12      	ldrb	r2, [r2, #16]
 8014324:	f107 0108 	add.w	r1, r7, #8
 8014328:	4610      	mov	r0, r2
 801432a:	4798      	blx	r3
 801432c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801432e:	e091      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014330:	6839      	ldr	r1, [r7, #0]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 facb 	bl	80148ce <USBD_CtlError>
            err++;
 8014338:	7afb      	ldrb	r3, [r7, #11]
 801433a:	3301      	adds	r3, #1
 801433c:	72fb      	strb	r3, [r7, #11]
          break;
 801433e:	e089      	b.n	8014454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014346:	689b      	ldr	r3, [r3, #8]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00b      	beq.n	8014364 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014352:	689b      	ldr	r3, [r3, #8]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	7c12      	ldrb	r2, [r2, #16]
 8014358:	f107 0108 	add.w	r1, r7, #8
 801435c:	4610      	mov	r0, r2
 801435e:	4798      	blx	r3
 8014360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014362:	e077      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014364:	6839      	ldr	r1, [r7, #0]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 fab1 	bl	80148ce <USBD_CtlError>
            err++;
 801436c:	7afb      	ldrb	r3, [r7, #11]
 801436e:	3301      	adds	r3, #1
 8014370:	72fb      	strb	r3, [r7, #11]
          break;
 8014372:	e06f      	b.n	8014454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00b      	beq.n	8014398 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	7c12      	ldrb	r2, [r2, #16]
 801438c:	f107 0108 	add.w	r1, r7, #8
 8014390:	4610      	mov	r0, r2
 8014392:	4798      	blx	r3
 8014394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014396:	e05d      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014398:	6839      	ldr	r1, [r7, #0]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 fa97 	bl	80148ce <USBD_CtlError>
            err++;
 80143a0:	7afb      	ldrb	r3, [r7, #11]
 80143a2:	3301      	adds	r3, #1
 80143a4:	72fb      	strb	r3, [r7, #11]
          break;
 80143a6:	e055      	b.n	8014454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143ae:	691b      	ldr	r3, [r3, #16]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00b      	beq.n	80143cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143ba:	691b      	ldr	r3, [r3, #16]
 80143bc:	687a      	ldr	r2, [r7, #4]
 80143be:	7c12      	ldrb	r2, [r2, #16]
 80143c0:	f107 0108 	add.w	r1, r7, #8
 80143c4:	4610      	mov	r0, r2
 80143c6:	4798      	blx	r3
 80143c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143ca:	e043      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80143cc:	6839      	ldr	r1, [r7, #0]
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f000 fa7d 	bl	80148ce <USBD_CtlError>
            err++;
 80143d4:	7afb      	ldrb	r3, [r7, #11]
 80143d6:	3301      	adds	r3, #1
 80143d8:	72fb      	strb	r3, [r7, #11]
          break;
 80143da:	e03b      	b.n	8014454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143e2:	695b      	ldr	r3, [r3, #20]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d00b      	beq.n	8014400 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143ee:	695b      	ldr	r3, [r3, #20]
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	7c12      	ldrb	r2, [r2, #16]
 80143f4:	f107 0108 	add.w	r1, r7, #8
 80143f8:	4610      	mov	r0, r2
 80143fa:	4798      	blx	r3
 80143fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143fe:	e029      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 fa63 	bl	80148ce <USBD_CtlError>
            err++;
 8014408:	7afb      	ldrb	r3, [r7, #11]
 801440a:	3301      	adds	r3, #1
 801440c:	72fb      	strb	r3, [r7, #11]
          break;
 801440e:	e021      	b.n	8014454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00b      	beq.n	8014434 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014422:	699b      	ldr	r3, [r3, #24]
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	7c12      	ldrb	r2, [r2, #16]
 8014428:	f107 0108 	add.w	r1, r7, #8
 801442c:	4610      	mov	r0, r2
 801442e:	4798      	blx	r3
 8014430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014432:	e00f      	b.n	8014454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014434:	6839      	ldr	r1, [r7, #0]
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f000 fa49 	bl	80148ce <USBD_CtlError>
            err++;
 801443c:	7afb      	ldrb	r3, [r7, #11]
 801443e:	3301      	adds	r3, #1
 8014440:	72fb      	strb	r3, [r7, #11]
          break;
 8014442:	e007      	b.n	8014454 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014444:	6839      	ldr	r1, [r7, #0]
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 fa41 	bl	80148ce <USBD_CtlError>
          err++;
 801444c:	7afb      	ldrb	r3, [r7, #11]
 801444e:	3301      	adds	r3, #1
 8014450:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014452:	bf00      	nop
      }
      break;
 8014454:	e037      	b.n	80144c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	7c1b      	ldrb	r3, [r3, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d109      	bne.n	8014472 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014466:	f107 0208 	add.w	r2, r7, #8
 801446a:	4610      	mov	r0, r2
 801446c:	4798      	blx	r3
 801446e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014470:	e029      	b.n	80144c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014472:	6839      	ldr	r1, [r7, #0]
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f000 fa2a 	bl	80148ce <USBD_CtlError>
        err++;
 801447a:	7afb      	ldrb	r3, [r7, #11]
 801447c:	3301      	adds	r3, #1
 801447e:	72fb      	strb	r3, [r7, #11]
      break;
 8014480:	e021      	b.n	80144c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	7c1b      	ldrb	r3, [r3, #16]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d10d      	bne.n	80144a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014492:	f107 0208 	add.w	r2, r7, #8
 8014496:	4610      	mov	r0, r2
 8014498:	4798      	blx	r3
 801449a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	3301      	adds	r3, #1
 80144a0:	2207      	movs	r2, #7
 80144a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144a4:	e00f      	b.n	80144c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 fa10 	bl	80148ce <USBD_CtlError>
        err++;
 80144ae:	7afb      	ldrb	r3, [r7, #11]
 80144b0:	3301      	adds	r3, #1
 80144b2:	72fb      	strb	r3, [r7, #11]
      break;
 80144b4:	e007      	b.n	80144c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80144b6:	6839      	ldr	r1, [r7, #0]
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f000 fa08 	bl	80148ce <USBD_CtlError>
      err++;
 80144be:	7afb      	ldrb	r3, [r7, #11]
 80144c0:	3301      	adds	r3, #1
 80144c2:	72fb      	strb	r3, [r7, #11]
      break;
 80144c4:	bf00      	nop
  }

  if (err != 0U)
 80144c6:	7afb      	ldrb	r3, [r7, #11]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d11e      	bne.n	801450a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	88db      	ldrh	r3, [r3, #6]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d016      	beq.n	8014502 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80144d4:	893b      	ldrh	r3, [r7, #8]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00e      	beq.n	80144f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	88da      	ldrh	r2, [r3, #6]
 80144de:	893b      	ldrh	r3, [r7, #8]
 80144e0:	4293      	cmp	r3, r2
 80144e2:	bf28      	it	cs
 80144e4:	4613      	movcs	r3, r2
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80144ea:	893b      	ldrh	r3, [r7, #8]
 80144ec:	461a      	mov	r2, r3
 80144ee:	68f9      	ldr	r1, [r7, #12]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 fa5d 	bl	80149b0 <USBD_CtlSendData>
 80144f6:	e009      	b.n	801450c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80144f8:	6839      	ldr	r1, [r7, #0]
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 f9e7 	bl	80148ce <USBD_CtlError>
 8014500:	e004      	b.n	801450c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 faae 	bl	8014a64 <USBD_CtlSendStatus>
 8014508:	e000      	b.n	801450c <USBD_GetDescriptor+0x2cc>
    return;
 801450a:	bf00      	nop
  }
}
 801450c:	3710      	adds	r7, #16
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop

08014514 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	889b      	ldrh	r3, [r3, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d131      	bne.n	801458a <USBD_SetAddress+0x76>
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	88db      	ldrh	r3, [r3, #6]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d12d      	bne.n	801458a <USBD_SetAddress+0x76>
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	885b      	ldrh	r3, [r3, #2]
 8014532:	2b7f      	cmp	r3, #127	; 0x7f
 8014534:	d829      	bhi.n	801458a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	885b      	ldrh	r3, [r3, #2]
 801453a:	b2db      	uxtb	r3, r3
 801453c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014548:	b2db      	uxtb	r3, r3
 801454a:	2b03      	cmp	r3, #3
 801454c:	d104      	bne.n	8014558 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801454e:	6839      	ldr	r1, [r7, #0]
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 f9bc 	bl	80148ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014556:	e01d      	b.n	8014594 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	7bfa      	ldrb	r2, [r7, #15]
 801455c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014560:	7bfb      	ldrb	r3, [r7, #15]
 8014562:	4619      	mov	r1, r3
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 ff5b 	bl	8015420 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fa7a 	bl	8014a64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014570:	7bfb      	ldrb	r3, [r7, #15]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d004      	beq.n	8014580 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2202      	movs	r2, #2
 801457a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801457e:	e009      	b.n	8014594 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2201      	movs	r2, #1
 8014584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014588:	e004      	b.n	8014594 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801458a:	6839      	ldr	r1, [r7, #0]
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 f99e 	bl	80148ce <USBD_CtlError>
  }
}
 8014592:	bf00      	nop
 8014594:	bf00      	nop
 8014596:	3710      	adds	r7, #16
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145a6:	2300      	movs	r3, #0
 80145a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	885b      	ldrh	r3, [r3, #2]
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	4b4e      	ldr	r3, [pc, #312]	; (80146ec <USBD_SetConfig+0x150>)
 80145b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145b4:	4b4d      	ldr	r3, [pc, #308]	; (80146ec <USBD_SetConfig+0x150>)
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	2b01      	cmp	r3, #1
 80145ba:	d905      	bls.n	80145c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80145bc:	6839      	ldr	r1, [r7, #0]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 f985 	bl	80148ce <USBD_CtlError>
    return USBD_FAIL;
 80145c4:	2303      	movs	r3, #3
 80145c6:	e08c      	b.n	80146e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ce:	b2db      	uxtb	r3, r3
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d002      	beq.n	80145da <USBD_SetConfig+0x3e>
 80145d4:	2b03      	cmp	r3, #3
 80145d6:	d029      	beq.n	801462c <USBD_SetConfig+0x90>
 80145d8:	e075      	b.n	80146c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80145da:	4b44      	ldr	r3, [pc, #272]	; (80146ec <USBD_SetConfig+0x150>)
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d020      	beq.n	8014624 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80145e2:	4b42      	ldr	r3, [pc, #264]	; (80146ec <USBD_SetConfig+0x150>)
 80145e4:	781b      	ldrb	r3, [r3, #0]
 80145e6:	461a      	mov	r2, r3
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80145ec:	4b3f      	ldr	r3, [pc, #252]	; (80146ec <USBD_SetConfig+0x150>)
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	4619      	mov	r1, r3
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f7fe ffe1 	bl	80135ba <USBD_SetClassConfig>
 80145f8:	4603      	mov	r3, r0
 80145fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80145fc:	7bfb      	ldrb	r3, [r7, #15]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d008      	beq.n	8014614 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f000 f962 	bl	80148ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2202      	movs	r2, #2
 801460e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014612:	e065      	b.n	80146e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 fa25 	bl	8014a64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2203      	movs	r2, #3
 801461e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014622:	e05d      	b.n	80146e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 fa1d 	bl	8014a64 <USBD_CtlSendStatus>
      break;
 801462a:	e059      	b.n	80146e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801462c:	4b2f      	ldr	r3, [pc, #188]	; (80146ec <USBD_SetConfig+0x150>)
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d112      	bne.n	801465a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2202      	movs	r2, #2
 8014638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801463c:	4b2b      	ldr	r3, [pc, #172]	; (80146ec <USBD_SetConfig+0x150>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	461a      	mov	r2, r3
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014646:	4b29      	ldr	r3, [pc, #164]	; (80146ec <USBD_SetConfig+0x150>)
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	4619      	mov	r1, r3
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7fe ffd0 	bl	80135f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f000 fa06 	bl	8014a64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014658:	e042      	b.n	80146e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801465a:	4b24      	ldr	r3, [pc, #144]	; (80146ec <USBD_SetConfig+0x150>)
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	429a      	cmp	r2, r3
 8014666:	d02a      	beq.n	80146be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	685b      	ldr	r3, [r3, #4]
 801466c:	b2db      	uxtb	r3, r3
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f7fe ffbe 	bl	80135f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014676:	4b1d      	ldr	r3, [pc, #116]	; (80146ec <USBD_SetConfig+0x150>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	461a      	mov	r2, r3
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014680:	4b1a      	ldr	r3, [pc, #104]	; (80146ec <USBD_SetConfig+0x150>)
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	4619      	mov	r1, r3
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f7fe ff97 	bl	80135ba <USBD_SetClassConfig>
 801468c:	4603      	mov	r3, r0
 801468e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014690:	7bfb      	ldrb	r3, [r7, #15]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00f      	beq.n	80146b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014696:	6839      	ldr	r1, [r7, #0]
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f000 f918 	bl	80148ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	4619      	mov	r1, r3
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f7fe ffa3 	bl	80135f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2202      	movs	r2, #2
 80146b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80146b4:	e014      	b.n	80146e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 f9d4 	bl	8014a64 <USBD_CtlSendStatus>
      break;
 80146bc:	e010      	b.n	80146e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f000 f9d0 	bl	8014a64 <USBD_CtlSendStatus>
      break;
 80146c4:	e00c      	b.n	80146e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80146c6:	6839      	ldr	r1, [r7, #0]
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 f900 	bl	80148ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146ce:	4b07      	ldr	r3, [pc, #28]	; (80146ec <USBD_SetConfig+0x150>)
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	4619      	mov	r1, r3
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7fe ff8c 	bl	80135f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80146da:	2303      	movs	r3, #3
 80146dc:	73fb      	strb	r3, [r7, #15]
      break;
 80146de:	bf00      	nop
  }

  return ret;
 80146e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	24000cdc 	.word	0x24000cdc

080146f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	88db      	ldrh	r3, [r3, #6]
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d004      	beq.n	801470c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014702:	6839      	ldr	r1, [r7, #0]
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f000 f8e2 	bl	80148ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801470a:	e023      	b.n	8014754 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014712:	b2db      	uxtb	r3, r3
 8014714:	2b02      	cmp	r3, #2
 8014716:	dc02      	bgt.n	801471e <USBD_GetConfig+0x2e>
 8014718:	2b00      	cmp	r3, #0
 801471a:	dc03      	bgt.n	8014724 <USBD_GetConfig+0x34>
 801471c:	e015      	b.n	801474a <USBD_GetConfig+0x5a>
 801471e:	2b03      	cmp	r3, #3
 8014720:	d00b      	beq.n	801473a <USBD_GetConfig+0x4a>
 8014722:	e012      	b.n	801474a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	3308      	adds	r3, #8
 801472e:	2201      	movs	r2, #1
 8014730:	4619      	mov	r1, r3
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 f93c 	bl	80149b0 <USBD_CtlSendData>
        break;
 8014738:	e00c      	b.n	8014754 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	3304      	adds	r3, #4
 801473e:	2201      	movs	r2, #1
 8014740:	4619      	mov	r1, r3
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 f934 	bl	80149b0 <USBD_CtlSendData>
        break;
 8014748:	e004      	b.n	8014754 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f000 f8be 	bl	80148ce <USBD_CtlError>
        break;
 8014752:	bf00      	nop
}
 8014754:	bf00      	nop
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801476c:	b2db      	uxtb	r3, r3
 801476e:	3b01      	subs	r3, #1
 8014770:	2b02      	cmp	r3, #2
 8014772:	d81e      	bhi.n	80147b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	88db      	ldrh	r3, [r3, #6]
 8014778:	2b02      	cmp	r3, #2
 801477a:	d004      	beq.n	8014786 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f000 f8a5 	bl	80148ce <USBD_CtlError>
        break;
 8014784:	e01a      	b.n	80147bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2201      	movs	r2, #1
 801478a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014792:	2b00      	cmp	r3, #0
 8014794:	d005      	beq.n	80147a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	f043 0202 	orr.w	r2, r3, #2
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	330c      	adds	r3, #12
 80147a6:	2202      	movs	r2, #2
 80147a8:	4619      	mov	r1, r3
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f000 f900 	bl	80149b0 <USBD_CtlSendData>
      break;
 80147b0:	e004      	b.n	80147bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80147b2:	6839      	ldr	r1, [r7, #0]
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 f88a 	bl	80148ce <USBD_CtlError>
      break;
 80147ba:	bf00      	nop
  }
}
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	885b      	ldrh	r3, [r3, #2]
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d107      	bne.n	80147e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2201      	movs	r2, #1
 80147da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f000 f940 	bl	8014a64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80147e4:	e013      	b.n	801480e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	885b      	ldrh	r3, [r3, #2]
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	d10b      	bne.n	8014806 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	889b      	ldrh	r3, [r3, #4]
 80147f2:	0a1b      	lsrs	r3, r3, #8
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 f930 	bl	8014a64 <USBD_CtlSendStatus>
}
 8014804:	e003      	b.n	801480e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014806:	6839      	ldr	r1, [r7, #0]
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f860 	bl	80148ce <USBD_CtlError>
}
 801480e:	bf00      	nop
 8014810:	3708      	adds	r7, #8
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}

08014816 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014816:	b580      	push	{r7, lr}
 8014818:	b082      	sub	sp, #8
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
 801481e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014826:	b2db      	uxtb	r3, r3
 8014828:	3b01      	subs	r3, #1
 801482a:	2b02      	cmp	r3, #2
 801482c:	d80b      	bhi.n	8014846 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	885b      	ldrh	r3, [r3, #2]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d10c      	bne.n	8014850 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2200      	movs	r2, #0
 801483a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f910 	bl	8014a64 <USBD_CtlSendStatus>
      }
      break;
 8014844:	e004      	b.n	8014850 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014846:	6839      	ldr	r1, [r7, #0]
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f000 f840 	bl	80148ce <USBD_CtlError>
      break;
 801484e:	e000      	b.n	8014852 <USBD_ClrFeature+0x3c>
      break;
 8014850:	bf00      	nop
  }
}
 8014852:	bf00      	nop
 8014854:	3708      	adds	r7, #8
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b084      	sub	sp, #16
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	781a      	ldrb	r2, [r3, #0]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	3301      	adds	r3, #1
 8014874:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	781a      	ldrb	r2, [r3, #0]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	3301      	adds	r3, #1
 8014882:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff fa41 	bl	8013d0c <SWAPBYTE>
 801488a:	4603      	mov	r3, r0
 801488c:	461a      	mov	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	3301      	adds	r3, #1
 8014896:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3301      	adds	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f7ff fa34 	bl	8013d0c <SWAPBYTE>
 80148a4:	4603      	mov	r3, r0
 80148a6:	461a      	mov	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	3301      	adds	r3, #1
 80148b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3301      	adds	r3, #1
 80148b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f7ff fa27 	bl	8013d0c <SWAPBYTE>
 80148be:	4603      	mov	r3, r0
 80148c0:	461a      	mov	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	80da      	strh	r2, [r3, #6]
}
 80148c6:	bf00      	nop
 80148c8:	3710      	adds	r7, #16
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}

080148ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148ce:	b580      	push	{r7, lr}
 80148d0:	b082      	sub	sp, #8
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	6078      	str	r0, [r7, #4]
 80148d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148d8:	2180      	movs	r1, #128	; 0x80
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fd36 	bl	801534c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148e0:	2100      	movs	r1, #0
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 fd32 	bl	801534c <USBD_LL_StallEP>
}
 80148e8:	bf00      	nop
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b086      	sub	sp, #24
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80148fc:	2300      	movs	r3, #0
 80148fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d036      	beq.n	8014974 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801490a:	6938      	ldr	r0, [r7, #16]
 801490c:	f000 f836 	bl	801497c <USBD_GetLen>
 8014910:	4603      	mov	r3, r0
 8014912:	3301      	adds	r3, #1
 8014914:	b29b      	uxth	r3, r3
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	b29a      	uxth	r2, r3
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801491e:	7dfb      	ldrb	r3, [r7, #23]
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	4413      	add	r3, r2
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	7812      	ldrb	r2, [r2, #0]
 8014928:	701a      	strb	r2, [r3, #0]
  idx++;
 801492a:	7dfb      	ldrb	r3, [r7, #23]
 801492c:	3301      	adds	r3, #1
 801492e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014930:	7dfb      	ldrb	r3, [r7, #23]
 8014932:	68ba      	ldr	r2, [r7, #8]
 8014934:	4413      	add	r3, r2
 8014936:	2203      	movs	r2, #3
 8014938:	701a      	strb	r2, [r3, #0]
  idx++;
 801493a:	7dfb      	ldrb	r3, [r7, #23]
 801493c:	3301      	adds	r3, #1
 801493e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014940:	e013      	b.n	801496a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014942:	7dfb      	ldrb	r3, [r7, #23]
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	4413      	add	r3, r2
 8014948:	693a      	ldr	r2, [r7, #16]
 801494a:	7812      	ldrb	r2, [r2, #0]
 801494c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	3301      	adds	r3, #1
 8014952:	613b      	str	r3, [r7, #16]
    idx++;
 8014954:	7dfb      	ldrb	r3, [r7, #23]
 8014956:	3301      	adds	r3, #1
 8014958:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	4413      	add	r3, r2
 8014960:	2200      	movs	r2, #0
 8014962:	701a      	strb	r2, [r3, #0]
    idx++;
 8014964:	7dfb      	ldrb	r3, [r7, #23]
 8014966:	3301      	adds	r3, #1
 8014968:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1e7      	bne.n	8014942 <USBD_GetString+0x52>
 8014972:	e000      	b.n	8014976 <USBD_GetString+0x86>
    return;
 8014974:	bf00      	nop
  }
}
 8014976:	3718      	adds	r7, #24
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801497c:	b480      	push	{r7}
 801497e:	b085      	sub	sp, #20
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014984:	2300      	movs	r3, #0
 8014986:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801498c:	e005      	b.n	801499a <USBD_GetLen+0x1e>
  {
    len++;
 801498e:	7bfb      	ldrb	r3, [r7, #15]
 8014990:	3301      	adds	r3, #1
 8014992:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	3301      	adds	r3, #1
 8014998:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d1f5      	bne.n	801498e <USBD_GetLen+0x12>
  }

  return len;
 80149a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3714      	adds	r7, #20
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2202      	movs	r2, #2
 80149c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	68ba      	ldr	r2, [r7, #8]
 80149d4:	2100      	movs	r1, #0
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f000 fd41 	bl	801545e <USBD_LL_Transmit>

  return USBD_OK;
 80149dc:	2300      	movs	r3, #0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b084      	sub	sp, #16
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	60f8      	str	r0, [r7, #12]
 80149ee:	60b9      	str	r1, [r7, #8]
 80149f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	68ba      	ldr	r2, [r7, #8]
 80149f6:	2100      	movs	r1, #0
 80149f8:	68f8      	ldr	r0, [r7, #12]
 80149fa:	f000 fd30 	bl	801545e <USBD_LL_Transmit>

  return USBD_OK;
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2203      	movs	r2, #3
 8014a18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	68ba      	ldr	r2, [r7, #8]
 8014a30:	2100      	movs	r1, #0
 8014a32:	68f8      	ldr	r0, [r7, #12]
 8014a34:	f000 fd34 	bl	80154a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b084      	sub	sp, #16
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	60f8      	str	r0, [r7, #12]
 8014a4a:	60b9      	str	r1, [r7, #8]
 8014a4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	68ba      	ldr	r2, [r7, #8]
 8014a52:	2100      	movs	r1, #0
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f000 fd23 	bl	80154a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a5a:	2300      	movs	r3, #0
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2204      	movs	r2, #4
 8014a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014a74:	2300      	movs	r3, #0
 8014a76:	2200      	movs	r2, #0
 8014a78:	2100      	movs	r1, #0
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 fcef 	bl	801545e <USBD_LL_Transmit>

  return USBD_OK;
 8014a80:	2300      	movs	r3, #0
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3708      	adds	r7, #8
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}

08014a8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014a8a:	b580      	push	{r7, lr}
 8014a8c:	b082      	sub	sp, #8
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2205      	movs	r2, #5
 8014a96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 fcfd 	bl	80154a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014aa6:	2300      	movs	r3, #0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3708      	adds	r7, #8
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b087      	sub	sp, #28
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	4613      	mov	r3, r2
 8014abc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014abe:	2301      	movs	r3, #1
 8014ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014ac6:	4b1f      	ldr	r3, [pc, #124]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014ac8:	7a5b      	ldrb	r3, [r3, #9]
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d131      	bne.n	8014b34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ad0:	4b1c      	ldr	r3, [pc, #112]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014ad2:	7a5b      	ldrb	r3, [r3, #9]
 8014ad4:	b2db      	uxtb	r3, r3
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	4b1a      	ldr	r3, [pc, #104]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014ada:	2100      	movs	r1, #0
 8014adc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014ade:	4b19      	ldr	r3, [pc, #100]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014ae0:	7a5b      	ldrb	r3, [r3, #9]
 8014ae2:	b2db      	uxtb	r3, r3
 8014ae4:	4a17      	ldr	r2, [pc, #92]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014ae6:	009b      	lsls	r3, r3, #2
 8014ae8:	4413      	add	r3, r2
 8014aea:	68fa      	ldr	r2, [r7, #12]
 8014aec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014aee:	4b15      	ldr	r3, [pc, #84]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014af0:	7a5b      	ldrb	r3, [r3, #9]
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	461a      	mov	r2, r3
 8014af6:	4b13      	ldr	r3, [pc, #76]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014af8:	4413      	add	r3, r2
 8014afa:	79fa      	ldrb	r2, [r7, #7]
 8014afc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014afe:	4b11      	ldr	r3, [pc, #68]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014b00:	7a5b      	ldrb	r3, [r3, #9]
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	b2d1      	uxtb	r1, r2
 8014b08:	4a0e      	ldr	r2, [pc, #56]	; (8014b44 <FATFS_LinkDriverEx+0x94>)
 8014b0a:	7251      	strb	r1, [r2, #9]
 8014b0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014b0e:	7dbb      	ldrb	r3, [r7, #22]
 8014b10:	3330      	adds	r3, #48	; 0x30
 8014b12:	b2da      	uxtb	r2, r3
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	223a      	movs	r2, #58	; 0x3a
 8014b1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	3302      	adds	r3, #2
 8014b24:	222f      	movs	r2, #47	; 0x2f
 8014b26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	3303      	adds	r3, #3
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b30:	2300      	movs	r3, #0
 8014b32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	371c      	adds	r7, #28
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr
 8014b42:	bf00      	nop
 8014b44:	24000ce0 	.word	0x24000ce0

08014b48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014b52:	2200      	movs	r2, #0
 8014b54:	6839      	ldr	r1, [r7, #0]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7ff ffaa 	bl	8014ab0 <FATFS_LinkDriverEx>
 8014b5c:	4603      	mov	r3, r0
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3708      	adds	r7, #8
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}
	...

08014b68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014b6c:	2201      	movs	r2, #1
 8014b6e:	4913      	ldr	r1, [pc, #76]	; (8014bbc <MX_USB_DEVICE_Init+0x54>)
 8014b70:	4813      	ldr	r0, [pc, #76]	; (8014bc0 <MX_USB_DEVICE_Init+0x58>)
 8014b72:	f7fe fca5 	bl	80134c0 <USBD_Init>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d001      	beq.n	8014b80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014b7c:	f7ed f968 	bl	8001e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8014b80:	4910      	ldr	r1, [pc, #64]	; (8014bc4 <MX_USB_DEVICE_Init+0x5c>)
 8014b82:	480f      	ldr	r0, [pc, #60]	; (8014bc0 <MX_USB_DEVICE_Init+0x58>)
 8014b84:	f7fe fccc 	bl	8013520 <USBD_RegisterClass>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d001      	beq.n	8014b92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014b8e:	f7ed f95f 	bl	8001e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014b92:	490d      	ldr	r1, [pc, #52]	; (8014bc8 <MX_USB_DEVICE_Init+0x60>)
 8014b94:	480a      	ldr	r0, [pc, #40]	; (8014bc0 <MX_USB_DEVICE_Init+0x58>)
 8014b96:	f7fe fbc3 	bl	8013320 <USBD_CDC_RegisterInterface>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d001      	beq.n	8014ba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014ba0:	f7ed f956 	bl	8001e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014ba4:	4806      	ldr	r0, [pc, #24]	; (8014bc0 <MX_USB_DEVICE_Init+0x58>)
 8014ba6:	f7fe fcf1 	bl	801358c <USBD_Start>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d001      	beq.n	8014bb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014bb0:	f7ed f94e 	bl	8001e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014bb4:	f7f3 fd66 	bl	8008684 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014bb8:	bf00      	nop
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	240000b0 	.word	0x240000b0
 8014bc0:	24000cec 	.word	0x24000cec
 8014bc4:	2400001c 	.word	0x2400001c
 8014bc8:	2400009c 	.word	0x2400009c

08014bcc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	4905      	ldr	r1, [pc, #20]	; (8014be8 <CDC_Init_HS+0x1c>)
 8014bd4:	4805      	ldr	r0, [pc, #20]	; (8014bec <CDC_Init_HS+0x20>)
 8014bd6:	f7fe fbbd 	bl	8013354 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014bda:	4905      	ldr	r1, [pc, #20]	; (8014bf0 <CDC_Init_HS+0x24>)
 8014bdc:	4803      	ldr	r0, [pc, #12]	; (8014bec <CDC_Init_HS+0x20>)
 8014bde:	f7fe fbdb 	bl	8013398 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014be2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	240017c8 	.word	0x240017c8
 8014bec:	24000cec 	.word	0x24000cec
 8014bf0:	24000fc8 	.word	0x24000fc8

08014bf4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014bf8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	6039      	str	r1, [r7, #0]
 8014c0e:	71fb      	strb	r3, [r7, #7]
 8014c10:	4613      	mov	r3, r2
 8014c12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8014c14:	79fb      	ldrb	r3, [r7, #7]
 8014c16:	2b23      	cmp	r3, #35	; 0x23
 8014c18:	d84a      	bhi.n	8014cb0 <CDC_Control_HS+0xac>
 8014c1a:	a201      	add	r2, pc, #4	; (adr r2, 8014c20 <CDC_Control_HS+0x1c>)
 8014c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c20:	08014cb1 	.word	0x08014cb1
 8014c24:	08014cb1 	.word	0x08014cb1
 8014c28:	08014cb1 	.word	0x08014cb1
 8014c2c:	08014cb1 	.word	0x08014cb1
 8014c30:	08014cb1 	.word	0x08014cb1
 8014c34:	08014cb1 	.word	0x08014cb1
 8014c38:	08014cb1 	.word	0x08014cb1
 8014c3c:	08014cb1 	.word	0x08014cb1
 8014c40:	08014cb1 	.word	0x08014cb1
 8014c44:	08014cb1 	.word	0x08014cb1
 8014c48:	08014cb1 	.word	0x08014cb1
 8014c4c:	08014cb1 	.word	0x08014cb1
 8014c50:	08014cb1 	.word	0x08014cb1
 8014c54:	08014cb1 	.word	0x08014cb1
 8014c58:	08014cb1 	.word	0x08014cb1
 8014c5c:	08014cb1 	.word	0x08014cb1
 8014c60:	08014cb1 	.word	0x08014cb1
 8014c64:	08014cb1 	.word	0x08014cb1
 8014c68:	08014cb1 	.word	0x08014cb1
 8014c6c:	08014cb1 	.word	0x08014cb1
 8014c70:	08014cb1 	.word	0x08014cb1
 8014c74:	08014cb1 	.word	0x08014cb1
 8014c78:	08014cb1 	.word	0x08014cb1
 8014c7c:	08014cb1 	.word	0x08014cb1
 8014c80:	08014cb1 	.word	0x08014cb1
 8014c84:	08014cb1 	.word	0x08014cb1
 8014c88:	08014cb1 	.word	0x08014cb1
 8014c8c:	08014cb1 	.word	0x08014cb1
 8014c90:	08014cb1 	.word	0x08014cb1
 8014c94:	08014cb1 	.word	0x08014cb1
 8014c98:	08014cb1 	.word	0x08014cb1
 8014c9c:	08014cb1 	.word	0x08014cb1
 8014ca0:	08014cb1 	.word	0x08014cb1
 8014ca4:	08014cb1 	.word	0x08014cb1
 8014ca8:	08014cb1 	.word	0x08014cb1
 8014cac:	08014cb1 	.word	0x08014cb1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014cb0:	bf00      	nop
  }

  return (USBD_OK);
 8014cb2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	370c      	adds	r7, #12
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014cca:	6879      	ldr	r1, [r7, #4]
 8014ccc:	4805      	ldr	r0, [pc, #20]	; (8014ce4 <CDC_Receive_HS+0x24>)
 8014cce:	f7fe fb63 	bl	8013398 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8014cd2:	4804      	ldr	r0, [pc, #16]	; (8014ce4 <CDC_Receive_HS+0x24>)
 8014cd4:	f7fe fbbe 	bl	8013454 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014cd8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3708      	adds	r7, #8
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	24000cec 	.word	0x24000cec

08014ce8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b084      	sub	sp, #16
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014cf8:	4b0d      	ldr	r3, [pc, #52]	; (8014d30 <CDC_Transmit_HS+0x48>)
 8014cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014cfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d001      	beq.n	8014d0e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	e00b      	b.n	8014d26 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8014d0e:	887b      	ldrh	r3, [r7, #2]
 8014d10:	461a      	mov	r2, r3
 8014d12:	6879      	ldr	r1, [r7, #4]
 8014d14:	4806      	ldr	r0, [pc, #24]	; (8014d30 <CDC_Transmit_HS+0x48>)
 8014d16:	f7fe fb1d 	bl	8013354 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8014d1a:	4805      	ldr	r0, [pc, #20]	; (8014d30 <CDC_Transmit_HS+0x48>)
 8014d1c:	f7fe fb5a 	bl	80133d4 <USBD_CDC_TransmitPacket>
 8014d20:	4603      	mov	r3, r0
 8014d22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8014d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	3710      	adds	r7, #16
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	24000cec 	.word	0x24000cec

08014d34 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b087      	sub	sp, #28
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	4613      	mov	r3, r2
 8014d40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8014d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	371c      	adds	r7, #28
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d54:	4770      	bx	lr
	...

08014d58 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	4603      	mov	r3, r0
 8014d60:	6039      	str	r1, [r7, #0]
 8014d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	2212      	movs	r2, #18
 8014d68:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8014d6a:	4b03      	ldr	r3, [pc, #12]	; (8014d78 <USBD_HS_DeviceDescriptor+0x20>)
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	370c      	adds	r7, #12
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr
 8014d78:	240000cc 	.word	0x240000cc

08014d7c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	4603      	mov	r3, r0
 8014d84:	6039      	str	r1, [r7, #0]
 8014d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	2204      	movs	r2, #4
 8014d8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014d8e:	4b03      	ldr	r3, [pc, #12]	; (8014d9c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr
 8014d9c:	240000e0 	.word	0x240000e0

08014da0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	4603      	mov	r3, r0
 8014da8:	6039      	str	r1, [r7, #0]
 8014daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014dac:	79fb      	ldrb	r3, [r7, #7]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d105      	bne.n	8014dbe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	4907      	ldr	r1, [pc, #28]	; (8014dd4 <USBD_HS_ProductStrDescriptor+0x34>)
 8014db6:	4808      	ldr	r0, [pc, #32]	; (8014dd8 <USBD_HS_ProductStrDescriptor+0x38>)
 8014db8:	f7ff fd9a 	bl	80148f0 <USBD_GetString>
 8014dbc:	e004      	b.n	8014dc8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8014dbe:	683a      	ldr	r2, [r7, #0]
 8014dc0:	4904      	ldr	r1, [pc, #16]	; (8014dd4 <USBD_HS_ProductStrDescriptor+0x34>)
 8014dc2:	4805      	ldr	r0, [pc, #20]	; (8014dd8 <USBD_HS_ProductStrDescriptor+0x38>)
 8014dc4:	f7ff fd94 	bl	80148f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014dc8:	4b02      	ldr	r3, [pc, #8]	; (8014dd4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3708      	adds	r7, #8
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	24001fc8 	.word	0x24001fc8
 8014dd8:	0801a34c 	.word	0x0801a34c

08014ddc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	4603      	mov	r3, r0
 8014de4:	6039      	str	r1, [r7, #0]
 8014de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014de8:	683a      	ldr	r2, [r7, #0]
 8014dea:	4904      	ldr	r1, [pc, #16]	; (8014dfc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8014dec:	4804      	ldr	r0, [pc, #16]	; (8014e00 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8014dee:	f7ff fd7f 	bl	80148f0 <USBD_GetString>
  return USBD_StrDesc;
 8014df2:	4b02      	ldr	r3, [pc, #8]	; (8014dfc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3708      	adds	r7, #8
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	24001fc8 	.word	0x24001fc8
 8014e00:	0801a368 	.word	0x0801a368

08014e04 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	6039      	str	r1, [r7, #0]
 8014e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	221a      	movs	r2, #26
 8014e14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014e16:	f000 f843 	bl	8014ea0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014e1a:	4b02      	ldr	r3, [pc, #8]	; (8014e24 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	240000e4 	.word	0x240000e4

08014e28 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	4603      	mov	r3, r0
 8014e30:	6039      	str	r1, [r7, #0]
 8014e32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014e34:	79fb      	ldrb	r3, [r7, #7]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d105      	bne.n	8014e46 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014e3a:	683a      	ldr	r2, [r7, #0]
 8014e3c:	4907      	ldr	r1, [pc, #28]	; (8014e5c <USBD_HS_ConfigStrDescriptor+0x34>)
 8014e3e:	4808      	ldr	r0, [pc, #32]	; (8014e60 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014e40:	f7ff fd56 	bl	80148f0 <USBD_GetString>
 8014e44:	e004      	b.n	8014e50 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8014e46:	683a      	ldr	r2, [r7, #0]
 8014e48:	4904      	ldr	r1, [pc, #16]	; (8014e5c <USBD_HS_ConfigStrDescriptor+0x34>)
 8014e4a:	4805      	ldr	r0, [pc, #20]	; (8014e60 <USBD_HS_ConfigStrDescriptor+0x38>)
 8014e4c:	f7ff fd50 	bl	80148f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e50:	4b02      	ldr	r3, [pc, #8]	; (8014e5c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3708      	adds	r7, #8
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	24001fc8 	.word	0x24001fc8
 8014e60:	0801a36c 	.word	0x0801a36c

08014e64 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	6039      	str	r1, [r7, #0]
 8014e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e70:	79fb      	ldrb	r3, [r7, #7]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d105      	bne.n	8014e82 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8014e76:	683a      	ldr	r2, [r7, #0]
 8014e78:	4907      	ldr	r1, [pc, #28]	; (8014e98 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014e7a:	4808      	ldr	r0, [pc, #32]	; (8014e9c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014e7c:	f7ff fd38 	bl	80148f0 <USBD_GetString>
 8014e80:	e004      	b.n	8014e8c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	4904      	ldr	r1, [pc, #16]	; (8014e98 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8014e86:	4805      	ldr	r0, [pc, #20]	; (8014e9c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8014e88:	f7ff fd32 	bl	80148f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e8c:	4b02      	ldr	r3, [pc, #8]	; (8014e98 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	24001fc8 	.word	0x24001fc8
 8014e9c:	0801a378 	.word	0x0801a378

08014ea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014ea6:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <Get_SerialNum+0x44>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014eac:	4b0e      	ldr	r3, [pc, #56]	; (8014ee8 <Get_SerialNum+0x48>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014eb2:	4b0e      	ldr	r3, [pc, #56]	; (8014eec <Get_SerialNum+0x4c>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014eb8:	68fa      	ldr	r2, [r7, #12]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d009      	beq.n	8014eda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014ec6:	2208      	movs	r2, #8
 8014ec8:	4909      	ldr	r1, [pc, #36]	; (8014ef0 <Get_SerialNum+0x50>)
 8014eca:	68f8      	ldr	r0, [r7, #12]
 8014ecc:	f000 f814 	bl	8014ef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014ed0:	2204      	movs	r2, #4
 8014ed2:	4908      	ldr	r1, [pc, #32]	; (8014ef4 <Get_SerialNum+0x54>)
 8014ed4:	68b8      	ldr	r0, [r7, #8]
 8014ed6:	f000 f80f 	bl	8014ef8 <IntToUnicode>
  }
}
 8014eda:	bf00      	nop
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	1ff1e800 	.word	0x1ff1e800
 8014ee8:	1ff1e804 	.word	0x1ff1e804
 8014eec:	1ff1e808 	.word	0x1ff1e808
 8014ef0:	240000e6 	.word	0x240000e6
 8014ef4:	240000f6 	.word	0x240000f6

08014ef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b087      	sub	sp, #28
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
 8014f02:	4613      	mov	r3, r2
 8014f04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014f06:	2300      	movs	r3, #0
 8014f08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	75fb      	strb	r3, [r7, #23]
 8014f0e:	e027      	b.n	8014f60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	0f1b      	lsrs	r3, r3, #28
 8014f14:	2b09      	cmp	r3, #9
 8014f16:	d80b      	bhi.n	8014f30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	0f1b      	lsrs	r3, r3, #28
 8014f1c:	b2da      	uxtb	r2, r3
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	005b      	lsls	r3, r3, #1
 8014f22:	4619      	mov	r1, r3
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	440b      	add	r3, r1
 8014f28:	3230      	adds	r2, #48	; 0x30
 8014f2a:	b2d2      	uxtb	r2, r2
 8014f2c:	701a      	strb	r2, [r3, #0]
 8014f2e:	e00a      	b.n	8014f46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	0f1b      	lsrs	r3, r3, #28
 8014f34:	b2da      	uxtb	r2, r3
 8014f36:	7dfb      	ldrb	r3, [r7, #23]
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	440b      	add	r3, r1
 8014f40:	3237      	adds	r2, #55	; 0x37
 8014f42:	b2d2      	uxtb	r2, r2
 8014f44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	011b      	lsls	r3, r3, #4
 8014f4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014f4c:	7dfb      	ldrb	r3, [r7, #23]
 8014f4e:	005b      	lsls	r3, r3, #1
 8014f50:	3301      	adds	r3, #1
 8014f52:	68ba      	ldr	r2, [r7, #8]
 8014f54:	4413      	add	r3, r2
 8014f56:	2200      	movs	r2, #0
 8014f58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014f5a:	7dfb      	ldrb	r3, [r7, #23]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	75fb      	strb	r3, [r7, #23]
 8014f60:	7dfa      	ldrb	r2, [r7, #23]
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d3d3      	bcc.n	8014f10 <IntToUnicode+0x18>
  }
}
 8014f68:	bf00      	nop
 8014f6a:	bf00      	nop
 8014f6c:	371c      	adds	r7, #28
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr
	...

08014f78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b0b2      	sub	sp, #200	; 0xc8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014f80:	f107 0310 	add.w	r3, r7, #16
 8014f84:	22b8      	movs	r2, #184	; 0xb8
 8014f86:	2100      	movs	r1, #0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f000 fb39 	bl	8015600 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	4a1a      	ldr	r2, [pc, #104]	; (8014ffc <HAL_PCD_MspInit+0x84>)
 8014f94:	4293      	cmp	r3, r2
 8014f96:	d12c      	bne.n	8014ff2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014f98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8014f9c:	f04f 0300 	mov.w	r3, #0
 8014fa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8014fa4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8014fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014fac:	f107 0310 	add.w	r3, r7, #16
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f4 fb47 	bl	8009644 <HAL_RCCEx_PeriphCLKConfig>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d001      	beq.n	8014fc0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8014fbc:	f7ec ff48 	bl	8001e50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014fc0:	f7f3 fb60 	bl	8008684 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8014fc4:	4b0e      	ldr	r3, [pc, #56]	; (8015000 <HAL_PCD_MspInit+0x88>)
 8014fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014fca:	4a0d      	ldr	r2, [pc, #52]	; (8015000 <HAL_PCD_MspInit+0x88>)
 8014fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014fd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014fd4:	4b0a      	ldr	r3, [pc, #40]	; (8015000 <HAL_PCD_MspInit+0x88>)
 8014fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014fde:	60fb      	str	r3, [r7, #12]
 8014fe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	204d      	movs	r0, #77	; 0x4d
 8014fe8:	f7ef fce5 	bl	80049b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8014fec:	204d      	movs	r0, #77	; 0x4d
 8014fee:	f7ef fcfc 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8014ff2:	bf00      	nop
 8014ff4:	37c8      	adds	r7, #200	; 0xc8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	40040000 	.word	0x40040000
 8015000:	58024400 	.word	0x58024400

08015004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015018:	4619      	mov	r1, r3
 801501a:	4610      	mov	r0, r2
 801501c:	f7fe fb03 	bl	8013626 <USBD_LL_SetupStage>
}
 8015020:	bf00      	nop
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	460b      	mov	r3, r1
 8015032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801503a:	78fa      	ldrb	r2, [r7, #3]
 801503c:	6879      	ldr	r1, [r7, #4]
 801503e:	4613      	mov	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	4413      	add	r3, r2
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	440b      	add	r3, r1
 8015048:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	78fb      	ldrb	r3, [r7, #3]
 8015050:	4619      	mov	r1, r3
 8015052:	f7fe fb3d 	bl	80136d0 <USBD_LL_DataOutStage>
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}

0801505e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b082      	sub	sp, #8
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
 8015066:	460b      	mov	r3, r1
 8015068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015070:	78fa      	ldrb	r2, [r7, #3]
 8015072:	6879      	ldr	r1, [r7, #4]
 8015074:	4613      	mov	r3, r2
 8015076:	00db      	lsls	r3, r3, #3
 8015078:	4413      	add	r3, r2
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	440b      	add	r3, r1
 801507e:	3348      	adds	r3, #72	; 0x48
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	78fb      	ldrb	r3, [r7, #3]
 8015084:	4619      	mov	r1, r3
 8015086:	f7fe fbd6 	bl	8013836 <USBD_LL_DataInStage>
}
 801508a:	bf00      	nop
 801508c:	3708      	adds	r7, #8
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b082      	sub	sp, #8
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fe fd10 	bl	8013ac6 <USBD_LL_SOF>
}
 80150a6:	bf00      	nop
 80150a8:	3708      	adds	r7, #8
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b084      	sub	sp, #16
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80150b6:	2301      	movs	r3, #1
 80150b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	691b      	ldr	r3, [r3, #16]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d102      	bne.n	80150c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80150c2:	2300      	movs	r3, #0
 80150c4:	73fb      	strb	r3, [r7, #15]
 80150c6:	e008      	b.n	80150da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	691b      	ldr	r3, [r3, #16]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d102      	bne.n	80150d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80150d0:	2301      	movs	r3, #1
 80150d2:	73fb      	strb	r3, [r7, #15]
 80150d4:	e001      	b.n	80150da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80150d6:	f7ec febb 	bl	8001e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150e0:	7bfa      	ldrb	r2, [r7, #15]
 80150e2:	4611      	mov	r1, r2
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fe fcaa 	bl	8013a3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fe fc52 	bl	801399a <USBD_LL_Reset>
}
 80150f6:	bf00      	nop
 80150f8:	3710      	adds	r7, #16
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801510e:	4618      	mov	r0, r3
 8015110:	f7fe fca5 	bl	8013a5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	6812      	ldr	r2, [r2, #0]
 8015122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015126:	f043 0301 	orr.w	r3, r3, #1
 801512a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6a1b      	ldr	r3, [r3, #32]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d005      	beq.n	8015140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015134:	4b04      	ldr	r3, [pc, #16]	; (8015148 <HAL_PCD_SuspendCallback+0x48>)
 8015136:	691b      	ldr	r3, [r3, #16]
 8015138:	4a03      	ldr	r2, [pc, #12]	; (8015148 <HAL_PCD_SuspendCallback+0x48>)
 801513a:	f043 0306 	orr.w	r3, r3, #6
 801513e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	e000ed00 	.word	0xe000ed00

0801514c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b082      	sub	sp, #8
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe fc9b 	bl	8013a96 <USBD_LL_Resume>
}
 8015160:	bf00      	nop
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	460b      	mov	r3, r1
 8015172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801517a:	78fa      	ldrb	r2, [r7, #3]
 801517c:	4611      	mov	r1, r2
 801517e:	4618      	mov	r0, r3
 8015180:	f7fe fcf3 	bl	8013b6a <USBD_LL_IsoOUTIncomplete>
}
 8015184:	bf00      	nop
 8015186:	3708      	adds	r7, #8
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	460b      	mov	r3, r1
 8015196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801519e:	78fa      	ldrb	r2, [r7, #3]
 80151a0:	4611      	mov	r1, r2
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7fe fcaf 	bl	8013b06 <USBD_LL_IsoINIncomplete>
}
 80151a8:	bf00      	nop
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fe fd05 	bl	8013bce <USBD_LL_DevConnected>
}
 80151c4:	bf00      	nop
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80151da:	4618      	mov	r0, r3
 80151dc:	f7fe fd02 	bl	8013be4 <USBD_LL_DevDisconnected>
}
 80151e0:	bf00      	nop
 80151e2:	3708      	adds	r7, #8
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d140      	bne.n	801527a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80151f8:	4a22      	ldr	r2, [pc, #136]	; (8015284 <USBD_LL_Init+0x9c>)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	4a20      	ldr	r2, [pc, #128]	; (8015284 <USBD_LL_Init+0x9c>)
 8015204:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015208:	4b1e      	ldr	r3, [pc, #120]	; (8015284 <USBD_LL_Init+0x9c>)
 801520a:	4a1f      	ldr	r2, [pc, #124]	; (8015288 <USBD_LL_Init+0xa0>)
 801520c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801520e:	4b1d      	ldr	r3, [pc, #116]	; (8015284 <USBD_LL_Init+0x9c>)
 8015210:	2209      	movs	r2, #9
 8015212:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8015214:	4b1b      	ldr	r3, [pc, #108]	; (8015284 <USBD_LL_Init+0x9c>)
 8015216:	2202      	movs	r2, #2
 8015218:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801521a:	4b1a      	ldr	r3, [pc, #104]	; (8015284 <USBD_LL_Init+0x9c>)
 801521c:	2200      	movs	r2, #0
 801521e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015220:	4b18      	ldr	r3, [pc, #96]	; (8015284 <USBD_LL_Init+0x9c>)
 8015222:	2202      	movs	r2, #2
 8015224:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8015226:	4b17      	ldr	r3, [pc, #92]	; (8015284 <USBD_LL_Init+0x9c>)
 8015228:	2200      	movs	r2, #0
 801522a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801522c:	4b15      	ldr	r3, [pc, #84]	; (8015284 <USBD_LL_Init+0x9c>)
 801522e:	2200      	movs	r2, #0
 8015230:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8015232:	4b14      	ldr	r3, [pc, #80]	; (8015284 <USBD_LL_Init+0x9c>)
 8015234:	2200      	movs	r2, #0
 8015236:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015238:	4b12      	ldr	r3, [pc, #72]	; (8015284 <USBD_LL_Init+0x9c>)
 801523a:	2200      	movs	r2, #0
 801523c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801523e:	4b11      	ldr	r3, [pc, #68]	; (8015284 <USBD_LL_Init+0x9c>)
 8015240:	2200      	movs	r2, #0
 8015242:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015244:	4b0f      	ldr	r3, [pc, #60]	; (8015284 <USBD_LL_Init+0x9c>)
 8015246:	2200      	movs	r2, #0
 8015248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801524a:	480e      	ldr	r0, [pc, #56]	; (8015284 <USBD_LL_Init+0x9c>)
 801524c:	f7f1 ff27 	bl	800709e <HAL_PCD_Init>
 8015250:	4603      	mov	r3, r0
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015256:	f7ec fdfb 	bl	8001e50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801525a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801525e:	4809      	ldr	r0, [pc, #36]	; (8015284 <USBD_LL_Init+0x9c>)
 8015260:	f7f3 f995 	bl	800858e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8015264:	2280      	movs	r2, #128	; 0x80
 8015266:	2100      	movs	r1, #0
 8015268:	4806      	ldr	r0, [pc, #24]	; (8015284 <USBD_LL_Init+0x9c>)
 801526a:	f7f3 f949 	bl	8008500 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801526e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8015272:	2101      	movs	r1, #1
 8015274:	4803      	ldr	r0, [pc, #12]	; (8015284 <USBD_LL_Init+0x9c>)
 8015276:	f7f3 f943 	bl	8008500 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801527a:	2300      	movs	r3, #0
}
 801527c:	4618      	mov	r0, r3
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	240021c8 	.word	0x240021c8
 8015288:	40040000 	.word	0x40040000

0801528c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b084      	sub	sp, #16
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015294:	2300      	movs	r3, #0
 8015296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015298:	2300      	movs	r3, #0
 801529a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7f2 f81f 	bl	80072e6 <HAL_PCD_Start>
 80152a8:	4603      	mov	r3, r0
 80152aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152ac:	7bfb      	ldrb	r3, [r7, #15]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f000 f942 	bl	8015538 <USBD_Get_USB_Status>
 80152b4:	4603      	mov	r3, r0
 80152b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3710      	adds	r7, #16
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}

080152c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b084      	sub	sp, #16
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	6078      	str	r0, [r7, #4]
 80152ca:	4608      	mov	r0, r1
 80152cc:	4611      	mov	r1, r2
 80152ce:	461a      	mov	r2, r3
 80152d0:	4603      	mov	r3, r0
 80152d2:	70fb      	strb	r3, [r7, #3]
 80152d4:	460b      	mov	r3, r1
 80152d6:	70bb      	strb	r3, [r7, #2]
 80152d8:	4613      	mov	r3, r2
 80152da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152dc:	2300      	movs	r3, #0
 80152de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152e0:	2300      	movs	r3, #0
 80152e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80152ea:	78bb      	ldrb	r3, [r7, #2]
 80152ec:	883a      	ldrh	r2, [r7, #0]
 80152ee:	78f9      	ldrb	r1, [r7, #3]
 80152f0:	f7f2 fd1f 	bl	8007d32 <HAL_PCD_EP_Open>
 80152f4:	4603      	mov	r3, r0
 80152f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f000 f91c 	bl	8015538 <USBD_Get_USB_Status>
 8015300:	4603      	mov	r3, r0
 8015302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015304:	7bbb      	ldrb	r3, [r7, #14]
}
 8015306:	4618      	mov	r0, r3
 8015308:	3710      	adds	r7, #16
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b084      	sub	sp, #16
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
 8015316:	460b      	mov	r3, r1
 8015318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801531a:	2300      	movs	r3, #0
 801531c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801531e:	2300      	movs	r3, #0
 8015320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015328:	78fa      	ldrb	r2, [r7, #3]
 801532a:	4611      	mov	r1, r2
 801532c:	4618      	mov	r0, r3
 801532e:	f7f2 fd68 	bl	8007e02 <HAL_PCD_EP_Close>
 8015332:	4603      	mov	r3, r0
 8015334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015336:	7bfb      	ldrb	r3, [r7, #15]
 8015338:	4618      	mov	r0, r3
 801533a:	f000 f8fd 	bl	8015538 <USBD_Get_USB_Status>
 801533e:	4603      	mov	r3, r0
 8015340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015342:	7bbb      	ldrb	r3, [r7, #14]
}
 8015344:	4618      	mov	r0, r3
 8015346:	3710      	adds	r7, #16
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}

0801534c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	460b      	mov	r3, r1
 8015356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015358:	2300      	movs	r3, #0
 801535a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801535c:	2300      	movs	r3, #0
 801535e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015366:	78fa      	ldrb	r2, [r7, #3]
 8015368:	4611      	mov	r1, r2
 801536a:	4618      	mov	r0, r3
 801536c:	f7f2 fe22 	bl	8007fb4 <HAL_PCD_EP_SetStall>
 8015370:	4603      	mov	r3, r0
 8015372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015374:	7bfb      	ldrb	r3, [r7, #15]
 8015376:	4618      	mov	r0, r3
 8015378:	f000 f8de 	bl	8015538 <USBD_Get_USB_Status>
 801537c:	4603      	mov	r3, r0
 801537e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015380:	7bbb      	ldrb	r3, [r7, #14]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3710      	adds	r7, #16
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b084      	sub	sp, #16
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
 8015392:	460b      	mov	r3, r1
 8015394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015396:	2300      	movs	r3, #0
 8015398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801539a:	2300      	movs	r3, #0
 801539c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80153a4:	78fa      	ldrb	r2, [r7, #3]
 80153a6:	4611      	mov	r1, r2
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f2 fe67 	bl	800807c <HAL_PCD_EP_ClrStall>
 80153ae:	4603      	mov	r3, r0
 80153b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153b2:	7bfb      	ldrb	r3, [r7, #15]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f000 f8bf 	bl	8015538 <USBD_Get_USB_Status>
 80153ba:	4603      	mov	r3, r0
 80153bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153be:	7bbb      	ldrb	r3, [r7, #14]
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3710      	adds	r7, #16
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153c8:	b480      	push	{r7}
 80153ca:	b085      	sub	sp, #20
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	460b      	mov	r3, r1
 80153d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80153da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80153dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da0b      	bge.n	80153fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80153e4:	78fb      	ldrb	r3, [r7, #3]
 80153e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153ea:	68f9      	ldr	r1, [r7, #12]
 80153ec:	4613      	mov	r3, r2
 80153ee:	00db      	lsls	r3, r3, #3
 80153f0:	4413      	add	r3, r2
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	440b      	add	r3, r1
 80153f6:	333e      	adds	r3, #62	; 0x3e
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	e00b      	b.n	8015414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80153fc:	78fb      	ldrb	r3, [r7, #3]
 80153fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015402:	68f9      	ldr	r1, [r7, #12]
 8015404:	4613      	mov	r3, r2
 8015406:	00db      	lsls	r3, r3, #3
 8015408:	4413      	add	r3, r2
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	440b      	add	r3, r1
 801540e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015414:	4618      	mov	r0, r3
 8015416:	3714      	adds	r7, #20
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr

08015420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	460b      	mov	r3, r1
 801542a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801542c:	2300      	movs	r3, #0
 801542e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015430:	2300      	movs	r3, #0
 8015432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801543a:	78fa      	ldrb	r2, [r7, #3]
 801543c:	4611      	mov	r1, r2
 801543e:	4618      	mov	r0, r3
 8015440:	f7f2 fc52 	bl	8007ce8 <HAL_PCD_SetAddress>
 8015444:	4603      	mov	r3, r0
 8015446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015448:	7bfb      	ldrb	r3, [r7, #15]
 801544a:	4618      	mov	r0, r3
 801544c:	f000 f874 	bl	8015538 <USBD_Get_USB_Status>
 8015450:	4603      	mov	r3, r0
 8015452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015454:	7bbb      	ldrb	r3, [r7, #14]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b086      	sub	sp, #24
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	607a      	str	r2, [r7, #4]
 8015468:	603b      	str	r3, [r7, #0]
 801546a:	460b      	mov	r3, r1
 801546c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801546e:	2300      	movs	r3, #0
 8015470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015472:	2300      	movs	r3, #0
 8015474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801547c:	7af9      	ldrb	r1, [r7, #11]
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	f7f2 fd5c 	bl	8007f3e <HAL_PCD_EP_Transmit>
 8015486:	4603      	mov	r3, r0
 8015488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	4618      	mov	r0, r3
 801548e:	f000 f853 	bl	8015538 <USBD_Get_USB_Status>
 8015492:	4603      	mov	r3, r0
 8015494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015496:	7dbb      	ldrb	r3, [r7, #22]
}
 8015498:	4618      	mov	r0, r3
 801549a:	3718      	adds	r7, #24
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	607a      	str	r2, [r7, #4]
 80154aa:	603b      	str	r3, [r7, #0]
 80154ac:	460b      	mov	r3, r1
 80154ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154b0:	2300      	movs	r3, #0
 80154b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154b4:	2300      	movs	r3, #0
 80154b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80154be:	7af9      	ldrb	r1, [r7, #11]
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	f7f2 fce7 	bl	8007e96 <HAL_PCD_EP_Receive>
 80154c8:	4603      	mov	r3, r0
 80154ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f000 f832 	bl	8015538 <USBD_Get_USB_Status>
 80154d4:	4603      	mov	r3, r0
 80154d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80154d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3718      	adds	r7, #24
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b082      	sub	sp, #8
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	6078      	str	r0, [r7, #4]
 80154ea:	460b      	mov	r3, r1
 80154ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80154f4:	78fa      	ldrb	r2, [r7, #3]
 80154f6:	4611      	mov	r1, r2
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f2 fd08 	bl	8007f0e <HAL_PCD_EP_GetRxCount>
 80154fe:	4603      	mov	r3, r0
}
 8015500:	4618      	mov	r0, r3
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}

08015508 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015510:	4b03      	ldr	r3, [pc, #12]	; (8015520 <USBD_static_malloc+0x18>)
}
 8015512:	4618      	mov	r0, r3
 8015514:	370c      	adds	r7, #12
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop
 8015520:	240026d4 	.word	0x240026d4

08015524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801552c:	bf00      	nop
 801552e:	370c      	adds	r7, #12
 8015530:	46bd      	mov	sp, r7
 8015532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015536:	4770      	bx	lr

08015538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015538:	b480      	push	{r7}
 801553a:	b085      	sub	sp, #20
 801553c:	af00      	add	r7, sp, #0
 801553e:	4603      	mov	r3, r0
 8015540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015542:	2300      	movs	r3, #0
 8015544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015546:	79fb      	ldrb	r3, [r7, #7]
 8015548:	2b03      	cmp	r3, #3
 801554a:	d817      	bhi.n	801557c <USBD_Get_USB_Status+0x44>
 801554c:	a201      	add	r2, pc, #4	; (adr r2, 8015554 <USBD_Get_USB_Status+0x1c>)
 801554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015552:	bf00      	nop
 8015554:	08015565 	.word	0x08015565
 8015558:	0801556b 	.word	0x0801556b
 801555c:	08015571 	.word	0x08015571
 8015560:	08015577 	.word	0x08015577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	73fb      	strb	r3, [r7, #15]
    break;
 8015568:	e00b      	b.n	8015582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801556a:	2303      	movs	r3, #3
 801556c:	73fb      	strb	r3, [r7, #15]
    break;
 801556e:	e008      	b.n	8015582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015570:	2301      	movs	r3, #1
 8015572:	73fb      	strb	r3, [r7, #15]
    break;
 8015574:	e005      	b.n	8015582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015576:	2303      	movs	r3, #3
 8015578:	73fb      	strb	r3, [r7, #15]
    break;
 801557a:	e002      	b.n	8015582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801557c:	2303      	movs	r3, #3
 801557e:	73fb      	strb	r3, [r7, #15]
    break;
 8015580:	bf00      	nop
  }
  return usb_status;
 8015582:	7bfb      	ldrb	r3, [r7, #15]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3714      	adds	r7, #20
 8015588:	46bd      	mov	sp, r7
 801558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558e:	4770      	bx	lr

08015590 <__errno>:
 8015590:	4b01      	ldr	r3, [pc, #4]	; (8015598 <__errno+0x8>)
 8015592:	6818      	ldr	r0, [r3, #0]
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	24000100 	.word	0x24000100

0801559c <__libc_init_array>:
 801559c:	b570      	push	{r4, r5, r6, lr}
 801559e:	4d0d      	ldr	r5, [pc, #52]	; (80155d4 <__libc_init_array+0x38>)
 80155a0:	4c0d      	ldr	r4, [pc, #52]	; (80155d8 <__libc_init_array+0x3c>)
 80155a2:	1b64      	subs	r4, r4, r5
 80155a4:	10a4      	asrs	r4, r4, #2
 80155a6:	2600      	movs	r6, #0
 80155a8:	42a6      	cmp	r6, r4
 80155aa:	d109      	bne.n	80155c0 <__libc_init_array+0x24>
 80155ac:	4d0b      	ldr	r5, [pc, #44]	; (80155dc <__libc_init_array+0x40>)
 80155ae:	4c0c      	ldr	r4, [pc, #48]	; (80155e0 <__libc_init_array+0x44>)
 80155b0:	f004 fe7e 	bl	801a2b0 <_init>
 80155b4:	1b64      	subs	r4, r4, r5
 80155b6:	10a4      	asrs	r4, r4, #2
 80155b8:	2600      	movs	r6, #0
 80155ba:	42a6      	cmp	r6, r4
 80155bc:	d105      	bne.n	80155ca <__libc_init_array+0x2e>
 80155be:	bd70      	pop	{r4, r5, r6, pc}
 80155c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80155c4:	4798      	blx	r3
 80155c6:	3601      	adds	r6, #1
 80155c8:	e7ee      	b.n	80155a8 <__libc_init_array+0xc>
 80155ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80155ce:	4798      	blx	r3
 80155d0:	3601      	adds	r6, #1
 80155d2:	e7f2      	b.n	80155ba <__libc_init_array+0x1e>
 80155d4:	0801c148 	.word	0x0801c148
 80155d8:	0801c148 	.word	0x0801c148
 80155dc:	0801c148 	.word	0x0801c148
 80155e0:	0801c14c 	.word	0x0801c14c

080155e4 <memcpy>:
 80155e4:	440a      	add	r2, r1
 80155e6:	4291      	cmp	r1, r2
 80155e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80155ec:	d100      	bne.n	80155f0 <memcpy+0xc>
 80155ee:	4770      	bx	lr
 80155f0:	b510      	push	{r4, lr}
 80155f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155fa:	4291      	cmp	r1, r2
 80155fc:	d1f9      	bne.n	80155f2 <memcpy+0xe>
 80155fe:	bd10      	pop	{r4, pc}

08015600 <memset>:
 8015600:	4402      	add	r2, r0
 8015602:	4603      	mov	r3, r0
 8015604:	4293      	cmp	r3, r2
 8015606:	d100      	bne.n	801560a <memset+0xa>
 8015608:	4770      	bx	lr
 801560a:	f803 1b01 	strb.w	r1, [r3], #1
 801560e:	e7f9      	b.n	8015604 <memset+0x4>

08015610 <__cvt>:
 8015610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015612:	ed2d 8b02 	vpush	{d8}
 8015616:	eeb0 8b40 	vmov.f64	d8, d0
 801561a:	b085      	sub	sp, #20
 801561c:	4617      	mov	r7, r2
 801561e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015620:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015622:	ee18 2a90 	vmov	r2, s17
 8015626:	f025 0520 	bic.w	r5, r5, #32
 801562a:	2a00      	cmp	r2, #0
 801562c:	bfb6      	itet	lt
 801562e:	222d      	movlt	r2, #45	; 0x2d
 8015630:	2200      	movge	r2, #0
 8015632:	eeb1 8b40 	vneglt.f64	d8, d0
 8015636:	2d46      	cmp	r5, #70	; 0x46
 8015638:	460c      	mov	r4, r1
 801563a:	701a      	strb	r2, [r3, #0]
 801563c:	d004      	beq.n	8015648 <__cvt+0x38>
 801563e:	2d45      	cmp	r5, #69	; 0x45
 8015640:	d100      	bne.n	8015644 <__cvt+0x34>
 8015642:	3401      	adds	r4, #1
 8015644:	2102      	movs	r1, #2
 8015646:	e000      	b.n	801564a <__cvt+0x3a>
 8015648:	2103      	movs	r1, #3
 801564a:	ab03      	add	r3, sp, #12
 801564c:	9301      	str	r3, [sp, #4]
 801564e:	ab02      	add	r3, sp, #8
 8015650:	9300      	str	r3, [sp, #0]
 8015652:	4622      	mov	r2, r4
 8015654:	4633      	mov	r3, r6
 8015656:	eeb0 0b48 	vmov.f64	d0, d8
 801565a:	f001 fd95 	bl	8017188 <_dtoa_r>
 801565e:	2d47      	cmp	r5, #71	; 0x47
 8015660:	d101      	bne.n	8015666 <__cvt+0x56>
 8015662:	07fb      	lsls	r3, r7, #31
 8015664:	d51a      	bpl.n	801569c <__cvt+0x8c>
 8015666:	2d46      	cmp	r5, #70	; 0x46
 8015668:	eb00 0204 	add.w	r2, r0, r4
 801566c:	d10c      	bne.n	8015688 <__cvt+0x78>
 801566e:	7803      	ldrb	r3, [r0, #0]
 8015670:	2b30      	cmp	r3, #48	; 0x30
 8015672:	d107      	bne.n	8015684 <__cvt+0x74>
 8015674:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567c:	bf1c      	itt	ne
 801567e:	f1c4 0401 	rsbne	r4, r4, #1
 8015682:	6034      	strne	r4, [r6, #0]
 8015684:	6833      	ldr	r3, [r6, #0]
 8015686:	441a      	add	r2, r3
 8015688:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015690:	bf08      	it	eq
 8015692:	9203      	streq	r2, [sp, #12]
 8015694:	2130      	movs	r1, #48	; 0x30
 8015696:	9b03      	ldr	r3, [sp, #12]
 8015698:	4293      	cmp	r3, r2
 801569a:	d307      	bcc.n	80156ac <__cvt+0x9c>
 801569c:	9b03      	ldr	r3, [sp, #12]
 801569e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156a0:	1a1b      	subs	r3, r3, r0
 80156a2:	6013      	str	r3, [r2, #0]
 80156a4:	b005      	add	sp, #20
 80156a6:	ecbd 8b02 	vpop	{d8}
 80156aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ac:	1c5c      	adds	r4, r3, #1
 80156ae:	9403      	str	r4, [sp, #12]
 80156b0:	7019      	strb	r1, [r3, #0]
 80156b2:	e7f0      	b.n	8015696 <__cvt+0x86>

080156b4 <__exponent>:
 80156b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156b6:	4603      	mov	r3, r0
 80156b8:	2900      	cmp	r1, #0
 80156ba:	bfb8      	it	lt
 80156bc:	4249      	neglt	r1, r1
 80156be:	f803 2b02 	strb.w	r2, [r3], #2
 80156c2:	bfb4      	ite	lt
 80156c4:	222d      	movlt	r2, #45	; 0x2d
 80156c6:	222b      	movge	r2, #43	; 0x2b
 80156c8:	2909      	cmp	r1, #9
 80156ca:	7042      	strb	r2, [r0, #1]
 80156cc:	dd2a      	ble.n	8015724 <__exponent+0x70>
 80156ce:	f10d 0407 	add.w	r4, sp, #7
 80156d2:	46a4      	mov	ip, r4
 80156d4:	270a      	movs	r7, #10
 80156d6:	46a6      	mov	lr, r4
 80156d8:	460a      	mov	r2, r1
 80156da:	fb91 f6f7 	sdiv	r6, r1, r7
 80156de:	fb07 1516 	mls	r5, r7, r6, r1
 80156e2:	3530      	adds	r5, #48	; 0x30
 80156e4:	2a63      	cmp	r2, #99	; 0x63
 80156e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80156ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80156ee:	4631      	mov	r1, r6
 80156f0:	dcf1      	bgt.n	80156d6 <__exponent+0x22>
 80156f2:	3130      	adds	r1, #48	; 0x30
 80156f4:	f1ae 0502 	sub.w	r5, lr, #2
 80156f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80156fc:	1c44      	adds	r4, r0, #1
 80156fe:	4629      	mov	r1, r5
 8015700:	4561      	cmp	r1, ip
 8015702:	d30a      	bcc.n	801571a <__exponent+0x66>
 8015704:	f10d 0209 	add.w	r2, sp, #9
 8015708:	eba2 020e 	sub.w	r2, r2, lr
 801570c:	4565      	cmp	r5, ip
 801570e:	bf88      	it	hi
 8015710:	2200      	movhi	r2, #0
 8015712:	4413      	add	r3, r2
 8015714:	1a18      	subs	r0, r3, r0
 8015716:	b003      	add	sp, #12
 8015718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801571a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801571e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015722:	e7ed      	b.n	8015700 <__exponent+0x4c>
 8015724:	2330      	movs	r3, #48	; 0x30
 8015726:	3130      	adds	r1, #48	; 0x30
 8015728:	7083      	strb	r3, [r0, #2]
 801572a:	70c1      	strb	r1, [r0, #3]
 801572c:	1d03      	adds	r3, r0, #4
 801572e:	e7f1      	b.n	8015714 <__exponent+0x60>

08015730 <_printf_float>:
 8015730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015734:	b08b      	sub	sp, #44	; 0x2c
 8015736:	460c      	mov	r4, r1
 8015738:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801573c:	4616      	mov	r6, r2
 801573e:	461f      	mov	r7, r3
 8015740:	4605      	mov	r5, r0
 8015742:	f002 fdff 	bl	8018344 <_localeconv_r>
 8015746:	f8d0 b000 	ldr.w	fp, [r0]
 801574a:	4658      	mov	r0, fp
 801574c:	f7ea fde0 	bl	8000310 <strlen>
 8015750:	2300      	movs	r3, #0
 8015752:	9308      	str	r3, [sp, #32]
 8015754:	f8d8 3000 	ldr.w	r3, [r8]
 8015758:	f894 9018 	ldrb.w	r9, [r4, #24]
 801575c:	6822      	ldr	r2, [r4, #0]
 801575e:	3307      	adds	r3, #7
 8015760:	f023 0307 	bic.w	r3, r3, #7
 8015764:	f103 0108 	add.w	r1, r3, #8
 8015768:	f8c8 1000 	str.w	r1, [r8]
 801576c:	4682      	mov	sl, r0
 801576e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015772:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015776:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80159d8 <_printf_float+0x2a8>
 801577a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801577e:	eeb0 6bc0 	vabs.f64	d6, d0
 8015782:	eeb4 6b47 	vcmp.f64	d6, d7
 8015786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578a:	dd24      	ble.n	80157d6 <_printf_float+0xa6>
 801578c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015794:	d502      	bpl.n	801579c <_printf_float+0x6c>
 8015796:	232d      	movs	r3, #45	; 0x2d
 8015798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801579c:	4b90      	ldr	r3, [pc, #576]	; (80159e0 <_printf_float+0x2b0>)
 801579e:	4891      	ldr	r0, [pc, #580]	; (80159e4 <_printf_float+0x2b4>)
 80157a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80157a4:	bf94      	ite	ls
 80157a6:	4698      	movls	r8, r3
 80157a8:	4680      	movhi	r8, r0
 80157aa:	2303      	movs	r3, #3
 80157ac:	6123      	str	r3, [r4, #16]
 80157ae:	f022 0204 	bic.w	r2, r2, #4
 80157b2:	2300      	movs	r3, #0
 80157b4:	6022      	str	r2, [r4, #0]
 80157b6:	9304      	str	r3, [sp, #16]
 80157b8:	9700      	str	r7, [sp, #0]
 80157ba:	4633      	mov	r3, r6
 80157bc:	aa09      	add	r2, sp, #36	; 0x24
 80157be:	4621      	mov	r1, r4
 80157c0:	4628      	mov	r0, r5
 80157c2:	f000 f9d3 	bl	8015b6c <_printf_common>
 80157c6:	3001      	adds	r0, #1
 80157c8:	f040 808a 	bne.w	80158e0 <_printf_float+0x1b0>
 80157cc:	f04f 30ff 	mov.w	r0, #4294967295
 80157d0:	b00b      	add	sp, #44	; 0x2c
 80157d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80157da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157de:	d709      	bvc.n	80157f4 <_printf_float+0xc4>
 80157e0:	ee10 3a90 	vmov	r3, s1
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	bfbc      	itt	lt
 80157e8:	232d      	movlt	r3, #45	; 0x2d
 80157ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80157ee:	487e      	ldr	r0, [pc, #504]	; (80159e8 <_printf_float+0x2b8>)
 80157f0:	4b7e      	ldr	r3, [pc, #504]	; (80159ec <_printf_float+0x2bc>)
 80157f2:	e7d5      	b.n	80157a0 <_printf_float+0x70>
 80157f4:	6863      	ldr	r3, [r4, #4]
 80157f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80157fa:	9104      	str	r1, [sp, #16]
 80157fc:	1c59      	adds	r1, r3, #1
 80157fe:	d13c      	bne.n	801587a <_printf_float+0x14a>
 8015800:	2306      	movs	r3, #6
 8015802:	6063      	str	r3, [r4, #4]
 8015804:	2300      	movs	r3, #0
 8015806:	9303      	str	r3, [sp, #12]
 8015808:	ab08      	add	r3, sp, #32
 801580a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801580e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015812:	ab07      	add	r3, sp, #28
 8015814:	6861      	ldr	r1, [r4, #4]
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	6022      	str	r2, [r4, #0]
 801581a:	f10d 031b 	add.w	r3, sp, #27
 801581e:	4628      	mov	r0, r5
 8015820:	f7ff fef6 	bl	8015610 <__cvt>
 8015824:	9b04      	ldr	r3, [sp, #16]
 8015826:	9907      	ldr	r1, [sp, #28]
 8015828:	2b47      	cmp	r3, #71	; 0x47
 801582a:	4680      	mov	r8, r0
 801582c:	d108      	bne.n	8015840 <_printf_float+0x110>
 801582e:	1cc8      	adds	r0, r1, #3
 8015830:	db02      	blt.n	8015838 <_printf_float+0x108>
 8015832:	6863      	ldr	r3, [r4, #4]
 8015834:	4299      	cmp	r1, r3
 8015836:	dd41      	ble.n	80158bc <_printf_float+0x18c>
 8015838:	f1a9 0902 	sub.w	r9, r9, #2
 801583c:	fa5f f989 	uxtb.w	r9, r9
 8015840:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015844:	d820      	bhi.n	8015888 <_printf_float+0x158>
 8015846:	3901      	subs	r1, #1
 8015848:	464a      	mov	r2, r9
 801584a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801584e:	9107      	str	r1, [sp, #28]
 8015850:	f7ff ff30 	bl	80156b4 <__exponent>
 8015854:	9a08      	ldr	r2, [sp, #32]
 8015856:	9004      	str	r0, [sp, #16]
 8015858:	1813      	adds	r3, r2, r0
 801585a:	2a01      	cmp	r2, #1
 801585c:	6123      	str	r3, [r4, #16]
 801585e:	dc02      	bgt.n	8015866 <_printf_float+0x136>
 8015860:	6822      	ldr	r2, [r4, #0]
 8015862:	07d2      	lsls	r2, r2, #31
 8015864:	d501      	bpl.n	801586a <_printf_float+0x13a>
 8015866:	3301      	adds	r3, #1
 8015868:	6123      	str	r3, [r4, #16]
 801586a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d0a2      	beq.n	80157b8 <_printf_float+0x88>
 8015872:	232d      	movs	r3, #45	; 0x2d
 8015874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015878:	e79e      	b.n	80157b8 <_printf_float+0x88>
 801587a:	9904      	ldr	r1, [sp, #16]
 801587c:	2947      	cmp	r1, #71	; 0x47
 801587e:	d1c1      	bne.n	8015804 <_printf_float+0xd4>
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1bf      	bne.n	8015804 <_printf_float+0xd4>
 8015884:	2301      	movs	r3, #1
 8015886:	e7bc      	b.n	8015802 <_printf_float+0xd2>
 8015888:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801588c:	d118      	bne.n	80158c0 <_printf_float+0x190>
 801588e:	2900      	cmp	r1, #0
 8015890:	6863      	ldr	r3, [r4, #4]
 8015892:	dd0b      	ble.n	80158ac <_printf_float+0x17c>
 8015894:	6121      	str	r1, [r4, #16]
 8015896:	b913      	cbnz	r3, 801589e <_printf_float+0x16e>
 8015898:	6822      	ldr	r2, [r4, #0]
 801589a:	07d0      	lsls	r0, r2, #31
 801589c:	d502      	bpl.n	80158a4 <_printf_float+0x174>
 801589e:	3301      	adds	r3, #1
 80158a0:	440b      	add	r3, r1
 80158a2:	6123      	str	r3, [r4, #16]
 80158a4:	2300      	movs	r3, #0
 80158a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80158a8:	9304      	str	r3, [sp, #16]
 80158aa:	e7de      	b.n	801586a <_printf_float+0x13a>
 80158ac:	b913      	cbnz	r3, 80158b4 <_printf_float+0x184>
 80158ae:	6822      	ldr	r2, [r4, #0]
 80158b0:	07d2      	lsls	r2, r2, #31
 80158b2:	d501      	bpl.n	80158b8 <_printf_float+0x188>
 80158b4:	3302      	adds	r3, #2
 80158b6:	e7f4      	b.n	80158a2 <_printf_float+0x172>
 80158b8:	2301      	movs	r3, #1
 80158ba:	e7f2      	b.n	80158a2 <_printf_float+0x172>
 80158bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80158c0:	9b08      	ldr	r3, [sp, #32]
 80158c2:	4299      	cmp	r1, r3
 80158c4:	db05      	blt.n	80158d2 <_printf_float+0x1a2>
 80158c6:	6823      	ldr	r3, [r4, #0]
 80158c8:	6121      	str	r1, [r4, #16]
 80158ca:	07d8      	lsls	r0, r3, #31
 80158cc:	d5ea      	bpl.n	80158a4 <_printf_float+0x174>
 80158ce:	1c4b      	adds	r3, r1, #1
 80158d0:	e7e7      	b.n	80158a2 <_printf_float+0x172>
 80158d2:	2900      	cmp	r1, #0
 80158d4:	bfd4      	ite	le
 80158d6:	f1c1 0202 	rsble	r2, r1, #2
 80158da:	2201      	movgt	r2, #1
 80158dc:	4413      	add	r3, r2
 80158de:	e7e0      	b.n	80158a2 <_printf_float+0x172>
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	055a      	lsls	r2, r3, #21
 80158e4:	d407      	bmi.n	80158f6 <_printf_float+0x1c6>
 80158e6:	6923      	ldr	r3, [r4, #16]
 80158e8:	4642      	mov	r2, r8
 80158ea:	4631      	mov	r1, r6
 80158ec:	4628      	mov	r0, r5
 80158ee:	47b8      	blx	r7
 80158f0:	3001      	adds	r0, #1
 80158f2:	d12a      	bne.n	801594a <_printf_float+0x21a>
 80158f4:	e76a      	b.n	80157cc <_printf_float+0x9c>
 80158f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80158fa:	f240 80e2 	bls.w	8015ac2 <_printf_float+0x392>
 80158fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015902:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	d133      	bne.n	8015974 <_printf_float+0x244>
 801590c:	4a38      	ldr	r2, [pc, #224]	; (80159f0 <_printf_float+0x2c0>)
 801590e:	2301      	movs	r3, #1
 8015910:	4631      	mov	r1, r6
 8015912:	4628      	mov	r0, r5
 8015914:	47b8      	blx	r7
 8015916:	3001      	adds	r0, #1
 8015918:	f43f af58 	beq.w	80157cc <_printf_float+0x9c>
 801591c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015920:	429a      	cmp	r2, r3
 8015922:	db02      	blt.n	801592a <_printf_float+0x1fa>
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	07d8      	lsls	r0, r3, #31
 8015928:	d50f      	bpl.n	801594a <_printf_float+0x21a>
 801592a:	4653      	mov	r3, sl
 801592c:	465a      	mov	r2, fp
 801592e:	4631      	mov	r1, r6
 8015930:	4628      	mov	r0, r5
 8015932:	47b8      	blx	r7
 8015934:	3001      	adds	r0, #1
 8015936:	f43f af49 	beq.w	80157cc <_printf_float+0x9c>
 801593a:	f04f 0800 	mov.w	r8, #0
 801593e:	f104 091a 	add.w	r9, r4, #26
 8015942:	9b08      	ldr	r3, [sp, #32]
 8015944:	3b01      	subs	r3, #1
 8015946:	4543      	cmp	r3, r8
 8015948:	dc09      	bgt.n	801595e <_printf_float+0x22e>
 801594a:	6823      	ldr	r3, [r4, #0]
 801594c:	079b      	lsls	r3, r3, #30
 801594e:	f100 8108 	bmi.w	8015b62 <_printf_float+0x432>
 8015952:	68e0      	ldr	r0, [r4, #12]
 8015954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015956:	4298      	cmp	r0, r3
 8015958:	bfb8      	it	lt
 801595a:	4618      	movlt	r0, r3
 801595c:	e738      	b.n	80157d0 <_printf_float+0xa0>
 801595e:	2301      	movs	r3, #1
 8015960:	464a      	mov	r2, r9
 8015962:	4631      	mov	r1, r6
 8015964:	4628      	mov	r0, r5
 8015966:	47b8      	blx	r7
 8015968:	3001      	adds	r0, #1
 801596a:	f43f af2f 	beq.w	80157cc <_printf_float+0x9c>
 801596e:	f108 0801 	add.w	r8, r8, #1
 8015972:	e7e6      	b.n	8015942 <_printf_float+0x212>
 8015974:	9b07      	ldr	r3, [sp, #28]
 8015976:	2b00      	cmp	r3, #0
 8015978:	dc3c      	bgt.n	80159f4 <_printf_float+0x2c4>
 801597a:	4a1d      	ldr	r2, [pc, #116]	; (80159f0 <_printf_float+0x2c0>)
 801597c:	2301      	movs	r3, #1
 801597e:	4631      	mov	r1, r6
 8015980:	4628      	mov	r0, r5
 8015982:	47b8      	blx	r7
 8015984:	3001      	adds	r0, #1
 8015986:	f43f af21 	beq.w	80157cc <_printf_float+0x9c>
 801598a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801598e:	4313      	orrs	r3, r2
 8015990:	d102      	bne.n	8015998 <_printf_float+0x268>
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	07d9      	lsls	r1, r3, #31
 8015996:	d5d8      	bpl.n	801594a <_printf_float+0x21a>
 8015998:	4653      	mov	r3, sl
 801599a:	465a      	mov	r2, fp
 801599c:	4631      	mov	r1, r6
 801599e:	4628      	mov	r0, r5
 80159a0:	47b8      	blx	r7
 80159a2:	3001      	adds	r0, #1
 80159a4:	f43f af12 	beq.w	80157cc <_printf_float+0x9c>
 80159a8:	f04f 0900 	mov.w	r9, #0
 80159ac:	f104 0a1a 	add.w	sl, r4, #26
 80159b0:	9b07      	ldr	r3, [sp, #28]
 80159b2:	425b      	negs	r3, r3
 80159b4:	454b      	cmp	r3, r9
 80159b6:	dc01      	bgt.n	80159bc <_printf_float+0x28c>
 80159b8:	9b08      	ldr	r3, [sp, #32]
 80159ba:	e795      	b.n	80158e8 <_printf_float+0x1b8>
 80159bc:	2301      	movs	r3, #1
 80159be:	4652      	mov	r2, sl
 80159c0:	4631      	mov	r1, r6
 80159c2:	4628      	mov	r0, r5
 80159c4:	47b8      	blx	r7
 80159c6:	3001      	adds	r0, #1
 80159c8:	f43f af00 	beq.w	80157cc <_printf_float+0x9c>
 80159cc:	f109 0901 	add.w	r9, r9, #1
 80159d0:	e7ee      	b.n	80159b0 <_printf_float+0x280>
 80159d2:	bf00      	nop
 80159d4:	f3af 8000 	nop.w
 80159d8:	ffffffff 	.word	0xffffffff
 80159dc:	7fefffff 	.word	0x7fefffff
 80159e0:	0801a3e0 	.word	0x0801a3e0
 80159e4:	0801a3e4 	.word	0x0801a3e4
 80159e8:	0801a3ec 	.word	0x0801a3ec
 80159ec:	0801a3e8 	.word	0x0801a3e8
 80159f0:	0801a3f0 	.word	0x0801a3f0
 80159f4:	9a08      	ldr	r2, [sp, #32]
 80159f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159f8:	429a      	cmp	r2, r3
 80159fa:	bfa8      	it	ge
 80159fc:	461a      	movge	r2, r3
 80159fe:	2a00      	cmp	r2, #0
 8015a00:	4691      	mov	r9, r2
 8015a02:	dc38      	bgt.n	8015a76 <_printf_float+0x346>
 8015a04:	2300      	movs	r3, #0
 8015a06:	9305      	str	r3, [sp, #20]
 8015a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a0c:	f104 021a 	add.w	r2, r4, #26
 8015a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a12:	9905      	ldr	r1, [sp, #20]
 8015a14:	9304      	str	r3, [sp, #16]
 8015a16:	eba3 0309 	sub.w	r3, r3, r9
 8015a1a:	428b      	cmp	r3, r1
 8015a1c:	dc33      	bgt.n	8015a86 <_printf_float+0x356>
 8015a1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	db3c      	blt.n	8015aa0 <_printf_float+0x370>
 8015a26:	6823      	ldr	r3, [r4, #0]
 8015a28:	07da      	lsls	r2, r3, #31
 8015a2a:	d439      	bmi.n	8015aa0 <_printf_float+0x370>
 8015a2c:	9b08      	ldr	r3, [sp, #32]
 8015a2e:	9a04      	ldr	r2, [sp, #16]
 8015a30:	9907      	ldr	r1, [sp, #28]
 8015a32:	1a9a      	subs	r2, r3, r2
 8015a34:	eba3 0901 	sub.w	r9, r3, r1
 8015a38:	4591      	cmp	r9, r2
 8015a3a:	bfa8      	it	ge
 8015a3c:	4691      	movge	r9, r2
 8015a3e:	f1b9 0f00 	cmp.w	r9, #0
 8015a42:	dc35      	bgt.n	8015ab0 <_printf_float+0x380>
 8015a44:	f04f 0800 	mov.w	r8, #0
 8015a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a4c:	f104 0a1a 	add.w	sl, r4, #26
 8015a50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015a54:	1a9b      	subs	r3, r3, r2
 8015a56:	eba3 0309 	sub.w	r3, r3, r9
 8015a5a:	4543      	cmp	r3, r8
 8015a5c:	f77f af75 	ble.w	801594a <_printf_float+0x21a>
 8015a60:	2301      	movs	r3, #1
 8015a62:	4652      	mov	r2, sl
 8015a64:	4631      	mov	r1, r6
 8015a66:	4628      	mov	r0, r5
 8015a68:	47b8      	blx	r7
 8015a6a:	3001      	adds	r0, #1
 8015a6c:	f43f aeae 	beq.w	80157cc <_printf_float+0x9c>
 8015a70:	f108 0801 	add.w	r8, r8, #1
 8015a74:	e7ec      	b.n	8015a50 <_printf_float+0x320>
 8015a76:	4613      	mov	r3, r2
 8015a78:	4631      	mov	r1, r6
 8015a7a:	4642      	mov	r2, r8
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	47b8      	blx	r7
 8015a80:	3001      	adds	r0, #1
 8015a82:	d1bf      	bne.n	8015a04 <_printf_float+0x2d4>
 8015a84:	e6a2      	b.n	80157cc <_printf_float+0x9c>
 8015a86:	2301      	movs	r3, #1
 8015a88:	4631      	mov	r1, r6
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	9204      	str	r2, [sp, #16]
 8015a8e:	47b8      	blx	r7
 8015a90:	3001      	adds	r0, #1
 8015a92:	f43f ae9b 	beq.w	80157cc <_printf_float+0x9c>
 8015a96:	9b05      	ldr	r3, [sp, #20]
 8015a98:	9a04      	ldr	r2, [sp, #16]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	9305      	str	r3, [sp, #20]
 8015a9e:	e7b7      	b.n	8015a10 <_printf_float+0x2e0>
 8015aa0:	4653      	mov	r3, sl
 8015aa2:	465a      	mov	r2, fp
 8015aa4:	4631      	mov	r1, r6
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	47b8      	blx	r7
 8015aaa:	3001      	adds	r0, #1
 8015aac:	d1be      	bne.n	8015a2c <_printf_float+0x2fc>
 8015aae:	e68d      	b.n	80157cc <_printf_float+0x9c>
 8015ab0:	9a04      	ldr	r2, [sp, #16]
 8015ab2:	464b      	mov	r3, r9
 8015ab4:	4442      	add	r2, r8
 8015ab6:	4631      	mov	r1, r6
 8015ab8:	4628      	mov	r0, r5
 8015aba:	47b8      	blx	r7
 8015abc:	3001      	adds	r0, #1
 8015abe:	d1c1      	bne.n	8015a44 <_printf_float+0x314>
 8015ac0:	e684      	b.n	80157cc <_printf_float+0x9c>
 8015ac2:	9a08      	ldr	r2, [sp, #32]
 8015ac4:	2a01      	cmp	r2, #1
 8015ac6:	dc01      	bgt.n	8015acc <_printf_float+0x39c>
 8015ac8:	07db      	lsls	r3, r3, #31
 8015aca:	d537      	bpl.n	8015b3c <_printf_float+0x40c>
 8015acc:	2301      	movs	r3, #1
 8015ace:	4642      	mov	r2, r8
 8015ad0:	4631      	mov	r1, r6
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	47b8      	blx	r7
 8015ad6:	3001      	adds	r0, #1
 8015ad8:	f43f ae78 	beq.w	80157cc <_printf_float+0x9c>
 8015adc:	4653      	mov	r3, sl
 8015ade:	465a      	mov	r2, fp
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	47b8      	blx	r7
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	f43f ae70 	beq.w	80157cc <_printf_float+0x9c>
 8015aec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015af0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af8:	d01b      	beq.n	8015b32 <_printf_float+0x402>
 8015afa:	9b08      	ldr	r3, [sp, #32]
 8015afc:	f108 0201 	add.w	r2, r8, #1
 8015b00:	3b01      	subs	r3, #1
 8015b02:	4631      	mov	r1, r6
 8015b04:	4628      	mov	r0, r5
 8015b06:	47b8      	blx	r7
 8015b08:	3001      	adds	r0, #1
 8015b0a:	d10e      	bne.n	8015b2a <_printf_float+0x3fa>
 8015b0c:	e65e      	b.n	80157cc <_printf_float+0x9c>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	464a      	mov	r2, r9
 8015b12:	4631      	mov	r1, r6
 8015b14:	4628      	mov	r0, r5
 8015b16:	47b8      	blx	r7
 8015b18:	3001      	adds	r0, #1
 8015b1a:	f43f ae57 	beq.w	80157cc <_printf_float+0x9c>
 8015b1e:	f108 0801 	add.w	r8, r8, #1
 8015b22:	9b08      	ldr	r3, [sp, #32]
 8015b24:	3b01      	subs	r3, #1
 8015b26:	4543      	cmp	r3, r8
 8015b28:	dcf1      	bgt.n	8015b0e <_printf_float+0x3de>
 8015b2a:	9b04      	ldr	r3, [sp, #16]
 8015b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b30:	e6db      	b.n	80158ea <_printf_float+0x1ba>
 8015b32:	f04f 0800 	mov.w	r8, #0
 8015b36:	f104 091a 	add.w	r9, r4, #26
 8015b3a:	e7f2      	b.n	8015b22 <_printf_float+0x3f2>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4642      	mov	r2, r8
 8015b40:	e7df      	b.n	8015b02 <_printf_float+0x3d2>
 8015b42:	2301      	movs	r3, #1
 8015b44:	464a      	mov	r2, r9
 8015b46:	4631      	mov	r1, r6
 8015b48:	4628      	mov	r0, r5
 8015b4a:	47b8      	blx	r7
 8015b4c:	3001      	adds	r0, #1
 8015b4e:	f43f ae3d 	beq.w	80157cc <_printf_float+0x9c>
 8015b52:	f108 0801 	add.w	r8, r8, #1
 8015b56:	68e3      	ldr	r3, [r4, #12]
 8015b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b5a:	1a5b      	subs	r3, r3, r1
 8015b5c:	4543      	cmp	r3, r8
 8015b5e:	dcf0      	bgt.n	8015b42 <_printf_float+0x412>
 8015b60:	e6f7      	b.n	8015952 <_printf_float+0x222>
 8015b62:	f04f 0800 	mov.w	r8, #0
 8015b66:	f104 0919 	add.w	r9, r4, #25
 8015b6a:	e7f4      	b.n	8015b56 <_printf_float+0x426>

08015b6c <_printf_common>:
 8015b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b70:	4616      	mov	r6, r2
 8015b72:	4699      	mov	r9, r3
 8015b74:	688a      	ldr	r2, [r1, #8]
 8015b76:	690b      	ldr	r3, [r1, #16]
 8015b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	bfb8      	it	lt
 8015b80:	4613      	movlt	r3, r2
 8015b82:	6033      	str	r3, [r6, #0]
 8015b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b88:	4607      	mov	r7, r0
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	b10a      	cbz	r2, 8015b92 <_printf_common+0x26>
 8015b8e:	3301      	adds	r3, #1
 8015b90:	6033      	str	r3, [r6, #0]
 8015b92:	6823      	ldr	r3, [r4, #0]
 8015b94:	0699      	lsls	r1, r3, #26
 8015b96:	bf42      	ittt	mi
 8015b98:	6833      	ldrmi	r3, [r6, #0]
 8015b9a:	3302      	addmi	r3, #2
 8015b9c:	6033      	strmi	r3, [r6, #0]
 8015b9e:	6825      	ldr	r5, [r4, #0]
 8015ba0:	f015 0506 	ands.w	r5, r5, #6
 8015ba4:	d106      	bne.n	8015bb4 <_printf_common+0x48>
 8015ba6:	f104 0a19 	add.w	sl, r4, #25
 8015baa:	68e3      	ldr	r3, [r4, #12]
 8015bac:	6832      	ldr	r2, [r6, #0]
 8015bae:	1a9b      	subs	r3, r3, r2
 8015bb0:	42ab      	cmp	r3, r5
 8015bb2:	dc26      	bgt.n	8015c02 <_printf_common+0x96>
 8015bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015bb8:	1e13      	subs	r3, r2, #0
 8015bba:	6822      	ldr	r2, [r4, #0]
 8015bbc:	bf18      	it	ne
 8015bbe:	2301      	movne	r3, #1
 8015bc0:	0692      	lsls	r2, r2, #26
 8015bc2:	d42b      	bmi.n	8015c1c <_printf_common+0xb0>
 8015bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015bc8:	4649      	mov	r1, r9
 8015bca:	4638      	mov	r0, r7
 8015bcc:	47c0      	blx	r8
 8015bce:	3001      	adds	r0, #1
 8015bd0:	d01e      	beq.n	8015c10 <_printf_common+0xa4>
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	68e5      	ldr	r5, [r4, #12]
 8015bd6:	6832      	ldr	r2, [r6, #0]
 8015bd8:	f003 0306 	and.w	r3, r3, #6
 8015bdc:	2b04      	cmp	r3, #4
 8015bde:	bf08      	it	eq
 8015be0:	1aad      	subeq	r5, r5, r2
 8015be2:	68a3      	ldr	r3, [r4, #8]
 8015be4:	6922      	ldr	r2, [r4, #16]
 8015be6:	bf0c      	ite	eq
 8015be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015bec:	2500      	movne	r5, #0
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	bfc4      	itt	gt
 8015bf2:	1a9b      	subgt	r3, r3, r2
 8015bf4:	18ed      	addgt	r5, r5, r3
 8015bf6:	2600      	movs	r6, #0
 8015bf8:	341a      	adds	r4, #26
 8015bfa:	42b5      	cmp	r5, r6
 8015bfc:	d11a      	bne.n	8015c34 <_printf_common+0xc8>
 8015bfe:	2000      	movs	r0, #0
 8015c00:	e008      	b.n	8015c14 <_printf_common+0xa8>
 8015c02:	2301      	movs	r3, #1
 8015c04:	4652      	mov	r2, sl
 8015c06:	4649      	mov	r1, r9
 8015c08:	4638      	mov	r0, r7
 8015c0a:	47c0      	blx	r8
 8015c0c:	3001      	adds	r0, #1
 8015c0e:	d103      	bne.n	8015c18 <_printf_common+0xac>
 8015c10:	f04f 30ff 	mov.w	r0, #4294967295
 8015c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c18:	3501      	adds	r5, #1
 8015c1a:	e7c6      	b.n	8015baa <_printf_common+0x3e>
 8015c1c:	18e1      	adds	r1, r4, r3
 8015c1e:	1c5a      	adds	r2, r3, #1
 8015c20:	2030      	movs	r0, #48	; 0x30
 8015c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c26:	4422      	add	r2, r4
 8015c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c30:	3302      	adds	r3, #2
 8015c32:	e7c7      	b.n	8015bc4 <_printf_common+0x58>
 8015c34:	2301      	movs	r3, #1
 8015c36:	4622      	mov	r2, r4
 8015c38:	4649      	mov	r1, r9
 8015c3a:	4638      	mov	r0, r7
 8015c3c:	47c0      	blx	r8
 8015c3e:	3001      	adds	r0, #1
 8015c40:	d0e6      	beq.n	8015c10 <_printf_common+0xa4>
 8015c42:	3601      	adds	r6, #1
 8015c44:	e7d9      	b.n	8015bfa <_printf_common+0x8e>
	...

08015c48 <_printf_i>:
 8015c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c4c:	7e0f      	ldrb	r7, [r1, #24]
 8015c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015c50:	2f78      	cmp	r7, #120	; 0x78
 8015c52:	4691      	mov	r9, r2
 8015c54:	4680      	mov	r8, r0
 8015c56:	460c      	mov	r4, r1
 8015c58:	469a      	mov	sl, r3
 8015c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015c5e:	d807      	bhi.n	8015c70 <_printf_i+0x28>
 8015c60:	2f62      	cmp	r7, #98	; 0x62
 8015c62:	d80a      	bhi.n	8015c7a <_printf_i+0x32>
 8015c64:	2f00      	cmp	r7, #0
 8015c66:	f000 80d8 	beq.w	8015e1a <_printf_i+0x1d2>
 8015c6a:	2f58      	cmp	r7, #88	; 0x58
 8015c6c:	f000 80a3 	beq.w	8015db6 <_printf_i+0x16e>
 8015c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c78:	e03a      	b.n	8015cf0 <_printf_i+0xa8>
 8015c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c7e:	2b15      	cmp	r3, #21
 8015c80:	d8f6      	bhi.n	8015c70 <_printf_i+0x28>
 8015c82:	a101      	add	r1, pc, #4	; (adr r1, 8015c88 <_printf_i+0x40>)
 8015c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c88:	08015ce1 	.word	0x08015ce1
 8015c8c:	08015cf5 	.word	0x08015cf5
 8015c90:	08015c71 	.word	0x08015c71
 8015c94:	08015c71 	.word	0x08015c71
 8015c98:	08015c71 	.word	0x08015c71
 8015c9c:	08015c71 	.word	0x08015c71
 8015ca0:	08015cf5 	.word	0x08015cf5
 8015ca4:	08015c71 	.word	0x08015c71
 8015ca8:	08015c71 	.word	0x08015c71
 8015cac:	08015c71 	.word	0x08015c71
 8015cb0:	08015c71 	.word	0x08015c71
 8015cb4:	08015e01 	.word	0x08015e01
 8015cb8:	08015d25 	.word	0x08015d25
 8015cbc:	08015de3 	.word	0x08015de3
 8015cc0:	08015c71 	.word	0x08015c71
 8015cc4:	08015c71 	.word	0x08015c71
 8015cc8:	08015e23 	.word	0x08015e23
 8015ccc:	08015c71 	.word	0x08015c71
 8015cd0:	08015d25 	.word	0x08015d25
 8015cd4:	08015c71 	.word	0x08015c71
 8015cd8:	08015c71 	.word	0x08015c71
 8015cdc:	08015deb 	.word	0x08015deb
 8015ce0:	682b      	ldr	r3, [r5, #0]
 8015ce2:	1d1a      	adds	r2, r3, #4
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	602a      	str	r2, [r5, #0]
 8015ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	e0a3      	b.n	8015e3c <_printf_i+0x1f4>
 8015cf4:	6820      	ldr	r0, [r4, #0]
 8015cf6:	6829      	ldr	r1, [r5, #0]
 8015cf8:	0606      	lsls	r6, r0, #24
 8015cfa:	f101 0304 	add.w	r3, r1, #4
 8015cfe:	d50a      	bpl.n	8015d16 <_printf_i+0xce>
 8015d00:	680e      	ldr	r6, [r1, #0]
 8015d02:	602b      	str	r3, [r5, #0]
 8015d04:	2e00      	cmp	r6, #0
 8015d06:	da03      	bge.n	8015d10 <_printf_i+0xc8>
 8015d08:	232d      	movs	r3, #45	; 0x2d
 8015d0a:	4276      	negs	r6, r6
 8015d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d10:	485e      	ldr	r0, [pc, #376]	; (8015e8c <_printf_i+0x244>)
 8015d12:	230a      	movs	r3, #10
 8015d14:	e019      	b.n	8015d4a <_printf_i+0x102>
 8015d16:	680e      	ldr	r6, [r1, #0]
 8015d18:	602b      	str	r3, [r5, #0]
 8015d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d1e:	bf18      	it	ne
 8015d20:	b236      	sxthne	r6, r6
 8015d22:	e7ef      	b.n	8015d04 <_printf_i+0xbc>
 8015d24:	682b      	ldr	r3, [r5, #0]
 8015d26:	6820      	ldr	r0, [r4, #0]
 8015d28:	1d19      	adds	r1, r3, #4
 8015d2a:	6029      	str	r1, [r5, #0]
 8015d2c:	0601      	lsls	r1, r0, #24
 8015d2e:	d501      	bpl.n	8015d34 <_printf_i+0xec>
 8015d30:	681e      	ldr	r6, [r3, #0]
 8015d32:	e002      	b.n	8015d3a <_printf_i+0xf2>
 8015d34:	0646      	lsls	r6, r0, #25
 8015d36:	d5fb      	bpl.n	8015d30 <_printf_i+0xe8>
 8015d38:	881e      	ldrh	r6, [r3, #0]
 8015d3a:	4854      	ldr	r0, [pc, #336]	; (8015e8c <_printf_i+0x244>)
 8015d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8015d3e:	bf0c      	ite	eq
 8015d40:	2308      	moveq	r3, #8
 8015d42:	230a      	movne	r3, #10
 8015d44:	2100      	movs	r1, #0
 8015d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d4a:	6865      	ldr	r5, [r4, #4]
 8015d4c:	60a5      	str	r5, [r4, #8]
 8015d4e:	2d00      	cmp	r5, #0
 8015d50:	bfa2      	ittt	ge
 8015d52:	6821      	ldrge	r1, [r4, #0]
 8015d54:	f021 0104 	bicge.w	r1, r1, #4
 8015d58:	6021      	strge	r1, [r4, #0]
 8015d5a:	b90e      	cbnz	r6, 8015d60 <_printf_i+0x118>
 8015d5c:	2d00      	cmp	r5, #0
 8015d5e:	d04d      	beq.n	8015dfc <_printf_i+0x1b4>
 8015d60:	4615      	mov	r5, r2
 8015d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8015d66:	fb03 6711 	mls	r7, r3, r1, r6
 8015d6a:	5dc7      	ldrb	r7, [r0, r7]
 8015d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015d70:	4637      	mov	r7, r6
 8015d72:	42bb      	cmp	r3, r7
 8015d74:	460e      	mov	r6, r1
 8015d76:	d9f4      	bls.n	8015d62 <_printf_i+0x11a>
 8015d78:	2b08      	cmp	r3, #8
 8015d7a:	d10b      	bne.n	8015d94 <_printf_i+0x14c>
 8015d7c:	6823      	ldr	r3, [r4, #0]
 8015d7e:	07de      	lsls	r6, r3, #31
 8015d80:	d508      	bpl.n	8015d94 <_printf_i+0x14c>
 8015d82:	6923      	ldr	r3, [r4, #16]
 8015d84:	6861      	ldr	r1, [r4, #4]
 8015d86:	4299      	cmp	r1, r3
 8015d88:	bfde      	ittt	le
 8015d8a:	2330      	movle	r3, #48	; 0x30
 8015d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015d94:	1b52      	subs	r2, r2, r5
 8015d96:	6122      	str	r2, [r4, #16]
 8015d98:	f8cd a000 	str.w	sl, [sp]
 8015d9c:	464b      	mov	r3, r9
 8015d9e:	aa03      	add	r2, sp, #12
 8015da0:	4621      	mov	r1, r4
 8015da2:	4640      	mov	r0, r8
 8015da4:	f7ff fee2 	bl	8015b6c <_printf_common>
 8015da8:	3001      	adds	r0, #1
 8015daa:	d14c      	bne.n	8015e46 <_printf_i+0x1fe>
 8015dac:	f04f 30ff 	mov.w	r0, #4294967295
 8015db0:	b004      	add	sp, #16
 8015db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db6:	4835      	ldr	r0, [pc, #212]	; (8015e8c <_printf_i+0x244>)
 8015db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015dbc:	6829      	ldr	r1, [r5, #0]
 8015dbe:	6823      	ldr	r3, [r4, #0]
 8015dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8015dc4:	6029      	str	r1, [r5, #0]
 8015dc6:	061d      	lsls	r5, r3, #24
 8015dc8:	d514      	bpl.n	8015df4 <_printf_i+0x1ac>
 8015dca:	07df      	lsls	r7, r3, #31
 8015dcc:	bf44      	itt	mi
 8015dce:	f043 0320 	orrmi.w	r3, r3, #32
 8015dd2:	6023      	strmi	r3, [r4, #0]
 8015dd4:	b91e      	cbnz	r6, 8015dde <_printf_i+0x196>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	f023 0320 	bic.w	r3, r3, #32
 8015ddc:	6023      	str	r3, [r4, #0]
 8015dde:	2310      	movs	r3, #16
 8015de0:	e7b0      	b.n	8015d44 <_printf_i+0xfc>
 8015de2:	6823      	ldr	r3, [r4, #0]
 8015de4:	f043 0320 	orr.w	r3, r3, #32
 8015de8:	6023      	str	r3, [r4, #0]
 8015dea:	2378      	movs	r3, #120	; 0x78
 8015dec:	4828      	ldr	r0, [pc, #160]	; (8015e90 <_printf_i+0x248>)
 8015dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015df2:	e7e3      	b.n	8015dbc <_printf_i+0x174>
 8015df4:	0659      	lsls	r1, r3, #25
 8015df6:	bf48      	it	mi
 8015df8:	b2b6      	uxthmi	r6, r6
 8015dfa:	e7e6      	b.n	8015dca <_printf_i+0x182>
 8015dfc:	4615      	mov	r5, r2
 8015dfe:	e7bb      	b.n	8015d78 <_printf_i+0x130>
 8015e00:	682b      	ldr	r3, [r5, #0]
 8015e02:	6826      	ldr	r6, [r4, #0]
 8015e04:	6961      	ldr	r1, [r4, #20]
 8015e06:	1d18      	adds	r0, r3, #4
 8015e08:	6028      	str	r0, [r5, #0]
 8015e0a:	0635      	lsls	r5, r6, #24
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	d501      	bpl.n	8015e14 <_printf_i+0x1cc>
 8015e10:	6019      	str	r1, [r3, #0]
 8015e12:	e002      	b.n	8015e1a <_printf_i+0x1d2>
 8015e14:	0670      	lsls	r0, r6, #25
 8015e16:	d5fb      	bpl.n	8015e10 <_printf_i+0x1c8>
 8015e18:	8019      	strh	r1, [r3, #0]
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	6123      	str	r3, [r4, #16]
 8015e1e:	4615      	mov	r5, r2
 8015e20:	e7ba      	b.n	8015d98 <_printf_i+0x150>
 8015e22:	682b      	ldr	r3, [r5, #0]
 8015e24:	1d1a      	adds	r2, r3, #4
 8015e26:	602a      	str	r2, [r5, #0]
 8015e28:	681d      	ldr	r5, [r3, #0]
 8015e2a:	6862      	ldr	r2, [r4, #4]
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f7ea fa76 	bl	8000320 <memchr>
 8015e34:	b108      	cbz	r0, 8015e3a <_printf_i+0x1f2>
 8015e36:	1b40      	subs	r0, r0, r5
 8015e38:	6060      	str	r0, [r4, #4]
 8015e3a:	6863      	ldr	r3, [r4, #4]
 8015e3c:	6123      	str	r3, [r4, #16]
 8015e3e:	2300      	movs	r3, #0
 8015e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e44:	e7a8      	b.n	8015d98 <_printf_i+0x150>
 8015e46:	6923      	ldr	r3, [r4, #16]
 8015e48:	462a      	mov	r2, r5
 8015e4a:	4649      	mov	r1, r9
 8015e4c:	4640      	mov	r0, r8
 8015e4e:	47d0      	blx	sl
 8015e50:	3001      	adds	r0, #1
 8015e52:	d0ab      	beq.n	8015dac <_printf_i+0x164>
 8015e54:	6823      	ldr	r3, [r4, #0]
 8015e56:	079b      	lsls	r3, r3, #30
 8015e58:	d413      	bmi.n	8015e82 <_printf_i+0x23a>
 8015e5a:	68e0      	ldr	r0, [r4, #12]
 8015e5c:	9b03      	ldr	r3, [sp, #12]
 8015e5e:	4298      	cmp	r0, r3
 8015e60:	bfb8      	it	lt
 8015e62:	4618      	movlt	r0, r3
 8015e64:	e7a4      	b.n	8015db0 <_printf_i+0x168>
 8015e66:	2301      	movs	r3, #1
 8015e68:	4632      	mov	r2, r6
 8015e6a:	4649      	mov	r1, r9
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	47d0      	blx	sl
 8015e70:	3001      	adds	r0, #1
 8015e72:	d09b      	beq.n	8015dac <_printf_i+0x164>
 8015e74:	3501      	adds	r5, #1
 8015e76:	68e3      	ldr	r3, [r4, #12]
 8015e78:	9903      	ldr	r1, [sp, #12]
 8015e7a:	1a5b      	subs	r3, r3, r1
 8015e7c:	42ab      	cmp	r3, r5
 8015e7e:	dcf2      	bgt.n	8015e66 <_printf_i+0x21e>
 8015e80:	e7eb      	b.n	8015e5a <_printf_i+0x212>
 8015e82:	2500      	movs	r5, #0
 8015e84:	f104 0619 	add.w	r6, r4, #25
 8015e88:	e7f5      	b.n	8015e76 <_printf_i+0x22e>
 8015e8a:	bf00      	nop
 8015e8c:	0801a3f2 	.word	0x0801a3f2
 8015e90:	0801a403 	.word	0x0801a403

08015e94 <_scanf_float>:
 8015e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e98:	b087      	sub	sp, #28
 8015e9a:	4617      	mov	r7, r2
 8015e9c:	9303      	str	r3, [sp, #12]
 8015e9e:	688b      	ldr	r3, [r1, #8]
 8015ea0:	1e5a      	subs	r2, r3, #1
 8015ea2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ea6:	bf83      	ittte	hi
 8015ea8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015eac:	195b      	addhi	r3, r3, r5
 8015eae:	9302      	strhi	r3, [sp, #8]
 8015eb0:	2300      	movls	r3, #0
 8015eb2:	bf86      	itte	hi
 8015eb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015eb8:	608b      	strhi	r3, [r1, #8]
 8015eba:	9302      	strls	r3, [sp, #8]
 8015ebc:	680b      	ldr	r3, [r1, #0]
 8015ebe:	468b      	mov	fp, r1
 8015ec0:	2500      	movs	r5, #0
 8015ec2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015ec6:	f84b 3b1c 	str.w	r3, [fp], #28
 8015eca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015ece:	4680      	mov	r8, r0
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	465e      	mov	r6, fp
 8015ed4:	46aa      	mov	sl, r5
 8015ed6:	46a9      	mov	r9, r5
 8015ed8:	9501      	str	r5, [sp, #4]
 8015eda:	68a2      	ldr	r2, [r4, #8]
 8015edc:	b152      	cbz	r2, 8015ef4 <_scanf_float+0x60>
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	2b4e      	cmp	r3, #78	; 0x4e
 8015ee4:	d864      	bhi.n	8015fb0 <_scanf_float+0x11c>
 8015ee6:	2b40      	cmp	r3, #64	; 0x40
 8015ee8:	d83c      	bhi.n	8015f64 <_scanf_float+0xd0>
 8015eea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015eee:	b2c8      	uxtb	r0, r1
 8015ef0:	280e      	cmp	r0, #14
 8015ef2:	d93a      	bls.n	8015f6a <_scanf_float+0xd6>
 8015ef4:	f1b9 0f00 	cmp.w	r9, #0
 8015ef8:	d003      	beq.n	8015f02 <_scanf_float+0x6e>
 8015efa:	6823      	ldr	r3, [r4, #0]
 8015efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f00:	6023      	str	r3, [r4, #0]
 8015f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f06:	f1ba 0f01 	cmp.w	sl, #1
 8015f0a:	f200 8113 	bhi.w	8016134 <_scanf_float+0x2a0>
 8015f0e:	455e      	cmp	r6, fp
 8015f10:	f200 8105 	bhi.w	801611e <_scanf_float+0x28a>
 8015f14:	2501      	movs	r5, #1
 8015f16:	4628      	mov	r0, r5
 8015f18:	b007      	add	sp, #28
 8015f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015f22:	2a0d      	cmp	r2, #13
 8015f24:	d8e6      	bhi.n	8015ef4 <_scanf_float+0x60>
 8015f26:	a101      	add	r1, pc, #4	; (adr r1, 8015f2c <_scanf_float+0x98>)
 8015f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015f2c:	0801606b 	.word	0x0801606b
 8015f30:	08015ef5 	.word	0x08015ef5
 8015f34:	08015ef5 	.word	0x08015ef5
 8015f38:	08015ef5 	.word	0x08015ef5
 8015f3c:	080160cb 	.word	0x080160cb
 8015f40:	080160a3 	.word	0x080160a3
 8015f44:	08015ef5 	.word	0x08015ef5
 8015f48:	08015ef5 	.word	0x08015ef5
 8015f4c:	08016079 	.word	0x08016079
 8015f50:	08015ef5 	.word	0x08015ef5
 8015f54:	08015ef5 	.word	0x08015ef5
 8015f58:	08015ef5 	.word	0x08015ef5
 8015f5c:	08015ef5 	.word	0x08015ef5
 8015f60:	08016031 	.word	0x08016031
 8015f64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015f68:	e7db      	b.n	8015f22 <_scanf_float+0x8e>
 8015f6a:	290e      	cmp	r1, #14
 8015f6c:	d8c2      	bhi.n	8015ef4 <_scanf_float+0x60>
 8015f6e:	a001      	add	r0, pc, #4	; (adr r0, 8015f74 <_scanf_float+0xe0>)
 8015f70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015f74:	08016023 	.word	0x08016023
 8015f78:	08015ef5 	.word	0x08015ef5
 8015f7c:	08016023 	.word	0x08016023
 8015f80:	080160b7 	.word	0x080160b7
 8015f84:	08015ef5 	.word	0x08015ef5
 8015f88:	08015fd1 	.word	0x08015fd1
 8015f8c:	0801600d 	.word	0x0801600d
 8015f90:	0801600d 	.word	0x0801600d
 8015f94:	0801600d 	.word	0x0801600d
 8015f98:	0801600d 	.word	0x0801600d
 8015f9c:	0801600d 	.word	0x0801600d
 8015fa0:	0801600d 	.word	0x0801600d
 8015fa4:	0801600d 	.word	0x0801600d
 8015fa8:	0801600d 	.word	0x0801600d
 8015fac:	0801600d 	.word	0x0801600d
 8015fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8015fb2:	d809      	bhi.n	8015fc8 <_scanf_float+0x134>
 8015fb4:	2b60      	cmp	r3, #96	; 0x60
 8015fb6:	d8b2      	bhi.n	8015f1e <_scanf_float+0x8a>
 8015fb8:	2b54      	cmp	r3, #84	; 0x54
 8015fba:	d077      	beq.n	80160ac <_scanf_float+0x218>
 8015fbc:	2b59      	cmp	r3, #89	; 0x59
 8015fbe:	d199      	bne.n	8015ef4 <_scanf_float+0x60>
 8015fc0:	2d07      	cmp	r5, #7
 8015fc2:	d197      	bne.n	8015ef4 <_scanf_float+0x60>
 8015fc4:	2508      	movs	r5, #8
 8015fc6:	e029      	b.n	801601c <_scanf_float+0x188>
 8015fc8:	2b74      	cmp	r3, #116	; 0x74
 8015fca:	d06f      	beq.n	80160ac <_scanf_float+0x218>
 8015fcc:	2b79      	cmp	r3, #121	; 0x79
 8015fce:	e7f6      	b.n	8015fbe <_scanf_float+0x12a>
 8015fd0:	6821      	ldr	r1, [r4, #0]
 8015fd2:	05c8      	lsls	r0, r1, #23
 8015fd4:	d51a      	bpl.n	801600c <_scanf_float+0x178>
 8015fd6:	9b02      	ldr	r3, [sp, #8]
 8015fd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015fdc:	6021      	str	r1, [r4, #0]
 8015fde:	f109 0901 	add.w	r9, r9, #1
 8015fe2:	b11b      	cbz	r3, 8015fec <_scanf_float+0x158>
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	3201      	adds	r2, #1
 8015fe8:	9302      	str	r3, [sp, #8]
 8015fea:	60a2      	str	r2, [r4, #8]
 8015fec:	68a3      	ldr	r3, [r4, #8]
 8015fee:	3b01      	subs	r3, #1
 8015ff0:	60a3      	str	r3, [r4, #8]
 8015ff2:	6923      	ldr	r3, [r4, #16]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	6123      	str	r3, [r4, #16]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	3b01      	subs	r3, #1
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	607b      	str	r3, [r7, #4]
 8016000:	f340 8084 	ble.w	801610c <_scanf_float+0x278>
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	3301      	adds	r3, #1
 8016008:	603b      	str	r3, [r7, #0]
 801600a:	e766      	b.n	8015eda <_scanf_float+0x46>
 801600c:	eb1a 0f05 	cmn.w	sl, r5
 8016010:	f47f af70 	bne.w	8015ef4 <_scanf_float+0x60>
 8016014:	6822      	ldr	r2, [r4, #0]
 8016016:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801601a:	6022      	str	r2, [r4, #0]
 801601c:	f806 3b01 	strb.w	r3, [r6], #1
 8016020:	e7e4      	b.n	8015fec <_scanf_float+0x158>
 8016022:	6822      	ldr	r2, [r4, #0]
 8016024:	0610      	lsls	r0, r2, #24
 8016026:	f57f af65 	bpl.w	8015ef4 <_scanf_float+0x60>
 801602a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801602e:	e7f4      	b.n	801601a <_scanf_float+0x186>
 8016030:	f1ba 0f00 	cmp.w	sl, #0
 8016034:	d10e      	bne.n	8016054 <_scanf_float+0x1c0>
 8016036:	f1b9 0f00 	cmp.w	r9, #0
 801603a:	d10e      	bne.n	801605a <_scanf_float+0x1c6>
 801603c:	6822      	ldr	r2, [r4, #0]
 801603e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016042:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016046:	d108      	bne.n	801605a <_scanf_float+0x1c6>
 8016048:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801604c:	6022      	str	r2, [r4, #0]
 801604e:	f04f 0a01 	mov.w	sl, #1
 8016052:	e7e3      	b.n	801601c <_scanf_float+0x188>
 8016054:	f1ba 0f02 	cmp.w	sl, #2
 8016058:	d055      	beq.n	8016106 <_scanf_float+0x272>
 801605a:	2d01      	cmp	r5, #1
 801605c:	d002      	beq.n	8016064 <_scanf_float+0x1d0>
 801605e:	2d04      	cmp	r5, #4
 8016060:	f47f af48 	bne.w	8015ef4 <_scanf_float+0x60>
 8016064:	3501      	adds	r5, #1
 8016066:	b2ed      	uxtb	r5, r5
 8016068:	e7d8      	b.n	801601c <_scanf_float+0x188>
 801606a:	f1ba 0f01 	cmp.w	sl, #1
 801606e:	f47f af41 	bne.w	8015ef4 <_scanf_float+0x60>
 8016072:	f04f 0a02 	mov.w	sl, #2
 8016076:	e7d1      	b.n	801601c <_scanf_float+0x188>
 8016078:	b97d      	cbnz	r5, 801609a <_scanf_float+0x206>
 801607a:	f1b9 0f00 	cmp.w	r9, #0
 801607e:	f47f af3c 	bne.w	8015efa <_scanf_float+0x66>
 8016082:	6822      	ldr	r2, [r4, #0]
 8016084:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016088:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801608c:	f47f af39 	bne.w	8015f02 <_scanf_float+0x6e>
 8016090:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016094:	6022      	str	r2, [r4, #0]
 8016096:	2501      	movs	r5, #1
 8016098:	e7c0      	b.n	801601c <_scanf_float+0x188>
 801609a:	2d03      	cmp	r5, #3
 801609c:	d0e2      	beq.n	8016064 <_scanf_float+0x1d0>
 801609e:	2d05      	cmp	r5, #5
 80160a0:	e7de      	b.n	8016060 <_scanf_float+0x1cc>
 80160a2:	2d02      	cmp	r5, #2
 80160a4:	f47f af26 	bne.w	8015ef4 <_scanf_float+0x60>
 80160a8:	2503      	movs	r5, #3
 80160aa:	e7b7      	b.n	801601c <_scanf_float+0x188>
 80160ac:	2d06      	cmp	r5, #6
 80160ae:	f47f af21 	bne.w	8015ef4 <_scanf_float+0x60>
 80160b2:	2507      	movs	r5, #7
 80160b4:	e7b2      	b.n	801601c <_scanf_float+0x188>
 80160b6:	6822      	ldr	r2, [r4, #0]
 80160b8:	0591      	lsls	r1, r2, #22
 80160ba:	f57f af1b 	bpl.w	8015ef4 <_scanf_float+0x60>
 80160be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80160c2:	6022      	str	r2, [r4, #0]
 80160c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80160c8:	e7a8      	b.n	801601c <_scanf_float+0x188>
 80160ca:	6822      	ldr	r2, [r4, #0]
 80160cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80160d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80160d4:	d006      	beq.n	80160e4 <_scanf_float+0x250>
 80160d6:	0550      	lsls	r0, r2, #21
 80160d8:	f57f af0c 	bpl.w	8015ef4 <_scanf_float+0x60>
 80160dc:	f1b9 0f00 	cmp.w	r9, #0
 80160e0:	f43f af0f 	beq.w	8015f02 <_scanf_float+0x6e>
 80160e4:	0591      	lsls	r1, r2, #22
 80160e6:	bf58      	it	pl
 80160e8:	9901      	ldrpl	r1, [sp, #4]
 80160ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160ee:	bf58      	it	pl
 80160f0:	eba9 0101 	subpl.w	r1, r9, r1
 80160f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80160f8:	bf58      	it	pl
 80160fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80160fe:	6022      	str	r2, [r4, #0]
 8016100:	f04f 0900 	mov.w	r9, #0
 8016104:	e78a      	b.n	801601c <_scanf_float+0x188>
 8016106:	f04f 0a03 	mov.w	sl, #3
 801610a:	e787      	b.n	801601c <_scanf_float+0x188>
 801610c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016110:	4639      	mov	r1, r7
 8016112:	4640      	mov	r0, r8
 8016114:	4798      	blx	r3
 8016116:	2800      	cmp	r0, #0
 8016118:	f43f aedf 	beq.w	8015eda <_scanf_float+0x46>
 801611c:	e6ea      	b.n	8015ef4 <_scanf_float+0x60>
 801611e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016126:	463a      	mov	r2, r7
 8016128:	4640      	mov	r0, r8
 801612a:	4798      	blx	r3
 801612c:	6923      	ldr	r3, [r4, #16]
 801612e:	3b01      	subs	r3, #1
 8016130:	6123      	str	r3, [r4, #16]
 8016132:	e6ec      	b.n	8015f0e <_scanf_float+0x7a>
 8016134:	1e6b      	subs	r3, r5, #1
 8016136:	2b06      	cmp	r3, #6
 8016138:	d825      	bhi.n	8016186 <_scanf_float+0x2f2>
 801613a:	2d02      	cmp	r5, #2
 801613c:	d836      	bhi.n	80161ac <_scanf_float+0x318>
 801613e:	455e      	cmp	r6, fp
 8016140:	f67f aee8 	bls.w	8015f14 <_scanf_float+0x80>
 8016144:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016148:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801614c:	463a      	mov	r2, r7
 801614e:	4640      	mov	r0, r8
 8016150:	4798      	blx	r3
 8016152:	6923      	ldr	r3, [r4, #16]
 8016154:	3b01      	subs	r3, #1
 8016156:	6123      	str	r3, [r4, #16]
 8016158:	e7f1      	b.n	801613e <_scanf_float+0x2aa>
 801615a:	9802      	ldr	r0, [sp, #8]
 801615c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016160:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016164:	9002      	str	r0, [sp, #8]
 8016166:	463a      	mov	r2, r7
 8016168:	4640      	mov	r0, r8
 801616a:	4798      	blx	r3
 801616c:	6923      	ldr	r3, [r4, #16]
 801616e:	3b01      	subs	r3, #1
 8016170:	6123      	str	r3, [r4, #16]
 8016172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016176:	fa5f fa8a 	uxtb.w	sl, sl
 801617a:	f1ba 0f02 	cmp.w	sl, #2
 801617e:	d1ec      	bne.n	801615a <_scanf_float+0x2c6>
 8016180:	3d03      	subs	r5, #3
 8016182:	b2ed      	uxtb	r5, r5
 8016184:	1b76      	subs	r6, r6, r5
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	05da      	lsls	r2, r3, #23
 801618a:	d52f      	bpl.n	80161ec <_scanf_float+0x358>
 801618c:	055b      	lsls	r3, r3, #21
 801618e:	d510      	bpl.n	80161b2 <_scanf_float+0x31e>
 8016190:	455e      	cmp	r6, fp
 8016192:	f67f aebf 	bls.w	8015f14 <_scanf_float+0x80>
 8016196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801619a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801619e:	463a      	mov	r2, r7
 80161a0:	4640      	mov	r0, r8
 80161a2:	4798      	blx	r3
 80161a4:	6923      	ldr	r3, [r4, #16]
 80161a6:	3b01      	subs	r3, #1
 80161a8:	6123      	str	r3, [r4, #16]
 80161aa:	e7f1      	b.n	8016190 <_scanf_float+0x2fc>
 80161ac:	46aa      	mov	sl, r5
 80161ae:	9602      	str	r6, [sp, #8]
 80161b0:	e7df      	b.n	8016172 <_scanf_float+0x2de>
 80161b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80161b6:	6923      	ldr	r3, [r4, #16]
 80161b8:	2965      	cmp	r1, #101	; 0x65
 80161ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80161be:	f106 35ff 	add.w	r5, r6, #4294967295
 80161c2:	6123      	str	r3, [r4, #16]
 80161c4:	d00c      	beq.n	80161e0 <_scanf_float+0x34c>
 80161c6:	2945      	cmp	r1, #69	; 0x45
 80161c8:	d00a      	beq.n	80161e0 <_scanf_float+0x34c>
 80161ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ce:	463a      	mov	r2, r7
 80161d0:	4640      	mov	r0, r8
 80161d2:	4798      	blx	r3
 80161d4:	6923      	ldr	r3, [r4, #16]
 80161d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80161da:	3b01      	subs	r3, #1
 80161dc:	1eb5      	subs	r5, r6, #2
 80161de:	6123      	str	r3, [r4, #16]
 80161e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161e4:	463a      	mov	r2, r7
 80161e6:	4640      	mov	r0, r8
 80161e8:	4798      	blx	r3
 80161ea:	462e      	mov	r6, r5
 80161ec:	6825      	ldr	r5, [r4, #0]
 80161ee:	f015 0510 	ands.w	r5, r5, #16
 80161f2:	d14e      	bne.n	8016292 <_scanf_float+0x3fe>
 80161f4:	7035      	strb	r5, [r6, #0]
 80161f6:	6823      	ldr	r3, [r4, #0]
 80161f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80161fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016200:	d119      	bne.n	8016236 <_scanf_float+0x3a2>
 8016202:	9b01      	ldr	r3, [sp, #4]
 8016204:	454b      	cmp	r3, r9
 8016206:	eba3 0209 	sub.w	r2, r3, r9
 801620a:	d121      	bne.n	8016250 <_scanf_float+0x3bc>
 801620c:	2200      	movs	r2, #0
 801620e:	4659      	mov	r1, fp
 8016210:	4640      	mov	r0, r8
 8016212:	f000 fe7f 	bl	8016f14 <_strtod_r>
 8016216:	6822      	ldr	r2, [r4, #0]
 8016218:	9b03      	ldr	r3, [sp, #12]
 801621a:	f012 0f02 	tst.w	r2, #2
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	d021      	beq.n	8016266 <_scanf_float+0x3d2>
 8016222:	9903      	ldr	r1, [sp, #12]
 8016224:	1d1a      	adds	r2, r3, #4
 8016226:	600a      	str	r2, [r1, #0]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	ed83 0b00 	vstr	d0, [r3]
 801622e:	68e3      	ldr	r3, [r4, #12]
 8016230:	3301      	adds	r3, #1
 8016232:	60e3      	str	r3, [r4, #12]
 8016234:	e66f      	b.n	8015f16 <_scanf_float+0x82>
 8016236:	9b04      	ldr	r3, [sp, #16]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d0e7      	beq.n	801620c <_scanf_float+0x378>
 801623c:	9905      	ldr	r1, [sp, #20]
 801623e:	230a      	movs	r3, #10
 8016240:	462a      	mov	r2, r5
 8016242:	3101      	adds	r1, #1
 8016244:	4640      	mov	r0, r8
 8016246:	f000 feed 	bl	8017024 <_strtol_r>
 801624a:	9b04      	ldr	r3, [sp, #16]
 801624c:	9e05      	ldr	r6, [sp, #20]
 801624e:	1ac2      	subs	r2, r0, r3
 8016250:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016254:	429e      	cmp	r6, r3
 8016256:	bf28      	it	cs
 8016258:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801625c:	490e      	ldr	r1, [pc, #56]	; (8016298 <_scanf_float+0x404>)
 801625e:	4630      	mov	r0, r6
 8016260:	f000 f824 	bl	80162ac <siprintf>
 8016264:	e7d2      	b.n	801620c <_scanf_float+0x378>
 8016266:	9903      	ldr	r1, [sp, #12]
 8016268:	f012 0f04 	tst.w	r2, #4
 801626c:	f103 0204 	add.w	r2, r3, #4
 8016270:	600a      	str	r2, [r1, #0]
 8016272:	d1d9      	bne.n	8016228 <_scanf_float+0x394>
 8016274:	eeb4 0b40 	vcmp.f64	d0, d0
 8016278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627c:	681e      	ldr	r6, [r3, #0]
 801627e:	d705      	bvc.n	801628c <_scanf_float+0x3f8>
 8016280:	4806      	ldr	r0, [pc, #24]	; (801629c <_scanf_float+0x408>)
 8016282:	f000 f80d 	bl	80162a0 <nanf>
 8016286:	ed86 0a00 	vstr	s0, [r6]
 801628a:	e7d0      	b.n	801622e <_scanf_float+0x39a>
 801628c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016290:	e7f9      	b.n	8016286 <_scanf_float+0x3f2>
 8016292:	2500      	movs	r5, #0
 8016294:	e63f      	b.n	8015f16 <_scanf_float+0x82>
 8016296:	bf00      	nop
 8016298:	0801a414 	.word	0x0801a414
 801629c:	0801a820 	.word	0x0801a820

080162a0 <nanf>:
 80162a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80162a8 <nanf+0x8>
 80162a4:	4770      	bx	lr
 80162a6:	bf00      	nop
 80162a8:	7fc00000 	.word	0x7fc00000

080162ac <siprintf>:
 80162ac:	b40e      	push	{r1, r2, r3}
 80162ae:	b500      	push	{lr}
 80162b0:	b09c      	sub	sp, #112	; 0x70
 80162b2:	ab1d      	add	r3, sp, #116	; 0x74
 80162b4:	9002      	str	r0, [sp, #8]
 80162b6:	9006      	str	r0, [sp, #24]
 80162b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80162bc:	4809      	ldr	r0, [pc, #36]	; (80162e4 <siprintf+0x38>)
 80162be:	9107      	str	r1, [sp, #28]
 80162c0:	9104      	str	r1, [sp, #16]
 80162c2:	4909      	ldr	r1, [pc, #36]	; (80162e8 <siprintf+0x3c>)
 80162c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80162c8:	9105      	str	r1, [sp, #20]
 80162ca:	6800      	ldr	r0, [r0, #0]
 80162cc:	9301      	str	r3, [sp, #4]
 80162ce:	a902      	add	r1, sp, #8
 80162d0:	f002 fe78 	bl	8018fc4 <_svfiprintf_r>
 80162d4:	9b02      	ldr	r3, [sp, #8]
 80162d6:	2200      	movs	r2, #0
 80162d8:	701a      	strb	r2, [r3, #0]
 80162da:	b01c      	add	sp, #112	; 0x70
 80162dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80162e0:	b003      	add	sp, #12
 80162e2:	4770      	bx	lr
 80162e4:	24000100 	.word	0x24000100
 80162e8:	ffff0208 	.word	0xffff0208

080162ec <__sread>:
 80162ec:	b510      	push	{r4, lr}
 80162ee:	460c      	mov	r4, r1
 80162f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162f4:	f002 ff66 	bl	80191c4 <_read_r>
 80162f8:	2800      	cmp	r0, #0
 80162fa:	bfab      	itete	ge
 80162fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162fe:	89a3      	ldrhlt	r3, [r4, #12]
 8016300:	181b      	addge	r3, r3, r0
 8016302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016306:	bfac      	ite	ge
 8016308:	6563      	strge	r3, [r4, #84]	; 0x54
 801630a:	81a3      	strhlt	r3, [r4, #12]
 801630c:	bd10      	pop	{r4, pc}

0801630e <__swrite>:
 801630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016312:	461f      	mov	r7, r3
 8016314:	898b      	ldrh	r3, [r1, #12]
 8016316:	05db      	lsls	r3, r3, #23
 8016318:	4605      	mov	r5, r0
 801631a:	460c      	mov	r4, r1
 801631c:	4616      	mov	r6, r2
 801631e:	d505      	bpl.n	801632c <__swrite+0x1e>
 8016320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016324:	2302      	movs	r3, #2
 8016326:	2200      	movs	r2, #0
 8016328:	f002 f810 	bl	801834c <_lseek_r>
 801632c:	89a3      	ldrh	r3, [r4, #12]
 801632e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016336:	81a3      	strh	r3, [r4, #12]
 8016338:	4632      	mov	r2, r6
 801633a:	463b      	mov	r3, r7
 801633c:	4628      	mov	r0, r5
 801633e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016342:	f000 be71 	b.w	8017028 <_write_r>

08016346 <__sseek>:
 8016346:	b510      	push	{r4, lr}
 8016348:	460c      	mov	r4, r1
 801634a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801634e:	f001 fffd 	bl	801834c <_lseek_r>
 8016352:	1c43      	adds	r3, r0, #1
 8016354:	89a3      	ldrh	r3, [r4, #12]
 8016356:	bf15      	itete	ne
 8016358:	6560      	strne	r0, [r4, #84]	; 0x54
 801635a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801635e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016362:	81a3      	strheq	r3, [r4, #12]
 8016364:	bf18      	it	ne
 8016366:	81a3      	strhne	r3, [r4, #12]
 8016368:	bd10      	pop	{r4, pc}

0801636a <__sclose>:
 801636a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801636e:	f000 be6d 	b.w	801704c <_close_r>

08016372 <sulp>:
 8016372:	b570      	push	{r4, r5, r6, lr}
 8016374:	4604      	mov	r4, r0
 8016376:	460d      	mov	r5, r1
 8016378:	4616      	mov	r6, r2
 801637a:	ec45 4b10 	vmov	d0, r4, r5
 801637e:	f002 fb83 	bl	8018a88 <__ulp>
 8016382:	b17e      	cbz	r6, 80163a4 <sulp+0x32>
 8016384:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801638c:	2b00      	cmp	r3, #0
 801638e:	dd09      	ble.n	80163a4 <sulp+0x32>
 8016390:	051b      	lsls	r3, r3, #20
 8016392:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016396:	2000      	movs	r0, #0
 8016398:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801639c:	ec41 0b17 	vmov	d7, r0, r1
 80163a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80163a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080163a8 <_strtod_l>:
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	ed2d 8b0e 	vpush	{d8-d14}
 80163b0:	b097      	sub	sp, #92	; 0x5c
 80163b2:	461f      	mov	r7, r3
 80163b4:	2300      	movs	r3, #0
 80163b6:	9312      	str	r3, [sp, #72]	; 0x48
 80163b8:	4ba1      	ldr	r3, [pc, #644]	; (8016640 <_strtod_l+0x298>)
 80163ba:	920d      	str	r2, [sp, #52]	; 0x34
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	9307      	str	r3, [sp, #28]
 80163c0:	4604      	mov	r4, r0
 80163c2:	4618      	mov	r0, r3
 80163c4:	468b      	mov	fp, r1
 80163c6:	f7e9 ffa3 	bl	8000310 <strlen>
 80163ca:	f04f 0800 	mov.w	r8, #0
 80163ce:	4605      	mov	r5, r0
 80163d0:	f04f 0900 	mov.w	r9, #0
 80163d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80163d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80163da:	7813      	ldrb	r3, [r2, #0]
 80163dc:	2b2b      	cmp	r3, #43	; 0x2b
 80163de:	d04d      	beq.n	801647c <_strtod_l+0xd4>
 80163e0:	d83a      	bhi.n	8016458 <_strtod_l+0xb0>
 80163e2:	2b0d      	cmp	r3, #13
 80163e4:	d833      	bhi.n	801644e <_strtod_l+0xa6>
 80163e6:	2b08      	cmp	r3, #8
 80163e8:	d833      	bhi.n	8016452 <_strtod_l+0xaa>
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d03d      	beq.n	801646a <_strtod_l+0xc2>
 80163ee:	2300      	movs	r3, #0
 80163f0:	9308      	str	r3, [sp, #32]
 80163f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80163f4:	7833      	ldrb	r3, [r6, #0]
 80163f6:	2b30      	cmp	r3, #48	; 0x30
 80163f8:	f040 80b0 	bne.w	801655c <_strtod_l+0x1b4>
 80163fc:	7873      	ldrb	r3, [r6, #1]
 80163fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016402:	2b58      	cmp	r3, #88	; 0x58
 8016404:	d167      	bne.n	80164d6 <_strtod_l+0x12e>
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	ab12      	add	r3, sp, #72	; 0x48
 801640c:	9702      	str	r7, [sp, #8]
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	4a8c      	ldr	r2, [pc, #560]	; (8016644 <_strtod_l+0x29c>)
 8016412:	ab13      	add	r3, sp, #76	; 0x4c
 8016414:	a911      	add	r1, sp, #68	; 0x44
 8016416:	4620      	mov	r0, r4
 8016418:	f001 fc8c 	bl	8017d34 <__gethex>
 801641c:	f010 0507 	ands.w	r5, r0, #7
 8016420:	4607      	mov	r7, r0
 8016422:	d005      	beq.n	8016430 <_strtod_l+0x88>
 8016424:	2d06      	cmp	r5, #6
 8016426:	d12b      	bne.n	8016480 <_strtod_l+0xd8>
 8016428:	3601      	adds	r6, #1
 801642a:	2300      	movs	r3, #0
 801642c:	9611      	str	r6, [sp, #68]	; 0x44
 801642e:	9308      	str	r3, [sp, #32]
 8016430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016432:	2b00      	cmp	r3, #0
 8016434:	f040 854e 	bne.w	8016ed4 <_strtod_l+0xb2c>
 8016438:	9b08      	ldr	r3, [sp, #32]
 801643a:	b1e3      	cbz	r3, 8016476 <_strtod_l+0xce>
 801643c:	ec49 8b17 	vmov	d7, r8, r9
 8016440:	eeb1 0b47 	vneg.f64	d0, d7
 8016444:	b017      	add	sp, #92	; 0x5c
 8016446:	ecbd 8b0e 	vpop	{d8-d14}
 801644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801644e:	2b20      	cmp	r3, #32
 8016450:	d1cd      	bne.n	80163ee <_strtod_l+0x46>
 8016452:	3201      	adds	r2, #1
 8016454:	9211      	str	r2, [sp, #68]	; 0x44
 8016456:	e7bf      	b.n	80163d8 <_strtod_l+0x30>
 8016458:	2b2d      	cmp	r3, #45	; 0x2d
 801645a:	d1c8      	bne.n	80163ee <_strtod_l+0x46>
 801645c:	2301      	movs	r3, #1
 801645e:	9308      	str	r3, [sp, #32]
 8016460:	1c53      	adds	r3, r2, #1
 8016462:	9311      	str	r3, [sp, #68]	; 0x44
 8016464:	7853      	ldrb	r3, [r2, #1]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1c3      	bne.n	80163f2 <_strtod_l+0x4a>
 801646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801646c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016470:	2b00      	cmp	r3, #0
 8016472:	f040 852d 	bne.w	8016ed0 <_strtod_l+0xb28>
 8016476:	ec49 8b10 	vmov	d0, r8, r9
 801647a:	e7e3      	b.n	8016444 <_strtod_l+0x9c>
 801647c:	2300      	movs	r3, #0
 801647e:	e7ee      	b.n	801645e <_strtod_l+0xb6>
 8016480:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016482:	b13a      	cbz	r2, 8016494 <_strtod_l+0xec>
 8016484:	2135      	movs	r1, #53	; 0x35
 8016486:	a814      	add	r0, sp, #80	; 0x50
 8016488:	f002 fc06 	bl	8018c98 <__copybits>
 801648c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801648e:	4620      	mov	r0, r4
 8016490:	f001 ffc8 	bl	8018424 <_Bfree>
 8016494:	3d01      	subs	r5, #1
 8016496:	2d04      	cmp	r5, #4
 8016498:	d806      	bhi.n	80164a8 <_strtod_l+0x100>
 801649a:	e8df f005 	tbb	[pc, r5]
 801649e:	030a      	.short	0x030a
 80164a0:	1714      	.short	0x1714
 80164a2:	0a          	.byte	0x0a
 80164a3:	00          	.byte	0x00
 80164a4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80164a8:	073f      	lsls	r7, r7, #28
 80164aa:	d5c1      	bpl.n	8016430 <_strtod_l+0x88>
 80164ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80164b0:	e7be      	b.n	8016430 <_strtod_l+0x88>
 80164b2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80164b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80164b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80164bc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80164c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80164c4:	e7f0      	b.n	80164a8 <_strtod_l+0x100>
 80164c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8016648 <_strtod_l+0x2a0>
 80164ca:	e7ed      	b.n	80164a8 <_strtod_l+0x100>
 80164cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80164d0:	f04f 38ff 	mov.w	r8, #4294967295
 80164d4:	e7e8      	b.n	80164a8 <_strtod_l+0x100>
 80164d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80164d8:	1c5a      	adds	r2, r3, #1
 80164da:	9211      	str	r2, [sp, #68]	; 0x44
 80164dc:	785b      	ldrb	r3, [r3, #1]
 80164de:	2b30      	cmp	r3, #48	; 0x30
 80164e0:	d0f9      	beq.n	80164d6 <_strtod_l+0x12e>
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d0a4      	beq.n	8016430 <_strtod_l+0x88>
 80164e6:	2301      	movs	r3, #1
 80164e8:	f04f 0a00 	mov.w	sl, #0
 80164ec:	9304      	str	r3, [sp, #16]
 80164ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80164f0:	930a      	str	r3, [sp, #40]	; 0x28
 80164f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80164f6:	f8cd a018 	str.w	sl, [sp, #24]
 80164fa:	220a      	movs	r2, #10
 80164fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80164fe:	7807      	ldrb	r7, [r0, #0]
 8016500:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016504:	b2d9      	uxtb	r1, r3
 8016506:	2909      	cmp	r1, #9
 8016508:	d92a      	bls.n	8016560 <_strtod_l+0x1b8>
 801650a:	9907      	ldr	r1, [sp, #28]
 801650c:	462a      	mov	r2, r5
 801650e:	f002 fe83 	bl	8019218 <strncmp>
 8016512:	2800      	cmp	r0, #0
 8016514:	d033      	beq.n	801657e <_strtod_l+0x1d6>
 8016516:	2000      	movs	r0, #0
 8016518:	9b06      	ldr	r3, [sp, #24]
 801651a:	463a      	mov	r2, r7
 801651c:	4601      	mov	r1, r0
 801651e:	4607      	mov	r7, r0
 8016520:	2a65      	cmp	r2, #101	; 0x65
 8016522:	d001      	beq.n	8016528 <_strtod_l+0x180>
 8016524:	2a45      	cmp	r2, #69	; 0x45
 8016526:	d117      	bne.n	8016558 <_strtod_l+0x1b0>
 8016528:	b91b      	cbnz	r3, 8016532 <_strtod_l+0x18a>
 801652a:	9b04      	ldr	r3, [sp, #16]
 801652c:	4303      	orrs	r3, r0
 801652e:	d09c      	beq.n	801646a <_strtod_l+0xc2>
 8016530:	2300      	movs	r3, #0
 8016532:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8016536:	f10b 0201 	add.w	r2, fp, #1
 801653a:	9211      	str	r2, [sp, #68]	; 0x44
 801653c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8016540:	2a2b      	cmp	r2, #43	; 0x2b
 8016542:	d071      	beq.n	8016628 <_strtod_l+0x280>
 8016544:	2a2d      	cmp	r2, #45	; 0x2d
 8016546:	d077      	beq.n	8016638 <_strtod_l+0x290>
 8016548:	f04f 0e00 	mov.w	lr, #0
 801654c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8016550:	2d09      	cmp	r5, #9
 8016552:	d97f      	bls.n	8016654 <_strtod_l+0x2ac>
 8016554:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016558:	2500      	movs	r5, #0
 801655a:	e09b      	b.n	8016694 <_strtod_l+0x2ec>
 801655c:	2300      	movs	r3, #0
 801655e:	e7c3      	b.n	80164e8 <_strtod_l+0x140>
 8016560:	9906      	ldr	r1, [sp, #24]
 8016562:	2908      	cmp	r1, #8
 8016564:	bfdd      	ittte	le
 8016566:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016568:	fb02 3301 	mlale	r3, r2, r1, r3
 801656c:	9309      	strle	r3, [sp, #36]	; 0x24
 801656e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8016572:	9b06      	ldr	r3, [sp, #24]
 8016574:	3001      	adds	r0, #1
 8016576:	3301      	adds	r3, #1
 8016578:	9306      	str	r3, [sp, #24]
 801657a:	9011      	str	r0, [sp, #68]	; 0x44
 801657c:	e7be      	b.n	80164fc <_strtod_l+0x154>
 801657e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016580:	195a      	adds	r2, r3, r5
 8016582:	9211      	str	r2, [sp, #68]	; 0x44
 8016584:	5d5a      	ldrb	r2, [r3, r5]
 8016586:	9b06      	ldr	r3, [sp, #24]
 8016588:	b3a3      	cbz	r3, 80165f4 <_strtod_l+0x24c>
 801658a:	4607      	mov	r7, r0
 801658c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016590:	2909      	cmp	r1, #9
 8016592:	d912      	bls.n	80165ba <_strtod_l+0x212>
 8016594:	2101      	movs	r1, #1
 8016596:	e7c3      	b.n	8016520 <_strtod_l+0x178>
 8016598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801659a:	1c5a      	adds	r2, r3, #1
 801659c:	9211      	str	r2, [sp, #68]	; 0x44
 801659e:	785a      	ldrb	r2, [r3, #1]
 80165a0:	3001      	adds	r0, #1
 80165a2:	2a30      	cmp	r2, #48	; 0x30
 80165a4:	d0f8      	beq.n	8016598 <_strtod_l+0x1f0>
 80165a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80165aa:	2b08      	cmp	r3, #8
 80165ac:	f200 8497 	bhi.w	8016ede <_strtod_l+0xb36>
 80165b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165b2:	930a      	str	r3, [sp, #40]	; 0x28
 80165b4:	4607      	mov	r7, r0
 80165b6:	2000      	movs	r0, #0
 80165b8:	4603      	mov	r3, r0
 80165ba:	3a30      	subs	r2, #48	; 0x30
 80165bc:	f100 0101 	add.w	r1, r0, #1
 80165c0:	d012      	beq.n	80165e8 <_strtod_l+0x240>
 80165c2:	440f      	add	r7, r1
 80165c4:	eb00 0c03 	add.w	ip, r0, r3
 80165c8:	4619      	mov	r1, r3
 80165ca:	250a      	movs	r5, #10
 80165cc:	4561      	cmp	r1, ip
 80165ce:	d113      	bne.n	80165f8 <_strtod_l+0x250>
 80165d0:	1819      	adds	r1, r3, r0
 80165d2:	2908      	cmp	r1, #8
 80165d4:	f103 0301 	add.w	r3, r3, #1
 80165d8:	4403      	add	r3, r0
 80165da:	dc1c      	bgt.n	8016616 <_strtod_l+0x26e>
 80165dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165de:	210a      	movs	r1, #10
 80165e0:	fb01 2200 	mla	r2, r1, r0, r2
 80165e4:	9209      	str	r2, [sp, #36]	; 0x24
 80165e6:	2100      	movs	r1, #0
 80165e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165ea:	1c50      	adds	r0, r2, #1
 80165ec:	9011      	str	r0, [sp, #68]	; 0x44
 80165ee:	7852      	ldrb	r2, [r2, #1]
 80165f0:	4608      	mov	r0, r1
 80165f2:	e7cb      	b.n	801658c <_strtod_l+0x1e4>
 80165f4:	9806      	ldr	r0, [sp, #24]
 80165f6:	e7d4      	b.n	80165a2 <_strtod_l+0x1fa>
 80165f8:	2908      	cmp	r1, #8
 80165fa:	dc04      	bgt.n	8016606 <_strtod_l+0x25e>
 80165fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80165fe:	436e      	muls	r6, r5
 8016600:	9609      	str	r6, [sp, #36]	; 0x24
 8016602:	3101      	adds	r1, #1
 8016604:	e7e2      	b.n	80165cc <_strtod_l+0x224>
 8016606:	f101 0e01 	add.w	lr, r1, #1
 801660a:	f1be 0f10 	cmp.w	lr, #16
 801660e:	bfd8      	it	le
 8016610:	fb05 fa0a 	mulle.w	sl, r5, sl
 8016614:	e7f5      	b.n	8016602 <_strtod_l+0x25a>
 8016616:	2b10      	cmp	r3, #16
 8016618:	bfdc      	itt	le
 801661a:	210a      	movle	r1, #10
 801661c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8016620:	e7e1      	b.n	80165e6 <_strtod_l+0x23e>
 8016622:	2700      	movs	r7, #0
 8016624:	2101      	movs	r1, #1
 8016626:	e780      	b.n	801652a <_strtod_l+0x182>
 8016628:	f04f 0e00 	mov.w	lr, #0
 801662c:	f10b 0202 	add.w	r2, fp, #2
 8016630:	9211      	str	r2, [sp, #68]	; 0x44
 8016632:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8016636:	e789      	b.n	801654c <_strtod_l+0x1a4>
 8016638:	f04f 0e01 	mov.w	lr, #1
 801663c:	e7f6      	b.n	801662c <_strtod_l+0x284>
 801663e:	bf00      	nop
 8016640:	0801a668 	.word	0x0801a668
 8016644:	0801a41c 	.word	0x0801a41c
 8016648:	7ff00000 	.word	0x7ff00000
 801664c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801664e:	1c55      	adds	r5, r2, #1
 8016650:	9511      	str	r5, [sp, #68]	; 0x44
 8016652:	7852      	ldrb	r2, [r2, #1]
 8016654:	2a30      	cmp	r2, #48	; 0x30
 8016656:	d0f9      	beq.n	801664c <_strtod_l+0x2a4>
 8016658:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801665c:	2d08      	cmp	r5, #8
 801665e:	f63f af7b 	bhi.w	8016558 <_strtod_l+0x1b0>
 8016662:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8016666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016668:	9207      	str	r2, [sp, #28]
 801666a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801666c:	1c55      	adds	r5, r2, #1
 801666e:	9511      	str	r5, [sp, #68]	; 0x44
 8016670:	7852      	ldrb	r2, [r2, #1]
 8016672:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016676:	2e09      	cmp	r6, #9
 8016678:	d937      	bls.n	80166ea <_strtod_l+0x342>
 801667a:	9e07      	ldr	r6, [sp, #28]
 801667c:	1bad      	subs	r5, r5, r6
 801667e:	2d08      	cmp	r5, #8
 8016680:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016684:	dc02      	bgt.n	801668c <_strtod_l+0x2e4>
 8016686:	4565      	cmp	r5, ip
 8016688:	bfa8      	it	ge
 801668a:	4665      	movge	r5, ip
 801668c:	f1be 0f00 	cmp.w	lr, #0
 8016690:	d000      	beq.n	8016694 <_strtod_l+0x2ec>
 8016692:	426d      	negs	r5, r5
 8016694:	2b00      	cmp	r3, #0
 8016696:	d14d      	bne.n	8016734 <_strtod_l+0x38c>
 8016698:	9b04      	ldr	r3, [sp, #16]
 801669a:	4303      	orrs	r3, r0
 801669c:	f47f aec8 	bne.w	8016430 <_strtod_l+0x88>
 80166a0:	2900      	cmp	r1, #0
 80166a2:	f47f aee2 	bne.w	801646a <_strtod_l+0xc2>
 80166a6:	2a69      	cmp	r2, #105	; 0x69
 80166a8:	d027      	beq.n	80166fa <_strtod_l+0x352>
 80166aa:	dc24      	bgt.n	80166f6 <_strtod_l+0x34e>
 80166ac:	2a49      	cmp	r2, #73	; 0x49
 80166ae:	d024      	beq.n	80166fa <_strtod_l+0x352>
 80166b0:	2a4e      	cmp	r2, #78	; 0x4e
 80166b2:	f47f aeda 	bne.w	801646a <_strtod_l+0xc2>
 80166b6:	4996      	ldr	r1, [pc, #600]	; (8016910 <_strtod_l+0x568>)
 80166b8:	a811      	add	r0, sp, #68	; 0x44
 80166ba:	f001 fd93 	bl	80181e4 <__match>
 80166be:	2800      	cmp	r0, #0
 80166c0:	f43f aed3 	beq.w	801646a <_strtod_l+0xc2>
 80166c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	2b28      	cmp	r3, #40	; 0x28
 80166ca:	d12d      	bne.n	8016728 <_strtod_l+0x380>
 80166cc:	4991      	ldr	r1, [pc, #580]	; (8016914 <_strtod_l+0x56c>)
 80166ce:	aa14      	add	r2, sp, #80	; 0x50
 80166d0:	a811      	add	r0, sp, #68	; 0x44
 80166d2:	f001 fd9b 	bl	801820c <__hexnan>
 80166d6:	2805      	cmp	r0, #5
 80166d8:	d126      	bne.n	8016728 <_strtod_l+0x380>
 80166da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80166dc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80166e0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80166e4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80166e8:	e6a2      	b.n	8016430 <_strtod_l+0x88>
 80166ea:	250a      	movs	r5, #10
 80166ec:	fb05 250c 	mla	r5, r5, ip, r2
 80166f0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80166f4:	e7b9      	b.n	801666a <_strtod_l+0x2c2>
 80166f6:	2a6e      	cmp	r2, #110	; 0x6e
 80166f8:	e7db      	b.n	80166b2 <_strtod_l+0x30a>
 80166fa:	4987      	ldr	r1, [pc, #540]	; (8016918 <_strtod_l+0x570>)
 80166fc:	a811      	add	r0, sp, #68	; 0x44
 80166fe:	f001 fd71 	bl	80181e4 <__match>
 8016702:	2800      	cmp	r0, #0
 8016704:	f43f aeb1 	beq.w	801646a <_strtod_l+0xc2>
 8016708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801670a:	4984      	ldr	r1, [pc, #528]	; (801691c <_strtod_l+0x574>)
 801670c:	3b01      	subs	r3, #1
 801670e:	a811      	add	r0, sp, #68	; 0x44
 8016710:	9311      	str	r3, [sp, #68]	; 0x44
 8016712:	f001 fd67 	bl	80181e4 <__match>
 8016716:	b910      	cbnz	r0, 801671e <_strtod_l+0x376>
 8016718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801671a:	3301      	adds	r3, #1
 801671c:	9311      	str	r3, [sp, #68]	; 0x44
 801671e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8016930 <_strtod_l+0x588>
 8016722:	f04f 0800 	mov.w	r8, #0
 8016726:	e683      	b.n	8016430 <_strtod_l+0x88>
 8016728:	487d      	ldr	r0, [pc, #500]	; (8016920 <_strtod_l+0x578>)
 801672a:	f002 fd5d 	bl	80191e8 <nan>
 801672e:	ec59 8b10 	vmov	r8, r9, d0
 8016732:	e67d      	b.n	8016430 <_strtod_l+0x88>
 8016734:	1bea      	subs	r2, r5, r7
 8016736:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801673a:	9207      	str	r2, [sp, #28]
 801673c:	9a06      	ldr	r2, [sp, #24]
 801673e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016742:	2a00      	cmp	r2, #0
 8016744:	bf08      	it	eq
 8016746:	461a      	moveq	r2, r3
 8016748:	2b10      	cmp	r3, #16
 801674a:	9206      	str	r2, [sp, #24]
 801674c:	461a      	mov	r2, r3
 801674e:	bfa8      	it	ge
 8016750:	2210      	movge	r2, #16
 8016752:	2b09      	cmp	r3, #9
 8016754:	ec59 8b17 	vmov	r8, r9, d7
 8016758:	dd0c      	ble.n	8016774 <_strtod_l+0x3cc>
 801675a:	4972      	ldr	r1, [pc, #456]	; (8016924 <_strtod_l+0x57c>)
 801675c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016760:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8016764:	ee06 aa90 	vmov	s13, sl
 8016768:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801676c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016770:	ec59 8b16 	vmov	r8, r9, d6
 8016774:	2b0f      	cmp	r3, #15
 8016776:	dc36      	bgt.n	80167e6 <_strtod_l+0x43e>
 8016778:	9907      	ldr	r1, [sp, #28]
 801677a:	2900      	cmp	r1, #0
 801677c:	f43f ae58 	beq.w	8016430 <_strtod_l+0x88>
 8016780:	dd23      	ble.n	80167ca <_strtod_l+0x422>
 8016782:	2916      	cmp	r1, #22
 8016784:	dc0b      	bgt.n	801679e <_strtod_l+0x3f6>
 8016786:	4b67      	ldr	r3, [pc, #412]	; (8016924 <_strtod_l+0x57c>)
 8016788:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801678c:	ed93 7b00 	vldr	d7, [r3]
 8016790:	ec49 8b16 	vmov	d6, r8, r9
 8016794:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016798:	ec59 8b17 	vmov	r8, r9, d7
 801679c:	e648      	b.n	8016430 <_strtod_l+0x88>
 801679e:	9807      	ldr	r0, [sp, #28]
 80167a0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80167a4:	4281      	cmp	r1, r0
 80167a6:	db1e      	blt.n	80167e6 <_strtod_l+0x43e>
 80167a8:	4a5e      	ldr	r2, [pc, #376]	; (8016924 <_strtod_l+0x57c>)
 80167aa:	f1c3 030f 	rsb	r3, r3, #15
 80167ae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80167b2:	ed91 7b00 	vldr	d7, [r1]
 80167b6:	ec49 8b16 	vmov	d6, r8, r9
 80167ba:	1ac3      	subs	r3, r0, r3
 80167bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80167c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167c4:	ed92 6b00 	vldr	d6, [r2]
 80167c8:	e7e4      	b.n	8016794 <_strtod_l+0x3ec>
 80167ca:	9907      	ldr	r1, [sp, #28]
 80167cc:	3116      	adds	r1, #22
 80167ce:	db0a      	blt.n	80167e6 <_strtod_l+0x43e>
 80167d0:	4b54      	ldr	r3, [pc, #336]	; (8016924 <_strtod_l+0x57c>)
 80167d2:	1b7d      	subs	r5, r7, r5
 80167d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80167d8:	ed95 7b00 	vldr	d7, [r5]
 80167dc:	ec49 8b16 	vmov	d6, r8, r9
 80167e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80167e4:	e7d8      	b.n	8016798 <_strtod_l+0x3f0>
 80167e6:	9907      	ldr	r1, [sp, #28]
 80167e8:	1a9a      	subs	r2, r3, r2
 80167ea:	440a      	add	r2, r1
 80167ec:	2a00      	cmp	r2, #0
 80167ee:	dd6f      	ble.n	80168d0 <_strtod_l+0x528>
 80167f0:	f012 000f 	ands.w	r0, r2, #15
 80167f4:	d00a      	beq.n	801680c <_strtod_l+0x464>
 80167f6:	494b      	ldr	r1, [pc, #300]	; (8016924 <_strtod_l+0x57c>)
 80167f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80167fc:	ed91 7b00 	vldr	d7, [r1]
 8016800:	ec49 8b16 	vmov	d6, r8, r9
 8016804:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016808:	ec59 8b17 	vmov	r8, r9, d7
 801680c:	f032 020f 	bics.w	r2, r2, #15
 8016810:	d04f      	beq.n	80168b2 <_strtod_l+0x50a>
 8016812:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016816:	dd22      	ble.n	801685e <_strtod_l+0x4b6>
 8016818:	2500      	movs	r5, #0
 801681a:	462e      	mov	r6, r5
 801681c:	9506      	str	r5, [sp, #24]
 801681e:	462f      	mov	r7, r5
 8016820:	2322      	movs	r3, #34	; 0x22
 8016822:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016930 <_strtod_l+0x588>
 8016826:	6023      	str	r3, [r4, #0]
 8016828:	f04f 0800 	mov.w	r8, #0
 801682c:	9b06      	ldr	r3, [sp, #24]
 801682e:	2b00      	cmp	r3, #0
 8016830:	f43f adfe 	beq.w	8016430 <_strtod_l+0x88>
 8016834:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016836:	4620      	mov	r0, r4
 8016838:	f001 fdf4 	bl	8018424 <_Bfree>
 801683c:	4639      	mov	r1, r7
 801683e:	4620      	mov	r0, r4
 8016840:	f001 fdf0 	bl	8018424 <_Bfree>
 8016844:	4631      	mov	r1, r6
 8016846:	4620      	mov	r0, r4
 8016848:	f001 fdec 	bl	8018424 <_Bfree>
 801684c:	9906      	ldr	r1, [sp, #24]
 801684e:	4620      	mov	r0, r4
 8016850:	f001 fde8 	bl	8018424 <_Bfree>
 8016854:	4629      	mov	r1, r5
 8016856:	4620      	mov	r0, r4
 8016858:	f001 fde4 	bl	8018424 <_Bfree>
 801685c:	e5e8      	b.n	8016430 <_strtod_l+0x88>
 801685e:	2000      	movs	r0, #0
 8016860:	ec49 8b17 	vmov	d7, r8, r9
 8016864:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8016928 <_strtod_l+0x580>
 8016868:	1112      	asrs	r2, r2, #4
 801686a:	4601      	mov	r1, r0
 801686c:	2a01      	cmp	r2, #1
 801686e:	dc23      	bgt.n	80168b8 <_strtod_l+0x510>
 8016870:	b108      	cbz	r0, 8016876 <_strtod_l+0x4ce>
 8016872:	ec59 8b17 	vmov	r8, r9, d7
 8016876:	4a2c      	ldr	r2, [pc, #176]	; (8016928 <_strtod_l+0x580>)
 8016878:	482c      	ldr	r0, [pc, #176]	; (801692c <_strtod_l+0x584>)
 801687a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801687e:	ed92 7b00 	vldr	d7, [r2]
 8016882:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016886:	ec49 8b16 	vmov	d6, r8, r9
 801688a:	4a29      	ldr	r2, [pc, #164]	; (8016930 <_strtod_l+0x588>)
 801688c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016890:	ee17 1a90 	vmov	r1, s15
 8016894:	400a      	ands	r2, r1
 8016896:	4282      	cmp	r2, r0
 8016898:	ec59 8b17 	vmov	r8, r9, d7
 801689c:	d8bc      	bhi.n	8016818 <_strtod_l+0x470>
 801689e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80168a2:	4282      	cmp	r2, r0
 80168a4:	bf86      	itte	hi
 80168a6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8016934 <_strtod_l+0x58c>
 80168aa:	f04f 38ff 	movhi.w	r8, #4294967295
 80168ae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80168b2:	2200      	movs	r2, #0
 80168b4:	9204      	str	r2, [sp, #16]
 80168b6:	e078      	b.n	80169aa <_strtod_l+0x602>
 80168b8:	07d6      	lsls	r6, r2, #31
 80168ba:	d504      	bpl.n	80168c6 <_strtod_l+0x51e>
 80168bc:	ed9c 6b00 	vldr	d6, [ip]
 80168c0:	2001      	movs	r0, #1
 80168c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168c6:	3101      	adds	r1, #1
 80168c8:	1052      	asrs	r2, r2, #1
 80168ca:	f10c 0c08 	add.w	ip, ip, #8
 80168ce:	e7cd      	b.n	801686c <_strtod_l+0x4c4>
 80168d0:	d0ef      	beq.n	80168b2 <_strtod_l+0x50a>
 80168d2:	4252      	negs	r2, r2
 80168d4:	f012 000f 	ands.w	r0, r2, #15
 80168d8:	d00a      	beq.n	80168f0 <_strtod_l+0x548>
 80168da:	4912      	ldr	r1, [pc, #72]	; (8016924 <_strtod_l+0x57c>)
 80168dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80168e0:	ed91 7b00 	vldr	d7, [r1]
 80168e4:	ec49 8b16 	vmov	d6, r8, r9
 80168e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80168ec:	ec59 8b17 	vmov	r8, r9, d7
 80168f0:	1112      	asrs	r2, r2, #4
 80168f2:	d0de      	beq.n	80168b2 <_strtod_l+0x50a>
 80168f4:	2a1f      	cmp	r2, #31
 80168f6:	dd1f      	ble.n	8016938 <_strtod_l+0x590>
 80168f8:	2500      	movs	r5, #0
 80168fa:	462e      	mov	r6, r5
 80168fc:	9506      	str	r5, [sp, #24]
 80168fe:	462f      	mov	r7, r5
 8016900:	2322      	movs	r3, #34	; 0x22
 8016902:	f04f 0800 	mov.w	r8, #0
 8016906:	f04f 0900 	mov.w	r9, #0
 801690a:	6023      	str	r3, [r4, #0]
 801690c:	e78e      	b.n	801682c <_strtod_l+0x484>
 801690e:	bf00      	nop
 8016910:	0801a3ed 	.word	0x0801a3ed
 8016914:	0801a430 	.word	0x0801a430
 8016918:	0801a3e5 	.word	0x0801a3e5
 801691c:	0801a574 	.word	0x0801a574
 8016920:	0801a820 	.word	0x0801a820
 8016924:	0801a700 	.word	0x0801a700
 8016928:	0801a6d8 	.word	0x0801a6d8
 801692c:	7ca00000 	.word	0x7ca00000
 8016930:	7ff00000 	.word	0x7ff00000
 8016934:	7fefffff 	.word	0x7fefffff
 8016938:	f012 0110 	ands.w	r1, r2, #16
 801693c:	bf18      	it	ne
 801693e:	216a      	movne	r1, #106	; 0x6a
 8016940:	9104      	str	r1, [sp, #16]
 8016942:	ec49 8b17 	vmov	d7, r8, r9
 8016946:	49be      	ldr	r1, [pc, #760]	; (8016c40 <_strtod_l+0x898>)
 8016948:	2000      	movs	r0, #0
 801694a:	07d6      	lsls	r6, r2, #31
 801694c:	d504      	bpl.n	8016958 <_strtod_l+0x5b0>
 801694e:	ed91 6b00 	vldr	d6, [r1]
 8016952:	2001      	movs	r0, #1
 8016954:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016958:	1052      	asrs	r2, r2, #1
 801695a:	f101 0108 	add.w	r1, r1, #8
 801695e:	d1f4      	bne.n	801694a <_strtod_l+0x5a2>
 8016960:	b108      	cbz	r0, 8016966 <_strtod_l+0x5be>
 8016962:	ec59 8b17 	vmov	r8, r9, d7
 8016966:	9a04      	ldr	r2, [sp, #16]
 8016968:	b1c2      	cbz	r2, 801699c <_strtod_l+0x5f4>
 801696a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801696e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8016972:	2a00      	cmp	r2, #0
 8016974:	4648      	mov	r0, r9
 8016976:	dd11      	ble.n	801699c <_strtod_l+0x5f4>
 8016978:	2a1f      	cmp	r2, #31
 801697a:	f340 812e 	ble.w	8016bda <_strtod_l+0x832>
 801697e:	2a34      	cmp	r2, #52	; 0x34
 8016980:	bfde      	ittt	le
 8016982:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8016986:	f04f 32ff 	movle.w	r2, #4294967295
 801698a:	fa02 f101 	lslle.w	r1, r2, r1
 801698e:	f04f 0800 	mov.w	r8, #0
 8016992:	bfcc      	ite	gt
 8016994:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016998:	ea01 0900 	andle.w	r9, r1, r0
 801699c:	ec49 8b17 	vmov	d7, r8, r9
 80169a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80169a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a8:	d0a6      	beq.n	80168f8 <_strtod_l+0x550>
 80169aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169ac:	9200      	str	r2, [sp, #0]
 80169ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169b0:	9a06      	ldr	r2, [sp, #24]
 80169b2:	4620      	mov	r0, r4
 80169b4:	f001 fd9e 	bl	80184f4 <__s2b>
 80169b8:	9006      	str	r0, [sp, #24]
 80169ba:	2800      	cmp	r0, #0
 80169bc:	f43f af2c 	beq.w	8016818 <_strtod_l+0x470>
 80169c0:	9b07      	ldr	r3, [sp, #28]
 80169c2:	1b7d      	subs	r5, r7, r5
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	bfb4      	ite	lt
 80169c8:	462b      	movlt	r3, r5
 80169ca:	2300      	movge	r3, #0
 80169cc:	9309      	str	r3, [sp, #36]	; 0x24
 80169ce:	9b07      	ldr	r3, [sp, #28]
 80169d0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8016c20 <_strtod_l+0x878>
 80169d4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8016c28 <_strtod_l+0x880>
 80169d8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8016c30 <_strtod_l+0x888>
 80169dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169e0:	2500      	movs	r5, #0
 80169e2:	930c      	str	r3, [sp, #48]	; 0x30
 80169e4:	462e      	mov	r6, r5
 80169e6:	9b06      	ldr	r3, [sp, #24]
 80169e8:	4620      	mov	r0, r4
 80169ea:	6859      	ldr	r1, [r3, #4]
 80169ec:	f001 fcda 	bl	80183a4 <_Balloc>
 80169f0:	4607      	mov	r7, r0
 80169f2:	2800      	cmp	r0, #0
 80169f4:	f43f af14 	beq.w	8016820 <_strtod_l+0x478>
 80169f8:	9b06      	ldr	r3, [sp, #24]
 80169fa:	691a      	ldr	r2, [r3, #16]
 80169fc:	3202      	adds	r2, #2
 80169fe:	f103 010c 	add.w	r1, r3, #12
 8016a02:	0092      	lsls	r2, r2, #2
 8016a04:	300c      	adds	r0, #12
 8016a06:	f7fe fded 	bl	80155e4 <memcpy>
 8016a0a:	ec49 8b10 	vmov	d0, r8, r9
 8016a0e:	aa14      	add	r2, sp, #80	; 0x50
 8016a10:	a913      	add	r1, sp, #76	; 0x4c
 8016a12:	4620      	mov	r0, r4
 8016a14:	f002 f8b4 	bl	8018b80 <__d2b>
 8016a18:	ec49 8b18 	vmov	d8, r8, r9
 8016a1c:	9012      	str	r0, [sp, #72]	; 0x48
 8016a1e:	2800      	cmp	r0, #0
 8016a20:	f43f aefe 	beq.w	8016820 <_strtod_l+0x478>
 8016a24:	2101      	movs	r1, #1
 8016a26:	4620      	mov	r0, r4
 8016a28:	f001 fdfe 	bl	8018628 <__i2b>
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	2800      	cmp	r0, #0
 8016a30:	f43f aef6 	beq.w	8016820 <_strtod_l+0x478>
 8016a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a36:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	bfab      	itete	ge
 8016a3c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8016a3e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8016a40:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8016a44:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8016a48:	bfac      	ite	ge
 8016a4a:	eb03 0b02 	addge.w	fp, r3, r2
 8016a4e:	eba2 0a03 	sublt.w	sl, r2, r3
 8016a52:	9a04      	ldr	r2, [sp, #16]
 8016a54:	1a9b      	subs	r3, r3, r2
 8016a56:	440b      	add	r3, r1
 8016a58:	4a7a      	ldr	r2, [pc, #488]	; (8016c44 <_strtod_l+0x89c>)
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8016a62:	f280 80cd 	bge.w	8016c00 <_strtod_l+0x858>
 8016a66:	1ad2      	subs	r2, r2, r3
 8016a68:	2a1f      	cmp	r2, #31
 8016a6a:	eba1 0102 	sub.w	r1, r1, r2
 8016a6e:	f04f 0001 	mov.w	r0, #1
 8016a72:	f300 80b9 	bgt.w	8016be8 <_strtod_l+0x840>
 8016a76:	fa00 f302 	lsl.w	r3, r0, r2
 8016a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a80:	eb0b 0301 	add.w	r3, fp, r1
 8016a84:	9a04      	ldr	r2, [sp, #16]
 8016a86:	459b      	cmp	fp, r3
 8016a88:	448a      	add	sl, r1
 8016a8a:	4492      	add	sl, r2
 8016a8c:	465a      	mov	r2, fp
 8016a8e:	bfa8      	it	ge
 8016a90:	461a      	movge	r2, r3
 8016a92:	4552      	cmp	r2, sl
 8016a94:	bfa8      	it	ge
 8016a96:	4652      	movge	r2, sl
 8016a98:	2a00      	cmp	r2, #0
 8016a9a:	bfc2      	ittt	gt
 8016a9c:	1a9b      	subgt	r3, r3, r2
 8016a9e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016aa2:	ebab 0b02 	subgt.w	fp, fp, r2
 8016aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016aa8:	2a00      	cmp	r2, #0
 8016aaa:	dd18      	ble.n	8016ade <_strtod_l+0x736>
 8016aac:	4631      	mov	r1, r6
 8016aae:	4620      	mov	r0, r4
 8016ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ab2:	f001 fe79 	bl	80187a8 <__pow5mult>
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	f43f aeb1 	beq.w	8016820 <_strtod_l+0x478>
 8016abe:	4601      	mov	r1, r0
 8016ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ac2:	4620      	mov	r0, r4
 8016ac4:	f001 fdc6 	bl	8018654 <__multiply>
 8016ac8:	900e      	str	r0, [sp, #56]	; 0x38
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f43f aea8 	beq.w	8016820 <_strtod_l+0x478>
 8016ad0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f001 fca6 	bl	8018424 <_Bfree>
 8016ad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016adc:	9212      	str	r2, [sp, #72]	; 0x48
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	f300 8093 	bgt.w	8016c0a <_strtod_l+0x862>
 8016ae4:	9b07      	ldr	r3, [sp, #28]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	dd08      	ble.n	8016afc <_strtod_l+0x754>
 8016aea:	4639      	mov	r1, r7
 8016aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016aee:	4620      	mov	r0, r4
 8016af0:	f001 fe5a 	bl	80187a8 <__pow5mult>
 8016af4:	4607      	mov	r7, r0
 8016af6:	2800      	cmp	r0, #0
 8016af8:	f43f ae92 	beq.w	8016820 <_strtod_l+0x478>
 8016afc:	f1ba 0f00 	cmp.w	sl, #0
 8016b00:	dd08      	ble.n	8016b14 <_strtod_l+0x76c>
 8016b02:	4639      	mov	r1, r7
 8016b04:	4652      	mov	r2, sl
 8016b06:	4620      	mov	r0, r4
 8016b08:	f001 fea8 	bl	801885c <__lshift>
 8016b0c:	4607      	mov	r7, r0
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	f43f ae86 	beq.w	8016820 <_strtod_l+0x478>
 8016b14:	f1bb 0f00 	cmp.w	fp, #0
 8016b18:	dd08      	ble.n	8016b2c <_strtod_l+0x784>
 8016b1a:	4631      	mov	r1, r6
 8016b1c:	465a      	mov	r2, fp
 8016b1e:	4620      	mov	r0, r4
 8016b20:	f001 fe9c 	bl	801885c <__lshift>
 8016b24:	4606      	mov	r6, r0
 8016b26:	2800      	cmp	r0, #0
 8016b28:	f43f ae7a 	beq.w	8016820 <_strtod_l+0x478>
 8016b2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016b2e:	463a      	mov	r2, r7
 8016b30:	4620      	mov	r0, r4
 8016b32:	f001 ff1f 	bl	8018974 <__mdiff>
 8016b36:	4605      	mov	r5, r0
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	f43f ae71 	beq.w	8016820 <_strtod_l+0x478>
 8016b3e:	2300      	movs	r3, #0
 8016b40:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016b44:	60c3      	str	r3, [r0, #12]
 8016b46:	4631      	mov	r1, r6
 8016b48:	f001 fef8 	bl	801893c <__mcmp>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	da7d      	bge.n	8016c4c <_strtod_l+0x8a4>
 8016b50:	ea5a 0308 	orrs.w	r3, sl, r8
 8016b54:	f040 80a3 	bne.w	8016c9e <_strtod_l+0x8f6>
 8016b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	f040 809e 	bne.w	8016c9e <_strtod_l+0x8f6>
 8016b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016b66:	0d1b      	lsrs	r3, r3, #20
 8016b68:	051b      	lsls	r3, r3, #20
 8016b6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016b6e:	f240 8096 	bls.w	8016c9e <_strtod_l+0x8f6>
 8016b72:	696b      	ldr	r3, [r5, #20]
 8016b74:	b91b      	cbnz	r3, 8016b7e <_strtod_l+0x7d6>
 8016b76:	692b      	ldr	r3, [r5, #16]
 8016b78:	2b01      	cmp	r3, #1
 8016b7a:	f340 8090 	ble.w	8016c9e <_strtod_l+0x8f6>
 8016b7e:	4629      	mov	r1, r5
 8016b80:	2201      	movs	r2, #1
 8016b82:	4620      	mov	r0, r4
 8016b84:	f001 fe6a 	bl	801885c <__lshift>
 8016b88:	4631      	mov	r1, r6
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	f001 fed6 	bl	801893c <__mcmp>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	f340 8084 	ble.w	8016c9e <_strtod_l+0x8f6>
 8016b96:	9904      	ldr	r1, [sp, #16]
 8016b98:	4a2b      	ldr	r2, [pc, #172]	; (8016c48 <_strtod_l+0x8a0>)
 8016b9a:	464b      	mov	r3, r9
 8016b9c:	2900      	cmp	r1, #0
 8016b9e:	f000 809d 	beq.w	8016cdc <_strtod_l+0x934>
 8016ba2:	ea02 0109 	and.w	r1, r2, r9
 8016ba6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016baa:	f300 8097 	bgt.w	8016cdc <_strtod_l+0x934>
 8016bae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016bb2:	f77f aea5 	ble.w	8016900 <_strtod_l+0x558>
 8016bb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016c38 <_strtod_l+0x890>
 8016bba:	ec49 8b16 	vmov	d6, r8, r9
 8016bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016bc2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016bc6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	bf08      	it	eq
 8016bce:	2322      	moveq	r3, #34	; 0x22
 8016bd0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016bd4:	bf08      	it	eq
 8016bd6:	6023      	streq	r3, [r4, #0]
 8016bd8:	e62c      	b.n	8016834 <_strtod_l+0x48c>
 8016bda:	f04f 31ff 	mov.w	r1, #4294967295
 8016bde:	fa01 f202 	lsl.w	r2, r1, r2
 8016be2:	ea02 0808 	and.w	r8, r2, r8
 8016be6:	e6d9      	b.n	801699c <_strtod_l+0x5f4>
 8016be8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016bec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016bf0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016bf4:	33e2      	adds	r3, #226	; 0xe2
 8016bf6:	fa00 f303 	lsl.w	r3, r0, r3
 8016bfa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8016bfe:	e73f      	b.n	8016a80 <_strtod_l+0x6d8>
 8016c00:	2200      	movs	r2, #0
 8016c02:	2301      	movs	r3, #1
 8016c04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c08:	e73a      	b.n	8016a80 <_strtod_l+0x6d8>
 8016c0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	4620      	mov	r0, r4
 8016c10:	f001 fe24 	bl	801885c <__lshift>
 8016c14:	9012      	str	r0, [sp, #72]	; 0x48
 8016c16:	2800      	cmp	r0, #0
 8016c18:	f47f af64 	bne.w	8016ae4 <_strtod_l+0x73c>
 8016c1c:	e600      	b.n	8016820 <_strtod_l+0x478>
 8016c1e:	bf00      	nop
 8016c20:	94a03595 	.word	0x94a03595
 8016c24:	3fcfffff 	.word	0x3fcfffff
 8016c28:	94a03595 	.word	0x94a03595
 8016c2c:	3fdfffff 	.word	0x3fdfffff
 8016c30:	35afe535 	.word	0x35afe535
 8016c34:	3fe00000 	.word	0x3fe00000
 8016c38:	00000000 	.word	0x00000000
 8016c3c:	39500000 	.word	0x39500000
 8016c40:	0801a448 	.word	0x0801a448
 8016c44:	fffffc02 	.word	0xfffffc02
 8016c48:	7ff00000 	.word	0x7ff00000
 8016c4c:	46cb      	mov	fp, r9
 8016c4e:	d15f      	bne.n	8016d10 <_strtod_l+0x968>
 8016c50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c54:	f1ba 0f00 	cmp.w	sl, #0
 8016c58:	d02a      	beq.n	8016cb0 <_strtod_l+0x908>
 8016c5a:	4aa7      	ldr	r2, [pc, #668]	; (8016ef8 <_strtod_l+0xb50>)
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	d12b      	bne.n	8016cb8 <_strtod_l+0x910>
 8016c60:	9b04      	ldr	r3, [sp, #16]
 8016c62:	4642      	mov	r2, r8
 8016c64:	b1fb      	cbz	r3, 8016ca6 <_strtod_l+0x8fe>
 8016c66:	4ba5      	ldr	r3, [pc, #660]	; (8016efc <_strtod_l+0xb54>)
 8016c68:	ea09 0303 	and.w	r3, r9, r3
 8016c6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016c70:	f04f 31ff 	mov.w	r1, #4294967295
 8016c74:	d81a      	bhi.n	8016cac <_strtod_l+0x904>
 8016c76:	0d1b      	lsrs	r3, r3, #20
 8016c78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d119      	bne.n	8016cb8 <_strtod_l+0x910>
 8016c84:	4b9e      	ldr	r3, [pc, #632]	; (8016f00 <_strtod_l+0xb58>)
 8016c86:	459b      	cmp	fp, r3
 8016c88:	d102      	bne.n	8016c90 <_strtod_l+0x8e8>
 8016c8a:	3201      	adds	r2, #1
 8016c8c:	f43f adc8 	beq.w	8016820 <_strtod_l+0x478>
 8016c90:	4b9a      	ldr	r3, [pc, #616]	; (8016efc <_strtod_l+0xb54>)
 8016c92:	ea0b 0303 	and.w	r3, fp, r3
 8016c96:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016c9a:	f04f 0800 	mov.w	r8, #0
 8016c9e:	9b04      	ldr	r3, [sp, #16]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d188      	bne.n	8016bb6 <_strtod_l+0x80e>
 8016ca4:	e5c6      	b.n	8016834 <_strtod_l+0x48c>
 8016ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8016caa:	e7e9      	b.n	8016c80 <_strtod_l+0x8d8>
 8016cac:	460b      	mov	r3, r1
 8016cae:	e7e7      	b.n	8016c80 <_strtod_l+0x8d8>
 8016cb0:	ea53 0308 	orrs.w	r3, r3, r8
 8016cb4:	f43f af6f 	beq.w	8016b96 <_strtod_l+0x7ee>
 8016cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cba:	b1cb      	cbz	r3, 8016cf0 <_strtod_l+0x948>
 8016cbc:	ea13 0f0b 	tst.w	r3, fp
 8016cc0:	d0ed      	beq.n	8016c9e <_strtod_l+0x8f6>
 8016cc2:	9a04      	ldr	r2, [sp, #16]
 8016cc4:	4640      	mov	r0, r8
 8016cc6:	4649      	mov	r1, r9
 8016cc8:	f1ba 0f00 	cmp.w	sl, #0
 8016ccc:	d014      	beq.n	8016cf8 <_strtod_l+0x950>
 8016cce:	f7ff fb50 	bl	8016372 <sulp>
 8016cd2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8016cd6:	ec59 8b17 	vmov	r8, r9, d7
 8016cda:	e7e0      	b.n	8016c9e <_strtod_l+0x8f6>
 8016cdc:	4013      	ands	r3, r2
 8016cde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016ce2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016ce6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016cea:	f04f 38ff 	mov.w	r8, #4294967295
 8016cee:	e7d6      	b.n	8016c9e <_strtod_l+0x8f6>
 8016cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016cf2:	ea13 0f08 	tst.w	r3, r8
 8016cf6:	e7e3      	b.n	8016cc0 <_strtod_l+0x918>
 8016cf8:	f7ff fb3b 	bl	8016372 <sulp>
 8016cfc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016d00:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d08:	ec59 8b10 	vmov	r8, r9, d0
 8016d0c:	d1c7      	bne.n	8016c9e <_strtod_l+0x8f6>
 8016d0e:	e5f7      	b.n	8016900 <_strtod_l+0x558>
 8016d10:	4631      	mov	r1, r6
 8016d12:	4628      	mov	r0, r5
 8016d14:	f001 ff90 	bl	8018c38 <__ratio>
 8016d18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016d1c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d24:	d865      	bhi.n	8016df2 <_strtod_l+0xa4a>
 8016d26:	f1ba 0f00 	cmp.w	sl, #0
 8016d2a:	d042      	beq.n	8016db2 <_strtod_l+0xa0a>
 8016d2c:	4b75      	ldr	r3, [pc, #468]	; (8016f04 <_strtod_l+0xb5c>)
 8016d2e:	2200      	movs	r2, #0
 8016d30:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016d34:	4871      	ldr	r0, [pc, #452]	; (8016efc <_strtod_l+0xb54>)
 8016d36:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8016f10 <_strtod_l+0xb68>
 8016d3a:	ea0b 0100 	and.w	r1, fp, r0
 8016d3e:	4561      	cmp	r1, ip
 8016d40:	f040 808e 	bne.w	8016e60 <_strtod_l+0xab8>
 8016d44:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8016d48:	ec49 8b10 	vmov	d0, r8, r9
 8016d4c:	ec43 2b1c 	vmov	d12, r2, r3
 8016d50:	910a      	str	r1, [sp, #40]	; 0x28
 8016d52:	f001 fe99 	bl	8018a88 <__ulp>
 8016d56:	ec49 8b1e 	vmov	d14, r8, r9
 8016d5a:	4868      	ldr	r0, [pc, #416]	; (8016efc <_strtod_l+0xb54>)
 8016d5c:	eeac eb00 	vfma.f64	d14, d12, d0
 8016d60:	ee1e 3a90 	vmov	r3, s29
 8016d64:	4a68      	ldr	r2, [pc, #416]	; (8016f08 <_strtod_l+0xb60>)
 8016d66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d68:	4018      	ands	r0, r3
 8016d6a:	4290      	cmp	r0, r2
 8016d6c:	ec59 8b1e 	vmov	r8, r9, d14
 8016d70:	d94e      	bls.n	8016e10 <_strtod_l+0xa68>
 8016d72:	ee18 3a90 	vmov	r3, s17
 8016d76:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016d7a:	4293      	cmp	r3, r2
 8016d7c:	d104      	bne.n	8016d88 <_strtod_l+0x9e0>
 8016d7e:	ee18 3a10 	vmov	r3, s16
 8016d82:	3301      	adds	r3, #1
 8016d84:	f43f ad4c 	beq.w	8016820 <_strtod_l+0x478>
 8016d88:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8016f00 <_strtod_l+0xb58>
 8016d8c:	f04f 38ff 	mov.w	r8, #4294967295
 8016d90:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d92:	4620      	mov	r0, r4
 8016d94:	f001 fb46 	bl	8018424 <_Bfree>
 8016d98:	4639      	mov	r1, r7
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	f001 fb42 	bl	8018424 <_Bfree>
 8016da0:	4631      	mov	r1, r6
 8016da2:	4620      	mov	r0, r4
 8016da4:	f001 fb3e 	bl	8018424 <_Bfree>
 8016da8:	4629      	mov	r1, r5
 8016daa:	4620      	mov	r0, r4
 8016dac:	f001 fb3a 	bl	8018424 <_Bfree>
 8016db0:	e619      	b.n	80169e6 <_strtod_l+0x63e>
 8016db2:	f1b8 0f00 	cmp.w	r8, #0
 8016db6:	d112      	bne.n	8016dde <_strtod_l+0xa36>
 8016db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016dbc:	b9b3      	cbnz	r3, 8016dec <_strtod_l+0xa44>
 8016dbe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016dc2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016dce:	bf58      	it	pl
 8016dd0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8016dd4:	eeb1 7b4d 	vneg.f64	d7, d13
 8016dd8:	ec53 2b17 	vmov	r2, r3, d7
 8016ddc:	e7aa      	b.n	8016d34 <_strtod_l+0x98c>
 8016dde:	f1b8 0f01 	cmp.w	r8, #1
 8016de2:	d103      	bne.n	8016dec <_strtod_l+0xa44>
 8016de4:	f1b9 0f00 	cmp.w	r9, #0
 8016de8:	f43f ad8a 	beq.w	8016900 <_strtod_l+0x558>
 8016dec:	4b47      	ldr	r3, [pc, #284]	; (8016f0c <_strtod_l+0xb64>)
 8016dee:	2200      	movs	r2, #0
 8016df0:	e79e      	b.n	8016d30 <_strtod_l+0x988>
 8016df2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016df6:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016dfa:	f1ba 0f00 	cmp.w	sl, #0
 8016dfe:	d104      	bne.n	8016e0a <_strtod_l+0xa62>
 8016e00:	eeb1 7b4d 	vneg.f64	d7, d13
 8016e04:	ec53 2b17 	vmov	r2, r3, d7
 8016e08:	e794      	b.n	8016d34 <_strtod_l+0x98c>
 8016e0a:	eeb0 7b4d 	vmov.f64	d7, d13
 8016e0e:	e7f9      	b.n	8016e04 <_strtod_l+0xa5c>
 8016e10:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016e14:	9b04      	ldr	r3, [sp, #16]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d1ba      	bne.n	8016d90 <_strtod_l+0x9e8>
 8016e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016e1e:	0d1b      	lsrs	r3, r3, #20
 8016e20:	051b      	lsls	r3, r3, #20
 8016e22:	4299      	cmp	r1, r3
 8016e24:	d1b4      	bne.n	8016d90 <_strtod_l+0x9e8>
 8016e26:	ec51 0b1d 	vmov	r0, r1, d13
 8016e2a:	f7e9 fc9d 	bl	8000768 <__aeabi_d2lz>
 8016e2e:	f7e9 fc55 	bl	80006dc <__aeabi_l2d>
 8016e32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e36:	ec41 0b17 	vmov	d7, r0, r1
 8016e3a:	ea43 0308 	orr.w	r3, r3, r8
 8016e3e:	ea53 030a 	orrs.w	r3, r3, sl
 8016e42:	ee3d db47 	vsub.f64	d13, d13, d7
 8016e46:	d03c      	beq.n	8016ec2 <_strtod_l+0xb1a>
 8016e48:	eeb4 dbca 	vcmpe.f64	d13, d10
 8016e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e50:	f53f acf0 	bmi.w	8016834 <_strtod_l+0x48c>
 8016e54:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8016e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e5c:	dd98      	ble.n	8016d90 <_strtod_l+0x9e8>
 8016e5e:	e4e9      	b.n	8016834 <_strtod_l+0x48c>
 8016e60:	9804      	ldr	r0, [sp, #16]
 8016e62:	b1f0      	cbz	r0, 8016ea2 <_strtod_l+0xafa>
 8016e64:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8016e68:	d81b      	bhi.n	8016ea2 <_strtod_l+0xafa>
 8016e6a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016ef0 <_strtod_l+0xb48>
 8016e6e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8016e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e76:	d811      	bhi.n	8016e9c <_strtod_l+0xaf4>
 8016e78:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8016e7c:	ee1d 3a10 	vmov	r3, s26
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	bf38      	it	cc
 8016e84:	2301      	movcc	r3, #1
 8016e86:	ee0d 3a10 	vmov	s26, r3
 8016e8a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8016e8e:	f1ba 0f00 	cmp.w	sl, #0
 8016e92:	d113      	bne.n	8016ebc <_strtod_l+0xb14>
 8016e94:	eeb1 7b4d 	vneg.f64	d7, d13
 8016e98:	ec53 2b17 	vmov	r2, r3, d7
 8016e9c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8016ea0:	1a43      	subs	r3, r0, r1
 8016ea2:	eeb0 0b48 	vmov.f64	d0, d8
 8016ea6:	ec43 2b1c 	vmov	d12, r2, r3
 8016eaa:	910a      	str	r1, [sp, #40]	; 0x28
 8016eac:	f001 fdec 	bl	8018a88 <__ulp>
 8016eb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016eb2:	eeac 8b00 	vfma.f64	d8, d12, d0
 8016eb6:	ec59 8b18 	vmov	r8, r9, d8
 8016eba:	e7ab      	b.n	8016e14 <_strtod_l+0xa6c>
 8016ebc:	eeb0 7b4d 	vmov.f64	d7, d13
 8016ec0:	e7ea      	b.n	8016e98 <_strtod_l+0xaf0>
 8016ec2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8016ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eca:	f57f af61 	bpl.w	8016d90 <_strtod_l+0x9e8>
 8016ece:	e4b1      	b.n	8016834 <_strtod_l+0x48c>
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	9308      	str	r3, [sp, #32]
 8016ed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ed8:	6013      	str	r3, [r2, #0]
 8016eda:	f7ff baad 	b.w	8016438 <_strtod_l+0x90>
 8016ede:	2a65      	cmp	r2, #101	; 0x65
 8016ee0:	f43f ab9f 	beq.w	8016622 <_strtod_l+0x27a>
 8016ee4:	2a45      	cmp	r2, #69	; 0x45
 8016ee6:	f43f ab9c 	beq.w	8016622 <_strtod_l+0x27a>
 8016eea:	2101      	movs	r1, #1
 8016eec:	f7ff bbd4 	b.w	8016698 <_strtod_l+0x2f0>
 8016ef0:	ffc00000 	.word	0xffc00000
 8016ef4:	41dfffff 	.word	0x41dfffff
 8016ef8:	000fffff 	.word	0x000fffff
 8016efc:	7ff00000 	.word	0x7ff00000
 8016f00:	7fefffff 	.word	0x7fefffff
 8016f04:	3ff00000 	.word	0x3ff00000
 8016f08:	7c9fffff 	.word	0x7c9fffff
 8016f0c:	bff00000 	.word	0xbff00000
 8016f10:	7fe00000 	.word	0x7fe00000

08016f14 <_strtod_r>:
 8016f14:	4b01      	ldr	r3, [pc, #4]	; (8016f1c <_strtod_r+0x8>)
 8016f16:	f7ff ba47 	b.w	80163a8 <_strtod_l>
 8016f1a:	bf00      	nop
 8016f1c:	24000168 	.word	0x24000168

08016f20 <_strtol_l.constprop.0>:
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f26:	d001      	beq.n	8016f2c <_strtol_l.constprop.0+0xc>
 8016f28:	2b24      	cmp	r3, #36	; 0x24
 8016f2a:	d906      	bls.n	8016f3a <_strtol_l.constprop.0+0x1a>
 8016f2c:	f7fe fb30 	bl	8015590 <__errno>
 8016f30:	2316      	movs	r3, #22
 8016f32:	6003      	str	r3, [r0, #0]
 8016f34:	2000      	movs	r0, #0
 8016f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017020 <_strtol_l.constprop.0+0x100>
 8016f3e:	460d      	mov	r5, r1
 8016f40:	462e      	mov	r6, r5
 8016f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016f4a:	f017 0708 	ands.w	r7, r7, #8
 8016f4e:	d1f7      	bne.n	8016f40 <_strtol_l.constprop.0+0x20>
 8016f50:	2c2d      	cmp	r4, #45	; 0x2d
 8016f52:	d132      	bne.n	8016fba <_strtol_l.constprop.0+0x9a>
 8016f54:	782c      	ldrb	r4, [r5, #0]
 8016f56:	2701      	movs	r7, #1
 8016f58:	1cb5      	adds	r5, r6, #2
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d05b      	beq.n	8017016 <_strtol_l.constprop.0+0xf6>
 8016f5e:	2b10      	cmp	r3, #16
 8016f60:	d109      	bne.n	8016f76 <_strtol_l.constprop.0+0x56>
 8016f62:	2c30      	cmp	r4, #48	; 0x30
 8016f64:	d107      	bne.n	8016f76 <_strtol_l.constprop.0+0x56>
 8016f66:	782c      	ldrb	r4, [r5, #0]
 8016f68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016f6c:	2c58      	cmp	r4, #88	; 0x58
 8016f6e:	d14d      	bne.n	801700c <_strtol_l.constprop.0+0xec>
 8016f70:	786c      	ldrb	r4, [r5, #1]
 8016f72:	2310      	movs	r3, #16
 8016f74:	3502      	adds	r5, #2
 8016f76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016f7e:	f04f 0c00 	mov.w	ip, #0
 8016f82:	fbb8 f9f3 	udiv	r9, r8, r3
 8016f86:	4666      	mov	r6, ip
 8016f88:	fb03 8a19 	mls	sl, r3, r9, r8
 8016f8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016f90:	f1be 0f09 	cmp.w	lr, #9
 8016f94:	d816      	bhi.n	8016fc4 <_strtol_l.constprop.0+0xa4>
 8016f96:	4674      	mov	r4, lr
 8016f98:	42a3      	cmp	r3, r4
 8016f9a:	dd24      	ble.n	8016fe6 <_strtol_l.constprop.0+0xc6>
 8016f9c:	f1bc 0f00 	cmp.w	ip, #0
 8016fa0:	db1e      	blt.n	8016fe0 <_strtol_l.constprop.0+0xc0>
 8016fa2:	45b1      	cmp	r9, r6
 8016fa4:	d31c      	bcc.n	8016fe0 <_strtol_l.constprop.0+0xc0>
 8016fa6:	d101      	bne.n	8016fac <_strtol_l.constprop.0+0x8c>
 8016fa8:	45a2      	cmp	sl, r4
 8016faa:	db19      	blt.n	8016fe0 <_strtol_l.constprop.0+0xc0>
 8016fac:	fb06 4603 	mla	r6, r6, r3, r4
 8016fb0:	f04f 0c01 	mov.w	ip, #1
 8016fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fb8:	e7e8      	b.n	8016f8c <_strtol_l.constprop.0+0x6c>
 8016fba:	2c2b      	cmp	r4, #43	; 0x2b
 8016fbc:	bf04      	itt	eq
 8016fbe:	782c      	ldrbeq	r4, [r5, #0]
 8016fc0:	1cb5      	addeq	r5, r6, #2
 8016fc2:	e7ca      	b.n	8016f5a <_strtol_l.constprop.0+0x3a>
 8016fc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016fc8:	f1be 0f19 	cmp.w	lr, #25
 8016fcc:	d801      	bhi.n	8016fd2 <_strtol_l.constprop.0+0xb2>
 8016fce:	3c37      	subs	r4, #55	; 0x37
 8016fd0:	e7e2      	b.n	8016f98 <_strtol_l.constprop.0+0x78>
 8016fd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016fd6:	f1be 0f19 	cmp.w	lr, #25
 8016fda:	d804      	bhi.n	8016fe6 <_strtol_l.constprop.0+0xc6>
 8016fdc:	3c57      	subs	r4, #87	; 0x57
 8016fde:	e7db      	b.n	8016f98 <_strtol_l.constprop.0+0x78>
 8016fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8016fe4:	e7e6      	b.n	8016fb4 <_strtol_l.constprop.0+0x94>
 8016fe6:	f1bc 0f00 	cmp.w	ip, #0
 8016fea:	da05      	bge.n	8016ff8 <_strtol_l.constprop.0+0xd8>
 8016fec:	2322      	movs	r3, #34	; 0x22
 8016fee:	6003      	str	r3, [r0, #0]
 8016ff0:	4646      	mov	r6, r8
 8016ff2:	b942      	cbnz	r2, 8017006 <_strtol_l.constprop.0+0xe6>
 8016ff4:	4630      	mov	r0, r6
 8016ff6:	e79e      	b.n	8016f36 <_strtol_l.constprop.0+0x16>
 8016ff8:	b107      	cbz	r7, 8016ffc <_strtol_l.constprop.0+0xdc>
 8016ffa:	4276      	negs	r6, r6
 8016ffc:	2a00      	cmp	r2, #0
 8016ffe:	d0f9      	beq.n	8016ff4 <_strtol_l.constprop.0+0xd4>
 8017000:	f1bc 0f00 	cmp.w	ip, #0
 8017004:	d000      	beq.n	8017008 <_strtol_l.constprop.0+0xe8>
 8017006:	1e69      	subs	r1, r5, #1
 8017008:	6011      	str	r1, [r2, #0]
 801700a:	e7f3      	b.n	8016ff4 <_strtol_l.constprop.0+0xd4>
 801700c:	2430      	movs	r4, #48	; 0x30
 801700e:	2b00      	cmp	r3, #0
 8017010:	d1b1      	bne.n	8016f76 <_strtol_l.constprop.0+0x56>
 8017012:	2308      	movs	r3, #8
 8017014:	e7af      	b.n	8016f76 <_strtol_l.constprop.0+0x56>
 8017016:	2c30      	cmp	r4, #48	; 0x30
 8017018:	d0a5      	beq.n	8016f66 <_strtol_l.constprop.0+0x46>
 801701a:	230a      	movs	r3, #10
 801701c:	e7ab      	b.n	8016f76 <_strtol_l.constprop.0+0x56>
 801701e:	bf00      	nop
 8017020:	0801a471 	.word	0x0801a471

08017024 <_strtol_r>:
 8017024:	f7ff bf7c 	b.w	8016f20 <_strtol_l.constprop.0>

08017028 <_write_r>:
 8017028:	b538      	push	{r3, r4, r5, lr}
 801702a:	4d07      	ldr	r5, [pc, #28]	; (8017048 <_write_r+0x20>)
 801702c:	4604      	mov	r4, r0
 801702e:	4608      	mov	r0, r1
 8017030:	4611      	mov	r1, r2
 8017032:	2200      	movs	r2, #0
 8017034:	602a      	str	r2, [r5, #0]
 8017036:	461a      	mov	r2, r3
 8017038:	f7eb fe7d 	bl	8002d36 <_write>
 801703c:	1c43      	adds	r3, r0, #1
 801703e:	d102      	bne.n	8017046 <_write_r+0x1e>
 8017040:	682b      	ldr	r3, [r5, #0]
 8017042:	b103      	cbz	r3, 8017046 <_write_r+0x1e>
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	bd38      	pop	{r3, r4, r5, pc}
 8017048:	240028fc 	.word	0x240028fc

0801704c <_close_r>:
 801704c:	b538      	push	{r3, r4, r5, lr}
 801704e:	4d06      	ldr	r5, [pc, #24]	; (8017068 <_close_r+0x1c>)
 8017050:	2300      	movs	r3, #0
 8017052:	4604      	mov	r4, r0
 8017054:	4608      	mov	r0, r1
 8017056:	602b      	str	r3, [r5, #0]
 8017058:	f7eb fe89 	bl	8002d6e <_close>
 801705c:	1c43      	adds	r3, r0, #1
 801705e:	d102      	bne.n	8017066 <_close_r+0x1a>
 8017060:	682b      	ldr	r3, [r5, #0]
 8017062:	b103      	cbz	r3, 8017066 <_close_r+0x1a>
 8017064:	6023      	str	r3, [r4, #0]
 8017066:	bd38      	pop	{r3, r4, r5, pc}
 8017068:	240028fc 	.word	0x240028fc

0801706c <quorem>:
 801706c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017070:	6903      	ldr	r3, [r0, #16]
 8017072:	690c      	ldr	r4, [r1, #16]
 8017074:	42a3      	cmp	r3, r4
 8017076:	4607      	mov	r7, r0
 8017078:	f2c0 8081 	blt.w	801717e <quorem+0x112>
 801707c:	3c01      	subs	r4, #1
 801707e:	f101 0814 	add.w	r8, r1, #20
 8017082:	f100 0514 	add.w	r5, r0, #20
 8017086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801708a:	9301      	str	r3, [sp, #4]
 801708c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017094:	3301      	adds	r3, #1
 8017096:	429a      	cmp	r2, r3
 8017098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801709c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80170a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80170a4:	d331      	bcc.n	801710a <quorem+0x9e>
 80170a6:	f04f 0e00 	mov.w	lr, #0
 80170aa:	4640      	mov	r0, r8
 80170ac:	46ac      	mov	ip, r5
 80170ae:	46f2      	mov	sl, lr
 80170b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80170b4:	b293      	uxth	r3, r2
 80170b6:	fb06 e303 	mla	r3, r6, r3, lr
 80170ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80170be:	b29b      	uxth	r3, r3
 80170c0:	ebaa 0303 	sub.w	r3, sl, r3
 80170c4:	f8dc a000 	ldr.w	sl, [ip]
 80170c8:	0c12      	lsrs	r2, r2, #16
 80170ca:	fa13 f38a 	uxtah	r3, r3, sl
 80170ce:	fb06 e202 	mla	r2, r6, r2, lr
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	9b00      	ldr	r3, [sp, #0]
 80170d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80170da:	b292      	uxth	r2, r2
 80170dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80170e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80170e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80170e8:	4581      	cmp	r9, r0
 80170ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170ee:	f84c 3b04 	str.w	r3, [ip], #4
 80170f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80170f6:	d2db      	bcs.n	80170b0 <quorem+0x44>
 80170f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80170fc:	b92b      	cbnz	r3, 801710a <quorem+0x9e>
 80170fe:	9b01      	ldr	r3, [sp, #4]
 8017100:	3b04      	subs	r3, #4
 8017102:	429d      	cmp	r5, r3
 8017104:	461a      	mov	r2, r3
 8017106:	d32e      	bcc.n	8017166 <quorem+0xfa>
 8017108:	613c      	str	r4, [r7, #16]
 801710a:	4638      	mov	r0, r7
 801710c:	f001 fc16 	bl	801893c <__mcmp>
 8017110:	2800      	cmp	r0, #0
 8017112:	db24      	blt.n	801715e <quorem+0xf2>
 8017114:	3601      	adds	r6, #1
 8017116:	4628      	mov	r0, r5
 8017118:	f04f 0c00 	mov.w	ip, #0
 801711c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017120:	f8d0 e000 	ldr.w	lr, [r0]
 8017124:	b293      	uxth	r3, r2
 8017126:	ebac 0303 	sub.w	r3, ip, r3
 801712a:	0c12      	lsrs	r2, r2, #16
 801712c:	fa13 f38e 	uxtah	r3, r3, lr
 8017130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017138:	b29b      	uxth	r3, r3
 801713a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801713e:	45c1      	cmp	r9, r8
 8017140:	f840 3b04 	str.w	r3, [r0], #4
 8017144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017148:	d2e8      	bcs.n	801711c <quorem+0xb0>
 801714a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801714e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017152:	b922      	cbnz	r2, 801715e <quorem+0xf2>
 8017154:	3b04      	subs	r3, #4
 8017156:	429d      	cmp	r5, r3
 8017158:	461a      	mov	r2, r3
 801715a:	d30a      	bcc.n	8017172 <quorem+0x106>
 801715c:	613c      	str	r4, [r7, #16]
 801715e:	4630      	mov	r0, r6
 8017160:	b003      	add	sp, #12
 8017162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017166:	6812      	ldr	r2, [r2, #0]
 8017168:	3b04      	subs	r3, #4
 801716a:	2a00      	cmp	r2, #0
 801716c:	d1cc      	bne.n	8017108 <quorem+0x9c>
 801716e:	3c01      	subs	r4, #1
 8017170:	e7c7      	b.n	8017102 <quorem+0x96>
 8017172:	6812      	ldr	r2, [r2, #0]
 8017174:	3b04      	subs	r3, #4
 8017176:	2a00      	cmp	r2, #0
 8017178:	d1f0      	bne.n	801715c <quorem+0xf0>
 801717a:	3c01      	subs	r4, #1
 801717c:	e7eb      	b.n	8017156 <quorem+0xea>
 801717e:	2000      	movs	r0, #0
 8017180:	e7ee      	b.n	8017160 <quorem+0xf4>
 8017182:	0000      	movs	r0, r0
 8017184:	0000      	movs	r0, r0
	...

08017188 <_dtoa_r>:
 8017188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801718c:	ed2d 8b02 	vpush	{d8}
 8017190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017192:	b091      	sub	sp, #68	; 0x44
 8017194:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017198:	ec59 8b10 	vmov	r8, r9, d0
 801719c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801719e:	9106      	str	r1, [sp, #24]
 80171a0:	4606      	mov	r6, r0
 80171a2:	9208      	str	r2, [sp, #32]
 80171a4:	930c      	str	r3, [sp, #48]	; 0x30
 80171a6:	b975      	cbnz	r5, 80171c6 <_dtoa_r+0x3e>
 80171a8:	2010      	movs	r0, #16
 80171aa:	f001 f8e1 	bl	8018370 <malloc>
 80171ae:	4602      	mov	r2, r0
 80171b0:	6270      	str	r0, [r6, #36]	; 0x24
 80171b2:	b920      	cbnz	r0, 80171be <_dtoa_r+0x36>
 80171b4:	4baa      	ldr	r3, [pc, #680]	; (8017460 <_dtoa_r+0x2d8>)
 80171b6:	21ea      	movs	r1, #234	; 0xea
 80171b8:	48aa      	ldr	r0, [pc, #680]	; (8017464 <_dtoa_r+0x2dc>)
 80171ba:	f002 f84f 	bl	801925c <__assert_func>
 80171be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80171c2:	6005      	str	r5, [r0, #0]
 80171c4:	60c5      	str	r5, [r0, #12]
 80171c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80171c8:	6819      	ldr	r1, [r3, #0]
 80171ca:	b151      	cbz	r1, 80171e2 <_dtoa_r+0x5a>
 80171cc:	685a      	ldr	r2, [r3, #4]
 80171ce:	604a      	str	r2, [r1, #4]
 80171d0:	2301      	movs	r3, #1
 80171d2:	4093      	lsls	r3, r2
 80171d4:	608b      	str	r3, [r1, #8]
 80171d6:	4630      	mov	r0, r6
 80171d8:	f001 f924 	bl	8018424 <_Bfree>
 80171dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80171de:	2200      	movs	r2, #0
 80171e0:	601a      	str	r2, [r3, #0]
 80171e2:	f1b9 0300 	subs.w	r3, r9, #0
 80171e6:	bfbb      	ittet	lt
 80171e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80171ec:	9303      	strlt	r3, [sp, #12]
 80171ee:	2300      	movge	r3, #0
 80171f0:	2201      	movlt	r2, #1
 80171f2:	bfac      	ite	ge
 80171f4:	6023      	strge	r3, [r4, #0]
 80171f6:	6022      	strlt	r2, [r4, #0]
 80171f8:	4b9b      	ldr	r3, [pc, #620]	; (8017468 <_dtoa_r+0x2e0>)
 80171fa:	9c03      	ldr	r4, [sp, #12]
 80171fc:	43a3      	bics	r3, r4
 80171fe:	d11c      	bne.n	801723a <_dtoa_r+0xb2>
 8017200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017202:	f242 730f 	movw	r3, #9999	; 0x270f
 8017206:	6013      	str	r3, [r2, #0]
 8017208:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801720c:	ea53 0308 	orrs.w	r3, r3, r8
 8017210:	f000 84fd 	beq.w	8017c0e <_dtoa_r+0xa86>
 8017214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017216:	b963      	cbnz	r3, 8017232 <_dtoa_r+0xaa>
 8017218:	4b94      	ldr	r3, [pc, #592]	; (801746c <_dtoa_r+0x2e4>)
 801721a:	e01f      	b.n	801725c <_dtoa_r+0xd4>
 801721c:	4b94      	ldr	r3, [pc, #592]	; (8017470 <_dtoa_r+0x2e8>)
 801721e:	9301      	str	r3, [sp, #4]
 8017220:	3308      	adds	r3, #8
 8017222:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017224:	6013      	str	r3, [r2, #0]
 8017226:	9801      	ldr	r0, [sp, #4]
 8017228:	b011      	add	sp, #68	; 0x44
 801722a:	ecbd 8b02 	vpop	{d8}
 801722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017232:	4b8e      	ldr	r3, [pc, #568]	; (801746c <_dtoa_r+0x2e4>)
 8017234:	9301      	str	r3, [sp, #4]
 8017236:	3303      	adds	r3, #3
 8017238:	e7f3      	b.n	8017222 <_dtoa_r+0x9a>
 801723a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801723e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017246:	d10b      	bne.n	8017260 <_dtoa_r+0xd8>
 8017248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801724a:	2301      	movs	r3, #1
 801724c:	6013      	str	r3, [r2, #0]
 801724e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017250:	2b00      	cmp	r3, #0
 8017252:	f000 84d9 	beq.w	8017c08 <_dtoa_r+0xa80>
 8017256:	4887      	ldr	r0, [pc, #540]	; (8017474 <_dtoa_r+0x2ec>)
 8017258:	6018      	str	r0, [r3, #0]
 801725a:	1e43      	subs	r3, r0, #1
 801725c:	9301      	str	r3, [sp, #4]
 801725e:	e7e2      	b.n	8017226 <_dtoa_r+0x9e>
 8017260:	a90f      	add	r1, sp, #60	; 0x3c
 8017262:	aa0e      	add	r2, sp, #56	; 0x38
 8017264:	4630      	mov	r0, r6
 8017266:	eeb0 0b48 	vmov.f64	d0, d8
 801726a:	f001 fc89 	bl	8018b80 <__d2b>
 801726e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017272:	4605      	mov	r5, r0
 8017274:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017276:	2900      	cmp	r1, #0
 8017278:	d046      	beq.n	8017308 <_dtoa_r+0x180>
 801727a:	ee18 4a90 	vmov	r4, s17
 801727e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017282:	ec53 2b18 	vmov	r2, r3, d8
 8017286:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801728a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801728e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017292:	2400      	movs	r4, #0
 8017294:	ec43 2b16 	vmov	d6, r2, r3
 8017298:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801729c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017448 <_dtoa_r+0x2c0>
 80172a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80172a4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8017450 <_dtoa_r+0x2c8>
 80172a8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80172ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017458 <_dtoa_r+0x2d0>
 80172b0:	ee07 1a90 	vmov	s15, r1
 80172b4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80172b8:	eeb0 7b46 	vmov.f64	d7, d6
 80172bc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80172c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80172c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80172c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172cc:	ee16 ba90 	vmov	fp, s13
 80172d0:	940a      	str	r4, [sp, #40]	; 0x28
 80172d2:	d508      	bpl.n	80172e6 <_dtoa_r+0x15e>
 80172d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80172d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80172dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e0:	bf18      	it	ne
 80172e2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80172e6:	f1bb 0f16 	cmp.w	fp, #22
 80172ea:	d82f      	bhi.n	801734c <_dtoa_r+0x1c4>
 80172ec:	4b62      	ldr	r3, [pc, #392]	; (8017478 <_dtoa_r+0x2f0>)
 80172ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80172f2:	ed93 7b00 	vldr	d7, [r3]
 80172f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80172fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fe:	d501      	bpl.n	8017304 <_dtoa_r+0x17c>
 8017300:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017304:	2300      	movs	r3, #0
 8017306:	e022      	b.n	801734e <_dtoa_r+0x1c6>
 8017308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801730a:	4401      	add	r1, r0
 801730c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017310:	2b20      	cmp	r3, #32
 8017312:	bfc1      	itttt	gt
 8017314:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017318:	fa04 f303 	lslgt.w	r3, r4, r3
 801731c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017320:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017324:	bfd6      	itet	le
 8017326:	f1c3 0320 	rsble	r3, r3, #32
 801732a:	ea43 0808 	orrgt.w	r8, r3, r8
 801732e:	fa08 f803 	lslle.w	r8, r8, r3
 8017332:	ee07 8a90 	vmov	s15, r8
 8017336:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801733a:	3901      	subs	r1, #1
 801733c:	ee17 4a90 	vmov	r4, s15
 8017340:	ec53 2b17 	vmov	r2, r3, d7
 8017344:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017348:	2401      	movs	r4, #1
 801734a:	e7a3      	b.n	8017294 <_dtoa_r+0x10c>
 801734c:	2301      	movs	r3, #1
 801734e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017350:	1a43      	subs	r3, r0, r1
 8017352:	1e5a      	subs	r2, r3, #1
 8017354:	bf45      	ittet	mi
 8017356:	f1c3 0301 	rsbmi	r3, r3, #1
 801735a:	9304      	strmi	r3, [sp, #16]
 801735c:	2300      	movpl	r3, #0
 801735e:	2300      	movmi	r3, #0
 8017360:	9205      	str	r2, [sp, #20]
 8017362:	bf54      	ite	pl
 8017364:	9304      	strpl	r3, [sp, #16]
 8017366:	9305      	strmi	r3, [sp, #20]
 8017368:	f1bb 0f00 	cmp.w	fp, #0
 801736c:	db18      	blt.n	80173a0 <_dtoa_r+0x218>
 801736e:	9b05      	ldr	r3, [sp, #20]
 8017370:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017374:	445b      	add	r3, fp
 8017376:	9305      	str	r3, [sp, #20]
 8017378:	2300      	movs	r3, #0
 801737a:	9a06      	ldr	r2, [sp, #24]
 801737c:	2a09      	cmp	r2, #9
 801737e:	d849      	bhi.n	8017414 <_dtoa_r+0x28c>
 8017380:	2a05      	cmp	r2, #5
 8017382:	bfc4      	itt	gt
 8017384:	3a04      	subgt	r2, #4
 8017386:	9206      	strgt	r2, [sp, #24]
 8017388:	9a06      	ldr	r2, [sp, #24]
 801738a:	f1a2 0202 	sub.w	r2, r2, #2
 801738e:	bfcc      	ite	gt
 8017390:	2400      	movgt	r4, #0
 8017392:	2401      	movle	r4, #1
 8017394:	2a03      	cmp	r2, #3
 8017396:	d848      	bhi.n	801742a <_dtoa_r+0x2a2>
 8017398:	e8df f002 	tbb	[pc, r2]
 801739c:	3a2c2e0b 	.word	0x3a2c2e0b
 80173a0:	9b04      	ldr	r3, [sp, #16]
 80173a2:	2200      	movs	r2, #0
 80173a4:	eba3 030b 	sub.w	r3, r3, fp
 80173a8:	9304      	str	r3, [sp, #16]
 80173aa:	9209      	str	r2, [sp, #36]	; 0x24
 80173ac:	f1cb 0300 	rsb	r3, fp, #0
 80173b0:	e7e3      	b.n	801737a <_dtoa_r+0x1f2>
 80173b2:	2200      	movs	r2, #0
 80173b4:	9207      	str	r2, [sp, #28]
 80173b6:	9a08      	ldr	r2, [sp, #32]
 80173b8:	2a00      	cmp	r2, #0
 80173ba:	dc39      	bgt.n	8017430 <_dtoa_r+0x2a8>
 80173bc:	f04f 0a01 	mov.w	sl, #1
 80173c0:	46d1      	mov	r9, sl
 80173c2:	4652      	mov	r2, sl
 80173c4:	f8cd a020 	str.w	sl, [sp, #32]
 80173c8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80173ca:	2100      	movs	r1, #0
 80173cc:	6079      	str	r1, [r7, #4]
 80173ce:	2004      	movs	r0, #4
 80173d0:	f100 0c14 	add.w	ip, r0, #20
 80173d4:	4594      	cmp	ip, r2
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	d92f      	bls.n	801743a <_dtoa_r+0x2b2>
 80173da:	4630      	mov	r0, r6
 80173dc:	930d      	str	r3, [sp, #52]	; 0x34
 80173de:	f000 ffe1 	bl	80183a4 <_Balloc>
 80173e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173e4:	9001      	str	r0, [sp, #4]
 80173e6:	4602      	mov	r2, r0
 80173e8:	2800      	cmp	r0, #0
 80173ea:	d149      	bne.n	8017480 <_dtoa_r+0x2f8>
 80173ec:	4b23      	ldr	r3, [pc, #140]	; (801747c <_dtoa_r+0x2f4>)
 80173ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80173f2:	e6e1      	b.n	80171b8 <_dtoa_r+0x30>
 80173f4:	2201      	movs	r2, #1
 80173f6:	e7dd      	b.n	80173b4 <_dtoa_r+0x22c>
 80173f8:	2200      	movs	r2, #0
 80173fa:	9207      	str	r2, [sp, #28]
 80173fc:	9a08      	ldr	r2, [sp, #32]
 80173fe:	eb0b 0a02 	add.w	sl, fp, r2
 8017402:	f10a 0901 	add.w	r9, sl, #1
 8017406:	464a      	mov	r2, r9
 8017408:	2a01      	cmp	r2, #1
 801740a:	bfb8      	it	lt
 801740c:	2201      	movlt	r2, #1
 801740e:	e7db      	b.n	80173c8 <_dtoa_r+0x240>
 8017410:	2201      	movs	r2, #1
 8017412:	e7f2      	b.n	80173fa <_dtoa_r+0x272>
 8017414:	2401      	movs	r4, #1
 8017416:	2200      	movs	r2, #0
 8017418:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801741c:	f04f 3aff 	mov.w	sl, #4294967295
 8017420:	2100      	movs	r1, #0
 8017422:	46d1      	mov	r9, sl
 8017424:	2212      	movs	r2, #18
 8017426:	9108      	str	r1, [sp, #32]
 8017428:	e7ce      	b.n	80173c8 <_dtoa_r+0x240>
 801742a:	2201      	movs	r2, #1
 801742c:	9207      	str	r2, [sp, #28]
 801742e:	e7f5      	b.n	801741c <_dtoa_r+0x294>
 8017430:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017434:	46d1      	mov	r9, sl
 8017436:	4652      	mov	r2, sl
 8017438:	e7c6      	b.n	80173c8 <_dtoa_r+0x240>
 801743a:	3101      	adds	r1, #1
 801743c:	6079      	str	r1, [r7, #4]
 801743e:	0040      	lsls	r0, r0, #1
 8017440:	e7c6      	b.n	80173d0 <_dtoa_r+0x248>
 8017442:	bf00      	nop
 8017444:	f3af 8000 	nop.w
 8017448:	636f4361 	.word	0x636f4361
 801744c:	3fd287a7 	.word	0x3fd287a7
 8017450:	8b60c8b3 	.word	0x8b60c8b3
 8017454:	3fc68a28 	.word	0x3fc68a28
 8017458:	509f79fb 	.word	0x509f79fb
 801745c:	3fd34413 	.word	0x3fd34413
 8017460:	0801a57e 	.word	0x0801a57e
 8017464:	0801a595 	.word	0x0801a595
 8017468:	7ff00000 	.word	0x7ff00000
 801746c:	0801a57a 	.word	0x0801a57a
 8017470:	0801a571 	.word	0x0801a571
 8017474:	0801a3f1 	.word	0x0801a3f1
 8017478:	0801a700 	.word	0x0801a700
 801747c:	0801a5f0 	.word	0x0801a5f0
 8017480:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017482:	9901      	ldr	r1, [sp, #4]
 8017484:	6011      	str	r1, [r2, #0]
 8017486:	f1b9 0f0e 	cmp.w	r9, #14
 801748a:	d86c      	bhi.n	8017566 <_dtoa_r+0x3de>
 801748c:	2c00      	cmp	r4, #0
 801748e:	d06a      	beq.n	8017566 <_dtoa_r+0x3de>
 8017490:	f1bb 0f00 	cmp.w	fp, #0
 8017494:	f340 80a0 	ble.w	80175d8 <_dtoa_r+0x450>
 8017498:	49c1      	ldr	r1, [pc, #772]	; (80177a0 <_dtoa_r+0x618>)
 801749a:	f00b 020f 	and.w	r2, fp, #15
 801749e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80174a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80174a6:	ed92 7b00 	vldr	d7, [r2]
 80174aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80174ae:	f000 8087 	beq.w	80175c0 <_dtoa_r+0x438>
 80174b2:	4abc      	ldr	r2, [pc, #752]	; (80177a4 <_dtoa_r+0x61c>)
 80174b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80174b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80174bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80174c0:	f001 010f 	and.w	r1, r1, #15
 80174c4:	2203      	movs	r2, #3
 80174c6:	48b7      	ldr	r0, [pc, #732]	; (80177a4 <_dtoa_r+0x61c>)
 80174c8:	2900      	cmp	r1, #0
 80174ca:	d17b      	bne.n	80175c4 <_dtoa_r+0x43c>
 80174cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80174d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80174d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80174d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174da:	2900      	cmp	r1, #0
 80174dc:	f000 80a2 	beq.w	8017624 <_dtoa_r+0x49c>
 80174e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80174e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80174e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80174ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f0:	f140 8098 	bpl.w	8017624 <_dtoa_r+0x49c>
 80174f4:	f1b9 0f00 	cmp.w	r9, #0
 80174f8:	f000 8094 	beq.w	8017624 <_dtoa_r+0x49c>
 80174fc:	f1ba 0f00 	cmp.w	sl, #0
 8017500:	dd2f      	ble.n	8017562 <_dtoa_r+0x3da>
 8017502:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017506:	ee27 7b06 	vmul.f64	d7, d7, d6
 801750a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801750e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017512:	3201      	adds	r2, #1
 8017514:	4650      	mov	r0, sl
 8017516:	ed9d 6b02 	vldr	d6, [sp, #8]
 801751a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801751e:	ee07 2a90 	vmov	s15, r2
 8017522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017526:	eea7 5b06 	vfma.f64	d5, d7, d6
 801752a:	ee15 4a90 	vmov	r4, s11
 801752e:	ec52 1b15 	vmov	r1, r2, d5
 8017532:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017536:	2800      	cmp	r0, #0
 8017538:	d177      	bne.n	801762a <_dtoa_r+0x4a2>
 801753a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801753e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017542:	ec42 1b17 	vmov	d7, r1, r2
 8017546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754e:	f300 8263 	bgt.w	8017a18 <_dtoa_r+0x890>
 8017552:	eeb1 7b47 	vneg.f64	d7, d7
 8017556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755e:	f100 8258 	bmi.w	8017a12 <_dtoa_r+0x88a>
 8017562:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017568:	2a00      	cmp	r2, #0
 801756a:	f2c0 811d 	blt.w	80177a8 <_dtoa_r+0x620>
 801756e:	f1bb 0f0e 	cmp.w	fp, #14
 8017572:	f300 8119 	bgt.w	80177a8 <_dtoa_r+0x620>
 8017576:	4b8a      	ldr	r3, [pc, #552]	; (80177a0 <_dtoa_r+0x618>)
 8017578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801757c:	ed93 6b00 	vldr	d6, [r3]
 8017580:	9b08      	ldr	r3, [sp, #32]
 8017582:	2b00      	cmp	r3, #0
 8017584:	f280 80b7 	bge.w	80176f6 <_dtoa_r+0x56e>
 8017588:	f1b9 0f00 	cmp.w	r9, #0
 801758c:	f300 80b3 	bgt.w	80176f6 <_dtoa_r+0x56e>
 8017590:	f040 823f 	bne.w	8017a12 <_dtoa_r+0x88a>
 8017594:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017598:	ee26 6b07 	vmul.f64	d6, d6, d7
 801759c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80175a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80175a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a8:	464c      	mov	r4, r9
 80175aa:	464f      	mov	r7, r9
 80175ac:	f280 8215 	bge.w	80179da <_dtoa_r+0x852>
 80175b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80175b4:	2331      	movs	r3, #49	; 0x31
 80175b6:	f808 3b01 	strb.w	r3, [r8], #1
 80175ba:	f10b 0b01 	add.w	fp, fp, #1
 80175be:	e211      	b.n	80179e4 <_dtoa_r+0x85c>
 80175c0:	2202      	movs	r2, #2
 80175c2:	e780      	b.n	80174c6 <_dtoa_r+0x33e>
 80175c4:	07cc      	lsls	r4, r1, #31
 80175c6:	d504      	bpl.n	80175d2 <_dtoa_r+0x44a>
 80175c8:	ed90 6b00 	vldr	d6, [r0]
 80175cc:	3201      	adds	r2, #1
 80175ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80175d2:	1049      	asrs	r1, r1, #1
 80175d4:	3008      	adds	r0, #8
 80175d6:	e777      	b.n	80174c8 <_dtoa_r+0x340>
 80175d8:	d022      	beq.n	8017620 <_dtoa_r+0x498>
 80175da:	f1cb 0100 	rsb	r1, fp, #0
 80175de:	4a70      	ldr	r2, [pc, #448]	; (80177a0 <_dtoa_r+0x618>)
 80175e0:	f001 000f 	and.w	r0, r1, #15
 80175e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80175e8:	ed92 7b00 	vldr	d7, [r2]
 80175ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80175f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80175f4:	486b      	ldr	r0, [pc, #428]	; (80177a4 <_dtoa_r+0x61c>)
 80175f6:	1109      	asrs	r1, r1, #4
 80175f8:	2400      	movs	r4, #0
 80175fa:	2202      	movs	r2, #2
 80175fc:	b929      	cbnz	r1, 801760a <_dtoa_r+0x482>
 80175fe:	2c00      	cmp	r4, #0
 8017600:	f43f af6a 	beq.w	80174d8 <_dtoa_r+0x350>
 8017604:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017608:	e766      	b.n	80174d8 <_dtoa_r+0x350>
 801760a:	07cf      	lsls	r7, r1, #31
 801760c:	d505      	bpl.n	801761a <_dtoa_r+0x492>
 801760e:	ed90 6b00 	vldr	d6, [r0]
 8017612:	3201      	adds	r2, #1
 8017614:	2401      	movs	r4, #1
 8017616:	ee27 7b06 	vmul.f64	d7, d7, d6
 801761a:	1049      	asrs	r1, r1, #1
 801761c:	3008      	adds	r0, #8
 801761e:	e7ed      	b.n	80175fc <_dtoa_r+0x474>
 8017620:	2202      	movs	r2, #2
 8017622:	e759      	b.n	80174d8 <_dtoa_r+0x350>
 8017624:	465f      	mov	r7, fp
 8017626:	4648      	mov	r0, r9
 8017628:	e775      	b.n	8017516 <_dtoa_r+0x38e>
 801762a:	ec42 1b17 	vmov	d7, r1, r2
 801762e:	4a5c      	ldr	r2, [pc, #368]	; (80177a0 <_dtoa_r+0x618>)
 8017630:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017634:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017638:	9a01      	ldr	r2, [sp, #4]
 801763a:	1814      	adds	r4, r2, r0
 801763c:	9a07      	ldr	r2, [sp, #28]
 801763e:	b352      	cbz	r2, 8017696 <_dtoa_r+0x50e>
 8017640:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017644:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017648:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801764c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017650:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017654:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017658:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801765c:	ee14 2a90 	vmov	r2, s9
 8017660:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017664:	3230      	adds	r2, #48	; 0x30
 8017666:	ee36 6b45 	vsub.f64	d6, d6, d5
 801766a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017672:	f808 2b01 	strb.w	r2, [r8], #1
 8017676:	d439      	bmi.n	80176ec <_dtoa_r+0x564>
 8017678:	ee32 5b46 	vsub.f64	d5, d2, d6
 801767c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017684:	d472      	bmi.n	801776c <_dtoa_r+0x5e4>
 8017686:	45a0      	cmp	r8, r4
 8017688:	f43f af6b 	beq.w	8017562 <_dtoa_r+0x3da>
 801768c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017690:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017694:	e7e0      	b.n	8017658 <_dtoa_r+0x4d0>
 8017696:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801769a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801769e:	4621      	mov	r1, r4
 80176a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80176a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80176a8:	ee14 2a90 	vmov	r2, s9
 80176ac:	3230      	adds	r2, #48	; 0x30
 80176ae:	f808 2b01 	strb.w	r2, [r8], #1
 80176b2:	45a0      	cmp	r8, r4
 80176b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80176b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80176bc:	d118      	bne.n	80176f0 <_dtoa_r+0x568>
 80176be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80176c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80176c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80176ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ce:	dc4d      	bgt.n	801776c <_dtoa_r+0x5e4>
 80176d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80176d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80176d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176dc:	f57f af41 	bpl.w	8017562 <_dtoa_r+0x3da>
 80176e0:	4688      	mov	r8, r1
 80176e2:	3901      	subs	r1, #1
 80176e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80176e8:	2b30      	cmp	r3, #48	; 0x30
 80176ea:	d0f9      	beq.n	80176e0 <_dtoa_r+0x558>
 80176ec:	46bb      	mov	fp, r7
 80176ee:	e02a      	b.n	8017746 <_dtoa_r+0x5be>
 80176f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80176f4:	e7d6      	b.n	80176a4 <_dtoa_r+0x51c>
 80176f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80176fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80176fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017702:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017706:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801770a:	ee15 3a10 	vmov	r3, s10
 801770e:	3330      	adds	r3, #48	; 0x30
 8017710:	f808 3b01 	strb.w	r3, [r8], #1
 8017714:	9b01      	ldr	r3, [sp, #4]
 8017716:	eba8 0303 	sub.w	r3, r8, r3
 801771a:	4599      	cmp	r9, r3
 801771c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017720:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017724:	d133      	bne.n	801778e <_dtoa_r+0x606>
 8017726:	ee37 7b07 	vadd.f64	d7, d7, d7
 801772a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017732:	dc1a      	bgt.n	801776a <_dtoa_r+0x5e2>
 8017734:	eeb4 7b46 	vcmp.f64	d7, d6
 8017738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773c:	d103      	bne.n	8017746 <_dtoa_r+0x5be>
 801773e:	ee15 3a10 	vmov	r3, s10
 8017742:	07d9      	lsls	r1, r3, #31
 8017744:	d411      	bmi.n	801776a <_dtoa_r+0x5e2>
 8017746:	4629      	mov	r1, r5
 8017748:	4630      	mov	r0, r6
 801774a:	f000 fe6b 	bl	8018424 <_Bfree>
 801774e:	2300      	movs	r3, #0
 8017750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017752:	f888 3000 	strb.w	r3, [r8]
 8017756:	f10b 0301 	add.w	r3, fp, #1
 801775a:	6013      	str	r3, [r2, #0]
 801775c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801775e:	2b00      	cmp	r3, #0
 8017760:	f43f ad61 	beq.w	8017226 <_dtoa_r+0x9e>
 8017764:	f8c3 8000 	str.w	r8, [r3]
 8017768:	e55d      	b.n	8017226 <_dtoa_r+0x9e>
 801776a:	465f      	mov	r7, fp
 801776c:	4643      	mov	r3, r8
 801776e:	4698      	mov	r8, r3
 8017770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017774:	2a39      	cmp	r2, #57	; 0x39
 8017776:	d106      	bne.n	8017786 <_dtoa_r+0x5fe>
 8017778:	9a01      	ldr	r2, [sp, #4]
 801777a:	429a      	cmp	r2, r3
 801777c:	d1f7      	bne.n	801776e <_dtoa_r+0x5e6>
 801777e:	9901      	ldr	r1, [sp, #4]
 8017780:	2230      	movs	r2, #48	; 0x30
 8017782:	3701      	adds	r7, #1
 8017784:	700a      	strb	r2, [r1, #0]
 8017786:	781a      	ldrb	r2, [r3, #0]
 8017788:	3201      	adds	r2, #1
 801778a:	701a      	strb	r2, [r3, #0]
 801778c:	e7ae      	b.n	80176ec <_dtoa_r+0x564>
 801778e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801779a:	d1b2      	bne.n	8017702 <_dtoa_r+0x57a>
 801779c:	e7d3      	b.n	8017746 <_dtoa_r+0x5be>
 801779e:	bf00      	nop
 80177a0:	0801a700 	.word	0x0801a700
 80177a4:	0801a6d8 	.word	0x0801a6d8
 80177a8:	9907      	ldr	r1, [sp, #28]
 80177aa:	2900      	cmp	r1, #0
 80177ac:	f000 80d0 	beq.w	8017950 <_dtoa_r+0x7c8>
 80177b0:	9906      	ldr	r1, [sp, #24]
 80177b2:	2901      	cmp	r1, #1
 80177b4:	f300 80b4 	bgt.w	8017920 <_dtoa_r+0x798>
 80177b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80177ba:	2900      	cmp	r1, #0
 80177bc:	f000 80ac 	beq.w	8017918 <_dtoa_r+0x790>
 80177c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80177c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80177c8:	461c      	mov	r4, r3
 80177ca:	930a      	str	r3, [sp, #40]	; 0x28
 80177cc:	9b04      	ldr	r3, [sp, #16]
 80177ce:	4413      	add	r3, r2
 80177d0:	9304      	str	r3, [sp, #16]
 80177d2:	9b05      	ldr	r3, [sp, #20]
 80177d4:	2101      	movs	r1, #1
 80177d6:	4413      	add	r3, r2
 80177d8:	4630      	mov	r0, r6
 80177da:	9305      	str	r3, [sp, #20]
 80177dc:	f000 ff24 	bl	8018628 <__i2b>
 80177e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177e2:	4607      	mov	r7, r0
 80177e4:	f1b8 0f00 	cmp.w	r8, #0
 80177e8:	dd0d      	ble.n	8017806 <_dtoa_r+0x67e>
 80177ea:	9a05      	ldr	r2, [sp, #20]
 80177ec:	2a00      	cmp	r2, #0
 80177ee:	dd0a      	ble.n	8017806 <_dtoa_r+0x67e>
 80177f0:	4542      	cmp	r2, r8
 80177f2:	9904      	ldr	r1, [sp, #16]
 80177f4:	bfa8      	it	ge
 80177f6:	4642      	movge	r2, r8
 80177f8:	1a89      	subs	r1, r1, r2
 80177fa:	9104      	str	r1, [sp, #16]
 80177fc:	9905      	ldr	r1, [sp, #20]
 80177fe:	eba8 0802 	sub.w	r8, r8, r2
 8017802:	1a8a      	subs	r2, r1, r2
 8017804:	9205      	str	r2, [sp, #20]
 8017806:	b303      	cbz	r3, 801784a <_dtoa_r+0x6c2>
 8017808:	9a07      	ldr	r2, [sp, #28]
 801780a:	2a00      	cmp	r2, #0
 801780c:	f000 80a5 	beq.w	801795a <_dtoa_r+0x7d2>
 8017810:	2c00      	cmp	r4, #0
 8017812:	dd13      	ble.n	801783c <_dtoa_r+0x6b4>
 8017814:	4639      	mov	r1, r7
 8017816:	4622      	mov	r2, r4
 8017818:	4630      	mov	r0, r6
 801781a:	930d      	str	r3, [sp, #52]	; 0x34
 801781c:	f000 ffc4 	bl	80187a8 <__pow5mult>
 8017820:	462a      	mov	r2, r5
 8017822:	4601      	mov	r1, r0
 8017824:	4607      	mov	r7, r0
 8017826:	4630      	mov	r0, r6
 8017828:	f000 ff14 	bl	8018654 <__multiply>
 801782c:	4629      	mov	r1, r5
 801782e:	900a      	str	r0, [sp, #40]	; 0x28
 8017830:	4630      	mov	r0, r6
 8017832:	f000 fdf7 	bl	8018424 <_Bfree>
 8017836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801783a:	4615      	mov	r5, r2
 801783c:	1b1a      	subs	r2, r3, r4
 801783e:	d004      	beq.n	801784a <_dtoa_r+0x6c2>
 8017840:	4629      	mov	r1, r5
 8017842:	4630      	mov	r0, r6
 8017844:	f000 ffb0 	bl	80187a8 <__pow5mult>
 8017848:	4605      	mov	r5, r0
 801784a:	2101      	movs	r1, #1
 801784c:	4630      	mov	r0, r6
 801784e:	f000 feeb 	bl	8018628 <__i2b>
 8017852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017854:	2b00      	cmp	r3, #0
 8017856:	4604      	mov	r4, r0
 8017858:	f340 8081 	ble.w	801795e <_dtoa_r+0x7d6>
 801785c:	461a      	mov	r2, r3
 801785e:	4601      	mov	r1, r0
 8017860:	4630      	mov	r0, r6
 8017862:	f000 ffa1 	bl	80187a8 <__pow5mult>
 8017866:	9b06      	ldr	r3, [sp, #24]
 8017868:	2b01      	cmp	r3, #1
 801786a:	4604      	mov	r4, r0
 801786c:	dd7a      	ble.n	8017964 <_dtoa_r+0x7dc>
 801786e:	2300      	movs	r3, #0
 8017870:	930a      	str	r3, [sp, #40]	; 0x28
 8017872:	6922      	ldr	r2, [r4, #16]
 8017874:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017878:	6910      	ldr	r0, [r2, #16]
 801787a:	f000 fe85 	bl	8018588 <__hi0bits>
 801787e:	f1c0 0020 	rsb	r0, r0, #32
 8017882:	9b05      	ldr	r3, [sp, #20]
 8017884:	4418      	add	r0, r3
 8017886:	f010 001f 	ands.w	r0, r0, #31
 801788a:	f000 808c 	beq.w	80179a6 <_dtoa_r+0x81e>
 801788e:	f1c0 0220 	rsb	r2, r0, #32
 8017892:	2a04      	cmp	r2, #4
 8017894:	f340 8085 	ble.w	80179a2 <_dtoa_r+0x81a>
 8017898:	f1c0 001c 	rsb	r0, r0, #28
 801789c:	9b04      	ldr	r3, [sp, #16]
 801789e:	4403      	add	r3, r0
 80178a0:	9304      	str	r3, [sp, #16]
 80178a2:	9b05      	ldr	r3, [sp, #20]
 80178a4:	4403      	add	r3, r0
 80178a6:	4480      	add	r8, r0
 80178a8:	9305      	str	r3, [sp, #20]
 80178aa:	9b04      	ldr	r3, [sp, #16]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	dd05      	ble.n	80178bc <_dtoa_r+0x734>
 80178b0:	4629      	mov	r1, r5
 80178b2:	461a      	mov	r2, r3
 80178b4:	4630      	mov	r0, r6
 80178b6:	f000 ffd1 	bl	801885c <__lshift>
 80178ba:	4605      	mov	r5, r0
 80178bc:	9b05      	ldr	r3, [sp, #20]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dd05      	ble.n	80178ce <_dtoa_r+0x746>
 80178c2:	4621      	mov	r1, r4
 80178c4:	461a      	mov	r2, r3
 80178c6:	4630      	mov	r0, r6
 80178c8:	f000 ffc8 	bl	801885c <__lshift>
 80178cc:	4604      	mov	r4, r0
 80178ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d06a      	beq.n	80179aa <_dtoa_r+0x822>
 80178d4:	4621      	mov	r1, r4
 80178d6:	4628      	mov	r0, r5
 80178d8:	f001 f830 	bl	801893c <__mcmp>
 80178dc:	2800      	cmp	r0, #0
 80178de:	da64      	bge.n	80179aa <_dtoa_r+0x822>
 80178e0:	2300      	movs	r3, #0
 80178e2:	4629      	mov	r1, r5
 80178e4:	220a      	movs	r2, #10
 80178e6:	4630      	mov	r0, r6
 80178e8:	f000 fdbe 	bl	8018468 <__multadd>
 80178ec:	9b07      	ldr	r3, [sp, #28]
 80178ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80178f2:	4605      	mov	r5, r0
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f000 8191 	beq.w	8017c1c <_dtoa_r+0xa94>
 80178fa:	4639      	mov	r1, r7
 80178fc:	2300      	movs	r3, #0
 80178fe:	220a      	movs	r2, #10
 8017900:	4630      	mov	r0, r6
 8017902:	f000 fdb1 	bl	8018468 <__multadd>
 8017906:	f1ba 0f00 	cmp.w	sl, #0
 801790a:	4607      	mov	r7, r0
 801790c:	f300 808d 	bgt.w	8017a2a <_dtoa_r+0x8a2>
 8017910:	9b06      	ldr	r3, [sp, #24]
 8017912:	2b02      	cmp	r3, #2
 8017914:	dc50      	bgt.n	80179b8 <_dtoa_r+0x830>
 8017916:	e088      	b.n	8017a2a <_dtoa_r+0x8a2>
 8017918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801791a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801791e:	e751      	b.n	80177c4 <_dtoa_r+0x63c>
 8017920:	f109 34ff 	add.w	r4, r9, #4294967295
 8017924:	42a3      	cmp	r3, r4
 8017926:	bfbf      	itttt	lt
 8017928:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801792a:	1ae3      	sublt	r3, r4, r3
 801792c:	18d2      	addlt	r2, r2, r3
 801792e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8017930:	bfb6      	itet	lt
 8017932:	4623      	movlt	r3, r4
 8017934:	1b1c      	subge	r4, r3, r4
 8017936:	2400      	movlt	r4, #0
 8017938:	f1b9 0f00 	cmp.w	r9, #0
 801793c:	bfb5      	itete	lt
 801793e:	9a04      	ldrlt	r2, [sp, #16]
 8017940:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8017944:	eba2 0809 	sublt.w	r8, r2, r9
 8017948:	464a      	movge	r2, r9
 801794a:	bfb8      	it	lt
 801794c:	2200      	movlt	r2, #0
 801794e:	e73c      	b.n	80177ca <_dtoa_r+0x642>
 8017950:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017954:	9f07      	ldr	r7, [sp, #28]
 8017956:	461c      	mov	r4, r3
 8017958:	e744      	b.n	80177e4 <_dtoa_r+0x65c>
 801795a:	461a      	mov	r2, r3
 801795c:	e770      	b.n	8017840 <_dtoa_r+0x6b8>
 801795e:	9b06      	ldr	r3, [sp, #24]
 8017960:	2b01      	cmp	r3, #1
 8017962:	dc18      	bgt.n	8017996 <_dtoa_r+0x80e>
 8017964:	9b02      	ldr	r3, [sp, #8]
 8017966:	b9b3      	cbnz	r3, 8017996 <_dtoa_r+0x80e>
 8017968:	9b03      	ldr	r3, [sp, #12]
 801796a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801796e:	b9a2      	cbnz	r2, 801799a <_dtoa_r+0x812>
 8017970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017974:	0d12      	lsrs	r2, r2, #20
 8017976:	0512      	lsls	r2, r2, #20
 8017978:	b18a      	cbz	r2, 801799e <_dtoa_r+0x816>
 801797a:	9b04      	ldr	r3, [sp, #16]
 801797c:	3301      	adds	r3, #1
 801797e:	9304      	str	r3, [sp, #16]
 8017980:	9b05      	ldr	r3, [sp, #20]
 8017982:	3301      	adds	r3, #1
 8017984:	9305      	str	r3, [sp, #20]
 8017986:	2301      	movs	r3, #1
 8017988:	930a      	str	r3, [sp, #40]	; 0x28
 801798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801798c:	2b00      	cmp	r3, #0
 801798e:	f47f af70 	bne.w	8017872 <_dtoa_r+0x6ea>
 8017992:	2001      	movs	r0, #1
 8017994:	e775      	b.n	8017882 <_dtoa_r+0x6fa>
 8017996:	2300      	movs	r3, #0
 8017998:	e7f6      	b.n	8017988 <_dtoa_r+0x800>
 801799a:	9b02      	ldr	r3, [sp, #8]
 801799c:	e7f4      	b.n	8017988 <_dtoa_r+0x800>
 801799e:	920a      	str	r2, [sp, #40]	; 0x28
 80179a0:	e7f3      	b.n	801798a <_dtoa_r+0x802>
 80179a2:	d082      	beq.n	80178aa <_dtoa_r+0x722>
 80179a4:	4610      	mov	r0, r2
 80179a6:	301c      	adds	r0, #28
 80179a8:	e778      	b.n	801789c <_dtoa_r+0x714>
 80179aa:	f1b9 0f00 	cmp.w	r9, #0
 80179ae:	dc37      	bgt.n	8017a20 <_dtoa_r+0x898>
 80179b0:	9b06      	ldr	r3, [sp, #24]
 80179b2:	2b02      	cmp	r3, #2
 80179b4:	dd34      	ble.n	8017a20 <_dtoa_r+0x898>
 80179b6:	46ca      	mov	sl, r9
 80179b8:	f1ba 0f00 	cmp.w	sl, #0
 80179bc:	d10d      	bne.n	80179da <_dtoa_r+0x852>
 80179be:	4621      	mov	r1, r4
 80179c0:	4653      	mov	r3, sl
 80179c2:	2205      	movs	r2, #5
 80179c4:	4630      	mov	r0, r6
 80179c6:	f000 fd4f 	bl	8018468 <__multadd>
 80179ca:	4601      	mov	r1, r0
 80179cc:	4604      	mov	r4, r0
 80179ce:	4628      	mov	r0, r5
 80179d0:	f000 ffb4 	bl	801893c <__mcmp>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	f73f adeb 	bgt.w	80175b0 <_dtoa_r+0x428>
 80179da:	9b08      	ldr	r3, [sp, #32]
 80179dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80179e0:	ea6f 0b03 	mvn.w	fp, r3
 80179e4:	f04f 0900 	mov.w	r9, #0
 80179e8:	4621      	mov	r1, r4
 80179ea:	4630      	mov	r0, r6
 80179ec:	f000 fd1a 	bl	8018424 <_Bfree>
 80179f0:	2f00      	cmp	r7, #0
 80179f2:	f43f aea8 	beq.w	8017746 <_dtoa_r+0x5be>
 80179f6:	f1b9 0f00 	cmp.w	r9, #0
 80179fa:	d005      	beq.n	8017a08 <_dtoa_r+0x880>
 80179fc:	45b9      	cmp	r9, r7
 80179fe:	d003      	beq.n	8017a08 <_dtoa_r+0x880>
 8017a00:	4649      	mov	r1, r9
 8017a02:	4630      	mov	r0, r6
 8017a04:	f000 fd0e 	bl	8018424 <_Bfree>
 8017a08:	4639      	mov	r1, r7
 8017a0a:	4630      	mov	r0, r6
 8017a0c:	f000 fd0a 	bl	8018424 <_Bfree>
 8017a10:	e699      	b.n	8017746 <_dtoa_r+0x5be>
 8017a12:	2400      	movs	r4, #0
 8017a14:	4627      	mov	r7, r4
 8017a16:	e7e0      	b.n	80179da <_dtoa_r+0x852>
 8017a18:	46bb      	mov	fp, r7
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	4607      	mov	r7, r0
 8017a1e:	e5c7      	b.n	80175b0 <_dtoa_r+0x428>
 8017a20:	9b07      	ldr	r3, [sp, #28]
 8017a22:	46ca      	mov	sl, r9
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	f000 8100 	beq.w	8017c2a <_dtoa_r+0xaa2>
 8017a2a:	f1b8 0f00 	cmp.w	r8, #0
 8017a2e:	dd05      	ble.n	8017a3c <_dtoa_r+0x8b4>
 8017a30:	4639      	mov	r1, r7
 8017a32:	4642      	mov	r2, r8
 8017a34:	4630      	mov	r0, r6
 8017a36:	f000 ff11 	bl	801885c <__lshift>
 8017a3a:	4607      	mov	r7, r0
 8017a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d05d      	beq.n	8017afe <_dtoa_r+0x976>
 8017a42:	6879      	ldr	r1, [r7, #4]
 8017a44:	4630      	mov	r0, r6
 8017a46:	f000 fcad 	bl	80183a4 <_Balloc>
 8017a4a:	4680      	mov	r8, r0
 8017a4c:	b928      	cbnz	r0, 8017a5a <_dtoa_r+0x8d2>
 8017a4e:	4b82      	ldr	r3, [pc, #520]	; (8017c58 <_dtoa_r+0xad0>)
 8017a50:	4602      	mov	r2, r0
 8017a52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017a56:	f7ff bbaf 	b.w	80171b8 <_dtoa_r+0x30>
 8017a5a:	693a      	ldr	r2, [r7, #16]
 8017a5c:	3202      	adds	r2, #2
 8017a5e:	0092      	lsls	r2, r2, #2
 8017a60:	f107 010c 	add.w	r1, r7, #12
 8017a64:	300c      	adds	r0, #12
 8017a66:	f7fd fdbd 	bl	80155e4 <memcpy>
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	4641      	mov	r1, r8
 8017a6e:	4630      	mov	r0, r6
 8017a70:	f000 fef4 	bl	801885c <__lshift>
 8017a74:	9b01      	ldr	r3, [sp, #4]
 8017a76:	3301      	adds	r3, #1
 8017a78:	9304      	str	r3, [sp, #16]
 8017a7a:	9b01      	ldr	r3, [sp, #4]
 8017a7c:	4453      	add	r3, sl
 8017a7e:	9308      	str	r3, [sp, #32]
 8017a80:	9b02      	ldr	r3, [sp, #8]
 8017a82:	f003 0301 	and.w	r3, r3, #1
 8017a86:	46b9      	mov	r9, r7
 8017a88:	9307      	str	r3, [sp, #28]
 8017a8a:	4607      	mov	r7, r0
 8017a8c:	9b04      	ldr	r3, [sp, #16]
 8017a8e:	4621      	mov	r1, r4
 8017a90:	3b01      	subs	r3, #1
 8017a92:	4628      	mov	r0, r5
 8017a94:	9302      	str	r3, [sp, #8]
 8017a96:	f7ff fae9 	bl	801706c <quorem>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	3330      	adds	r3, #48	; 0x30
 8017a9e:	9005      	str	r0, [sp, #20]
 8017aa0:	4649      	mov	r1, r9
 8017aa2:	4628      	mov	r0, r5
 8017aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8017aa6:	f000 ff49 	bl	801893c <__mcmp>
 8017aaa:	463a      	mov	r2, r7
 8017aac:	4682      	mov	sl, r0
 8017aae:	4621      	mov	r1, r4
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	f000 ff5f 	bl	8018974 <__mdiff>
 8017ab6:	68c2      	ldr	r2, [r0, #12]
 8017ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aba:	4680      	mov	r8, r0
 8017abc:	bb0a      	cbnz	r2, 8017b02 <_dtoa_r+0x97a>
 8017abe:	4601      	mov	r1, r0
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	f000 ff3b 	bl	801893c <__mcmp>
 8017ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ac8:	4602      	mov	r2, r0
 8017aca:	4641      	mov	r1, r8
 8017acc:	4630      	mov	r0, r6
 8017ace:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8017ad2:	f000 fca7 	bl	8018424 <_Bfree>
 8017ad6:	9b06      	ldr	r3, [sp, #24]
 8017ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ada:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017ade:	ea43 0102 	orr.w	r1, r3, r2
 8017ae2:	9b07      	ldr	r3, [sp, #28]
 8017ae4:	430b      	orrs	r3, r1
 8017ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ae8:	d10d      	bne.n	8017b06 <_dtoa_r+0x97e>
 8017aea:	2b39      	cmp	r3, #57	; 0x39
 8017aec:	d029      	beq.n	8017b42 <_dtoa_r+0x9ba>
 8017aee:	f1ba 0f00 	cmp.w	sl, #0
 8017af2:	dd01      	ble.n	8017af8 <_dtoa_r+0x970>
 8017af4:	9b05      	ldr	r3, [sp, #20]
 8017af6:	3331      	adds	r3, #49	; 0x31
 8017af8:	9a02      	ldr	r2, [sp, #8]
 8017afa:	7013      	strb	r3, [r2, #0]
 8017afc:	e774      	b.n	80179e8 <_dtoa_r+0x860>
 8017afe:	4638      	mov	r0, r7
 8017b00:	e7b8      	b.n	8017a74 <_dtoa_r+0x8ec>
 8017b02:	2201      	movs	r2, #1
 8017b04:	e7e1      	b.n	8017aca <_dtoa_r+0x942>
 8017b06:	f1ba 0f00 	cmp.w	sl, #0
 8017b0a:	db06      	blt.n	8017b1a <_dtoa_r+0x992>
 8017b0c:	9906      	ldr	r1, [sp, #24]
 8017b0e:	ea41 0a0a 	orr.w	sl, r1, sl
 8017b12:	9907      	ldr	r1, [sp, #28]
 8017b14:	ea5a 0101 	orrs.w	r1, sl, r1
 8017b18:	d120      	bne.n	8017b5c <_dtoa_r+0x9d4>
 8017b1a:	2a00      	cmp	r2, #0
 8017b1c:	ddec      	ble.n	8017af8 <_dtoa_r+0x970>
 8017b1e:	4629      	mov	r1, r5
 8017b20:	2201      	movs	r2, #1
 8017b22:	4630      	mov	r0, r6
 8017b24:	9304      	str	r3, [sp, #16]
 8017b26:	f000 fe99 	bl	801885c <__lshift>
 8017b2a:	4621      	mov	r1, r4
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	f000 ff05 	bl	801893c <__mcmp>
 8017b32:	2800      	cmp	r0, #0
 8017b34:	9b04      	ldr	r3, [sp, #16]
 8017b36:	dc02      	bgt.n	8017b3e <_dtoa_r+0x9b6>
 8017b38:	d1de      	bne.n	8017af8 <_dtoa_r+0x970>
 8017b3a:	07da      	lsls	r2, r3, #31
 8017b3c:	d5dc      	bpl.n	8017af8 <_dtoa_r+0x970>
 8017b3e:	2b39      	cmp	r3, #57	; 0x39
 8017b40:	d1d8      	bne.n	8017af4 <_dtoa_r+0x96c>
 8017b42:	9a02      	ldr	r2, [sp, #8]
 8017b44:	2339      	movs	r3, #57	; 0x39
 8017b46:	7013      	strb	r3, [r2, #0]
 8017b48:	4643      	mov	r3, r8
 8017b4a:	4698      	mov	r8, r3
 8017b4c:	3b01      	subs	r3, #1
 8017b4e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8017b52:	2a39      	cmp	r2, #57	; 0x39
 8017b54:	d051      	beq.n	8017bfa <_dtoa_r+0xa72>
 8017b56:	3201      	adds	r2, #1
 8017b58:	701a      	strb	r2, [r3, #0]
 8017b5a:	e745      	b.n	80179e8 <_dtoa_r+0x860>
 8017b5c:	2a00      	cmp	r2, #0
 8017b5e:	dd03      	ble.n	8017b68 <_dtoa_r+0x9e0>
 8017b60:	2b39      	cmp	r3, #57	; 0x39
 8017b62:	d0ee      	beq.n	8017b42 <_dtoa_r+0x9ba>
 8017b64:	3301      	adds	r3, #1
 8017b66:	e7c7      	b.n	8017af8 <_dtoa_r+0x970>
 8017b68:	9a04      	ldr	r2, [sp, #16]
 8017b6a:	9908      	ldr	r1, [sp, #32]
 8017b6c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017b70:	428a      	cmp	r2, r1
 8017b72:	d02b      	beq.n	8017bcc <_dtoa_r+0xa44>
 8017b74:	4629      	mov	r1, r5
 8017b76:	2300      	movs	r3, #0
 8017b78:	220a      	movs	r2, #10
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	f000 fc74 	bl	8018468 <__multadd>
 8017b80:	45b9      	cmp	r9, r7
 8017b82:	4605      	mov	r5, r0
 8017b84:	f04f 0300 	mov.w	r3, #0
 8017b88:	f04f 020a 	mov.w	r2, #10
 8017b8c:	4649      	mov	r1, r9
 8017b8e:	4630      	mov	r0, r6
 8017b90:	d107      	bne.n	8017ba2 <_dtoa_r+0xa1a>
 8017b92:	f000 fc69 	bl	8018468 <__multadd>
 8017b96:	4681      	mov	r9, r0
 8017b98:	4607      	mov	r7, r0
 8017b9a:	9b04      	ldr	r3, [sp, #16]
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	9304      	str	r3, [sp, #16]
 8017ba0:	e774      	b.n	8017a8c <_dtoa_r+0x904>
 8017ba2:	f000 fc61 	bl	8018468 <__multadd>
 8017ba6:	4639      	mov	r1, r7
 8017ba8:	4681      	mov	r9, r0
 8017baa:	2300      	movs	r3, #0
 8017bac:	220a      	movs	r2, #10
 8017bae:	4630      	mov	r0, r6
 8017bb0:	f000 fc5a 	bl	8018468 <__multadd>
 8017bb4:	4607      	mov	r7, r0
 8017bb6:	e7f0      	b.n	8017b9a <_dtoa_r+0xa12>
 8017bb8:	f1ba 0f00 	cmp.w	sl, #0
 8017bbc:	9a01      	ldr	r2, [sp, #4]
 8017bbe:	bfcc      	ite	gt
 8017bc0:	46d0      	movgt	r8, sl
 8017bc2:	f04f 0801 	movle.w	r8, #1
 8017bc6:	4490      	add	r8, r2
 8017bc8:	f04f 0900 	mov.w	r9, #0
 8017bcc:	4629      	mov	r1, r5
 8017bce:	2201      	movs	r2, #1
 8017bd0:	4630      	mov	r0, r6
 8017bd2:	9302      	str	r3, [sp, #8]
 8017bd4:	f000 fe42 	bl	801885c <__lshift>
 8017bd8:	4621      	mov	r1, r4
 8017bda:	4605      	mov	r5, r0
 8017bdc:	f000 feae 	bl	801893c <__mcmp>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	dcb1      	bgt.n	8017b48 <_dtoa_r+0x9c0>
 8017be4:	d102      	bne.n	8017bec <_dtoa_r+0xa64>
 8017be6:	9b02      	ldr	r3, [sp, #8]
 8017be8:	07db      	lsls	r3, r3, #31
 8017bea:	d4ad      	bmi.n	8017b48 <_dtoa_r+0x9c0>
 8017bec:	4643      	mov	r3, r8
 8017bee:	4698      	mov	r8, r3
 8017bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bf4:	2a30      	cmp	r2, #48	; 0x30
 8017bf6:	d0fa      	beq.n	8017bee <_dtoa_r+0xa66>
 8017bf8:	e6f6      	b.n	80179e8 <_dtoa_r+0x860>
 8017bfa:	9a01      	ldr	r2, [sp, #4]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d1a4      	bne.n	8017b4a <_dtoa_r+0x9c2>
 8017c00:	f10b 0b01 	add.w	fp, fp, #1
 8017c04:	2331      	movs	r3, #49	; 0x31
 8017c06:	e778      	b.n	8017afa <_dtoa_r+0x972>
 8017c08:	4b14      	ldr	r3, [pc, #80]	; (8017c5c <_dtoa_r+0xad4>)
 8017c0a:	f7ff bb27 	b.w	801725c <_dtoa_r+0xd4>
 8017c0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	f47f ab03 	bne.w	801721c <_dtoa_r+0x94>
 8017c16:	4b12      	ldr	r3, [pc, #72]	; (8017c60 <_dtoa_r+0xad8>)
 8017c18:	f7ff bb20 	b.w	801725c <_dtoa_r+0xd4>
 8017c1c:	f1ba 0f00 	cmp.w	sl, #0
 8017c20:	dc03      	bgt.n	8017c2a <_dtoa_r+0xaa2>
 8017c22:	9b06      	ldr	r3, [sp, #24]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	f73f aec7 	bgt.w	80179b8 <_dtoa_r+0x830>
 8017c2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017c2e:	4621      	mov	r1, r4
 8017c30:	4628      	mov	r0, r5
 8017c32:	f7ff fa1b 	bl	801706c <quorem>
 8017c36:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017c3a:	f808 3b01 	strb.w	r3, [r8], #1
 8017c3e:	9a01      	ldr	r2, [sp, #4]
 8017c40:	eba8 0202 	sub.w	r2, r8, r2
 8017c44:	4592      	cmp	sl, r2
 8017c46:	ddb7      	ble.n	8017bb8 <_dtoa_r+0xa30>
 8017c48:	4629      	mov	r1, r5
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	220a      	movs	r2, #10
 8017c4e:	4630      	mov	r0, r6
 8017c50:	f000 fc0a 	bl	8018468 <__multadd>
 8017c54:	4605      	mov	r5, r0
 8017c56:	e7ea      	b.n	8017c2e <_dtoa_r+0xaa6>
 8017c58:	0801a5f0 	.word	0x0801a5f0
 8017c5c:	0801a3f0 	.word	0x0801a3f0
 8017c60:	0801a571 	.word	0x0801a571

08017c64 <rshift>:
 8017c64:	6903      	ldr	r3, [r0, #16]
 8017c66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017c72:	f100 0414 	add.w	r4, r0, #20
 8017c76:	dd45      	ble.n	8017d04 <rshift+0xa0>
 8017c78:	f011 011f 	ands.w	r1, r1, #31
 8017c7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017c80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017c84:	d10c      	bne.n	8017ca0 <rshift+0x3c>
 8017c86:	f100 0710 	add.w	r7, r0, #16
 8017c8a:	4629      	mov	r1, r5
 8017c8c:	42b1      	cmp	r1, r6
 8017c8e:	d334      	bcc.n	8017cfa <rshift+0x96>
 8017c90:	1a9b      	subs	r3, r3, r2
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	1eea      	subs	r2, r5, #3
 8017c96:	4296      	cmp	r6, r2
 8017c98:	bf38      	it	cc
 8017c9a:	2300      	movcc	r3, #0
 8017c9c:	4423      	add	r3, r4
 8017c9e:	e015      	b.n	8017ccc <rshift+0x68>
 8017ca0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017ca4:	f1c1 0820 	rsb	r8, r1, #32
 8017ca8:	40cf      	lsrs	r7, r1
 8017caa:	f105 0e04 	add.w	lr, r5, #4
 8017cae:	46a1      	mov	r9, r4
 8017cb0:	4576      	cmp	r6, lr
 8017cb2:	46f4      	mov	ip, lr
 8017cb4:	d815      	bhi.n	8017ce2 <rshift+0x7e>
 8017cb6:	1a9a      	subs	r2, r3, r2
 8017cb8:	0092      	lsls	r2, r2, #2
 8017cba:	3a04      	subs	r2, #4
 8017cbc:	3501      	adds	r5, #1
 8017cbe:	42ae      	cmp	r6, r5
 8017cc0:	bf38      	it	cc
 8017cc2:	2200      	movcc	r2, #0
 8017cc4:	18a3      	adds	r3, r4, r2
 8017cc6:	50a7      	str	r7, [r4, r2]
 8017cc8:	b107      	cbz	r7, 8017ccc <rshift+0x68>
 8017cca:	3304      	adds	r3, #4
 8017ccc:	1b1a      	subs	r2, r3, r4
 8017cce:	42a3      	cmp	r3, r4
 8017cd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017cd4:	bf08      	it	eq
 8017cd6:	2300      	moveq	r3, #0
 8017cd8:	6102      	str	r2, [r0, #16]
 8017cda:	bf08      	it	eq
 8017cdc:	6143      	streq	r3, [r0, #20]
 8017cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ce2:	f8dc c000 	ldr.w	ip, [ip]
 8017ce6:	fa0c fc08 	lsl.w	ip, ip, r8
 8017cea:	ea4c 0707 	orr.w	r7, ip, r7
 8017cee:	f849 7b04 	str.w	r7, [r9], #4
 8017cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017cf6:	40cf      	lsrs	r7, r1
 8017cf8:	e7da      	b.n	8017cb0 <rshift+0x4c>
 8017cfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8017cfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8017d02:	e7c3      	b.n	8017c8c <rshift+0x28>
 8017d04:	4623      	mov	r3, r4
 8017d06:	e7e1      	b.n	8017ccc <rshift+0x68>

08017d08 <__hexdig_fun>:
 8017d08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017d0c:	2b09      	cmp	r3, #9
 8017d0e:	d802      	bhi.n	8017d16 <__hexdig_fun+0xe>
 8017d10:	3820      	subs	r0, #32
 8017d12:	b2c0      	uxtb	r0, r0
 8017d14:	4770      	bx	lr
 8017d16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017d1a:	2b05      	cmp	r3, #5
 8017d1c:	d801      	bhi.n	8017d22 <__hexdig_fun+0x1a>
 8017d1e:	3847      	subs	r0, #71	; 0x47
 8017d20:	e7f7      	b.n	8017d12 <__hexdig_fun+0xa>
 8017d22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017d26:	2b05      	cmp	r3, #5
 8017d28:	d801      	bhi.n	8017d2e <__hexdig_fun+0x26>
 8017d2a:	3827      	subs	r0, #39	; 0x27
 8017d2c:	e7f1      	b.n	8017d12 <__hexdig_fun+0xa>
 8017d2e:	2000      	movs	r0, #0
 8017d30:	4770      	bx	lr
	...

08017d34 <__gethex>:
 8017d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d38:	ed2d 8b02 	vpush	{d8}
 8017d3c:	b089      	sub	sp, #36	; 0x24
 8017d3e:	ee08 0a10 	vmov	s16, r0
 8017d42:	9304      	str	r3, [sp, #16]
 8017d44:	4bb4      	ldr	r3, [pc, #720]	; (8018018 <__gethex+0x2e4>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	9301      	str	r3, [sp, #4]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	468b      	mov	fp, r1
 8017d4e:	4690      	mov	r8, r2
 8017d50:	f7e8 fade 	bl	8000310 <strlen>
 8017d54:	9b01      	ldr	r3, [sp, #4]
 8017d56:	f8db 2000 	ldr.w	r2, [fp]
 8017d5a:	4403      	add	r3, r0
 8017d5c:	4682      	mov	sl, r0
 8017d5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017d62:	9305      	str	r3, [sp, #20]
 8017d64:	1c93      	adds	r3, r2, #2
 8017d66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017d6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017d6e:	32fe      	adds	r2, #254	; 0xfe
 8017d70:	18d1      	adds	r1, r2, r3
 8017d72:	461f      	mov	r7, r3
 8017d74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017d78:	9100      	str	r1, [sp, #0]
 8017d7a:	2830      	cmp	r0, #48	; 0x30
 8017d7c:	d0f8      	beq.n	8017d70 <__gethex+0x3c>
 8017d7e:	f7ff ffc3 	bl	8017d08 <__hexdig_fun>
 8017d82:	4604      	mov	r4, r0
 8017d84:	2800      	cmp	r0, #0
 8017d86:	d13a      	bne.n	8017dfe <__gethex+0xca>
 8017d88:	9901      	ldr	r1, [sp, #4]
 8017d8a:	4652      	mov	r2, sl
 8017d8c:	4638      	mov	r0, r7
 8017d8e:	f001 fa43 	bl	8019218 <strncmp>
 8017d92:	4605      	mov	r5, r0
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d168      	bne.n	8017e6a <__gethex+0x136>
 8017d98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017d9c:	eb07 060a 	add.w	r6, r7, sl
 8017da0:	f7ff ffb2 	bl	8017d08 <__hexdig_fun>
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d062      	beq.n	8017e6e <__gethex+0x13a>
 8017da8:	4633      	mov	r3, r6
 8017daa:	7818      	ldrb	r0, [r3, #0]
 8017dac:	2830      	cmp	r0, #48	; 0x30
 8017dae:	461f      	mov	r7, r3
 8017db0:	f103 0301 	add.w	r3, r3, #1
 8017db4:	d0f9      	beq.n	8017daa <__gethex+0x76>
 8017db6:	f7ff ffa7 	bl	8017d08 <__hexdig_fun>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	fab0 f480 	clz	r4, r0
 8017dc0:	0964      	lsrs	r4, r4, #5
 8017dc2:	4635      	mov	r5, r6
 8017dc4:	9300      	str	r3, [sp, #0]
 8017dc6:	463a      	mov	r2, r7
 8017dc8:	4616      	mov	r6, r2
 8017dca:	3201      	adds	r2, #1
 8017dcc:	7830      	ldrb	r0, [r6, #0]
 8017dce:	f7ff ff9b 	bl	8017d08 <__hexdig_fun>
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d1f8      	bne.n	8017dc8 <__gethex+0x94>
 8017dd6:	9901      	ldr	r1, [sp, #4]
 8017dd8:	4652      	mov	r2, sl
 8017dda:	4630      	mov	r0, r6
 8017ddc:	f001 fa1c 	bl	8019218 <strncmp>
 8017de0:	b980      	cbnz	r0, 8017e04 <__gethex+0xd0>
 8017de2:	b94d      	cbnz	r5, 8017df8 <__gethex+0xc4>
 8017de4:	eb06 050a 	add.w	r5, r6, sl
 8017de8:	462a      	mov	r2, r5
 8017dea:	4616      	mov	r6, r2
 8017dec:	3201      	adds	r2, #1
 8017dee:	7830      	ldrb	r0, [r6, #0]
 8017df0:	f7ff ff8a 	bl	8017d08 <__hexdig_fun>
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d1f8      	bne.n	8017dea <__gethex+0xb6>
 8017df8:	1bad      	subs	r5, r5, r6
 8017dfa:	00ad      	lsls	r5, r5, #2
 8017dfc:	e004      	b.n	8017e08 <__gethex+0xd4>
 8017dfe:	2400      	movs	r4, #0
 8017e00:	4625      	mov	r5, r4
 8017e02:	e7e0      	b.n	8017dc6 <__gethex+0x92>
 8017e04:	2d00      	cmp	r5, #0
 8017e06:	d1f7      	bne.n	8017df8 <__gethex+0xc4>
 8017e08:	7833      	ldrb	r3, [r6, #0]
 8017e0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017e0e:	2b50      	cmp	r3, #80	; 0x50
 8017e10:	d13b      	bne.n	8017e8a <__gethex+0x156>
 8017e12:	7873      	ldrb	r3, [r6, #1]
 8017e14:	2b2b      	cmp	r3, #43	; 0x2b
 8017e16:	d02c      	beq.n	8017e72 <__gethex+0x13e>
 8017e18:	2b2d      	cmp	r3, #45	; 0x2d
 8017e1a:	d02e      	beq.n	8017e7a <__gethex+0x146>
 8017e1c:	1c71      	adds	r1, r6, #1
 8017e1e:	f04f 0900 	mov.w	r9, #0
 8017e22:	7808      	ldrb	r0, [r1, #0]
 8017e24:	f7ff ff70 	bl	8017d08 <__hexdig_fun>
 8017e28:	1e43      	subs	r3, r0, #1
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	2b18      	cmp	r3, #24
 8017e2e:	d82c      	bhi.n	8017e8a <__gethex+0x156>
 8017e30:	f1a0 0210 	sub.w	r2, r0, #16
 8017e34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017e38:	f7ff ff66 	bl	8017d08 <__hexdig_fun>
 8017e3c:	1e43      	subs	r3, r0, #1
 8017e3e:	b2db      	uxtb	r3, r3
 8017e40:	2b18      	cmp	r3, #24
 8017e42:	d91d      	bls.n	8017e80 <__gethex+0x14c>
 8017e44:	f1b9 0f00 	cmp.w	r9, #0
 8017e48:	d000      	beq.n	8017e4c <__gethex+0x118>
 8017e4a:	4252      	negs	r2, r2
 8017e4c:	4415      	add	r5, r2
 8017e4e:	f8cb 1000 	str.w	r1, [fp]
 8017e52:	b1e4      	cbz	r4, 8017e8e <__gethex+0x15a>
 8017e54:	9b00      	ldr	r3, [sp, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	bf14      	ite	ne
 8017e5a:	2700      	movne	r7, #0
 8017e5c:	2706      	moveq	r7, #6
 8017e5e:	4638      	mov	r0, r7
 8017e60:	b009      	add	sp, #36	; 0x24
 8017e62:	ecbd 8b02 	vpop	{d8}
 8017e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e6a:	463e      	mov	r6, r7
 8017e6c:	4625      	mov	r5, r4
 8017e6e:	2401      	movs	r4, #1
 8017e70:	e7ca      	b.n	8017e08 <__gethex+0xd4>
 8017e72:	f04f 0900 	mov.w	r9, #0
 8017e76:	1cb1      	adds	r1, r6, #2
 8017e78:	e7d3      	b.n	8017e22 <__gethex+0xee>
 8017e7a:	f04f 0901 	mov.w	r9, #1
 8017e7e:	e7fa      	b.n	8017e76 <__gethex+0x142>
 8017e80:	230a      	movs	r3, #10
 8017e82:	fb03 0202 	mla	r2, r3, r2, r0
 8017e86:	3a10      	subs	r2, #16
 8017e88:	e7d4      	b.n	8017e34 <__gethex+0x100>
 8017e8a:	4631      	mov	r1, r6
 8017e8c:	e7df      	b.n	8017e4e <__gethex+0x11a>
 8017e8e:	1bf3      	subs	r3, r6, r7
 8017e90:	3b01      	subs	r3, #1
 8017e92:	4621      	mov	r1, r4
 8017e94:	2b07      	cmp	r3, #7
 8017e96:	dc0b      	bgt.n	8017eb0 <__gethex+0x17c>
 8017e98:	ee18 0a10 	vmov	r0, s16
 8017e9c:	f000 fa82 	bl	80183a4 <_Balloc>
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	b940      	cbnz	r0, 8017eb6 <__gethex+0x182>
 8017ea4:	4b5d      	ldr	r3, [pc, #372]	; (801801c <__gethex+0x2e8>)
 8017ea6:	4602      	mov	r2, r0
 8017ea8:	21de      	movs	r1, #222	; 0xde
 8017eaa:	485d      	ldr	r0, [pc, #372]	; (8018020 <__gethex+0x2ec>)
 8017eac:	f001 f9d6 	bl	801925c <__assert_func>
 8017eb0:	3101      	adds	r1, #1
 8017eb2:	105b      	asrs	r3, r3, #1
 8017eb4:	e7ee      	b.n	8017e94 <__gethex+0x160>
 8017eb6:	f100 0914 	add.w	r9, r0, #20
 8017eba:	f04f 0b00 	mov.w	fp, #0
 8017ebe:	f1ca 0301 	rsb	r3, sl, #1
 8017ec2:	f8cd 9008 	str.w	r9, [sp, #8]
 8017ec6:	f8cd b000 	str.w	fp, [sp]
 8017eca:	9306      	str	r3, [sp, #24]
 8017ecc:	42b7      	cmp	r7, r6
 8017ece:	d340      	bcc.n	8017f52 <__gethex+0x21e>
 8017ed0:	9802      	ldr	r0, [sp, #8]
 8017ed2:	9b00      	ldr	r3, [sp, #0]
 8017ed4:	f840 3b04 	str.w	r3, [r0], #4
 8017ed8:	eba0 0009 	sub.w	r0, r0, r9
 8017edc:	1080      	asrs	r0, r0, #2
 8017ede:	0146      	lsls	r6, r0, #5
 8017ee0:	6120      	str	r0, [r4, #16]
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f000 fb50 	bl	8018588 <__hi0bits>
 8017ee8:	1a30      	subs	r0, r6, r0
 8017eea:	f8d8 6000 	ldr.w	r6, [r8]
 8017eee:	42b0      	cmp	r0, r6
 8017ef0:	dd63      	ble.n	8017fba <__gethex+0x286>
 8017ef2:	1b87      	subs	r7, r0, r6
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f000 fef1 	bl	8018cde <__any_on>
 8017efc:	4682      	mov	sl, r0
 8017efe:	b1a8      	cbz	r0, 8017f2c <__gethex+0x1f8>
 8017f00:	1e7b      	subs	r3, r7, #1
 8017f02:	1159      	asrs	r1, r3, #5
 8017f04:	f003 021f 	and.w	r2, r3, #31
 8017f08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017f0c:	f04f 0a01 	mov.w	sl, #1
 8017f10:	fa0a f202 	lsl.w	r2, sl, r2
 8017f14:	420a      	tst	r2, r1
 8017f16:	d009      	beq.n	8017f2c <__gethex+0x1f8>
 8017f18:	4553      	cmp	r3, sl
 8017f1a:	dd05      	ble.n	8017f28 <__gethex+0x1f4>
 8017f1c:	1eb9      	subs	r1, r7, #2
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f000 fedd 	bl	8018cde <__any_on>
 8017f24:	2800      	cmp	r0, #0
 8017f26:	d145      	bne.n	8017fb4 <__gethex+0x280>
 8017f28:	f04f 0a02 	mov.w	sl, #2
 8017f2c:	4639      	mov	r1, r7
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f7ff fe98 	bl	8017c64 <rshift>
 8017f34:	443d      	add	r5, r7
 8017f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f3a:	42ab      	cmp	r3, r5
 8017f3c:	da4c      	bge.n	8017fd8 <__gethex+0x2a4>
 8017f3e:	ee18 0a10 	vmov	r0, s16
 8017f42:	4621      	mov	r1, r4
 8017f44:	f000 fa6e 	bl	8018424 <_Bfree>
 8017f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	6013      	str	r3, [r2, #0]
 8017f4e:	27a3      	movs	r7, #163	; 0xa3
 8017f50:	e785      	b.n	8017e5e <__gethex+0x12a>
 8017f52:	1e73      	subs	r3, r6, #1
 8017f54:	9a05      	ldr	r2, [sp, #20]
 8017f56:	9303      	str	r3, [sp, #12]
 8017f58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	d019      	beq.n	8017f94 <__gethex+0x260>
 8017f60:	f1bb 0f20 	cmp.w	fp, #32
 8017f64:	d107      	bne.n	8017f76 <__gethex+0x242>
 8017f66:	9b02      	ldr	r3, [sp, #8]
 8017f68:	9a00      	ldr	r2, [sp, #0]
 8017f6a:	f843 2b04 	str.w	r2, [r3], #4
 8017f6e:	9302      	str	r3, [sp, #8]
 8017f70:	2300      	movs	r3, #0
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	469b      	mov	fp, r3
 8017f76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017f7a:	f7ff fec5 	bl	8017d08 <__hexdig_fun>
 8017f7e:	9b00      	ldr	r3, [sp, #0]
 8017f80:	f000 000f 	and.w	r0, r0, #15
 8017f84:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f88:	4303      	orrs	r3, r0
 8017f8a:	9300      	str	r3, [sp, #0]
 8017f8c:	f10b 0b04 	add.w	fp, fp, #4
 8017f90:	9b03      	ldr	r3, [sp, #12]
 8017f92:	e00d      	b.n	8017fb0 <__gethex+0x27c>
 8017f94:	9b03      	ldr	r3, [sp, #12]
 8017f96:	9a06      	ldr	r2, [sp, #24]
 8017f98:	4413      	add	r3, r2
 8017f9a:	42bb      	cmp	r3, r7
 8017f9c:	d3e0      	bcc.n	8017f60 <__gethex+0x22c>
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	9901      	ldr	r1, [sp, #4]
 8017fa2:	9307      	str	r3, [sp, #28]
 8017fa4:	4652      	mov	r2, sl
 8017fa6:	f001 f937 	bl	8019218 <strncmp>
 8017faa:	9b07      	ldr	r3, [sp, #28]
 8017fac:	2800      	cmp	r0, #0
 8017fae:	d1d7      	bne.n	8017f60 <__gethex+0x22c>
 8017fb0:	461e      	mov	r6, r3
 8017fb2:	e78b      	b.n	8017ecc <__gethex+0x198>
 8017fb4:	f04f 0a03 	mov.w	sl, #3
 8017fb8:	e7b8      	b.n	8017f2c <__gethex+0x1f8>
 8017fba:	da0a      	bge.n	8017fd2 <__gethex+0x29e>
 8017fbc:	1a37      	subs	r7, r6, r0
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	ee18 0a10 	vmov	r0, s16
 8017fc4:	463a      	mov	r2, r7
 8017fc6:	f000 fc49 	bl	801885c <__lshift>
 8017fca:	1bed      	subs	r5, r5, r7
 8017fcc:	4604      	mov	r4, r0
 8017fce:	f100 0914 	add.w	r9, r0, #20
 8017fd2:	f04f 0a00 	mov.w	sl, #0
 8017fd6:	e7ae      	b.n	8017f36 <__gethex+0x202>
 8017fd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017fdc:	42a8      	cmp	r0, r5
 8017fde:	dd72      	ble.n	80180c6 <__gethex+0x392>
 8017fe0:	1b45      	subs	r5, r0, r5
 8017fe2:	42ae      	cmp	r6, r5
 8017fe4:	dc36      	bgt.n	8018054 <__gethex+0x320>
 8017fe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fea:	2b02      	cmp	r3, #2
 8017fec:	d02a      	beq.n	8018044 <__gethex+0x310>
 8017fee:	2b03      	cmp	r3, #3
 8017ff0:	d02c      	beq.n	801804c <__gethex+0x318>
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d11c      	bne.n	8018030 <__gethex+0x2fc>
 8017ff6:	42ae      	cmp	r6, r5
 8017ff8:	d11a      	bne.n	8018030 <__gethex+0x2fc>
 8017ffa:	2e01      	cmp	r6, #1
 8017ffc:	d112      	bne.n	8018024 <__gethex+0x2f0>
 8017ffe:	9a04      	ldr	r2, [sp, #16]
 8018000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018004:	6013      	str	r3, [r2, #0]
 8018006:	2301      	movs	r3, #1
 8018008:	6123      	str	r3, [r4, #16]
 801800a:	f8c9 3000 	str.w	r3, [r9]
 801800e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018010:	2762      	movs	r7, #98	; 0x62
 8018012:	601c      	str	r4, [r3, #0]
 8018014:	e723      	b.n	8017e5e <__gethex+0x12a>
 8018016:	bf00      	nop
 8018018:	0801a668 	.word	0x0801a668
 801801c:	0801a5f0 	.word	0x0801a5f0
 8018020:	0801a601 	.word	0x0801a601
 8018024:	1e71      	subs	r1, r6, #1
 8018026:	4620      	mov	r0, r4
 8018028:	f000 fe59 	bl	8018cde <__any_on>
 801802c:	2800      	cmp	r0, #0
 801802e:	d1e6      	bne.n	8017ffe <__gethex+0x2ca>
 8018030:	ee18 0a10 	vmov	r0, s16
 8018034:	4621      	mov	r1, r4
 8018036:	f000 f9f5 	bl	8018424 <_Bfree>
 801803a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801803c:	2300      	movs	r3, #0
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	2750      	movs	r7, #80	; 0x50
 8018042:	e70c      	b.n	8017e5e <__gethex+0x12a>
 8018044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018046:	2b00      	cmp	r3, #0
 8018048:	d1f2      	bne.n	8018030 <__gethex+0x2fc>
 801804a:	e7d8      	b.n	8017ffe <__gethex+0x2ca>
 801804c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1d5      	bne.n	8017ffe <__gethex+0x2ca>
 8018052:	e7ed      	b.n	8018030 <__gethex+0x2fc>
 8018054:	1e6f      	subs	r7, r5, #1
 8018056:	f1ba 0f00 	cmp.w	sl, #0
 801805a:	d131      	bne.n	80180c0 <__gethex+0x38c>
 801805c:	b127      	cbz	r7, 8018068 <__gethex+0x334>
 801805e:	4639      	mov	r1, r7
 8018060:	4620      	mov	r0, r4
 8018062:	f000 fe3c 	bl	8018cde <__any_on>
 8018066:	4682      	mov	sl, r0
 8018068:	117b      	asrs	r3, r7, #5
 801806a:	2101      	movs	r1, #1
 801806c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018070:	f007 071f 	and.w	r7, r7, #31
 8018074:	fa01 f707 	lsl.w	r7, r1, r7
 8018078:	421f      	tst	r7, r3
 801807a:	4629      	mov	r1, r5
 801807c:	4620      	mov	r0, r4
 801807e:	bf18      	it	ne
 8018080:	f04a 0a02 	orrne.w	sl, sl, #2
 8018084:	1b76      	subs	r6, r6, r5
 8018086:	f7ff fded 	bl	8017c64 <rshift>
 801808a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801808e:	2702      	movs	r7, #2
 8018090:	f1ba 0f00 	cmp.w	sl, #0
 8018094:	d048      	beq.n	8018128 <__gethex+0x3f4>
 8018096:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801809a:	2b02      	cmp	r3, #2
 801809c:	d015      	beq.n	80180ca <__gethex+0x396>
 801809e:	2b03      	cmp	r3, #3
 80180a0:	d017      	beq.n	80180d2 <__gethex+0x39e>
 80180a2:	2b01      	cmp	r3, #1
 80180a4:	d109      	bne.n	80180ba <__gethex+0x386>
 80180a6:	f01a 0f02 	tst.w	sl, #2
 80180aa:	d006      	beq.n	80180ba <__gethex+0x386>
 80180ac:	f8d9 0000 	ldr.w	r0, [r9]
 80180b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80180b4:	f01a 0f01 	tst.w	sl, #1
 80180b8:	d10e      	bne.n	80180d8 <__gethex+0x3a4>
 80180ba:	f047 0710 	orr.w	r7, r7, #16
 80180be:	e033      	b.n	8018128 <__gethex+0x3f4>
 80180c0:	f04f 0a01 	mov.w	sl, #1
 80180c4:	e7d0      	b.n	8018068 <__gethex+0x334>
 80180c6:	2701      	movs	r7, #1
 80180c8:	e7e2      	b.n	8018090 <__gethex+0x35c>
 80180ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180cc:	f1c3 0301 	rsb	r3, r3, #1
 80180d0:	9315      	str	r3, [sp, #84]	; 0x54
 80180d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d0f0      	beq.n	80180ba <__gethex+0x386>
 80180d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80180dc:	f104 0314 	add.w	r3, r4, #20
 80180e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80180e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80180e8:	f04f 0c00 	mov.w	ip, #0
 80180ec:	4618      	mov	r0, r3
 80180ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80180f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80180f6:	d01c      	beq.n	8018132 <__gethex+0x3fe>
 80180f8:	3201      	adds	r2, #1
 80180fa:	6002      	str	r2, [r0, #0]
 80180fc:	2f02      	cmp	r7, #2
 80180fe:	f104 0314 	add.w	r3, r4, #20
 8018102:	d13f      	bne.n	8018184 <__gethex+0x450>
 8018104:	f8d8 2000 	ldr.w	r2, [r8]
 8018108:	3a01      	subs	r2, #1
 801810a:	42b2      	cmp	r2, r6
 801810c:	d10a      	bne.n	8018124 <__gethex+0x3f0>
 801810e:	1171      	asrs	r1, r6, #5
 8018110:	2201      	movs	r2, #1
 8018112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018116:	f006 061f 	and.w	r6, r6, #31
 801811a:	fa02 f606 	lsl.w	r6, r2, r6
 801811e:	421e      	tst	r6, r3
 8018120:	bf18      	it	ne
 8018122:	4617      	movne	r7, r2
 8018124:	f047 0720 	orr.w	r7, r7, #32
 8018128:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801812a:	601c      	str	r4, [r3, #0]
 801812c:	9b04      	ldr	r3, [sp, #16]
 801812e:	601d      	str	r5, [r3, #0]
 8018130:	e695      	b.n	8017e5e <__gethex+0x12a>
 8018132:	4299      	cmp	r1, r3
 8018134:	f843 cc04 	str.w	ip, [r3, #-4]
 8018138:	d8d8      	bhi.n	80180ec <__gethex+0x3b8>
 801813a:	68a3      	ldr	r3, [r4, #8]
 801813c:	459b      	cmp	fp, r3
 801813e:	db19      	blt.n	8018174 <__gethex+0x440>
 8018140:	6861      	ldr	r1, [r4, #4]
 8018142:	ee18 0a10 	vmov	r0, s16
 8018146:	3101      	adds	r1, #1
 8018148:	f000 f92c 	bl	80183a4 <_Balloc>
 801814c:	4681      	mov	r9, r0
 801814e:	b918      	cbnz	r0, 8018158 <__gethex+0x424>
 8018150:	4b1a      	ldr	r3, [pc, #104]	; (80181bc <__gethex+0x488>)
 8018152:	4602      	mov	r2, r0
 8018154:	2184      	movs	r1, #132	; 0x84
 8018156:	e6a8      	b.n	8017eaa <__gethex+0x176>
 8018158:	6922      	ldr	r2, [r4, #16]
 801815a:	3202      	adds	r2, #2
 801815c:	f104 010c 	add.w	r1, r4, #12
 8018160:	0092      	lsls	r2, r2, #2
 8018162:	300c      	adds	r0, #12
 8018164:	f7fd fa3e 	bl	80155e4 <memcpy>
 8018168:	4621      	mov	r1, r4
 801816a:	ee18 0a10 	vmov	r0, s16
 801816e:	f000 f959 	bl	8018424 <_Bfree>
 8018172:	464c      	mov	r4, r9
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	1c5a      	adds	r2, r3, #1
 8018178:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801817c:	6122      	str	r2, [r4, #16]
 801817e:	2201      	movs	r2, #1
 8018180:	615a      	str	r2, [r3, #20]
 8018182:	e7bb      	b.n	80180fc <__gethex+0x3c8>
 8018184:	6922      	ldr	r2, [r4, #16]
 8018186:	455a      	cmp	r2, fp
 8018188:	dd0b      	ble.n	80181a2 <__gethex+0x46e>
 801818a:	2101      	movs	r1, #1
 801818c:	4620      	mov	r0, r4
 801818e:	f7ff fd69 	bl	8017c64 <rshift>
 8018192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018196:	3501      	adds	r5, #1
 8018198:	42ab      	cmp	r3, r5
 801819a:	f6ff aed0 	blt.w	8017f3e <__gethex+0x20a>
 801819e:	2701      	movs	r7, #1
 80181a0:	e7c0      	b.n	8018124 <__gethex+0x3f0>
 80181a2:	f016 061f 	ands.w	r6, r6, #31
 80181a6:	d0fa      	beq.n	801819e <__gethex+0x46a>
 80181a8:	4453      	add	r3, sl
 80181aa:	f1c6 0620 	rsb	r6, r6, #32
 80181ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80181b2:	f000 f9e9 	bl	8018588 <__hi0bits>
 80181b6:	42b0      	cmp	r0, r6
 80181b8:	dbe7      	blt.n	801818a <__gethex+0x456>
 80181ba:	e7f0      	b.n	801819e <__gethex+0x46a>
 80181bc:	0801a5f0 	.word	0x0801a5f0

080181c0 <L_shift>:
 80181c0:	f1c2 0208 	rsb	r2, r2, #8
 80181c4:	0092      	lsls	r2, r2, #2
 80181c6:	b570      	push	{r4, r5, r6, lr}
 80181c8:	f1c2 0620 	rsb	r6, r2, #32
 80181cc:	6843      	ldr	r3, [r0, #4]
 80181ce:	6804      	ldr	r4, [r0, #0]
 80181d0:	fa03 f506 	lsl.w	r5, r3, r6
 80181d4:	432c      	orrs	r4, r5
 80181d6:	40d3      	lsrs	r3, r2
 80181d8:	6004      	str	r4, [r0, #0]
 80181da:	f840 3f04 	str.w	r3, [r0, #4]!
 80181de:	4288      	cmp	r0, r1
 80181e0:	d3f4      	bcc.n	80181cc <L_shift+0xc>
 80181e2:	bd70      	pop	{r4, r5, r6, pc}

080181e4 <__match>:
 80181e4:	b530      	push	{r4, r5, lr}
 80181e6:	6803      	ldr	r3, [r0, #0]
 80181e8:	3301      	adds	r3, #1
 80181ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181ee:	b914      	cbnz	r4, 80181f6 <__match+0x12>
 80181f0:	6003      	str	r3, [r0, #0]
 80181f2:	2001      	movs	r0, #1
 80181f4:	bd30      	pop	{r4, r5, pc}
 80181f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80181fe:	2d19      	cmp	r5, #25
 8018200:	bf98      	it	ls
 8018202:	3220      	addls	r2, #32
 8018204:	42a2      	cmp	r2, r4
 8018206:	d0f0      	beq.n	80181ea <__match+0x6>
 8018208:	2000      	movs	r0, #0
 801820a:	e7f3      	b.n	80181f4 <__match+0x10>

0801820c <__hexnan>:
 801820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018210:	680b      	ldr	r3, [r1, #0]
 8018212:	115e      	asrs	r6, r3, #5
 8018214:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018218:	f013 031f 	ands.w	r3, r3, #31
 801821c:	b087      	sub	sp, #28
 801821e:	bf18      	it	ne
 8018220:	3604      	addne	r6, #4
 8018222:	2500      	movs	r5, #0
 8018224:	1f37      	subs	r7, r6, #4
 8018226:	4690      	mov	r8, r2
 8018228:	6802      	ldr	r2, [r0, #0]
 801822a:	9301      	str	r3, [sp, #4]
 801822c:	4682      	mov	sl, r0
 801822e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018232:	46b9      	mov	r9, r7
 8018234:	463c      	mov	r4, r7
 8018236:	9502      	str	r5, [sp, #8]
 8018238:	46ab      	mov	fp, r5
 801823a:	7851      	ldrb	r1, [r2, #1]
 801823c:	1c53      	adds	r3, r2, #1
 801823e:	9303      	str	r3, [sp, #12]
 8018240:	b341      	cbz	r1, 8018294 <__hexnan+0x88>
 8018242:	4608      	mov	r0, r1
 8018244:	9205      	str	r2, [sp, #20]
 8018246:	9104      	str	r1, [sp, #16]
 8018248:	f7ff fd5e 	bl	8017d08 <__hexdig_fun>
 801824c:	2800      	cmp	r0, #0
 801824e:	d14f      	bne.n	80182f0 <__hexnan+0xe4>
 8018250:	9904      	ldr	r1, [sp, #16]
 8018252:	9a05      	ldr	r2, [sp, #20]
 8018254:	2920      	cmp	r1, #32
 8018256:	d818      	bhi.n	801828a <__hexnan+0x7e>
 8018258:	9b02      	ldr	r3, [sp, #8]
 801825a:	459b      	cmp	fp, r3
 801825c:	dd13      	ble.n	8018286 <__hexnan+0x7a>
 801825e:	454c      	cmp	r4, r9
 8018260:	d206      	bcs.n	8018270 <__hexnan+0x64>
 8018262:	2d07      	cmp	r5, #7
 8018264:	dc04      	bgt.n	8018270 <__hexnan+0x64>
 8018266:	462a      	mov	r2, r5
 8018268:	4649      	mov	r1, r9
 801826a:	4620      	mov	r0, r4
 801826c:	f7ff ffa8 	bl	80181c0 <L_shift>
 8018270:	4544      	cmp	r4, r8
 8018272:	d950      	bls.n	8018316 <__hexnan+0x10a>
 8018274:	2300      	movs	r3, #0
 8018276:	f1a4 0904 	sub.w	r9, r4, #4
 801827a:	f844 3c04 	str.w	r3, [r4, #-4]
 801827e:	f8cd b008 	str.w	fp, [sp, #8]
 8018282:	464c      	mov	r4, r9
 8018284:	461d      	mov	r5, r3
 8018286:	9a03      	ldr	r2, [sp, #12]
 8018288:	e7d7      	b.n	801823a <__hexnan+0x2e>
 801828a:	2929      	cmp	r1, #41	; 0x29
 801828c:	d156      	bne.n	801833c <__hexnan+0x130>
 801828e:	3202      	adds	r2, #2
 8018290:	f8ca 2000 	str.w	r2, [sl]
 8018294:	f1bb 0f00 	cmp.w	fp, #0
 8018298:	d050      	beq.n	801833c <__hexnan+0x130>
 801829a:	454c      	cmp	r4, r9
 801829c:	d206      	bcs.n	80182ac <__hexnan+0xa0>
 801829e:	2d07      	cmp	r5, #7
 80182a0:	dc04      	bgt.n	80182ac <__hexnan+0xa0>
 80182a2:	462a      	mov	r2, r5
 80182a4:	4649      	mov	r1, r9
 80182a6:	4620      	mov	r0, r4
 80182a8:	f7ff ff8a 	bl	80181c0 <L_shift>
 80182ac:	4544      	cmp	r4, r8
 80182ae:	d934      	bls.n	801831a <__hexnan+0x10e>
 80182b0:	f1a8 0204 	sub.w	r2, r8, #4
 80182b4:	4623      	mov	r3, r4
 80182b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80182ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80182be:	429f      	cmp	r7, r3
 80182c0:	d2f9      	bcs.n	80182b6 <__hexnan+0xaa>
 80182c2:	1b3b      	subs	r3, r7, r4
 80182c4:	f023 0303 	bic.w	r3, r3, #3
 80182c8:	3304      	adds	r3, #4
 80182ca:	3401      	adds	r4, #1
 80182cc:	3e03      	subs	r6, #3
 80182ce:	42b4      	cmp	r4, r6
 80182d0:	bf88      	it	hi
 80182d2:	2304      	movhi	r3, #4
 80182d4:	4443      	add	r3, r8
 80182d6:	2200      	movs	r2, #0
 80182d8:	f843 2b04 	str.w	r2, [r3], #4
 80182dc:	429f      	cmp	r7, r3
 80182de:	d2fb      	bcs.n	80182d8 <__hexnan+0xcc>
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	b91b      	cbnz	r3, 80182ec <__hexnan+0xe0>
 80182e4:	4547      	cmp	r7, r8
 80182e6:	d127      	bne.n	8018338 <__hexnan+0x12c>
 80182e8:	2301      	movs	r3, #1
 80182ea:	603b      	str	r3, [r7, #0]
 80182ec:	2005      	movs	r0, #5
 80182ee:	e026      	b.n	801833e <__hexnan+0x132>
 80182f0:	3501      	adds	r5, #1
 80182f2:	2d08      	cmp	r5, #8
 80182f4:	f10b 0b01 	add.w	fp, fp, #1
 80182f8:	dd06      	ble.n	8018308 <__hexnan+0xfc>
 80182fa:	4544      	cmp	r4, r8
 80182fc:	d9c3      	bls.n	8018286 <__hexnan+0x7a>
 80182fe:	2300      	movs	r3, #0
 8018300:	f844 3c04 	str.w	r3, [r4, #-4]
 8018304:	2501      	movs	r5, #1
 8018306:	3c04      	subs	r4, #4
 8018308:	6822      	ldr	r2, [r4, #0]
 801830a:	f000 000f 	and.w	r0, r0, #15
 801830e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018312:	6022      	str	r2, [r4, #0]
 8018314:	e7b7      	b.n	8018286 <__hexnan+0x7a>
 8018316:	2508      	movs	r5, #8
 8018318:	e7b5      	b.n	8018286 <__hexnan+0x7a>
 801831a:	9b01      	ldr	r3, [sp, #4]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d0df      	beq.n	80182e0 <__hexnan+0xd4>
 8018320:	f04f 32ff 	mov.w	r2, #4294967295
 8018324:	f1c3 0320 	rsb	r3, r3, #32
 8018328:	fa22 f303 	lsr.w	r3, r2, r3
 801832c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018330:	401a      	ands	r2, r3
 8018332:	f846 2c04 	str.w	r2, [r6, #-4]
 8018336:	e7d3      	b.n	80182e0 <__hexnan+0xd4>
 8018338:	3f04      	subs	r7, #4
 801833a:	e7d1      	b.n	80182e0 <__hexnan+0xd4>
 801833c:	2004      	movs	r0, #4
 801833e:	b007      	add	sp, #28
 8018340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018344 <_localeconv_r>:
 8018344:	4800      	ldr	r0, [pc, #0]	; (8018348 <_localeconv_r+0x4>)
 8018346:	4770      	bx	lr
 8018348:	24000258 	.word	0x24000258

0801834c <_lseek_r>:
 801834c:	b538      	push	{r3, r4, r5, lr}
 801834e:	4d07      	ldr	r5, [pc, #28]	; (801836c <_lseek_r+0x20>)
 8018350:	4604      	mov	r4, r0
 8018352:	4608      	mov	r0, r1
 8018354:	4611      	mov	r1, r2
 8018356:	2200      	movs	r2, #0
 8018358:	602a      	str	r2, [r5, #0]
 801835a:	461a      	mov	r2, r3
 801835c:	f7ea fd2e 	bl	8002dbc <_lseek>
 8018360:	1c43      	adds	r3, r0, #1
 8018362:	d102      	bne.n	801836a <_lseek_r+0x1e>
 8018364:	682b      	ldr	r3, [r5, #0]
 8018366:	b103      	cbz	r3, 801836a <_lseek_r+0x1e>
 8018368:	6023      	str	r3, [r4, #0]
 801836a:	bd38      	pop	{r3, r4, r5, pc}
 801836c:	240028fc 	.word	0x240028fc

08018370 <malloc>:
 8018370:	4b02      	ldr	r3, [pc, #8]	; (801837c <malloc+0xc>)
 8018372:	4601      	mov	r1, r0
 8018374:	6818      	ldr	r0, [r3, #0]
 8018376:	f000 bd55 	b.w	8018e24 <_malloc_r>
 801837a:	bf00      	nop
 801837c:	24000100 	.word	0x24000100

08018380 <__ascii_mbtowc>:
 8018380:	b082      	sub	sp, #8
 8018382:	b901      	cbnz	r1, 8018386 <__ascii_mbtowc+0x6>
 8018384:	a901      	add	r1, sp, #4
 8018386:	b142      	cbz	r2, 801839a <__ascii_mbtowc+0x1a>
 8018388:	b14b      	cbz	r3, 801839e <__ascii_mbtowc+0x1e>
 801838a:	7813      	ldrb	r3, [r2, #0]
 801838c:	600b      	str	r3, [r1, #0]
 801838e:	7812      	ldrb	r2, [r2, #0]
 8018390:	1e10      	subs	r0, r2, #0
 8018392:	bf18      	it	ne
 8018394:	2001      	movne	r0, #1
 8018396:	b002      	add	sp, #8
 8018398:	4770      	bx	lr
 801839a:	4610      	mov	r0, r2
 801839c:	e7fb      	b.n	8018396 <__ascii_mbtowc+0x16>
 801839e:	f06f 0001 	mvn.w	r0, #1
 80183a2:	e7f8      	b.n	8018396 <__ascii_mbtowc+0x16>

080183a4 <_Balloc>:
 80183a4:	b570      	push	{r4, r5, r6, lr}
 80183a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80183a8:	4604      	mov	r4, r0
 80183aa:	460d      	mov	r5, r1
 80183ac:	b976      	cbnz	r6, 80183cc <_Balloc+0x28>
 80183ae:	2010      	movs	r0, #16
 80183b0:	f7ff ffde 	bl	8018370 <malloc>
 80183b4:	4602      	mov	r2, r0
 80183b6:	6260      	str	r0, [r4, #36]	; 0x24
 80183b8:	b920      	cbnz	r0, 80183c4 <_Balloc+0x20>
 80183ba:	4b18      	ldr	r3, [pc, #96]	; (801841c <_Balloc+0x78>)
 80183bc:	4818      	ldr	r0, [pc, #96]	; (8018420 <_Balloc+0x7c>)
 80183be:	2166      	movs	r1, #102	; 0x66
 80183c0:	f000 ff4c 	bl	801925c <__assert_func>
 80183c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183c8:	6006      	str	r6, [r0, #0]
 80183ca:	60c6      	str	r6, [r0, #12]
 80183cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80183ce:	68f3      	ldr	r3, [r6, #12]
 80183d0:	b183      	cbz	r3, 80183f4 <_Balloc+0x50>
 80183d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80183d4:	68db      	ldr	r3, [r3, #12]
 80183d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80183da:	b9b8      	cbnz	r0, 801840c <_Balloc+0x68>
 80183dc:	2101      	movs	r1, #1
 80183de:	fa01 f605 	lsl.w	r6, r1, r5
 80183e2:	1d72      	adds	r2, r6, #5
 80183e4:	0092      	lsls	r2, r2, #2
 80183e6:	4620      	mov	r0, r4
 80183e8:	f000 fc9a 	bl	8018d20 <_calloc_r>
 80183ec:	b160      	cbz	r0, 8018408 <_Balloc+0x64>
 80183ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80183f2:	e00e      	b.n	8018412 <_Balloc+0x6e>
 80183f4:	2221      	movs	r2, #33	; 0x21
 80183f6:	2104      	movs	r1, #4
 80183f8:	4620      	mov	r0, r4
 80183fa:	f000 fc91 	bl	8018d20 <_calloc_r>
 80183fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018400:	60f0      	str	r0, [r6, #12]
 8018402:	68db      	ldr	r3, [r3, #12]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d1e4      	bne.n	80183d2 <_Balloc+0x2e>
 8018408:	2000      	movs	r0, #0
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	6802      	ldr	r2, [r0, #0]
 801840e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018412:	2300      	movs	r3, #0
 8018414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018418:	e7f7      	b.n	801840a <_Balloc+0x66>
 801841a:	bf00      	nop
 801841c:	0801a57e 	.word	0x0801a57e
 8018420:	0801a67c 	.word	0x0801a67c

08018424 <_Bfree>:
 8018424:	b570      	push	{r4, r5, r6, lr}
 8018426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018428:	4605      	mov	r5, r0
 801842a:	460c      	mov	r4, r1
 801842c:	b976      	cbnz	r6, 801844c <_Bfree+0x28>
 801842e:	2010      	movs	r0, #16
 8018430:	f7ff ff9e 	bl	8018370 <malloc>
 8018434:	4602      	mov	r2, r0
 8018436:	6268      	str	r0, [r5, #36]	; 0x24
 8018438:	b920      	cbnz	r0, 8018444 <_Bfree+0x20>
 801843a:	4b09      	ldr	r3, [pc, #36]	; (8018460 <_Bfree+0x3c>)
 801843c:	4809      	ldr	r0, [pc, #36]	; (8018464 <_Bfree+0x40>)
 801843e:	218a      	movs	r1, #138	; 0x8a
 8018440:	f000 ff0c 	bl	801925c <__assert_func>
 8018444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018448:	6006      	str	r6, [r0, #0]
 801844a:	60c6      	str	r6, [r0, #12]
 801844c:	b13c      	cbz	r4, 801845e <_Bfree+0x3a>
 801844e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018450:	6862      	ldr	r2, [r4, #4]
 8018452:	68db      	ldr	r3, [r3, #12]
 8018454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018458:	6021      	str	r1, [r4, #0]
 801845a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801845e:	bd70      	pop	{r4, r5, r6, pc}
 8018460:	0801a57e 	.word	0x0801a57e
 8018464:	0801a67c 	.word	0x0801a67c

08018468 <__multadd>:
 8018468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801846c:	690d      	ldr	r5, [r1, #16]
 801846e:	4607      	mov	r7, r0
 8018470:	460c      	mov	r4, r1
 8018472:	461e      	mov	r6, r3
 8018474:	f101 0c14 	add.w	ip, r1, #20
 8018478:	2000      	movs	r0, #0
 801847a:	f8dc 3000 	ldr.w	r3, [ip]
 801847e:	b299      	uxth	r1, r3
 8018480:	fb02 6101 	mla	r1, r2, r1, r6
 8018484:	0c1e      	lsrs	r6, r3, #16
 8018486:	0c0b      	lsrs	r3, r1, #16
 8018488:	fb02 3306 	mla	r3, r2, r6, r3
 801848c:	b289      	uxth	r1, r1
 801848e:	3001      	adds	r0, #1
 8018490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018494:	4285      	cmp	r5, r0
 8018496:	f84c 1b04 	str.w	r1, [ip], #4
 801849a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801849e:	dcec      	bgt.n	801847a <__multadd+0x12>
 80184a0:	b30e      	cbz	r6, 80184e6 <__multadd+0x7e>
 80184a2:	68a3      	ldr	r3, [r4, #8]
 80184a4:	42ab      	cmp	r3, r5
 80184a6:	dc19      	bgt.n	80184dc <__multadd+0x74>
 80184a8:	6861      	ldr	r1, [r4, #4]
 80184aa:	4638      	mov	r0, r7
 80184ac:	3101      	adds	r1, #1
 80184ae:	f7ff ff79 	bl	80183a4 <_Balloc>
 80184b2:	4680      	mov	r8, r0
 80184b4:	b928      	cbnz	r0, 80184c2 <__multadd+0x5a>
 80184b6:	4602      	mov	r2, r0
 80184b8:	4b0c      	ldr	r3, [pc, #48]	; (80184ec <__multadd+0x84>)
 80184ba:	480d      	ldr	r0, [pc, #52]	; (80184f0 <__multadd+0x88>)
 80184bc:	21b5      	movs	r1, #181	; 0xb5
 80184be:	f000 fecd 	bl	801925c <__assert_func>
 80184c2:	6922      	ldr	r2, [r4, #16]
 80184c4:	3202      	adds	r2, #2
 80184c6:	f104 010c 	add.w	r1, r4, #12
 80184ca:	0092      	lsls	r2, r2, #2
 80184cc:	300c      	adds	r0, #12
 80184ce:	f7fd f889 	bl	80155e4 <memcpy>
 80184d2:	4621      	mov	r1, r4
 80184d4:	4638      	mov	r0, r7
 80184d6:	f7ff ffa5 	bl	8018424 <_Bfree>
 80184da:	4644      	mov	r4, r8
 80184dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80184e0:	3501      	adds	r5, #1
 80184e2:	615e      	str	r6, [r3, #20]
 80184e4:	6125      	str	r5, [r4, #16]
 80184e6:	4620      	mov	r0, r4
 80184e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ec:	0801a5f0 	.word	0x0801a5f0
 80184f0:	0801a67c 	.word	0x0801a67c

080184f4 <__s2b>:
 80184f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f8:	460c      	mov	r4, r1
 80184fa:	4615      	mov	r5, r2
 80184fc:	461f      	mov	r7, r3
 80184fe:	2209      	movs	r2, #9
 8018500:	3308      	adds	r3, #8
 8018502:	4606      	mov	r6, r0
 8018504:	fb93 f3f2 	sdiv	r3, r3, r2
 8018508:	2100      	movs	r1, #0
 801850a:	2201      	movs	r2, #1
 801850c:	429a      	cmp	r2, r3
 801850e:	db09      	blt.n	8018524 <__s2b+0x30>
 8018510:	4630      	mov	r0, r6
 8018512:	f7ff ff47 	bl	80183a4 <_Balloc>
 8018516:	b940      	cbnz	r0, 801852a <__s2b+0x36>
 8018518:	4602      	mov	r2, r0
 801851a:	4b19      	ldr	r3, [pc, #100]	; (8018580 <__s2b+0x8c>)
 801851c:	4819      	ldr	r0, [pc, #100]	; (8018584 <__s2b+0x90>)
 801851e:	21ce      	movs	r1, #206	; 0xce
 8018520:	f000 fe9c 	bl	801925c <__assert_func>
 8018524:	0052      	lsls	r2, r2, #1
 8018526:	3101      	adds	r1, #1
 8018528:	e7f0      	b.n	801850c <__s2b+0x18>
 801852a:	9b08      	ldr	r3, [sp, #32]
 801852c:	6143      	str	r3, [r0, #20]
 801852e:	2d09      	cmp	r5, #9
 8018530:	f04f 0301 	mov.w	r3, #1
 8018534:	6103      	str	r3, [r0, #16]
 8018536:	dd16      	ble.n	8018566 <__s2b+0x72>
 8018538:	f104 0909 	add.w	r9, r4, #9
 801853c:	46c8      	mov	r8, r9
 801853e:	442c      	add	r4, r5
 8018540:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018544:	4601      	mov	r1, r0
 8018546:	3b30      	subs	r3, #48	; 0x30
 8018548:	220a      	movs	r2, #10
 801854a:	4630      	mov	r0, r6
 801854c:	f7ff ff8c 	bl	8018468 <__multadd>
 8018550:	45a0      	cmp	r8, r4
 8018552:	d1f5      	bne.n	8018540 <__s2b+0x4c>
 8018554:	f1a5 0408 	sub.w	r4, r5, #8
 8018558:	444c      	add	r4, r9
 801855a:	1b2d      	subs	r5, r5, r4
 801855c:	1963      	adds	r3, r4, r5
 801855e:	42bb      	cmp	r3, r7
 8018560:	db04      	blt.n	801856c <__s2b+0x78>
 8018562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018566:	340a      	adds	r4, #10
 8018568:	2509      	movs	r5, #9
 801856a:	e7f6      	b.n	801855a <__s2b+0x66>
 801856c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018570:	4601      	mov	r1, r0
 8018572:	3b30      	subs	r3, #48	; 0x30
 8018574:	220a      	movs	r2, #10
 8018576:	4630      	mov	r0, r6
 8018578:	f7ff ff76 	bl	8018468 <__multadd>
 801857c:	e7ee      	b.n	801855c <__s2b+0x68>
 801857e:	bf00      	nop
 8018580:	0801a5f0 	.word	0x0801a5f0
 8018584:	0801a67c 	.word	0x0801a67c

08018588 <__hi0bits>:
 8018588:	0c03      	lsrs	r3, r0, #16
 801858a:	041b      	lsls	r3, r3, #16
 801858c:	b9d3      	cbnz	r3, 80185c4 <__hi0bits+0x3c>
 801858e:	0400      	lsls	r0, r0, #16
 8018590:	2310      	movs	r3, #16
 8018592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018596:	bf04      	itt	eq
 8018598:	0200      	lsleq	r0, r0, #8
 801859a:	3308      	addeq	r3, #8
 801859c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80185a0:	bf04      	itt	eq
 80185a2:	0100      	lsleq	r0, r0, #4
 80185a4:	3304      	addeq	r3, #4
 80185a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80185aa:	bf04      	itt	eq
 80185ac:	0080      	lsleq	r0, r0, #2
 80185ae:	3302      	addeq	r3, #2
 80185b0:	2800      	cmp	r0, #0
 80185b2:	db05      	blt.n	80185c0 <__hi0bits+0x38>
 80185b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80185b8:	f103 0301 	add.w	r3, r3, #1
 80185bc:	bf08      	it	eq
 80185be:	2320      	moveq	r3, #32
 80185c0:	4618      	mov	r0, r3
 80185c2:	4770      	bx	lr
 80185c4:	2300      	movs	r3, #0
 80185c6:	e7e4      	b.n	8018592 <__hi0bits+0xa>

080185c8 <__lo0bits>:
 80185c8:	6803      	ldr	r3, [r0, #0]
 80185ca:	f013 0207 	ands.w	r2, r3, #7
 80185ce:	4601      	mov	r1, r0
 80185d0:	d00b      	beq.n	80185ea <__lo0bits+0x22>
 80185d2:	07da      	lsls	r2, r3, #31
 80185d4:	d423      	bmi.n	801861e <__lo0bits+0x56>
 80185d6:	0798      	lsls	r0, r3, #30
 80185d8:	bf49      	itett	mi
 80185da:	085b      	lsrmi	r3, r3, #1
 80185dc:	089b      	lsrpl	r3, r3, #2
 80185de:	2001      	movmi	r0, #1
 80185e0:	600b      	strmi	r3, [r1, #0]
 80185e2:	bf5c      	itt	pl
 80185e4:	600b      	strpl	r3, [r1, #0]
 80185e6:	2002      	movpl	r0, #2
 80185e8:	4770      	bx	lr
 80185ea:	b298      	uxth	r0, r3
 80185ec:	b9a8      	cbnz	r0, 801861a <__lo0bits+0x52>
 80185ee:	0c1b      	lsrs	r3, r3, #16
 80185f0:	2010      	movs	r0, #16
 80185f2:	b2da      	uxtb	r2, r3
 80185f4:	b90a      	cbnz	r2, 80185fa <__lo0bits+0x32>
 80185f6:	3008      	adds	r0, #8
 80185f8:	0a1b      	lsrs	r3, r3, #8
 80185fa:	071a      	lsls	r2, r3, #28
 80185fc:	bf04      	itt	eq
 80185fe:	091b      	lsreq	r3, r3, #4
 8018600:	3004      	addeq	r0, #4
 8018602:	079a      	lsls	r2, r3, #30
 8018604:	bf04      	itt	eq
 8018606:	089b      	lsreq	r3, r3, #2
 8018608:	3002      	addeq	r0, #2
 801860a:	07da      	lsls	r2, r3, #31
 801860c:	d403      	bmi.n	8018616 <__lo0bits+0x4e>
 801860e:	085b      	lsrs	r3, r3, #1
 8018610:	f100 0001 	add.w	r0, r0, #1
 8018614:	d005      	beq.n	8018622 <__lo0bits+0x5a>
 8018616:	600b      	str	r3, [r1, #0]
 8018618:	4770      	bx	lr
 801861a:	4610      	mov	r0, r2
 801861c:	e7e9      	b.n	80185f2 <__lo0bits+0x2a>
 801861e:	2000      	movs	r0, #0
 8018620:	4770      	bx	lr
 8018622:	2020      	movs	r0, #32
 8018624:	4770      	bx	lr
	...

08018628 <__i2b>:
 8018628:	b510      	push	{r4, lr}
 801862a:	460c      	mov	r4, r1
 801862c:	2101      	movs	r1, #1
 801862e:	f7ff feb9 	bl	80183a4 <_Balloc>
 8018632:	4602      	mov	r2, r0
 8018634:	b928      	cbnz	r0, 8018642 <__i2b+0x1a>
 8018636:	4b05      	ldr	r3, [pc, #20]	; (801864c <__i2b+0x24>)
 8018638:	4805      	ldr	r0, [pc, #20]	; (8018650 <__i2b+0x28>)
 801863a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801863e:	f000 fe0d 	bl	801925c <__assert_func>
 8018642:	2301      	movs	r3, #1
 8018644:	6144      	str	r4, [r0, #20]
 8018646:	6103      	str	r3, [r0, #16]
 8018648:	bd10      	pop	{r4, pc}
 801864a:	bf00      	nop
 801864c:	0801a5f0 	.word	0x0801a5f0
 8018650:	0801a67c 	.word	0x0801a67c

08018654 <__multiply>:
 8018654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018658:	4691      	mov	r9, r2
 801865a:	690a      	ldr	r2, [r1, #16]
 801865c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018660:	429a      	cmp	r2, r3
 8018662:	bfb8      	it	lt
 8018664:	460b      	movlt	r3, r1
 8018666:	460c      	mov	r4, r1
 8018668:	bfbc      	itt	lt
 801866a:	464c      	movlt	r4, r9
 801866c:	4699      	movlt	r9, r3
 801866e:	6927      	ldr	r7, [r4, #16]
 8018670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018674:	68a3      	ldr	r3, [r4, #8]
 8018676:	6861      	ldr	r1, [r4, #4]
 8018678:	eb07 060a 	add.w	r6, r7, sl
 801867c:	42b3      	cmp	r3, r6
 801867e:	b085      	sub	sp, #20
 8018680:	bfb8      	it	lt
 8018682:	3101      	addlt	r1, #1
 8018684:	f7ff fe8e 	bl	80183a4 <_Balloc>
 8018688:	b930      	cbnz	r0, 8018698 <__multiply+0x44>
 801868a:	4602      	mov	r2, r0
 801868c:	4b44      	ldr	r3, [pc, #272]	; (80187a0 <__multiply+0x14c>)
 801868e:	4845      	ldr	r0, [pc, #276]	; (80187a4 <__multiply+0x150>)
 8018690:	f240 115d 	movw	r1, #349	; 0x15d
 8018694:	f000 fde2 	bl	801925c <__assert_func>
 8018698:	f100 0514 	add.w	r5, r0, #20
 801869c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80186a0:	462b      	mov	r3, r5
 80186a2:	2200      	movs	r2, #0
 80186a4:	4543      	cmp	r3, r8
 80186a6:	d321      	bcc.n	80186ec <__multiply+0x98>
 80186a8:	f104 0314 	add.w	r3, r4, #20
 80186ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80186b0:	f109 0314 	add.w	r3, r9, #20
 80186b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80186b8:	9202      	str	r2, [sp, #8]
 80186ba:	1b3a      	subs	r2, r7, r4
 80186bc:	3a15      	subs	r2, #21
 80186be:	f022 0203 	bic.w	r2, r2, #3
 80186c2:	3204      	adds	r2, #4
 80186c4:	f104 0115 	add.w	r1, r4, #21
 80186c8:	428f      	cmp	r7, r1
 80186ca:	bf38      	it	cc
 80186cc:	2204      	movcc	r2, #4
 80186ce:	9201      	str	r2, [sp, #4]
 80186d0:	9a02      	ldr	r2, [sp, #8]
 80186d2:	9303      	str	r3, [sp, #12]
 80186d4:	429a      	cmp	r2, r3
 80186d6:	d80c      	bhi.n	80186f2 <__multiply+0x9e>
 80186d8:	2e00      	cmp	r6, #0
 80186da:	dd03      	ble.n	80186e4 <__multiply+0x90>
 80186dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d05a      	beq.n	801879a <__multiply+0x146>
 80186e4:	6106      	str	r6, [r0, #16]
 80186e6:	b005      	add	sp, #20
 80186e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ec:	f843 2b04 	str.w	r2, [r3], #4
 80186f0:	e7d8      	b.n	80186a4 <__multiply+0x50>
 80186f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80186f6:	f1ba 0f00 	cmp.w	sl, #0
 80186fa:	d024      	beq.n	8018746 <__multiply+0xf2>
 80186fc:	f104 0e14 	add.w	lr, r4, #20
 8018700:	46a9      	mov	r9, r5
 8018702:	f04f 0c00 	mov.w	ip, #0
 8018706:	f85e 2b04 	ldr.w	r2, [lr], #4
 801870a:	f8d9 1000 	ldr.w	r1, [r9]
 801870e:	fa1f fb82 	uxth.w	fp, r2
 8018712:	b289      	uxth	r1, r1
 8018714:	fb0a 110b 	mla	r1, sl, fp, r1
 8018718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801871c:	f8d9 2000 	ldr.w	r2, [r9]
 8018720:	4461      	add	r1, ip
 8018722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018726:	fb0a c20b 	mla	r2, sl, fp, ip
 801872a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801872e:	b289      	uxth	r1, r1
 8018730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018734:	4577      	cmp	r7, lr
 8018736:	f849 1b04 	str.w	r1, [r9], #4
 801873a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801873e:	d8e2      	bhi.n	8018706 <__multiply+0xb2>
 8018740:	9a01      	ldr	r2, [sp, #4]
 8018742:	f845 c002 	str.w	ip, [r5, r2]
 8018746:	9a03      	ldr	r2, [sp, #12]
 8018748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801874c:	3304      	adds	r3, #4
 801874e:	f1b9 0f00 	cmp.w	r9, #0
 8018752:	d020      	beq.n	8018796 <__multiply+0x142>
 8018754:	6829      	ldr	r1, [r5, #0]
 8018756:	f104 0c14 	add.w	ip, r4, #20
 801875a:	46ae      	mov	lr, r5
 801875c:	f04f 0a00 	mov.w	sl, #0
 8018760:	f8bc b000 	ldrh.w	fp, [ip]
 8018764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018768:	fb09 220b 	mla	r2, r9, fp, r2
 801876c:	4492      	add	sl, r2
 801876e:	b289      	uxth	r1, r1
 8018770:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018774:	f84e 1b04 	str.w	r1, [lr], #4
 8018778:	f85c 2b04 	ldr.w	r2, [ip], #4
 801877c:	f8be 1000 	ldrh.w	r1, [lr]
 8018780:	0c12      	lsrs	r2, r2, #16
 8018782:	fb09 1102 	mla	r1, r9, r2, r1
 8018786:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801878a:	4567      	cmp	r7, ip
 801878c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018790:	d8e6      	bhi.n	8018760 <__multiply+0x10c>
 8018792:	9a01      	ldr	r2, [sp, #4]
 8018794:	50a9      	str	r1, [r5, r2]
 8018796:	3504      	adds	r5, #4
 8018798:	e79a      	b.n	80186d0 <__multiply+0x7c>
 801879a:	3e01      	subs	r6, #1
 801879c:	e79c      	b.n	80186d8 <__multiply+0x84>
 801879e:	bf00      	nop
 80187a0:	0801a5f0 	.word	0x0801a5f0
 80187a4:	0801a67c 	.word	0x0801a67c

080187a8 <__pow5mult>:
 80187a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187ac:	4615      	mov	r5, r2
 80187ae:	f012 0203 	ands.w	r2, r2, #3
 80187b2:	4606      	mov	r6, r0
 80187b4:	460f      	mov	r7, r1
 80187b6:	d007      	beq.n	80187c8 <__pow5mult+0x20>
 80187b8:	4c25      	ldr	r4, [pc, #148]	; (8018850 <__pow5mult+0xa8>)
 80187ba:	3a01      	subs	r2, #1
 80187bc:	2300      	movs	r3, #0
 80187be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80187c2:	f7ff fe51 	bl	8018468 <__multadd>
 80187c6:	4607      	mov	r7, r0
 80187c8:	10ad      	asrs	r5, r5, #2
 80187ca:	d03d      	beq.n	8018848 <__pow5mult+0xa0>
 80187cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80187ce:	b97c      	cbnz	r4, 80187f0 <__pow5mult+0x48>
 80187d0:	2010      	movs	r0, #16
 80187d2:	f7ff fdcd 	bl	8018370 <malloc>
 80187d6:	4602      	mov	r2, r0
 80187d8:	6270      	str	r0, [r6, #36]	; 0x24
 80187da:	b928      	cbnz	r0, 80187e8 <__pow5mult+0x40>
 80187dc:	4b1d      	ldr	r3, [pc, #116]	; (8018854 <__pow5mult+0xac>)
 80187de:	481e      	ldr	r0, [pc, #120]	; (8018858 <__pow5mult+0xb0>)
 80187e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80187e4:	f000 fd3a 	bl	801925c <__assert_func>
 80187e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80187ec:	6004      	str	r4, [r0, #0]
 80187ee:	60c4      	str	r4, [r0, #12]
 80187f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80187f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80187f8:	b94c      	cbnz	r4, 801880e <__pow5mult+0x66>
 80187fa:	f240 2171 	movw	r1, #625	; 0x271
 80187fe:	4630      	mov	r0, r6
 8018800:	f7ff ff12 	bl	8018628 <__i2b>
 8018804:	2300      	movs	r3, #0
 8018806:	f8c8 0008 	str.w	r0, [r8, #8]
 801880a:	4604      	mov	r4, r0
 801880c:	6003      	str	r3, [r0, #0]
 801880e:	f04f 0900 	mov.w	r9, #0
 8018812:	07eb      	lsls	r3, r5, #31
 8018814:	d50a      	bpl.n	801882c <__pow5mult+0x84>
 8018816:	4639      	mov	r1, r7
 8018818:	4622      	mov	r2, r4
 801881a:	4630      	mov	r0, r6
 801881c:	f7ff ff1a 	bl	8018654 <__multiply>
 8018820:	4639      	mov	r1, r7
 8018822:	4680      	mov	r8, r0
 8018824:	4630      	mov	r0, r6
 8018826:	f7ff fdfd 	bl	8018424 <_Bfree>
 801882a:	4647      	mov	r7, r8
 801882c:	106d      	asrs	r5, r5, #1
 801882e:	d00b      	beq.n	8018848 <__pow5mult+0xa0>
 8018830:	6820      	ldr	r0, [r4, #0]
 8018832:	b938      	cbnz	r0, 8018844 <__pow5mult+0x9c>
 8018834:	4622      	mov	r2, r4
 8018836:	4621      	mov	r1, r4
 8018838:	4630      	mov	r0, r6
 801883a:	f7ff ff0b 	bl	8018654 <__multiply>
 801883e:	6020      	str	r0, [r4, #0]
 8018840:	f8c0 9000 	str.w	r9, [r0]
 8018844:	4604      	mov	r4, r0
 8018846:	e7e4      	b.n	8018812 <__pow5mult+0x6a>
 8018848:	4638      	mov	r0, r7
 801884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801884e:	bf00      	nop
 8018850:	0801a7c8 	.word	0x0801a7c8
 8018854:	0801a57e 	.word	0x0801a57e
 8018858:	0801a67c 	.word	0x0801a67c

0801885c <__lshift>:
 801885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018860:	460c      	mov	r4, r1
 8018862:	6849      	ldr	r1, [r1, #4]
 8018864:	6923      	ldr	r3, [r4, #16]
 8018866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801886a:	68a3      	ldr	r3, [r4, #8]
 801886c:	4607      	mov	r7, r0
 801886e:	4691      	mov	r9, r2
 8018870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018874:	f108 0601 	add.w	r6, r8, #1
 8018878:	42b3      	cmp	r3, r6
 801887a:	db0b      	blt.n	8018894 <__lshift+0x38>
 801887c:	4638      	mov	r0, r7
 801887e:	f7ff fd91 	bl	80183a4 <_Balloc>
 8018882:	4605      	mov	r5, r0
 8018884:	b948      	cbnz	r0, 801889a <__lshift+0x3e>
 8018886:	4602      	mov	r2, r0
 8018888:	4b2a      	ldr	r3, [pc, #168]	; (8018934 <__lshift+0xd8>)
 801888a:	482b      	ldr	r0, [pc, #172]	; (8018938 <__lshift+0xdc>)
 801888c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018890:	f000 fce4 	bl	801925c <__assert_func>
 8018894:	3101      	adds	r1, #1
 8018896:	005b      	lsls	r3, r3, #1
 8018898:	e7ee      	b.n	8018878 <__lshift+0x1c>
 801889a:	2300      	movs	r3, #0
 801889c:	f100 0114 	add.w	r1, r0, #20
 80188a0:	f100 0210 	add.w	r2, r0, #16
 80188a4:	4618      	mov	r0, r3
 80188a6:	4553      	cmp	r3, sl
 80188a8:	db37      	blt.n	801891a <__lshift+0xbe>
 80188aa:	6920      	ldr	r0, [r4, #16]
 80188ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80188b0:	f104 0314 	add.w	r3, r4, #20
 80188b4:	f019 091f 	ands.w	r9, r9, #31
 80188b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80188bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80188c0:	d02f      	beq.n	8018922 <__lshift+0xc6>
 80188c2:	f1c9 0e20 	rsb	lr, r9, #32
 80188c6:	468a      	mov	sl, r1
 80188c8:	f04f 0c00 	mov.w	ip, #0
 80188cc:	681a      	ldr	r2, [r3, #0]
 80188ce:	fa02 f209 	lsl.w	r2, r2, r9
 80188d2:	ea42 020c 	orr.w	r2, r2, ip
 80188d6:	f84a 2b04 	str.w	r2, [sl], #4
 80188da:	f853 2b04 	ldr.w	r2, [r3], #4
 80188de:	4298      	cmp	r0, r3
 80188e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80188e4:	d8f2      	bhi.n	80188cc <__lshift+0x70>
 80188e6:	1b03      	subs	r3, r0, r4
 80188e8:	3b15      	subs	r3, #21
 80188ea:	f023 0303 	bic.w	r3, r3, #3
 80188ee:	3304      	adds	r3, #4
 80188f0:	f104 0215 	add.w	r2, r4, #21
 80188f4:	4290      	cmp	r0, r2
 80188f6:	bf38      	it	cc
 80188f8:	2304      	movcc	r3, #4
 80188fa:	f841 c003 	str.w	ip, [r1, r3]
 80188fe:	f1bc 0f00 	cmp.w	ip, #0
 8018902:	d001      	beq.n	8018908 <__lshift+0xac>
 8018904:	f108 0602 	add.w	r6, r8, #2
 8018908:	3e01      	subs	r6, #1
 801890a:	4638      	mov	r0, r7
 801890c:	612e      	str	r6, [r5, #16]
 801890e:	4621      	mov	r1, r4
 8018910:	f7ff fd88 	bl	8018424 <_Bfree>
 8018914:	4628      	mov	r0, r5
 8018916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801891a:	f842 0f04 	str.w	r0, [r2, #4]!
 801891e:	3301      	adds	r3, #1
 8018920:	e7c1      	b.n	80188a6 <__lshift+0x4a>
 8018922:	3904      	subs	r1, #4
 8018924:	f853 2b04 	ldr.w	r2, [r3], #4
 8018928:	f841 2f04 	str.w	r2, [r1, #4]!
 801892c:	4298      	cmp	r0, r3
 801892e:	d8f9      	bhi.n	8018924 <__lshift+0xc8>
 8018930:	e7ea      	b.n	8018908 <__lshift+0xac>
 8018932:	bf00      	nop
 8018934:	0801a5f0 	.word	0x0801a5f0
 8018938:	0801a67c 	.word	0x0801a67c

0801893c <__mcmp>:
 801893c:	b530      	push	{r4, r5, lr}
 801893e:	6902      	ldr	r2, [r0, #16]
 8018940:	690c      	ldr	r4, [r1, #16]
 8018942:	1b12      	subs	r2, r2, r4
 8018944:	d10e      	bne.n	8018964 <__mcmp+0x28>
 8018946:	f100 0314 	add.w	r3, r0, #20
 801894a:	3114      	adds	r1, #20
 801894c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801895c:	42a5      	cmp	r5, r4
 801895e:	d003      	beq.n	8018968 <__mcmp+0x2c>
 8018960:	d305      	bcc.n	801896e <__mcmp+0x32>
 8018962:	2201      	movs	r2, #1
 8018964:	4610      	mov	r0, r2
 8018966:	bd30      	pop	{r4, r5, pc}
 8018968:	4283      	cmp	r3, r0
 801896a:	d3f3      	bcc.n	8018954 <__mcmp+0x18>
 801896c:	e7fa      	b.n	8018964 <__mcmp+0x28>
 801896e:	f04f 32ff 	mov.w	r2, #4294967295
 8018972:	e7f7      	b.n	8018964 <__mcmp+0x28>

08018974 <__mdiff>:
 8018974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018978:	460c      	mov	r4, r1
 801897a:	4606      	mov	r6, r0
 801897c:	4611      	mov	r1, r2
 801897e:	4620      	mov	r0, r4
 8018980:	4690      	mov	r8, r2
 8018982:	f7ff ffdb 	bl	801893c <__mcmp>
 8018986:	1e05      	subs	r5, r0, #0
 8018988:	d110      	bne.n	80189ac <__mdiff+0x38>
 801898a:	4629      	mov	r1, r5
 801898c:	4630      	mov	r0, r6
 801898e:	f7ff fd09 	bl	80183a4 <_Balloc>
 8018992:	b930      	cbnz	r0, 80189a2 <__mdiff+0x2e>
 8018994:	4b3a      	ldr	r3, [pc, #232]	; (8018a80 <__mdiff+0x10c>)
 8018996:	4602      	mov	r2, r0
 8018998:	f240 2132 	movw	r1, #562	; 0x232
 801899c:	4839      	ldr	r0, [pc, #228]	; (8018a84 <__mdiff+0x110>)
 801899e:	f000 fc5d 	bl	801925c <__assert_func>
 80189a2:	2301      	movs	r3, #1
 80189a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80189a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ac:	bfa4      	itt	ge
 80189ae:	4643      	movge	r3, r8
 80189b0:	46a0      	movge	r8, r4
 80189b2:	4630      	mov	r0, r6
 80189b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80189b8:	bfa6      	itte	ge
 80189ba:	461c      	movge	r4, r3
 80189bc:	2500      	movge	r5, #0
 80189be:	2501      	movlt	r5, #1
 80189c0:	f7ff fcf0 	bl	80183a4 <_Balloc>
 80189c4:	b920      	cbnz	r0, 80189d0 <__mdiff+0x5c>
 80189c6:	4b2e      	ldr	r3, [pc, #184]	; (8018a80 <__mdiff+0x10c>)
 80189c8:	4602      	mov	r2, r0
 80189ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80189ce:	e7e5      	b.n	801899c <__mdiff+0x28>
 80189d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80189d4:	6926      	ldr	r6, [r4, #16]
 80189d6:	60c5      	str	r5, [r0, #12]
 80189d8:	f104 0914 	add.w	r9, r4, #20
 80189dc:	f108 0514 	add.w	r5, r8, #20
 80189e0:	f100 0e14 	add.w	lr, r0, #20
 80189e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80189e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80189ec:	f108 0210 	add.w	r2, r8, #16
 80189f0:	46f2      	mov	sl, lr
 80189f2:	2100      	movs	r1, #0
 80189f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80189f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80189fc:	fa1f f883 	uxth.w	r8, r3
 8018a00:	fa11 f18b 	uxtah	r1, r1, fp
 8018a04:	0c1b      	lsrs	r3, r3, #16
 8018a06:	eba1 0808 	sub.w	r8, r1, r8
 8018a0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018a0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018a12:	fa1f f888 	uxth.w	r8, r8
 8018a16:	1419      	asrs	r1, r3, #16
 8018a18:	454e      	cmp	r6, r9
 8018a1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8018a22:	d8e7      	bhi.n	80189f4 <__mdiff+0x80>
 8018a24:	1b33      	subs	r3, r6, r4
 8018a26:	3b15      	subs	r3, #21
 8018a28:	f023 0303 	bic.w	r3, r3, #3
 8018a2c:	3304      	adds	r3, #4
 8018a2e:	3415      	adds	r4, #21
 8018a30:	42a6      	cmp	r6, r4
 8018a32:	bf38      	it	cc
 8018a34:	2304      	movcc	r3, #4
 8018a36:	441d      	add	r5, r3
 8018a38:	4473      	add	r3, lr
 8018a3a:	469e      	mov	lr, r3
 8018a3c:	462e      	mov	r6, r5
 8018a3e:	4566      	cmp	r6, ip
 8018a40:	d30e      	bcc.n	8018a60 <__mdiff+0xec>
 8018a42:	f10c 0203 	add.w	r2, ip, #3
 8018a46:	1b52      	subs	r2, r2, r5
 8018a48:	f022 0203 	bic.w	r2, r2, #3
 8018a4c:	3d03      	subs	r5, #3
 8018a4e:	45ac      	cmp	ip, r5
 8018a50:	bf38      	it	cc
 8018a52:	2200      	movcc	r2, #0
 8018a54:	441a      	add	r2, r3
 8018a56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018a5a:	b17b      	cbz	r3, 8018a7c <__mdiff+0x108>
 8018a5c:	6107      	str	r7, [r0, #16]
 8018a5e:	e7a3      	b.n	80189a8 <__mdiff+0x34>
 8018a60:	f856 8b04 	ldr.w	r8, [r6], #4
 8018a64:	fa11 f288 	uxtah	r2, r1, r8
 8018a68:	1414      	asrs	r4, r2, #16
 8018a6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018a6e:	b292      	uxth	r2, r2
 8018a70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018a74:	f84e 2b04 	str.w	r2, [lr], #4
 8018a78:	1421      	asrs	r1, r4, #16
 8018a7a:	e7e0      	b.n	8018a3e <__mdiff+0xca>
 8018a7c:	3f01      	subs	r7, #1
 8018a7e:	e7ea      	b.n	8018a56 <__mdiff+0xe2>
 8018a80:	0801a5f0 	.word	0x0801a5f0
 8018a84:	0801a67c 	.word	0x0801a67c

08018a88 <__ulp>:
 8018a88:	b082      	sub	sp, #8
 8018a8a:	ed8d 0b00 	vstr	d0, [sp]
 8018a8e:	9b01      	ldr	r3, [sp, #4]
 8018a90:	4912      	ldr	r1, [pc, #72]	; (8018adc <__ulp+0x54>)
 8018a92:	4019      	ands	r1, r3
 8018a94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018a98:	2900      	cmp	r1, #0
 8018a9a:	dd05      	ble.n	8018aa8 <__ulp+0x20>
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	ec43 2b10 	vmov	d0, r2, r3
 8018aa4:	b002      	add	sp, #8
 8018aa6:	4770      	bx	lr
 8018aa8:	4249      	negs	r1, r1
 8018aaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018aae:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018ab2:	f04f 0200 	mov.w	r2, #0
 8018ab6:	f04f 0300 	mov.w	r3, #0
 8018aba:	da04      	bge.n	8018ac6 <__ulp+0x3e>
 8018abc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018ac0:	fa41 f300 	asr.w	r3, r1, r0
 8018ac4:	e7ec      	b.n	8018aa0 <__ulp+0x18>
 8018ac6:	f1a0 0114 	sub.w	r1, r0, #20
 8018aca:	291e      	cmp	r1, #30
 8018acc:	bfda      	itte	le
 8018ace:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018ad2:	fa20 f101 	lsrle.w	r1, r0, r1
 8018ad6:	2101      	movgt	r1, #1
 8018ad8:	460a      	mov	r2, r1
 8018ada:	e7e1      	b.n	8018aa0 <__ulp+0x18>
 8018adc:	7ff00000 	.word	0x7ff00000

08018ae0 <__b2d>:
 8018ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ae2:	6905      	ldr	r5, [r0, #16]
 8018ae4:	f100 0714 	add.w	r7, r0, #20
 8018ae8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018aec:	1f2e      	subs	r6, r5, #4
 8018aee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018af2:	4620      	mov	r0, r4
 8018af4:	f7ff fd48 	bl	8018588 <__hi0bits>
 8018af8:	f1c0 0320 	rsb	r3, r0, #32
 8018afc:	280a      	cmp	r0, #10
 8018afe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018b7c <__b2d+0x9c>
 8018b02:	600b      	str	r3, [r1, #0]
 8018b04:	dc14      	bgt.n	8018b30 <__b2d+0x50>
 8018b06:	f1c0 0e0b 	rsb	lr, r0, #11
 8018b0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018b0e:	42b7      	cmp	r7, r6
 8018b10:	ea41 030c 	orr.w	r3, r1, ip
 8018b14:	bf34      	ite	cc
 8018b16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018b1a:	2100      	movcs	r1, #0
 8018b1c:	3015      	adds	r0, #21
 8018b1e:	fa04 f000 	lsl.w	r0, r4, r0
 8018b22:	fa21 f10e 	lsr.w	r1, r1, lr
 8018b26:	ea40 0201 	orr.w	r2, r0, r1
 8018b2a:	ec43 2b10 	vmov	d0, r2, r3
 8018b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b30:	42b7      	cmp	r7, r6
 8018b32:	bf3a      	itte	cc
 8018b34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018b38:	f1a5 0608 	subcc.w	r6, r5, #8
 8018b3c:	2100      	movcs	r1, #0
 8018b3e:	380b      	subs	r0, #11
 8018b40:	d017      	beq.n	8018b72 <__b2d+0x92>
 8018b42:	f1c0 0c20 	rsb	ip, r0, #32
 8018b46:	fa04 f500 	lsl.w	r5, r4, r0
 8018b4a:	42be      	cmp	r6, r7
 8018b4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018b50:	ea45 0504 	orr.w	r5, r5, r4
 8018b54:	bf8c      	ite	hi
 8018b56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018b5a:	2400      	movls	r4, #0
 8018b5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018b60:	fa01 f000 	lsl.w	r0, r1, r0
 8018b64:	fa24 f40c 	lsr.w	r4, r4, ip
 8018b68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018b6c:	ea40 0204 	orr.w	r2, r0, r4
 8018b70:	e7db      	b.n	8018b2a <__b2d+0x4a>
 8018b72:	ea44 030c 	orr.w	r3, r4, ip
 8018b76:	460a      	mov	r2, r1
 8018b78:	e7d7      	b.n	8018b2a <__b2d+0x4a>
 8018b7a:	bf00      	nop
 8018b7c:	3ff00000 	.word	0x3ff00000

08018b80 <__d2b>:
 8018b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018b84:	4689      	mov	r9, r1
 8018b86:	2101      	movs	r1, #1
 8018b88:	ec57 6b10 	vmov	r6, r7, d0
 8018b8c:	4690      	mov	r8, r2
 8018b8e:	f7ff fc09 	bl	80183a4 <_Balloc>
 8018b92:	4604      	mov	r4, r0
 8018b94:	b930      	cbnz	r0, 8018ba4 <__d2b+0x24>
 8018b96:	4602      	mov	r2, r0
 8018b98:	4b25      	ldr	r3, [pc, #148]	; (8018c30 <__d2b+0xb0>)
 8018b9a:	4826      	ldr	r0, [pc, #152]	; (8018c34 <__d2b+0xb4>)
 8018b9c:	f240 310a 	movw	r1, #778	; 0x30a
 8018ba0:	f000 fb5c 	bl	801925c <__assert_func>
 8018ba4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018bac:	bb35      	cbnz	r5, 8018bfc <__d2b+0x7c>
 8018bae:	2e00      	cmp	r6, #0
 8018bb0:	9301      	str	r3, [sp, #4]
 8018bb2:	d028      	beq.n	8018c06 <__d2b+0x86>
 8018bb4:	4668      	mov	r0, sp
 8018bb6:	9600      	str	r6, [sp, #0]
 8018bb8:	f7ff fd06 	bl	80185c8 <__lo0bits>
 8018bbc:	9900      	ldr	r1, [sp, #0]
 8018bbe:	b300      	cbz	r0, 8018c02 <__d2b+0x82>
 8018bc0:	9a01      	ldr	r2, [sp, #4]
 8018bc2:	f1c0 0320 	rsb	r3, r0, #32
 8018bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8018bca:	430b      	orrs	r3, r1
 8018bcc:	40c2      	lsrs	r2, r0
 8018bce:	6163      	str	r3, [r4, #20]
 8018bd0:	9201      	str	r2, [sp, #4]
 8018bd2:	9b01      	ldr	r3, [sp, #4]
 8018bd4:	61a3      	str	r3, [r4, #24]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	bf14      	ite	ne
 8018bda:	2202      	movne	r2, #2
 8018bdc:	2201      	moveq	r2, #1
 8018bde:	6122      	str	r2, [r4, #16]
 8018be0:	b1d5      	cbz	r5, 8018c18 <__d2b+0x98>
 8018be2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018be6:	4405      	add	r5, r0
 8018be8:	f8c9 5000 	str.w	r5, [r9]
 8018bec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018bf0:	f8c8 0000 	str.w	r0, [r8]
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	b003      	add	sp, #12
 8018bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018c00:	e7d5      	b.n	8018bae <__d2b+0x2e>
 8018c02:	6161      	str	r1, [r4, #20]
 8018c04:	e7e5      	b.n	8018bd2 <__d2b+0x52>
 8018c06:	a801      	add	r0, sp, #4
 8018c08:	f7ff fcde 	bl	80185c8 <__lo0bits>
 8018c0c:	9b01      	ldr	r3, [sp, #4]
 8018c0e:	6163      	str	r3, [r4, #20]
 8018c10:	2201      	movs	r2, #1
 8018c12:	6122      	str	r2, [r4, #16]
 8018c14:	3020      	adds	r0, #32
 8018c16:	e7e3      	b.n	8018be0 <__d2b+0x60>
 8018c18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018c1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018c20:	f8c9 0000 	str.w	r0, [r9]
 8018c24:	6918      	ldr	r0, [r3, #16]
 8018c26:	f7ff fcaf 	bl	8018588 <__hi0bits>
 8018c2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018c2e:	e7df      	b.n	8018bf0 <__d2b+0x70>
 8018c30:	0801a5f0 	.word	0x0801a5f0
 8018c34:	0801a67c 	.word	0x0801a67c

08018c38 <__ratio>:
 8018c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c3c:	4688      	mov	r8, r1
 8018c3e:	4669      	mov	r1, sp
 8018c40:	4681      	mov	r9, r0
 8018c42:	f7ff ff4d 	bl	8018ae0 <__b2d>
 8018c46:	a901      	add	r1, sp, #4
 8018c48:	4640      	mov	r0, r8
 8018c4a:	ec55 4b10 	vmov	r4, r5, d0
 8018c4e:	ee10 aa10 	vmov	sl, s0
 8018c52:	f7ff ff45 	bl	8018ae0 <__b2d>
 8018c56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8018c5e:	1a59      	subs	r1, r3, r1
 8018c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c64:	1ad3      	subs	r3, r2, r3
 8018c66:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8018c6a:	ec57 6b10 	vmov	r6, r7, d0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	bfd6      	itet	le
 8018c72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018c76:	462a      	movgt	r2, r5
 8018c78:	463a      	movle	r2, r7
 8018c7a:	46ab      	mov	fp, r5
 8018c7c:	bfd6      	itet	le
 8018c7e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018c82:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018c86:	ee00 3a90 	vmovle	s1, r3
 8018c8a:	ec4b ab17 	vmov	d7, sl, fp
 8018c8e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018c92:	b003      	add	sp, #12
 8018c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c98 <__copybits>:
 8018c98:	3901      	subs	r1, #1
 8018c9a:	b570      	push	{r4, r5, r6, lr}
 8018c9c:	1149      	asrs	r1, r1, #5
 8018c9e:	6914      	ldr	r4, [r2, #16]
 8018ca0:	3101      	adds	r1, #1
 8018ca2:	f102 0314 	add.w	r3, r2, #20
 8018ca6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018caa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018cae:	1f05      	subs	r5, r0, #4
 8018cb0:	42a3      	cmp	r3, r4
 8018cb2:	d30c      	bcc.n	8018cce <__copybits+0x36>
 8018cb4:	1aa3      	subs	r3, r4, r2
 8018cb6:	3b11      	subs	r3, #17
 8018cb8:	f023 0303 	bic.w	r3, r3, #3
 8018cbc:	3211      	adds	r2, #17
 8018cbe:	42a2      	cmp	r2, r4
 8018cc0:	bf88      	it	hi
 8018cc2:	2300      	movhi	r3, #0
 8018cc4:	4418      	add	r0, r3
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	4288      	cmp	r0, r1
 8018cca:	d305      	bcc.n	8018cd8 <__copybits+0x40>
 8018ccc:	bd70      	pop	{r4, r5, r6, pc}
 8018cce:	f853 6b04 	ldr.w	r6, [r3], #4
 8018cd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8018cd6:	e7eb      	b.n	8018cb0 <__copybits+0x18>
 8018cd8:	f840 3b04 	str.w	r3, [r0], #4
 8018cdc:	e7f4      	b.n	8018cc8 <__copybits+0x30>

08018cde <__any_on>:
 8018cde:	f100 0214 	add.w	r2, r0, #20
 8018ce2:	6900      	ldr	r0, [r0, #16]
 8018ce4:	114b      	asrs	r3, r1, #5
 8018ce6:	4298      	cmp	r0, r3
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	db11      	blt.n	8018d10 <__any_on+0x32>
 8018cec:	dd0a      	ble.n	8018d04 <__any_on+0x26>
 8018cee:	f011 011f 	ands.w	r1, r1, #31
 8018cf2:	d007      	beq.n	8018d04 <__any_on+0x26>
 8018cf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018cf8:	fa24 f001 	lsr.w	r0, r4, r1
 8018cfc:	fa00 f101 	lsl.w	r1, r0, r1
 8018d00:	428c      	cmp	r4, r1
 8018d02:	d10b      	bne.n	8018d1c <__any_on+0x3e>
 8018d04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	d803      	bhi.n	8018d14 <__any_on+0x36>
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	bd10      	pop	{r4, pc}
 8018d10:	4603      	mov	r3, r0
 8018d12:	e7f7      	b.n	8018d04 <__any_on+0x26>
 8018d14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018d18:	2900      	cmp	r1, #0
 8018d1a:	d0f5      	beq.n	8018d08 <__any_on+0x2a>
 8018d1c:	2001      	movs	r0, #1
 8018d1e:	e7f6      	b.n	8018d0e <__any_on+0x30>

08018d20 <_calloc_r>:
 8018d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d22:	fba1 2402 	umull	r2, r4, r1, r2
 8018d26:	b94c      	cbnz	r4, 8018d3c <_calloc_r+0x1c>
 8018d28:	4611      	mov	r1, r2
 8018d2a:	9201      	str	r2, [sp, #4]
 8018d2c:	f000 f87a 	bl	8018e24 <_malloc_r>
 8018d30:	9a01      	ldr	r2, [sp, #4]
 8018d32:	4605      	mov	r5, r0
 8018d34:	b930      	cbnz	r0, 8018d44 <_calloc_r+0x24>
 8018d36:	4628      	mov	r0, r5
 8018d38:	b003      	add	sp, #12
 8018d3a:	bd30      	pop	{r4, r5, pc}
 8018d3c:	220c      	movs	r2, #12
 8018d3e:	6002      	str	r2, [r0, #0]
 8018d40:	2500      	movs	r5, #0
 8018d42:	e7f8      	b.n	8018d36 <_calloc_r+0x16>
 8018d44:	4621      	mov	r1, r4
 8018d46:	f7fc fc5b 	bl	8015600 <memset>
 8018d4a:	e7f4      	b.n	8018d36 <_calloc_r+0x16>

08018d4c <_free_r>:
 8018d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d4e:	2900      	cmp	r1, #0
 8018d50:	d044      	beq.n	8018ddc <_free_r+0x90>
 8018d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d56:	9001      	str	r0, [sp, #4]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8018d5e:	bfb8      	it	lt
 8018d60:	18e4      	addlt	r4, r4, r3
 8018d62:	f000 fc7f 	bl	8019664 <__malloc_lock>
 8018d66:	4a1e      	ldr	r2, [pc, #120]	; (8018de0 <_free_r+0x94>)
 8018d68:	9801      	ldr	r0, [sp, #4]
 8018d6a:	6813      	ldr	r3, [r2, #0]
 8018d6c:	b933      	cbnz	r3, 8018d7c <_free_r+0x30>
 8018d6e:	6063      	str	r3, [r4, #4]
 8018d70:	6014      	str	r4, [r2, #0]
 8018d72:	b003      	add	sp, #12
 8018d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d78:	f000 bc7a 	b.w	8019670 <__malloc_unlock>
 8018d7c:	42a3      	cmp	r3, r4
 8018d7e:	d908      	bls.n	8018d92 <_free_r+0x46>
 8018d80:	6825      	ldr	r5, [r4, #0]
 8018d82:	1961      	adds	r1, r4, r5
 8018d84:	428b      	cmp	r3, r1
 8018d86:	bf01      	itttt	eq
 8018d88:	6819      	ldreq	r1, [r3, #0]
 8018d8a:	685b      	ldreq	r3, [r3, #4]
 8018d8c:	1949      	addeq	r1, r1, r5
 8018d8e:	6021      	streq	r1, [r4, #0]
 8018d90:	e7ed      	b.n	8018d6e <_free_r+0x22>
 8018d92:	461a      	mov	r2, r3
 8018d94:	685b      	ldr	r3, [r3, #4]
 8018d96:	b10b      	cbz	r3, 8018d9c <_free_r+0x50>
 8018d98:	42a3      	cmp	r3, r4
 8018d9a:	d9fa      	bls.n	8018d92 <_free_r+0x46>
 8018d9c:	6811      	ldr	r1, [r2, #0]
 8018d9e:	1855      	adds	r5, r2, r1
 8018da0:	42a5      	cmp	r5, r4
 8018da2:	d10b      	bne.n	8018dbc <_free_r+0x70>
 8018da4:	6824      	ldr	r4, [r4, #0]
 8018da6:	4421      	add	r1, r4
 8018da8:	1854      	adds	r4, r2, r1
 8018daa:	42a3      	cmp	r3, r4
 8018dac:	6011      	str	r1, [r2, #0]
 8018dae:	d1e0      	bne.n	8018d72 <_free_r+0x26>
 8018db0:	681c      	ldr	r4, [r3, #0]
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	6053      	str	r3, [r2, #4]
 8018db6:	4421      	add	r1, r4
 8018db8:	6011      	str	r1, [r2, #0]
 8018dba:	e7da      	b.n	8018d72 <_free_r+0x26>
 8018dbc:	d902      	bls.n	8018dc4 <_free_r+0x78>
 8018dbe:	230c      	movs	r3, #12
 8018dc0:	6003      	str	r3, [r0, #0]
 8018dc2:	e7d6      	b.n	8018d72 <_free_r+0x26>
 8018dc4:	6825      	ldr	r5, [r4, #0]
 8018dc6:	1961      	adds	r1, r4, r5
 8018dc8:	428b      	cmp	r3, r1
 8018dca:	bf04      	itt	eq
 8018dcc:	6819      	ldreq	r1, [r3, #0]
 8018dce:	685b      	ldreq	r3, [r3, #4]
 8018dd0:	6063      	str	r3, [r4, #4]
 8018dd2:	bf04      	itt	eq
 8018dd4:	1949      	addeq	r1, r1, r5
 8018dd6:	6021      	streq	r1, [r4, #0]
 8018dd8:	6054      	str	r4, [r2, #4]
 8018dda:	e7ca      	b.n	8018d72 <_free_r+0x26>
 8018ddc:	b003      	add	sp, #12
 8018dde:	bd30      	pop	{r4, r5, pc}
 8018de0:	240028f4 	.word	0x240028f4

08018de4 <sbrk_aligned>:
 8018de4:	b570      	push	{r4, r5, r6, lr}
 8018de6:	4e0e      	ldr	r6, [pc, #56]	; (8018e20 <sbrk_aligned+0x3c>)
 8018de8:	460c      	mov	r4, r1
 8018dea:	6831      	ldr	r1, [r6, #0]
 8018dec:	4605      	mov	r5, r0
 8018dee:	b911      	cbnz	r1, 8018df6 <sbrk_aligned+0x12>
 8018df0:	f000 fa02 	bl	80191f8 <_sbrk_r>
 8018df4:	6030      	str	r0, [r6, #0]
 8018df6:	4621      	mov	r1, r4
 8018df8:	4628      	mov	r0, r5
 8018dfa:	f000 f9fd 	bl	80191f8 <_sbrk_r>
 8018dfe:	1c43      	adds	r3, r0, #1
 8018e00:	d00a      	beq.n	8018e18 <sbrk_aligned+0x34>
 8018e02:	1cc4      	adds	r4, r0, #3
 8018e04:	f024 0403 	bic.w	r4, r4, #3
 8018e08:	42a0      	cmp	r0, r4
 8018e0a:	d007      	beq.n	8018e1c <sbrk_aligned+0x38>
 8018e0c:	1a21      	subs	r1, r4, r0
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f000 f9f2 	bl	80191f8 <_sbrk_r>
 8018e14:	3001      	adds	r0, #1
 8018e16:	d101      	bne.n	8018e1c <sbrk_aligned+0x38>
 8018e18:	f04f 34ff 	mov.w	r4, #4294967295
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	bd70      	pop	{r4, r5, r6, pc}
 8018e20:	240028f8 	.word	0x240028f8

08018e24 <_malloc_r>:
 8018e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e28:	1ccd      	adds	r5, r1, #3
 8018e2a:	f025 0503 	bic.w	r5, r5, #3
 8018e2e:	3508      	adds	r5, #8
 8018e30:	2d0c      	cmp	r5, #12
 8018e32:	bf38      	it	cc
 8018e34:	250c      	movcc	r5, #12
 8018e36:	2d00      	cmp	r5, #0
 8018e38:	4607      	mov	r7, r0
 8018e3a:	db01      	blt.n	8018e40 <_malloc_r+0x1c>
 8018e3c:	42a9      	cmp	r1, r5
 8018e3e:	d905      	bls.n	8018e4c <_malloc_r+0x28>
 8018e40:	230c      	movs	r3, #12
 8018e42:	603b      	str	r3, [r7, #0]
 8018e44:	2600      	movs	r6, #0
 8018e46:	4630      	mov	r0, r6
 8018e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e4c:	4e2e      	ldr	r6, [pc, #184]	; (8018f08 <_malloc_r+0xe4>)
 8018e4e:	f000 fc09 	bl	8019664 <__malloc_lock>
 8018e52:	6833      	ldr	r3, [r6, #0]
 8018e54:	461c      	mov	r4, r3
 8018e56:	bb34      	cbnz	r4, 8018ea6 <_malloc_r+0x82>
 8018e58:	4629      	mov	r1, r5
 8018e5a:	4638      	mov	r0, r7
 8018e5c:	f7ff ffc2 	bl	8018de4 <sbrk_aligned>
 8018e60:	1c43      	adds	r3, r0, #1
 8018e62:	4604      	mov	r4, r0
 8018e64:	d14d      	bne.n	8018f02 <_malloc_r+0xde>
 8018e66:	6834      	ldr	r4, [r6, #0]
 8018e68:	4626      	mov	r6, r4
 8018e6a:	2e00      	cmp	r6, #0
 8018e6c:	d140      	bne.n	8018ef0 <_malloc_r+0xcc>
 8018e6e:	6823      	ldr	r3, [r4, #0]
 8018e70:	4631      	mov	r1, r6
 8018e72:	4638      	mov	r0, r7
 8018e74:	eb04 0803 	add.w	r8, r4, r3
 8018e78:	f000 f9be 	bl	80191f8 <_sbrk_r>
 8018e7c:	4580      	cmp	r8, r0
 8018e7e:	d13a      	bne.n	8018ef6 <_malloc_r+0xd2>
 8018e80:	6821      	ldr	r1, [r4, #0]
 8018e82:	3503      	adds	r5, #3
 8018e84:	1a6d      	subs	r5, r5, r1
 8018e86:	f025 0503 	bic.w	r5, r5, #3
 8018e8a:	3508      	adds	r5, #8
 8018e8c:	2d0c      	cmp	r5, #12
 8018e8e:	bf38      	it	cc
 8018e90:	250c      	movcc	r5, #12
 8018e92:	4629      	mov	r1, r5
 8018e94:	4638      	mov	r0, r7
 8018e96:	f7ff ffa5 	bl	8018de4 <sbrk_aligned>
 8018e9a:	3001      	adds	r0, #1
 8018e9c:	d02b      	beq.n	8018ef6 <_malloc_r+0xd2>
 8018e9e:	6823      	ldr	r3, [r4, #0]
 8018ea0:	442b      	add	r3, r5
 8018ea2:	6023      	str	r3, [r4, #0]
 8018ea4:	e00e      	b.n	8018ec4 <_malloc_r+0xa0>
 8018ea6:	6822      	ldr	r2, [r4, #0]
 8018ea8:	1b52      	subs	r2, r2, r5
 8018eaa:	d41e      	bmi.n	8018eea <_malloc_r+0xc6>
 8018eac:	2a0b      	cmp	r2, #11
 8018eae:	d916      	bls.n	8018ede <_malloc_r+0xba>
 8018eb0:	1961      	adds	r1, r4, r5
 8018eb2:	42a3      	cmp	r3, r4
 8018eb4:	6025      	str	r5, [r4, #0]
 8018eb6:	bf18      	it	ne
 8018eb8:	6059      	strne	r1, [r3, #4]
 8018eba:	6863      	ldr	r3, [r4, #4]
 8018ebc:	bf08      	it	eq
 8018ebe:	6031      	streq	r1, [r6, #0]
 8018ec0:	5162      	str	r2, [r4, r5]
 8018ec2:	604b      	str	r3, [r1, #4]
 8018ec4:	4638      	mov	r0, r7
 8018ec6:	f104 060b 	add.w	r6, r4, #11
 8018eca:	f000 fbd1 	bl	8019670 <__malloc_unlock>
 8018ece:	f026 0607 	bic.w	r6, r6, #7
 8018ed2:	1d23      	adds	r3, r4, #4
 8018ed4:	1af2      	subs	r2, r6, r3
 8018ed6:	d0b6      	beq.n	8018e46 <_malloc_r+0x22>
 8018ed8:	1b9b      	subs	r3, r3, r6
 8018eda:	50a3      	str	r3, [r4, r2]
 8018edc:	e7b3      	b.n	8018e46 <_malloc_r+0x22>
 8018ede:	6862      	ldr	r2, [r4, #4]
 8018ee0:	42a3      	cmp	r3, r4
 8018ee2:	bf0c      	ite	eq
 8018ee4:	6032      	streq	r2, [r6, #0]
 8018ee6:	605a      	strne	r2, [r3, #4]
 8018ee8:	e7ec      	b.n	8018ec4 <_malloc_r+0xa0>
 8018eea:	4623      	mov	r3, r4
 8018eec:	6864      	ldr	r4, [r4, #4]
 8018eee:	e7b2      	b.n	8018e56 <_malloc_r+0x32>
 8018ef0:	4634      	mov	r4, r6
 8018ef2:	6876      	ldr	r6, [r6, #4]
 8018ef4:	e7b9      	b.n	8018e6a <_malloc_r+0x46>
 8018ef6:	230c      	movs	r3, #12
 8018ef8:	603b      	str	r3, [r7, #0]
 8018efa:	4638      	mov	r0, r7
 8018efc:	f000 fbb8 	bl	8019670 <__malloc_unlock>
 8018f00:	e7a1      	b.n	8018e46 <_malloc_r+0x22>
 8018f02:	6025      	str	r5, [r4, #0]
 8018f04:	e7de      	b.n	8018ec4 <_malloc_r+0xa0>
 8018f06:	bf00      	nop
 8018f08:	240028f4 	.word	0x240028f4

08018f0c <__ssputs_r>:
 8018f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f10:	688e      	ldr	r6, [r1, #8]
 8018f12:	429e      	cmp	r6, r3
 8018f14:	4682      	mov	sl, r0
 8018f16:	460c      	mov	r4, r1
 8018f18:	4690      	mov	r8, r2
 8018f1a:	461f      	mov	r7, r3
 8018f1c:	d838      	bhi.n	8018f90 <__ssputs_r+0x84>
 8018f1e:	898a      	ldrh	r2, [r1, #12]
 8018f20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018f24:	d032      	beq.n	8018f8c <__ssputs_r+0x80>
 8018f26:	6825      	ldr	r5, [r4, #0]
 8018f28:	6909      	ldr	r1, [r1, #16]
 8018f2a:	eba5 0901 	sub.w	r9, r5, r1
 8018f2e:	6965      	ldr	r5, [r4, #20]
 8018f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018f38:	3301      	adds	r3, #1
 8018f3a:	444b      	add	r3, r9
 8018f3c:	106d      	asrs	r5, r5, #1
 8018f3e:	429d      	cmp	r5, r3
 8018f40:	bf38      	it	cc
 8018f42:	461d      	movcc	r5, r3
 8018f44:	0553      	lsls	r3, r2, #21
 8018f46:	d531      	bpl.n	8018fac <__ssputs_r+0xa0>
 8018f48:	4629      	mov	r1, r5
 8018f4a:	f7ff ff6b 	bl	8018e24 <_malloc_r>
 8018f4e:	4606      	mov	r6, r0
 8018f50:	b950      	cbnz	r0, 8018f68 <__ssputs_r+0x5c>
 8018f52:	230c      	movs	r3, #12
 8018f54:	f8ca 3000 	str.w	r3, [sl]
 8018f58:	89a3      	ldrh	r3, [r4, #12]
 8018f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f5e:	81a3      	strh	r3, [r4, #12]
 8018f60:	f04f 30ff 	mov.w	r0, #4294967295
 8018f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f68:	6921      	ldr	r1, [r4, #16]
 8018f6a:	464a      	mov	r2, r9
 8018f6c:	f7fc fb3a 	bl	80155e4 <memcpy>
 8018f70:	89a3      	ldrh	r3, [r4, #12]
 8018f72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f7a:	81a3      	strh	r3, [r4, #12]
 8018f7c:	6126      	str	r6, [r4, #16]
 8018f7e:	6165      	str	r5, [r4, #20]
 8018f80:	444e      	add	r6, r9
 8018f82:	eba5 0509 	sub.w	r5, r5, r9
 8018f86:	6026      	str	r6, [r4, #0]
 8018f88:	60a5      	str	r5, [r4, #8]
 8018f8a:	463e      	mov	r6, r7
 8018f8c:	42be      	cmp	r6, r7
 8018f8e:	d900      	bls.n	8018f92 <__ssputs_r+0x86>
 8018f90:	463e      	mov	r6, r7
 8018f92:	6820      	ldr	r0, [r4, #0]
 8018f94:	4632      	mov	r2, r6
 8018f96:	4641      	mov	r1, r8
 8018f98:	f000 fb4a 	bl	8019630 <memmove>
 8018f9c:	68a3      	ldr	r3, [r4, #8]
 8018f9e:	1b9b      	subs	r3, r3, r6
 8018fa0:	60a3      	str	r3, [r4, #8]
 8018fa2:	6823      	ldr	r3, [r4, #0]
 8018fa4:	4433      	add	r3, r6
 8018fa6:	6023      	str	r3, [r4, #0]
 8018fa8:	2000      	movs	r0, #0
 8018faa:	e7db      	b.n	8018f64 <__ssputs_r+0x58>
 8018fac:	462a      	mov	r2, r5
 8018fae:	f000 fb65 	bl	801967c <_realloc_r>
 8018fb2:	4606      	mov	r6, r0
 8018fb4:	2800      	cmp	r0, #0
 8018fb6:	d1e1      	bne.n	8018f7c <__ssputs_r+0x70>
 8018fb8:	6921      	ldr	r1, [r4, #16]
 8018fba:	4650      	mov	r0, sl
 8018fbc:	f7ff fec6 	bl	8018d4c <_free_r>
 8018fc0:	e7c7      	b.n	8018f52 <__ssputs_r+0x46>
	...

08018fc4 <_svfiprintf_r>:
 8018fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc8:	4698      	mov	r8, r3
 8018fca:	898b      	ldrh	r3, [r1, #12]
 8018fcc:	061b      	lsls	r3, r3, #24
 8018fce:	b09d      	sub	sp, #116	; 0x74
 8018fd0:	4607      	mov	r7, r0
 8018fd2:	460d      	mov	r5, r1
 8018fd4:	4614      	mov	r4, r2
 8018fd6:	d50e      	bpl.n	8018ff6 <_svfiprintf_r+0x32>
 8018fd8:	690b      	ldr	r3, [r1, #16]
 8018fda:	b963      	cbnz	r3, 8018ff6 <_svfiprintf_r+0x32>
 8018fdc:	2140      	movs	r1, #64	; 0x40
 8018fde:	f7ff ff21 	bl	8018e24 <_malloc_r>
 8018fe2:	6028      	str	r0, [r5, #0]
 8018fe4:	6128      	str	r0, [r5, #16]
 8018fe6:	b920      	cbnz	r0, 8018ff2 <_svfiprintf_r+0x2e>
 8018fe8:	230c      	movs	r3, #12
 8018fea:	603b      	str	r3, [r7, #0]
 8018fec:	f04f 30ff 	mov.w	r0, #4294967295
 8018ff0:	e0d1      	b.n	8019196 <_svfiprintf_r+0x1d2>
 8018ff2:	2340      	movs	r3, #64	; 0x40
 8018ff4:	616b      	str	r3, [r5, #20]
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8018ffa:	2320      	movs	r3, #32
 8018ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019000:	f8cd 800c 	str.w	r8, [sp, #12]
 8019004:	2330      	movs	r3, #48	; 0x30
 8019006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80191b0 <_svfiprintf_r+0x1ec>
 801900a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801900e:	f04f 0901 	mov.w	r9, #1
 8019012:	4623      	mov	r3, r4
 8019014:	469a      	mov	sl, r3
 8019016:	f813 2b01 	ldrb.w	r2, [r3], #1
 801901a:	b10a      	cbz	r2, 8019020 <_svfiprintf_r+0x5c>
 801901c:	2a25      	cmp	r2, #37	; 0x25
 801901e:	d1f9      	bne.n	8019014 <_svfiprintf_r+0x50>
 8019020:	ebba 0b04 	subs.w	fp, sl, r4
 8019024:	d00b      	beq.n	801903e <_svfiprintf_r+0x7a>
 8019026:	465b      	mov	r3, fp
 8019028:	4622      	mov	r2, r4
 801902a:	4629      	mov	r1, r5
 801902c:	4638      	mov	r0, r7
 801902e:	f7ff ff6d 	bl	8018f0c <__ssputs_r>
 8019032:	3001      	adds	r0, #1
 8019034:	f000 80aa 	beq.w	801918c <_svfiprintf_r+0x1c8>
 8019038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801903a:	445a      	add	r2, fp
 801903c:	9209      	str	r2, [sp, #36]	; 0x24
 801903e:	f89a 3000 	ldrb.w	r3, [sl]
 8019042:	2b00      	cmp	r3, #0
 8019044:	f000 80a2 	beq.w	801918c <_svfiprintf_r+0x1c8>
 8019048:	2300      	movs	r3, #0
 801904a:	f04f 32ff 	mov.w	r2, #4294967295
 801904e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019052:	f10a 0a01 	add.w	sl, sl, #1
 8019056:	9304      	str	r3, [sp, #16]
 8019058:	9307      	str	r3, [sp, #28]
 801905a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801905e:	931a      	str	r3, [sp, #104]	; 0x68
 8019060:	4654      	mov	r4, sl
 8019062:	2205      	movs	r2, #5
 8019064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019068:	4851      	ldr	r0, [pc, #324]	; (80191b0 <_svfiprintf_r+0x1ec>)
 801906a:	f7e7 f959 	bl	8000320 <memchr>
 801906e:	9a04      	ldr	r2, [sp, #16]
 8019070:	b9d8      	cbnz	r0, 80190aa <_svfiprintf_r+0xe6>
 8019072:	06d0      	lsls	r0, r2, #27
 8019074:	bf44      	itt	mi
 8019076:	2320      	movmi	r3, #32
 8019078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801907c:	0711      	lsls	r1, r2, #28
 801907e:	bf44      	itt	mi
 8019080:	232b      	movmi	r3, #43	; 0x2b
 8019082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019086:	f89a 3000 	ldrb.w	r3, [sl]
 801908a:	2b2a      	cmp	r3, #42	; 0x2a
 801908c:	d015      	beq.n	80190ba <_svfiprintf_r+0xf6>
 801908e:	9a07      	ldr	r2, [sp, #28]
 8019090:	4654      	mov	r4, sl
 8019092:	2000      	movs	r0, #0
 8019094:	f04f 0c0a 	mov.w	ip, #10
 8019098:	4621      	mov	r1, r4
 801909a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801909e:	3b30      	subs	r3, #48	; 0x30
 80190a0:	2b09      	cmp	r3, #9
 80190a2:	d94e      	bls.n	8019142 <_svfiprintf_r+0x17e>
 80190a4:	b1b0      	cbz	r0, 80190d4 <_svfiprintf_r+0x110>
 80190a6:	9207      	str	r2, [sp, #28]
 80190a8:	e014      	b.n	80190d4 <_svfiprintf_r+0x110>
 80190aa:	eba0 0308 	sub.w	r3, r0, r8
 80190ae:	fa09 f303 	lsl.w	r3, r9, r3
 80190b2:	4313      	orrs	r3, r2
 80190b4:	9304      	str	r3, [sp, #16]
 80190b6:	46a2      	mov	sl, r4
 80190b8:	e7d2      	b.n	8019060 <_svfiprintf_r+0x9c>
 80190ba:	9b03      	ldr	r3, [sp, #12]
 80190bc:	1d19      	adds	r1, r3, #4
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	9103      	str	r1, [sp, #12]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	bfbb      	ittet	lt
 80190c6:	425b      	neglt	r3, r3
 80190c8:	f042 0202 	orrlt.w	r2, r2, #2
 80190cc:	9307      	strge	r3, [sp, #28]
 80190ce:	9307      	strlt	r3, [sp, #28]
 80190d0:	bfb8      	it	lt
 80190d2:	9204      	strlt	r2, [sp, #16]
 80190d4:	7823      	ldrb	r3, [r4, #0]
 80190d6:	2b2e      	cmp	r3, #46	; 0x2e
 80190d8:	d10c      	bne.n	80190f4 <_svfiprintf_r+0x130>
 80190da:	7863      	ldrb	r3, [r4, #1]
 80190dc:	2b2a      	cmp	r3, #42	; 0x2a
 80190de:	d135      	bne.n	801914c <_svfiprintf_r+0x188>
 80190e0:	9b03      	ldr	r3, [sp, #12]
 80190e2:	1d1a      	adds	r2, r3, #4
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	9203      	str	r2, [sp, #12]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	bfb8      	it	lt
 80190ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80190f0:	3402      	adds	r4, #2
 80190f2:	9305      	str	r3, [sp, #20]
 80190f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80191c0 <_svfiprintf_r+0x1fc>
 80190f8:	7821      	ldrb	r1, [r4, #0]
 80190fa:	2203      	movs	r2, #3
 80190fc:	4650      	mov	r0, sl
 80190fe:	f7e7 f90f 	bl	8000320 <memchr>
 8019102:	b140      	cbz	r0, 8019116 <_svfiprintf_r+0x152>
 8019104:	2340      	movs	r3, #64	; 0x40
 8019106:	eba0 000a 	sub.w	r0, r0, sl
 801910a:	fa03 f000 	lsl.w	r0, r3, r0
 801910e:	9b04      	ldr	r3, [sp, #16]
 8019110:	4303      	orrs	r3, r0
 8019112:	3401      	adds	r4, #1
 8019114:	9304      	str	r3, [sp, #16]
 8019116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801911a:	4826      	ldr	r0, [pc, #152]	; (80191b4 <_svfiprintf_r+0x1f0>)
 801911c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019120:	2206      	movs	r2, #6
 8019122:	f7e7 f8fd 	bl	8000320 <memchr>
 8019126:	2800      	cmp	r0, #0
 8019128:	d038      	beq.n	801919c <_svfiprintf_r+0x1d8>
 801912a:	4b23      	ldr	r3, [pc, #140]	; (80191b8 <_svfiprintf_r+0x1f4>)
 801912c:	bb1b      	cbnz	r3, 8019176 <_svfiprintf_r+0x1b2>
 801912e:	9b03      	ldr	r3, [sp, #12]
 8019130:	3307      	adds	r3, #7
 8019132:	f023 0307 	bic.w	r3, r3, #7
 8019136:	3308      	adds	r3, #8
 8019138:	9303      	str	r3, [sp, #12]
 801913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801913c:	4433      	add	r3, r6
 801913e:	9309      	str	r3, [sp, #36]	; 0x24
 8019140:	e767      	b.n	8019012 <_svfiprintf_r+0x4e>
 8019142:	fb0c 3202 	mla	r2, ip, r2, r3
 8019146:	460c      	mov	r4, r1
 8019148:	2001      	movs	r0, #1
 801914a:	e7a5      	b.n	8019098 <_svfiprintf_r+0xd4>
 801914c:	2300      	movs	r3, #0
 801914e:	3401      	adds	r4, #1
 8019150:	9305      	str	r3, [sp, #20]
 8019152:	4619      	mov	r1, r3
 8019154:	f04f 0c0a 	mov.w	ip, #10
 8019158:	4620      	mov	r0, r4
 801915a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801915e:	3a30      	subs	r2, #48	; 0x30
 8019160:	2a09      	cmp	r2, #9
 8019162:	d903      	bls.n	801916c <_svfiprintf_r+0x1a8>
 8019164:	2b00      	cmp	r3, #0
 8019166:	d0c5      	beq.n	80190f4 <_svfiprintf_r+0x130>
 8019168:	9105      	str	r1, [sp, #20]
 801916a:	e7c3      	b.n	80190f4 <_svfiprintf_r+0x130>
 801916c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019170:	4604      	mov	r4, r0
 8019172:	2301      	movs	r3, #1
 8019174:	e7f0      	b.n	8019158 <_svfiprintf_r+0x194>
 8019176:	ab03      	add	r3, sp, #12
 8019178:	9300      	str	r3, [sp, #0]
 801917a:	462a      	mov	r2, r5
 801917c:	4b0f      	ldr	r3, [pc, #60]	; (80191bc <_svfiprintf_r+0x1f8>)
 801917e:	a904      	add	r1, sp, #16
 8019180:	4638      	mov	r0, r7
 8019182:	f7fc fad5 	bl	8015730 <_printf_float>
 8019186:	1c42      	adds	r2, r0, #1
 8019188:	4606      	mov	r6, r0
 801918a:	d1d6      	bne.n	801913a <_svfiprintf_r+0x176>
 801918c:	89ab      	ldrh	r3, [r5, #12]
 801918e:	065b      	lsls	r3, r3, #25
 8019190:	f53f af2c 	bmi.w	8018fec <_svfiprintf_r+0x28>
 8019194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019196:	b01d      	add	sp, #116	; 0x74
 8019198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801919c:	ab03      	add	r3, sp, #12
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	462a      	mov	r2, r5
 80191a2:	4b06      	ldr	r3, [pc, #24]	; (80191bc <_svfiprintf_r+0x1f8>)
 80191a4:	a904      	add	r1, sp, #16
 80191a6:	4638      	mov	r0, r7
 80191a8:	f7fc fd4e 	bl	8015c48 <_printf_i>
 80191ac:	e7eb      	b.n	8019186 <_svfiprintf_r+0x1c2>
 80191ae:	bf00      	nop
 80191b0:	0801a7d4 	.word	0x0801a7d4
 80191b4:	0801a7de 	.word	0x0801a7de
 80191b8:	08015731 	.word	0x08015731
 80191bc:	08018f0d 	.word	0x08018f0d
 80191c0:	0801a7da 	.word	0x0801a7da

080191c4 <_read_r>:
 80191c4:	b538      	push	{r3, r4, r5, lr}
 80191c6:	4d07      	ldr	r5, [pc, #28]	; (80191e4 <_read_r+0x20>)
 80191c8:	4604      	mov	r4, r0
 80191ca:	4608      	mov	r0, r1
 80191cc:	4611      	mov	r1, r2
 80191ce:	2200      	movs	r2, #0
 80191d0:	602a      	str	r2, [r5, #0]
 80191d2:	461a      	mov	r2, r3
 80191d4:	f7e9 fd92 	bl	8002cfc <_read>
 80191d8:	1c43      	adds	r3, r0, #1
 80191da:	d102      	bne.n	80191e2 <_read_r+0x1e>
 80191dc:	682b      	ldr	r3, [r5, #0]
 80191de:	b103      	cbz	r3, 80191e2 <_read_r+0x1e>
 80191e0:	6023      	str	r3, [r4, #0]
 80191e2:	bd38      	pop	{r3, r4, r5, pc}
 80191e4:	240028fc 	.word	0x240028fc

080191e8 <nan>:
 80191e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80191f0 <nan+0x8>
 80191ec:	4770      	bx	lr
 80191ee:	bf00      	nop
 80191f0:	00000000 	.word	0x00000000
 80191f4:	7ff80000 	.word	0x7ff80000

080191f8 <_sbrk_r>:
 80191f8:	b538      	push	{r3, r4, r5, lr}
 80191fa:	4d06      	ldr	r5, [pc, #24]	; (8019214 <_sbrk_r+0x1c>)
 80191fc:	2300      	movs	r3, #0
 80191fe:	4604      	mov	r4, r0
 8019200:	4608      	mov	r0, r1
 8019202:	602b      	str	r3, [r5, #0]
 8019204:	f7e9 fde8 	bl	8002dd8 <_sbrk>
 8019208:	1c43      	adds	r3, r0, #1
 801920a:	d102      	bne.n	8019212 <_sbrk_r+0x1a>
 801920c:	682b      	ldr	r3, [r5, #0]
 801920e:	b103      	cbz	r3, 8019212 <_sbrk_r+0x1a>
 8019210:	6023      	str	r3, [r4, #0]
 8019212:	bd38      	pop	{r3, r4, r5, pc}
 8019214:	240028fc 	.word	0x240028fc

08019218 <strncmp>:
 8019218:	b510      	push	{r4, lr}
 801921a:	b17a      	cbz	r2, 801923c <strncmp+0x24>
 801921c:	4603      	mov	r3, r0
 801921e:	3901      	subs	r1, #1
 8019220:	1884      	adds	r4, r0, r2
 8019222:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019226:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801922a:	4290      	cmp	r0, r2
 801922c:	d101      	bne.n	8019232 <strncmp+0x1a>
 801922e:	42a3      	cmp	r3, r4
 8019230:	d101      	bne.n	8019236 <strncmp+0x1e>
 8019232:	1a80      	subs	r0, r0, r2
 8019234:	bd10      	pop	{r4, pc}
 8019236:	2800      	cmp	r0, #0
 8019238:	d1f3      	bne.n	8019222 <strncmp+0xa>
 801923a:	e7fa      	b.n	8019232 <strncmp+0x1a>
 801923c:	4610      	mov	r0, r2
 801923e:	e7f9      	b.n	8019234 <strncmp+0x1c>

08019240 <__ascii_wctomb>:
 8019240:	b149      	cbz	r1, 8019256 <__ascii_wctomb+0x16>
 8019242:	2aff      	cmp	r2, #255	; 0xff
 8019244:	bf85      	ittet	hi
 8019246:	238a      	movhi	r3, #138	; 0x8a
 8019248:	6003      	strhi	r3, [r0, #0]
 801924a:	700a      	strbls	r2, [r1, #0]
 801924c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019250:	bf98      	it	ls
 8019252:	2001      	movls	r0, #1
 8019254:	4770      	bx	lr
 8019256:	4608      	mov	r0, r1
 8019258:	4770      	bx	lr
	...

0801925c <__assert_func>:
 801925c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801925e:	4614      	mov	r4, r2
 8019260:	461a      	mov	r2, r3
 8019262:	4b09      	ldr	r3, [pc, #36]	; (8019288 <__assert_func+0x2c>)
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	4605      	mov	r5, r0
 8019268:	68d8      	ldr	r0, [r3, #12]
 801926a:	b14c      	cbz	r4, 8019280 <__assert_func+0x24>
 801926c:	4b07      	ldr	r3, [pc, #28]	; (801928c <__assert_func+0x30>)
 801926e:	9100      	str	r1, [sp, #0]
 8019270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019274:	4906      	ldr	r1, [pc, #24]	; (8019290 <__assert_func+0x34>)
 8019276:	462b      	mov	r3, r5
 8019278:	f000 f9a6 	bl	80195c8 <fiprintf>
 801927c:	f000 fc46 	bl	8019b0c <abort>
 8019280:	4b04      	ldr	r3, [pc, #16]	; (8019294 <__assert_func+0x38>)
 8019282:	461c      	mov	r4, r3
 8019284:	e7f3      	b.n	801926e <__assert_func+0x12>
 8019286:	bf00      	nop
 8019288:	24000100 	.word	0x24000100
 801928c:	0801a7e5 	.word	0x0801a7e5
 8019290:	0801a7f2 	.word	0x0801a7f2
 8019294:	0801a820 	.word	0x0801a820

08019298 <__sflush_r>:
 8019298:	898a      	ldrh	r2, [r1, #12]
 801929a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801929e:	4605      	mov	r5, r0
 80192a0:	0710      	lsls	r0, r2, #28
 80192a2:	460c      	mov	r4, r1
 80192a4:	d458      	bmi.n	8019358 <__sflush_r+0xc0>
 80192a6:	684b      	ldr	r3, [r1, #4]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	dc05      	bgt.n	80192b8 <__sflush_r+0x20>
 80192ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	dc02      	bgt.n	80192b8 <__sflush_r+0x20>
 80192b2:	2000      	movs	r0, #0
 80192b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80192ba:	2e00      	cmp	r6, #0
 80192bc:	d0f9      	beq.n	80192b2 <__sflush_r+0x1a>
 80192be:	2300      	movs	r3, #0
 80192c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80192c4:	682f      	ldr	r7, [r5, #0]
 80192c6:	602b      	str	r3, [r5, #0]
 80192c8:	d032      	beq.n	8019330 <__sflush_r+0x98>
 80192ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80192cc:	89a3      	ldrh	r3, [r4, #12]
 80192ce:	075a      	lsls	r2, r3, #29
 80192d0:	d505      	bpl.n	80192de <__sflush_r+0x46>
 80192d2:	6863      	ldr	r3, [r4, #4]
 80192d4:	1ac0      	subs	r0, r0, r3
 80192d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80192d8:	b10b      	cbz	r3, 80192de <__sflush_r+0x46>
 80192da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80192dc:	1ac0      	subs	r0, r0, r3
 80192de:	2300      	movs	r3, #0
 80192e0:	4602      	mov	r2, r0
 80192e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80192e4:	6a21      	ldr	r1, [r4, #32]
 80192e6:	4628      	mov	r0, r5
 80192e8:	47b0      	blx	r6
 80192ea:	1c43      	adds	r3, r0, #1
 80192ec:	89a3      	ldrh	r3, [r4, #12]
 80192ee:	d106      	bne.n	80192fe <__sflush_r+0x66>
 80192f0:	6829      	ldr	r1, [r5, #0]
 80192f2:	291d      	cmp	r1, #29
 80192f4:	d82c      	bhi.n	8019350 <__sflush_r+0xb8>
 80192f6:	4a2a      	ldr	r2, [pc, #168]	; (80193a0 <__sflush_r+0x108>)
 80192f8:	40ca      	lsrs	r2, r1
 80192fa:	07d6      	lsls	r6, r2, #31
 80192fc:	d528      	bpl.n	8019350 <__sflush_r+0xb8>
 80192fe:	2200      	movs	r2, #0
 8019300:	6062      	str	r2, [r4, #4]
 8019302:	04d9      	lsls	r1, r3, #19
 8019304:	6922      	ldr	r2, [r4, #16]
 8019306:	6022      	str	r2, [r4, #0]
 8019308:	d504      	bpl.n	8019314 <__sflush_r+0x7c>
 801930a:	1c42      	adds	r2, r0, #1
 801930c:	d101      	bne.n	8019312 <__sflush_r+0x7a>
 801930e:	682b      	ldr	r3, [r5, #0]
 8019310:	b903      	cbnz	r3, 8019314 <__sflush_r+0x7c>
 8019312:	6560      	str	r0, [r4, #84]	; 0x54
 8019314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019316:	602f      	str	r7, [r5, #0]
 8019318:	2900      	cmp	r1, #0
 801931a:	d0ca      	beq.n	80192b2 <__sflush_r+0x1a>
 801931c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019320:	4299      	cmp	r1, r3
 8019322:	d002      	beq.n	801932a <__sflush_r+0x92>
 8019324:	4628      	mov	r0, r5
 8019326:	f7ff fd11 	bl	8018d4c <_free_r>
 801932a:	2000      	movs	r0, #0
 801932c:	6360      	str	r0, [r4, #52]	; 0x34
 801932e:	e7c1      	b.n	80192b4 <__sflush_r+0x1c>
 8019330:	6a21      	ldr	r1, [r4, #32]
 8019332:	2301      	movs	r3, #1
 8019334:	4628      	mov	r0, r5
 8019336:	47b0      	blx	r6
 8019338:	1c41      	adds	r1, r0, #1
 801933a:	d1c7      	bne.n	80192cc <__sflush_r+0x34>
 801933c:	682b      	ldr	r3, [r5, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d0c4      	beq.n	80192cc <__sflush_r+0x34>
 8019342:	2b1d      	cmp	r3, #29
 8019344:	d001      	beq.n	801934a <__sflush_r+0xb2>
 8019346:	2b16      	cmp	r3, #22
 8019348:	d101      	bne.n	801934e <__sflush_r+0xb6>
 801934a:	602f      	str	r7, [r5, #0]
 801934c:	e7b1      	b.n	80192b2 <__sflush_r+0x1a>
 801934e:	89a3      	ldrh	r3, [r4, #12]
 8019350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019354:	81a3      	strh	r3, [r4, #12]
 8019356:	e7ad      	b.n	80192b4 <__sflush_r+0x1c>
 8019358:	690f      	ldr	r7, [r1, #16]
 801935a:	2f00      	cmp	r7, #0
 801935c:	d0a9      	beq.n	80192b2 <__sflush_r+0x1a>
 801935e:	0793      	lsls	r3, r2, #30
 8019360:	680e      	ldr	r6, [r1, #0]
 8019362:	bf08      	it	eq
 8019364:	694b      	ldreq	r3, [r1, #20]
 8019366:	600f      	str	r7, [r1, #0]
 8019368:	bf18      	it	ne
 801936a:	2300      	movne	r3, #0
 801936c:	eba6 0807 	sub.w	r8, r6, r7
 8019370:	608b      	str	r3, [r1, #8]
 8019372:	f1b8 0f00 	cmp.w	r8, #0
 8019376:	dd9c      	ble.n	80192b2 <__sflush_r+0x1a>
 8019378:	6a21      	ldr	r1, [r4, #32]
 801937a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801937c:	4643      	mov	r3, r8
 801937e:	463a      	mov	r2, r7
 8019380:	4628      	mov	r0, r5
 8019382:	47b0      	blx	r6
 8019384:	2800      	cmp	r0, #0
 8019386:	dc06      	bgt.n	8019396 <__sflush_r+0xfe>
 8019388:	89a3      	ldrh	r3, [r4, #12]
 801938a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801938e:	81a3      	strh	r3, [r4, #12]
 8019390:	f04f 30ff 	mov.w	r0, #4294967295
 8019394:	e78e      	b.n	80192b4 <__sflush_r+0x1c>
 8019396:	4407      	add	r7, r0
 8019398:	eba8 0800 	sub.w	r8, r8, r0
 801939c:	e7e9      	b.n	8019372 <__sflush_r+0xda>
 801939e:	bf00      	nop
 80193a0:	20400001 	.word	0x20400001

080193a4 <_fflush_r>:
 80193a4:	b538      	push	{r3, r4, r5, lr}
 80193a6:	690b      	ldr	r3, [r1, #16]
 80193a8:	4605      	mov	r5, r0
 80193aa:	460c      	mov	r4, r1
 80193ac:	b913      	cbnz	r3, 80193b4 <_fflush_r+0x10>
 80193ae:	2500      	movs	r5, #0
 80193b0:	4628      	mov	r0, r5
 80193b2:	bd38      	pop	{r3, r4, r5, pc}
 80193b4:	b118      	cbz	r0, 80193be <_fflush_r+0x1a>
 80193b6:	6983      	ldr	r3, [r0, #24]
 80193b8:	b90b      	cbnz	r3, 80193be <_fflush_r+0x1a>
 80193ba:	f000 f887 	bl	80194cc <__sinit>
 80193be:	4b14      	ldr	r3, [pc, #80]	; (8019410 <_fflush_r+0x6c>)
 80193c0:	429c      	cmp	r4, r3
 80193c2:	d11b      	bne.n	80193fc <_fflush_r+0x58>
 80193c4:	686c      	ldr	r4, [r5, #4]
 80193c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d0ef      	beq.n	80193ae <_fflush_r+0xa>
 80193ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80193d0:	07d0      	lsls	r0, r2, #31
 80193d2:	d404      	bmi.n	80193de <_fflush_r+0x3a>
 80193d4:	0599      	lsls	r1, r3, #22
 80193d6:	d402      	bmi.n	80193de <_fflush_r+0x3a>
 80193d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193da:	f000 f927 	bl	801962c <__retarget_lock_acquire_recursive>
 80193de:	4628      	mov	r0, r5
 80193e0:	4621      	mov	r1, r4
 80193e2:	f7ff ff59 	bl	8019298 <__sflush_r>
 80193e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80193e8:	07da      	lsls	r2, r3, #31
 80193ea:	4605      	mov	r5, r0
 80193ec:	d4e0      	bmi.n	80193b0 <_fflush_r+0xc>
 80193ee:	89a3      	ldrh	r3, [r4, #12]
 80193f0:	059b      	lsls	r3, r3, #22
 80193f2:	d4dd      	bmi.n	80193b0 <_fflush_r+0xc>
 80193f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80193f6:	f000 f91a 	bl	801962e <__retarget_lock_release_recursive>
 80193fa:	e7d9      	b.n	80193b0 <_fflush_r+0xc>
 80193fc:	4b05      	ldr	r3, [pc, #20]	; (8019414 <_fflush_r+0x70>)
 80193fe:	429c      	cmp	r4, r3
 8019400:	d101      	bne.n	8019406 <_fflush_r+0x62>
 8019402:	68ac      	ldr	r4, [r5, #8]
 8019404:	e7df      	b.n	80193c6 <_fflush_r+0x22>
 8019406:	4b04      	ldr	r3, [pc, #16]	; (8019418 <_fflush_r+0x74>)
 8019408:	429c      	cmp	r4, r3
 801940a:	bf08      	it	eq
 801940c:	68ec      	ldreq	r4, [r5, #12]
 801940e:	e7da      	b.n	80193c6 <_fflush_r+0x22>
 8019410:	0801a844 	.word	0x0801a844
 8019414:	0801a864 	.word	0x0801a864
 8019418:	0801a824 	.word	0x0801a824

0801941c <std>:
 801941c:	2300      	movs	r3, #0
 801941e:	b510      	push	{r4, lr}
 8019420:	4604      	mov	r4, r0
 8019422:	e9c0 3300 	strd	r3, r3, [r0]
 8019426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801942a:	6083      	str	r3, [r0, #8]
 801942c:	8181      	strh	r1, [r0, #12]
 801942e:	6643      	str	r3, [r0, #100]	; 0x64
 8019430:	81c2      	strh	r2, [r0, #14]
 8019432:	6183      	str	r3, [r0, #24]
 8019434:	4619      	mov	r1, r3
 8019436:	2208      	movs	r2, #8
 8019438:	305c      	adds	r0, #92	; 0x5c
 801943a:	f7fc f8e1 	bl	8015600 <memset>
 801943e:	4b05      	ldr	r3, [pc, #20]	; (8019454 <std+0x38>)
 8019440:	6263      	str	r3, [r4, #36]	; 0x24
 8019442:	4b05      	ldr	r3, [pc, #20]	; (8019458 <std+0x3c>)
 8019444:	62a3      	str	r3, [r4, #40]	; 0x28
 8019446:	4b05      	ldr	r3, [pc, #20]	; (801945c <std+0x40>)
 8019448:	62e3      	str	r3, [r4, #44]	; 0x2c
 801944a:	4b05      	ldr	r3, [pc, #20]	; (8019460 <std+0x44>)
 801944c:	6224      	str	r4, [r4, #32]
 801944e:	6323      	str	r3, [r4, #48]	; 0x30
 8019450:	bd10      	pop	{r4, pc}
 8019452:	bf00      	nop
 8019454:	080162ed 	.word	0x080162ed
 8019458:	0801630f 	.word	0x0801630f
 801945c:	08016347 	.word	0x08016347
 8019460:	0801636b 	.word	0x0801636b

08019464 <_cleanup_r>:
 8019464:	4901      	ldr	r1, [pc, #4]	; (801946c <_cleanup_r+0x8>)
 8019466:	f000 b8c1 	b.w	80195ec <_fwalk_reent>
 801946a:	bf00      	nop
 801946c:	080193a5 	.word	0x080193a5

08019470 <__sfmoreglue>:
 8019470:	b570      	push	{r4, r5, r6, lr}
 8019472:	2268      	movs	r2, #104	; 0x68
 8019474:	1e4d      	subs	r5, r1, #1
 8019476:	4355      	muls	r5, r2
 8019478:	460e      	mov	r6, r1
 801947a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801947e:	f7ff fcd1 	bl	8018e24 <_malloc_r>
 8019482:	4604      	mov	r4, r0
 8019484:	b140      	cbz	r0, 8019498 <__sfmoreglue+0x28>
 8019486:	2100      	movs	r1, #0
 8019488:	e9c0 1600 	strd	r1, r6, [r0]
 801948c:	300c      	adds	r0, #12
 801948e:	60a0      	str	r0, [r4, #8]
 8019490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019494:	f7fc f8b4 	bl	8015600 <memset>
 8019498:	4620      	mov	r0, r4
 801949a:	bd70      	pop	{r4, r5, r6, pc}

0801949c <__sfp_lock_acquire>:
 801949c:	4801      	ldr	r0, [pc, #4]	; (80194a4 <__sfp_lock_acquire+0x8>)
 801949e:	f000 b8c5 	b.w	801962c <__retarget_lock_acquire_recursive>
 80194a2:	bf00      	nop
 80194a4:	24002901 	.word	0x24002901

080194a8 <__sfp_lock_release>:
 80194a8:	4801      	ldr	r0, [pc, #4]	; (80194b0 <__sfp_lock_release+0x8>)
 80194aa:	f000 b8c0 	b.w	801962e <__retarget_lock_release_recursive>
 80194ae:	bf00      	nop
 80194b0:	24002901 	.word	0x24002901

080194b4 <__sinit_lock_acquire>:
 80194b4:	4801      	ldr	r0, [pc, #4]	; (80194bc <__sinit_lock_acquire+0x8>)
 80194b6:	f000 b8b9 	b.w	801962c <__retarget_lock_acquire_recursive>
 80194ba:	bf00      	nop
 80194bc:	24002902 	.word	0x24002902

080194c0 <__sinit_lock_release>:
 80194c0:	4801      	ldr	r0, [pc, #4]	; (80194c8 <__sinit_lock_release+0x8>)
 80194c2:	f000 b8b4 	b.w	801962e <__retarget_lock_release_recursive>
 80194c6:	bf00      	nop
 80194c8:	24002902 	.word	0x24002902

080194cc <__sinit>:
 80194cc:	b510      	push	{r4, lr}
 80194ce:	4604      	mov	r4, r0
 80194d0:	f7ff fff0 	bl	80194b4 <__sinit_lock_acquire>
 80194d4:	69a3      	ldr	r3, [r4, #24]
 80194d6:	b11b      	cbz	r3, 80194e0 <__sinit+0x14>
 80194d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194dc:	f7ff bff0 	b.w	80194c0 <__sinit_lock_release>
 80194e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80194e4:	6523      	str	r3, [r4, #80]	; 0x50
 80194e6:	4b13      	ldr	r3, [pc, #76]	; (8019534 <__sinit+0x68>)
 80194e8:	4a13      	ldr	r2, [pc, #76]	; (8019538 <__sinit+0x6c>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80194ee:	42a3      	cmp	r3, r4
 80194f0:	bf04      	itt	eq
 80194f2:	2301      	moveq	r3, #1
 80194f4:	61a3      	streq	r3, [r4, #24]
 80194f6:	4620      	mov	r0, r4
 80194f8:	f000 f820 	bl	801953c <__sfp>
 80194fc:	6060      	str	r0, [r4, #4]
 80194fe:	4620      	mov	r0, r4
 8019500:	f000 f81c 	bl	801953c <__sfp>
 8019504:	60a0      	str	r0, [r4, #8]
 8019506:	4620      	mov	r0, r4
 8019508:	f000 f818 	bl	801953c <__sfp>
 801950c:	2200      	movs	r2, #0
 801950e:	60e0      	str	r0, [r4, #12]
 8019510:	2104      	movs	r1, #4
 8019512:	6860      	ldr	r0, [r4, #4]
 8019514:	f7ff ff82 	bl	801941c <std>
 8019518:	68a0      	ldr	r0, [r4, #8]
 801951a:	2201      	movs	r2, #1
 801951c:	2109      	movs	r1, #9
 801951e:	f7ff ff7d 	bl	801941c <std>
 8019522:	68e0      	ldr	r0, [r4, #12]
 8019524:	2202      	movs	r2, #2
 8019526:	2112      	movs	r1, #18
 8019528:	f7ff ff78 	bl	801941c <std>
 801952c:	2301      	movs	r3, #1
 801952e:	61a3      	str	r3, [r4, #24]
 8019530:	e7d2      	b.n	80194d8 <__sinit+0xc>
 8019532:	bf00      	nop
 8019534:	0801a3dc 	.word	0x0801a3dc
 8019538:	08019465 	.word	0x08019465

0801953c <__sfp>:
 801953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801953e:	4607      	mov	r7, r0
 8019540:	f7ff ffac 	bl	801949c <__sfp_lock_acquire>
 8019544:	4b1e      	ldr	r3, [pc, #120]	; (80195c0 <__sfp+0x84>)
 8019546:	681e      	ldr	r6, [r3, #0]
 8019548:	69b3      	ldr	r3, [r6, #24]
 801954a:	b913      	cbnz	r3, 8019552 <__sfp+0x16>
 801954c:	4630      	mov	r0, r6
 801954e:	f7ff ffbd 	bl	80194cc <__sinit>
 8019552:	3648      	adds	r6, #72	; 0x48
 8019554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019558:	3b01      	subs	r3, #1
 801955a:	d503      	bpl.n	8019564 <__sfp+0x28>
 801955c:	6833      	ldr	r3, [r6, #0]
 801955e:	b30b      	cbz	r3, 80195a4 <__sfp+0x68>
 8019560:	6836      	ldr	r6, [r6, #0]
 8019562:	e7f7      	b.n	8019554 <__sfp+0x18>
 8019564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019568:	b9d5      	cbnz	r5, 80195a0 <__sfp+0x64>
 801956a:	4b16      	ldr	r3, [pc, #88]	; (80195c4 <__sfp+0x88>)
 801956c:	60e3      	str	r3, [r4, #12]
 801956e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019572:	6665      	str	r5, [r4, #100]	; 0x64
 8019574:	f000 f859 	bl	801962a <__retarget_lock_init_recursive>
 8019578:	f7ff ff96 	bl	80194a8 <__sfp_lock_release>
 801957c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019584:	6025      	str	r5, [r4, #0]
 8019586:	61a5      	str	r5, [r4, #24]
 8019588:	2208      	movs	r2, #8
 801958a:	4629      	mov	r1, r5
 801958c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019590:	f7fc f836 	bl	8015600 <memset>
 8019594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801959c:	4620      	mov	r0, r4
 801959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195a0:	3468      	adds	r4, #104	; 0x68
 80195a2:	e7d9      	b.n	8019558 <__sfp+0x1c>
 80195a4:	2104      	movs	r1, #4
 80195a6:	4638      	mov	r0, r7
 80195a8:	f7ff ff62 	bl	8019470 <__sfmoreglue>
 80195ac:	4604      	mov	r4, r0
 80195ae:	6030      	str	r0, [r6, #0]
 80195b0:	2800      	cmp	r0, #0
 80195b2:	d1d5      	bne.n	8019560 <__sfp+0x24>
 80195b4:	f7ff ff78 	bl	80194a8 <__sfp_lock_release>
 80195b8:	230c      	movs	r3, #12
 80195ba:	603b      	str	r3, [r7, #0]
 80195bc:	e7ee      	b.n	801959c <__sfp+0x60>
 80195be:	bf00      	nop
 80195c0:	0801a3dc 	.word	0x0801a3dc
 80195c4:	ffff0001 	.word	0xffff0001

080195c8 <fiprintf>:
 80195c8:	b40e      	push	{r1, r2, r3}
 80195ca:	b503      	push	{r0, r1, lr}
 80195cc:	4601      	mov	r1, r0
 80195ce:	ab03      	add	r3, sp, #12
 80195d0:	4805      	ldr	r0, [pc, #20]	; (80195e8 <fiprintf+0x20>)
 80195d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80195d6:	6800      	ldr	r0, [r0, #0]
 80195d8:	9301      	str	r3, [sp, #4]
 80195da:	f000 f8a7 	bl	801972c <_vfiprintf_r>
 80195de:	b002      	add	sp, #8
 80195e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80195e4:	b003      	add	sp, #12
 80195e6:	4770      	bx	lr
 80195e8:	24000100 	.word	0x24000100

080195ec <_fwalk_reent>:
 80195ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195f0:	4606      	mov	r6, r0
 80195f2:	4688      	mov	r8, r1
 80195f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80195f8:	2700      	movs	r7, #0
 80195fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195fe:	f1b9 0901 	subs.w	r9, r9, #1
 8019602:	d505      	bpl.n	8019610 <_fwalk_reent+0x24>
 8019604:	6824      	ldr	r4, [r4, #0]
 8019606:	2c00      	cmp	r4, #0
 8019608:	d1f7      	bne.n	80195fa <_fwalk_reent+0xe>
 801960a:	4638      	mov	r0, r7
 801960c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019610:	89ab      	ldrh	r3, [r5, #12]
 8019612:	2b01      	cmp	r3, #1
 8019614:	d907      	bls.n	8019626 <_fwalk_reent+0x3a>
 8019616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801961a:	3301      	adds	r3, #1
 801961c:	d003      	beq.n	8019626 <_fwalk_reent+0x3a>
 801961e:	4629      	mov	r1, r5
 8019620:	4630      	mov	r0, r6
 8019622:	47c0      	blx	r8
 8019624:	4307      	orrs	r7, r0
 8019626:	3568      	adds	r5, #104	; 0x68
 8019628:	e7e9      	b.n	80195fe <_fwalk_reent+0x12>

0801962a <__retarget_lock_init_recursive>:
 801962a:	4770      	bx	lr

0801962c <__retarget_lock_acquire_recursive>:
 801962c:	4770      	bx	lr

0801962e <__retarget_lock_release_recursive>:
 801962e:	4770      	bx	lr

08019630 <memmove>:
 8019630:	4288      	cmp	r0, r1
 8019632:	b510      	push	{r4, lr}
 8019634:	eb01 0402 	add.w	r4, r1, r2
 8019638:	d902      	bls.n	8019640 <memmove+0x10>
 801963a:	4284      	cmp	r4, r0
 801963c:	4623      	mov	r3, r4
 801963e:	d807      	bhi.n	8019650 <memmove+0x20>
 8019640:	1e43      	subs	r3, r0, #1
 8019642:	42a1      	cmp	r1, r4
 8019644:	d008      	beq.n	8019658 <memmove+0x28>
 8019646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801964a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801964e:	e7f8      	b.n	8019642 <memmove+0x12>
 8019650:	4402      	add	r2, r0
 8019652:	4601      	mov	r1, r0
 8019654:	428a      	cmp	r2, r1
 8019656:	d100      	bne.n	801965a <memmove+0x2a>
 8019658:	bd10      	pop	{r4, pc}
 801965a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801965e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019662:	e7f7      	b.n	8019654 <memmove+0x24>

08019664 <__malloc_lock>:
 8019664:	4801      	ldr	r0, [pc, #4]	; (801966c <__malloc_lock+0x8>)
 8019666:	f7ff bfe1 	b.w	801962c <__retarget_lock_acquire_recursive>
 801966a:	bf00      	nop
 801966c:	24002900 	.word	0x24002900

08019670 <__malloc_unlock>:
 8019670:	4801      	ldr	r0, [pc, #4]	; (8019678 <__malloc_unlock+0x8>)
 8019672:	f7ff bfdc 	b.w	801962e <__retarget_lock_release_recursive>
 8019676:	bf00      	nop
 8019678:	24002900 	.word	0x24002900

0801967c <_realloc_r>:
 801967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019680:	4680      	mov	r8, r0
 8019682:	4614      	mov	r4, r2
 8019684:	460e      	mov	r6, r1
 8019686:	b921      	cbnz	r1, 8019692 <_realloc_r+0x16>
 8019688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801968c:	4611      	mov	r1, r2
 801968e:	f7ff bbc9 	b.w	8018e24 <_malloc_r>
 8019692:	b92a      	cbnz	r2, 80196a0 <_realloc_r+0x24>
 8019694:	f7ff fb5a 	bl	8018d4c <_free_r>
 8019698:	4625      	mov	r5, r4
 801969a:	4628      	mov	r0, r5
 801969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196a0:	f000 faa0 	bl	8019be4 <_malloc_usable_size_r>
 80196a4:	4284      	cmp	r4, r0
 80196a6:	4607      	mov	r7, r0
 80196a8:	d802      	bhi.n	80196b0 <_realloc_r+0x34>
 80196aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80196ae:	d812      	bhi.n	80196d6 <_realloc_r+0x5a>
 80196b0:	4621      	mov	r1, r4
 80196b2:	4640      	mov	r0, r8
 80196b4:	f7ff fbb6 	bl	8018e24 <_malloc_r>
 80196b8:	4605      	mov	r5, r0
 80196ba:	2800      	cmp	r0, #0
 80196bc:	d0ed      	beq.n	801969a <_realloc_r+0x1e>
 80196be:	42bc      	cmp	r4, r7
 80196c0:	4622      	mov	r2, r4
 80196c2:	4631      	mov	r1, r6
 80196c4:	bf28      	it	cs
 80196c6:	463a      	movcs	r2, r7
 80196c8:	f7fb ff8c 	bl	80155e4 <memcpy>
 80196cc:	4631      	mov	r1, r6
 80196ce:	4640      	mov	r0, r8
 80196d0:	f7ff fb3c 	bl	8018d4c <_free_r>
 80196d4:	e7e1      	b.n	801969a <_realloc_r+0x1e>
 80196d6:	4635      	mov	r5, r6
 80196d8:	e7df      	b.n	801969a <_realloc_r+0x1e>

080196da <__sfputc_r>:
 80196da:	6893      	ldr	r3, [r2, #8]
 80196dc:	3b01      	subs	r3, #1
 80196de:	2b00      	cmp	r3, #0
 80196e0:	b410      	push	{r4}
 80196e2:	6093      	str	r3, [r2, #8]
 80196e4:	da08      	bge.n	80196f8 <__sfputc_r+0x1e>
 80196e6:	6994      	ldr	r4, [r2, #24]
 80196e8:	42a3      	cmp	r3, r4
 80196ea:	db01      	blt.n	80196f0 <__sfputc_r+0x16>
 80196ec:	290a      	cmp	r1, #10
 80196ee:	d103      	bne.n	80196f8 <__sfputc_r+0x1e>
 80196f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196f4:	f000 b94a 	b.w	801998c <__swbuf_r>
 80196f8:	6813      	ldr	r3, [r2, #0]
 80196fa:	1c58      	adds	r0, r3, #1
 80196fc:	6010      	str	r0, [r2, #0]
 80196fe:	7019      	strb	r1, [r3, #0]
 8019700:	4608      	mov	r0, r1
 8019702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019706:	4770      	bx	lr

08019708 <__sfputs_r>:
 8019708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801970a:	4606      	mov	r6, r0
 801970c:	460f      	mov	r7, r1
 801970e:	4614      	mov	r4, r2
 8019710:	18d5      	adds	r5, r2, r3
 8019712:	42ac      	cmp	r4, r5
 8019714:	d101      	bne.n	801971a <__sfputs_r+0x12>
 8019716:	2000      	movs	r0, #0
 8019718:	e007      	b.n	801972a <__sfputs_r+0x22>
 801971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801971e:	463a      	mov	r2, r7
 8019720:	4630      	mov	r0, r6
 8019722:	f7ff ffda 	bl	80196da <__sfputc_r>
 8019726:	1c43      	adds	r3, r0, #1
 8019728:	d1f3      	bne.n	8019712 <__sfputs_r+0xa>
 801972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801972c <_vfiprintf_r>:
 801972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019730:	460d      	mov	r5, r1
 8019732:	b09d      	sub	sp, #116	; 0x74
 8019734:	4614      	mov	r4, r2
 8019736:	4698      	mov	r8, r3
 8019738:	4606      	mov	r6, r0
 801973a:	b118      	cbz	r0, 8019744 <_vfiprintf_r+0x18>
 801973c:	6983      	ldr	r3, [r0, #24]
 801973e:	b90b      	cbnz	r3, 8019744 <_vfiprintf_r+0x18>
 8019740:	f7ff fec4 	bl	80194cc <__sinit>
 8019744:	4b89      	ldr	r3, [pc, #548]	; (801996c <_vfiprintf_r+0x240>)
 8019746:	429d      	cmp	r5, r3
 8019748:	d11b      	bne.n	8019782 <_vfiprintf_r+0x56>
 801974a:	6875      	ldr	r5, [r6, #4]
 801974c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801974e:	07d9      	lsls	r1, r3, #31
 8019750:	d405      	bmi.n	801975e <_vfiprintf_r+0x32>
 8019752:	89ab      	ldrh	r3, [r5, #12]
 8019754:	059a      	lsls	r2, r3, #22
 8019756:	d402      	bmi.n	801975e <_vfiprintf_r+0x32>
 8019758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801975a:	f7ff ff67 	bl	801962c <__retarget_lock_acquire_recursive>
 801975e:	89ab      	ldrh	r3, [r5, #12]
 8019760:	071b      	lsls	r3, r3, #28
 8019762:	d501      	bpl.n	8019768 <_vfiprintf_r+0x3c>
 8019764:	692b      	ldr	r3, [r5, #16]
 8019766:	b9eb      	cbnz	r3, 80197a4 <_vfiprintf_r+0x78>
 8019768:	4629      	mov	r1, r5
 801976a:	4630      	mov	r0, r6
 801976c:	f000 f960 	bl	8019a30 <__swsetup_r>
 8019770:	b1c0      	cbz	r0, 80197a4 <_vfiprintf_r+0x78>
 8019772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019774:	07dc      	lsls	r4, r3, #31
 8019776:	d50e      	bpl.n	8019796 <_vfiprintf_r+0x6a>
 8019778:	f04f 30ff 	mov.w	r0, #4294967295
 801977c:	b01d      	add	sp, #116	; 0x74
 801977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019782:	4b7b      	ldr	r3, [pc, #492]	; (8019970 <_vfiprintf_r+0x244>)
 8019784:	429d      	cmp	r5, r3
 8019786:	d101      	bne.n	801978c <_vfiprintf_r+0x60>
 8019788:	68b5      	ldr	r5, [r6, #8]
 801978a:	e7df      	b.n	801974c <_vfiprintf_r+0x20>
 801978c:	4b79      	ldr	r3, [pc, #484]	; (8019974 <_vfiprintf_r+0x248>)
 801978e:	429d      	cmp	r5, r3
 8019790:	bf08      	it	eq
 8019792:	68f5      	ldreq	r5, [r6, #12]
 8019794:	e7da      	b.n	801974c <_vfiprintf_r+0x20>
 8019796:	89ab      	ldrh	r3, [r5, #12]
 8019798:	0598      	lsls	r0, r3, #22
 801979a:	d4ed      	bmi.n	8019778 <_vfiprintf_r+0x4c>
 801979c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801979e:	f7ff ff46 	bl	801962e <__retarget_lock_release_recursive>
 80197a2:	e7e9      	b.n	8019778 <_vfiprintf_r+0x4c>
 80197a4:	2300      	movs	r3, #0
 80197a6:	9309      	str	r3, [sp, #36]	; 0x24
 80197a8:	2320      	movs	r3, #32
 80197aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80197b2:	2330      	movs	r3, #48	; 0x30
 80197b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019978 <_vfiprintf_r+0x24c>
 80197b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197bc:	f04f 0901 	mov.w	r9, #1
 80197c0:	4623      	mov	r3, r4
 80197c2:	469a      	mov	sl, r3
 80197c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80197c8:	b10a      	cbz	r2, 80197ce <_vfiprintf_r+0xa2>
 80197ca:	2a25      	cmp	r2, #37	; 0x25
 80197cc:	d1f9      	bne.n	80197c2 <_vfiprintf_r+0x96>
 80197ce:	ebba 0b04 	subs.w	fp, sl, r4
 80197d2:	d00b      	beq.n	80197ec <_vfiprintf_r+0xc0>
 80197d4:	465b      	mov	r3, fp
 80197d6:	4622      	mov	r2, r4
 80197d8:	4629      	mov	r1, r5
 80197da:	4630      	mov	r0, r6
 80197dc:	f7ff ff94 	bl	8019708 <__sfputs_r>
 80197e0:	3001      	adds	r0, #1
 80197e2:	f000 80aa 	beq.w	801993a <_vfiprintf_r+0x20e>
 80197e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197e8:	445a      	add	r2, fp
 80197ea:	9209      	str	r2, [sp, #36]	; 0x24
 80197ec:	f89a 3000 	ldrb.w	r3, [sl]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f000 80a2 	beq.w	801993a <_vfiprintf_r+0x20e>
 80197f6:	2300      	movs	r3, #0
 80197f8:	f04f 32ff 	mov.w	r2, #4294967295
 80197fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019800:	f10a 0a01 	add.w	sl, sl, #1
 8019804:	9304      	str	r3, [sp, #16]
 8019806:	9307      	str	r3, [sp, #28]
 8019808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801980c:	931a      	str	r3, [sp, #104]	; 0x68
 801980e:	4654      	mov	r4, sl
 8019810:	2205      	movs	r2, #5
 8019812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019816:	4858      	ldr	r0, [pc, #352]	; (8019978 <_vfiprintf_r+0x24c>)
 8019818:	f7e6 fd82 	bl	8000320 <memchr>
 801981c:	9a04      	ldr	r2, [sp, #16]
 801981e:	b9d8      	cbnz	r0, 8019858 <_vfiprintf_r+0x12c>
 8019820:	06d1      	lsls	r1, r2, #27
 8019822:	bf44      	itt	mi
 8019824:	2320      	movmi	r3, #32
 8019826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801982a:	0713      	lsls	r3, r2, #28
 801982c:	bf44      	itt	mi
 801982e:	232b      	movmi	r3, #43	; 0x2b
 8019830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019834:	f89a 3000 	ldrb.w	r3, [sl]
 8019838:	2b2a      	cmp	r3, #42	; 0x2a
 801983a:	d015      	beq.n	8019868 <_vfiprintf_r+0x13c>
 801983c:	9a07      	ldr	r2, [sp, #28]
 801983e:	4654      	mov	r4, sl
 8019840:	2000      	movs	r0, #0
 8019842:	f04f 0c0a 	mov.w	ip, #10
 8019846:	4621      	mov	r1, r4
 8019848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801984c:	3b30      	subs	r3, #48	; 0x30
 801984e:	2b09      	cmp	r3, #9
 8019850:	d94e      	bls.n	80198f0 <_vfiprintf_r+0x1c4>
 8019852:	b1b0      	cbz	r0, 8019882 <_vfiprintf_r+0x156>
 8019854:	9207      	str	r2, [sp, #28]
 8019856:	e014      	b.n	8019882 <_vfiprintf_r+0x156>
 8019858:	eba0 0308 	sub.w	r3, r0, r8
 801985c:	fa09 f303 	lsl.w	r3, r9, r3
 8019860:	4313      	orrs	r3, r2
 8019862:	9304      	str	r3, [sp, #16]
 8019864:	46a2      	mov	sl, r4
 8019866:	e7d2      	b.n	801980e <_vfiprintf_r+0xe2>
 8019868:	9b03      	ldr	r3, [sp, #12]
 801986a:	1d19      	adds	r1, r3, #4
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	9103      	str	r1, [sp, #12]
 8019870:	2b00      	cmp	r3, #0
 8019872:	bfbb      	ittet	lt
 8019874:	425b      	neglt	r3, r3
 8019876:	f042 0202 	orrlt.w	r2, r2, #2
 801987a:	9307      	strge	r3, [sp, #28]
 801987c:	9307      	strlt	r3, [sp, #28]
 801987e:	bfb8      	it	lt
 8019880:	9204      	strlt	r2, [sp, #16]
 8019882:	7823      	ldrb	r3, [r4, #0]
 8019884:	2b2e      	cmp	r3, #46	; 0x2e
 8019886:	d10c      	bne.n	80198a2 <_vfiprintf_r+0x176>
 8019888:	7863      	ldrb	r3, [r4, #1]
 801988a:	2b2a      	cmp	r3, #42	; 0x2a
 801988c:	d135      	bne.n	80198fa <_vfiprintf_r+0x1ce>
 801988e:	9b03      	ldr	r3, [sp, #12]
 8019890:	1d1a      	adds	r2, r3, #4
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	9203      	str	r2, [sp, #12]
 8019896:	2b00      	cmp	r3, #0
 8019898:	bfb8      	it	lt
 801989a:	f04f 33ff 	movlt.w	r3, #4294967295
 801989e:	3402      	adds	r4, #2
 80198a0:	9305      	str	r3, [sp, #20]
 80198a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019988 <_vfiprintf_r+0x25c>
 80198a6:	7821      	ldrb	r1, [r4, #0]
 80198a8:	2203      	movs	r2, #3
 80198aa:	4650      	mov	r0, sl
 80198ac:	f7e6 fd38 	bl	8000320 <memchr>
 80198b0:	b140      	cbz	r0, 80198c4 <_vfiprintf_r+0x198>
 80198b2:	2340      	movs	r3, #64	; 0x40
 80198b4:	eba0 000a 	sub.w	r0, r0, sl
 80198b8:	fa03 f000 	lsl.w	r0, r3, r0
 80198bc:	9b04      	ldr	r3, [sp, #16]
 80198be:	4303      	orrs	r3, r0
 80198c0:	3401      	adds	r4, #1
 80198c2:	9304      	str	r3, [sp, #16]
 80198c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198c8:	482c      	ldr	r0, [pc, #176]	; (801997c <_vfiprintf_r+0x250>)
 80198ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80198ce:	2206      	movs	r2, #6
 80198d0:	f7e6 fd26 	bl	8000320 <memchr>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d03f      	beq.n	8019958 <_vfiprintf_r+0x22c>
 80198d8:	4b29      	ldr	r3, [pc, #164]	; (8019980 <_vfiprintf_r+0x254>)
 80198da:	bb1b      	cbnz	r3, 8019924 <_vfiprintf_r+0x1f8>
 80198dc:	9b03      	ldr	r3, [sp, #12]
 80198de:	3307      	adds	r3, #7
 80198e0:	f023 0307 	bic.w	r3, r3, #7
 80198e4:	3308      	adds	r3, #8
 80198e6:	9303      	str	r3, [sp, #12]
 80198e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ea:	443b      	add	r3, r7
 80198ec:	9309      	str	r3, [sp, #36]	; 0x24
 80198ee:	e767      	b.n	80197c0 <_vfiprintf_r+0x94>
 80198f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80198f4:	460c      	mov	r4, r1
 80198f6:	2001      	movs	r0, #1
 80198f8:	e7a5      	b.n	8019846 <_vfiprintf_r+0x11a>
 80198fa:	2300      	movs	r3, #0
 80198fc:	3401      	adds	r4, #1
 80198fe:	9305      	str	r3, [sp, #20]
 8019900:	4619      	mov	r1, r3
 8019902:	f04f 0c0a 	mov.w	ip, #10
 8019906:	4620      	mov	r0, r4
 8019908:	f810 2b01 	ldrb.w	r2, [r0], #1
 801990c:	3a30      	subs	r2, #48	; 0x30
 801990e:	2a09      	cmp	r2, #9
 8019910:	d903      	bls.n	801991a <_vfiprintf_r+0x1ee>
 8019912:	2b00      	cmp	r3, #0
 8019914:	d0c5      	beq.n	80198a2 <_vfiprintf_r+0x176>
 8019916:	9105      	str	r1, [sp, #20]
 8019918:	e7c3      	b.n	80198a2 <_vfiprintf_r+0x176>
 801991a:	fb0c 2101 	mla	r1, ip, r1, r2
 801991e:	4604      	mov	r4, r0
 8019920:	2301      	movs	r3, #1
 8019922:	e7f0      	b.n	8019906 <_vfiprintf_r+0x1da>
 8019924:	ab03      	add	r3, sp, #12
 8019926:	9300      	str	r3, [sp, #0]
 8019928:	462a      	mov	r2, r5
 801992a:	4b16      	ldr	r3, [pc, #88]	; (8019984 <_vfiprintf_r+0x258>)
 801992c:	a904      	add	r1, sp, #16
 801992e:	4630      	mov	r0, r6
 8019930:	f7fb fefe 	bl	8015730 <_printf_float>
 8019934:	4607      	mov	r7, r0
 8019936:	1c78      	adds	r0, r7, #1
 8019938:	d1d6      	bne.n	80198e8 <_vfiprintf_r+0x1bc>
 801993a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801993c:	07d9      	lsls	r1, r3, #31
 801993e:	d405      	bmi.n	801994c <_vfiprintf_r+0x220>
 8019940:	89ab      	ldrh	r3, [r5, #12]
 8019942:	059a      	lsls	r2, r3, #22
 8019944:	d402      	bmi.n	801994c <_vfiprintf_r+0x220>
 8019946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019948:	f7ff fe71 	bl	801962e <__retarget_lock_release_recursive>
 801994c:	89ab      	ldrh	r3, [r5, #12]
 801994e:	065b      	lsls	r3, r3, #25
 8019950:	f53f af12 	bmi.w	8019778 <_vfiprintf_r+0x4c>
 8019954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019956:	e711      	b.n	801977c <_vfiprintf_r+0x50>
 8019958:	ab03      	add	r3, sp, #12
 801995a:	9300      	str	r3, [sp, #0]
 801995c:	462a      	mov	r2, r5
 801995e:	4b09      	ldr	r3, [pc, #36]	; (8019984 <_vfiprintf_r+0x258>)
 8019960:	a904      	add	r1, sp, #16
 8019962:	4630      	mov	r0, r6
 8019964:	f7fc f970 	bl	8015c48 <_printf_i>
 8019968:	e7e4      	b.n	8019934 <_vfiprintf_r+0x208>
 801996a:	bf00      	nop
 801996c:	0801a844 	.word	0x0801a844
 8019970:	0801a864 	.word	0x0801a864
 8019974:	0801a824 	.word	0x0801a824
 8019978:	0801a7d4 	.word	0x0801a7d4
 801997c:	0801a7de 	.word	0x0801a7de
 8019980:	08015731 	.word	0x08015731
 8019984:	08019709 	.word	0x08019709
 8019988:	0801a7da 	.word	0x0801a7da

0801998c <__swbuf_r>:
 801998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801998e:	460e      	mov	r6, r1
 8019990:	4614      	mov	r4, r2
 8019992:	4605      	mov	r5, r0
 8019994:	b118      	cbz	r0, 801999e <__swbuf_r+0x12>
 8019996:	6983      	ldr	r3, [r0, #24]
 8019998:	b90b      	cbnz	r3, 801999e <__swbuf_r+0x12>
 801999a:	f7ff fd97 	bl	80194cc <__sinit>
 801999e:	4b21      	ldr	r3, [pc, #132]	; (8019a24 <__swbuf_r+0x98>)
 80199a0:	429c      	cmp	r4, r3
 80199a2:	d12b      	bne.n	80199fc <__swbuf_r+0x70>
 80199a4:	686c      	ldr	r4, [r5, #4]
 80199a6:	69a3      	ldr	r3, [r4, #24]
 80199a8:	60a3      	str	r3, [r4, #8]
 80199aa:	89a3      	ldrh	r3, [r4, #12]
 80199ac:	071a      	lsls	r2, r3, #28
 80199ae:	d52f      	bpl.n	8019a10 <__swbuf_r+0x84>
 80199b0:	6923      	ldr	r3, [r4, #16]
 80199b2:	b36b      	cbz	r3, 8019a10 <__swbuf_r+0x84>
 80199b4:	6923      	ldr	r3, [r4, #16]
 80199b6:	6820      	ldr	r0, [r4, #0]
 80199b8:	1ac0      	subs	r0, r0, r3
 80199ba:	6963      	ldr	r3, [r4, #20]
 80199bc:	b2f6      	uxtb	r6, r6
 80199be:	4283      	cmp	r3, r0
 80199c0:	4637      	mov	r7, r6
 80199c2:	dc04      	bgt.n	80199ce <__swbuf_r+0x42>
 80199c4:	4621      	mov	r1, r4
 80199c6:	4628      	mov	r0, r5
 80199c8:	f7ff fcec 	bl	80193a4 <_fflush_r>
 80199cc:	bb30      	cbnz	r0, 8019a1c <__swbuf_r+0x90>
 80199ce:	68a3      	ldr	r3, [r4, #8]
 80199d0:	3b01      	subs	r3, #1
 80199d2:	60a3      	str	r3, [r4, #8]
 80199d4:	6823      	ldr	r3, [r4, #0]
 80199d6:	1c5a      	adds	r2, r3, #1
 80199d8:	6022      	str	r2, [r4, #0]
 80199da:	701e      	strb	r6, [r3, #0]
 80199dc:	6963      	ldr	r3, [r4, #20]
 80199de:	3001      	adds	r0, #1
 80199e0:	4283      	cmp	r3, r0
 80199e2:	d004      	beq.n	80199ee <__swbuf_r+0x62>
 80199e4:	89a3      	ldrh	r3, [r4, #12]
 80199e6:	07db      	lsls	r3, r3, #31
 80199e8:	d506      	bpl.n	80199f8 <__swbuf_r+0x6c>
 80199ea:	2e0a      	cmp	r6, #10
 80199ec:	d104      	bne.n	80199f8 <__swbuf_r+0x6c>
 80199ee:	4621      	mov	r1, r4
 80199f0:	4628      	mov	r0, r5
 80199f2:	f7ff fcd7 	bl	80193a4 <_fflush_r>
 80199f6:	b988      	cbnz	r0, 8019a1c <__swbuf_r+0x90>
 80199f8:	4638      	mov	r0, r7
 80199fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199fc:	4b0a      	ldr	r3, [pc, #40]	; (8019a28 <__swbuf_r+0x9c>)
 80199fe:	429c      	cmp	r4, r3
 8019a00:	d101      	bne.n	8019a06 <__swbuf_r+0x7a>
 8019a02:	68ac      	ldr	r4, [r5, #8]
 8019a04:	e7cf      	b.n	80199a6 <__swbuf_r+0x1a>
 8019a06:	4b09      	ldr	r3, [pc, #36]	; (8019a2c <__swbuf_r+0xa0>)
 8019a08:	429c      	cmp	r4, r3
 8019a0a:	bf08      	it	eq
 8019a0c:	68ec      	ldreq	r4, [r5, #12]
 8019a0e:	e7ca      	b.n	80199a6 <__swbuf_r+0x1a>
 8019a10:	4621      	mov	r1, r4
 8019a12:	4628      	mov	r0, r5
 8019a14:	f000 f80c 	bl	8019a30 <__swsetup_r>
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	d0cb      	beq.n	80199b4 <__swbuf_r+0x28>
 8019a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8019a20:	e7ea      	b.n	80199f8 <__swbuf_r+0x6c>
 8019a22:	bf00      	nop
 8019a24:	0801a844 	.word	0x0801a844
 8019a28:	0801a864 	.word	0x0801a864
 8019a2c:	0801a824 	.word	0x0801a824

08019a30 <__swsetup_r>:
 8019a30:	4b32      	ldr	r3, [pc, #200]	; (8019afc <__swsetup_r+0xcc>)
 8019a32:	b570      	push	{r4, r5, r6, lr}
 8019a34:	681d      	ldr	r5, [r3, #0]
 8019a36:	4606      	mov	r6, r0
 8019a38:	460c      	mov	r4, r1
 8019a3a:	b125      	cbz	r5, 8019a46 <__swsetup_r+0x16>
 8019a3c:	69ab      	ldr	r3, [r5, #24]
 8019a3e:	b913      	cbnz	r3, 8019a46 <__swsetup_r+0x16>
 8019a40:	4628      	mov	r0, r5
 8019a42:	f7ff fd43 	bl	80194cc <__sinit>
 8019a46:	4b2e      	ldr	r3, [pc, #184]	; (8019b00 <__swsetup_r+0xd0>)
 8019a48:	429c      	cmp	r4, r3
 8019a4a:	d10f      	bne.n	8019a6c <__swsetup_r+0x3c>
 8019a4c:	686c      	ldr	r4, [r5, #4]
 8019a4e:	89a3      	ldrh	r3, [r4, #12]
 8019a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a54:	0719      	lsls	r1, r3, #28
 8019a56:	d42c      	bmi.n	8019ab2 <__swsetup_r+0x82>
 8019a58:	06dd      	lsls	r5, r3, #27
 8019a5a:	d411      	bmi.n	8019a80 <__swsetup_r+0x50>
 8019a5c:	2309      	movs	r3, #9
 8019a5e:	6033      	str	r3, [r6, #0]
 8019a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a64:	81a3      	strh	r3, [r4, #12]
 8019a66:	f04f 30ff 	mov.w	r0, #4294967295
 8019a6a:	e03e      	b.n	8019aea <__swsetup_r+0xba>
 8019a6c:	4b25      	ldr	r3, [pc, #148]	; (8019b04 <__swsetup_r+0xd4>)
 8019a6e:	429c      	cmp	r4, r3
 8019a70:	d101      	bne.n	8019a76 <__swsetup_r+0x46>
 8019a72:	68ac      	ldr	r4, [r5, #8]
 8019a74:	e7eb      	b.n	8019a4e <__swsetup_r+0x1e>
 8019a76:	4b24      	ldr	r3, [pc, #144]	; (8019b08 <__swsetup_r+0xd8>)
 8019a78:	429c      	cmp	r4, r3
 8019a7a:	bf08      	it	eq
 8019a7c:	68ec      	ldreq	r4, [r5, #12]
 8019a7e:	e7e6      	b.n	8019a4e <__swsetup_r+0x1e>
 8019a80:	0758      	lsls	r0, r3, #29
 8019a82:	d512      	bpl.n	8019aaa <__swsetup_r+0x7a>
 8019a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a86:	b141      	cbz	r1, 8019a9a <__swsetup_r+0x6a>
 8019a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a8c:	4299      	cmp	r1, r3
 8019a8e:	d002      	beq.n	8019a96 <__swsetup_r+0x66>
 8019a90:	4630      	mov	r0, r6
 8019a92:	f7ff f95b 	bl	8018d4c <_free_r>
 8019a96:	2300      	movs	r3, #0
 8019a98:	6363      	str	r3, [r4, #52]	; 0x34
 8019a9a:	89a3      	ldrh	r3, [r4, #12]
 8019a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019aa0:	81a3      	strh	r3, [r4, #12]
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	6063      	str	r3, [r4, #4]
 8019aa6:	6923      	ldr	r3, [r4, #16]
 8019aa8:	6023      	str	r3, [r4, #0]
 8019aaa:	89a3      	ldrh	r3, [r4, #12]
 8019aac:	f043 0308 	orr.w	r3, r3, #8
 8019ab0:	81a3      	strh	r3, [r4, #12]
 8019ab2:	6923      	ldr	r3, [r4, #16]
 8019ab4:	b94b      	cbnz	r3, 8019aca <__swsetup_r+0x9a>
 8019ab6:	89a3      	ldrh	r3, [r4, #12]
 8019ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019ac0:	d003      	beq.n	8019aca <__swsetup_r+0x9a>
 8019ac2:	4621      	mov	r1, r4
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	f000 f84d 	bl	8019b64 <__smakebuf_r>
 8019aca:	89a0      	ldrh	r0, [r4, #12]
 8019acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ad0:	f010 0301 	ands.w	r3, r0, #1
 8019ad4:	d00a      	beq.n	8019aec <__swsetup_r+0xbc>
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	60a3      	str	r3, [r4, #8]
 8019ada:	6963      	ldr	r3, [r4, #20]
 8019adc:	425b      	negs	r3, r3
 8019ade:	61a3      	str	r3, [r4, #24]
 8019ae0:	6923      	ldr	r3, [r4, #16]
 8019ae2:	b943      	cbnz	r3, 8019af6 <__swsetup_r+0xc6>
 8019ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ae8:	d1ba      	bne.n	8019a60 <__swsetup_r+0x30>
 8019aea:	bd70      	pop	{r4, r5, r6, pc}
 8019aec:	0781      	lsls	r1, r0, #30
 8019aee:	bf58      	it	pl
 8019af0:	6963      	ldrpl	r3, [r4, #20]
 8019af2:	60a3      	str	r3, [r4, #8]
 8019af4:	e7f4      	b.n	8019ae0 <__swsetup_r+0xb0>
 8019af6:	2000      	movs	r0, #0
 8019af8:	e7f7      	b.n	8019aea <__swsetup_r+0xba>
 8019afa:	bf00      	nop
 8019afc:	24000100 	.word	0x24000100
 8019b00:	0801a844 	.word	0x0801a844
 8019b04:	0801a864 	.word	0x0801a864
 8019b08:	0801a824 	.word	0x0801a824

08019b0c <abort>:
 8019b0c:	b508      	push	{r3, lr}
 8019b0e:	2006      	movs	r0, #6
 8019b10:	f000 f898 	bl	8019c44 <raise>
 8019b14:	2001      	movs	r0, #1
 8019b16:	f7e9 f8e7 	bl	8002ce8 <_exit>

08019b1a <__swhatbuf_r>:
 8019b1a:	b570      	push	{r4, r5, r6, lr}
 8019b1c:	460e      	mov	r6, r1
 8019b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b22:	2900      	cmp	r1, #0
 8019b24:	b096      	sub	sp, #88	; 0x58
 8019b26:	4614      	mov	r4, r2
 8019b28:	461d      	mov	r5, r3
 8019b2a:	da08      	bge.n	8019b3e <__swhatbuf_r+0x24>
 8019b2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019b30:	2200      	movs	r2, #0
 8019b32:	602a      	str	r2, [r5, #0]
 8019b34:	061a      	lsls	r2, r3, #24
 8019b36:	d410      	bmi.n	8019b5a <__swhatbuf_r+0x40>
 8019b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b3c:	e00e      	b.n	8019b5c <__swhatbuf_r+0x42>
 8019b3e:	466a      	mov	r2, sp
 8019b40:	f000 f89c 	bl	8019c7c <_fstat_r>
 8019b44:	2800      	cmp	r0, #0
 8019b46:	dbf1      	blt.n	8019b2c <__swhatbuf_r+0x12>
 8019b48:	9a01      	ldr	r2, [sp, #4]
 8019b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019b52:	425a      	negs	r2, r3
 8019b54:	415a      	adcs	r2, r3
 8019b56:	602a      	str	r2, [r5, #0]
 8019b58:	e7ee      	b.n	8019b38 <__swhatbuf_r+0x1e>
 8019b5a:	2340      	movs	r3, #64	; 0x40
 8019b5c:	2000      	movs	r0, #0
 8019b5e:	6023      	str	r3, [r4, #0]
 8019b60:	b016      	add	sp, #88	; 0x58
 8019b62:	bd70      	pop	{r4, r5, r6, pc}

08019b64 <__smakebuf_r>:
 8019b64:	898b      	ldrh	r3, [r1, #12]
 8019b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019b68:	079d      	lsls	r5, r3, #30
 8019b6a:	4606      	mov	r6, r0
 8019b6c:	460c      	mov	r4, r1
 8019b6e:	d507      	bpl.n	8019b80 <__smakebuf_r+0x1c>
 8019b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019b74:	6023      	str	r3, [r4, #0]
 8019b76:	6123      	str	r3, [r4, #16]
 8019b78:	2301      	movs	r3, #1
 8019b7a:	6163      	str	r3, [r4, #20]
 8019b7c:	b002      	add	sp, #8
 8019b7e:	bd70      	pop	{r4, r5, r6, pc}
 8019b80:	ab01      	add	r3, sp, #4
 8019b82:	466a      	mov	r2, sp
 8019b84:	f7ff ffc9 	bl	8019b1a <__swhatbuf_r>
 8019b88:	9900      	ldr	r1, [sp, #0]
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	4630      	mov	r0, r6
 8019b8e:	f7ff f949 	bl	8018e24 <_malloc_r>
 8019b92:	b948      	cbnz	r0, 8019ba8 <__smakebuf_r+0x44>
 8019b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b98:	059a      	lsls	r2, r3, #22
 8019b9a:	d4ef      	bmi.n	8019b7c <__smakebuf_r+0x18>
 8019b9c:	f023 0303 	bic.w	r3, r3, #3
 8019ba0:	f043 0302 	orr.w	r3, r3, #2
 8019ba4:	81a3      	strh	r3, [r4, #12]
 8019ba6:	e7e3      	b.n	8019b70 <__smakebuf_r+0xc>
 8019ba8:	4b0d      	ldr	r3, [pc, #52]	; (8019be0 <__smakebuf_r+0x7c>)
 8019baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8019bac:	89a3      	ldrh	r3, [r4, #12]
 8019bae:	6020      	str	r0, [r4, #0]
 8019bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bb4:	81a3      	strh	r3, [r4, #12]
 8019bb6:	9b00      	ldr	r3, [sp, #0]
 8019bb8:	6163      	str	r3, [r4, #20]
 8019bba:	9b01      	ldr	r3, [sp, #4]
 8019bbc:	6120      	str	r0, [r4, #16]
 8019bbe:	b15b      	cbz	r3, 8019bd8 <__smakebuf_r+0x74>
 8019bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	f000 f86b 	bl	8019ca0 <_isatty_r>
 8019bca:	b128      	cbz	r0, 8019bd8 <__smakebuf_r+0x74>
 8019bcc:	89a3      	ldrh	r3, [r4, #12]
 8019bce:	f023 0303 	bic.w	r3, r3, #3
 8019bd2:	f043 0301 	orr.w	r3, r3, #1
 8019bd6:	81a3      	strh	r3, [r4, #12]
 8019bd8:	89a0      	ldrh	r0, [r4, #12]
 8019bda:	4305      	orrs	r5, r0
 8019bdc:	81a5      	strh	r5, [r4, #12]
 8019bde:	e7cd      	b.n	8019b7c <__smakebuf_r+0x18>
 8019be0:	08019465 	.word	0x08019465

08019be4 <_malloc_usable_size_r>:
 8019be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019be8:	1f18      	subs	r0, r3, #4
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	bfbc      	itt	lt
 8019bee:	580b      	ldrlt	r3, [r1, r0]
 8019bf0:	18c0      	addlt	r0, r0, r3
 8019bf2:	4770      	bx	lr

08019bf4 <_raise_r>:
 8019bf4:	291f      	cmp	r1, #31
 8019bf6:	b538      	push	{r3, r4, r5, lr}
 8019bf8:	4604      	mov	r4, r0
 8019bfa:	460d      	mov	r5, r1
 8019bfc:	d904      	bls.n	8019c08 <_raise_r+0x14>
 8019bfe:	2316      	movs	r3, #22
 8019c00:	6003      	str	r3, [r0, #0]
 8019c02:	f04f 30ff 	mov.w	r0, #4294967295
 8019c06:	bd38      	pop	{r3, r4, r5, pc}
 8019c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019c0a:	b112      	cbz	r2, 8019c12 <_raise_r+0x1e>
 8019c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019c10:	b94b      	cbnz	r3, 8019c26 <_raise_r+0x32>
 8019c12:	4620      	mov	r0, r4
 8019c14:	f000 f830 	bl	8019c78 <_getpid_r>
 8019c18:	462a      	mov	r2, r5
 8019c1a:	4601      	mov	r1, r0
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c22:	f000 b817 	b.w	8019c54 <_kill_r>
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	d00a      	beq.n	8019c40 <_raise_r+0x4c>
 8019c2a:	1c59      	adds	r1, r3, #1
 8019c2c:	d103      	bne.n	8019c36 <_raise_r+0x42>
 8019c2e:	2316      	movs	r3, #22
 8019c30:	6003      	str	r3, [r0, #0]
 8019c32:	2001      	movs	r0, #1
 8019c34:	e7e7      	b.n	8019c06 <_raise_r+0x12>
 8019c36:	2400      	movs	r4, #0
 8019c38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019c3c:	4628      	mov	r0, r5
 8019c3e:	4798      	blx	r3
 8019c40:	2000      	movs	r0, #0
 8019c42:	e7e0      	b.n	8019c06 <_raise_r+0x12>

08019c44 <raise>:
 8019c44:	4b02      	ldr	r3, [pc, #8]	; (8019c50 <raise+0xc>)
 8019c46:	4601      	mov	r1, r0
 8019c48:	6818      	ldr	r0, [r3, #0]
 8019c4a:	f7ff bfd3 	b.w	8019bf4 <_raise_r>
 8019c4e:	bf00      	nop
 8019c50:	24000100 	.word	0x24000100

08019c54 <_kill_r>:
 8019c54:	b538      	push	{r3, r4, r5, lr}
 8019c56:	4d07      	ldr	r5, [pc, #28]	; (8019c74 <_kill_r+0x20>)
 8019c58:	2300      	movs	r3, #0
 8019c5a:	4604      	mov	r4, r0
 8019c5c:	4608      	mov	r0, r1
 8019c5e:	4611      	mov	r1, r2
 8019c60:	602b      	str	r3, [r5, #0]
 8019c62:	f7e9 f831 	bl	8002cc8 <_kill>
 8019c66:	1c43      	adds	r3, r0, #1
 8019c68:	d102      	bne.n	8019c70 <_kill_r+0x1c>
 8019c6a:	682b      	ldr	r3, [r5, #0]
 8019c6c:	b103      	cbz	r3, 8019c70 <_kill_r+0x1c>
 8019c6e:	6023      	str	r3, [r4, #0]
 8019c70:	bd38      	pop	{r3, r4, r5, pc}
 8019c72:	bf00      	nop
 8019c74:	240028fc 	.word	0x240028fc

08019c78 <_getpid_r>:
 8019c78:	f7e9 b81e 	b.w	8002cb8 <_getpid>

08019c7c <_fstat_r>:
 8019c7c:	b538      	push	{r3, r4, r5, lr}
 8019c7e:	4d07      	ldr	r5, [pc, #28]	; (8019c9c <_fstat_r+0x20>)
 8019c80:	2300      	movs	r3, #0
 8019c82:	4604      	mov	r4, r0
 8019c84:	4608      	mov	r0, r1
 8019c86:	4611      	mov	r1, r2
 8019c88:	602b      	str	r3, [r5, #0]
 8019c8a:	f7e9 f87c 	bl	8002d86 <_fstat>
 8019c8e:	1c43      	adds	r3, r0, #1
 8019c90:	d102      	bne.n	8019c98 <_fstat_r+0x1c>
 8019c92:	682b      	ldr	r3, [r5, #0]
 8019c94:	b103      	cbz	r3, 8019c98 <_fstat_r+0x1c>
 8019c96:	6023      	str	r3, [r4, #0]
 8019c98:	bd38      	pop	{r3, r4, r5, pc}
 8019c9a:	bf00      	nop
 8019c9c:	240028fc 	.word	0x240028fc

08019ca0 <_isatty_r>:
 8019ca0:	b538      	push	{r3, r4, r5, lr}
 8019ca2:	4d06      	ldr	r5, [pc, #24]	; (8019cbc <_isatty_r+0x1c>)
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	4604      	mov	r4, r0
 8019ca8:	4608      	mov	r0, r1
 8019caa:	602b      	str	r3, [r5, #0]
 8019cac:	f7e9 f87b 	bl	8002da6 <_isatty>
 8019cb0:	1c43      	adds	r3, r0, #1
 8019cb2:	d102      	bne.n	8019cba <_isatty_r+0x1a>
 8019cb4:	682b      	ldr	r3, [r5, #0]
 8019cb6:	b103      	cbz	r3, 8019cba <_isatty_r+0x1a>
 8019cb8:	6023      	str	r3, [r4, #0]
 8019cba:	bd38      	pop	{r3, r4, r5, pc}
 8019cbc:	240028fc 	.word	0x240028fc

08019cc0 <checkint>:
 8019cc0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019cc4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8019cc8:	429a      	cmp	r2, r3
 8019cca:	b570      	push	{r4, r5, r6, lr}
 8019ccc:	dd2a      	ble.n	8019d24 <checkint+0x64>
 8019cce:	f240 4333 	movw	r3, #1075	; 0x433
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	dc24      	bgt.n	8019d20 <checkint+0x60>
 8019cd6:	1a9b      	subs	r3, r3, r2
 8019cd8:	f1a3 0620 	sub.w	r6, r3, #32
 8019cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8019ce0:	fa02 f403 	lsl.w	r4, r2, r3
 8019ce4:	fa02 f606 	lsl.w	r6, r2, r6
 8019ce8:	f1c3 0520 	rsb	r5, r3, #32
 8019cec:	fa22 f505 	lsr.w	r5, r2, r5
 8019cf0:	4334      	orrs	r4, r6
 8019cf2:	432c      	orrs	r4, r5
 8019cf4:	409a      	lsls	r2, r3
 8019cf6:	ea20 0202 	bic.w	r2, r0, r2
 8019cfa:	ea21 0404 	bic.w	r4, r1, r4
 8019cfe:	4322      	orrs	r2, r4
 8019d00:	f1a3 0420 	sub.w	r4, r3, #32
 8019d04:	f1c3 0220 	rsb	r2, r3, #32
 8019d08:	d10c      	bne.n	8019d24 <checkint+0x64>
 8019d0a:	40d8      	lsrs	r0, r3
 8019d0c:	fa01 f302 	lsl.w	r3, r1, r2
 8019d10:	4318      	orrs	r0, r3
 8019d12:	40e1      	lsrs	r1, r4
 8019d14:	4308      	orrs	r0, r1
 8019d16:	f000 0001 	and.w	r0, r0, #1
 8019d1a:	f1d0 0002 	rsbs	r0, r0, #2
 8019d1e:	bd70      	pop	{r4, r5, r6, pc}
 8019d20:	2002      	movs	r0, #2
 8019d22:	e7fc      	b.n	8019d1e <checkint+0x5e>
 8019d24:	2000      	movs	r0, #0
 8019d26:	e7fa      	b.n	8019d1e <checkint+0x5e>

08019d28 <pow>:
 8019d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d2c:	ee10 4a90 	vmov	r4, s1
 8019d30:	ed2d 8b0a 	vpush	{d8-d12}
 8019d34:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8019d38:	ee11 7a90 	vmov	r7, s3
 8019d3c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8019d40:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8019d44:	429a      	cmp	r2, r3
 8019d46:	ee10 6a10 	vmov	r6, s0
 8019d4a:	ee11 0a10 	vmov	r0, s2
 8019d4e:	b086      	sub	sp, #24
 8019d50:	46d4      	mov	ip, sl
 8019d52:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8019d56:	d806      	bhi.n	8019d66 <pow+0x3e>
 8019d58:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8019d5c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8019d60:	2b7f      	cmp	r3, #127	; 0x7f
 8019d62:	f240 8156 	bls.w	801a012 <pow+0x2ea>
 8019d66:	1802      	adds	r2, r0, r0
 8019d68:	eb47 0107 	adc.w	r1, r7, r7
 8019d6c:	f06f 0e01 	mvn.w	lr, #1
 8019d70:	f112 39ff 	adds.w	r9, r2, #4294967295
 8019d74:	f141 38ff 	adc.w	r8, r1, #4294967295
 8019d78:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8019d7c:	45ce      	cmp	lr, r9
 8019d7e:	eb73 0808 	sbcs.w	r8, r3, r8
 8019d82:	d23f      	bcs.n	8019e04 <pow+0xdc>
 8019d84:	ea52 0301 	orrs.w	r3, r2, r1
 8019d88:	f04f 0300 	mov.w	r3, #0
 8019d8c:	d10c      	bne.n	8019da8 <pow+0x80>
 8019d8e:	19b6      	adds	r6, r6, r6
 8019d90:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8019d94:	4164      	adcs	r4, r4
 8019d96:	42b3      	cmp	r3, r6
 8019d98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019d9c:	41a3      	sbcs	r3, r4
 8019d9e:	f0c0 808c 	bcc.w	8019eba <pow+0x192>
 8019da2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019da6:	e028      	b.n	8019dfa <pow+0xd2>
 8019da8:	4da3      	ldr	r5, [pc, #652]	; (801a038 <pow+0x310>)
 8019daa:	42ac      	cmp	r4, r5
 8019dac:	bf08      	it	eq
 8019dae:	429e      	cmpeq	r6, r3
 8019db0:	d107      	bne.n	8019dc2 <pow+0x9a>
 8019db2:	1800      	adds	r0, r0, r0
 8019db4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8019db8:	417f      	adcs	r7, r7
 8019dba:	4283      	cmp	r3, r0
 8019dbc:	4b9f      	ldr	r3, [pc, #636]	; (801a03c <pow+0x314>)
 8019dbe:	41bb      	sbcs	r3, r7
 8019dc0:	e7ed      	b.n	8019d9e <pow+0x76>
 8019dc2:	19b6      	adds	r6, r6, r6
 8019dc4:	489e      	ldr	r0, [pc, #632]	; (801a040 <pow+0x318>)
 8019dc6:	4164      	adcs	r4, r4
 8019dc8:	42b3      	cmp	r3, r6
 8019dca:	eb70 0504 	sbcs.w	r5, r0, r4
 8019dce:	d374      	bcc.n	8019eba <pow+0x192>
 8019dd0:	4281      	cmp	r1, r0
 8019dd2:	bf08      	it	eq
 8019dd4:	429a      	cmpeq	r2, r3
 8019dd6:	d170      	bne.n	8019eba <pow+0x192>
 8019dd8:	4a9a      	ldr	r2, [pc, #616]	; (801a044 <pow+0x31c>)
 8019dda:	4294      	cmp	r4, r2
 8019ddc:	bf08      	it	eq
 8019dde:	429e      	cmpeq	r6, r3
 8019de0:	d0df      	beq.n	8019da2 <pow+0x7a>
 8019de2:	4294      	cmp	r4, r2
 8019de4:	ea6f 0707 	mvn.w	r7, r7
 8019de8:	bf34      	ite	cc
 8019dea:	2400      	movcc	r4, #0
 8019dec:	2401      	movcs	r4, #1
 8019dee:	0fff      	lsrs	r7, r7, #31
 8019df0:	42bc      	cmp	r4, r7
 8019df2:	f040 81d9 	bne.w	801a1a8 <pow+0x480>
 8019df6:	ee21 0b01 	vmul.f64	d0, d1, d1
 8019dfa:	b006      	add	sp, #24
 8019dfc:	ecbd 8b0a 	vpop	{d8-d12}
 8019e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e04:	eb16 0806 	adds.w	r8, r6, r6
 8019e08:	eb44 0904 	adc.w	r9, r4, r4
 8019e0c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8019e10:	f169 0200 	sbc.w	r2, r9, #0
 8019e14:	458e      	cmp	lr, r1
 8019e16:	4193      	sbcs	r3, r2
 8019e18:	d223      	bcs.n	8019e62 <pow+0x13a>
 8019e1a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8019e1e:	2c00      	cmp	r4, #0
 8019e20:	da12      	bge.n	8019e48 <pow+0x120>
 8019e22:	4639      	mov	r1, r7
 8019e24:	f7ff ff4c 	bl	8019cc0 <checkint>
 8019e28:	2801      	cmp	r0, #1
 8019e2a:	d10d      	bne.n	8019e48 <pow+0x120>
 8019e2c:	eeb1 0b40 	vneg.f64	d0, d0
 8019e30:	ea58 0309 	orrs.w	r3, r8, r9
 8019e34:	d10a      	bne.n	8019e4c <pow+0x124>
 8019e36:	2f00      	cmp	r7, #0
 8019e38:	dadf      	bge.n	8019dfa <pow+0xd2>
 8019e3a:	b006      	add	sp, #24
 8019e3c:	ecbd 8b0a 	vpop	{d8-d12}
 8019e40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e44:	f000 b9f0 	b.w	801a228 <__math_divzero>
 8019e48:	2000      	movs	r0, #0
 8019e4a:	e7f1      	b.n	8019e30 <pow+0x108>
 8019e4c:	2f00      	cmp	r7, #0
 8019e4e:	dad4      	bge.n	8019dfa <pow+0xd2>
 8019e50:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019e54:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8019e58:	ed8d 7b00 	vstr	d7, [sp]
 8019e5c:	ed9d 0b00 	vldr	d0, [sp]
 8019e60:	e7cb      	b.n	8019dfa <pow+0xd2>
 8019e62:	2c00      	cmp	r4, #0
 8019e64:	da2c      	bge.n	8019ec0 <pow+0x198>
 8019e66:	4639      	mov	r1, r7
 8019e68:	f7ff ff2a 	bl	8019cc0 <checkint>
 8019e6c:	b930      	cbnz	r0, 8019e7c <pow+0x154>
 8019e6e:	b006      	add	sp, #24
 8019e70:	ecbd 8b0a 	vpop	{d8-d12}
 8019e74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e78:	f000 b9ee 	b.w	801a258 <__math_invalid>
 8019e7c:	2801      	cmp	r0, #1
 8019e7e:	bf14      	ite	ne
 8019e80:	2000      	movne	r0, #0
 8019e82:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8019e86:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019e8a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8019e8e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8019e92:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8019e96:	2b7f      	cmp	r3, #127	; 0x7f
 8019e98:	d92d      	bls.n	8019ef6 <pow+0x1ce>
 8019e9a:	4b67      	ldr	r3, [pc, #412]	; (801a038 <pow+0x310>)
 8019e9c:	2000      	movs	r0, #0
 8019e9e:	429c      	cmp	r4, r3
 8019ea0:	bf08      	it	eq
 8019ea2:	4286      	cmpeq	r6, r0
 8019ea4:	f43f af7d 	beq.w	8019da2 <pow+0x7a>
 8019ea8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8019eac:	428a      	cmp	r2, r1
 8019eae:	d80c      	bhi.n	8019eca <pow+0x1a2>
 8019eb0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019eb4:	42b0      	cmp	r0, r6
 8019eb6:	41a3      	sbcs	r3, r4
 8019eb8:	d204      	bcs.n	8019ec4 <pow+0x19c>
 8019eba:	ee31 0b00 	vadd.f64	d0, d1, d0
 8019ebe:	e79c      	b.n	8019dfa <pow+0xd2>
 8019ec0:	2000      	movs	r0, #0
 8019ec2:	e7e4      	b.n	8019e8e <pow+0x166>
 8019ec4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8019ec8:	e797      	b.n	8019dfa <pow+0xd2>
 8019eca:	2e01      	cmp	r6, #1
 8019ecc:	eb74 0303 	sbcs.w	r3, r4, r3
 8019ed0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8019ed4:	bf34      	ite	cc
 8019ed6:	2301      	movcc	r3, #1
 8019ed8:	2300      	movcs	r3, #0
 8019eda:	4295      	cmp	r5, r2
 8019edc:	bf8c      	ite	hi
 8019ede:	2500      	movhi	r5, #0
 8019ee0:	2501      	movls	r5, #1
 8019ee2:	42ab      	cmp	r3, r5
 8019ee4:	f000 809d 	beq.w	801a022 <pow+0x2fa>
 8019ee8:	b006      	add	sp, #24
 8019eea:	ecbd 8b0a 	vpop	{d8-d12}
 8019eee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef2:	f000 b991 	b.w	801a218 <__math_oflow>
 8019ef6:	f1bc 0f00 	cmp.w	ip, #0
 8019efa:	d10b      	bne.n	8019f14 <pow+0x1ec>
 8019efc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801a030 <pow+0x308>
 8019f00:	ee20 7b07 	vmul.f64	d7, d0, d7
 8019f04:	ec53 2b17 	vmov	r2, r3, d7
 8019f08:	ee17 6a10 	vmov	r6, s14
 8019f0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8019f10:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8019f14:	4b4c      	ldr	r3, [pc, #304]	; (801a048 <pow+0x320>)
 8019f16:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8019f1a:	4423      	add	r3, r4
 8019f1c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8019f20:	1519      	asrs	r1, r3, #20
 8019f22:	0d1b      	lsrs	r3, r3, #20
 8019f24:	051b      	lsls	r3, r3, #20
 8019f26:	eba4 0903 	sub.w	r9, r4, r3
 8019f2a:	4b48      	ldr	r3, [pc, #288]	; (801a04c <pow+0x324>)
 8019f2c:	ee04 1a10 	vmov	s8, r1
 8019f30:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8019f34:	f1b6 0800 	subs.w	r8, r6, #0
 8019f38:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8019f3c:	ec49 8b15 	vmov	d5, r8, r9
 8019f40:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8019f44:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019f48:	ed93 7b00 	vldr	d7, [r3]
 8019f4c:	ed93 5b02 	vldr	d5, [r3, #8]
 8019f50:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8019f54:	eea4 2b07 	vfma.f64	d2, d4, d7
 8019f58:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8019f5c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8019f60:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8019f64:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019f68:	ed93 5b04 	vldr	d5, [r3, #16]
 8019f6c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8019f70:	ee37 7b02 	vadd.f64	d7, d7, d2
 8019f74:	ee26 5b05 	vmul.f64	d5, d6, d5
 8019f78:	ed93 4b08 	vldr	d4, [r3, #32]
 8019f7c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8019f80:	eeb0 9b40 	vmov.f64	d9, d0
 8019f84:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8019f88:	ed93 5b06 	vldr	d5, [r3, #24]
 8019f8c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8019f90:	ee26 bb00 	vmul.f64	d11, d6, d0
 8019f94:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8019f98:	eea6 5b04 	vfma.f64	d5, d6, d4
 8019f9c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8019fa0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8019fa4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8019fa8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8019fac:	eea6 4b03 	vfma.f64	d4, d6, d3
 8019fb0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8019fb4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8019fb8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8019fbc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8019fc0:	eea0 4b03 	vfma.f64	d4, d0, d3
 8019fc4:	eea0 5b04 	vfma.f64	d5, d0, d4
 8019fc8:	eeab ab05 	vfma.f64	d10, d11, d5
 8019fcc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8019fd0:	ee21 7b06 	vmul.f64	d7, d1, d6
 8019fd4:	ee17 3a90 	vmov	r3, s15
 8019fd8:	eeb0 5b47 	vmov.f64	d5, d7
 8019fdc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8019fe0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8019fe4:	18b2      	adds	r2, r6, r2
 8019fe6:	2a3e      	cmp	r2, #62	; 0x3e
 8019fe8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8019fec:	ee38 8b46 	vsub.f64	d8, d8, d6
 8019ff0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8019ff4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8019ff8:	d92b      	bls.n	801a052 <pow+0x32a>
 8019ffa:	2a00      	cmp	r2, #0
 8019ffc:	da0b      	bge.n	801a016 <pow+0x2ee>
 8019ffe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a002:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a006:	2800      	cmp	r0, #0
 801a008:	f43f aef7 	beq.w	8019dfa <pow+0xd2>
 801a00c:	eeb1 0b40 	vneg.f64	d0, d0
 801a010:	e6f3      	b.n	8019dfa <pow+0xd2>
 801a012:	2000      	movs	r0, #0
 801a014:	e77e      	b.n	8019f14 <pow+0x1ec>
 801a016:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801a01a:	d919      	bls.n	801a050 <pow+0x328>
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f6bf af63 	bge.w	8019ee8 <pow+0x1c0>
 801a022:	b006      	add	sp, #24
 801a024:	ecbd 8b0a 	vpop	{d8-d12}
 801a028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a02c:	f000 b8ec 	b.w	801a208 <__math_uflow>
 801a030:	00000000 	.word	0x00000000
 801a034:	43300000 	.word	0x43300000
 801a038:	3ff00000 	.word	0x3ff00000
 801a03c:	fff00000 	.word	0xfff00000
 801a040:	ffe00000 	.word	0xffe00000
 801a044:	7fe00000 	.word	0x7fe00000
 801a048:	c0196aab 	.word	0xc0196aab
 801a04c:	0801a888 	.word	0x0801a888
 801a050:	2600      	movs	r6, #0
 801a052:	495d      	ldr	r1, [pc, #372]	; (801a1c8 <pow+0x4a0>)
 801a054:	ed91 4b02 	vldr	d4, [r1, #8]
 801a058:	ed91 3b00 	vldr	d3, [r1]
 801a05c:	eeb0 6b44 	vmov.f64	d6, d4
 801a060:	eea7 6b03 	vfma.f64	d6, d7, d3
 801a064:	ee16 5a10 	vmov	r5, s12
 801a068:	ee36 6b44 	vsub.f64	d6, d6, d4
 801a06c:	ed91 4b04 	vldr	d4, [r1, #16]
 801a070:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801a074:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a078:	eeb0 0b47 	vmov.f64	d0, d7
 801a07c:	ed91 7b06 	vldr	d7, [r1, #24]
 801a080:	18dc      	adds	r4, r3, r3
 801a082:	f104 030f 	add.w	r3, r4, #15
 801a086:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801a08a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801a08e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801a092:	ee35 0b00 	vadd.f64	d0, d5, d0
 801a096:	ee20 6b00 	vmul.f64	d6, d0, d0
 801a09a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801a09e:	ed91 5b08 	vldr	d5, [r1, #32]
 801a0a2:	ee30 7b07 	vadd.f64	d7, d0, d7
 801a0a6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801a0aa:	eea0 5b04 	vfma.f64	d5, d0, d4
 801a0ae:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801a0b2:	eea6 7b05 	vfma.f64	d7, d6, d5
 801a0b6:	ee26 6b06 	vmul.f64	d6, d6, d6
 801a0ba:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801a0be:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801a0c2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801a0c6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801a0ca:	1940      	adds	r0, r0, r5
 801a0cc:	2700      	movs	r7, #0
 801a0ce:	eb17 020c 	adds.w	r2, r7, ip
 801a0d2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801a0d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 801a0da:	2e00      	cmp	r6, #0
 801a0dc:	d15f      	bne.n	801a19e <pow+0x476>
 801a0de:	42bd      	cmp	r5, r7
 801a0e0:	db13      	blt.n	801a10a <pow+0x3e2>
 801a0e2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801a0e6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801a0ea:	4610      	mov	r0, r2
 801a0ec:	ec41 0b10 	vmov	d0, r0, r1
 801a0f0:	eea7 0b00 	vfma.f64	d0, d7, d0
 801a0f4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a1b0 <pow+0x488>
 801a0f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a0fc:	b006      	add	sp, #24
 801a0fe:	ecbd 8b0a 	vpop	{d8-d12}
 801a102:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a106:	f000 b8bf 	b.w	801a288 <__math_check_oflow>
 801a10a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801a10e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801a112:	4610      	mov	r0, r2
 801a114:	ec41 0b15 	vmov	d5, r0, r1
 801a118:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801a11c:	ee27 6b05 	vmul.f64	d6, d7, d5
 801a120:	ee35 7b06 	vadd.f64	d7, d5, d6
 801a124:	eeb0 3bc7 	vabs.f64	d3, d7
 801a128:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a130:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801a1b8 <pow+0x490>
 801a134:	d52a      	bpl.n	801a18c <pow+0x464>
 801a136:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a13a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a142:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801a146:	ee35 6b06 	vadd.f64	d6, d5, d6
 801a14a:	bf48      	it	mi
 801a14c:	eeb0 4b43 	vmovmi.f64	d4, d3
 801a150:	ee37 3b04 	vadd.f64	d3, d7, d4
 801a154:	ee34 5b43 	vsub.f64	d5, d4, d3
 801a158:	ee35 7b07 	vadd.f64	d7, d5, d7
 801a15c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a160:	ee37 7b03 	vadd.f64	d7, d7, d3
 801a164:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a168:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a170:	d104      	bne.n	801a17c <pow+0x454>
 801a172:	4632      	mov	r2, r6
 801a174:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801a178:	ec43 2b17 	vmov	d7, r2, r3
 801a17c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a180:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a184:	ee26 6b00 	vmul.f64	d6, d6, d0
 801a188:	ed8d 6b04 	vstr	d6, [sp, #16]
 801a18c:	ee27 0b00 	vmul.f64	d0, d7, d0
 801a190:	b006      	add	sp, #24
 801a192:	ecbd 8b0a 	vpop	{d8-d12}
 801a196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a19a:	f000 b86c 	b.w	801a276 <__math_check_uflow>
 801a19e:	ec43 2b10 	vmov	d0, r2, r3
 801a1a2:	eea7 0b00 	vfma.f64	d0, d7, d0
 801a1a6:	e628      	b.n	8019dfa <pow+0xd2>
 801a1a8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801a1c0 <pow+0x498>
 801a1ac:	e625      	b.n	8019dfa <pow+0xd2>
 801a1ae:	bf00      	nop
 801a1b0:	00000000 	.word	0x00000000
 801a1b4:	7f000000 	.word	0x7f000000
 801a1b8:	00000000 	.word	0x00000000
 801a1bc:	00100000 	.word	0x00100000
	...
 801a1c8:	0801b8d0 	.word	0x0801b8d0

0801a1cc <with_errno>:
 801a1cc:	b513      	push	{r0, r1, r4, lr}
 801a1ce:	4604      	mov	r4, r0
 801a1d0:	ed8d 0b00 	vstr	d0, [sp]
 801a1d4:	f7fb f9dc 	bl	8015590 <__errno>
 801a1d8:	ed9d 0b00 	vldr	d0, [sp]
 801a1dc:	6004      	str	r4, [r0, #0]
 801a1de:	b002      	add	sp, #8
 801a1e0:	bd10      	pop	{r4, pc}

0801a1e2 <xflow>:
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	b158      	cbz	r0, 801a1fe <xflow+0x1c>
 801a1e6:	eeb1 7b40 	vneg.f64	d7, d0
 801a1ea:	ed8d 7b00 	vstr	d7, [sp]
 801a1ee:	ed9d 7b00 	vldr	d7, [sp]
 801a1f2:	2022      	movs	r0, #34	; 0x22
 801a1f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a1f8:	b002      	add	sp, #8
 801a1fa:	f7ff bfe7 	b.w	801a1cc <with_errno>
 801a1fe:	eeb0 7b40 	vmov.f64	d7, d0
 801a202:	e7f2      	b.n	801a1ea <xflow+0x8>
 801a204:	0000      	movs	r0, r0
	...

0801a208 <__math_uflow>:
 801a208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a210 <__math_uflow+0x8>
 801a20c:	f7ff bfe9 	b.w	801a1e2 <xflow>
 801a210:	00000000 	.word	0x00000000
 801a214:	10000000 	.word	0x10000000

0801a218 <__math_oflow>:
 801a218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a220 <__math_oflow+0x8>
 801a21c:	f7ff bfe1 	b.w	801a1e2 <xflow>
 801a220:	00000000 	.word	0x00000000
 801a224:	70000000 	.word	0x70000000

0801a228 <__math_divzero>:
 801a228:	b082      	sub	sp, #8
 801a22a:	2800      	cmp	r0, #0
 801a22c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a230:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a234:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801a238:	ed8d 7b00 	vstr	d7, [sp]
 801a23c:	ed9d 0b00 	vldr	d0, [sp]
 801a240:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801a250 <__math_divzero+0x28>
 801a244:	2022      	movs	r0, #34	; 0x22
 801a246:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801a24a:	b002      	add	sp, #8
 801a24c:	f7ff bfbe 	b.w	801a1cc <with_errno>
	...

0801a258 <__math_invalid>:
 801a258:	eeb0 7b40 	vmov.f64	d7, d0
 801a25c:	eeb4 7b47 	vcmp.f64	d7, d7
 801a260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a264:	ee30 6b40 	vsub.f64	d6, d0, d0
 801a268:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801a26c:	d602      	bvs.n	801a274 <__math_invalid+0x1c>
 801a26e:	2021      	movs	r0, #33	; 0x21
 801a270:	f7ff bfac 	b.w	801a1cc <with_errno>
 801a274:	4770      	bx	lr

0801a276 <__math_check_uflow>:
 801a276:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a27e:	d102      	bne.n	801a286 <__math_check_uflow+0x10>
 801a280:	2022      	movs	r0, #34	; 0x22
 801a282:	f7ff bfa3 	b.w	801a1cc <with_errno>
 801a286:	4770      	bx	lr

0801a288 <__math_check_oflow>:
 801a288:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801a2a8 <__math_check_oflow+0x20>
 801a28c:	eeb0 7bc0 	vabs.f64	d7, d0
 801a290:	eeb4 7b46 	vcmp.f64	d7, d6
 801a294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a298:	dd02      	ble.n	801a2a0 <__math_check_oflow+0x18>
 801a29a:	2022      	movs	r0, #34	; 0x22
 801a29c:	f7ff bf96 	b.w	801a1cc <with_errno>
 801a2a0:	4770      	bx	lr
 801a2a2:	bf00      	nop
 801a2a4:	f3af 8000 	nop.w
 801a2a8:	ffffffff 	.word	0xffffffff
 801a2ac:	7fefffff 	.word	0x7fefffff

0801a2b0 <_init>:
 801a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2b2:	bf00      	nop
 801a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2b6:	bc08      	pop	{r3}
 801a2b8:	469e      	mov	lr, r3
 801a2ba:	4770      	bx	lr

0801a2bc <_fini>:
 801a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2be:	bf00      	nop
 801a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2c2:	bc08      	pop	{r3}
 801a2c4:	469e      	mov	lr, r3
 801a2c6:	4770      	bx	lr
