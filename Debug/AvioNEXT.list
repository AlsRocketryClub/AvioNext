
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daa4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800dd78  0800dd78  0001dd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ded0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016d4  24000074  0800df44  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001748  0800df44  00021748  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029c4f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c10  00000000  00000000  00049cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020b0  00000000  00000000  0004d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f58  00000000  00000000  0004f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037da0  00000000  00000000  00051910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002937e  00000000  00000000  000896b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172c98  00000000  00000000  000b2a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002256c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009274  00000000  00000000  00225718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800dd5c 	.word	0x0800dd5c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800dd5c 	.word	0x0800dd5c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <setLEDs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile int datasentflag = 0;

void setLEDs(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b08e      	sub	sp, #56	; 0x38
 8000618:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
 800061e:	e181      	b.n	8000924 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000620:	4aa1      	ldr	r2, [pc, #644]	; (80008a8 <setLEDs+0x294>)
 8000622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000628:	2b03      	cmp	r3, #3
 800062a:	f200 8177 	bhi.w	800091c <setLEDs+0x308>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <setLEDs+0x20>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	080006f5 	.word	0x080006f5
 800063c:	080007a5 	.word	0x080007a5
 8000640:	08000855 	.word	0x08000855
		case 0:
			for (int j = 0; j < 3; j++) {
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
 8000648:	e042      	b.n	80006d0 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800064e:	e039      	b.n	80006c4 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000650:	4996      	ldr	r1, [pc, #600]	; (80008ac <setLEDs+0x298>)
 8000652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800065c:	4413      	add	r3, r2
 800065e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000666:	fa41 f202 	asr.w	r2, r1, r2
 800066a:	4013      	ands	r3, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	d013      	beq.n	8000698 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000672:	00da      	lsls	r2, r3, #3
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	18d1      	adds	r1, r2, r3
 8000678:	4a8b      	ldr	r2, [pc, #556]	; (80008a8 <setLEDs+0x294>)
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4413      	add	r3, r2
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	440b      	add	r3, r1
 800068c:	3308      	adds	r3, #8
 800068e:	4a88      	ldr	r2, [pc, #544]	; (80008b0 <setLEDs+0x29c>)
 8000690:	213c      	movs	r1, #60	; 0x3c
 8000692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000696:	e012      	b.n	80006be <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069a:	00da      	lsls	r2, r3, #3
 800069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069e:	18d1      	adds	r1, r2, r3
 80006a0:	4a81      	ldr	r2, [pc, #516]	; (80008a8 <setLEDs+0x294>)
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	4413      	add	r3, r2
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	440b      	add	r3, r1
 80006b4:	3308      	adds	r3, #8
 80006b6:	4a7e      	ldr	r2, [pc, #504]	; (80008b0 <setLEDs+0x29c>)
 80006b8:	211e      	movs	r1, #30
 80006ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c0:	3301      	adds	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c6:	2b07      	cmp	r3, #7
 80006c8:	ddc2      	ble.n	8000650 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 80006ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006cc:	3301      	adds	r3, #1
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
 80006d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	ddb9      	ble.n	800064a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80006da:	e007      	b.n	80006ec <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 80006dc:	4a74      	ldr	r2, [pc, #464]	; (80008b0 <setLEDs+0x29c>)
 80006de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e0:	2100      	movs	r1, #0
 80006e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e8:	3301      	adds	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	2bb1      	cmp	r3, #177	; 0xb1
 80006f0:	ddf4      	ble.n	80006dc <setLEDs+0xc8>
			}
			break;
 80006f2:	e114      	b.n	800091e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
 80006f8:	e042      	b.n	8000780 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
 80006fe:	e039      	b.n	8000774 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000700:	496a      	ldr	r1, [pc, #424]	; (80008ac <setLEDs+0x298>)
 8000702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	4413      	add	r3, r2
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	6a3a      	ldr	r2, [r7, #32]
 8000716:	fa41 f202 	asr.w	r2, r1, r2
 800071a:	4013      	ands	r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d013      	beq.n	8000748 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	00da      	lsls	r2, r3, #3
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	4a5f      	ldr	r2, [pc, #380]	; (80008a8 <setLEDs+0x294>)
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3308      	adds	r3, #8
 800073e:	4a5d      	ldr	r2, [pc, #372]	; (80008b4 <setLEDs+0x2a0>)
 8000740:	213c      	movs	r1, #60	; 0x3c
 8000742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000746:	e012      	b.n	800076e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	00da      	lsls	r2, r3, #3
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	18d1      	adds	r1, r2, r3
 8000750:	4a55      	ldr	r2, [pc, #340]	; (80008a8 <setLEDs+0x294>)
 8000752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3308      	adds	r3, #8
 8000766:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <setLEDs+0x2a0>)
 8000768:	211e      	movs	r1, #30
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	3301      	adds	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	2b07      	cmp	r3, #7
 8000778:	ddc2      	ble.n	8000700 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	3301      	adds	r3, #1
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	2b02      	cmp	r3, #2
 8000784:	ddb9      	ble.n	80006fa <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e007      	b.n	800079c <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 800078c:	4a49      	ldr	r2, [pc, #292]	; (80008b4 <setLEDs+0x2a0>)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2100      	movs	r1, #0
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	2bb1      	cmp	r3, #177	; 0xb1
 80007a0:	ddf4      	ble.n	800078c <setLEDs+0x178>
			}
			break;
 80007a2:	e0bc      	b.n	800091e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	e042      	b.n	8000830 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e039      	b.n	8000824 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007b0:	493e      	ldr	r1, [pc, #248]	; (80008ac <setLEDs+0x298>)
 80007b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	69ba      	ldr	r2, [r7, #24]
 80007bc:	4413      	add	r3, r2
 80007be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	fa41 f202 	asr.w	r2, r1, r2
 80007ca:	4013      	ands	r3, r2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	00da      	lsls	r2, r3, #3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	18d1      	adds	r1, r2, r3
 80007d8:	4a33      	ldr	r2, [pc, #204]	; (80008a8 <setLEDs+0x294>)
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	440b      	add	r3, r1
 80007ec:	3308      	adds	r3, #8
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <setLEDs+0x2a4>)
 80007f0:	213c      	movs	r1, #60	; 0x3c
 80007f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007f6:	e012      	b.n	800081e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	00da      	lsls	r2, r3, #3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	18d1      	adds	r1, r2, r3
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <setLEDs+0x294>)
 8000802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <setLEDs+0x2a4>)
 8000818:	211e      	movs	r1, #30
 800081a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2b07      	cmp	r3, #7
 8000828:	ddc2      	ble.n	80007b0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3301      	adds	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	2b02      	cmp	r3, #2
 8000834:	ddb9      	ble.n	80007aa <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000836:	2338      	movs	r3, #56	; 0x38
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e007      	b.n	800084c <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <setLEDs+0x2a4>)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	2100      	movs	r1, #0
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2b69      	cmp	r3, #105	; 0x69
 8000850:	ddf4      	ble.n	800083c <setLEDs+0x228>
			}
			break;
 8000852:	e064      	b.n	800091e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e04e      	b.n	80008f8 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	e045      	b.n	80008ec <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000860:	4912      	ldr	r1, [pc, #72]	; (80008ac <setLEDs+0x298>)
 8000862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	fa41 f202 	asr.w	r2, r1, r2
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01f      	beq.n	80008c0 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	18d1      	adds	r1, r2, r3
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <setLEDs+0x294>)
 800088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3308      	adds	r3, #8
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <setLEDs+0x2a8>)
 80008a0:	213c      	movs	r1, #60	; 0x3c
 80008a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008a6:	e01e      	b.n	80008e6 <setLEDs+0x2d2>
 80008a8:	0800ddc4 	.word	0x0800ddc4
 80008ac:	24000970 	.word	0x24000970
 80008b0:	24000090 	.word	0x24000090
 80008b4:	24000358 	.word	0x24000358
 80008b8:	24000620 	.word	0x24000620
 80008bc:	240007c8 	.word	0x240007c8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	00da      	lsls	r2, r3, #3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	18d1      	adds	r1, r2, r3
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <setLEDs+0x350>)
 80008ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3308      	adds	r3, #8
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <setLEDs+0x354>)
 80008e0:	211e      	movs	r1, #30
 80008e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	ddb6      	ble.n	8000860 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	ddad      	ble.n	800085a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80008fe:	2338      	movs	r3, #56	; 0x38
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e007      	b.n	8000914 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <setLEDs+0x354>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2100      	movs	r1, #0
 800090a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3301      	adds	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b69      	cmp	r3, #105	; 0x69
 8000918:	ddf4      	ble.n	8000904 <setLEDs+0x2f0>
			}
			break;
 800091a:	e000      	b.n	800091e <setLEDs+0x30a>
		default:
			break;
 800091c:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000920:	3301      	adds	r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
 8000924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000926:	2b0d      	cmp	r3, #13
 8000928:	f77f ae7a 	ble.w	8000620 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 800092c:	23b2      	movs	r3, #178	; 0xb2
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <setLEDs+0x358>)
 8000930:	210c      	movs	r1, #12
 8000932:	480f      	ldr	r0, [pc, #60]	; (8000970 <setLEDs+0x35c>)
 8000934:	f00a f9e4 	bl	800ad00 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000938:	23b2      	movs	r3, #178	; 0xb2
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <setLEDs+0x360>)
 800093c:	2108      	movs	r1, #8
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <setLEDs+0x364>)
 8000940:	f00a f9de 	bl	800ad00 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000944:	236a      	movs	r3, #106	; 0x6a
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <setLEDs+0x368>)
 8000948:	2104      	movs	r1, #4
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <setLEDs+0x36c>)
 800094c:	f00a f9d8 	bl	800ad00 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000950:	236a      	movs	r3, #106	; 0x6a
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <setLEDs+0x354>)
 8000954:	2100      	movs	r1, #0
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <setLEDs+0x36c>)
 8000958:	f00a f9d2 	bl	800ad00 <HAL_TIM_PWM_Start_DMA>

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	; 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	0800ddc4 	.word	0x0800ddc4
 8000968:	240007c8 	.word	0x240007c8
 800096c:	24000090 	.word	0x24000090
 8000970:	24000e68 	.word	0x24000e68
 8000974:	24000358 	.word	0x24000358
 8000978:	24000d84 	.word	0x24000d84
 800097c:	24000620 	.word	0x24000620
 8000980:	24000dd0 	.word	0x24000dd0

08000984 <HAL_TIM_PWM_PulseFinishedCallback>:
//	while (!datasentflag) {
//	};
//	datasentflag = 0;
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	//TIM2->CCR3= 0;
	datasentflag = 1;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	24001740 	.word	0x24001740
 80009a4:	00000000 	.word	0x00000000

080009a8 <triangle_space>:
  */

//this function looks like this: /\_/\_/\_/\_
//so it's triangles with spaces between them
double triangle_space(double x)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	ed87 0b00 	vstr	d0, [r7]
	const double LENGTH = 3;
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <triangle_space+0xb0>)
 80009b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double normalized = fmod(fabs(x),LENGTH);
 80009bc:	ed97 7b00 	vldr	d7, [r7]
 80009c0:	eeb0 7bc7 	vabs.f64	d7, d7
 80009c4:	ed97 1b04 	vldr	d1, [r7, #16]
 80009c8:	eeb0 0b47 	vmov.f64	d0, d7
 80009cc:	f00d f890 	bl	800daf0 <fmod>
 80009d0:	ed87 0b02 	vstr	d0, [r7, #8]
	if(normalized <= LENGTH/3)
 80009d4:	ed97 6b04 	vldr	d6, [r7, #16]
 80009d8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80009dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009e0:	ed97 6b02 	vldr	d6, [r7, #8]
 80009e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	d80a      	bhi.n	8000a04 <triangle_space+0x5c>
	{
		return LENGTH/3 - normalized;
 80009ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80009f2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80009f6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80009fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80009fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a02:	e01d      	b.n	8000a40 <triangle_space+0x98>
	}
	else if(normalized <= LENGTH*2/3)
 8000a04:	ed97 7b04 	vldr	d7, [r7, #16]
 8000a08:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a0c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000a10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a14:	ed97 6b02 	vldr	d6, [r7, #8]
 8000a18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a20:	d802      	bhi.n	8000a28 <triangle_space+0x80>
	{
		return 0;
 8000a22:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000a50 <triangle_space+0xa8>
 8000a26:	e00b      	b.n	8000a40 <triangle_space+0x98>
	}
	else
	{
		return normalized - LENGTH*2/3;
 8000a28:	ed97 7b04 	vldr	d7, [r7, #16]
 8000a2c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a30:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000a34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a38:	ed97 6b02 	vldr	d6, [r7, #8]
 8000a3c:	ee36 7b47 	vsub.f64	d7, d6, d7
	}
}
 8000a40:	eeb0 0b47 	vmov.f64	d0, d7
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	f3af 8000 	nop.w
	...
 8000a58:	40080000 	.word	0x40080000
 8000a5c:	00000000 	.word	0x00000000

08000a60 <main>:

int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	ed2d 8b02 	vpush	{d8}
 8000a66:	b090      	sub	sp, #64	; 0x40
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f001 fe11 	bl	8002690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f8db 	bl	8000c28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a72:	f000 f955 	bl	8000d20 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fe8b 	bl	8001790 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7a:	f000 fe49 	bl	8001710 <MX_DMA_Init>
  MX_UART4_Init();
 8000a7e:	f000 fd7d 	bl	800157c <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000a82:	f000 fe13 	bl	80016ac <MX_USB_OTG_HS_PCD_Init>
  MX_SPI3_Init();
 8000a86:	f000 fbb3 	bl	80011f0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000a8a:	f000 fa61 	bl	8000f50 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000a8e:	f000 fdc1 	bl	8001614 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a92:	f000 f977 	bl	8000d84 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000a96:	f000 fcbd 	bl	8001414 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000a9a:	f000 f9eb 	bl	8000e74 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000a9e:	f000 fafb 	bl	8001098 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000aa2:	f000 fb4f 	bl	8001144 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000aa6:	f000 fab7 	bl	8001018 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000aaa:	f000 fbf7 	bl	800129c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000aae:	f000 fd0b 	bl	80014c8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000ab2:	f000 fc4b 	bl	800134c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
	const int MAX = 155;
 8000ab6:	239b      	movs	r3, #155	; 0x9b
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
	const double SPEED = 1.0/2000;
 8000aba:	a359      	add	r3, pc, #356	; (adr r3, 8000c20 <main+0x1c0>)
 8000abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	const double r_offset = 0;
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	const double g_offset = 1;
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <main+0x1b0>)
 8000ad6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double b_offset = 2;
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  /* USER CODE BEGIN WHILE */
	while (1) {
		//WS2812_Send();
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		//TIM4->CCR3 = *ptr;
		for(int i = 0; i < 14; i++){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000aea:	e084      	b.n	8000bf6 <main+0x196>

			int time = HAL_GetTick();
 8000aec:	f001 fe56 	bl	800279c <HAL_GetTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	617b      	str	r3, [r7, #20]
			double height_offset = LED_order[i]*1.0/LED_num_max;
 8000af4:	4a47      	ldr	r2, [pc, #284]	; (8000c14 <main+0x1b4>)
 8000af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000b04:	eddf 7a44 	vldr	s15, [pc, #272]	; 8000c18 <main+0x1b8>
 8000b08:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b10:	ed87 7b02 	vstr	d7, [r7, #8]
			double color_offset = time*SPEED + height_offset;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b1e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000b22:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b26:	ed97 6b02 	vldr	d6, [r7, #8]
 8000b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b2e:	ed87 7b00 	vstr	d7, [r7]

			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
 8000b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b34:	ee07 3a90 	vmov	s15, r3
 8000b38:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b3c:	ed97 6b00 	vldr	d6, [r7]
 8000b40:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000b44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b48:	eeb0 0b47 	vmov.f64	d0, d7
 8000b4c:	f7ff ff2c 	bl	80009a8 <triangle_space>
 8000b50:	eeb0 7b40 	vmov.f64	d7, d0
 8000b54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5c:	ee17 0a90 	vmov	r0, s15
 8000b60:	492e      	ldr	r1, [pc, #184]	; (8000c1c <main+0x1bc>)
 8000b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
 8000b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b7a:	ed97 6b00 	vldr	d6, [r7]
 8000b7e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000b82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b86:	eeb0 0b47 	vmov.f64	d0, d7
 8000b8a:	f7ff ff0d 	bl	80009a8 <triangle_space>
 8000b8e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b92:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b9a:	ee17 0a90 	vmov	r0, s15
 8000b9e:	491f      	ldr	r1, [pc, #124]	; (8000c1c <main+0x1bc>)
 8000ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	3304      	adds	r3, #4
 8000bae:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
 8000bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb2:	ee07 3a90 	vmov	s15, r3
 8000bb6:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000bba:	ed97 6b00 	vldr	d6, [r7]
 8000bbe:	ed97 7b06 	vldr	d7, [r7, #24]
 8000bc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8000bca:	f7ff feed 	bl	80009a8 <triangle_space>
 8000bce:	eeb0 7b40 	vmov.f64	d7, d0
 8000bd2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000bd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bda:	ee17 0a90 	vmov	r0, s15
 8000bde:	490f      	ldr	r1, [pc, #60]	; (8000c1c <main+0x1bc>)
 8000be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	3308      	adds	r3, #8
 8000bee:	6018      	str	r0, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf8:	2b0d      	cmp	r3, #13
 8000bfa:	f77f af77 	ble.w	8000aec <main+0x8c>
		}
		setLEDs();
 8000bfe:	f7ff fd09 	bl	8000614 <setLEDs>
		HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fdd6 	bl	80027b4 <HAL_Delay>
		for(int i = 0; i < 14; i++){
 8000c08:	e76d      	b.n	8000ae6 <main+0x86>
 8000c0a:	bf00      	nop
 8000c0c:	f3af 8000 	nop.w
 8000c10:	3ff00000 	.word	0x3ff00000
 8000c14:	0800de34 	.word	0x0800de34
 8000c18:	00000006 	.word	0x00000006
 8000c1c:	24000970 	.word	0x24000970
 8000c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c24:	3f40624d 	.word	0x3f40624d

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	; 0x70
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	224c      	movs	r2, #76	; 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00c ff50 	bl	800dadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00c ff4a 	bl	800dadc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f006 fac3 	bl	80071d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <SystemClock_Config+0xf4>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c5a:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <SystemClock_Config+0xf4>)
 8000c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <SystemClock_Config+0xf4>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c6e:	bf00      	nop
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <SystemClock_Config+0xf4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c7c:	d1f8      	bne.n	8000c70 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000c7e:	2323      	movs	r3, #35	; 0x23
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 fad1 	bl	8007268 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000ccc:	f000 fe4c 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	233f      	movs	r3, #63	; 0x3f
 8000cd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000ce4:	2350      	movs	r3, #80	; 0x50
 8000ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 fe90 	bl	8007a1c <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000d02:	f000 fe31 	bl	8001968 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000d06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f007 f83b 	bl	8007d88 <HAL_RCC_MCOConfig>
}
 8000d12:	bf00      	nop
 8000d14:	3770      	adds	r7, #112	; 0x70
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58024800 	.word	0x58024800

08000d20 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0ae      	sub	sp, #184	; 0xb8
 8000d24:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d26:	463b      	mov	r3, r7
 8000d28:	22b8      	movs	r2, #184	; 0xb8
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00c fed5 	bl	800dadc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000d32:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d42:	230c      	movs	r3, #12
 8000d44:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d52:	23c0      	movs	r3, #192	; 0xc0
 8000d54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 fa4b 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000d78:	f000 fdf6 	bl	8001968 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	37b8      	adds	r7, #184	; 0xb8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2224      	movs	r2, #36	; 0x24
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00c fe9d 	bl	800dadc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <MX_ADC1_Init+0xe8>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc6:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dda:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	4819      	ldr	r0, [pc, #100]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000e02:	f001 ff41 	bl	8002c88 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 fdac 	bl	8001968 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000e1c:	f002 ff7c 	bl	8003d18 <HAL_ADCEx_MultiModeConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e26:	f000 fd9f 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_ADC1_Init+0xec>)
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_ADC1_Init+0xe4>)
 8000e50:	f002 f922 	bl	8003098 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000e5a:	f000 fd85 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	; 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24000a18 	.word	0x24000a18
 8000e6c:	40022000 	.word	0x40022000
 8000e70:	2a000400 	.word	0x2a000400

08000e74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2224      	movs	r2, #36	; 0x24
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f00c fe2b 	bl	800dadc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000e88:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <MX_ADC3_Init+0xd4>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ef8:	4812      	ldr	r0, [pc, #72]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000efa:	f001 fec5 	bl	8002c88 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000f04:	f000 fd30 	bl	8001968 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_ADC3_Init+0xd8>)
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f14:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_ADC3_Init+0xd0>)
 8000f2c:	f002 f8b4 	bl	8003098 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000f36:	f000 fd17 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000a88 	.word	0x24000a88
 8000f48:	58026000 	.word	0x58026000
 8000f4c:	10c00010 	.word	0x10c00010

08000f50 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f56:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <MX_FDCAN3_Init+0xc4>)
 8000f58:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_FDCAN3_Init+0xc0>)
 8000ffe:	f005 f953 	bl	80062a8 <HAL_FDCAN_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001008:	f000 fcae 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	24000af8 	.word	0x24000af8
 8001014:	4000d400 	.word	0x4000d400

08001018 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_I2C2_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_I2C2_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_I2C2_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <MX_I2C2_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_I2C2_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_I2C2_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_I2C2_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_I2C2_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C2_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C2_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <MX_I2C2_Init+0x74>)
 8001054:	f005 fe4e 	bl	8006cf4 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 fc83 	bl	8001968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_I2C2_Init+0x74>)
 8001066:	f005 fed5 	bl	8006e14 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 fc7a 	bl	8001968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_I2C2_Init+0x74>)
 8001078:	f005 ff17 	bl	8006eaa <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 fc71 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000b98 	.word	0x24000b98
 8001090:	40005800 	.word	0x40005800
 8001094:	00808cd2 	.word	0x00808cd2

08001098 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_SPI1_Init+0xa4>)
 800109e:	4a28      	ldr	r2, [pc, #160]	; (8001140 <MX_SPI1_Init+0xa8>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_SPI1_Init+0xa4>)
 80010a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_SPI1_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_SPI1_Init+0xa4>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_SPI1_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_SPI1_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_SPI1_Init+0xa4>)
 80010c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_SPI1_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_SPI1_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_SPI1_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI1_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI1_Init+0xa4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI1_Init+0xa4>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_SPI1_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI1_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI1_Init+0xa4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI1_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI1_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_SPI1_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI1_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_SPI1_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI1_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_SPI1_Init+0xa4>)
 8001128:	f009 fc54 	bl	800a9d4 <HAL_SPI_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001132:	f000 fc19 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000bec 	.word	0x24000bec
 8001140:	40013000 	.word	0x40013000

08001144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <MX_SPI2_Init+0xa8>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001150:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800115e:	2203      	movs	r2, #3
 8001160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI2_Init+0xa4>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_SPI2_Init+0xa4>)
 80011d4:	f009 fbfe 	bl	800a9d4 <HAL_SPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80011de:	f000 fbc3 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24000c74 	.word	0x24000c74
 80011ec:	40003800 	.word	0x40003800

080011f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <MX_SPI3_Init+0xa4>)
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <MX_SPI3_Init+0xa8>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_SPI3_Init+0xa4>)
 80011fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001200:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_SPI3_Init+0xa4>)
 800120a:	2203      	movs	r2, #3
 800120c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_SPI3_Init+0xa4>)
 800121c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001220:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_SPI3_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI3_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI3_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI3_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI3_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI3_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_SPI3_Init+0xa4>)
 8001280:	f009 fba8 	bl	800a9d4 <HAL_SPI_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800128a:	f000 fb6d 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000cfc 	.word	0x24000cfc
 8001298:	40003c00 	.word	0x40003c00

0800129c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_TIM2_Init+0xac>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_TIM2_Init+0xac>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_TIM2_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM2_Init+0xac>)
 80012d6:	225a      	movs	r2, #90	; 0x5a
 80012d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_TIM2_Init+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM2_Init+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <MX_TIM2_Init+0xac>)
 80012e8:	f009 fcb3 	bl	800ac52 <HAL_TIM_PWM_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012f2:	f000 fb39 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_TIM2_Init+0xac>)
 8001306:	f00a fe13 	bl	800bf30 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001310:	f000 fb2a 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	2208      	movs	r2, #8
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_TIM2_Init+0xac>)
 800132c:	f00a f83c 	bl	800b3a8 <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001336:	f000 fb17 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <MX_TIM2_Init+0xac>)
 800133c:	f000 fef4 	bl	8002128 <HAL_TIM_MspPostInit>

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	24000d84 	.word	0x24000d84

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM3_Init+0xc0>)
 8001372:	4a27      	ldr	r2, [pc, #156]	; (8001410 <MX_TIM3_Init+0xc4>)
 8001374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_TIM3_Init+0xc0>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <MX_TIM3_Init+0xc0>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_TIM3_Init+0xc0>)
 8001384:	225a      	movs	r2, #90	; 0x5a
 8001386:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_TIM3_Init+0xc0>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_TIM3_Init+0xc0>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001394:	481d      	ldr	r0, [pc, #116]	; (800140c <MX_TIM3_Init+0xc0>)
 8001396:	f009 fc5c 	bl	800ac52 <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 fae2 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <MX_TIM3_Init+0xc0>)
 80013b4:	f00a fdbc 	bl	800bf30 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013be:	f000 fad3 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c2:	2360      	movs	r3, #96	; 0x60
 80013c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_TIM3_Init+0xc0>)
 80013da:	f009 ffe5 	bl	800b3a8 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013e4:	f000 fac0 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	2204      	movs	r2, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM3_Init+0xc0>)
 80013f0:	f009 ffda 	bl	800b3a8 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013fa:	f000 fab5 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM3_Init+0xc0>)
 8001400:	f000 fe92 	bl	8002128 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	24000dd0 	.word	0x24000dd0
 8001410:	40000400 	.word	0x40000400

08001414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_TIM4_Init+0xac>)
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <MX_TIM4_Init+0xb0>)
 800143c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_TIM4_Init+0xac>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <MX_TIM4_Init+0xac>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM4_Init+0xac>)
 800144c:	225a      	movs	r2, #90	; 0x5a
 800144e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM4_Init+0xac>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM4_Init+0xac>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800145c:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_TIM4_Init+0xac>)
 800145e:	f009 fbf8 	bl	800ac52 <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 fa7e 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_TIM4_Init+0xac>)
 800147c:	f00a fd58 	bl	800bf30 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001486:	f000 fa6f 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2208      	movs	r2, #8
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM4_Init+0xac>)
 80014a2:	f009 ff81 	bl	800b3a8 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014ac:	f000 fa5c 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM4_Init+0xac>)
 80014b2:	f000 fe39 	bl	8002128 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	24000e1c 	.word	0x24000e1c
 80014c4:	40000800 	.word	0x40000800

080014c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_TIM5_Init+0xac>)
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <MX_TIM5_Init+0xb0>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_TIM5_Init+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_TIM5_Init+0xac>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_TIM5_Init+0xac>)
 8001500:	225a      	movs	r2, #90	; 0x5a
 8001502:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_TIM5_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_TIM5_Init+0xac>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <MX_TIM5_Init+0xac>)
 8001512:	f009 fb9e 	bl	800ac52 <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800151c:	f000 fa24 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_TIM5_Init+0xac>)
 8001530:	f00a fcfe 	bl	800bf30 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800153a:	f000 fa15 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	220c      	movs	r2, #12
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM5_Init+0xac>)
 8001556:	f009 ff27 	bl	800b3a8 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001560:	f000 fa02 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM5_Init+0xac>)
 8001566:	f000 fddf 	bl	8002128 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000e68 	.word	0x24000e68
 8001578:	40000c00 	.word	0x40000c00

0800157c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_UART4_Init+0x90>)
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_UART4_Init+0x94>)
 8001584:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_UART4_Init+0x90>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_UART4_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_UART4_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_UART4_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_UART4_Init+0x90>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_UART4_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_UART4_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_UART4_Init+0x90>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_UART4_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_UART4_Init+0x90>)
 80015c6:	f00a fd6d 	bl	800c0a4 <HAL_UART_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015d0:	f000 f9ca 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d4:	2100      	movs	r1, #0
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_UART4_Init+0x90>)
 80015d8:	f00b fe73 	bl	800d2c2 <HAL_UARTEx_SetTxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015e2:	f000 f9c1 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <MX_UART4_Init+0x90>)
 80015ea:	f00b fea8 	bl	800d33e <HAL_UARTEx_SetRxFifoThreshold>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 f9b8 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_UART4_Init+0x90>)
 80015fa:	f00b fe29 	bl	800d250 <HAL_UARTEx_DisableFifoMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 f9b0 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2400110c 	.word	0x2400110c
 8001610:	40004c00 	.word	0x40004c00

08001614 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 800161a:	4a23      	ldr	r2, [pc, #140]	; (80016a8 <MX_USART6_UART_Init+0x94>)
 800161c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 800165e:	f00a fd21 	bl	800c0a4 <HAL_UART_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001668:	f000 f97e 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166c:	2100      	movs	r1, #0
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001670:	f00b fe27 	bl	800d2c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800167a:	f000 f975 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001682:	f00b fe5c 	bl	800d33e <HAL_UARTEx_SetRxFifoThreshold>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800168c:	f000 f96c 	bl	8001968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_USART6_UART_Init+0x90>)
 8001692:	f00b fddd 	bl	800d250 <HAL_UARTEx_DisableFifoMode>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800169c:	f000 f964 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	240011a0 	.word	0x240011a0
 80016a8:	40011400 	.word	0x40011400

080016ac <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <MX_USB_OTG_HS_PCD_Init+0x60>)
 80016b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016b8:	2209      	movs	r2, #9
 80016ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016be:	2202      	movs	r2, #2
 80016c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016ca:	2202      	movs	r2, #2
 80016cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80016f4:	f005 fc25 	bl	8006f42 <HAL_PCD_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 80016fe:	f000 f933 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	24001234 	.word	0x24001234
 800170c:	40040000 	.word	0x40040000

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_DMA_Init+0x7c>)
 8001718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <MX_DMA_Init+0x7c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_DMA_Init+0x7c>)
 8001728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	200b      	movs	r0, #11
 800173a:	f002 fcaa 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800173e:	200b      	movs	r0, #11
 8001740:	f002 fcc1 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	200c      	movs	r0, #12
 800174a:	f002 fca2 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800174e:	200c      	movs	r0, #12
 8001750:	f002 fcb9 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	200d      	movs	r0, #13
 800175a:	f002 fc9a 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800175e:	200d      	movs	r0, #13
 8001760:	f002 fcb1 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	200e      	movs	r0, #14
 800176a:	f002 fc92 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800176e:	200e      	movs	r0, #14
 8001770:	f002 fca9 	bl	80040c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	200f      	movs	r0, #15
 800177a:	f002 fc8a 	bl	8004092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800177e:	200f      	movs	r0, #15
 8001780:	f002 fca1 	bl	80040c6 <HAL_NVIC_EnableIRQ>

}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	4a69      	ldr	r2, [pc, #420]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c4:	4b63      	ldr	r3, [pc, #396]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	4a53      	ldr	r2, [pc, #332]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001824:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182e:	4b49      	ldr	r3, [pc, #292]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	4a44      	ldr	r2, [pc, #272]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	4a3c      	ldr	r2, [pc, #240]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187e:	4a35      	ldr	r2, [pc, #212]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2104      	movs	r1, #4
 800189a:	482f      	ldr	r0, [pc, #188]	; (8001958 <MX_GPIO_Init+0x1c8>)
 800189c:	f005 fa10 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2106      	movs	r1, #6
 80018a4:	482d      	ldr	r0, [pc, #180]	; (800195c <MX_GPIO_Init+0x1cc>)
 80018a6:	f005 fa0b 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2104      	movs	r1, #4
 80018ae:	482c      	ldr	r0, [pc, #176]	; (8001960 <MX_GPIO_Init+0x1d0>)
 80018b0:	f005 fa06 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <MX_GPIO_Init+0x1c8>)
 80018cc:	f005 f850 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018d0:	2306      	movs	r3, #6
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	481d      	ldr	r0, [pc, #116]	; (800195c <MX_GPIO_Init+0x1cc>)
 80018e8:	f005 f842 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ec:	2304      	movs	r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4817      	ldr	r0, [pc, #92]	; (8001960 <MX_GPIO_Init+0x1d0>)
 8001904:	f005 f834 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800191a:	2300      	movs	r3, #0
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_GPIO_Init+0x1cc>)
 8001926:	f005 f823 	bl	8006970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800193a:	230b      	movs	r3, #11
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_GPIO_Init+0x1d4>)
 8001946:	f005 f813 	bl	8006970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	3738      	adds	r7, #56	; 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	58024400 	.word	0x58024400
 8001958:	58021000 	.word	0x58021000
 800195c:	58020000 	.word	0x58020000
 8001960:	58021800 	.word	0x58021800
 8001964:	58020c00 	.word	0x58020c00

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x30>)
 800197c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001980:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x30>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x30>)
 800198c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58024400 	.word	0x58024400

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a30      	ldr	r2, [pc, #192]	; (8001a88 <HAL_ADC_MspInit+0xe0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d12a      	bne.n	8001a20 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019d2:	f043 0320 	orr.w	r3, r3, #32
 80019d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <HAL_ADC_MspInit+0xe8>)
 8001a1a:	f004 ffa9 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a1e:	e02e      	b.n	8001a7e <HAL_ADC_MspInit+0xd6>
  else if(hadc->Instance==ADC3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_ADC_MspInit+0xec>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d129      	bne.n	8001a7e <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_ADC_MspInit+0xe4>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a66:	2328      	movs	r3, #40	; 0x28
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <HAL_ADC_MspInit+0xf0>)
 8001a7a:	f004 ff79 	bl	8006970 <HAL_GPIO_Init>
}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020800 	.word	0x58020800
 8001a94:	58026000 	.word	0x58026000
 8001a98:	58021400 	.word	0x58021400

08001a9c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0b8      	sub	sp, #224	; 0xe0
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	22b8      	movs	r2, #184	; 0xb8
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00c f80d 	bl	800dadc <memset>
  if(hfdcan->Instance==FDCAN3)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_FDCAN_MspInit+0xc4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d144      	bne.n	8001b56 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001acc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 fb91 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001aec:	f7ff ff3c 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001af2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001b02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_FDCAN_MspInit+0xc8>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2c:	23c0      	movs	r3, #192	; 0xc0
 8001b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001b44:	2302      	movs	r3, #2
 8001b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_FDCAN_MspInit+0xcc>)
 8001b52:	f004 ff0d 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	37e0      	adds	r7, #224	; 0xe0
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	4000d400 	.word	0x4000d400
 8001b64:	58024400 	.word	0x58024400
 8001b68:	58021400 	.word	0x58021400

08001b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0b8      	sub	sp, #224	; 0xe0
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	22b8      	movs	r2, #184	; 0xb8
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00b ffa5 	bl	800dadc <memset>
  if(hi2c->Instance==I2C2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <HAL_I2C_MspInit+0xc4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d145      	bne.n	8001c28 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b9c:	f04f 0208 	mov.w	r2, #8
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f006 fb28 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bbe:	f7ff fed3 	bl	8001968 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be6:	2312      	movs	r3, #18
 8001be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c02:	4619      	mov	r1, r3
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <HAL_I2C_MspInit+0xcc>)
 8001c06:	f004 feb3 	bl	8006970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c10:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_I2C_MspInit+0xc8>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	37e0      	adds	r7, #224	; 0xe0
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005800 	.word	0x40005800
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58021400 	.word	0x58021400

08001c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_SPI_MspInit+0x15c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12e      	bne.n	8001cbc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c82:	4a46      	ldr	r2, [pc, #280]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c9a:	23e0      	movs	r3, #224	; 0xe0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	483a      	ldr	r0, [pc, #232]	; (8001da0 <HAL_SPI_MspInit+0x164>)
 8001cb6:	f004 fe5b 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cba:	e068      	b.n	8001d8e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a38      	ldr	r2, [pc, #224]	; (8001da4 <HAL_SPI_MspInit+0x168>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12f      	bne.n	8001d26 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ccc:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d14:	2305      	movs	r3, #5
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4822      	ldr	r0, [pc, #136]	; (8001da8 <HAL_SPI_MspInit+0x16c>)
 8001d20:	f004 fe26 	bl	8006970 <HAL_GPIO_Init>
}
 8001d24:	e033      	b.n	8001d8e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a20      	ldr	r2, [pc, #128]	; (8001dac <HAL_SPI_MspInit+0x170>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d12e      	bne.n	8001d8e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d36:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_SPI_MspInit+0x160>)
 8001d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d7e:	2306      	movs	r3, #6
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <HAL_SPI_MspInit+0x174>)
 8001d8a:	f004 fdf1 	bl	8006970 <HAL_GPIO_Init>
}
 8001d8e:	bf00      	nop
 8001d90:	3738      	adds	r7, #56	; 0x38
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58020000 	.word	0x58020000
 8001da4:	40003800 	.word	0x40003800
 8001da8:	58020400 	.word	0x58020400
 8001dac:	40003c00 	.word	0x40003c00
 8001db0:	58020800 	.word	0x58020800

08001db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08e      	sub	sp, #56	; 0x38
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d15d      	bne.n	8001e92 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd6:	4b9f      	ldr	r3, [pc, #636]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ddc:	4a9d      	ldr	r2, [pc, #628]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001de6:	4b9b      	ldr	r3, [pc, #620]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	623b      	str	r3, [r7, #32]
 8001df2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b97      	ldr	r3, [pc, #604]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e04:	4b93      	ldr	r3, [pc, #588]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e12:	2301      	movs	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e22:	2301      	movs	r3, #1
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	488a      	ldr	r0, [pc, #552]	; (8002058 <HAL_TIM_PWM_MspInit+0x2a4>)
 8001e2e:	f004 fd9f 	bl	8006970 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001e32:	4b8a      	ldr	r3, [pc, #552]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e34:	4a8a      	ldr	r2, [pc, #552]	; (8002060 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001e36:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001e38:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e3a:	2214      	movs	r2, #20
 8001e3c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3e:	4b87      	ldr	r3, [pc, #540]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e40:	2240      	movs	r2, #64	; 0x40
 8001e42:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e44:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e4a:	4b84      	ldr	r3, [pc, #528]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e50:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e58:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e5a:	4b80      	ldr	r3, [pc, #512]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e60:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001e62:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6e:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001e74:	4879      	ldr	r0, [pc, #484]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e76:	f002 f941 	bl	80040fc <HAL_DMA_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8001e80:	f7ff fd72 	bl	8001968 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a75      	ldr	r2, [pc, #468]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e8a:	4a74      	ldr	r2, [pc, #464]	; (800205c <HAL_TIM_PWM_MspInit+0x2a8>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e90:	e13d      	b.n	800210e <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM3)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a73      	ldr	r2, [pc, #460]	; (8002064 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d16d      	bne.n	8001f78 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea2:	4a6c      	ldr	r2, [pc, #432]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8001eba:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_TIM_PWM_MspInit+0x2b8>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ec2:	2218      	movs	r2, #24
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ee4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001ef0:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001efc:	485a      	ldr	r0, [pc, #360]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001efe:	f002 f8fd 	bl	80040fc <HAL_DMA_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8001f08:	f7ff fd2e 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
 8001f12:	4a55      	ldr	r2, [pc, #340]	; (8002068 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8001f18:	4b55      	ldr	r3, [pc, #340]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f1a:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_TIM_PWM_MspInit+0x2c0>)
 8001f1c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001f1e:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f20:	2217      	movs	r2, #23
 8001f22:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f24:	4b52      	ldr	r3, [pc, #328]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2a:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f36:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f3e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f46:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001f48:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001f5a:	4845      	ldr	r0, [pc, #276]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f5c:	f002 f8ce 	bl	80040fc <HAL_DMA_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8001f66:	f7ff fcff 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f70:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f76:	e0ca      	b.n	800210e <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM4)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 8082 	bne.w	8002088 <HAL_TIM_PWM_MspInit+0x2d4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f84:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4827      	ldr	r0, [pc, #156]	; (800207c <HAL_TIM_PWM_MspInit+0x2c8>)
 8001fde:	f004 fcc7 	bl	8006970 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_TIM_PWM_MspInit+0x2d0>)
 8001fe6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001fea:	221f      	movs	r2, #31
 8001fec:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002000:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002008:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 800200c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002010:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002024:	4816      	ldr	r0, [pc, #88]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002026:	f002 f869 	bl	80040fc <HAL_DMA_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_TIM_PWM_MspInit+0x280>
      Error_Handler();
 8002030:	f7ff fc9a 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_TIM_PWM_MspInit+0x2cc>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	201e      	movs	r0, #30
 8002046:	f002 f824 	bl	8004092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800204a:	201e      	movs	r0, #30
 800204c:	f002 f83b 	bl	80040c6 <HAL_NVIC_EnableIRQ>
}
 8002050:	e05d      	b.n	800210e <HAL_TIM_PWM_MspInit+0x35a>
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58020000 	.word	0x58020000
 800205c:	24000eb4 	.word	0x24000eb4
 8002060:	40020028 	.word	0x40020028
 8002064:	40000400 	.word	0x40000400
 8002068:	24000f2c 	.word	0x24000f2c
 800206c:	40020058 	.word	0x40020058
 8002070:	24000fa4 	.word	0x24000fa4
 8002074:	40020070 	.word	0x40020070
 8002078:	40000800 	.word	0x40000800
 800207c:	58020c00 	.word	0x58020c00
 8002080:	2400101c 	.word	0x2400101c
 8002084:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_TIM_PWM_MspInit+0x364>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d13d      	bne.n	800210e <HAL_TIM_PWM_MspInit+0x35a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_TIM_PWM_MspInit+0x368>)
 8002094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002098:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_TIM_PWM_MspInit+0x368>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_TIM_PWM_MspInit+0x368>)
 80020a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_TIM_PWM_MspInit+0x370>)
 80020b4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020b8:	223a      	movs	r2, #58	; 0x3a
 80020ba:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ce:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020de:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 80020f4:	f002 f802 	bl	80040fc <HAL_DMA_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_TIM_PWM_MspInit+0x34e>
      Error_Handler();
 80020fe:	f7ff fc33 	bl	8001968 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
 8002108:	4a05      	ldr	r2, [pc, #20]	; (8002120 <HAL_TIM_PWM_MspInit+0x36c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800210e:	bf00      	nop
 8002110:	3738      	adds	r7, #56	; 0x38
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40000c00 	.word	0x40000c00
 800211c:	58024400 	.word	0x58024400
 8002120:	24001094 	.word	0x24001094
 8002124:	40020040 	.word	0x40020040

08002128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d120      	bne.n	800218c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002150:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002172:	2302      	movs	r3, #2
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800217a:	2301      	movs	r3, #1
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	483c      	ldr	r0, [pc, #240]	; (8002278 <HAL_TIM_MspPostInit+0x150>)
 8002186:	f004 fbf3 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800218a:	e06e      	b.n	800226a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_TIM_MspPostInit+0x154>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d11f      	bne.n	80021d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b37      	ldr	r3, [pc, #220]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021b4:	2330      	movs	r3, #48	; 0x30
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021bc:	2302      	movs	r3, #2
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c4:	2302      	movs	r3, #2
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4619      	mov	r1, r3
 80021ce:	482a      	ldr	r0, [pc, #168]	; (8002278 <HAL_TIM_MspPostInit+0x150>)
 80021d0:	f004 fbce 	bl	8006970 <HAL_GPIO_Init>
}
 80021d4:	e049      	b.n	800226a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_TIM_MspPostInit+0x158>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d120      	bne.n	8002222 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002208:	2302      	movs	r3, #2
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002210:	2302      	movs	r3, #2
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	481a      	ldr	r0, [pc, #104]	; (8002284 <HAL_TIM_MspPostInit+0x15c>)
 800221c:	f004 fba8 	bl	8006970 <HAL_GPIO_Init>
}
 8002220:	e023      	b.n	800226a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_TIM_MspPostInit+0x160>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11e      	bne.n	800226a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_MspPostInit+0x14c>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800224a:	2308      	movs	r3, #8
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002252:	2302      	movs	r3, #2
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800225a:	2302      	movs	r3, #2
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <HAL_TIM_MspPostInit+0x164>)
 8002266:	f004 fb83 	bl	8006970 <HAL_GPIO_Init>
}
 800226a:	bf00      	nop
 800226c:	3730      	adds	r7, #48	; 0x30
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58024400 	.word	0x58024400
 8002278:	58020400 	.word	0x58020400
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	58020c00 	.word	0x58020c00
 8002288:	40000c00 	.word	0x40000c00
 800228c:	58020000 	.word	0x58020000

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ba      	sub	sp, #232	; 0xe8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	22b8      	movs	r2, #184	; 0xb8
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fc13 	bl	800dadc <memset>
  if(huart->Instance==UART4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a4d      	ldr	r2, [pc, #308]	; (80023f0 <HAL_UART_MspInit+0x160>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d147      	bne.n	8002350 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022c0:	f04f 0202 	mov.w	r2, #2
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d2:	f107 0318 	add.w	r3, r7, #24
 80022d6:	4618      	mov	r0, r3
 80022d8:	f005 ff96 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022e2:	f7ff fb41 	bl	8001968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80022e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ec:	4a41      	ldr	r2, [pc, #260]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80022ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80022f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_UART_MspInit+0x164>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_UART_MspInit+0x164>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002314:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_UART_MspInit+0x164>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800233c:	2308      	movs	r3, #8
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002346:	4619      	mov	r1, r3
 8002348:	482b      	ldr	r0, [pc, #172]	; (80023f8 <HAL_UART_MspInit+0x168>)
 800234a:	f004 fb11 	bl	8006970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800234e:	e04a      	b.n	80023e6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_UART_MspInit+0x16c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d145      	bne.n	80023e6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800235a:	f04f 0201 	mov.w	r2, #1
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	4618      	mov	r0, r3
 8002372:	f005 ff49 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800237c:	f7ff faf4 	bl	8001968 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_UART_MspInit+0x164>)
 8002382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002386:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x164>)
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x164>)
 8002392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x164>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80023d4:	2307      	movs	r3, #7
 80023d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023de:	4619      	mov	r1, r3
 80023e0:	4807      	ldr	r0, [pc, #28]	; (8002400 <HAL_UART_MspInit+0x170>)
 80023e2:	f004 fac5 	bl	8006970 <HAL_GPIO_Init>
}
 80023e6:	bf00      	nop
 80023e8:	37e8      	adds	r7, #232	; 0xe8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40004c00 	.word	0x40004c00
 80023f4:	58024400 	.word	0x58024400
 80023f8:	58020400 	.word	0x58020400
 80023fc:	40011400 	.word	0x40011400
 8002400:	58020800 	.word	0x58020800

08002404 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0b2      	sub	sp, #200	; 0xc8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	22b8      	movs	r2, #184	; 0xb8
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f00b fb61 	bl	800dadc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_PCD_MspInit+0x74>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d124      	bne.n	800246e <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002424:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002430:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fee3 	bl	8008208 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8002448:	f7ff fa8e 	bl	8001968 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800244c:	f004 fefc 	bl	8007248 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_PCD_MspInit+0x78>)
 8002452:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_PCD_MspInit+0x78>)
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_PCD_MspInit+0x78>)
 8002462:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	37c8      	adds	r7, #200	; 0xc8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40040000 	.word	0x40040000
 800247c:	58024400 	.word	0x58024400

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f000 f952 	bl	8002774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <DMA1_Stream0_IRQHandler+0x10>)
 80024da:	f002 fbd3 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2400101c 	.word	0x2400101c

080024e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DMA1_Stream1_IRQHandler+0x10>)
 80024ee:	f002 fbc9 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24000eb4 	.word	0x24000eb4

080024fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA1_Stream2_IRQHandler+0x10>)
 8002502:	f002 fbbf 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	24001094 	.word	0x24001094

08002510 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA1_Stream3_IRQHandler+0x10>)
 8002516:	f002 fbb5 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	24000f2c 	.word	0x24000f2c

08002524 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA1_Stream4_IRQHandler+0x10>)
 800252a:	f002 fbab 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	24000fa4 	.word	0x24000fa4

08002538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM4_IRQHandler+0x10>)
 800253e:	f008 fe13 	bl	800b168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000e1c 	.word	0x24000e1c

0800254c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <SystemInit+0xd0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <SystemInit+0xd0>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <SystemInit+0xd4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	2b06      	cmp	r3, #6
 800256a:	d807      	bhi.n	800257c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <SystemInit+0xd4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 030f 	bic.w	r3, r3, #15
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <SystemInit+0xd4>)
 8002576:	f043 0307 	orr.w	r3, r3, #7
 800257a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <SystemInit+0xd8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a28      	ldr	r2, [pc, #160]	; (8002624 <SystemInit+0xd8>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <SystemInit+0xd8>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <SystemInit+0xd8>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4924      	ldr	r1, [pc, #144]	; (8002624 <SystemInit+0xd8>)
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <SystemInit+0xdc>)
 8002596:	4013      	ands	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <SystemInit+0xd4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <SystemInit+0xd4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 030f 	bic.w	r3, r3, #15
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <SystemInit+0xd4>)
 80025b0:	f043 0307 	orr.w	r3, r3, #7
 80025b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <SystemInit+0xd8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <SystemInit+0xd8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <SystemInit+0xd8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <SystemInit+0xd8>)
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <SystemInit+0xe0>)
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <SystemInit+0xd8>)
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <SystemInit+0xe4>)
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <SystemInit+0xd8>)
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <SystemInit+0xe8>)
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <SystemInit+0xd8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <SystemInit+0xd8>)
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <SystemInit+0xe8>)
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <SystemInit+0xd8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <SystemInit+0xd8>)
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <SystemInit+0xe8>)
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <SystemInit+0xd8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <SystemInit+0xd8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a09      	ldr	r2, [pc, #36]	; (8002624 <SystemInit+0xd8>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <SystemInit+0xd8>)
 8002606:	2200      	movs	r2, #0
 8002608:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <SystemInit+0xec>)
 800260c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002610:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00
 8002620:	52002000 	.word	0x52002000
 8002624:	58024400 	.word	0x58024400
 8002628:	eaf6ed7f 	.word	0xeaf6ed7f
 800262c:	02020200 	.word	0x02020200
 8002630:	01ff0000 	.word	0x01ff0000
 8002634:	01010280 	.word	0x01010280
 8002638:	52004000 	.word	0x52004000

0800263c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002640:	f7ff ff84 	bl	800254c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	; (800267c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266a:	f00b fa05 	bl	800da78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266e:	f7fe f9f7 	bl	8000a60 <main>
  bx  lr
 8002672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002674:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002678:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800267c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002680:	0800ded0 	.word	0x0800ded0
  ldr r2, =_sbss
 8002684:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8002688:	24001748 	.word	0x24001748

0800268c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC3_IRQHandler>
	...

08002690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002696:	2003      	movs	r0, #3
 8002698:	f001 fcf0 	bl	800407c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800269c:	f005 fbde 	bl	8007e5c <HAL_RCC_GetSysClockFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_Init+0x68>)
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	4913      	ldr	r1, [pc, #76]	; (80026fc <HAL_Init+0x6c>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <HAL_Init+0x68>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_Init+0x6c>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_Init+0x70>)
 80026d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_Init+0x74>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026da:	200f      	movs	r0, #15
 80026dc:	f000 f814 	bl	8002708 <HAL_InitTick>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e002      	b.n	80026f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ea:	f7ff f943 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	58024400 	.word	0x58024400
 80026fc:	0800de6c 	.word	0x0800de6c
 8002700:	24000004 	.word	0x24000004
 8002704:	24000000 	.word	0x24000000

08002708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_InitTick+0x60>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e021      	b.n	8002760 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_InitTick+0x64>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_InitTick+0x60>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272a:	fbb3 f3f1 	udiv	r3, r3, r1
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fcd5 	bl	80040e2 <HAL_SYSTICK_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00e      	b.n	8002760 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d80a      	bhi.n	800275e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002748:	2200      	movs	r2, #0
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f001 fc9f 	bl	8004092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_InitTick+0x68>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2400000c 	.word	0x2400000c
 800276c:	24000000 	.word	0x24000000
 8002770:	24000008 	.word	0x24000008

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2400000c 	.word	0x2400000c
 8002798:	24001744 	.word	0x24001744

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	24001744 	.word	0x24001744

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2400000c 	.word	0x2400000c

080027fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <LL_ADC_SetOffset+0x60>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10b      	bne.n	80028a0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800289e:	e00b      	b.n	80028b8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58026000 	.word	0x58026000

080028c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	611a      	str	r2, [r3, #16]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3360      	adds	r3, #96	; 0x60
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	431a      	orrs	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	601a      	str	r2, [r3, #0]
  }
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	58026000 	.word	0x58026000

0800296c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <LL_ADC_SetOffsetSaturation+0x40>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10e      	bne.n	800299e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	58026000 	.word	0x58026000

080029b0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <LL_ADC_SetOffsetSign+0x40>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10e      	bne.n	80029e2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	58026000 	.word	0x58026000

080029f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3360      	adds	r3, #96	; 0x60
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <LL_ADC_SetOffsetState+0x50>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d108      	bne.n	8002a28 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002a26:	e007      	b.n	8002a38 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	58026000 	.word	0x58026000

08002a48 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3330      	adds	r3, #48	; 0x30
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	211f      	movs	r1, #31
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	f003 011f 	and.w	r1, r3, #31
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3314      	adds	r3, #20
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	0e5b      	lsrs	r3, r3, #25
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0d1b      	lsrs	r3, r3, #20
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2107      	movs	r1, #7
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d115      	bne.n	8002b38 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0318 	and.w	r3, r3, #24
 8002b22:	4914      	ldr	r1, [pc, #80]	; (8002b74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b24:	40d9      	lsrs	r1, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	400b      	ands	r3, r1
 8002b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002b36:	e014      	b.n	8002b62 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0318 	and.w	r3, r3, #24
 8002b4e:	4909      	ldr	r1, [pc, #36]	; (8002b74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b50:	40d9      	lsrs	r1, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	400b      	ands	r3, r1
 8002b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	58026000 	.word	0x58026000
 8002b74:	000fffff 	.word	0x000fffff

08002b78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6093      	str	r3, [r2, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	5fffffc0 	.word	0x5fffffc0

08002b9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	6fffffc0 	.word	0x6fffffc0

08002bec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c00:	d101      	bne.n	8002c06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_IsEnabled+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_IsEnabled+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1ee      	b.n	8003080 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7fe fe79 	bl	80019a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff67 	bl	8002b9c <LL_ADC_IsDeepPowerDownEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff4d 	bl	8002b78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff82 	bl	8002bec <LL_ADC_IsInternalRegulatorEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d114      	bne.n	8002d18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff66 	bl	8002bc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_ADC_Init+0x2ac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	4a8e      	ldr	r2, [pc, #568]	; (8002f38 <HAL_ADC_Init+0x2b0>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0a:	e002      	b.n	8002d12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff65 	bl	8002bec <LL_ADC_IsInternalRegulatorEnabled>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	f043 0210 	orr.w	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff76 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002d4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 8188 	bne.w	800306e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 8184 	bne.w	800306e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff4a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d136      	bne.n	8002df4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <HAL_ADC_Init+0x2b4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_Init+0x112>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_ADC_Init+0x2b8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10e      	bne.n	8002db8 <HAL_ADC_Init+0x130>
 8002d9a:	4868      	ldr	r0, [pc, #416]	; (8002f3c <HAL_ADC_Init+0x2b4>)
 8002d9c:	f7ff ff3a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002da0:	4604      	mov	r4, r0
 8002da2:	4867      	ldr	r0, [pc, #412]	; (8002f40 <HAL_ADC_Init+0x2b8>)
 8002da4:	f7ff ff36 	bl	8002c14 <LL_ADC_IsEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4323      	orrs	r3, r4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e008      	b.n	8002dca <HAL_ADC_Init+0x142>
 8002db8:	4862      	ldr	r0, [pc, #392]	; (8002f44 <HAL_ADC_Init+0x2bc>)
 8002dba:	f7ff ff2b 	bl	8002c14 <LL_ADC_IsEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <HAL_ADC_Init+0x2b4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_ADC_Init+0x15a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_ADC_Init+0x2b8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_ADC_Init+0x15e>
 8002de2:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <HAL_ADC_Init+0x2c0>)
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_Init+0x160>
 8002de6:	4a59      	ldr	r2, [pc, #356]	; (8002f4c <HAL_ADC_Init+0x2c4>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7ff fd04 	bl	80027fc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_ADC_Init+0x2bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d129      	bne.n	8002e52 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7e5b      	ldrb	r3, [r3, #25]
 8002e02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e08:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e0e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d013      	beq.n	8002e40 <HAL_ADC_Init+0x1b8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d00d      	beq.n	8002e3c <HAL_ADC_Init+0x1b4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b1c      	cmp	r3, #28
 8002e26:	d007      	beq.n	8002e38 <HAL_ADC_Init+0x1b0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_Init+0x1ac>
 8002e30:	2318      	movs	r3, #24
 8002e32:	e006      	b.n	8002e42 <HAL_ADC_Init+0x1ba>
 8002e34:	2300      	movs	r3, #0
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_Init+0x1ba>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	e002      	b.n	8002e42 <HAL_ADC_Init+0x1ba>
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	e000      	b.n	8002e42 <HAL_ADC_Init+0x1ba>
 8002e40:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002e42:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	e00e      	b.n	8002e70 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7e5b      	ldrb	r3, [r3, #25]
 8002e56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	045b      	lsls	r3, r3, #17
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <HAL_ADC_Init+0x2bc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d115      	bne.n	8002eda <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_ADC_Init+0x2c8>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	e009      	b.n	8002eee <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_ADC_Init+0x2cc>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	69b9      	ldr	r1, [r7, #24]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fea1 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff feae 	bl	8002c60 <LL_ADC_INJ_IsConversionOngoing>
 8002f04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 808e 	bne.w	800302a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 808a 	bne.w	800302a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_ADC_Init+0x2bc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d11b      	bne.n	8002f58 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7e1b      	ldrb	r3, [r3, #24]
 8002f24:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f2c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e018      	b.n	8002f66 <HAL_ADC_Init+0x2de>
 8002f34:	24000000 	.word	0x24000000
 8002f38:	053e2d63 	.word	0x053e2d63
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40022100 	.word	0x40022100
 8002f44:	58026000 	.word	0x58026000
 8002f48:	40022300 	.word	0x40022300
 8002f4c:	58026300 	.word	0x58026300
 8002f50:	fff04007 	.word	0xfff04007
 8002f54:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7e1b      	ldrb	r3, [r3, #24]
 8002f5c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_ADC_Init+0x400>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	430b      	orrs	r3, r1
 8002f78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d137      	bne.n	8002ff4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3f      	ldr	r2, [pc, #252]	; (800308c <HAL_ADC_Init+0x404>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d116      	bne.n	8002fc2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_ADC_Init+0x408>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	611a      	str	r2, [r3, #16]
 8002fc0:	e020      	b.n	8003004 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_ADC_Init+0x40c>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	0411      	lsls	r1, r2, #16
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fde:	4311      	orrs	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
 8002ff2:	e007      	b.n	8003004 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_ADC_Init+0x404>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d002      	beq.n	800302a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fd63 	bl	8003af0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10c      	bne.n	800304c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f023 010f 	bic.w	r1, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
 800304a:	e007      	b.n	800305c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 020f 	bic.w	r2, r2, #15
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	f023 0303 	bic.w	r3, r3, #3
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	661a      	str	r2, [r3, #96]	; 0x60
 800306c:	e007      	b.n	800307e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800307e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3724      	adds	r7, #36	; 0x24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	ffffbffc 	.word	0xffffbffc
 800308c:	58026000 	.word	0x58026000
 8003090:	fc00f81f 	.word	0xfc00f81f
 8003094:	fc00f81e 	.word	0xfc00f81e

08003098 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b0b9      	sub	sp, #228	; 0xe4
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4aa9      	ldr	r2, [pc, #676]	; (8003360 <HAL_ADC_ConfigChannel+0x2c8>)
 80030ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x34>
 80030c6:	2302      	movs	r3, #2
 80030c8:	f000 bcfa 	b.w	8003ac0 <HAL_ADC_ConfigChannel+0xa28>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fdae 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 84de 	bne.w	8003aa2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a9e      	ldr	r2, [pc, #632]	; (8003364 <HAL_ADC_ConfigChannel+0x2cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d033      	beq.n	8003158 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d108      	bne.n	800310e <HAL_ADC_ConfigChannel+0x76>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	e01d      	b.n	800314a <HAL_ADC_ConfigChannel+0xb2>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800312a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e004      	b.n	8003140 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2201      	movs	r2, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	69d1      	ldr	r1, [r2, #28]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff fc6f 	bl	8002a48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fd63 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8003174:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fd6f 	bl	8002c60 <LL_ADC_INJ_IsConversionOngoing>
 8003182:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8270 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003190:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 826b 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7ff fc7a 	bl	8002aa0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6c      	ldr	r2, [pc, #432]	; (8003364 <HAL_ADC_ConfigChannel+0x2cc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10d      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031d0:	e032      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031d2:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_ADC_ConfigChannel+0x2d0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031de:	d10b      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x160>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	e01d      	b.n	8003234 <HAL_ADC_ConfigChannel+0x19c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_ADC_ConfigChannel+0x186>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	e00a      	b.n	8003234 <HAL_ADC_ConfigChannel+0x19c>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d048      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6919      	ldr	r1, [r3, #16]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003250:	f7ff fb08 	bl	8002864 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_ADC_ConfigChannel+0x2cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d119      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff fba0 	bl	80029b0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x1f0>
 8003282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x1f2>
 8003288:	2300      	movs	r3, #0
 800328a:	461a      	mov	r2, r3
 800328c:	f7ff fb6e 	bl	800296c <LL_ADC_SetOffsetSaturation>
 8003290:	e1ee      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6919      	ldr	r1, [r3, #16]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d102      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x212>
 80032a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032a8:	e000      	b.n	80032ac <HAL_ADC_ConfigChannel+0x214>
 80032aa:	2300      	movs	r3, #0
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fb3b 	bl	8002928 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6919      	ldr	r1, [r3, #16]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	7e1b      	ldrb	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x230>
 80032c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032c6:	e000      	b.n	80032ca <HAL_ADC_ConfigChannel+0x232>
 80032c8:	2300      	movs	r3, #0
 80032ca:	461a      	mov	r2, r3
 80032cc:	f7ff fb12 	bl	80028f4 <LL_ADC_SetDataRightShift>
 80032d0:	e1ce      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a23      	ldr	r2, [pc, #140]	; (8003364 <HAL_ADC_ConfigChannel+0x2cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	f040 8181 	bne.w	80035e0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff faef 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x272>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fae4 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	e01e      	b.n	8003348 <HAL_ADC_ConfigChannel+0x2b0>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fad9 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800332c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e004      	b.n	8003346 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800333c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_ADC_ConfigChannel+0x2d4>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	e01e      	b.n	800339e <HAL_ADC_ConfigChannel+0x306>
 8003360:	47ff0000 	.word	0x47ff0000
 8003364:	58026000 	.word	0x58026000
 8003368:	5c001000 	.word	0x5c001000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e004      	b.n	800339e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fb22 	bl	80029f4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa86 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x344>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fa7b 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e01e      	b.n	800341a <HAL_ADC_ConfigChannel+0x382>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fa70 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80033fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e004      	b.n	8003418 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x39a>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e018      	b.n	8003464 <HAL_ADC_ConfigChannel+0x3cc>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800344a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800344e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800345a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fabf 	bl	80029f4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fa23 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x40a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fa18 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	e01e      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x448>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fa0d 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80034c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e004      	b.n	80034de <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x460>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	e014      	b.n	8003522 <HAL_ADC_ConfigChannel+0x48a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800350c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003518:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fa60 	bl	80029f4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2103      	movs	r1, #3
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f9c4 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x4c8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2103      	movs	r1, #3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f9b9 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	0e9b      	lsrs	r3, r3, #26
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	e017      	b.n	8003590 <HAL_ADC_ConfigChannel+0x4f8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f9ae 	bl	80028c8 <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800357c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x510>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	e011      	b.n	80035cc <HAL_ADC_ConfigChannel+0x534>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80035b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80035ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80035c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d14f      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2103      	movs	r1, #3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fa0b 	bl	80029f4 <LL_ADC_SetOffsetState>
 80035de:	e047      	b.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	069b      	lsls	r3, r3, #26
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003602:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	069b      	lsls	r3, r3, #26
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003626:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	069b      	lsls	r3, r3, #26
 8003638:	429a      	cmp	r2, r3
 800363a:	d107      	bne.n	800364c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800364a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	429a      	cmp	r2, r3
 800365e:	d107      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800366e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff facd 	bl	8002c14 <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 8219 	bne.w	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f7ff fa32 	bl	8002af8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4aa1      	ldr	r2, [pc, #644]	; (8003920 <HAL_ADC_ConfigChannel+0x888>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f040 812e 	bne.w	80038fc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x630>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b09      	cmp	r3, #9
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e019      	b.n	80036fc <HAL_ADC_ConfigChannel+0x664>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e003      	b.n	80036ec <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80036e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	bf94      	ite	ls
 80036f6:	2301      	movls	r3, #1
 80036f8:	2300      	movhi	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d079      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADC_ConfigChannel+0x684>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	069b      	lsls	r3, r3, #26
 8003716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800371a:	e015      	b.n	8003748 <HAL_ADC_ConfigChannel+0x6b0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	069b      	lsls	r3, r3, #26
 8003744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x6d0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	e017      	b.n	8003798 <HAL_ADC_ConfigChannel+0x700>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800377a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_ADC_ConfigChannel+0x726>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	051b      	lsls	r3, r3, #20
 80037bc:	e018      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x758>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80037d6:	2320      	movs	r3, #32
 80037d8:	e003      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f0:	430b      	orrs	r3, r1
 80037f2:	e07e      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x778>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	3301      	adds	r3, #1
 8003808:	069b      	lsls	r3, r3, #26
 800380a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800380e:	e015      	b.n	800383c <HAL_ADC_ConfigChannel+0x7a4>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	069b      	lsls	r3, r3, #26
 8003838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_ADC_ConfigChannel+0x7c4>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	e017      	b.n	800388c <HAL_ADC_ConfigChannel+0x7f4>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	61bb      	str	r3, [r7, #24]
  return result;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003874:	2320      	movs	r3, #32
 8003876:	e003      	b.n	8003880 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x820>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	3301      	adds	r3, #1
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	3b1e      	subs	r3, #30
 80038b0:	051b      	lsls	r3, r3, #20
 80038b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038b6:	e01b      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x858>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	60fb      	str	r3, [r7, #12]
  return result;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80038d0:	2320      	movs	r3, #32
 80038d2:	e003      	b.n	80038dc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f003 021f 	and.w	r2, r3, #31
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	3b1e      	subs	r3, #30
 80038ea:	051b      	lsls	r3, r3, #20
 80038ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f0:	430b      	orrs	r3, r1
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	6892      	ldr	r2, [r2, #8]
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7ff f8d2 	bl	8002aa0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f280 80d7 	bge.w	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a06      	ldr	r2, [pc, #24]	; (8003924 <HAL_ADC_ConfigChannel+0x88c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_ADC_ConfigChannel+0x882>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_ADC_ConfigChannel+0x890>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10a      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x898>
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_ADC_ConfigChannel+0x894>)
 800391c:	e009      	b.n	8003932 <HAL_ADC_ConfigChannel+0x89a>
 800391e:	bf00      	nop
 8003920:	47ff0000 	.word	0x47ff0000
 8003924:	40022000 	.word	0x40022000
 8003928:	40022100 	.word	0x40022100
 800392c:	40022300 	.word	0x40022300
 8003930:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa30>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe ff88 	bl	8002848 <LL_ADC_GetCommonPathInternalCh>
 8003938:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a62      	ldr	r2, [pc, #392]	; (8003acc <HAL_ADC_ConfigChannel+0xa34>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_ADC_ConfigChannel+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa38>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10e      	bne.n	800396e <HAL_ADC_ConfigChannel+0x8d6>
 8003950:	485e      	ldr	r0, [pc, #376]	; (8003acc <HAL_ADC_ConfigChannel+0xa34>)
 8003952:	f7ff f95f 	bl	8002c14 <LL_ADC_IsEnabled>
 8003956:	4604      	mov	r4, r0
 8003958:	485d      	ldr	r0, [pc, #372]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa38>)
 800395a:	f7ff f95b 	bl	8002c14 <LL_ADC_IsEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	4323      	orrs	r3, r4
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e008      	b.n	8003980 <HAL_ADC_ConfigChannel+0x8e8>
 800396e:	4859      	ldr	r0, [pc, #356]	; (8003ad4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003970:	f7ff f950 	bl	8002c14 <LL_ADC_IsEnabled>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8084 	beq.w	8003a8e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <HAL_ADC_ConfigChannel+0xa40>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d132      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x95e>
 8003990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d12c      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a4c      	ldr	r2, [pc, #304]	; (8003ad4 <HAL_ADC_ConfigChannel+0xa3c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 8086 	bne.w	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a47      	ldr	r2, [pc, #284]	; (8003acc <HAL_ADC_ConfigChannel+0xa34>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_ADC_ConfigChannel+0x924>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa38>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x928>
 80039bc:	4a47      	ldr	r2, [pc, #284]	; (8003adc <HAL_ADC_ConfigChannel+0xa44>)
 80039be:	e000      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x92a>
 80039c0:	4a41      	ldr	r2, [pc, #260]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa30>)
 80039c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7fe ff28 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039d2:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_ADC_ConfigChannel+0xa48>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	4a42      	ldr	r2, [pc, #264]	; (8003ae4 <HAL_ADC_ConfigChannel+0xa4c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	3301      	adds	r3, #1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039e6:	e002      	b.n	80039ee <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f9      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039f4:	e05e      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3b      	ldr	r2, [pc, #236]	; (8003ae8 <HAL_ADC_ConfigChannel+0xa50>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d120      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x9aa>
 8003a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d14e      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	; (8003acc <HAL_ADC_ConfigChannel+0xa34>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x992>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa38>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x996>
 8003a2a:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <HAL_ADC_ConfigChannel+0xa44>)
 8003a2c:	e000      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x998>
 8003a2e:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa30>)
 8003a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fef1 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a40:	e038      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a29      	ldr	r2, [pc, #164]	; (8003aec <HAL_ADC_ConfigChannel+0xa54>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d133      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
 8003a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d12d      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d128      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a19      	ldr	r2, [pc, #100]	; (8003acc <HAL_ADC_ConfigChannel+0xa34>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x9de>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_ADC_ConfigChannel+0xa38>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x9e2>
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_ADC_ConfigChannel+0xa44>)
 8003a78:	e000      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x9e4>
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_ADC_ConfigChannel+0xa30>)
 8003a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7fe fecb 	bl	8002822 <LL_ADC_SetCommonPathInternalCh>
 8003a8c:	e012      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003aa0:	e008      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003abc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	37e4      	adds	r7, #228	; 0xe4
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	58026300 	.word	0x58026300
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40022100 	.word	0x40022100
 8003ad4:	58026000 	.word	0x58026000
 8003ad8:	c7520000 	.word	0xc7520000
 8003adc:	40022300 	.word	0x40022300
 8003ae0:	24000000 	.word	0x24000000
 8003ae4:	053e2d63 	.word	0x053e2d63
 8003ae8:	c3210000 	.word	0xc3210000
 8003aec:	cb840000 	.word	0xcb840000

08003af0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <ADC_ConfigureBoostMode+0x1c0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <ADC_ConfigureBoostMode+0x1c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6b      	ldr	r2, [pc, #428]	; (8003cb4 <ADC_ConfigureBoostMode+0x1c4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d109      	bne.n	8003b20 <ADC_ConfigureBoostMode+0x30>
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <ADC_ConfigureBoostMode+0x1c8>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e008      	b.n	8003b32 <ADC_ConfigureBoostMode+0x42>
 8003b20:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <ADC_ConfigureBoostMode+0x1cc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01c      	beq.n	8003b70 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b36:	f004 fb0b 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 8003b3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b44:	d010      	beq.n	8003b68 <ADC_ConfigureBoostMode+0x78>
 8003b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b4a:	d873      	bhi.n	8003c34 <ADC_ConfigureBoostMode+0x144>
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d002      	beq.n	8003b58 <ADC_ConfigureBoostMode+0x68>
 8003b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b56:	d16d      	bne.n	8003c34 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	60fb      	str	r3, [r7, #12]
        break;
 8003b66:	e068      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	60fb      	str	r3, [r7, #12]
        break;
 8003b6e:	e064      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	f005 fce6 	bl	8009548 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b7c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b86:	d051      	beq.n	8003c2c <ADC_ConfigureBoostMode+0x13c>
 8003b88:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b8c:	d854      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003b8e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b92:	d047      	beq.n	8003c24 <ADC_ConfigureBoostMode+0x134>
 8003b94:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b98:	d84e      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003b9a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b9e:	d03d      	beq.n	8003c1c <ADC_ConfigureBoostMode+0x12c>
 8003ba0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ba4:	d848      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003baa:	d033      	beq.n	8003c14 <ADC_ConfigureBoostMode+0x124>
 8003bac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bb0:	d842      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003bb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bb6:	d029      	beq.n	8003c0c <ADC_ConfigureBoostMode+0x11c>
 8003bb8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003bbc:	d83c      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003bbe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bc2:	d01a      	beq.n	8003bfa <ADC_ConfigureBoostMode+0x10a>
 8003bc4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bc8:	d836      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003bca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bce:	d014      	beq.n	8003bfa <ADC_ConfigureBoostMode+0x10a>
 8003bd0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bd4:	d830      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d00e      	beq.n	8003bfa <ADC_ConfigureBoostMode+0x10a>
 8003bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be0:	d82a      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003be2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003be6:	d008      	beq.n	8003bfa <ADC_ConfigureBoostMode+0x10a>
 8003be8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003bec:	d824      	bhi.n	8003c38 <ADC_ConfigureBoostMode+0x148>
 8003bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf2:	d002      	beq.n	8003bfa <ADC_ConfigureBoostMode+0x10a>
 8003bf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bf8:	d11e      	bne.n	8003c38 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	0c9b      	lsrs	r3, r3, #18
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	60fb      	str	r3, [r7, #12]
        break;
 8003c0a:	e016      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
        break;
 8003c12:	e012      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	60fb      	str	r3, [r7, #12]
        break;
 8003c1a:	e00e      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	60fb      	str	r3, [r7, #12]
        break;
 8003c22:	e00a      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	09db      	lsrs	r3, r3, #7
 8003c28:	60fb      	str	r3, [r7, #12]
        break;
 8003c2a:	e006      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	60fb      	str	r3, [r7, #12]
        break;
 8003c32:	e002      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003c38:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <ADC_ConfigureBoostMode+0x1d0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d808      	bhi.n	8003c5a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c58:	e025      	b.n	8003ca6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <ADC_ConfigureBoostMode+0x1d4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d80a      	bhi.n	8003c78 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	609a      	str	r2, [r3, #8]
}
 8003c76:	e016      	b.n	8003ca6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <ADC_ConfigureBoostMode+0x1d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d80a      	bhi.n	8003c96 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	e007      	b.n	8003ca6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40022000 	.word	0x40022000
 8003cb4:	40022100 	.word	0x40022100
 8003cb8:	40022300 	.word	0x40022300
 8003cbc:	58026300 	.word	0x58026300
 8003cc0:	005f5e10 	.word	0x005f5e10
 8003cc4:	00bebc20 	.word	0x00bebc20
 8003cc8:	017d7840 	.word	0x017d7840

08003ccc <LL_ADC_IsEnabled>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <LL_ADC_IsEnabled+0x18>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <LL_ADC_IsEnabled+0x1a>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b0a3      	sub	sp, #140	; 0x8c
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e0c1      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d102      	bne.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e001      	b.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0a0      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ffb9 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 8003d80:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ffb2 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 8081 	bne.w	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d17c      	bne.n	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a48      	ldr	r2, [pc, #288]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a46      	ldr	r2, [pc, #280]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003db2:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003db4:	e000      	b.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003db6:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003db8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d039      	beq.n	8003e36 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a39      	ldr	r2, [pc, #228]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10e      	bne.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003de8:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dea:	f7ff ff6f 	bl	8003ccc <LL_ADC_IsEnabled>
 8003dee:	4604      	mov	r4, r0
 8003df0:	4835      	ldr	r0, [pc, #212]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003df2:	f7ff ff6b 	bl	8003ccc <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4323      	orrs	r3, r4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e008      	b.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003e06:	4833      	ldr	r0, [pc, #204]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003e08:	f7ff ff60 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d047      	beq.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	6811      	ldr	r1, [r2, #0]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e32:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e34:	e03a      	b.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d10e      	bne.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003e56:	481b      	ldr	r0, [pc, #108]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e58:	f7ff ff38 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	481a      	ldr	r0, [pc, #104]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e60:	f7ff ff34 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e008      	b.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003e74:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003e76:	f7ff ff29 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003e94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e96:	e009      	b.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003eaa:	e000      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003eb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	378c      	adds	r7, #140	; 0x8c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	40022100 	.word	0x40022100
 8003ecc:	40022300 	.word	0x40022300
 8003ed0:	58026300 	.word	0x58026300
 8003ed4:	58026000 	.word	0x58026000
 8003ed8:	fffff0e0 	.word	0xfffff0e0

08003edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <__NVIC_SetPriorityGrouping+0x40>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	60d3      	str	r3, [r2, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00
 8003f20:	05fa0000 	.word	0x05fa0000

08003f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <__NVIC_GetPriorityGrouping+0x18>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0307 	and.w	r3, r3, #7
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	db0b      	blt.n	8003f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f003 021f 	and.w	r2, r3, #31
 8003f58:	4907      	ldr	r1, [pc, #28]	; (8003f78 <__NVIC_EnableIRQ+0x38>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2001      	movs	r0, #1
 8003f62:	fa00 f202 	lsl.w	r2, r0, r2
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	e000e100 	.word	0xe000e100

08003f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db0a      	blt.n	8003fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	490c      	ldr	r1, [pc, #48]	; (8003fc8 <__NVIC_SetPriority+0x4c>)
 8003f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f9a:	0112      	lsls	r2, r2, #4
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fa4:	e00a      	b.n	8003fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4908      	ldr	r1, [pc, #32]	; (8003fcc <__NVIC_SetPriority+0x50>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	3b04      	subs	r3, #4
 8003fb4:	0112      	lsls	r2, r2, #4
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	440b      	add	r3, r1
 8003fba:	761a      	strb	r2, [r3, #24]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f1c3 0307 	rsb	r3, r3, #7
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	bf28      	it	cs
 8003fee:	2304      	movcs	r3, #4
 8003ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d902      	bls.n	8004000 <NVIC_EncodePriority+0x30>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3b03      	subs	r3, #3
 8003ffe:	e000      	b.n	8004002 <NVIC_EncodePriority+0x32>
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43da      	mvns	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	401a      	ands	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004018:	f04f 31ff 	mov.w	r1, #4294967295
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	43d9      	mvns	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004028:	4313      	orrs	r3, r2
         );
}
 800402a:	4618      	mov	r0, r3
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3b01      	subs	r3, #1
 8004044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004048:	d301      	bcc.n	800404e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800404a:	2301      	movs	r3, #1
 800404c:	e00f      	b.n	800406e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <SysTick_Config+0x40>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3b01      	subs	r3, #1
 8004054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004056:	210f      	movs	r1, #15
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	f7ff ff8e 	bl	8003f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <SysTick_Config+0x40>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <SysTick_Config+0x40>)
 8004068:	2207      	movs	r2, #7
 800406a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	e000e010 	.word	0xe000e010

0800407c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff29 	bl	8003edc <__NVIC_SetPriorityGrouping>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b086      	sub	sp, #24
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040a0:	f7ff ff40 	bl	8003f24 <__NVIC_GetPriorityGrouping>
 80040a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff ff90 	bl	8003fd0 <NVIC_EncodePriority>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff5f 	bl	8003f7c <__NVIC_SetPriority>
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff33 	bl	8003f40 <__NVIC_EnableIRQ>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ffa4 	bl	8004038 <SysTick_Config>
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7fe fb4a 	bl	800279c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e314      	b.n	800473e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_DMA_Init+0x1b8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04a      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <HAL_DMA_Init+0x1bc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d045      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a63      	ldr	r2, [pc, #396]	; (80042bc <HAL_DMA_Init+0x1c0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d040      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a62      	ldr	r2, [pc, #392]	; (80042c0 <HAL_DMA_Init+0x1c4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d03b      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a60      	ldr	r2, [pc, #384]	; (80042c4 <HAL_DMA_Init+0x1c8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d036      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5f      	ldr	r2, [pc, #380]	; (80042c8 <HAL_DMA_Init+0x1cc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d031      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <HAL_DMA_Init+0x1d0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02c      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_DMA_Init+0x1d4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d027      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a5a      	ldr	r2, [pc, #360]	; (80042d4 <HAL_DMA_Init+0x1d8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_DMA_Init+0x1dc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a57      	ldr	r2, [pc, #348]	; (80042dc <HAL_DMA_Init+0x1e0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_DMA_Init+0x1e4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a54      	ldr	r2, [pc, #336]	; (80042e4 <HAL_DMA_Init+0x1e8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a53      	ldr	r2, [pc, #332]	; (80042e8 <HAL_DMA_Init+0x1ec>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a51      	ldr	r2, [pc, #324]	; (80042ec <HAL_DMA_Init+0x1f0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_Init+0xb8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a50      	ldr	r2, [pc, #320]	; (80042f0 <HAL_DMA_Init+0x1f4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_Init+0xbc>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_DMA_Init+0xbe>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 813c 	beq.w	8004438 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a37      	ldr	r2, [pc, #220]	; (80042b4 <HAL_DMA_Init+0x1b8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <HAL_DMA_Init+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a36      	ldr	r2, [pc, #216]	; (80042b8 <HAL_DMA_Init+0x1bc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <HAL_DMA_Init+0x174>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a34      	ldr	r2, [pc, #208]	; (80042bc <HAL_DMA_Init+0x1c0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <HAL_DMA_Init+0x174>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a33      	ldr	r2, [pc, #204]	; (80042c0 <HAL_DMA_Init+0x1c4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMA_Init+0x174>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <HAL_DMA_Init+0x1c8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <HAL_DMA_Init+0x1cc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <HAL_DMA_Init+0x174>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2e      	ldr	r2, [pc, #184]	; (80042cc <HAL_DMA_Init+0x1d0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <HAL_DMA_Init+0x1d4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <HAL_DMA_Init+0x1d8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_DMA_Init+0x174>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_DMA_Init+0x1dc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a28      	ldr	r2, [pc, #160]	; (80042dc <HAL_DMA_Init+0x1e0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_DMA_Init+0x174>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a27      	ldr	r2, [pc, #156]	; (80042e0 <HAL_DMA_Init+0x1e4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <HAL_DMA_Init+0x1e8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <HAL_DMA_Init+0x1ec>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_DMA_Init+0x174>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a22      	ldr	r2, [pc, #136]	; (80042ec <HAL_DMA_Init+0x1f0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_Init+0x174>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <HAL_DMA_Init+0x1f4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <HAL_DMA_Init+0x186>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e007      	b.n	8004292 <HAL_DMA_Init+0x196>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004292:	e02f      	b.n	80042f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004294:	f7fe fa82 	bl	800279c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d928      	bls.n	80042f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e244      	b.n	800473e <HAL_DMA_Init+0x642>
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1c8      	bne.n	8004294 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4b84      	ldr	r3, [pc, #528]	; (8004520 <HAL_DMA_Init+0x424>)
 800430e:	4013      	ands	r3, r2
 8004310:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800431a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004326:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004332:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b04      	cmp	r3, #4
 8004346:	d107      	bne.n	8004358 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	4313      	orrs	r3, r2
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b28      	cmp	r3, #40	; 0x28
 800435e:	d903      	bls.n	8004368 <HAL_DMA_Init+0x26c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b2e      	cmp	r3, #46	; 0x2e
 8004366:	d91f      	bls.n	80043a8 <HAL_DMA_Init+0x2ac>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b3e      	cmp	r3, #62	; 0x3e
 800436e:	d903      	bls.n	8004378 <HAL_DMA_Init+0x27c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b42      	cmp	r3, #66	; 0x42
 8004376:	d917      	bls.n	80043a8 <HAL_DMA_Init+0x2ac>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b46      	cmp	r3, #70	; 0x46
 800437e:	d903      	bls.n	8004388 <HAL_DMA_Init+0x28c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b48      	cmp	r3, #72	; 0x48
 8004386:	d90f      	bls.n	80043a8 <HAL_DMA_Init+0x2ac>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b4e      	cmp	r3, #78	; 0x4e
 800438e:	d903      	bls.n	8004398 <HAL_DMA_Init+0x29c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b52      	cmp	r3, #82	; 0x52
 8004396:	d907      	bls.n	80043a8 <HAL_DMA_Init+0x2ac>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b73      	cmp	r3, #115	; 0x73
 800439e:	d905      	bls.n	80043ac <HAL_DMA_Init+0x2b0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b77      	cmp	r3, #119	; 0x77
 80043a6:	d801      	bhi.n	80043ac <HAL_DMA_Init+0x2b0>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_DMA_Init+0x2b2>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d117      	bne.n	8004414 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 fdcc 	bl	8005f94 <DMA_CheckFifoParam>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e194      	b.n	800473e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 fd07 	bl	8005e30 <DMA_CalcBaseAndBitshift>
 8004422:	4603      	mov	r3, r0
 8004424:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	223f      	movs	r2, #63	; 0x3f
 8004430:	409a      	lsls	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	e0ca      	b.n	80045ce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_DMA_Init+0x428>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a38      	ldr	r2, [pc, #224]	; (8004528 <HAL_DMA_Init+0x42c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a36      	ldr	r2, [pc, #216]	; (800452c <HAL_DMA_Init+0x430>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a35      	ldr	r2, [pc, #212]	; (8004530 <HAL_DMA_Init+0x434>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a33      	ldr	r2, [pc, #204]	; (8004534 <HAL_DMA_Init+0x438>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a32      	ldr	r2, [pc, #200]	; (8004538 <HAL_DMA_Init+0x43c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_DMA_Init+0x440>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_Init+0x38c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <HAL_DMA_Init+0x444>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_DMA_Init+0x390>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_DMA_Init+0x392>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8094 	beq.w	80045bc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_DMA_Init+0x428>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d021      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_DMA_Init+0x42c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d01c      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_DMA_Init+0x430>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d017      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_DMA_Init+0x434>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d012      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_DMA_Init+0x438>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00d      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_DMA_Init+0x43c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d008      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_DMA_Init+0x440>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <HAL_DMA_Init+0x3e6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_DMA_Init+0x444>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_DMA_Init+0x448>)
 8004500:	4013      	ands	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d01d      	beq.n	8004548 <HAL_DMA_Init+0x44c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d102      	bne.n	800451a <HAL_DMA_Init+0x41e>
 8004514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004518:	e017      	b.n	800454a <HAL_DMA_Init+0x44e>
 800451a:	2300      	movs	r3, #0
 800451c:	e015      	b.n	800454a <HAL_DMA_Init+0x44e>
 800451e:	bf00      	nop
 8004520:	fe10803f 	.word	0xfe10803f
 8004524:	58025408 	.word	0x58025408
 8004528:	5802541c 	.word	0x5802541c
 800452c:	58025430 	.word	0x58025430
 8004530:	58025444 	.word	0x58025444
 8004534:	58025458 	.word	0x58025458
 8004538:	5802546c 	.word	0x5802546c
 800453c:	58025480 	.word	0x58025480
 8004540:	58025494 	.word	0x58025494
 8004544:	fffe000f 	.word	0xfffe000f
 8004548:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68d2      	ldr	r2, [r2, #12]
 800454e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004578:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_DMA_Init+0x64c>)
 8004590:	4413      	add	r3, r2
 8004592:	4a6e      	ldr	r2, [pc, #440]	; (800474c <HAL_DMA_Init+0x650>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	009a      	lsls	r2, r3, #2
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 fc45 	bl	8005e30 <DMA_CalcBaseAndBitshift>
 80045a6:	4603      	mov	r3, r0
 80045a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	e008      	b.n	80045ce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0b7      	b.n	800473e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a5f      	ldr	r2, [pc, #380]	; (8004750 <HAL_DMA_Init+0x654>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d072      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5d      	ldr	r2, [pc, #372]	; (8004754 <HAL_DMA_Init+0x658>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d06d      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5c      	ldr	r2, [pc, #368]	; (8004758 <HAL_DMA_Init+0x65c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d068      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5a      	ldr	r2, [pc, #360]	; (800475c <HAL_DMA_Init+0x660>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d063      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a59      	ldr	r2, [pc, #356]	; (8004760 <HAL_DMA_Init+0x664>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d05e      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a57      	ldr	r2, [pc, #348]	; (8004764 <HAL_DMA_Init+0x668>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d059      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a56      	ldr	r2, [pc, #344]	; (8004768 <HAL_DMA_Init+0x66c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d054      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a54      	ldr	r2, [pc, #336]	; (800476c <HAL_DMA_Init+0x670>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d04f      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a53      	ldr	r2, [pc, #332]	; (8004770 <HAL_DMA_Init+0x674>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04a      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a51      	ldr	r2, [pc, #324]	; (8004774 <HAL_DMA_Init+0x678>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d045      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a50      	ldr	r2, [pc, #320]	; (8004778 <HAL_DMA_Init+0x67c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d040      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_DMA_Init+0x680>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d03b      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4d      	ldr	r2, [pc, #308]	; (8004780 <HAL_DMA_Init+0x684>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d036      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a4b      	ldr	r2, [pc, #300]	; (8004784 <HAL_DMA_Init+0x688>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d031      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_DMA_Init+0x68c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d02c      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a48      	ldr	r2, [pc, #288]	; (800478c <HAL_DMA_Init+0x690>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d027      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a47      	ldr	r2, [pc, #284]	; (8004790 <HAL_DMA_Init+0x694>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a45      	ldr	r2, [pc, #276]	; (8004794 <HAL_DMA_Init+0x698>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01d      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a44      	ldr	r2, [pc, #272]	; (8004798 <HAL_DMA_Init+0x69c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_DMA_Init+0x6a0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <HAL_DMA_Init+0x6a4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_DMA_Init+0x6a8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_DMA_Init+0x6ac>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_DMA_Init+0x5c2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3c      	ldr	r2, [pc, #240]	; (80047ac <HAL_DMA_Init+0x6b0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_DMA_Init+0x5c6>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_DMA_Init+0x5c8>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d032      	beq.n	800472e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f001 fcdf 	bl	800608c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d102      	bne.n	80046dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_DMA_Init+0x620>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d80c      	bhi.n	800471c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fd5c 	bl	80061c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	e008      	b.n	800472e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	a7fdabf8 	.word	0xa7fdabf8
 800474c:	cccccccd 	.word	0xcccccccd
 8004750:	40020010 	.word	0x40020010
 8004754:	40020028 	.word	0x40020028
 8004758:	40020040 	.word	0x40020040
 800475c:	40020058 	.word	0x40020058
 8004760:	40020070 	.word	0x40020070
 8004764:	40020088 	.word	0x40020088
 8004768:	400200a0 	.word	0x400200a0
 800476c:	400200b8 	.word	0x400200b8
 8004770:	40020410 	.word	0x40020410
 8004774:	40020428 	.word	0x40020428
 8004778:	40020440 	.word	0x40020440
 800477c:	40020458 	.word	0x40020458
 8004780:	40020470 	.word	0x40020470
 8004784:	40020488 	.word	0x40020488
 8004788:	400204a0 	.word	0x400204a0
 800478c:	400204b8 	.word	0x400204b8
 8004790:	58025408 	.word	0x58025408
 8004794:	5802541c 	.word	0x5802541c
 8004798:	58025430 	.word	0x58025430
 800479c:	58025444 	.word	0x58025444
 80047a0:	58025458 	.word	0x58025458
 80047a4:	5802546c 	.word	0x5802546c
 80047a8:	58025480 	.word	0x58025480
 80047ac:	58025494 	.word	0x58025494

080047b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e226      	b.n	8004c1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_DMA_Start_IT+0x2a>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e21f      	b.n	8004c1a <HAL_DMA_Start_IT+0x46a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 820a 	bne.w	8004c04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a68      	ldr	r2, [pc, #416]	; (80049a4 <HAL_DMA_Start_IT+0x1f4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d04a      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a66      	ldr	r2, [pc, #408]	; (80049a8 <HAL_DMA_Start_IT+0x1f8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d045      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_DMA_Start_IT+0x1fc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d040      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a63      	ldr	r2, [pc, #396]	; (80049b0 <HAL_DMA_Start_IT+0x200>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d03b      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a62      	ldr	r2, [pc, #392]	; (80049b4 <HAL_DMA_Start_IT+0x204>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d036      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a60      	ldr	r2, [pc, #384]	; (80049b8 <HAL_DMA_Start_IT+0x208>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5f      	ldr	r2, [pc, #380]	; (80049bc <HAL_DMA_Start_IT+0x20c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d02c      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5d      	ldr	r2, [pc, #372]	; (80049c0 <HAL_DMA_Start_IT+0x210>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d027      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5c      	ldr	r2, [pc, #368]	; (80049c4 <HAL_DMA_Start_IT+0x214>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5a      	ldr	r2, [pc, #360]	; (80049c8 <HAL_DMA_Start_IT+0x218>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01d      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_DMA_Start_IT+0x21c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a57      	ldr	r2, [pc, #348]	; (80049d0 <HAL_DMA_Start_IT+0x220>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <HAL_DMA_Start_IT+0x224>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a54      	ldr	r2, [pc, #336]	; (80049d8 <HAL_DMA_Start_IT+0x228>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a53      	ldr	r2, [pc, #332]	; (80049dc <HAL_DMA_Start_IT+0x22c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_DMA_Start_IT+0xee>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a51      	ldr	r2, [pc, #324]	; (80049e0 <HAL_DMA_Start_IT+0x230>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <HAL_DMA_Start_IT+0x100>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e007      	b.n	80048c0 <HAL_DMA_Start_IT+0x110>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f001 f906 	bl	8005ad8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <HAL_DMA_Start_IT+0x1f4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04a      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <HAL_DMA_Start_IT+0x1f8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d045      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a31      	ldr	r2, [pc, #196]	; (80049ac <HAL_DMA_Start_IT+0x1fc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d040      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <HAL_DMA_Start_IT+0x200>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03b      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <HAL_DMA_Start_IT+0x204>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d036      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <HAL_DMA_Start_IT+0x208>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2b      	ldr	r2, [pc, #172]	; (80049bc <HAL_DMA_Start_IT+0x20c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_DMA_Start_IT+0x210>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d027      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <HAL_DMA_Start_IT+0x214>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <HAL_DMA_Start_IT+0x218>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01d      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a25      	ldr	r2, [pc, #148]	; (80049cc <HAL_DMA_Start_IT+0x21c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <HAL_DMA_Start_IT+0x220>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a22      	ldr	r2, [pc, #136]	; (80049d4 <HAL_DMA_Start_IT+0x224>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <HAL_DMA_Start_IT+0x228>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_DMA_Start_IT+0x22c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_DMA_Start_IT+0x1bc>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <HAL_DMA_Start_IT+0x230>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_DMA_Start_IT+0x1c0>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_DMA_Start_IT+0x1c2>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d036      	beq.n	80049e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 021e 	bic.w	r2, r3, #30
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0216 	orr.w	r2, r2, #22
 8004988:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d03e      	beq.n	8004a10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e035      	b.n	8004a10 <HAL_DMA_Start_IT+0x260>
 80049a4:	40020010 	.word	0x40020010
 80049a8:	40020028 	.word	0x40020028
 80049ac:	40020040 	.word	0x40020040
 80049b0:	40020058 	.word	0x40020058
 80049b4:	40020070 	.word	0x40020070
 80049b8:	40020088 	.word	0x40020088
 80049bc:	400200a0 	.word	0x400200a0
 80049c0:	400200b8 	.word	0x400200b8
 80049c4:	40020410 	.word	0x40020410
 80049c8:	40020428 	.word	0x40020428
 80049cc:	40020440 	.word	0x40020440
 80049d0:	40020458 	.word	0x40020458
 80049d4:	40020470 	.word	0x40020470
 80049d8:	40020488 	.word	0x40020488
 80049dc:	400204a0 	.word	0x400204a0
 80049e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 020e 	bic.w	r2, r3, #14
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 020a 	orr.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0204 	orr.w	r2, r2, #4
 8004a0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a83      	ldr	r2, [pc, #524]	; (8004c24 <HAL_DMA_Start_IT+0x474>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d072      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a82      	ldr	r2, [pc, #520]	; (8004c28 <HAL_DMA_Start_IT+0x478>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d06d      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a80      	ldr	r2, [pc, #512]	; (8004c2c <HAL_DMA_Start_IT+0x47c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d068      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7f      	ldr	r2, [pc, #508]	; (8004c30 <HAL_DMA_Start_IT+0x480>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d063      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7d      	ldr	r2, [pc, #500]	; (8004c34 <HAL_DMA_Start_IT+0x484>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d05e      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7c      	ldr	r2, [pc, #496]	; (8004c38 <HAL_DMA_Start_IT+0x488>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d059      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a7a      	ldr	r2, [pc, #488]	; (8004c3c <HAL_DMA_Start_IT+0x48c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d054      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a79      	ldr	r2, [pc, #484]	; (8004c40 <HAL_DMA_Start_IT+0x490>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04f      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a77      	ldr	r2, [pc, #476]	; (8004c44 <HAL_DMA_Start_IT+0x494>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d04a      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a76      	ldr	r2, [pc, #472]	; (8004c48 <HAL_DMA_Start_IT+0x498>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d045      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a74      	ldr	r2, [pc, #464]	; (8004c4c <HAL_DMA_Start_IT+0x49c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d040      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a73      	ldr	r2, [pc, #460]	; (8004c50 <HAL_DMA_Start_IT+0x4a0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d03b      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a71      	ldr	r2, [pc, #452]	; (8004c54 <HAL_DMA_Start_IT+0x4a4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d036      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a70      	ldr	r2, [pc, #448]	; (8004c58 <HAL_DMA_Start_IT+0x4a8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d031      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6e      	ldr	r2, [pc, #440]	; (8004c5c <HAL_DMA_Start_IT+0x4ac>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d02c      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6d      	ldr	r2, [pc, #436]	; (8004c60 <HAL_DMA_Start_IT+0x4b0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d027      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a6b      	ldr	r2, [pc, #428]	; (8004c64 <HAL_DMA_Start_IT+0x4b4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d022      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a6a      	ldr	r2, [pc, #424]	; (8004c68 <HAL_DMA_Start_IT+0x4b8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d01d      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a68      	ldr	r2, [pc, #416]	; (8004c6c <HAL_DMA_Start_IT+0x4bc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d018      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a67      	ldr	r2, [pc, #412]	; (8004c70 <HAL_DMA_Start_IT+0x4c0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d013      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a65      	ldr	r2, [pc, #404]	; (8004c74 <HAL_DMA_Start_IT+0x4c4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a64      	ldr	r2, [pc, #400]	; (8004c78 <HAL_DMA_Start_IT+0x4c8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a62      	ldr	r2, [pc, #392]	; (8004c7c <HAL_DMA_Start_IT+0x4cc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_DMA_Start_IT+0x350>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a61      	ldr	r2, [pc, #388]	; (8004c80 <HAL_DMA_Start_IT+0x4d0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_DMA_Start_IT+0x354>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_Start_IT+0x356>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01a      	beq.n	8004b40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a37      	ldr	r2, [pc, #220]	; (8004c24 <HAL_DMA_Start_IT+0x474>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d04a      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a36      	ldr	r2, [pc, #216]	; (8004c28 <HAL_DMA_Start_IT+0x478>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d045      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a34      	ldr	r2, [pc, #208]	; (8004c2c <HAL_DMA_Start_IT+0x47c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d040      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a33      	ldr	r2, [pc, #204]	; (8004c30 <HAL_DMA_Start_IT+0x480>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d03b      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a31      	ldr	r2, [pc, #196]	; (8004c34 <HAL_DMA_Start_IT+0x484>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d036      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a30      	ldr	r2, [pc, #192]	; (8004c38 <HAL_DMA_Start_IT+0x488>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d031      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <HAL_DMA_Start_IT+0x48c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d02c      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2d      	ldr	r2, [pc, #180]	; (8004c40 <HAL_DMA_Start_IT+0x490>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d027      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2b      	ldr	r2, [pc, #172]	; (8004c44 <HAL_DMA_Start_IT+0x494>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d022      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	; (8004c48 <HAL_DMA_Start_IT+0x498>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d01d      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a28      	ldr	r2, [pc, #160]	; (8004c4c <HAL_DMA_Start_IT+0x49c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d018      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <HAL_DMA_Start_IT+0x4a0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <HAL_DMA_Start_IT+0x4a4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <HAL_DMA_Start_IT+0x4a8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <HAL_DMA_Start_IT+0x4ac>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_DMA_Start_IT+0x430>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <HAL_DMA_Start_IT+0x4b0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d108      	bne.n	8004bf2 <HAL_DMA_Start_IT+0x442>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e012      	b.n	8004c18 <HAL_DMA_Start_IT+0x468>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e009      	b.n	8004c18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40020010 	.word	0x40020010
 8004c28:	40020028 	.word	0x40020028
 8004c2c:	40020040 	.word	0x40020040
 8004c30:	40020058 	.word	0x40020058
 8004c34:	40020070 	.word	0x40020070
 8004c38:	40020088 	.word	0x40020088
 8004c3c:	400200a0 	.word	0x400200a0
 8004c40:	400200b8 	.word	0x400200b8
 8004c44:	40020410 	.word	0x40020410
 8004c48:	40020428 	.word	0x40020428
 8004c4c:	40020440 	.word	0x40020440
 8004c50:	40020458 	.word	0x40020458
 8004c54:	40020470 	.word	0x40020470
 8004c58:	40020488 	.word	0x40020488
 8004c5c:	400204a0 	.word	0x400204a0
 8004c60:	400204b8 	.word	0x400204b8
 8004c64:	58025408 	.word	0x58025408
 8004c68:	5802541c 	.word	0x5802541c
 8004c6c:	58025430 	.word	0x58025430
 8004c70:	58025444 	.word	0x58025444
 8004c74:	58025458 	.word	0x58025458
 8004c78:	5802546c 	.word	0x5802546c
 8004c7c:	58025480 	.word	0x58025480
 8004c80:	58025494 	.word	0x58025494

08004c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c90:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <HAL_DMA_IRQHandler+0x1ac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a67      	ldr	r2, [pc, #412]	; (8004e34 <HAL_DMA_IRQHandler+0x1b0>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a5f      	ldr	r2, [pc, #380]	; (8004e38 <HAL_DMA_IRQHandler+0x1b4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04a      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5d      	ldr	r2, [pc, #372]	; (8004e3c <HAL_DMA_IRQHandler+0x1b8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d045      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5c      	ldr	r2, [pc, #368]	; (8004e40 <HAL_DMA_IRQHandler+0x1bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5a      	ldr	r2, [pc, #360]	; (8004e44 <HAL_DMA_IRQHandler+0x1c0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a59      	ldr	r2, [pc, #356]	; (8004e48 <HAL_DMA_IRQHandler+0x1c4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d036      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a57      	ldr	r2, [pc, #348]	; (8004e4c <HAL_DMA_IRQHandler+0x1c8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d031      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a56      	ldr	r2, [pc, #344]	; (8004e50 <HAL_DMA_IRQHandler+0x1cc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a54      	ldr	r2, [pc, #336]	; (8004e54 <HAL_DMA_IRQHandler+0x1d0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a53      	ldr	r2, [pc, #332]	; (8004e58 <HAL_DMA_IRQHandler+0x1d4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a51      	ldr	r2, [pc, #324]	; (8004e5c <HAL_DMA_IRQHandler+0x1d8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a50      	ldr	r2, [pc, #320]	; (8004e60 <HAL_DMA_IRQHandler+0x1dc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <HAL_DMA_IRQHandler+0x1e0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a4d      	ldr	r2, [pc, #308]	; (8004e68 <HAL_DMA_IRQHandler+0x1e4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a4b      	ldr	r2, [pc, #300]	; (8004e6c <HAL_DMA_IRQHandler+0x1e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a4a      	ldr	r2, [pc, #296]	; (8004e70 <HAL_DMA_IRQHandler+0x1ec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xd2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a48      	ldr	r2, [pc, #288]	; (8004e74 <HAL_DMA_IRQHandler+0x1f0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_DMA_IRQHandler+0xd6>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_DMA_IRQHandler+0xd8>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 842b 	beq.w	80055b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80a2 	beq.w	8004ebc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2e      	ldr	r2, [pc, #184]	; (8004e38 <HAL_DMA_IRQHandler+0x1b4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d04a      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2d      	ldr	r2, [pc, #180]	; (8004e3c <HAL_DMA_IRQHandler+0x1b8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d045      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2b      	ldr	r2, [pc, #172]	; (8004e40 <HAL_DMA_IRQHandler+0x1bc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d040      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <HAL_DMA_IRQHandler+0x1c0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d03b      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <HAL_DMA_IRQHandler+0x1c4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d036      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <HAL_DMA_IRQHandler+0x1c8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d031      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a25      	ldr	r2, [pc, #148]	; (8004e50 <HAL_DMA_IRQHandler+0x1cc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d02c      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <HAL_DMA_IRQHandler+0x1d0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d027      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a22      	ldr	r2, [pc, #136]	; (8004e58 <HAL_DMA_IRQHandler+0x1d4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <HAL_DMA_IRQHandler+0x1d8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d01d      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <HAL_DMA_IRQHandler+0x1dc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_DMA_IRQHandler+0x1e0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <HAL_DMA_IRQHandler+0x1e4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_DMA_IRQHandler+0x1e8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_DMA_IRQHandler+0x1ec>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_DMA_IRQHandler+0x194>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_DMA_IRQHandler+0x1f0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d12f      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x1f4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf14      	ite	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	2300      	moveq	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	e02e      	b.n	8004e8c <HAL_DMA_IRQHandler+0x208>
 8004e2e:	bf00      	nop
 8004e30:	24000000 	.word	0x24000000
 8004e34:	1b4e81b5 	.word	0x1b4e81b5
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0204 	bic.w	r2, r2, #4
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f043 0201 	orr.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d06e      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a69      	ldr	r2, [pc, #420]	; (800507c <HAL_DMA_IRQHandler+0x3f8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d04a      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a67      	ldr	r2, [pc, #412]	; (8005080 <HAL_DMA_IRQHandler+0x3fc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d045      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a66      	ldr	r2, [pc, #408]	; (8005084 <HAL_DMA_IRQHandler+0x400>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d040      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a64      	ldr	r2, [pc, #400]	; (8005088 <HAL_DMA_IRQHandler+0x404>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d03b      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a63      	ldr	r2, [pc, #396]	; (800508c <HAL_DMA_IRQHandler+0x408>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d036      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a61      	ldr	r2, [pc, #388]	; (8005090 <HAL_DMA_IRQHandler+0x40c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a60      	ldr	r2, [pc, #384]	; (8005094 <HAL_DMA_IRQHandler+0x410>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d02c      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5e      	ldr	r2, [pc, #376]	; (8005098 <HAL_DMA_IRQHandler+0x414>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d027      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5d      	ldr	r2, [pc, #372]	; (800509c <HAL_DMA_IRQHandler+0x418>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d022      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_DMA_IRQHandler+0x41c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_DMA_IRQHandler+0x420>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a58      	ldr	r2, [pc, #352]	; (80050a8 <HAL_DMA_IRQHandler+0x424>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_DMA_IRQHandler+0x428>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a55      	ldr	r2, [pc, #340]	; (80050b0 <HAL_DMA_IRQHandler+0x42c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a54      	ldr	r2, [pc, #336]	; (80050b4 <HAL_DMA_IRQHandler+0x430>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x2ee>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <HAL_DMA_IRQHandler+0x434>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10a      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x304>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e003      	b.n	8004f90 <HAL_DMA_IRQHandler+0x30c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa8:	f043 0202 	orr.w	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2204      	movs	r2, #4
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 808f 	beq.w	80050e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	; (800507c <HAL_DMA_IRQHandler+0x3f8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d04a      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_DMA_IRQHandler+0x3fc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d045      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a29      	ldr	r2, [pc, #164]	; (8005084 <HAL_DMA_IRQHandler+0x400>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d040      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_IRQHandler+0x404>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d03b      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a26      	ldr	r2, [pc, #152]	; (800508c <HAL_DMA_IRQHandler+0x408>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d036      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_DMA_IRQHandler+0x40c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d031      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_DMA_IRQHandler+0x410>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d02c      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a21      	ldr	r2, [pc, #132]	; (8005098 <HAL_DMA_IRQHandler+0x414>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d027      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_DMA_IRQHandler+0x418>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_DMA_IRQHandler+0x41c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_DMA_IRQHandler+0x420>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_DMA_IRQHandler+0x424>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <HAL_DMA_IRQHandler+0x428>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_DMA_IRQHandler+0x42c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_DMA_IRQHandler+0x430>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_DMA_IRQHandler+0x3e2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_DMA_IRQHandler+0x434>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d12a      	bne.n	80050bc <HAL_DMA_IRQHandler+0x438>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e023      	b.n	80050c4 <HAL_DMA_IRQHandler+0x440>
 800507c:	40020010 	.word	0x40020010
 8005080:	40020028 	.word	0x40020028
 8005084:	40020040 	.word	0x40020040
 8005088:	40020058 	.word	0x40020058
 800508c:	40020070 	.word	0x40020070
 8005090:	40020088 	.word	0x40020088
 8005094:	400200a0 	.word	0x400200a0
 8005098:	400200b8 	.word	0x400200b8
 800509c:	40020410 	.word	0x40020410
 80050a0:	40020428 	.word	0x40020428
 80050a4:	40020440 	.word	0x40020440
 80050a8:	40020458 	.word	0x40020458
 80050ac:	40020470 	.word	0x40020470
 80050b0:	40020488 	.word	0x40020488
 80050b4:	400204a0 	.word	0x400204a0
 80050b8:	400204b8 	.word	0x400204b8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2204      	movs	r2, #4
 80050d2:	409a      	lsls	r2, r3
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f043 0204 	orr.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	2210      	movs	r2, #16
 80050ee:	409a      	lsls	r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a6 	beq.w	8005246 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a85      	ldr	r2, [pc, #532]	; (8005314 <HAL_DMA_IRQHandler+0x690>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a83      	ldr	r2, [pc, #524]	; (8005318 <HAL_DMA_IRQHandler+0x694>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a82      	ldr	r2, [pc, #520]	; (800531c <HAL_DMA_IRQHandler+0x698>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a80      	ldr	r2, [pc, #512]	; (8005320 <HAL_DMA_IRQHandler+0x69c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a7f      	ldr	r2, [pc, #508]	; (8005324 <HAL_DMA_IRQHandler+0x6a0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a7d      	ldr	r2, [pc, #500]	; (8005328 <HAL_DMA_IRQHandler+0x6a4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a7c      	ldr	r2, [pc, #496]	; (800532c <HAL_DMA_IRQHandler+0x6a8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a7a      	ldr	r2, [pc, #488]	; (8005330 <HAL_DMA_IRQHandler+0x6ac>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a79      	ldr	r2, [pc, #484]	; (8005334 <HAL_DMA_IRQHandler+0x6b0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a77      	ldr	r2, [pc, #476]	; (8005338 <HAL_DMA_IRQHandler+0x6b4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a76      	ldr	r2, [pc, #472]	; (800533c <HAL_DMA_IRQHandler+0x6b8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a74      	ldr	r2, [pc, #464]	; (8005340 <HAL_DMA_IRQHandler+0x6bc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a73      	ldr	r2, [pc, #460]	; (8005344 <HAL_DMA_IRQHandler+0x6c0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a71      	ldr	r2, [pc, #452]	; (8005348 <HAL_DMA_IRQHandler+0x6c4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a70      	ldr	r2, [pc, #448]	; (800534c <HAL_DMA_IRQHandler+0x6c8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMA_IRQHandler+0x516>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a6e      	ldr	r2, [pc, #440]	; (8005350 <HAL_DMA_IRQHandler+0x6cc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d10a      	bne.n	80051b0 <HAL_DMA_IRQHandler+0x52c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e009      	b.n	80051c4 <HAL_DMA_IRQHandler+0x540>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf14      	ite	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	2300      	moveq	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d03e      	beq.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2210      	movs	r2, #16
 80051d2:	409a      	lsls	r2, r3
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d108      	bne.n	8005206 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d024      	beq.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	e01f      	b.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01b      	beq.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
 8005216:	e016      	b.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0208 	bic.w	r2, r2, #8
 8005234:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2220      	movs	r2, #32
 8005250:	409a      	lsls	r2, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8110 	beq.w	800547c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_DMA_IRQHandler+0x690>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d04a      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <HAL_DMA_IRQHandler+0x694>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d045      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a29      	ldr	r2, [pc, #164]	; (800531c <HAL_DMA_IRQHandler+0x698>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d040      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a28      	ldr	r2, [pc, #160]	; (8005320 <HAL_DMA_IRQHandler+0x69c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d03b      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a26      	ldr	r2, [pc, #152]	; (8005324 <HAL_DMA_IRQHandler+0x6a0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d036      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a25      	ldr	r2, [pc, #148]	; (8005328 <HAL_DMA_IRQHandler+0x6a4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d031      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_DMA_IRQHandler+0x6a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02c      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_DMA_IRQHandler+0x6ac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d027      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <HAL_DMA_IRQHandler+0x6b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_DMA_IRQHandler+0x6b4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01d      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <HAL_DMA_IRQHandler+0x6b8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_DMA_IRQHandler+0x6bc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1a      	ldr	r2, [pc, #104]	; (8005344 <HAL_DMA_IRQHandler+0x6c0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_DMA_IRQHandler+0x6c4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_DMA_IRQHandler+0x6c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_DMA_IRQHandler+0x678>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a16      	ldr	r2, [pc, #88]	; (8005350 <HAL_DMA_IRQHandler+0x6cc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d12b      	bne.n	8005354 <HAL_DMA_IRQHandler+0x6d0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	e02a      	b.n	8005368 <HAL_DMA_IRQHandler+0x6e4>
 8005312:	bf00      	nop
 8005314:	40020010 	.word	0x40020010
 8005318:	40020028 	.word	0x40020028
 800531c:	40020040 	.word	0x40020040
 8005320:	40020058 	.word	0x40020058
 8005324:	40020070 	.word	0x40020070
 8005328:	40020088 	.word	0x40020088
 800532c:	400200a0 	.word	0x400200a0
 8005330:	400200b8 	.word	0x400200b8
 8005334:	40020410 	.word	0x40020410
 8005338:	40020428 	.word	0x40020428
 800533c:	40020440 	.word	0x40020440
 8005340:	40020458 	.word	0x40020458
 8005344:	40020470 	.word	0x40020470
 8005348:	40020488 	.word	0x40020488
 800534c:	400204a0 	.word	0x400204a0
 8005350:	400204b8 	.word	0x400204b8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8087 	beq.w	800547c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	2220      	movs	r2, #32
 8005378:	409a      	lsls	r2, r3
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b04      	cmp	r3, #4
 8005388:	d139      	bne.n	80053fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0216 	bic.w	r2, r2, #22
 8005398:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_DMA_IRQHandler+0x736>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0208 	bic.w	r2, r2, #8
 80053c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	223f      	movs	r2, #63	; 0x3f
 80053d4:	409a      	lsls	r2, r3
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 834a 	beq.w	8005a88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
          }
          return;
 80053fc:	e344      	b.n	8005a88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d018      	beq.n	800543e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02c      	beq.n	800547c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
 800542a:	e027      	b.n	800547c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d023      	beq.n	800547c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
 800543c:	e01e      	b.n	800547c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0210 	bic.w	r2, r2, #16
 800545a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8306 	beq.w	8005a92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8088 	beq.w	80055a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a7a      	ldr	r2, [pc, #488]	; (800568c <HAL_DMA_IRQHandler+0xa08>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a79      	ldr	r2, [pc, #484]	; (8005690 <HAL_DMA_IRQHandler+0xa0c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a77      	ldr	r2, [pc, #476]	; (8005694 <HAL_DMA_IRQHandler+0xa10>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a76      	ldr	r2, [pc, #472]	; (8005698 <HAL_DMA_IRQHandler+0xa14>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a74      	ldr	r2, [pc, #464]	; (800569c <HAL_DMA_IRQHandler+0xa18>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a73      	ldr	r2, [pc, #460]	; (80056a0 <HAL_DMA_IRQHandler+0xa1c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a71      	ldr	r2, [pc, #452]	; (80056a4 <HAL_DMA_IRQHandler+0xa20>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a70      	ldr	r2, [pc, #448]	; (80056a8 <HAL_DMA_IRQHandler+0xa24>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a6e      	ldr	r2, [pc, #440]	; (80056ac <HAL_DMA_IRQHandler+0xa28>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6d      	ldr	r2, [pc, #436]	; (80056b0 <HAL_DMA_IRQHandler+0xa2c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <HAL_DMA_IRQHandler+0xa30>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6a      	ldr	r2, [pc, #424]	; (80056b8 <HAL_DMA_IRQHandler+0xa34>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	; (80056bc <HAL_DMA_IRQHandler+0xa38>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a67      	ldr	r2, [pc, #412]	; (80056c0 <HAL_DMA_IRQHandler+0xa3c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a65      	ldr	r2, [pc, #404]	; (80056c4 <HAL_DMA_IRQHandler+0xa40>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_DMA_IRQHandler+0x8b8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a64      	ldr	r2, [pc, #400]	; (80056c8 <HAL_DMA_IRQHandler+0xa44>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <HAL_DMA_IRQHandler+0x8ca>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e007      	b.n	800555e <HAL_DMA_IRQHandler+0x8da>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	429a      	cmp	r2, r3
 8005568:	d307      	bcc.n	800557a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f2      	bne.n	800555e <HAL_DMA_IRQHandler+0x8da>
 8005578:	e000      	b.n	800557c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800557a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2203      	movs	r2, #3
 800558e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005592:	e003      	b.n	800559c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8272 	beq.w	8005a92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
 80055b6:	e26c      	b.n	8005a92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a43      	ldr	r2, [pc, #268]	; (80056cc <HAL_DMA_IRQHandler+0xa48>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d022      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a42      	ldr	r2, [pc, #264]	; (80056d0 <HAL_DMA_IRQHandler+0xa4c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d01d      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <HAL_DMA_IRQHandler+0xa50>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d018      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a3f      	ldr	r2, [pc, #252]	; (80056d8 <HAL_DMA_IRQHandler+0xa54>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a3d      	ldr	r2, [pc, #244]	; (80056dc <HAL_DMA_IRQHandler+0xa58>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00e      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3c      	ldr	r2, [pc, #240]	; (80056e0 <HAL_DMA_IRQHandler+0xa5c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a3a      	ldr	r2, [pc, #232]	; (80056e4 <HAL_DMA_IRQHandler+0xa60>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_IRQHandler+0x984>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a39      	ldr	r2, [pc, #228]	; (80056e8 <HAL_DMA_IRQHandler+0xa64>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d101      	bne.n	800560c <HAL_DMA_IRQHandler+0x988>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_DMA_IRQHandler+0x98a>
 800560c:	2300      	movs	r3, #0
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 823f 	beq.w	8005a92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2204      	movs	r2, #4
 8005626:	409a      	lsls	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80cd 	beq.w	80057cc <HAL_DMA_IRQHandler+0xb48>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80c7 	beq.w	80057cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2204      	movs	r2, #4
 8005648:	409a      	lsls	r2, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d049      	beq.n	80056ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8210 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005674:	e20a      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8206 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005688:	e200      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe08>
 800568a:	bf00      	nop
 800568c:	40020010 	.word	0x40020010
 8005690:	40020028 	.word	0x40020028
 8005694:	40020040 	.word	0x40020040
 8005698:	40020058 	.word	0x40020058
 800569c:	40020070 	.word	0x40020070
 80056a0:	40020088 	.word	0x40020088
 80056a4:	400200a0 	.word	0x400200a0
 80056a8:	400200b8 	.word	0x400200b8
 80056ac:	40020410 	.word	0x40020410
 80056b0:	40020428 	.word	0x40020428
 80056b4:	40020440 	.word	0x40020440
 80056b8:	40020458 	.word	0x40020458
 80056bc:	40020470 	.word	0x40020470
 80056c0:	40020488 	.word	0x40020488
 80056c4:	400204a0 	.word	0x400204a0
 80056c8:	400204b8 	.word	0x400204b8
 80056cc:	58025408 	.word	0x58025408
 80056d0:	5802541c 	.word	0x5802541c
 80056d4:	58025430 	.word	0x58025430
 80056d8:	58025444 	.word	0x58025444
 80056dc:	58025458 	.word	0x58025458
 80056e0:	5802546c 	.word	0x5802546c
 80056e4:	58025480 	.word	0x58025480
 80056e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d160      	bne.n	80057b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a7f      	ldr	r2, [pc, #508]	; (80058f8 <HAL_DMA_IRQHandler+0xc74>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d04a      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a7d      	ldr	r2, [pc, #500]	; (80058fc <HAL_DMA_IRQHandler+0xc78>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d045      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a7c      	ldr	r2, [pc, #496]	; (8005900 <HAL_DMA_IRQHandler+0xc7c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d040      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a7a      	ldr	r2, [pc, #488]	; (8005904 <HAL_DMA_IRQHandler+0xc80>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d03b      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a79      	ldr	r2, [pc, #484]	; (8005908 <HAL_DMA_IRQHandler+0xc84>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d036      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a77      	ldr	r2, [pc, #476]	; (800590c <HAL_DMA_IRQHandler+0xc88>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d031      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a76      	ldr	r2, [pc, #472]	; (8005910 <HAL_DMA_IRQHandler+0xc8c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d02c      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a74      	ldr	r2, [pc, #464]	; (8005914 <HAL_DMA_IRQHandler+0xc90>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d027      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a73      	ldr	r2, [pc, #460]	; (8005918 <HAL_DMA_IRQHandler+0xc94>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a71      	ldr	r2, [pc, #452]	; (800591c <HAL_DMA_IRQHandler+0xc98>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a70      	ldr	r2, [pc, #448]	; (8005920 <HAL_DMA_IRQHandler+0xc9c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_DMA_IRQHandler+0xca0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6d      	ldr	r2, [pc, #436]	; (8005928 <HAL_DMA_IRQHandler+0xca4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6b      	ldr	r2, [pc, #428]	; (800592c <HAL_DMA_IRQHandler+0xca8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <HAL_DMA_IRQHandler+0xcac>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_DMA_IRQHandler+0xb12>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <HAL_DMA_IRQHandler+0xcb0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <HAL_DMA_IRQHandler+0xb24>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0208 	bic.w	r2, r2, #8
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e007      	b.n	80057b8 <HAL_DMA_IRQHandler+0xb34>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0204 	bic.w	r2, r2, #4
 80057b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8165 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ca:	e15f      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	2202      	movs	r2, #2
 80057d6:	409a      	lsls	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80c5 	beq.w	800596c <HAL_DMA_IRQHandler+0xce8>
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80bf 	beq.w	800596c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2202      	movs	r2, #2
 80057f8:	409a      	lsls	r2, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d018      	beq.n	800583a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 813a 	beq.w	8005a90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005824:	e134      	b.n	8005a90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8130 	beq.w	8005a90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005838:	e12a      	b.n	8005a90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 8089 	bne.w	8005958 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2b      	ldr	r2, [pc, #172]	; (80058f8 <HAL_DMA_IRQHandler+0xc74>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d04a      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <HAL_DMA_IRQHandler+0xc78>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d045      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a28      	ldr	r2, [pc, #160]	; (8005900 <HAL_DMA_IRQHandler+0xc7c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d040      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <HAL_DMA_IRQHandler+0xc80>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d03b      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a25      	ldr	r2, [pc, #148]	; (8005908 <HAL_DMA_IRQHandler+0xc84>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d036      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a23      	ldr	r2, [pc, #140]	; (800590c <HAL_DMA_IRQHandler+0xc88>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d031      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_DMA_IRQHandler+0xc8c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d02c      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a20      	ldr	r2, [pc, #128]	; (8005914 <HAL_DMA_IRQHandler+0xc90>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d027      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_DMA_IRQHandler+0xc94>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_DMA_IRQHandler+0xc98>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_DMA_IRQHandler+0xc9c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_DMA_IRQHandler+0xca0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a19      	ldr	r2, [pc, #100]	; (8005928 <HAL_DMA_IRQHandler+0xca4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a17      	ldr	r2, [pc, #92]	; (800592c <HAL_DMA_IRQHandler+0xca8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_DMA_IRQHandler+0xcac>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_DMA_IRQHandler+0xc62>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a14      	ldr	r2, [pc, #80]	; (8005934 <HAL_DMA_IRQHandler+0xcb0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d128      	bne.n	8005938 <HAL_DMA_IRQHandler+0xcb4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0214 	bic.w	r2, r2, #20
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e027      	b.n	8005948 <HAL_DMA_IRQHandler+0xcc4>
 80058f8:	40020010 	.word	0x40020010
 80058fc:	40020028 	.word	0x40020028
 8005900:	40020040 	.word	0x40020040
 8005904:	40020058 	.word	0x40020058
 8005908:	40020070 	.word	0x40020070
 800590c:	40020088 	.word	0x40020088
 8005910:	400200a0 	.word	0x400200a0
 8005914:	400200b8 	.word	0x400200b8
 8005918:	40020410 	.word	0x40020410
 800591c:	40020428 	.word	0x40020428
 8005920:	40020440 	.word	0x40020440
 8005924:	40020458 	.word	0x40020458
 8005928:	40020470 	.word	0x40020470
 800592c:	40020488 	.word	0x40020488
 8005930:	400204a0 	.word	0x400204a0
 8005934:	400204b8 	.word	0x400204b8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 020a 	bic.w	r2, r2, #10
 8005946:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8097 	beq.w	8005a90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800596a:	e091      	b.n	8005a90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2208      	movs	r2, #8
 8005976:	409a      	lsls	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8088 	beq.w	8005a92 <HAL_DMA_IRQHandler+0xe0e>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8082 	beq.w	8005a92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a41      	ldr	r2, [pc, #260]	; (8005a98 <HAL_DMA_IRQHandler+0xe14>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d04a      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3f      	ldr	r2, [pc, #252]	; (8005a9c <HAL_DMA_IRQHandler+0xe18>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d045      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3e      	ldr	r2, [pc, #248]	; (8005aa0 <HAL_DMA_IRQHandler+0xe1c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d040      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a3c      	ldr	r2, [pc, #240]	; (8005aa4 <HAL_DMA_IRQHandler+0xe20>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d03b      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3b      	ldr	r2, [pc, #236]	; (8005aa8 <HAL_DMA_IRQHandler+0xe24>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d036      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a39      	ldr	r2, [pc, #228]	; (8005aac <HAL_DMA_IRQHandler+0xe28>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d031      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a38      	ldr	r2, [pc, #224]	; (8005ab0 <HAL_DMA_IRQHandler+0xe2c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d02c      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a36      	ldr	r2, [pc, #216]	; (8005ab4 <HAL_DMA_IRQHandler+0xe30>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d027      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a35      	ldr	r2, [pc, #212]	; (8005ab8 <HAL_DMA_IRQHandler+0xe34>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a33      	ldr	r2, [pc, #204]	; (8005abc <HAL_DMA_IRQHandler+0xe38>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01d      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <HAL_DMA_IRQHandler+0xe3c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <HAL_DMA_IRQHandler+0xe40>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <HAL_DMA_IRQHandler+0xe44>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <HAL_DMA_IRQHandler+0xe48>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2c      	ldr	r2, [pc, #176]	; (8005ad0 <HAL_DMA_IRQHandler+0xe4c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_DMA_IRQHandler+0xdaa>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2a      	ldr	r2, [pc, #168]	; (8005ad4 <HAL_DMA_IRQHandler+0xe50>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <HAL_DMA_IRQHandler+0xdbc>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 021c 	bic.w	r2, r2, #28
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e007      	b.n	8005a50 <HAL_DMA_IRQHandler+0xdcc>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 020e 	bic.w	r2, r2, #14
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2201      	movs	r2, #1
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	e004      	b.n	8005a92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a88:	bf00      	nop
 8005a8a:	e002      	b.n	8005a92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40020010 	.word	0x40020010
 8005a9c:	40020028 	.word	0x40020028
 8005aa0:	40020040 	.word	0x40020040
 8005aa4:	40020058 	.word	0x40020058
 8005aa8:	40020070 	.word	0x40020070
 8005aac:	40020088 	.word	0x40020088
 8005ab0:	400200a0 	.word	0x400200a0
 8005ab4:	400200b8 	.word	0x400200b8
 8005ab8:	40020410 	.word	0x40020410
 8005abc:	40020428 	.word	0x40020428
 8005ac0:	40020440 	.word	0x40020440
 8005ac4:	40020458 	.word	0x40020458
 8005ac8:	40020470 	.word	0x40020470
 8005acc:	40020488 	.word	0x40020488
 8005ad0:	400204a0 	.word	0x400204a0
 8005ad4:	400204b8 	.word	0x400204b8

08005ad8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7f      	ldr	r2, [pc, #508]	; (8005cf4 <DMA_SetConfig+0x21c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d072      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7d      	ldr	r2, [pc, #500]	; (8005cf8 <DMA_SetConfig+0x220>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d06d      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a7c      	ldr	r2, [pc, #496]	; (8005cfc <DMA_SetConfig+0x224>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d068      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a7a      	ldr	r2, [pc, #488]	; (8005d00 <DMA_SetConfig+0x228>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d063      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a79      	ldr	r2, [pc, #484]	; (8005d04 <DMA_SetConfig+0x22c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d05e      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a77      	ldr	r2, [pc, #476]	; (8005d08 <DMA_SetConfig+0x230>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d059      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a76      	ldr	r2, [pc, #472]	; (8005d0c <DMA_SetConfig+0x234>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d054      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a74      	ldr	r2, [pc, #464]	; (8005d10 <DMA_SetConfig+0x238>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d04f      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a73      	ldr	r2, [pc, #460]	; (8005d14 <DMA_SetConfig+0x23c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a71      	ldr	r2, [pc, #452]	; (8005d18 <DMA_SetConfig+0x240>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a70      	ldr	r2, [pc, #448]	; (8005d1c <DMA_SetConfig+0x244>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6e      	ldr	r2, [pc, #440]	; (8005d20 <DMA_SetConfig+0x248>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a6d      	ldr	r2, [pc, #436]	; (8005d24 <DMA_SetConfig+0x24c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a6b      	ldr	r2, [pc, #428]	; (8005d28 <DMA_SetConfig+0x250>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a6a      	ldr	r2, [pc, #424]	; (8005d2c <DMA_SetConfig+0x254>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a68      	ldr	r2, [pc, #416]	; (8005d30 <DMA_SetConfig+0x258>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a67      	ldr	r2, [pc, #412]	; (8005d34 <DMA_SetConfig+0x25c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <DMA_SetConfig+0x260>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a64      	ldr	r2, [pc, #400]	; (8005d3c <DMA_SetConfig+0x264>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a62      	ldr	r2, [pc, #392]	; (8005d40 <DMA_SetConfig+0x268>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a61      	ldr	r2, [pc, #388]	; (8005d44 <DMA_SetConfig+0x26c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <DMA_SetConfig+0x270>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a5e      	ldr	r2, [pc, #376]	; (8005d4c <DMA_SetConfig+0x274>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <DMA_SetConfig+0x10a>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a5c      	ldr	r2, [pc, #368]	; (8005d50 <DMA_SetConfig+0x278>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <DMA_SetConfig+0x10e>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <DMA_SetConfig+0x110>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bf4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a39      	ldr	r2, [pc, #228]	; (8005cf4 <DMA_SetConfig+0x21c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d04a      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <DMA_SetConfig+0x220>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d045      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <DMA_SetConfig+0x224>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d040      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <DMA_SetConfig+0x228>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d03b      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <DMA_SetConfig+0x22c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d036      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <DMA_SetConfig+0x230>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d031      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <DMA_SetConfig+0x234>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02c      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <DMA_SetConfig+0x238>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d027      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <DMA_SetConfig+0x23c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <DMA_SetConfig+0x240>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d01d      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <DMA_SetConfig+0x244>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <DMA_SetConfig+0x248>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a27      	ldr	r2, [pc, #156]	; (8005d24 <DMA_SetConfig+0x24c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a26      	ldr	r2, [pc, #152]	; (8005d28 <DMA_SetConfig+0x250>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <DMA_SetConfig+0x254>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <DMA_SetConfig+0x1d0>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <DMA_SetConfig+0x258>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <DMA_SetConfig+0x1d4>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <DMA_SetConfig+0x1d6>
 8005cac:	2300      	movs	r3, #0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d059      	beq.n	8005d66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	223f      	movs	r2, #63	; 0x3f
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cd0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d138      	bne.n	8005d54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cf2:	e086      	b.n	8005e02 <DMA_SetConfig+0x32a>
 8005cf4:	40020010 	.word	0x40020010
 8005cf8:	40020028 	.word	0x40020028
 8005cfc:	40020040 	.word	0x40020040
 8005d00:	40020058 	.word	0x40020058
 8005d04:	40020070 	.word	0x40020070
 8005d08:	40020088 	.word	0x40020088
 8005d0c:	400200a0 	.word	0x400200a0
 8005d10:	400200b8 	.word	0x400200b8
 8005d14:	40020410 	.word	0x40020410
 8005d18:	40020428 	.word	0x40020428
 8005d1c:	40020440 	.word	0x40020440
 8005d20:	40020458 	.word	0x40020458
 8005d24:	40020470 	.word	0x40020470
 8005d28:	40020488 	.word	0x40020488
 8005d2c:	400204a0 	.word	0x400204a0
 8005d30:	400204b8 	.word	0x400204b8
 8005d34:	58025408 	.word	0x58025408
 8005d38:	5802541c 	.word	0x5802541c
 8005d3c:	58025430 	.word	0x58025430
 8005d40:	58025444 	.word	0x58025444
 8005d44:	58025458 	.word	0x58025458
 8005d48:	5802546c 	.word	0x5802546c
 8005d4c:	58025480 	.word	0x58025480
 8005d50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	60da      	str	r2, [r3, #12]
}
 8005d64:	e04d      	b.n	8005e02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <DMA_SetConfig+0x338>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <DMA_SetConfig+0x33c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01d      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <DMA_SetConfig+0x340>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a24      	ldr	r2, [pc, #144]	; (8005e1c <DMA_SetConfig+0x344>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <DMA_SetConfig+0x348>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	; (8005e24 <DMA_SetConfig+0x34c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <DMA_SetConfig+0x350>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <DMA_SetConfig+0x2de>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1e      	ldr	r2, [pc, #120]	; (8005e2c <DMA_SetConfig+0x354>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <DMA_SetConfig+0x2e2>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <DMA_SetConfig+0x2e4>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d108      	bne.n	8005df2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	60da      	str	r2, [r3, #12]
}
 8005df0:	e007      	b.n	8005e02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	60da      	str	r2, [r3, #12]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	58025408 	.word	0x58025408
 8005e14:	5802541c 	.word	0x5802541c
 8005e18:	58025430 	.word	0x58025430
 8005e1c:	58025444 	.word	0x58025444
 8005e20:	58025458 	.word	0x58025458
 8005e24:	5802546c 	.word	0x5802546c
 8005e28:	58025480 	.word	0x58025480
 8005e2c:	58025494 	.word	0x58025494

08005e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a42      	ldr	r2, [pc, #264]	; (8005f48 <DMA_CalcBaseAndBitshift+0x118>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d04a      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <DMA_CalcBaseAndBitshift+0x11c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d045      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a3f      	ldr	r2, [pc, #252]	; (8005f50 <DMA_CalcBaseAndBitshift+0x120>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d040      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a3e      	ldr	r2, [pc, #248]	; (8005f54 <DMA_CalcBaseAndBitshift+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d03b      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a3c      	ldr	r2, [pc, #240]	; (8005f58 <DMA_CalcBaseAndBitshift+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d036      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <DMA_CalcBaseAndBitshift+0x12c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d031      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a39      	ldr	r2, [pc, #228]	; (8005f60 <DMA_CalcBaseAndBitshift+0x130>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d02c      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a38      	ldr	r2, [pc, #224]	; (8005f64 <DMA_CalcBaseAndBitshift+0x134>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d027      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a36      	ldr	r2, [pc, #216]	; (8005f68 <DMA_CalcBaseAndBitshift+0x138>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d022      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a35      	ldr	r2, [pc, #212]	; (8005f6c <DMA_CalcBaseAndBitshift+0x13c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d01d      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <DMA_CalcBaseAndBitshift+0x140>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d018      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a32      	ldr	r2, [pc, #200]	; (8005f74 <DMA_CalcBaseAndBitshift+0x144>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d013      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a30      	ldr	r2, [pc, #192]	; (8005f78 <DMA_CalcBaseAndBitshift+0x148>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2f      	ldr	r2, [pc, #188]	; (8005f7c <DMA_CalcBaseAndBitshift+0x14c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <DMA_CalcBaseAndBitshift+0x150>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2c      	ldr	r2, [pc, #176]	; (8005f84 <DMA_CalcBaseAndBitshift+0x154>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d101      	bne.n	8005edc <DMA_CalcBaseAndBitshift+0xac>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <DMA_CalcBaseAndBitshift+0xae>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d024      	beq.n	8005f2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	3b10      	subs	r3, #16
 8005eea:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <DMA_CalcBaseAndBitshift+0x158>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <DMA_CalcBaseAndBitshift+0x15c>)
 8005efc:	5cd3      	ldrb	r3, [r2, r3]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d908      	bls.n	8005f1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b1f      	ldr	r3, [pc, #124]	; (8005f90 <DMA_CalcBaseAndBitshift+0x160>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	659a      	str	r2, [r3, #88]	; 0x58
 8005f1a:	e00d      	b.n	8005f38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <DMA_CalcBaseAndBitshift+0x160>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6593      	str	r3, [r2, #88]	; 0x58
 8005f2a:	e005      	b.n	8005f38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40020010 	.word	0x40020010
 8005f4c:	40020028 	.word	0x40020028
 8005f50:	40020040 	.word	0x40020040
 8005f54:	40020058 	.word	0x40020058
 8005f58:	40020070 	.word	0x40020070
 8005f5c:	40020088 	.word	0x40020088
 8005f60:	400200a0 	.word	0x400200a0
 8005f64:	400200b8 	.word	0x400200b8
 8005f68:	40020410 	.word	0x40020410
 8005f6c:	40020428 	.word	0x40020428
 8005f70:	40020440 	.word	0x40020440
 8005f74:	40020458 	.word	0x40020458
 8005f78:	40020470 	.word	0x40020470
 8005f7c:	40020488 	.word	0x40020488
 8005f80:	400204a0 	.word	0x400204a0
 8005f84:	400204b8 	.word	0x400204b8
 8005f88:	aaaaaaab 	.word	0xaaaaaaab
 8005f8c:	0800de7c 	.word	0x0800de7c
 8005f90:	fffffc00 	.word	0xfffffc00

08005f94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d120      	bne.n	8005fea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d858      	bhi.n	8006062 <DMA_CheckFifoParam+0xce>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <DMA_CheckFifoParam+0x24>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fc9 	.word	0x08005fc9
 8005fbc:	08005fdb 	.word	0x08005fdb
 8005fc0:	08005fc9 	.word	0x08005fc9
 8005fc4:	08006063 	.word	0x08006063
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d048      	beq.n	8006066 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fd8:	e045      	b.n	8006066 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe2:	d142      	bne.n	800606a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fe8:	e03f      	b.n	800606a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	d123      	bne.n	800603c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d838      	bhi.n	800606e <DMA_CheckFifoParam+0xda>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <DMA_CheckFifoParam+0x70>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006015 	.word	0x08006015
 8006008:	0800601b 	.word	0x0800601b
 800600c:	08006015 	.word	0x08006015
 8006010:	0800602d 	.word	0x0800602d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
        break;
 8006018:	e030      	b.n	800607c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d025      	beq.n	8006072 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800602a:	e022      	b.n	8006072 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006034:	d11f      	bne.n	8006076 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800603a:	e01c      	b.n	8006076 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	2b02      	cmp	r3, #2
 8006042:	d902      	bls.n	800604a <DMA_CheckFifoParam+0xb6>
 8006044:	2b03      	cmp	r3, #3
 8006046:	d003      	beq.n	8006050 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006048:	e018      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
        break;
 800604e:	e015      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
    break;
 8006060:	e00b      	b.n	800607a <DMA_CheckFifoParam+0xe6>
        break;
 8006062:	bf00      	nop
 8006064:	e00a      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        break;
 8006066:	bf00      	nop
 8006068:	e008      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        break;
 800606a:	bf00      	nop
 800606c:	e006      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        break;
 800606e:	bf00      	nop
 8006070:	e004      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        break;
 8006072:	bf00      	nop
 8006074:	e002      	b.n	800607c <DMA_CheckFifoParam+0xe8>
        break;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <DMA_CheckFifoParam+0xe8>
    break;
 800607a:	bf00      	nop
    }
  }

  return status;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop

0800608c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a38      	ldr	r2, [pc, #224]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a36      	ldr	r2, [pc, #216]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a35      	ldr	r2, [pc, #212]	; (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a33      	ldr	r2, [pc, #204]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a32      	ldr	r2, [pc, #200]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a30      	ldr	r2, [pc, #192]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2f      	ldr	r2, [pc, #188]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2d      	ldr	r2, [pc, #180]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01a      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	3b08      	subs	r3, #8
 80060fc:	4a28      	ldr	r2, [pc, #160]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006118:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2201      	movs	r2, #1
 8006122:	409a      	lsls	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006128:	e024      	b.n	8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	3b10      	subs	r3, #16
 8006132:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006134:	fba2 2303 	umull	r2, r3, r2, r3
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d806      	bhi.n	8006152 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d902      	bls.n	8006152 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3308      	adds	r3, #8
 8006150:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	461a      	mov	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006164:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	2201      	movs	r2, #1
 800616e:	409a      	lsls	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	58025408 	.word	0x58025408
 8006184:	5802541c 	.word	0x5802541c
 8006188:	58025430 	.word	0x58025430
 800618c:	58025444 	.word	0x58025444
 8006190:	58025458 	.word	0x58025458
 8006194:	5802546c 	.word	0x5802546c
 8006198:	58025480 	.word	0x58025480
 800619c:	58025494 	.word	0x58025494
 80061a0:	cccccccd 	.word	0xcccccccd
 80061a4:	16009600 	.word	0x16009600
 80061a8:	58025880 	.word	0x58025880
 80061ac:	aaaaaaab 	.word	0xaaaaaaab
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	4002040f 	.word	0x4002040f
 80061b8:	10008200 	.word	0x10008200
 80061bc:	40020880 	.word	0x40020880

080061c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d04a      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d847      	bhi.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a25      	ldr	r2, [pc, #148]	; (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d022      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a24      	ldr	r2, [pc, #144]	; (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d01d      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1e      	ldr	r2, [pc, #120]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d009      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006248:	671a      	str	r2, [r3, #112]	; 0x70
 800624a:	e009      	b.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	461a      	mov	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800625e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	2201      	movs	r2, #1
 8006266:	409a      	lsls	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800626c:	bf00      	nop
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	58025408 	.word	0x58025408
 800627c:	5802541c 	.word	0x5802541c
 8006280:	58025430 	.word	0x58025430
 8006284:	58025444 	.word	0x58025444
 8006288:	58025458 	.word	0x58025458
 800628c:	5802546c 	.word	0x5802546c
 8006290:	58025480 	.word	0x58025480
 8006294:	58025494 	.word	0x58025494
 8006298:	1600963f 	.word	0x1600963f
 800629c:	58025940 	.word	0x58025940
 80062a0:	1000823f 	.word	0x1000823f
 80062a4:	40020940 	.word	0x40020940

080062a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b098      	sub	sp, #96	; 0x60
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80062b0:	4a84      	ldr	r2, [pc, #528]	; (80064c4 <HAL_FDCAN_Init+0x21c>)
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4611      	mov	r1, r2
 80062b8:	224c      	movs	r2, #76	; 0x4c
 80062ba:	4618      	mov	r0, r3
 80062bc:	f007 fc00 	bl	800dac0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e1c6      	b.n	8006658 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a7e      	ldr	r2, [pc, #504]	; (80064c8 <HAL_FDCAN_Init+0x220>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d106      	bne.n	80062e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fb fbd0 	bl	8001a9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0210 	bic.w	r2, r2, #16
 800630a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800630c:	f7fc fa46 	bl	800279c <HAL_GetTick>
 8006310:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006312:	e014      	b.n	800633e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006314:	f7fc fa42 	bl	800279c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b0a      	cmp	r3, #10
 8006320:	d90d      	bls.n	800633e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006328:	f043 0201 	orr.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2203      	movs	r2, #3
 8006336:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e18c      	b.n	8006658 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b08      	cmp	r3, #8
 800634a:	d0e3      	beq.n	8006314 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800635c:	f7fc fa1e 	bl	800279c <HAL_GetTick>
 8006360:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006362:	e014      	b.n	800638e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006364:	f7fc fa1a 	bl	800279c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b0a      	cmp	r3, #10
 8006370:	d90d      	bls.n	800638e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2203      	movs	r2, #3
 8006386:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e164      	b.n	8006658 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0e3      	beq.n	8006364 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0202 	orr.w	r2, r2, #2
 80063aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d108      	bne.n	80063c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c2:	619a      	str	r2, [r3, #24]
 80063c4:	e007      	b.n	80063d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7c5b      	ldrb	r3, [r3, #17]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d108      	bne.n	80063f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ec:	619a      	str	r2, [r3, #24]
 80063ee:	e007      	b.n	8006400 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7c9b      	ldrb	r3, [r3, #18]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d108      	bne.n	800641a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006416:	619a      	str	r2, [r3, #24]
 8006418:	e007      	b.n	800642a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006428:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800644e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0210 	bic.w	r2, r2, #16
 800645e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d108      	bne.n	800647a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0204 	orr.w	r2, r2, #4
 8006476:	619a      	str	r2, [r3, #24]
 8006478:	e030      	b.n	80064dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02c      	beq.n	80064dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d020      	beq.n	80064cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006498:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0210 	orr.w	r2, r2, #16
 80064a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d114      	bne.n	80064dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0220 	orr.w	r2, r2, #32
 80064c0:	619a      	str	r2, [r3, #24]
 80064c2:	e00b      	b.n	80064dc <HAL_FDCAN_Init+0x234>
 80064c4:	0800dd78 	.word	0x0800dd78
 80064c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0220 	orr.w	r2, r2, #32
 80064da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006504:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006506:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006510:	d115      	bne.n	800653e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	3b01      	subs	r3, #1
 800651e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006520:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	3b01      	subs	r3, #1
 8006528:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800652a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	3b01      	subs	r3, #1
 8006534:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800653a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800653c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006564:	4413      	add	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006572:	f023 0107 	bic.w	r1, r3, #7
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	3360      	adds	r3, #96	; 0x60
 800657e:	443b      	add	r3, r7
 8006580:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800659e:	f023 0107 	bic.w	r1, r3, #7
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	3360      	adds	r3, #96	; 0x60
 80065aa:	443b      	add	r3, r7
 80065ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d012      	beq.n	80065e8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065ca:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	3360      	adds	r3, #96	; 0x60
 80065d6:	443b      	add	r3, r7
 80065d8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80065dc:	011a      	lsls	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d012      	beq.n	8006616 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065f8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	3360      	adds	r3, #96	; 0x60
 8006604:	443b      	add	r3, r7
 8006606:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800660a:	021a      	lsls	r2, r3, #8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a11      	ldr	r2, [pc, #68]	; (8006660 <HAL_FDCAN_Init+0x3b8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d107      	bne.n	8006630 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f022 0203 	bic.w	r2, r2, #3
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f80b 	bl	8006664 <FDCAN_CalcultateRamBlockAddresses>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006654:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006658:	4618      	mov	r0, r3
 800665a:	3760      	adds	r7, #96	; 0x60
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	4000a000 	.word	0x4000a000

08006664 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800667a:	4ba7      	ldr	r3, [pc, #668]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0091      	lsls	r1, r2, #2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	430b      	orrs	r3, r1
 8006688:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006694:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	041a      	lsls	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	4413      	add	r3, r2
 80066b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066ba:	4b97      	ldr	r3, [pc, #604]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066bc:	4013      	ands	r3, r2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	0091      	lsls	r1, r2, #2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	430b      	orrs	r3, r1
 80066c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	041a      	lsls	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80066fc:	4b86      	ldr	r3, [pc, #536]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066fe:	4013      	ands	r3, r2
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	0091      	lsls	r1, r2, #2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	430b      	orrs	r3, r1
 800670a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006716:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	041a      	lsls	r2, r3, #16
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	4413      	add	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006744:	4b74      	ldr	r3, [pc, #464]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	0091      	lsls	r1, r2, #2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	430b      	orrs	r3, r1
 8006752:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800675e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	041a      	lsls	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800678c:	4b62      	ldr	r3, [pc, #392]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800678e:	4013      	ands	r3, r2
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	0091      	lsls	r1, r2, #2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	430b      	orrs	r3, r1
 800679a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80067a6:	fb02 f303 	mul.w	r3, r2, r3
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4413      	add	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80067b8:	4b57      	ldr	r3, [pc, #348]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	0091      	lsls	r1, r2, #2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067d2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	041a      	lsls	r2, r3, #16
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4413      	add	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80067fa:	4b47      	ldr	r3, [pc, #284]	; (8006918 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	0091      	lsls	r1, r2, #2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	430b      	orrs	r3, r1
 8006808:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006814:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681c:	041a      	lsls	r2, r3, #16
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006830:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	061a      	lsls	r2, r3, #24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006848:	4b34      	ldr	r3, [pc, #208]	; (800691c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800684a:	4413      	add	r3, r2
 800684c:	009a      	lsls	r2, r3, #2
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	441a      	add	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800687e:	fb01 f303 	mul.w	r3, r1, r3
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	441a      	add	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690e:	4a04      	ldr	r2, [pc, #16]	; (8006920 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d915      	bls.n	8006940 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006914:	e006      	b.n	8006924 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006916:	bf00      	nop
 8006918:	ffff0003 	.word	0xffff0003
 800691c:	10002b00 	.word	0x10002b00
 8006920:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800692a:	f043 0220 	orr.w	r2, r3, #32
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2203      	movs	r2, #3
 8006938:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e010      	b.n	8006962 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e005      	b.n	8006954 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	429a      	cmp	r2, r3
 800695e:	d3f3      	bcc.n	8006948 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006970:	b480      	push	{r7}
 8006972:	b089      	sub	sp, #36	; 0x24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800697e:	4b86      	ldr	r3, [pc, #536]	; (8006b98 <HAL_GPIO_Init+0x228>)
 8006980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006982:	e18c      	b.n	8006c9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	2101      	movs	r1, #1
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	4013      	ands	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 817e 	beq.w	8006c98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d005      	beq.n	80069b4 <HAL_GPIO_Init+0x44>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d130      	bne.n	8006a16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	2203      	movs	r2, #3
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68da      	ldr	r2, [r3, #12]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069ea:	2201      	movs	r2, #1
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43db      	mvns	r3, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4013      	ands	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f003 0201 	and.w	r2, r3, #1
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d017      	beq.n	8006a52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	4013      	ands	r3, r2
 8006a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d123      	bne.n	8006aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	08da      	lsrs	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3208      	adds	r2, #8
 8006a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	220f      	movs	r2, #15
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	08da      	lsrs	r2, r3, #3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3208      	adds	r2, #8
 8006aa0:	69b9      	ldr	r1, [r7, #24]
 8006aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4013      	ands	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0203 	and.w	r2, r3, #3
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 80d8 	beq.w	8006c98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ae8:	4b2c      	ldr	r3, [pc, #176]	; (8006b9c <HAL_GPIO_Init+0x22c>)
 8006aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006aee:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <HAL_GPIO_Init+0x22c>)
 8006af0:	f043 0302 	orr.w	r3, r3, #2
 8006af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006af8:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <HAL_GPIO_Init+0x22c>)
 8006afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b06:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <HAL_GPIO_Init+0x230>)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	089b      	lsrs	r3, r3, #2
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	220f      	movs	r2, #15
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <HAL_GPIO_Init+0x234>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d04a      	beq.n	8006bc8 <HAL_GPIO_Init+0x258>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <HAL_GPIO_Init+0x238>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d02b      	beq.n	8006b92 <HAL_GPIO_Init+0x222>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_GPIO_Init+0x23c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d025      	beq.n	8006b8e <HAL_GPIO_Init+0x21e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_GPIO_Init+0x240>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01f      	beq.n	8006b8a <HAL_GPIO_Init+0x21a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_GPIO_Init+0x244>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d019      	beq.n	8006b86 <HAL_GPIO_Init+0x216>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <HAL_GPIO_Init+0x248>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_GPIO_Init+0x212>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_GPIO_Init+0x24c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00d      	beq.n	8006b7e <HAL_GPIO_Init+0x20e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <HAL_GPIO_Init+0x250>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <HAL_GPIO_Init+0x20a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <HAL_GPIO_Init+0x254>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <HAL_GPIO_Init+0x206>
 8006b72:	2309      	movs	r3, #9
 8006b74:	e029      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b76:	230a      	movs	r3, #10
 8006b78:	e027      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b7a:	2307      	movs	r3, #7
 8006b7c:	e025      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b7e:	2306      	movs	r3, #6
 8006b80:	e023      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b82:	2305      	movs	r3, #5
 8006b84:	e021      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b86:	2304      	movs	r3, #4
 8006b88:	e01f      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e01d      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e01b      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e019      	b.n	8006bca <HAL_GPIO_Init+0x25a>
 8006b96:	bf00      	nop
 8006b98:	58000080 	.word	0x58000080
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	58000400 	.word	0x58000400
 8006ba4:	58020000 	.word	0x58020000
 8006ba8:	58020400 	.word	0x58020400
 8006bac:	58020800 	.word	0x58020800
 8006bb0:	58020c00 	.word	0x58020c00
 8006bb4:	58021000 	.word	0x58021000
 8006bb8:	58021400 	.word	0x58021400
 8006bbc:	58021800 	.word	0x58021800
 8006bc0:	58021c00 	.word	0x58021c00
 8006bc4:	58022400 	.word	0x58022400
 8006bc8:	2300      	movs	r3, #0
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	f002 0203 	and.w	r2, r2, #3
 8006bd0:	0092      	lsls	r2, r2, #2
 8006bd2:	4093      	lsls	r3, r2
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bda:	4938      	ldr	r1, [pc, #224]	; (8006cbc <HAL_GPIO_Init+0x34c>)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	089b      	lsrs	r3, r3, #2
 8006be0:	3302      	adds	r3, #2
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4013      	ands	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	4013      	ands	r3, r2
 8006c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	43db      	mvns	r3, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f47f ae6b 	bne.w	8006984 <HAL_GPIO_Init+0x14>
  }
}
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
 8006cb2:	3724      	adds	r7, #36	; 0x24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	58000400 	.word	0x58000400

08006cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	807b      	strh	r3, [r7, #2]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cd0:	787b      	ldrb	r3, [r7, #1]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cd6:	887a      	ldrh	r2, [r7, #2]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cdc:	e003      	b.n	8006ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	041a      	lsls	r2, r3, #16
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	619a      	str	r2, [r3, #24]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e07f      	b.n	8006e06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fa ff26 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2224      	movs	r2, #36	; 0x24
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d107      	bne.n	8006d6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	e006      	b.n	8006d7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d104      	bne.n	8006d8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6859      	ldr	r1, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_I2C_Init+0x11c>)
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69d9      	ldr	r1, [r3, #28]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	02008000 	.word	0x02008000

08006e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d138      	bne.n	8006e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e032      	b.n	8006e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2224      	movs	r2, #36	; 0x24
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0201 	bic.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6819      	ldr	r1, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d139      	bne.n	8006f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e033      	b.n	8006f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2224      	movs	r2, #36	; 0x24
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e000      	b.n	8006f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f44:	b08f      	sub	sp, #60	; 0x3c
 8006f46:	af0a      	add	r7, sp, #40	; 0x28
 8006f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e116      	b.n	8007182 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fb fa48 	bl	8002404 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2203      	movs	r2, #3
 8006f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f006 face 	bl	800d534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	687e      	ldr	r6, [r7, #4]
 8006fa0:	466d      	mov	r5, sp
 8006fa2:	f106 0410 	add.w	r4, r6, #16
 8006fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fb6:	1d33      	adds	r3, r6, #4
 8006fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fba:	6838      	ldr	r0, [r7, #0]
 8006fbc:	f006 fa4c 	bl	800d458 <USB_CoreInit>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e0d7      	b.n	8007182 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f006 fabc 	bl	800d556 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	73fb      	strb	r3, [r7, #15]
 8006fe2:	e04a      	b.n	800707a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fe4:	7bfa      	ldrb	r2, [r7, #15]
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	333d      	adds	r3, #61	; 0x3d
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ff8:	7bfa      	ldrb	r2, [r7, #15]
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	333c      	adds	r3, #60	; 0x3c
 8007008:	7bfa      	ldrb	r2, [r7, #15]
 800700a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800700c:	7bfa      	ldrb	r2, [r7, #15]
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	b298      	uxth	r0, r3
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3356      	adds	r3, #86	; 0x56
 8007020:	4602      	mov	r2, r0
 8007022:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007024:	7bfa      	ldrb	r2, [r7, #15]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4413      	add	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	3340      	adds	r3, #64	; 0x40
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007038:	7bfa      	ldrb	r2, [r7, #15]
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	3344      	adds	r3, #68	; 0x44
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800704c:	7bfa      	ldrb	r2, [r7, #15]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	3348      	adds	r3, #72	; 0x48
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	334c      	adds	r3, #76	; 0x4c
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	3301      	adds	r3, #1
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d3af      	bcc.n	8006fe4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	e044      	b.n	8007114 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800708a:	7bfa      	ldrb	r2, [r7, #15]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80070b2:	7bfa      	ldrb	r2, [r7, #15]
 80070b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070b6:	7bfa      	ldrb	r2, [r7, #15]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070cc:	7bfa      	ldrb	r2, [r7, #15]
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070e2:	7bfa      	ldrb	r2, [r7, #15]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070f8:	7bfa      	ldrb	r2, [r7, #15]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3301      	adds	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	7bfa      	ldrb	r2, [r7, #15]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d3b5      	bcc.n	800708a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	687e      	ldr	r6, [r7, #4]
 8007126:	466d      	mov	r5, sp
 8007128:	f106 0410 	add.w	r4, r6, #16
 800712c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800712e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007138:	e885 0003 	stmia.w	r5, {r0, r1}
 800713c:	1d33      	adds	r3, r6, #4
 800713e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007140:	6838      	ldr	r0, [r7, #0]
 8007142:	f006 fa55 	bl	800d5f0 <USB_DevInit>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e014      	b.n	8007182 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b01      	cmp	r3, #1
 800716e:	d102      	bne.n	8007176 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f80b 	bl	800718c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f006 fc13 	bl	800d9a6 <USB_DevDisconnect>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800718c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	10000003 	.word	0x10000003

080071d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_PWREx_ConfigSupply+0x70>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d00a      	beq.n	80071fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071e8:	4b16      	ldr	r3, [pc, #88]	; (8007244 <HAL_PWREx_ConfigSupply+0x70>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d001      	beq.n	80071fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e01f      	b.n	800723a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e01d      	b.n	800723a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071fe:	4b11      	ldr	r3, [pc, #68]	; (8007244 <HAL_PWREx_ConfigSupply+0x70>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f023 0207 	bic.w	r2, r3, #7
 8007206:	490f      	ldr	r1, [pc, #60]	; (8007244 <HAL_PWREx_ConfigSupply+0x70>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4313      	orrs	r3, r2
 800720c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800720e:	f7fb fac5 	bl	800279c <HAL_GetTick>
 8007212:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007214:	e009      	b.n	800722a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007216:	f7fb fac1 	bl	800279c <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007224:	d901      	bls.n	800722a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e007      	b.n	800723a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_PWREx_ConfigSupply+0x70>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007236:	d1ee      	bne.n	8007216 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	58024800 	.word	0x58024800

08007248 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a04      	ldr	r2, [pc, #16]	; (8007264 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007256:	60d3      	str	r3, [r2, #12]
}
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	58024800 	.word	0x58024800

08007268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08c      	sub	sp, #48	; 0x30
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e3c8      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8087 	beq.w	8007396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007288:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007292:	4b86      	ldr	r3, [pc, #536]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b10      	cmp	r3, #16
 800729c:	d007      	beq.n	80072ae <HAL_RCC_OscConfig+0x46>
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	2b18      	cmp	r3, #24
 80072a2:	d110      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5e>
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d10b      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ae:	4b7f      	ldr	r3, [pc, #508]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d06c      	beq.n	8007394 <HAL_RCC_OscConfig+0x12c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d168      	bne.n	8007394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e3a2      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ce:	d106      	bne.n	80072de <HAL_RCC_OscConfig+0x76>
 80072d0:	4b76      	ldr	r3, [pc, #472]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a75      	ldr	r2, [pc, #468]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	e02e      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x98>
 80072e6:	4b71      	ldr	r3, [pc, #452]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a70      	ldr	r2, [pc, #448]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b6e      	ldr	r3, [pc, #440]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a6d      	ldr	r2, [pc, #436]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80072f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e01d      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007308:	d10c      	bne.n	8007324 <HAL_RCC_OscConfig+0xbc>
 800730a:	4b68      	ldr	r3, [pc, #416]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a67      	ldr	r2, [pc, #412]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b65      	ldr	r3, [pc, #404]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a64      	ldr	r2, [pc, #400]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e00b      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 8007324:	4b61      	ldr	r3, [pc, #388]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a60      	ldr	r2, [pc, #384]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800732a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5d      	ldr	r2, [pc, #372]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007344:	f7fb fa2a 	bl	800279c <HAL_GetTick>
 8007348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800734c:	f7fb fa26 	bl	800279c <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e356      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800735e:	4b53      	ldr	r3, [pc, #332]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0xe4>
 800736a:	e014      	b.n	8007396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736c:	f7fb fa16 	bl	800279c <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007374:	f7fb fa12 	bl	800279c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b64      	cmp	r3, #100	; 0x64
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e342      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007386:	4b49      	ldr	r3, [pc, #292]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f0      	bne.n	8007374 <HAL_RCC_OscConfig+0x10c>
 8007392:	e000      	b.n	8007396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 808c 	beq.w	80074bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073a4:	4b41      	ldr	r3, [pc, #260]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ae:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <HAL_RCC_OscConfig+0x162>
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	2b18      	cmp	r3, #24
 80073be:	d137      	bne.n	8007430 <HAL_RCC_OscConfig+0x1c8>
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d132      	bne.n	8007430 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ca:	4b38      	ldr	r3, [pc, #224]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_RCC_OscConfig+0x17a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e314      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073e2:	4b32      	ldr	r3, [pc, #200]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f023 0219 	bic.w	r2, r3, #25
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	492f      	ldr	r1, [pc, #188]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fb f9d2 	bl	800279c <HAL_GetTick>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073fc:	f7fb f9ce 	bl	800279c <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e2fe      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800740e:	4b27      	ldr	r3, [pc, #156]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f0      	beq.n	80073fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	061b      	lsls	r3, r3, #24
 8007428:	4920      	ldr	r1, [pc, #128]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800742a:	4313      	orrs	r3, r2
 800742c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800742e:	e045      	b.n	80074bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d026      	beq.n	8007486 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007438:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f023 0219 	bic.w	r2, r3, #25
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4919      	ldr	r1, [pc, #100]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744a:	f7fb f9a7 	bl	800279c <HAL_GetTick>
 800744e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007452:	f7fb f9a3 	bl	800279c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e2d3      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007470:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	061b      	lsls	r3, r3, #24
 800747e:	490b      	ldr	r1, [pc, #44]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007480:	4313      	orrs	r3, r2
 8007482:	604b      	str	r3, [r1, #4]
 8007484:	e01a      	b.n	80074bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a08      	ldr	r2, [pc, #32]	; (80074ac <HAL_RCC_OscConfig+0x244>)
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007492:	f7fb f983 	bl	800279c <HAL_GetTick>
 8007496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800749a:	f7fb f97f 	bl	800279c <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d903      	bls.n	80074b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e2af      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
 80074ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80074b0:	4b96      	ldr	r3, [pc, #600]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ee      	bne.n	800749a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d06a      	beq.n	800759e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074c8:	4b90      	ldr	r3, [pc, #576]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074d2:	4b8e      	ldr	r3, [pc, #568]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d007      	beq.n	80074ee <HAL_RCC_OscConfig+0x286>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b18      	cmp	r3, #24
 80074e2:	d11b      	bne.n	800751c <HAL_RCC_OscConfig+0x2b4>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d116      	bne.n	800751c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ee:	4b87      	ldr	r3, [pc, #540]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_RCC_OscConfig+0x29e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d001      	beq.n	8007506 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e282      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007506:	4b81      	ldr	r3, [pc, #516]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	061b      	lsls	r3, r3, #24
 8007514:	497d      	ldr	r1, [pc, #500]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007516:	4313      	orrs	r3, r2
 8007518:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800751a:	e040      	b.n	800759e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d023      	beq.n	800756c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007524:	4b79      	ldr	r3, [pc, #484]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a78      	ldr	r2, [pc, #480]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 800752a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fb f934 	bl	800279c <HAL_GetTick>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007538:	f7fb f930 	bl	800279c <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e260      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800754a:	4b70      	ldr	r3, [pc, #448]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f0      	beq.n	8007538 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007556:	4b6d      	ldr	r3, [pc, #436]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	4969      	ldr	r1, [pc, #420]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007566:	4313      	orrs	r3, r2
 8007568:	60cb      	str	r3, [r1, #12]
 800756a:	e018      	b.n	800759e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800756c:	4b67      	ldr	r3, [pc, #412]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a66      	ldr	r2, [pc, #408]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fb f910 	bl	800279c <HAL_GetTick>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007580:	f7fb f90c 	bl	800279c <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e23c      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007592:	4b5e      	ldr	r3, [pc, #376]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d036      	beq.n	8007618 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d019      	beq.n	80075e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b2:	4b56      	ldr	r3, [pc, #344]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	4a55      	ldr	r2, [pc, #340]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075be:	f7fb f8ed 	bl	800279c <HAL_GetTick>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c6:	f7fb f8e9 	bl	800279c <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e219      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075d8:	4b4c      	ldr	r3, [pc, #304]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80075da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <HAL_RCC_OscConfig+0x35e>
 80075e4:	e018      	b.n	8007618 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e6:	4b49      	ldr	r3, [pc, #292]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	4a48      	ldr	r2, [pc, #288]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f2:	f7fb f8d3 	bl	800279c <HAL_GetTick>
 80075f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075f8:	e008      	b.n	800760c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075fa:	f7fb f8cf 	bl	800279c <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e1ff      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800760c:	4b3f      	ldr	r3, [pc, #252]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f0      	bne.n	80075fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b00      	cmp	r3, #0
 8007622:	d036      	beq.n	8007692 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d019      	beq.n	8007660 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800762c:	4b37      	ldr	r3, [pc, #220]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a36      	ldr	r2, [pc, #216]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007638:	f7fb f8b0 	bl	800279c <HAL_GetTick>
 800763c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007640:	f7fb f8ac 	bl	800279c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e1dc      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007652:	4b2e      	ldr	r3, [pc, #184]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0f0      	beq.n	8007640 <HAL_RCC_OscConfig+0x3d8>
 800765e:	e018      	b.n	8007692 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007660:	4b2a      	ldr	r3, [pc, #168]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a29      	ldr	r2, [pc, #164]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800766a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800766c:	f7fb f896 	bl	800279c <HAL_GetTick>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007674:	f7fb f892 	bl	800279c <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e1c2      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007686:	4b21      	ldr	r3, [pc, #132]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1f0      	bne.n	8007674 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8086 	beq.w	80077ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076a0:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <HAL_RCC_OscConfig+0x4a8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1a      	ldr	r2, [pc, #104]	; (8007710 <HAL_RCC_OscConfig+0x4a8>)
 80076a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076ac:	f7fb f876 	bl	800279c <HAL_GetTick>
 80076b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b4:	f7fb f872 	bl	800279c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	; 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e1a2      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c6:	4b12      	ldr	r3, [pc, #72]	; (8007710 <HAL_RCC_OscConfig+0x4a8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0f0      	beq.n	80076b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d106      	bne.n	80076e8 <HAL_RCC_OscConfig+0x480>
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	4a0b      	ldr	r2, [pc, #44]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80076e0:	f043 0301 	orr.w	r3, r3, #1
 80076e4:	6713      	str	r3, [r2, #112]	; 0x70
 80076e6:	e032      	b.n	800774e <HAL_RCC_OscConfig+0x4e6>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d111      	bne.n	8007714 <HAL_RCC_OscConfig+0x4ac>
 80076f0:	4b06      	ldr	r3, [pc, #24]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	4a05      	ldr	r2, [pc, #20]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	6713      	str	r3, [r2, #112]	; 0x70
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007700:	4a02      	ldr	r2, [pc, #8]	; (800770c <HAL_RCC_OscConfig+0x4a4>)
 8007702:	f023 0304 	bic.w	r3, r3, #4
 8007706:	6713      	str	r3, [r2, #112]	; 0x70
 8007708:	e021      	b.n	800774e <HAL_RCC_OscConfig+0x4e6>
 800770a:	bf00      	nop
 800770c:	58024400 	.word	0x58024400
 8007710:	58024800 	.word	0x58024800
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	2b05      	cmp	r3, #5
 800771a:	d10c      	bne.n	8007736 <HAL_RCC_OscConfig+0x4ce>
 800771c:	4b83      	ldr	r3, [pc, #524]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	4a82      	ldr	r2, [pc, #520]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007722:	f043 0304 	orr.w	r3, r3, #4
 8007726:	6713      	str	r3, [r2, #112]	; 0x70
 8007728:	4b80      	ldr	r3, [pc, #512]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800772a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772c:	4a7f      	ldr	r2, [pc, #508]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	6713      	str	r3, [r2, #112]	; 0x70
 8007734:	e00b      	b.n	800774e <HAL_RCC_OscConfig+0x4e6>
 8007736:	4b7d      	ldr	r3, [pc, #500]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773a:	4a7c      	ldr	r2, [pc, #496]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	6713      	str	r3, [r2, #112]	; 0x70
 8007742:	4b7a      	ldr	r3, [pc, #488]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	4a79      	ldr	r2, [pc, #484]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007748:	f023 0304 	bic.w	r3, r3, #4
 800774c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d015      	beq.n	8007782 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007756:	f7fb f821 	bl	800279c <HAL_GetTick>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800775c:	e00a      	b.n	8007774 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775e:	f7fb f81d 	bl	800279c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f241 3288 	movw	r2, #5000	; 0x1388
 800776c:	4293      	cmp	r3, r2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e14b      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007774:	4b6d      	ldr	r3, [pc, #436]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0ee      	beq.n	800775e <HAL_RCC_OscConfig+0x4f6>
 8007780:	e014      	b.n	80077ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007782:	f7fb f80b 	bl	800279c <HAL_GetTick>
 8007786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800778a:	f7fb f807 	bl	800279c <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f241 3288 	movw	r2, #5000	; 0x1388
 8007798:	4293      	cmp	r3, r2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e135      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077a0:	4b62      	ldr	r3, [pc, #392]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1ee      	bne.n	800778a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 812a 	beq.w	8007a0a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077b6:	4b5d      	ldr	r3, [pc, #372]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077be:	2b18      	cmp	r3, #24
 80077c0:	f000 80ba 	beq.w	8007938 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	f040 8095 	bne.w	80078f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ce:	4b57      	ldr	r3, [pc, #348]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a56      	ldr	r2, [pc, #344]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80077d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fa ffdf 	bl	800279c <HAL_GetTick>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e2:	f7fa ffdb 	bl	800279c <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e10b      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077f4:	4b4d      	ldr	r3, [pc, #308]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f0      	bne.n	80077e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007800:	4b4a      	ldr	r3, [pc, #296]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007804:	4b4a      	ldr	r3, [pc, #296]	; (8007930 <HAL_RCC_OscConfig+0x6c8>)
 8007806:	4013      	ands	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007810:	0112      	lsls	r2, r2, #4
 8007812:	430a      	orrs	r2, r1
 8007814:	4945      	ldr	r1, [pc, #276]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007816:	4313      	orrs	r3, r2
 8007818:	628b      	str	r3, [r1, #40]	; 0x28
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	3b01      	subs	r3, #1
 8007820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	3b01      	subs	r3, #1
 800782a:	025b      	lsls	r3, r3, #9
 800782c:	b29b      	uxth	r3, r3
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	3b01      	subs	r3, #1
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007842:	3b01      	subs	r3, #1
 8007844:	061b      	lsls	r3, r3, #24
 8007846:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800784a:	4938      	ldr	r1, [pc, #224]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800784c:	4313      	orrs	r3, r2
 800784e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007850:	4b36      	ldr	r3, [pc, #216]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a35      	ldr	r2, [pc, #212]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800785c:	4b33      	ldr	r3, [pc, #204]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800785e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007860:	4b34      	ldr	r3, [pc, #208]	; (8007934 <HAL_RCC_OscConfig+0x6cc>)
 8007862:	4013      	ands	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007868:	00d2      	lsls	r2, r2, #3
 800786a:	4930      	ldr	r1, [pc, #192]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007870:	4b2e      	ldr	r3, [pc, #184]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	f023 020c 	bic.w	r2, r3, #12
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	492b      	ldr	r1, [pc, #172]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007882:	4b2a      	ldr	r3, [pc, #168]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	f023 0202 	bic.w	r2, r3, #2
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788e:	4927      	ldr	r1, [pc, #156]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007890:	4313      	orrs	r3, r2
 8007892:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a24      	ldr	r2, [pc, #144]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 800789a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800789e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a0:	4b22      	ldr	r3, [pc, #136]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4a21      	ldr	r2, [pc, #132]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078ac:	4b1f      	ldr	r3, [pc, #124]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078b8:	4b1c      	ldr	r3, [pc, #112]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078c4:	4b19      	ldr	r3, [pc, #100]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a18      	ldr	r2, [pc, #96]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fa ff64 	bl	800279c <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d8:	f7fa ff60 	bl	800279c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e090      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f0      	beq.n	80078d8 <HAL_RCC_OscConfig+0x670>
 80078f6:	e088      	b.n	8007a0a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a0b      	ldr	r2, [pc, #44]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 80078fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007904:	f7fa ff4a 	bl	800279c <HAL_GetTick>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800790a:	e008      	b.n	800791e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800790c:	f7fa ff46 	bl	800279c <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b02      	cmp	r3, #2
 8007918:	d901      	bls.n	800791e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e076      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800791e:	4b03      	ldr	r3, [pc, #12]	; (800792c <HAL_RCC_OscConfig+0x6c4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1f0      	bne.n	800790c <HAL_RCC_OscConfig+0x6a4>
 800792a:	e06e      	b.n	8007a0a <HAL_RCC_OscConfig+0x7a2>
 800792c:	58024400 	.word	0x58024400
 8007930:	fffffc0c 	.word	0xfffffc0c
 8007934:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800793e:	4b35      	ldr	r3, [pc, #212]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b01      	cmp	r3, #1
 800794a:	d031      	beq.n	80079b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f003 0203 	and.w	r2, r3, #3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007956:	429a      	cmp	r2, r3
 8007958:	d12a      	bne.n	80079b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d122      	bne.n	80079b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007976:	429a      	cmp	r2, r3
 8007978:	d11a      	bne.n	80079b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	0a5b      	lsrs	r3, r3, #9
 800797e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007988:	429a      	cmp	r2, r3
 800798a:	d111      	bne.n	80079b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d108      	bne.n	80079b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0e1b      	lsrs	r3, r3, #24
 80079a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e02b      	b.n	8007a0c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079b4:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 80079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b8:	08db      	lsrs	r3, r3, #3
 80079ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d01f      	beq.n	8007a0a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079d6:	f7fa fee1 	bl	800279c <HAL_GetTick>
 80079da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80079dc:	bf00      	nop
 80079de:	f7fa fedd 	bl	800279c <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d0f9      	beq.n	80079de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 80079ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <HAL_RCC_OscConfig+0x7b0>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80079f6:	00d2      	lsls	r2, r2, #3
 80079f8:	4906      	ldr	r1, [pc, #24]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <HAL_RCC_OscConfig+0x7ac>)
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3730      	adds	r7, #48	; 0x30
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	58024400 	.word	0x58024400
 8007a18:	ffff0007 	.word	0xffff0007

08007a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e19c      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a30:	4b8a      	ldr	r3, [pc, #552]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d910      	bls.n	8007a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3e:	4b87      	ldr	r3, [pc, #540]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f023 020f 	bic.w	r2, r3, #15
 8007a46:	4985      	ldr	r1, [pc, #532]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4e:	4b83      	ldr	r3, [pc, #524]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e184      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d010      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	4b7b      	ldr	r3, [pc, #492]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d908      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a7c:	4b78      	ldr	r3, [pc, #480]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	4975      	ldr	r1, [pc, #468]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	4b70      	ldr	r3, [pc, #448]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d908      	bls.n	8007abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aaa:	4b6d      	ldr	r3, [pc, #436]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	496a      	ldr	r1, [pc, #424]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d010      	beq.n	8007aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	4b64      	ldr	r3, [pc, #400]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d908      	bls.n	8007aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ad8:	4b61      	ldr	r3, [pc, #388]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	495e      	ldr	r1, [pc, #376]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69da      	ldr	r2, [r3, #28]
 8007afa:	4b59      	ldr	r3, [pc, #356]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d908      	bls.n	8007b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b06:	4b56      	ldr	r3, [pc, #344]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	4953      	ldr	r1, [pc, #332]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68da      	ldr	r2, [r3, #12]
 8007b28:	4b4d      	ldr	r3, [pc, #308]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d908      	bls.n	8007b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b34:	4b4a      	ldr	r3, [pc, #296]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f023 020f 	bic.w	r2, r3, #15
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	4947      	ldr	r1, [pc, #284]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d055      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b52:	4b43      	ldr	r3, [pc, #268]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	4940      	ldr	r1, [pc, #256]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d107      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b6c:	4b3c      	ldr	r3, [pc, #240]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d121      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0f6      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d107      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b84:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d115      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0ea      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b9c:	4b30      	ldr	r3, [pc, #192]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0de      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bac:	4b2c      	ldr	r3, [pc, #176]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0d6      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bbc:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f023 0207 	bic.w	r2, r3, #7
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4925      	ldr	r1, [pc, #148]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bce:	f7fa fde5 	bl	800279c <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bd6:	f7fa fde1 	bl	800279c <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e0be      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bec:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d1eb      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d010      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d208      	bcs.n	8007c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c1a:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f023 020f 	bic.w	r2, r3, #15
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	490e      	ldr	r1, [pc, #56]	; (8007c60 <HAL_RCC_ClockConfig+0x244>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d214      	bcs.n	8007c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 020f 	bic.w	r2, r3, #15
 8007c42:	4906      	ldr	r1, [pc, #24]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <HAL_RCC_ClockConfig+0x240>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e086      	b.n	8007d6a <HAL_RCC_ClockConfig+0x34e>
 8007c5c:	52002000 	.word	0x52002000
 8007c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	4b3f      	ldr	r3, [pc, #252]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d208      	bcs.n	8007c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c80:	4b3c      	ldr	r3, [pc, #240]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	4939      	ldr	r1, [pc, #228]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	4b34      	ldr	r3, [pc, #208]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d208      	bcs.n	8007cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cae:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	492e      	ldr	r1, [pc, #184]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	4b28      	ldr	r3, [pc, #160]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d208      	bcs.n	8007cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cdc:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	4922      	ldr	r1, [pc, #136]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d208      	bcs.n	8007d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d0a:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4917      	ldr	r1, [pc, #92]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d1c:	f000 f89e 	bl	8007e5c <HAL_RCC_GetSysClockFreq>
 8007d20:	4602      	mov	r2, r0
 8007d22:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	4912      	ldr	r1, [pc, #72]	; (8007d78 <HAL_RCC_ClockConfig+0x35c>)
 8007d2e:	5ccb      	ldrb	r3, [r1, r3]
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	fa22 f303 	lsr.w	r3, r2, r3
 8007d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <HAL_RCC_ClockConfig+0x358>)
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <HAL_RCC_ClockConfig+0x35c>)
 8007d44:	5cd3      	ldrb	r3, [r2, r3]
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d50:	4a0a      	ldr	r2, [pc, #40]	; (8007d7c <HAL_RCC_ClockConfig+0x360>)
 8007d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d54:	4a0a      	ldr	r2, [pc, #40]	; (8007d80 <HAL_RCC_ClockConfig+0x364>)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <HAL_RCC_ClockConfig+0x368>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fa fcd2 	bl	8002708 <HAL_InitTick>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	0800de6c 	.word	0x0800de6c
 8007d7c:	24000004 	.word	0x24000004
 8007d80:	24000000 	.word	0x24000000
 8007d84:	24000008 	.word	0x24000008

08007d88 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08c      	sub	sp, #48	; 0x30
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d12a      	bne.n	8007df0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007d9a:	4b2d      	ldr	r3, [pc, #180]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007da0:	4a2b      	ldr	r2, [pc, #172]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007daa:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007dce:	f107 031c 	add.w	r3, r7, #28
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	481f      	ldr	r0, [pc, #124]	; (8007e54 <HAL_RCC_MCOConfig+0xcc>)
 8007dd6:	f7fe fdcb 	bl	8006970 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	430b      	orrs	r3, r1
 8007de8:	4919      	ldr	r1, [pc, #100]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007dee:	e02a      	b.n	8007e46 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007df0:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007df6:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007df8:	f043 0304 	orr.w	r3, r3, #4
 8007dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e14:	2302      	movs	r3, #2
 8007e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007e20:	2300      	movs	r3, #0
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007e24:	f107 031c 	add.w	r3, r7, #28
 8007e28:	4619      	mov	r1, r3
 8007e2a:	480b      	ldr	r0, [pc, #44]	; (8007e58 <HAL_RCC_MCOConfig+0xd0>)
 8007e2c:	f7fe fda0 	bl	8006970 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	01d9      	lsls	r1, r3, #7
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	4903      	ldr	r1, [pc, #12]	; (8007e50 <HAL_RCC_MCOConfig+0xc8>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	610b      	str	r3, [r1, #16]
}
 8007e46:	bf00      	nop
 8007e48:	3730      	adds	r7, #48	; 0x30
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	58024400 	.word	0x58024400
 8007e54:	58020000 	.word	0x58020000
 8007e58:	58020800 	.word	0x58020800

08007e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b089      	sub	sp, #36	; 0x24
 8007e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e62:	4bb3      	ldr	r3, [pc, #716]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e6a:	2b18      	cmp	r3, #24
 8007e6c:	f200 8155 	bhi.w	800811a <HAL_RCC_GetSysClockFreq+0x2be>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007edd 	.word	0x08007edd
 8007e7c:	0800811b 	.word	0x0800811b
 8007e80:	0800811b 	.word	0x0800811b
 8007e84:	0800811b 	.word	0x0800811b
 8007e88:	0800811b 	.word	0x0800811b
 8007e8c:	0800811b 	.word	0x0800811b
 8007e90:	0800811b 	.word	0x0800811b
 8007e94:	0800811b 	.word	0x0800811b
 8007e98:	08007f03 	.word	0x08007f03
 8007e9c:	0800811b 	.word	0x0800811b
 8007ea0:	0800811b 	.word	0x0800811b
 8007ea4:	0800811b 	.word	0x0800811b
 8007ea8:	0800811b 	.word	0x0800811b
 8007eac:	0800811b 	.word	0x0800811b
 8007eb0:	0800811b 	.word	0x0800811b
 8007eb4:	0800811b 	.word	0x0800811b
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	0800811b 	.word	0x0800811b
 8007ec0:	0800811b 	.word	0x0800811b
 8007ec4:	0800811b 	.word	0x0800811b
 8007ec8:	0800811b 	.word	0x0800811b
 8007ecc:	0800811b 	.word	0x0800811b
 8007ed0:	0800811b 	.word	0x0800811b
 8007ed4:	0800811b 	.word	0x0800811b
 8007ed8:	08007f0f 	.word	0x08007f0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007edc:	4b94      	ldr	r3, [pc, #592]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee8:	4b91      	ldr	r3, [pc, #580]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	4a90      	ldr	r2, [pc, #576]	; (8008134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007efa:	e111      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007efc:	4b8d      	ldr	r3, [pc, #564]	; (8008134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007efe:	61bb      	str	r3, [r7, #24]
      break;
 8007f00:	e10e      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f02:	4b8d      	ldr	r3, [pc, #564]	; (8008138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f04:	61bb      	str	r3, [r7, #24]
      break;
 8007f06:	e10b      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f08:	4b8c      	ldr	r3, [pc, #560]	; (800813c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f0a:	61bb      	str	r3, [r7, #24]
      break;
 8007f0c:	e108      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f0e:	4b88      	ldr	r3, [pc, #544]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f18:	4b85      	ldr	r3, [pc, #532]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	091b      	lsrs	r3, r3, #4
 8007f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f24:	4b82      	ldr	r3, [pc, #520]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f2e:	4b80      	ldr	r3, [pc, #512]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f32:	08db      	lsrs	r3, r3, #3
 8007f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80e1 	beq.w	8008114 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	f000 8083 	beq.w	8008060 <HAL_RCC_GetSysClockFreq+0x204>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f200 80a1 	bhi.w	80080a4 <HAL_RCC_GetSysClockFreq+0x248>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_RCC_GetSysClockFreq+0x114>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d056      	beq.n	800801c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f6e:	e099      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f70:	4b6f      	ldr	r3, [pc, #444]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02d      	beq.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f7c:	4b6c      	ldr	r3, [pc, #432]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	08db      	lsrs	r3, r3, #3
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	4a6b      	ldr	r2, [pc, #428]	; (8008134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa6:	4b62      	ldr	r3, [pc, #392]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	ee07 3a90 	vmov	s15, r3
 8007fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007fd6:	e087      	b.n	80080e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008144 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fea:	4b51      	ldr	r3, [pc, #324]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ffe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800800e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800801a:	e065      	b.n	80080e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008026:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800802a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802e:	4b40      	ldr	r3, [pc, #256]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008042:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800805e:	e043      	b.n	80080e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800814c <HAL_RCC_GetSysClockFreq+0x2f0>
 800806e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008072:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008082:	ed97 6a02 	vldr	s12, [r7, #8]
 8008086:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800808a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080a2:	e021      	b.n	80080e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008148 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080b6:	4b1e      	ldr	r3, [pc, #120]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008140 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	0a5b      	lsrs	r3, r3, #9
 80080ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f2:	3301      	adds	r3, #1
 80080f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008100:	edd7 6a07 	vldr	s13, [r7, #28]
 8008104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810c:	ee17 3a90 	vmov	r3, s15
 8008110:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008112:	e005      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
      break;
 8008118:	e002      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800811c:	61bb      	str	r3, [r7, #24]
      break;
 800811e:	bf00      	nop
  }

  return sysclockfreq;
 8008120:	69bb      	ldr	r3, [r7, #24]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3724      	adds	r7, #36	; 0x24
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	58024400 	.word	0x58024400
 8008134:	03d09000 	.word	0x03d09000
 8008138:	003d0900 	.word	0x003d0900
 800813c:	02faf080 	.word	0x02faf080
 8008140:	46000000 	.word	0x46000000
 8008144:	4c742400 	.word	0x4c742400
 8008148:	4a742400 	.word	0x4a742400
 800814c:	4c3ebc20 	.word	0x4c3ebc20

08008150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008156:	f7ff fe81 	bl	8007e5c <HAL_RCC_GetSysClockFreq>
 800815a:	4602      	mov	r2, r0
 800815c:	4b10      	ldr	r3, [pc, #64]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	0a1b      	lsrs	r3, r3, #8
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	490f      	ldr	r1, [pc, #60]	; (80081a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008168:	5ccb      	ldrb	r3, [r1, r3]
 800816a:	f003 031f 	and.w	r3, r3, #31
 800816e:	fa22 f303 	lsr.w	r3, r2, r3
 8008172:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f003 030f 	and.w	r3, r3, #15
 800817c:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800817e:	5cd3      	ldrb	r3, [r2, r3]
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	fa22 f303 	lsr.w	r3, r2, r3
 800818a:	4a07      	ldr	r2, [pc, #28]	; (80081a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800818c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800818e:	4a07      	ldr	r2, [pc, #28]	; (80081ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008196:	681b      	ldr	r3, [r3, #0]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	58024400 	.word	0x58024400
 80081a4:	0800de6c 	.word	0x0800de6c
 80081a8:	24000004 	.word	0x24000004
 80081ac:	24000000 	.word	0x24000000

080081b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80081b4:	f7ff ffcc 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 80081b8:	4602      	mov	r2, r0
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	4904      	ldr	r1, [pc, #16]	; (80081d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081c6:	5ccb      	ldrb	r3, [r1, r3]
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	58024400 	.word	0x58024400
 80081d8:	0800de6c 	.word	0x0800de6c

080081dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081e0:	f7ff ffb6 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	4904      	ldr	r1, [pc, #16]	; (8008204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081f2:	5ccb      	ldrb	r3, [r1, r3]
 80081f4:	f003 031f 	and.w	r3, r3, #31
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	58024400 	.word	0x58024400
 8008204:	0800de6c 	.word	0x0800de6c

08008208 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800820c:	b0c6      	sub	sp, #280	; 0x118
 800820e:	af00      	add	r7, sp, #0
 8008210:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008214:	2300      	movs	r3, #0
 8008216:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800821a:	2300      	movs	r3, #0
 800821c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800822c:	2500      	movs	r5, #0
 800822e:	ea54 0305 	orrs.w	r3, r4, r5
 8008232:	d049      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800823e:	d02f      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008244:	d828      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800824a:	d01a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800824c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008250:	d822      	bhi.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800825a:	d007      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800825c:	e01c      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825e:	4bab      	ldr	r3, [pc, #684]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4aaa      	ldr	r2, [pc, #680]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800826a:	e01a      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008270:	3308      	adds	r3, #8
 8008272:	2102      	movs	r1, #2
 8008274:	4618      	mov	r0, r3
 8008276:	f002 fa49 	bl	800a70c <RCCEx_PLL2_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008280:	e00f      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008286:	3328      	adds	r3, #40	; 0x28
 8008288:	2102      	movs	r1, #2
 800828a:	4618      	mov	r0, r3
 800828c:	f002 faf0 	bl	800a870 <RCCEx_PLL3_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008296:	e004      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800829e:	e000      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80082a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80082aa:	4b98      	ldr	r3, [pc, #608]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b8:	4a94      	ldr	r2, [pc, #592]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6513      	str	r3, [r2, #80]	; 0x50
 80082be:	e003      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80082c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	ea58 0309 	orrs.w	r3, r8, r9
 80082dc:	d047      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d82a      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008305 	.word	0x08008305
 80082f4:	08008313 	.word	0x08008313
 80082f8:	08008329 	.word	0x08008329
 80082fc:	08008347 	.word	0x08008347
 8008300:	08008347 	.word	0x08008347
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008304:	4b81      	ldr	r3, [pc, #516]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a80      	ldr	r2, [pc, #512]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800830a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800830e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008310:	e01a      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008316:	3308      	adds	r3, #8
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f002 f9f6 	bl	800a70c <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008326:	e00f      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832c:	3328      	adds	r3, #40	; 0x28
 800832e:	2100      	movs	r1, #0
 8008330:	4618      	mov	r0, r3
 8008332:	f002 fa9d 	bl	800a870 <RCCEx_PLL3_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800833c:	e004      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008348:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008350:	4b6e      	ldr	r3, [pc, #440]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	f023 0107 	bic.w	r1, r3, #7
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	4a6b      	ldr	r2, [pc, #428]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008360:	430b      	orrs	r3, r1
 8008362:	6513      	str	r3, [r2, #80]	; 0x50
 8008364:	e003      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800836a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800837a:	f04f 0b00 	mov.w	fp, #0
 800837e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008382:	d05b      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800838c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008390:	d03b      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008392:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008396:	d834      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800839c:	d037      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800839e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083a2:	d82e      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083a8:	d033      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80083aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083ae:	d828      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083b4:	d01a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80083b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ba:	d822      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80083c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083c4:	d007      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80083c6:	e01c      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c8:	4b50      	ldr	r3, [pc, #320]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a4f      	ldr	r2, [pc, #316]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083d4:	e01e      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	3308      	adds	r3, #8
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f002 f994 	bl	800a70c <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083ea:	e013      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f0:	3328      	adds	r3, #40	; 0x28
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 fa3b 	bl	800a870 <RCCEx_PLL3_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008400:	e008      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008408:	e004      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800841c:	4b3b      	ldr	r3, [pc, #236]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800841e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008420:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800842c:	4a37      	ldr	r2, [pc, #220]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800842e:	430b      	orrs	r3, r1
 8008430:	6593      	str	r3, [r2, #88]	; 0x58
 8008432:	e003      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008438:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800844c:	2300      	movs	r3, #0
 800844e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008452:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008456:	460b      	mov	r3, r1
 8008458:	4313      	orrs	r3, r2
 800845a:	d05d      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800845c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008460:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008464:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008468:	d03b      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800846a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800846e:	d834      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008474:	d037      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800847a:	d82e      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800847c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008480:	d033      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008486:	d828      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800848c:	d01a      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800848e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008492:	d822      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800849c:	d007      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800849e:	e01c      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a0:	4b1a      	ldr	r3, [pc, #104]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	4a19      	ldr	r2, [pc, #100]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084ac:	e01e      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b2:	3308      	adds	r3, #8
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f002 f928 	bl	800a70c <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084c2:	e013      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	3328      	adds	r3, #40	; 0x28
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f002 f9cf 	bl	800a870 <RCCEx_PLL3_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084d8:	e008      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084e0:	e004      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084e2:	bf00      	nop
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084e6:	bf00      	nop
 80084e8:	e000      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80084ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10d      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80084f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80084fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008504:	4a01      	ldr	r2, [pc, #4]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008506:	430b      	orrs	r3, r1
 8008508:	6593      	str	r3, [r2, #88]	; 0x58
 800850a:	e005      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800850c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008514:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008524:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008528:	2300      	movs	r3, #0
 800852a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800852e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008532:	460b      	mov	r3, r1
 8008534:	4313      	orrs	r3, r2
 8008536:	d03a      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	2b30      	cmp	r3, #48	; 0x30
 8008540:	d01f      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008542:	2b30      	cmp	r3, #48	; 0x30
 8008544:	d819      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008546:	2b20      	cmp	r3, #32
 8008548:	d00c      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d815      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d019      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008552:	2b10      	cmp	r3, #16
 8008554:	d111      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008556:	4baa      	ldr	r3, [pc, #680]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	4aa9      	ldr	r2, [pc, #676]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800855c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008560:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008562:	e011      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008568:	3308      	adds	r3, #8
 800856a:	2102      	movs	r1, #2
 800856c:	4618      	mov	r0, r3
 800856e:	f002 f8cd 	bl	800a70c <RCCEx_PLL2_Config>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008578:	e006      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008580:	e002      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008588:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008590:	4b9b      	ldr	r3, [pc, #620]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008594:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800859c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859e:	4a98      	ldr	r2, [pc, #608]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80085a0:	430b      	orrs	r3, r1
 80085a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085a4:	e003      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80085ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d051      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d8:	d035      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80085da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085de:	d82e      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085e4:	d031      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80085e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ea:	d828      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f0:	d01a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f6:	d822      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80085fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008600:	d007      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008602:	e01c      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008604:	4b7e      	ldr	r3, [pc, #504]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a7d      	ldr	r2, [pc, #500]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800860a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008610:	e01c      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008616:	3308      	adds	r3, #8
 8008618:	2100      	movs	r1, #0
 800861a:	4618      	mov	r0, r3
 800861c:	f002 f876 	bl	800a70c <RCCEx_PLL2_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008626:	e011      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800862c:	3328      	adds	r3, #40	; 0x28
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f002 f91d 	bl	800a870 <RCCEx_PLL3_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800863c:	e006      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008644:	e002      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008646:	bf00      	nop
 8008648:	e000      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800864a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800864c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008654:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008658:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800865c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008662:	4a67      	ldr	r2, [pc, #412]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008664:	430b      	orrs	r3, r1
 8008666:	6513      	str	r3, [r2, #80]	; 0x50
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800866e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800867e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008682:	2300      	movs	r3, #0
 8008684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008688:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800868c:	460b      	mov	r3, r1
 800868e:	4313      	orrs	r3, r2
 8008690:	d053      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800869c:	d033      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800869e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a2:	d82c      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086a8:	d02f      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80086aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086ae:	d826      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086b4:	d02b      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80086b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086ba:	d820      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c0:	d012      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80086c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c6:	d81a      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d022      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d115      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d6:	3308      	adds	r3, #8
 80086d8:	2101      	movs	r1, #1
 80086da:	4618      	mov	r0, r3
 80086dc:	f002 f816 	bl	800a70c <RCCEx_PLL2_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086e6:	e015      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ec:	3328      	adds	r3, #40	; 0x28
 80086ee:	2101      	movs	r1, #1
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 f8bd 	bl	800a870 <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086fc:	e00a      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008704:	e006      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008706:	bf00      	nop
 8008708:	e004      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800870a:	bf00      	nop
 800870c:	e002      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800870e:	bf00      	nop
 8008710:	e000      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008714:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800871c:	4b38      	ldr	r3, [pc, #224]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800871e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008720:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800872a:	4a35      	ldr	r2, [pc, #212]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800872c:	430b      	orrs	r3, r1
 800872e:	6513      	str	r3, [r2, #80]	; 0x50
 8008730:	e003      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008736:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800874a:	2300      	movs	r3, #0
 800874c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008750:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008754:	460b      	mov	r3, r1
 8008756:	4313      	orrs	r3, r2
 8008758:	d058      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800875a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800875e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008766:	d033      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800876c:	d82c      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008772:	d02f      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008778:	d826      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800877a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800877e:	d02b      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008784:	d820      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878a:	d012      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800878c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008790:	d81a      	bhi.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d022      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800879a:	d115      	bne.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a0:	3308      	adds	r3, #8
 80087a2:	2101      	movs	r1, #1
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 ffb1 	bl	800a70c <RCCEx_PLL2_Config>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087b0:	e015      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b6:	3328      	adds	r3, #40	; 0x28
 80087b8:	2101      	movs	r1, #1
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 f858 	bl	800a870 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087c6:	e00a      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80087ce:	e006      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087d0:	bf00      	nop
 80087d2:	e004      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087d4:	bf00      	nop
 80087d6:	e002      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087d8:	bf00      	nop
 80087da:	e000      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80087dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10e      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087e6:	4b06      	ldr	r3, [pc, #24]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087f6:	4a02      	ldr	r2, [pc, #8]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6593      	str	r3, [r2, #88]	; 0x58
 80087fc:	e006      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x604>
 80087fe:	bf00      	nop
 8008800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008822:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	d037      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800882c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008836:	d00e      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800883c:	d816      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d018      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008846:	d111      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008848:	4bc4      	ldr	r3, [pc, #784]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4ac3      	ldr	r2, [pc, #780]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800884e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008854:	e00f      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885a:	3308      	adds	r3, #8
 800885c:	2101      	movs	r1, #1
 800885e:	4618      	mov	r0, r3
 8008860:	f001 ff54 	bl	800a70c <RCCEx_PLL2_Config>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800886a:	e004      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008872:	e000      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800887e:	4bb7      	ldr	r3, [pc, #732]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	4ab3      	ldr	r2, [pc, #716]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800888e:	430b      	orrs	r3, r1
 8008890:	6513      	str	r3, [r2, #80]	; 0x50
 8008892:	e003      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008898:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80088a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80088b6:	460b      	mov	r3, r1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d039      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80088bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d81c      	bhi.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008909 	.word	0x08008909
 80088d0:	080088dd 	.word	0x080088dd
 80088d4:	080088eb 	.word	0x080088eb
 80088d8:	08008909 	.word	0x08008909
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088dc:	4b9f      	ldr	r3, [pc, #636]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4a9e      	ldr	r2, [pc, #632]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088e8:	e00f      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ee:	3308      	adds	r3, #8
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 ff0a 	bl	800a70c <RCCEx_PLL2_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088fe:	e004      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008906:	e000      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800890a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008912:	4b92      	ldr	r3, [pc, #584]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008916:	f023 0103 	bic.w	r1, r3, #3
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008920:	4a8e      	ldr	r2, [pc, #568]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008922:	430b      	orrs	r3, r1
 8008924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008926:	e003      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008928:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800892c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800893c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008940:	2300      	movs	r3, #0
 8008942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008946:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800894a:	460b      	mov	r3, r1
 800894c:	4313      	orrs	r3, r2
 800894e:	f000 8099 	beq.w	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008952:	4b83      	ldr	r3, [pc, #524]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a82      	ldr	r2, [pc, #520]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800895c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800895e:	f7f9 ff1d 	bl	800279c <HAL_GetTick>
 8008962:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008966:	e00b      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008968:	f7f9 ff18 	bl	800279c <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b64      	cmp	r3, #100	; 0x64
 8008976:	d903      	bls.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800897e:	e005      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008980:	4b77      	ldr	r3, [pc, #476]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0ed      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800898c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008990:	2b00      	cmp	r3, #0
 8008992:	d173      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008994:	4b71      	ldr	r3, [pc, #452]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089a0:	4053      	eors	r3, r2
 80089a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d015      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089aa:	4b6c      	ldr	r3, [pc, #432]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089b6:	4b69      	ldr	r3, [pc, #420]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	4a68      	ldr	r2, [pc, #416]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089c2:	4b66      	ldr	r3, [pc, #408]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c6:	4a65      	ldr	r2, [pc, #404]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089ce:	4a63      	ldr	r2, [pc, #396]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e2:	d118      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e4:	f7f9 feda 	bl	800279c <HAL_GetTick>
 80089e8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ec:	e00d      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ee:	f7f9 fed5 	bl	800279c <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d903      	bls.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008a08:	e005      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a0a:	4b54      	ldr	r3, [pc, #336]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0eb      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d129      	bne.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a2e:	d10e      	bne.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008a30:	4b4a      	ldr	r3, [pc, #296]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a40:	091a      	lsrs	r2, r3, #4
 8008a42:	4b48      	ldr	r3, [pc, #288]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	4a45      	ldr	r2, [pc, #276]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6113      	str	r3, [r2, #16]
 8008a4c:	e005      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008a4e:	4b43      	ldr	r3, [pc, #268]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	4a42      	ldr	r2, [pc, #264]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a58:	6113      	str	r3, [r2, #16]
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a6a:	4a3c      	ldr	r2, [pc, #240]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a70:	e008      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8008a7a:	e003      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f002 0301 	and.w	r3, r2, #1
 8008a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f000 808f 	beq.w	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aac:	2b28      	cmp	r3, #40	; 0x28
 8008aae:	d871      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008ab0:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008b9d 	.word	0x08008b9d
 8008abc:	08008b95 	.word	0x08008b95
 8008ac0:	08008b95 	.word	0x08008b95
 8008ac4:	08008b95 	.word	0x08008b95
 8008ac8:	08008b95 	.word	0x08008b95
 8008acc:	08008b95 	.word	0x08008b95
 8008ad0:	08008b95 	.word	0x08008b95
 8008ad4:	08008b95 	.word	0x08008b95
 8008ad8:	08008b69 	.word	0x08008b69
 8008adc:	08008b95 	.word	0x08008b95
 8008ae0:	08008b95 	.word	0x08008b95
 8008ae4:	08008b95 	.word	0x08008b95
 8008ae8:	08008b95 	.word	0x08008b95
 8008aec:	08008b95 	.word	0x08008b95
 8008af0:	08008b95 	.word	0x08008b95
 8008af4:	08008b95 	.word	0x08008b95
 8008af8:	08008b7f 	.word	0x08008b7f
 8008afc:	08008b95 	.word	0x08008b95
 8008b00:	08008b95 	.word	0x08008b95
 8008b04:	08008b95 	.word	0x08008b95
 8008b08:	08008b95 	.word	0x08008b95
 8008b0c:	08008b95 	.word	0x08008b95
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008b95 	.word	0x08008b95
 8008b18:	08008b9d 	.word	0x08008b9d
 8008b1c:	08008b95 	.word	0x08008b95
 8008b20:	08008b95 	.word	0x08008b95
 8008b24:	08008b95 	.word	0x08008b95
 8008b28:	08008b95 	.word	0x08008b95
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008b95 	.word	0x08008b95
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008b95 	.word	0x08008b95
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b95 	.word	0x08008b95
 8008b48:	08008b95 	.word	0x08008b95
 8008b4c:	08008b95 	.word	0x08008b95
 8008b50:	08008b95 	.word	0x08008b95
 8008b54:	08008b95 	.word	0x08008b95
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	58024400 	.word	0x58024400
 8008b60:	58024800 	.word	0x58024800
 8008b64:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fdcb 	bl	800a70c <RCCEx_PLL2_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e00f      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b82:	3328      	adds	r3, #40	; 0x28
 8008b84:	2101      	movs	r1, #1
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fe72 	bl	800a870 <RCCEx_PLL3_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b92:	e004      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b9a:	e000      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ba6:	4bbf      	ldr	r3, [pc, #764]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008baa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bb4:	4abb      	ldr	r2, [pc, #748]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	6553      	str	r3, [r2, #84]	; 0x54
 8008bba:	e003      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 0302 	and.w	r3, r2, #2
 8008bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d041      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	d824      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c41 	.word	0x08008c41
 8008bf8:	08008c0d 	.word	0x08008c0d
 8008bfc:	08008c23 	.word	0x08008c23
 8008c00:	08008c41 	.word	0x08008c41
 8008c04:	08008c41 	.word	0x08008c41
 8008c08:	08008c41 	.word	0x08008c41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	3308      	adds	r3, #8
 8008c12:	2101      	movs	r1, #1
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 fd79 	bl	800a70c <RCCEx_PLL2_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c20:	e00f      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	3328      	adds	r3, #40	; 0x28
 8008c28:	2101      	movs	r1, #1
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 fe20 	bl	800a870 <RCCEx_PLL3_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c36:	e004      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c3e:	e000      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c4a:	4b96      	ldr	r3, [pc, #600]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4e:	f023 0107 	bic.w	r1, r3, #7
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c58:	4a92      	ldr	r2, [pc, #584]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	6553      	str	r3, [r2, #84]	; 0x54
 8008c5e:	e003      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f002 0304 	and.w	r3, r2, #4
 8008c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c82:	460b      	mov	r3, r1
 8008c84:	4313      	orrs	r3, r2
 8008c86:	d044      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d825      	bhi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008ce9 	.word	0x08008ce9
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008ccb 	.word	0x08008ccb
 8008ca8:	08008ce9 	.word	0x08008ce9
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008ce9 	.word	0x08008ce9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb8:	3308      	adds	r3, #8
 8008cba:	2101      	movs	r1, #1
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f001 fd25 	bl	800a70c <RCCEx_PLL2_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cc8:	e00f      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cce:	3328      	adds	r3, #40	; 0x28
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fdcc 	bl	800a870 <RCCEx_PLL3_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cf2:	4b6c      	ldr	r3, [pc, #432]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf6:	f023 0107 	bic.w	r1, r3, #7
 8008cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	4a68      	ldr	r2, [pc, #416]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	6593      	str	r3, [r2, #88]	; 0x58
 8008d08:	e003      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f002 0320 	and.w	r3, r2, #32
 8008d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d22:	2300      	movs	r3, #0
 8008d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d055      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d3e:	d033      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d44:	d82c      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4a:	d02f      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d50:	d826      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d56:	d02b      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008d58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d5c:	d820      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d62:	d012      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d68:	d81a      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d022      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d72:	d115      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d78:	3308      	adds	r3, #8
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 fcc5 	bl	800a70c <RCCEx_PLL2_Config>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d88:	e015      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d8e:	3328      	adds	r3, #40	; 0x28
 8008d90:	2102      	movs	r1, #2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fd6c 	bl	800a870 <RCCEx_PLL3_Config>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008da6:	e006      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008da8:	bf00      	nop
 8008daa:	e004      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008dac:	bf00      	nop
 8008dae:	e002      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008db0:	bf00      	nop
 8008db2:	e000      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dbe:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dce:	4a35      	ldr	r2, [pc, #212]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6553      	str	r3, [r2, #84]	; 0x54
 8008dd4:	e003      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dee:	2300      	movs	r3, #0
 8008df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008df4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	d058      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e0a:	d033      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008e0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008e10:	d82c      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e16:	d02f      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1c:	d826      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e22:	d02b      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e28:	d820      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2e:	d012      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e34:	d81a      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d022      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3e:	d115      	bne.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	3308      	adds	r3, #8
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fc5f 	bl	800a70c <RCCEx_PLL2_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e54:	e015      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5a:	3328      	adds	r3, #40	; 0x28
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 fd06 	bl	800a870 <RCCEx_PLL3_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008e72:	e006      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e74:	bf00      	nop
 8008e76:	e004      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e78:	bf00      	nop
 8008e7a:	e002      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e7c:	bf00      	nop
 8008e7e:	e000      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10e      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e8a:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e9a:	4a02      	ldr	r2, [pc, #8]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8008ea0:	e006      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008ea2:	bf00      	nop
 8008ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008eac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ec6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	d055      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ed8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008edc:	d033      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008ede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ee2:	d82c      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee8:	d02f      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eee:	d826      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008ef0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ef4:	d02b      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008ef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008efa:	d820      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f00:	d012      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f06:	d81a      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d022      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f10:	d115      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f16:	3308      	adds	r3, #8
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 fbf6 	bl	800a70c <RCCEx_PLL2_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f26:	e015      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2c:	3328      	adds	r3, #40	; 0x28
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fc9d 	bl	800a870 <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f3c:	e00a      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f44:	e006      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f46:	bf00      	nop
 8008f48:	e004      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f4a:	bf00      	nop
 8008f4c:	e002      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f4e:	bf00      	nop
 8008f50:	e000      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10b      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f5c:	4ba0      	ldr	r3, [pc, #640]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f60:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f6c:	4a9c      	ldr	r2, [pc, #624]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	6593      	str	r3, [r2, #88]	; 0x58
 8008f72:	e003      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f002 0308 	and.w	r3, r2, #8
 8008f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f92:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008f96:	460b      	mov	r3, r1
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	d01e      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d10c      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fae:	3328      	adds	r3, #40	; 0x28
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fc5c 	bl	800a870 <RCCEx_PLL3_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008fc4:	4b86      	ldr	r3, [pc, #536]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd4:	4a82      	ldr	r2, [pc, #520]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f002 0310 	and.w	r3, r2, #16
 8008fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fea:	2300      	movs	r3, #0
 8008fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ff0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	d01e      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009006:	d10c      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900c:	3328      	adds	r3, #40	; 0x28
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f001 fc2d 	bl	800a870 <RCCEx_PLL3_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009022:	4b6f      	ldr	r3, [pc, #444]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009026:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009032:	4a6b      	ldr	r2, [pc, #428]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009044:	67bb      	str	r3, [r7, #120]	; 0x78
 8009046:	2300      	movs	r3, #0
 8009048:	67fb      	str	r3, [r7, #124]	; 0x7c
 800904a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	d03e      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800905c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009060:	d022      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009066:	d81b      	bhi.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d00b      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009072:	e015      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009078:	3308      	adds	r3, #8
 800907a:	2100      	movs	r1, #0
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fb45 	bl	800a70c <RCCEx_PLL2_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009088:	e00f      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	3328      	adds	r3, #40	; 0x28
 8009090:	2102      	movs	r1, #2
 8009092:	4618      	mov	r0, r3
 8009094:	f001 fbec 	bl	800a870 <RCCEx_PLL3_Config>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800909e:	e004      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090a6:	e000      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80090a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10b      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090b2:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090c2:	4a47      	ldr	r2, [pc, #284]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80090c4:	430b      	orrs	r3, r1
 80090c6:	6593      	str	r3, [r2, #88]	; 0x58
 80090c8:	e003      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80090de:	673b      	str	r3, [r7, #112]	; 0x70
 80090e0:	2300      	movs	r3, #0
 80090e2:	677b      	str	r3, [r7, #116]	; 0x74
 80090e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80090e8:	460b      	mov	r3, r1
 80090ea:	4313      	orrs	r3, r2
 80090ec:	d03b      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090fa:	d01f      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80090fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009100:	d818      	bhi.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009106:	d003      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800910c:	d007      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800910e:	e011      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009110:	4b33      	ldr	r3, [pc, #204]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a32      	ldr	r2, [pc, #200]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800911a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800911c:	e00f      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800911e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009122:	3328      	adds	r3, #40	; 0x28
 8009124:	2101      	movs	r1, #1
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fba2 	bl	800a870 <RCCEx_PLL3_Config>
 800912c:	4603      	mov	r3, r0
 800912e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009132:	e004      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800913a:	e000      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800913c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800913e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10b      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009156:	4a22      	ldr	r2, [pc, #136]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009158:	430b      	orrs	r3, r1
 800915a:	6553      	str	r3, [r2, #84]	; 0x54
 800915c:	e003      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009162:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009172:	66bb      	str	r3, [r7, #104]	; 0x68
 8009174:	2300      	movs	r3, #0
 8009176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009178:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800917c:	460b      	mov	r3, r1
 800917e:	4313      	orrs	r3, r2
 8009180:	d034      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009190:	d007      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009192:	e011      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009194:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800919a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091a0:	e00e      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a6:	3308      	adds	r3, #8
 80091a8:	2102      	movs	r1, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 faae 	bl	800a70c <RCCEx_PLL2_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80091be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10d      	bne.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d6:	4a02      	ldr	r2, [pc, #8]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80091d8:	430b      	orrs	r3, r1
 80091da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091dc:	e006      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80091e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80091f8:	663b      	str	r3, [r7, #96]	; 0x60
 80091fa:	2300      	movs	r3, #0
 80091fc:	667b      	str	r3, [r7, #100]	; 0x64
 80091fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d00c      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920c:	3328      	adds	r3, #40	; 0x28
 800920e:	2102      	movs	r1, #2
 8009210:	4618      	mov	r0, r3
 8009212:	f001 fb2d 	bl	800a870 <RCCEx_PLL3_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800922e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009230:	2300      	movs	r3, #0
 8009232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009234:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009238:	460b      	mov	r3, r1
 800923a:	4313      	orrs	r3, r2
 800923c:	d036      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800923e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009248:	d018      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800924a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924e:	d811      	bhi.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009254:	d014      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800925a:	d80b      	bhi.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009264:	d106      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009266:	4bb7      	ldr	r3, [pc, #732]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	4ab6      	ldr	r2, [pc, #728]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800926c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009270:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009272:	e008      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009280:	bf00      	nop
 8009282:	e000      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009286:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800928e:	4bad      	ldr	r3, [pc, #692]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009292:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929c:	4aa9      	ldr	r2, [pc, #676]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800929e:	430b      	orrs	r3, r1
 80092a0:	6553      	str	r3, [r2, #84]	; 0x54
 80092a2:	e003      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80092b8:	653b      	str	r3, [r7, #80]	; 0x50
 80092ba:	2300      	movs	r3, #0
 80092bc:	657b      	str	r3, [r7, #84]	; 0x54
 80092be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d009      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092c8:	4b9e      	ldr	r3, [pc, #632]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d6:	4a9b      	ldr	r2, [pc, #620]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092d8:	430b      	orrs	r3, r1
 80092da:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80092e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ea:	2300      	movs	r3, #0
 80092ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80092f2:	460b      	mov	r3, r1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	d009      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092f8:	4b92      	ldr	r3, [pc, #584]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80092fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009306:	4a8f      	ldr	r2, [pc, #572]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009308:	430b      	orrs	r3, r1
 800930a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009318:	643b      	str	r3, [r7, #64]	; 0x40
 800931a:	2300      	movs	r3, #0
 800931c:	647b      	str	r3, [r7, #68]	; 0x44
 800931e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009322:	460b      	mov	r3, r1
 8009324:	4313      	orrs	r3, r2
 8009326:	d00e      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009328:	4b86      	ldr	r3, [pc, #536]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	4a85      	ldr	r2, [pc, #532]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800932e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009332:	6113      	str	r3, [r2, #16]
 8009334:	4b83      	ldr	r3, [pc, #524]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009336:	6919      	ldr	r1, [r3, #16]
 8009338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009340:	4a80      	ldr	r2, [pc, #512]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009342:	430b      	orrs	r3, r1
 8009344:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009352:	63bb      	str	r3, [r7, #56]	; 0x38
 8009354:	2300      	movs	r3, #0
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009358:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800935c:	460b      	mov	r3, r1
 800935e:	4313      	orrs	r3, r2
 8009360:	d009      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009362:	4b78      	ldr	r3, [pc, #480]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009366:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800936a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009370:	4a74      	ldr	r2, [pc, #464]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009372:	430b      	orrs	r3, r1
 8009374:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009382:	633b      	str	r3, [r7, #48]	; 0x30
 8009384:	2300      	movs	r3, #0
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
 8009388:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800938c:	460b      	mov	r3, r1
 800938e:	4313      	orrs	r3, r2
 8009390:	d00a      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009392:	4b6c      	ldr	r3, [pc, #432]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a2:	4a68      	ldr	r2, [pc, #416]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	2100      	movs	r1, #0
 80093b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80093be:	460b      	mov	r3, r1
 80093c0:	4313      	orrs	r3, r2
 80093c2:	d011      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093c8:	3308      	adds	r3, #8
 80093ca:	2100      	movs	r1, #0
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f99d 	bl	800a70c <RCCEx_PLL2_Config>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80093d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80093e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	2100      	movs	r1, #0
 80093f2:	6239      	str	r1, [r7, #32]
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
 80093fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80093fe:	460b      	mov	r3, r1
 8009400:	4313      	orrs	r3, r2
 8009402:	d011      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009408:	3308      	adds	r3, #8
 800940a:	2101      	movs	r1, #1
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f97d 	bl	800a70c <RCCEx_PLL2_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009418:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009424:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	2100      	movs	r1, #0
 8009432:	61b9      	str	r1, [r7, #24]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800943e:	460b      	mov	r3, r1
 8009440:	4313      	orrs	r3, r2
 8009442:	d011      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009448:	3308      	adds	r3, #8
 800944a:	2102      	movs	r1, #2
 800944c:	4618      	mov	r0, r3
 800944e:	f001 f95d 	bl	800a70c <RCCEx_PLL2_Config>
 8009452:	4603      	mov	r3, r0
 8009454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009458:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009460:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009464:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	2100      	movs	r1, #0
 8009472:	6139      	str	r1, [r7, #16]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800947e:	460b      	mov	r3, r1
 8009480:	4313      	orrs	r3, r2
 8009482:	d011      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009488:	3328      	adds	r3, #40	; 0x28
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f001 f9ef 	bl	800a870 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8009498:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	2100      	movs	r1, #0
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094be:	460b      	mov	r3, r1
 80094c0:	4313      	orrs	r3, r2
 80094c2:	d011      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c8:	3328      	adds	r3, #40	; 0x28
 80094ca:	2101      	movs	r1, #1
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 f9cf 	bl	800a870 <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80094d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80094e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	2100      	movs	r1, #0
 80094f2:	6039      	str	r1, [r7, #0]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80094fe:	460b      	mov	r3, r1
 8009500:	4313      	orrs	r3, r2
 8009502:	d011      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009508:	3328      	adds	r3, #40	; 0x28
 800950a:	2102      	movs	r1, #2
 800950c:	4618      	mov	r0, r3
 800950e:	f001 f9af 	bl	800a870 <RCCEx_PLL3_Config>
 8009512:	4603      	mov	r3, r0
 8009514:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009518:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009524:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009528:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e000      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
}
 8009536:	4618      	mov	r0, r3
 8009538:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800953c:	46bd      	mov	sp, r7
 800953e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009542:	bf00      	nop
 8009544:	58024400 	.word	0x58024400

08009548 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b090      	sub	sp, #64	; 0x40
 800954c:	af00      	add	r7, sp, #0
 800954e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009556:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800955a:	430b      	orrs	r3, r1
 800955c:	f040 8094 	bne.w	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009560:	4b9b      	ldr	r3, [pc, #620]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	2b04      	cmp	r3, #4
 800956e:	f200 8087 	bhi.w	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009572:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	0800958d 	.word	0x0800958d
 800957c:	080095b5 	.word	0x080095b5
 8009580:	080095dd 	.word	0x080095dd
 8009584:	08009679 	.word	0x08009679
 8009588:	08009605 	.word	0x08009605
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800958c:	4b90      	ldr	r3, [pc, #576]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009598:	d108      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800959a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 ff62 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a8:	f000 bc93 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b0:	f000 bc8f 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095b4:	4b86      	ldr	r3, [pc, #536]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095c0:	d108      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0318 	add.w	r3, r7, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fca6 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d0:	f000 bc7f 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d8:	f000 bc7b 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095dc:	4b7c      	ldr	r3, [pc, #496]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095e8:	d108      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095ea:	f107 030c 	add.w	r3, r7, #12
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fde6 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f8:	f000 bc6b 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009600:	f000 bc67 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009604:	4b72      	ldr	r3, [pc, #456]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800960c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800960e:	4b70      	ldr	r3, [pc, #448]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0304 	and.w	r3, r3, #4
 8009616:	2b04      	cmp	r3, #4
 8009618:	d10c      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009620:	4b6b      	ldr	r3, [pc, #428]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	08db      	lsrs	r3, r3, #3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	4a6a      	ldr	r2, [pc, #424]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009632:	e01f      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009634:	4b66      	ldr	r3, [pc, #408]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009640:	d106      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009648:	d102      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800964a:	4b63      	ldr	r3, [pc, #396]	; (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800964e:	e011      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009650:	4b5f      	ldr	r3, [pc, #380]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800965c:	d106      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009664:	d102      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009666:	4b5d      	ldr	r3, [pc, #372]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800966a:	e003      	b.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009670:	f000 bc2f 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009674:	f000 bc2d 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009678:	4b59      	ldr	r3, [pc, #356]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800967c:	f000 bc29 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009684:	f000 bc25 	b.w	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009690:	430b      	orrs	r3, r1
 8009692:	f040 80a7 	bne.w	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009696:	4b4e      	ldr	r3, [pc, #312]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800969a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800969e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a6:	d054      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096ae:	f200 808b 	bhi.w	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096b8:	f000 8083 	beq.w	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096c2:	f200 8081 	bhi.w	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096cc:	d02f      	beq.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096d4:	d878      	bhi.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e2:	d012      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80096e4:	e070      	b.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096e6:	4b3a      	ldr	r3, [pc, #232]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096f2:	d107      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 feb5 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009702:	e3e6      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009708:	e3e3      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800970a:	4b31      	ldr	r3, [pc, #196]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009716:	d107      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009718:	f107 0318 	add.w	r3, r7, #24
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fbfb 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009726:	e3d4      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800972c:	e3d1      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800972e:	4b28      	ldr	r3, [pc, #160]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800973a:	d107      	bne.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800973c:	f107 030c 	add.w	r3, r7, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fd3d 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974a:	e3c2      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009750:	e3bf      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009752:	4b1f      	ldr	r3, [pc, #124]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800975a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800975c:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b04      	cmp	r3, #4
 8009766:	d10c      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800976e:	4b18      	ldr	r3, [pc, #96]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	f003 0303 	and.w	r3, r3, #3
 8009778:	4a16      	ldr	r2, [pc, #88]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009780:	e01e      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009782:	4b13      	ldr	r3, [pc, #76]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978e:	d106      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009796:	d102      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009798:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800979a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979c:	e010      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800979e:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b2:	d102      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097b8:	e002      	b.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097be:	e388      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097c0:	e387      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097c6:	e384      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097cc:	e381      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400
 80097d4:	03d09000 	.word	0x03d09000
 80097d8:	003d0900 	.word	0x003d0900
 80097dc:	02faf080 	.word	0x02faf080
 80097e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80097e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80097ec:	430b      	orrs	r3, r1
 80097ee:	f040 809c 	bne.w	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80097f2:	4b9e      	ldr	r3, [pc, #632]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80097fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009802:	d054      	beq.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800980a:	f200 808b 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009814:	f000 8083 	beq.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800981e:	f200 8081 	bhi.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009828:	d02f      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009830:	d878      	bhi.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800983e:	d012      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009840:	e070      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009842:	4b8a      	ldr	r3, [pc, #552]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800984e:	d107      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fe07 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800985e:	e338      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009864:	e335      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009866:	4b81      	ldr	r3, [pc, #516]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800986e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009872:	d107      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009874:	f107 0318 	add.w	r3, r7, #24
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fb4d 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009882:	e326      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009888:	e323      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800988a:	4b78      	ldr	r3, [pc, #480]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009896:	d107      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fc8f 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a6:	e314      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ac:	e311      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ae:	4b6f      	ldr	r3, [pc, #444]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80098b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098b8:	4b6c      	ldr	r3, [pc, #432]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d10c      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ca:	4b68      	ldr	r3, [pc, #416]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	4a66      	ldr	r2, [pc, #408]	; (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098dc:	e01e      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098de:	4b63      	ldr	r3, [pc, #396]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ea:	d106      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80098ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098f2:	d102      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098f4:	4b5f      	ldr	r3, [pc, #380]	; (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098f8:	e010      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098fa:	4b5c      	ldr	r3, [pc, #368]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009910:	4b59      	ldr	r3, [pc, #356]	; (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009914:	e002      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800991a:	e2da      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800991c:	e2d9      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800991e:	4b57      	ldr	r3, [pc, #348]	; (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009922:	e2d6      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009928:	e2d3      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800992a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800992e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009932:	430b      	orrs	r3, r1
 8009934:	f040 80a7 	bne.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009938:	4b4c      	ldr	r3, [pc, #304]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800993a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009940:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009948:	d055      	beq.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009950:	f200 8096 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800995a:	f000 8084 	beq.w	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009964:	f200 808c 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800996e:	d030      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009976:	f200 8083 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009986:	d012      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009988:	e07a      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800998a:	4b38      	ldr	r3, [pc, #224]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009996:	d107      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fd63 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a6:	e294      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ac:	e291      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099ae:	4b2f      	ldr	r3, [pc, #188]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ba:	d107      	bne.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099bc:	f107 0318 	add.w	r3, r7, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 faa9 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ca:	e282      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099d0:	e27f      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099d2:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099de:	d107      	bne.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fbeb 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ee:	e270      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f4:	e26d      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099f6:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a00:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d10c      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d109      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	4a14      	ldr	r2, [pc, #80]	; (8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a24:	e01e      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a26:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a32:	d106      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a3a:	d102      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a40:	e010      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a4e:	d106      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a56:	d102      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a58:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5c:	e002      	b.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a62:	e236      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a64:	e235      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a6a:	e232      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	03d09000 	.word	0x03d09000
 8009a74:	003d0900 	.word	0x003d0900
 8009a78:	02faf080 	.word	0x02faf080
 8009a7c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a84:	e225      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a8a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	f040 8085 	bne.w	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009a94:	4b9c      	ldr	r3, [pc, #624]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a98:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aa4:	d06b      	beq.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aac:	d874      	bhi.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ab4:	d056      	beq.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009abc:	d86c      	bhi.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ac4:	d03b      	beq.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009acc:	d864      	bhi.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d021      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009adc:	d85c      	bhi.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aea:	d004      	beq.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009aec:	e054      	b.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009aee:	f7fe fb5f 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 8009af2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009af4:	e1ed      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009af6:	4b84      	ldr	r3, [pc, #528]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b02:	d107      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b04:	f107 0318 	add.w	r3, r7, #24
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fa05 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b12:	e1de      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b18:	e1db      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b1a:	4b7b      	ldr	r3, [pc, #492]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b26:	d107      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fb47 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b36:	e1cc      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b3c:	e1c9      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b3e:	4b72      	ldr	r3, [pc, #456]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d109      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4a:	4b6f      	ldr	r3, [pc, #444]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	08db      	lsrs	r3, r3, #3
 8009b50:	f003 0303 	and.w	r3, r3, #3
 8009b54:	4a6d      	ldr	r2, [pc, #436]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009b56:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b5c:	e1b9      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b62:	e1b6      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b64:	4b68      	ldr	r3, [pc, #416]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b70:	d102      	bne.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8009b72:	4b67      	ldr	r3, [pc, #412]	; (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b76:	e1ac      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b7c:	e1a9      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b7e:	4b62      	ldr	r3, [pc, #392]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b8a:	d102      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009b8c:	4b61      	ldr	r3, [pc, #388]	; (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b90:	e19f      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b96:	e19c      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b9c:	e199      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	d173      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009baa:	4b57      	ldr	r3, [pc, #348]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bb2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bba:	d02f      	beq.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bc2:	d863      	bhi.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd0:	d012      	beq.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009bd2:	e05b      	b.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bd4:	4b4c      	ldr	r3, [pc, #304]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009be0:	d107      	bne.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be2:	f107 0318 	add.w	r3, r7, #24
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f996 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf0:	e16f      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf6:	e16c      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bf8:	4b43      	ldr	r3, [pc, #268]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c04:	d107      	bne.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c06:	f107 030c 	add.w	r3, r7, #12
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fad8 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c14:	e15d      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c1a:	e15a      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c1c:	4b3a      	ldr	r3, [pc, #232]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c26:	4b38      	ldr	r3, [pc, #224]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d10c      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c38:	4b33      	ldr	r3, [pc, #204]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	08db      	lsrs	r3, r3, #3
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	4a32      	ldr	r2, [pc, #200]	; (8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
 8009c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c4a:	e01e      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c4c:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c58:	d106      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c60:	d102      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c62:	4b2b      	ldr	r3, [pc, #172]	; (8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c66:	e010      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c68:	4b27      	ldr	r3, [pc, #156]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c74:	d106      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7c:	d102      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c7e:	4b25      	ldr	r3, [pc, #148]	; (8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c82:	e002      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009c88:	e123      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009c8a:	e122      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c90:	e11f      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c96:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	d13c      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009c9e:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d004      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb4:	d012      	beq.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009cb6:	e023      	b.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cb8:	4b13      	ldr	r3, [pc, #76]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fbcc 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd4:	e0fd      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cda:	e0fa      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ce8:	d107      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cea:	f107 0318 	add.w	r3, r7, #24
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f912 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf8:	e0eb      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cfe:	e0e8      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d04:	e0e5      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d06:	bf00      	nop
 8009d08:	58024400 	.word	0x58024400
 8009d0c:	03d09000 	.word	0x03d09000
 8009d10:	003d0900 	.word	0x003d0900
 8009d14:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009d20:	430b      	orrs	r3, r1
 8009d22:	f040 8085 	bne.w	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d26:	4b6d      	ldr	r3, [pc, #436]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d36:	d06b      	beq.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d3e:	d874      	bhi.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d46:	d056      	beq.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4e:	d86c      	bhi.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d56:	d03b      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d5e:	d864      	bhi.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d66:	d021      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d6e:	d85c      	bhi.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d004      	beq.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d7c:	d004      	beq.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009d7e:	e054      	b.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009d80:	f000 f8b4 	bl	8009eec <HAL_RCCEx_GetD3PCLK1Freq>
 8009d84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d86:	e0a4      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d88:	4b54      	ldr	r3, [pc, #336]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d94:	d107      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d96:	f107 0318 	add.w	r3, r7, #24
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f8bc 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da4:	e095      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009daa:	e092      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dac:	4b4b      	ldr	r3, [pc, #300]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009db8:	d107      	bne.n	8009dca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 f9fe 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc8:	e083      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dce:	e080      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dd0:	4b42      	ldr	r3, [pc, #264]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d109      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ddc:	4b3f      	ldr	r3, [pc, #252]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	08db      	lsrs	r3, r3, #3
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	4a3e      	ldr	r2, [pc, #248]	; (8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009de8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dee:	e070      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df4:	e06d      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009df6:	4b39      	ldr	r3, [pc, #228]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e02:	d102      	bne.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009e04:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e08:	e063      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0e:	e060      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e10:	4b32      	ldr	r3, [pc, #200]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e1c:	d102      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009e1e:	4b32      	ldr	r3, [pc, #200]	; (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e22:	e056      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e28:	e053      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2e:	e050      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e34:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	d148      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e3c:	4b27      	ldr	r3, [pc, #156]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4c:	d02a      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e54:	d838      	bhi.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e62:	d00d      	beq.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009e64:	e030      	b.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e66:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e72:	d102      	bne.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009e74:	4b1c      	ldr	r3, [pc, #112]	; (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e78:	e02b      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e7e:	e028      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e8c:	d107      	bne.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fae8 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e9c:	e019      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea2:	e016      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ea4:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb2:	f107 0318 	add.w	r3, r7, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f82e 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec0:	e007      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec6:	e004      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ecc:	e001      	b.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3740      	adds	r7, #64	; 0x40
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	58024400 	.word	0x58024400
 8009ee0:	03d09000 	.word	0x03d09000
 8009ee4:	003d0900 	.word	0x003d0900
 8009ee8:	02faf080 	.word	0x02faf080

08009eec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ef0:	f7fe f92e 	bl	8008150 <HAL_RCC_GetHCLKFreq>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	091b      	lsrs	r3, r3, #4
 8009efc:	f003 0307 	and.w	r3, r3, #7
 8009f00:	4904      	ldr	r1, [pc, #16]	; (8009f14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f02:	5ccb      	ldrb	r3, [r1, r3]
 8009f04:	f003 031f 	and.w	r3, r3, #31
 8009f08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	58024400 	.word	0x58024400
 8009f14:	0800de6c 	.word	0x0800de6c

08009f18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b089      	sub	sp, #36	; 0x24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f20:	4ba1      	ldr	r3, [pc, #644]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f24:	f003 0303 	and.w	r3, r3, #3
 8009f28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f2a:	4b9f      	ldr	r3, [pc, #636]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2e:	0b1b      	lsrs	r3, r3, #12
 8009f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f36:	4b9c      	ldr	r3, [pc, #624]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	091b      	lsrs	r3, r3, #4
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f42:	4b99      	ldr	r3, [pc, #612]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f46:	08db      	lsrs	r3, r3, #3
 8009f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8111 	beq.w	800a188 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	f000 8083 	beq.w	800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	f200 80a1 	bhi.w	800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d056      	beq.n	800a030 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f82:	e099      	b.n	800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f84:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0320 	and.w	r3, r3, #32
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d02d      	beq.n	8009fec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f90:	4b85      	ldr	r3, [pc, #532]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	4a84      	ldr	r2, [pc, #528]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	ee07 3a90 	vmov	s15, r3
 8009fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fba:	4b7b      	ldr	r3, [pc, #492]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009fea:	e087      	b.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffe:	4b6a      	ldr	r3, [pc, #424]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a012:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a02e:	e065      	b.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a052:	ed97 6a03 	vldr	s12, [r7, #12]
 800a056:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a072:	e043      	b.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b48      	ldr	r3, [pc, #288]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b6:	e021      	b.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b37      	ldr	r3, [pc, #220]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	0a5b      	lsrs	r3, r3, #9
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a116:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a122:	ee17 2a90 	vmov	r2, s15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a140:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a144:	edd7 6a07 	vldr	s13, [r7, #28]
 800a148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a150:	ee17 2a90 	vmov	r2, s15
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	0e1b      	lsrs	r3, r3, #24
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a172:	edd7 6a07 	vldr	s13, [r7, #28]
 800a176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17e:	ee17 2a90 	vmov	r2, s15
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a186:	e008      	b.n	800a19a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	609a      	str	r2, [r3, #8]
}
 800a19a:	bf00      	nop
 800a19c:	3724      	adds	r7, #36	; 0x24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	03d09000 	.word	0x03d09000
 800a1b0:	46000000 	.word	0x46000000
 800a1b4:	4c742400 	.word	0x4c742400
 800a1b8:	4a742400 	.word	0x4a742400
 800a1bc:	4c3ebc20 	.word	0x4c3ebc20

0800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b089      	sub	sp, #36	; 0x24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1c8:	4ba1      	ldr	r3, [pc, #644]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a1d2:	4b9f      	ldr	r3, [pc, #636]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d6:	0d1b      	lsrs	r3, r3, #20
 800a1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1de:	4b9c      	ldr	r3, [pc, #624]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	0a1b      	lsrs	r3, r3, #8
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a1ea:	4b99      	ldr	r3, [pc, #612]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ee:	08db      	lsrs	r3, r3, #3
 800a1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	fb02 f303 	mul.w	r3, r2, r3
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 8111 	beq.w	800a430 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b02      	cmp	r3, #2
 800a212:	f000 8083 	beq.w	800a31c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	f200 80a1 	bhi.w	800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d056      	beq.n	800a2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a22a:	e099      	b.n	800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a22c:	4b88      	ldr	r3, [pc, #544]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b00      	cmp	r3, #0
 800a236:	d02d      	beq.n	800a294 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a238:	4b85      	ldr	r3, [pc, #532]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	08db      	lsrs	r3, r3, #3
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	4a84      	ldr	r2, [pc, #528]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a244:	fa22 f303 	lsr.w	r3, r2, r3
 800a248:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	ee07 3a90 	vmov	s15, r3
 800a25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a262:	4b7b      	ldr	r3, [pc, #492]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a272:	ed97 6a03 	vldr	s12, [r7, #12]
 800a276:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a292:	e087      	b.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a6:	4b6a      	ldr	r3, [pc, #424]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2d6:	e065      	b.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ea:	4b59      	ldr	r3, [pc, #356]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f2:	ee07 3a90 	vmov	s15, r3
 800a2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a31a:	e043      	b.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a326:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32e:	4b48      	ldr	r3, [pc, #288]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a342:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a35e:	e021      	b.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a372:	4b37      	ldr	r3, [pc, #220]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a382:	ed97 6a03 	vldr	s12, [r7, #12]
 800a386:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a3a4:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a8:	0a5b      	lsrs	r3, r3, #9
 800a3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ae:	ee07 3a90 	vmov	s15, r3
 800a3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ca:	ee17 2a90 	vmov	r2, s15
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a3d2:	4b1f      	ldr	r3, [pc, #124]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	0c1b      	lsrs	r3, r3, #16
 800a3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3dc:	ee07 3a90 	vmov	s15, r3
 800a3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f8:	ee17 2a90 	vmov	r2, s15
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a400:	4b13      	ldr	r3, [pc, #76]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a404:	0e1b      	lsrs	r3, r3, #24
 800a406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a412:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a426:	ee17 2a90 	vmov	r2, s15
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a42e:	e008      	b.n	800a442 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	609a      	str	r2, [r3, #8]
}
 800a442:	bf00      	nop
 800a444:	3724      	adds	r7, #36	; 0x24
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	03d09000 	.word	0x03d09000
 800a458:	46000000 	.word	0x46000000
 800a45c:	4c742400 	.word	0x4c742400
 800a460:	4a742400 	.word	0x4a742400
 800a464:	4c3ebc20 	.word	0x4c3ebc20

0800a468 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a468:	b480      	push	{r7}
 800a46a:	b089      	sub	sp, #36	; 0x24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a470:	4ba0      	ldr	r3, [pc, #640]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a47a:	4b9e      	ldr	r3, [pc, #632]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	091b      	lsrs	r3, r3, #4
 800a480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a484:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a486:	4b9b      	ldr	r3, [pc, #620]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a490:	4b98      	ldr	r3, [pc, #608]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	08db      	lsrs	r3, r3, #3
 800a496:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	fb02 f303 	mul.w	r3, r2, r3
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 8111 	beq.w	800a6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	f000 8083 	beq.w	800a5c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	f200 80a1 	bhi.w	800a606 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d056      	beq.n	800a57e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a4d0:	e099      	b.n	800a606 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4d2:	4b88      	ldr	r3, [pc, #544]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d02d      	beq.n	800a53a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4de:	4b85      	ldr	r3, [pc, #532]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	08db      	lsrs	r3, r3, #3
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	4a83      	ldr	r2, [pc, #524]	; (800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	ee07 3a90 	vmov	s15, r3
 800a4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	ee07 3a90 	vmov	s15, r3
 800a500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a508:	4b7a      	ldr	r3, [pc, #488]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a518:	ed97 6a03 	vldr	s12, [r7, #12]
 800a51c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a534:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a538:	e087      	b.n	800a64a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	ee07 3a90 	vmov	s15, r3
 800a540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a544:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a700 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54c:	4b69      	ldr	r3, [pc, #420]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a554:	ee07 3a90 	vmov	s15, r3
 800a558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a55c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a560:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a56c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a578:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a57c:	e065      	b.n	800a64a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a588:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a704 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a58c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a590:	4b58      	ldr	r3, [pc, #352]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5c0:	e043      	b.n	800a64a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	ee07 3a90 	vmov	s15, r3
 800a5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a708 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d4:	4b47      	ldr	r3, [pc, #284]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5dc:	ee07 3a90 	vmov	s15, r3
 800a5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a600:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a604:	e021      	b.n	800a64a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	ee07 3a90 	vmov	s15, r3
 800a60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a610:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a700 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a618:	4b36      	ldr	r3, [pc, #216]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a620:	ee07 3a90 	vmov	s15, r3
 800a624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a628:	ed97 6a03 	vldr	s12, [r7, #12]
 800a62c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a648:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a64a:	4b2a      	ldr	r3, [pc, #168]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	0a5b      	lsrs	r3, r3, #9
 800a650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a664:	edd7 6a07 	vldr	s13, [r7, #28]
 800a668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a670:	ee17 2a90 	vmov	r2, s15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a678:	4b1e      	ldr	r3, [pc, #120]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	0c1b      	lsrs	r3, r3, #16
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a6a6:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	0e1b      	lsrs	r3, r3, #24
 800a6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6cc:	ee17 2a90 	vmov	r2, s15
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6d4:	e008      	b.n	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	609a      	str	r2, [r3, #8]
}
 800a6e8:	bf00      	nop
 800a6ea:	3724      	adds	r7, #36	; 0x24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	58024400 	.word	0x58024400
 800a6f8:	03d09000 	.word	0x03d09000
 800a6fc:	46000000 	.word	0x46000000
 800a700:	4c742400 	.word	0x4c742400
 800a704:	4a742400 	.word	0x4a742400
 800a708:	4c3ebc20 	.word	0x4c3ebc20

0800a70c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a71a:	4b53      	ldr	r3, [pc, #332]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b03      	cmp	r3, #3
 800a724:	d101      	bne.n	800a72a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e099      	b.n	800a85e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a72a:	4b4f      	ldr	r3, [pc, #316]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a4e      	ldr	r2, [pc, #312]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a736:	f7f8 f831 	bl	800279c <HAL_GetTick>
 800a73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a73c:	e008      	b.n	800a750 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a73e:	f7f8 f82d 	bl	800279c <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d901      	bls.n	800a750 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e086      	b.n	800a85e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a750:	4b45      	ldr	r3, [pc, #276]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1f0      	bne.n	800a73e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a75c:	4b42      	ldr	r3, [pc, #264]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a760:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	031b      	lsls	r3, r3, #12
 800a76a:	493f      	ldr	r1, [pc, #252]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	628b      	str	r3, [r1, #40]	; 0x28
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	3b01      	subs	r3, #1
 800a776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	3b01      	subs	r3, #1
 800a780:	025b      	lsls	r3, r3, #9
 800a782:	b29b      	uxth	r3, r3
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a792:	431a      	orrs	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	3b01      	subs	r3, #1
 800a79a:	061b      	lsls	r3, r3, #24
 800a79c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7a0:	4931      	ldr	r1, [pc, #196]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a7a6:	4b30      	ldr	r3, [pc, #192]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	492d      	ldr	r1, [pc, #180]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7b8:	4b2b      	ldr	r3, [pc, #172]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	f023 0220 	bic.w	r2, r3, #32
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	4928      	ldr	r1, [pc, #160]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7ca:	4b27      	ldr	r3, [pc, #156]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	4a26      	ldr	r2, [pc, #152]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	f023 0310 	bic.w	r3, r3, #16
 800a7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7d6:	4b24      	ldr	r3, [pc, #144]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <RCCEx_PLL2_Config+0x160>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	69d2      	ldr	r2, [r2, #28]
 800a7e2:	00d2      	lsls	r2, r2, #3
 800a7e4:	4920      	ldr	r1, [pc, #128]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7ea:	4b1f      	ldr	r3, [pc, #124]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7f0:	f043 0310 	orr.w	r3, r3, #16
 800a7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d106      	bne.n	800a80a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a19      	ldr	r2, [pc, #100]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a806:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a808:	e00f      	b.n	800a82a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d106      	bne.n	800a81e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a810:	4b15      	ldr	r3, [pc, #84]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	4a14      	ldr	r2, [pc, #80]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a81a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a81c:	e005      	b.n	800a82a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a81e:	4b12      	ldr	r3, [pc, #72]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	4a11      	ldr	r2, [pc, #68]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a82a:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a0e      	ldr	r2, [pc, #56]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a836:	f7f7 ffb1 	bl	800279c <HAL_GetTick>
 800a83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a83c:	e008      	b.n	800a850 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a83e:	f7f7 ffad 	bl	800279c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d901      	bls.n	800a850 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e006      	b.n	800a85e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <RCCEx_PLL2_Config+0x15c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f0      	beq.n	800a83e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400
 800a86c:	ffff0007 	.word	0xffff0007

0800a870 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a87e:	4b53      	ldr	r3, [pc, #332]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a882:	f003 0303 	and.w	r3, r3, #3
 800a886:	2b03      	cmp	r3, #3
 800a888:	d101      	bne.n	800a88e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e099      	b.n	800a9c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a88e:	4b4f      	ldr	r3, [pc, #316]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a4e      	ldr	r2, [pc, #312]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a89a:	f7f7 ff7f 	bl	800279c <HAL_GetTick>
 800a89e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8a0:	e008      	b.n	800a8b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a8a2:	f7f7 ff7b 	bl	800279c <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e086      	b.n	800a9c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8b4:	4b45      	ldr	r3, [pc, #276]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1f0      	bne.n	800a8a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a8c0:	4b42      	ldr	r3, [pc, #264]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	051b      	lsls	r3, r3, #20
 800a8ce:	493f      	ldr	r1, [pc, #252]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	628b      	str	r3, [r1, #40]	; 0x28
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	025b      	lsls	r3, r3, #9
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	061b      	lsls	r3, r3, #24
 800a900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a904:	4931      	ldr	r1, [pc, #196]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a906:	4313      	orrs	r3, r2
 800a908:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a90a:	4b30      	ldr	r3, [pc, #192]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	492d      	ldr	r1, [pc, #180]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a91c:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	4928      	ldr	r1, [pc, #160]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a92e:	4b27      	ldr	r3, [pc, #156]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a932:	4a26      	ldr	r2, [pc, #152]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a93a:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a93e:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <RCCEx_PLL3_Config+0x160>)
 800a940:	4013      	ands	r3, r2
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	69d2      	ldr	r2, [r2, #28]
 800a946:	00d2      	lsls	r2, r2, #3
 800a948:	4920      	ldr	r1, [pc, #128]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a94e:	4b1f      	ldr	r3, [pc, #124]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	4a1e      	ldr	r2, [pc, #120]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d106      	bne.n	800a96e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a960:	4b1a      	ldr	r3, [pc, #104]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a19      	ldr	r2, [pc, #100]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a96a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a96c:	e00f      	b.n	800a98e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d106      	bne.n	800a982 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a974:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a14      	ldr	r2, [pc, #80]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a97a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a980:	e005      	b.n	800a98e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a982:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	4a11      	ldr	r2, [pc, #68]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a98c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a98e:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a0e      	ldr	r2, [pc, #56]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a99a:	f7f7 feff 	bl	800279c <HAL_GetTick>
 800a99e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9a0:	e008      	b.n	800a9b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9a2:	f7f7 fefb 	bl	800279c <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d901      	bls.n	800a9b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e006      	b.n	800a9c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <RCCEx_PLL3_Config+0x15c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0f0      	beq.n	800a9a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	ffff0007 	.word	0xffff0007

0800a9d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e10f      	b.n	800ac06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a87      	ldr	r2, [pc, #540]	; (800ac10 <HAL_SPI_Init+0x23c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00f      	beq.n	800aa16 <HAL_SPI_Init+0x42>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a86      	ldr	r2, [pc, #536]	; (800ac14 <HAL_SPI_Init+0x240>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d00a      	beq.n	800aa16 <HAL_SPI_Init+0x42>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a84      	ldr	r2, [pc, #528]	; (800ac18 <HAL_SPI_Init+0x244>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d005      	beq.n	800aa16 <HAL_SPI_Init+0x42>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b0f      	cmp	r3, #15
 800aa10:	d901      	bls.n	800aa16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e0f7      	b.n	800ac06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f900 	bl	800ac1c <SPI_GetPacketSize>
 800aa1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a7b      	ldr	r2, [pc, #492]	; (800ac10 <HAL_SPI_Init+0x23c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d00c      	beq.n	800aa42 <HAL_SPI_Init+0x6e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a79      	ldr	r2, [pc, #484]	; (800ac14 <HAL_SPI_Init+0x240>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d007      	beq.n	800aa42 <HAL_SPI_Init+0x6e>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a78      	ldr	r2, [pc, #480]	; (800ac18 <HAL_SPI_Init+0x244>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d002      	beq.n	800aa42 <HAL_SPI_Init+0x6e>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b08      	cmp	r3, #8
 800aa40:	d811      	bhi.n	800aa66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa46:	4a72      	ldr	r2, [pc, #456]	; (800ac10 <HAL_SPI_Init+0x23c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d009      	beq.n	800aa60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a70      	ldr	r2, [pc, #448]	; (800ac14 <HAL_SPI_Init+0x240>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d004      	beq.n	800aa60 <HAL_SPI_Init+0x8c>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a6f      	ldr	r2, [pc, #444]	; (800ac18 <HAL_SPI_Init+0x244>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d104      	bne.n	800aa6a <HAL_SPI_Init+0x96>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b10      	cmp	r3, #16
 800aa64:	d901      	bls.n	800aa6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e0cd      	b.n	800ac06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7f7 f8dc 	bl	8001c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0201 	bic.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aaa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aab0:	d119      	bne.n	800aae6 <HAL_SPI_Init+0x112>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaba:	d103      	bne.n	800aac4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d008      	beq.n	800aad6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10c      	bne.n	800aae6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aad4:	d107      	bne.n	800aae6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <HAL_SPI_Init+0x13e>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	2b06      	cmp	r3, #6
 800aaf8:	d90b      	bls.n	800ab12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	e007      	b.n	800ab22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	69da      	ldr	r2, [r3, #28]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab34:	ea42 0103 	orr.w	r1, r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab82:	ea42 0103 	orr.w	r1, r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d113      	bne.n	800abc2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	430a      	orrs	r2, r1
 800abf2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40013000 	.word	0x40013000
 800ac14:	40003800 	.word	0x40003800
 800ac18:	40003c00 	.word	0x40003c00

0800ac1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac28:	095b      	lsrs	r3, r3, #5
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	3301      	adds	r3, #1
 800ac34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3307      	adds	r3, #7
 800ac3a:	08db      	lsrs	r3, r3, #3
 800ac3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e049      	b.n	800acf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7f7 f89b 	bl	8001db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	4619      	mov	r1, r3
 800ac90:	4610      	mov	r0, r2
 800ac92:	f000 fdab 	bl	800b7ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <HAL_TIM_PWM_Start_DMA+0x2c>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	bf0c      	ite	eq
 800ad24:	2301      	moveq	r3, #1
 800ad26:	2300      	movne	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	e03c      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d109      	bne.n	800ad46 <HAL_TIM_PWM_Start_DMA+0x46>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2301      	moveq	r3, #1
 800ad40:	2300      	movne	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	e02f      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d109      	bne.n	800ad60 <HAL_TIM_PWM_Start_DMA+0x60>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	bf0c      	ite	eq
 800ad58:	2301      	moveq	r3, #1
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	e022      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b0c      	cmp	r3, #12
 800ad64:	d109      	bne.n	800ad7a <HAL_TIM_PWM_Start_DMA+0x7a>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	e015      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d109      	bne.n	800ad94 <HAL_TIM_PWM_Start_DMA+0x94>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2301      	moveq	r3, #1
 800ad8e:	2300      	movne	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	e008      	b.n	800ada6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	bf0c      	ite	eq
 800ada0:	2301      	moveq	r3, #1
 800ada2:	2300      	movne	r3, #0
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800adaa:	2302      	movs	r3, #2
 800adac:	e1ba      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	bf0c      	ite	eq
 800adc0:	2301      	moveq	r3, #1
 800adc2:	2300      	movne	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	e03c      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d109      	bne.n	800ade2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b01      	cmp	r3, #1
 800add8:	bf0c      	ite	eq
 800adda:	2301      	moveq	r3, #1
 800addc:	2300      	movne	r3, #0
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	e02f      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b08      	cmp	r3, #8
 800ade6:	d109      	bne.n	800adfc <HAL_TIM_PWM_Start_DMA+0xfc>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	bf0c      	ite	eq
 800adf4:	2301      	moveq	r3, #1
 800adf6:	2300      	movne	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	e022      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b0c      	cmp	r3, #12
 800ae00:	d109      	bne.n	800ae16 <HAL_TIM_PWM_Start_DMA+0x116>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	2300      	movne	r3, #0
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	e015      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b10      	cmp	r3, #16
 800ae1a:	d109      	bne.n	800ae30 <HAL_TIM_PWM_Start_DMA+0x130>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	bf0c      	ite	eq
 800ae28:	2301      	moveq	r3, #1
 800ae2a:	2300      	movne	r3, #0
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	e008      	b.n	800ae42 <HAL_TIM_PWM_Start_DMA+0x142>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	bf0c      	ite	eq
 800ae3c:	2301      	moveq	r3, #1
 800ae3e:	2300      	movne	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d034      	beq.n	800aeb0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <HAL_TIM_PWM_Start_DMA+0x152>
 800ae4c:	887b      	ldrh	r3, [r7, #2]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e166      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d104      	bne.n	800ae66 <HAL_TIM_PWM_Start_DMA+0x166>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae64:	e026      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d104      	bne.n	800ae76 <HAL_TIM_PWM_Start_DMA+0x176>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae74:	e01e      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d104      	bne.n	800ae86 <HAL_TIM_PWM_Start_DMA+0x186>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae84:	e016      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2b0c      	cmp	r3, #12
 800ae8a:	d104      	bne.n	800ae96 <HAL_TIM_PWM_Start_DMA+0x196>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae94:	e00e      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b10      	cmp	r3, #16
 800ae9a:	d104      	bne.n	800aea6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aea4:	e006      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeae:	e001      	b.n	800aeb4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e137      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2b0c      	cmp	r3, #12
 800aeb8:	f200 80ae 	bhi.w	800b018 <HAL_TIM_PWM_Start_DMA+0x318>
 800aebc:	a201      	add	r2, pc, #4	; (adr r2, 800aec4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800aebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec2:	bf00      	nop
 800aec4:	0800aef9 	.word	0x0800aef9
 800aec8:	0800b019 	.word	0x0800b019
 800aecc:	0800b019 	.word	0x0800b019
 800aed0:	0800b019 	.word	0x0800b019
 800aed4:	0800af41 	.word	0x0800af41
 800aed8:	0800b019 	.word	0x0800b019
 800aedc:	0800b019 	.word	0x0800b019
 800aee0:	0800b019 	.word	0x0800b019
 800aee4:	0800af89 	.word	0x0800af89
 800aee8:	0800b019 	.word	0x0800b019
 800aeec:	0800b019 	.word	0x0800b019
 800aef0:	0800b019 	.word	0x0800b019
 800aef4:	0800afd1 	.word	0x0800afd1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	4a8b      	ldr	r2, [pc, #556]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800aefe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af04:	4a8a      	ldr	r2, [pc, #552]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x430>)
 800af06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	4a89      	ldr	r2, [pc, #548]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3334      	adds	r3, #52	; 0x34
 800af1c:	461a      	mov	r2, r3
 800af1e:	887b      	ldrh	r3, [r7, #2]
 800af20:	f7f9 fc46 	bl	80047b0 <HAL_DMA_Start_IT>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e0fa      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af3c:	60da      	str	r2, [r3, #12]
      break;
 800af3e:	e06e      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	4a79      	ldr	r2, [pc, #484]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800af46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	4a78      	ldr	r2, [pc, #480]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x430>)
 800af4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af54:	4a77      	ldr	r2, [pc, #476]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3338      	adds	r3, #56	; 0x38
 800af64:	461a      	mov	r2, r3
 800af66:	887b      	ldrh	r3, [r7, #2]
 800af68:	f7f9 fc22 	bl	80047b0 <HAL_DMA_Start_IT>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e0d6      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af84:	60da      	str	r2, [r3, #12]
      break;
 800af86:	e04a      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	4a67      	ldr	r2, [pc, #412]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800af8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4a66      	ldr	r2, [pc, #408]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x430>)
 800af96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	4a65      	ldr	r2, [pc, #404]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x434>)
 800af9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	333c      	adds	r3, #60	; 0x3c
 800afac:	461a      	mov	r2, r3
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	f7f9 fbfe 	bl	80047b0 <HAL_DMA_Start_IT>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e0b2      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afcc:	60da      	str	r2, [r3, #12]
      break;
 800afce:	e026      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd4:	4a55      	ldr	r2, [pc, #340]	; (800b12c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800afd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afdc:	4a54      	ldr	r2, [pc, #336]	; (800b130 <HAL_TIM_PWM_Start_DMA+0x430>)
 800afde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe4:	4a53      	ldr	r2, [pc, #332]	; (800b134 <HAL_TIM_PWM_Start_DMA+0x434>)
 800afe6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3340      	adds	r3, #64	; 0x40
 800aff4:	461a      	mov	r2, r3
 800aff6:	887b      	ldrh	r3, [r7, #2]
 800aff8:	f7f9 fbda 	bl	80047b0 <HAL_DMA_Start_IT>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e08e      	b.n	800b124 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b014:	60da      	str	r2, [r3, #12]
      break;
 800b016:	e002      	b.n	800b01e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	75fb      	strb	r3, [r7, #23]
      break;
 800b01c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d17e      	bne.n	800b122 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2201      	movs	r2, #1
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 ff59 	bl	800bee4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a40      	ldr	r2, [pc, #256]	; (800b138 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d013      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a3e      	ldr	r2, [pc, #248]	; (800b13c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00e      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a3d      	ldr	r2, [pc, #244]	; (800b140 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d009      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a3b      	ldr	r2, [pc, #236]	; (800b144 <HAL_TIM_PWM_Start_DMA+0x444>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d004      	beq.n	800b064 <HAL_TIM_PWM_Start_DMA+0x364>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a3a      	ldr	r2, [pc, #232]	; (800b148 <HAL_TIM_PWM_Start_DMA+0x448>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d101      	bne.n	800b068 <HAL_TIM_PWM_Start_DMA+0x368>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <HAL_TIM_PWM_Start_DMA+0x36a>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b07c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a2d      	ldr	r2, [pc, #180]	; (800b138 <HAL_TIM_PWM_Start_DMA+0x438>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d02c      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b090:	d027      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a2d      	ldr	r2, [pc, #180]	; (800b14c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d022      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a2b      	ldr	r2, [pc, #172]	; (800b150 <HAL_TIM_PWM_Start_DMA+0x450>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d01d      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a2a      	ldr	r2, [pc, #168]	; (800b154 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d018      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a21      	ldr	r2, [pc, #132]	; (800b13c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d013      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a26      	ldr	r2, [pc, #152]	; (800b158 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d00e      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1d      	ldr	r2, [pc, #116]	; (800b140 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d009      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a22      	ldr	r2, [pc, #136]	; (800b15c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d004      	beq.n	800b0e2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a20      	ldr	r2, [pc, #128]	; (800b160 <HAL_TIM_PWM_Start_DMA+0x460>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d115      	bne.n	800b10e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689a      	ldr	r2, [r3, #8]
 800b0e8:	4b1e      	ldr	r3, [pc, #120]	; (800b164 <HAL_TIM_PWM_Start_DMA+0x464>)
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b06      	cmp	r3, #6
 800b0f2:	d015      	beq.n	800b120 <HAL_TIM_PWM_Start_DMA+0x420>
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0fa:	d011      	beq.n	800b120 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0201 	orr.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10c:	e008      	b.n	800b120 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f042 0201 	orr.w	r2, r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e000      	b.n	800b122 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b120:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	0800b6db 	.word	0x0800b6db
 800b130:	0800b783 	.word	0x0800b783
 800b134:	0800b649 	.word	0x0800b649
 800b138:	40010000 	.word	0x40010000
 800b13c:	40010400 	.word	0x40010400
 800b140:	40014000 	.word	0x40014000
 800b144:	40014400 	.word	0x40014400
 800b148:	40014800 	.word	0x40014800
 800b14c:	40000400 	.word	0x40000400
 800b150:	40000800 	.word	0x40000800
 800b154:	40000c00 	.word	0x40000c00
 800b158:	40001800 	.word	0x40001800
 800b15c:	4000e000 	.word	0x4000e000
 800b160:	4000e400 	.word	0x4000e400
 800b164:	00010007 	.word	0x00010007

0800b168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d122      	bne.n	800b1c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d11b      	bne.n	800b1c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f06f 0202 	mvn.w	r2, #2
 800b194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2201      	movs	r2, #1
 800b19a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	f003 0303 	and.w	r3, r3, #3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fa24 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b1b0:	e005      	b.n	800b1be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fa16 	bl	800b5e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7f5 fbe3 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d122      	bne.n	800b218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d11b      	bne.n	800b218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f06f 0204 	mvn.w	r2, #4
 800b1e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9fa 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b204:	e005      	b.n	800b212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f9ec 	bl	800b5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7f5 fbb9 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f003 0308 	and.w	r3, r3, #8
 800b222:	2b08      	cmp	r3, #8
 800b224:	d122      	bne.n	800b26c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f003 0308 	and.w	r3, r3, #8
 800b230:	2b08      	cmp	r3, #8
 800b232:	d11b      	bne.n	800b26c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f06f 0208 	mvn.w	r2, #8
 800b23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2204      	movs	r2, #4
 800b242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f003 0303 	and.w	r3, r3, #3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f9d0 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b258:	e005      	b.n	800b266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f9c2 	bl	800b5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7f5 fb8f 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f003 0310 	and.w	r3, r3, #16
 800b276:	2b10      	cmp	r3, #16
 800b278:	d122      	bne.n	800b2c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b10      	cmp	r3, #16
 800b286:	d11b      	bne.n	800b2c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f06f 0210 	mvn.w	r2, #16
 800b290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2208      	movs	r2, #8
 800b296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d003      	beq.n	800b2ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9a6 	bl	800b5f8 <HAL_TIM_IC_CaptureCallback>
 800b2ac:	e005      	b.n	800b2ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f998 	bl	800b5e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7f5 fb65 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d10e      	bne.n	800b2ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d107      	bne.n	800b2ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f06f 0201 	mvn.w	r2, #1
 800b2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f972 	bl	800b5d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f6:	2b80      	cmp	r3, #128	; 0x80
 800b2f8:	d10e      	bne.n	800b318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	2b80      	cmp	r3, #128	; 0x80
 800b306:	d107      	bne.n	800b318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 feb2 	bl	800c07c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b326:	d10e      	bne.n	800b346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b332:	2b80      	cmp	r3, #128	; 0x80
 800b334:	d107      	bne.n	800b346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fea5 	bl	800c090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d10e      	bne.n	800b372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b40      	cmp	r3, #64	; 0x40
 800b360:	d107      	bne.n	800b372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f957 	bl	800b620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	f003 0320 	and.w	r3, r3, #32
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d10e      	bne.n	800b39e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b20      	cmp	r3, #32
 800b38c:	d107      	bne.n	800b39e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f06f 0220 	mvn.w	r2, #32
 800b396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fe65 	bl	800c068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b39e:	bf00      	nop
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d101      	bne.n	800b3c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	e0ff      	b.n	800b5c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b14      	cmp	r3, #20
 800b3d2:	f200 80f0 	bhi.w	800b5b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3d6:	a201      	add	r2, pc, #4	; (adr r2, 800b3dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b431 	.word	0x0800b431
 800b3e0:	0800b5b7 	.word	0x0800b5b7
 800b3e4:	0800b5b7 	.word	0x0800b5b7
 800b3e8:	0800b5b7 	.word	0x0800b5b7
 800b3ec:	0800b471 	.word	0x0800b471
 800b3f0:	0800b5b7 	.word	0x0800b5b7
 800b3f4:	0800b5b7 	.word	0x0800b5b7
 800b3f8:	0800b5b7 	.word	0x0800b5b7
 800b3fc:	0800b4b3 	.word	0x0800b4b3
 800b400:	0800b5b7 	.word	0x0800b5b7
 800b404:	0800b5b7 	.word	0x0800b5b7
 800b408:	0800b5b7 	.word	0x0800b5b7
 800b40c:	0800b4f3 	.word	0x0800b4f3
 800b410:	0800b5b7 	.word	0x0800b5b7
 800b414:	0800b5b7 	.word	0x0800b5b7
 800b418:	0800b5b7 	.word	0x0800b5b7
 800b41c:	0800b535 	.word	0x0800b535
 800b420:	0800b5b7 	.word	0x0800b5b7
 800b424:	0800b5b7 	.word	0x0800b5b7
 800b428:	0800b5b7 	.word	0x0800b5b7
 800b42c:	0800b575 	.word	0x0800b575
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fa7e 	bl	800b938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	699a      	ldr	r2, [r3, #24]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0208 	orr.w	r2, r2, #8
 800b44a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0204 	bic.w	r2, r2, #4
 800b45a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6999      	ldr	r1, [r3, #24]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	691a      	ldr	r2, [r3, #16]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	619a      	str	r2, [r3, #24]
      break;
 800b46e:	e0a5      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68b9      	ldr	r1, [r7, #8]
 800b476:	4618      	mov	r0, r3
 800b478:	f000 faee 	bl	800ba58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b48a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699a      	ldr	r2, [r3, #24]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b49a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6999      	ldr	r1, [r3, #24]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	021a      	lsls	r2, r3, #8
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	619a      	str	r2, [r3, #24]
      break;
 800b4b0:	e084      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fb57 	bl	800bb6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69da      	ldr	r2, [r3, #28]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f042 0208 	orr.w	r2, r2, #8
 800b4cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 0204 	bic.w	r2, r2, #4
 800b4dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69d9      	ldr	r1, [r3, #28]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	61da      	str	r2, [r3, #28]
      break;
 800b4f0:	e064      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fbbf 	bl	800bc7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b50c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69da      	ldr	r2, [r3, #28]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b51c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69d9      	ldr	r1, [r3, #28]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	021a      	lsls	r2, r3, #8
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	61da      	str	r2, [r3, #28]
      break;
 800b532:	e043      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 fc08 	bl	800bd50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f042 0208 	orr.w	r2, r2, #8
 800b54e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 0204 	bic.w	r2, r2, #4
 800b55e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	691a      	ldr	r2, [r3, #16]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b572:	e023      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fc4c 	bl	800be18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b58e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b59e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	021a      	lsls	r2, r3, #8
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5b4:	e002      	b.n	800b5bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop

0800b5d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b654:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d107      	bne.n	800b670 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2201      	movs	r2, #1
 800b664:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b66e:	e02a      	b.n	800b6c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d107      	bne.n	800b68a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2202      	movs	r2, #2
 800b67e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b688:	e01d      	b.n	800b6c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	429a      	cmp	r2, r3
 800b692:	d107      	bne.n	800b6a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2204      	movs	r2, #4
 800b698:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6a2:	e010      	b.n	800b6c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d107      	bne.n	800b6be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6bc:	e003      	b.n	800b6c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff ffb4 	bl	800b634 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	771a      	strb	r2, [r3, #28]
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d10b      	bne.n	800b70a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d136      	bne.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b708:	e031      	b.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d10b      	bne.n	800b72c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2202      	movs	r2, #2
 800b718:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d125      	bne.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b72a:	e020      	b.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d10b      	bne.n	800b74e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2204      	movs	r2, #4
 800b73a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d114      	bne.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b74c:	e00f      	b.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	429a      	cmp	r2, r3
 800b756:	d10a      	bne.n	800b76e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2208      	movs	r2, #8
 800b75c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7f5 f908 	bl	8000984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	771a      	strb	r2, [r3, #28]
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b084      	sub	sp, #16
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d103      	bne.n	800b7a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	771a      	strb	r2, [r3, #28]
 800b7a0:	e019      	b.n	800b7d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d103      	bne.n	800b7b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	771a      	strb	r2, [r3, #28]
 800b7b2:	e010      	b.n	800b7d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d103      	bne.n	800b7c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	771a      	strb	r2, [r3, #28]
 800b7c4:	e007      	b.n	800b7d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d102      	bne.n	800b7d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f7ff ff18 	bl	800b60c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	771a      	strb	r2, [r3, #28]
}
 800b7e2:	bf00      	nop
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a44      	ldr	r2, [pc, #272]	; (800b910 <TIM_Base_SetConfig+0x124>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d013      	beq.n	800b82c <TIM_Base_SetConfig+0x40>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b80a:	d00f      	beq.n	800b82c <TIM_Base_SetConfig+0x40>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a41      	ldr	r2, [pc, #260]	; (800b914 <TIM_Base_SetConfig+0x128>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d00b      	beq.n	800b82c <TIM_Base_SetConfig+0x40>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a40      	ldr	r2, [pc, #256]	; (800b918 <TIM_Base_SetConfig+0x12c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d007      	beq.n	800b82c <TIM_Base_SetConfig+0x40>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a3f      	ldr	r2, [pc, #252]	; (800b91c <TIM_Base_SetConfig+0x130>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d003      	beq.n	800b82c <TIM_Base_SetConfig+0x40>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a3e      	ldr	r2, [pc, #248]	; (800b920 <TIM_Base_SetConfig+0x134>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d108      	bne.n	800b83e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a33      	ldr	r2, [pc, #204]	; (800b910 <TIM_Base_SetConfig+0x124>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d027      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b84c:	d023      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a30      	ldr	r2, [pc, #192]	; (800b914 <TIM_Base_SetConfig+0x128>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d01f      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a2f      	ldr	r2, [pc, #188]	; (800b918 <TIM_Base_SetConfig+0x12c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d01b      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a2e      	ldr	r2, [pc, #184]	; (800b91c <TIM_Base_SetConfig+0x130>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d017      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a2d      	ldr	r2, [pc, #180]	; (800b920 <TIM_Base_SetConfig+0x134>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d013      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a2c      	ldr	r2, [pc, #176]	; (800b924 <TIM_Base_SetConfig+0x138>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00f      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a2b      	ldr	r2, [pc, #172]	; (800b928 <TIM_Base_SetConfig+0x13c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00b      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a2a      	ldr	r2, [pc, #168]	; (800b92c <TIM_Base_SetConfig+0x140>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d007      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a29      	ldr	r2, [pc, #164]	; (800b930 <TIM_Base_SetConfig+0x144>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d003      	beq.n	800b896 <TIM_Base_SetConfig+0xaa>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a28      	ldr	r2, [pc, #160]	; (800b934 <TIM_Base_SetConfig+0x148>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d108      	bne.n	800b8a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b89c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	689a      	ldr	r2, [r3, #8]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a10      	ldr	r2, [pc, #64]	; (800b910 <TIM_Base_SetConfig+0x124>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00f      	beq.n	800b8f4 <TIM_Base_SetConfig+0x108>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a12      	ldr	r2, [pc, #72]	; (800b920 <TIM_Base_SetConfig+0x134>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00b      	beq.n	800b8f4 <TIM_Base_SetConfig+0x108>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a11      	ldr	r2, [pc, #68]	; (800b924 <TIM_Base_SetConfig+0x138>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d007      	beq.n	800b8f4 <TIM_Base_SetConfig+0x108>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a10      	ldr	r2, [pc, #64]	; (800b928 <TIM_Base_SetConfig+0x13c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d003      	beq.n	800b8f4 <TIM_Base_SetConfig+0x108>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a0f      	ldr	r2, [pc, #60]	; (800b92c <TIM_Base_SetConfig+0x140>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d103      	bne.n	800b8fc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	691a      	ldr	r2, [r3, #16]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	615a      	str	r2, [r3, #20]
}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	40010000 	.word	0x40010000
 800b914:	40000400 	.word	0x40000400
 800b918:	40000800 	.word	0x40000800
 800b91c:	40000c00 	.word	0x40000c00
 800b920:	40010400 	.word	0x40010400
 800b924:	40014000 	.word	0x40014000
 800b928:	40014400 	.word	0x40014400
 800b92c:	40014800 	.word	0x40014800
 800b930:	4000e000 	.word	0x4000e000
 800b934:	4000e400 	.word	0x4000e400

0800b938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	f023 0201 	bic.w	r2, r3, #1
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4b37      	ldr	r3, [pc, #220]	; (800ba40 <TIM_OC1_SetConfig+0x108>)
 800b964:	4013      	ands	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f023 0302 	bic.w	r3, r3, #2
 800b980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	4313      	orrs	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a2d      	ldr	r2, [pc, #180]	; (800ba44 <TIM_OC1_SetConfig+0x10c>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00f      	beq.n	800b9b4 <TIM_OC1_SetConfig+0x7c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a2c      	ldr	r2, [pc, #176]	; (800ba48 <TIM_OC1_SetConfig+0x110>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00b      	beq.n	800b9b4 <TIM_OC1_SetConfig+0x7c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a2b      	ldr	r2, [pc, #172]	; (800ba4c <TIM_OC1_SetConfig+0x114>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d007      	beq.n	800b9b4 <TIM_OC1_SetConfig+0x7c>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a2a      	ldr	r2, [pc, #168]	; (800ba50 <TIM_OC1_SetConfig+0x118>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d003      	beq.n	800b9b4 <TIM_OC1_SetConfig+0x7c>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a29      	ldr	r2, [pc, #164]	; (800ba54 <TIM_OC1_SetConfig+0x11c>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d10c      	bne.n	800b9ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f023 0308 	bic.w	r3, r3, #8
 800b9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f023 0304 	bic.w	r3, r3, #4
 800b9cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a1c      	ldr	r2, [pc, #112]	; (800ba44 <TIM_OC1_SetConfig+0x10c>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00f      	beq.n	800b9f6 <TIM_OC1_SetConfig+0xbe>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a1b      	ldr	r2, [pc, #108]	; (800ba48 <TIM_OC1_SetConfig+0x110>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00b      	beq.n	800b9f6 <TIM_OC1_SetConfig+0xbe>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a1a      	ldr	r2, [pc, #104]	; (800ba4c <TIM_OC1_SetConfig+0x114>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d007      	beq.n	800b9f6 <TIM_OC1_SetConfig+0xbe>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <TIM_OC1_SetConfig+0x118>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d003      	beq.n	800b9f6 <TIM_OC1_SetConfig+0xbe>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a18      	ldr	r2, [pc, #96]	; (800ba54 <TIM_OC1_SetConfig+0x11c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d111      	bne.n	800ba1a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	621a      	str	r2, [r3, #32]
}
 800ba34:	bf00      	nop
 800ba36:	371c      	adds	r7, #28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	fffeff8f 	.word	0xfffeff8f
 800ba44:	40010000 	.word	0x40010000
 800ba48:	40010400 	.word	0x40010400
 800ba4c:	40014000 	.word	0x40014000
 800ba50:	40014400 	.word	0x40014400
 800ba54:	40014800 	.word	0x40014800

0800ba58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	f023 0210 	bic.w	r2, r3, #16
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4b34      	ldr	r3, [pc, #208]	; (800bb54 <TIM_OC2_SetConfig+0xfc>)
 800ba84:	4013      	ands	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f023 0320 	bic.w	r3, r3, #32
 800baa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	4313      	orrs	r3, r2
 800baae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a29      	ldr	r2, [pc, #164]	; (800bb58 <TIM_OC2_SetConfig+0x100>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d003      	beq.n	800bac0 <TIM_OC2_SetConfig+0x68>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a28      	ldr	r2, [pc, #160]	; (800bb5c <TIM_OC2_SetConfig+0x104>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10d      	bne.n	800badc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a1e      	ldr	r2, [pc, #120]	; (800bb58 <TIM_OC2_SetConfig+0x100>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d00f      	beq.n	800bb04 <TIM_OC2_SetConfig+0xac>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a1d      	ldr	r2, [pc, #116]	; (800bb5c <TIM_OC2_SetConfig+0x104>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00b      	beq.n	800bb04 <TIM_OC2_SetConfig+0xac>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a1c      	ldr	r2, [pc, #112]	; (800bb60 <TIM_OC2_SetConfig+0x108>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d007      	beq.n	800bb04 <TIM_OC2_SetConfig+0xac>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a1b      	ldr	r2, [pc, #108]	; (800bb64 <TIM_OC2_SetConfig+0x10c>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d003      	beq.n	800bb04 <TIM_OC2_SetConfig+0xac>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a1a      	ldr	r2, [pc, #104]	; (800bb68 <TIM_OC2_SetConfig+0x110>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d113      	bne.n	800bb2c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	621a      	str	r2, [r3, #32]
}
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	feff8fff 	.word	0xfeff8fff
 800bb58:	40010000 	.word	0x40010000
 800bb5c:	40010400 	.word	0x40010400
 800bb60:	40014000 	.word	0x40014000
 800bb64:	40014400 	.word	0x40014400
 800bb68:	40014800 	.word	0x40014800

0800bb6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	69db      	ldr	r3, [r3, #28]
 800bb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	4b33      	ldr	r3, [pc, #204]	; (800bc64 <TIM_OC3_SetConfig+0xf8>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a28      	ldr	r2, [pc, #160]	; (800bc68 <TIM_OC3_SetConfig+0xfc>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d003      	beq.n	800bbd2 <TIM_OC3_SetConfig+0x66>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a27      	ldr	r2, [pc, #156]	; (800bc6c <TIM_OC3_SetConfig+0x100>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d10d      	bne.n	800bbee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a1d      	ldr	r2, [pc, #116]	; (800bc68 <TIM_OC3_SetConfig+0xfc>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00f      	beq.n	800bc16 <TIM_OC3_SetConfig+0xaa>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a1c      	ldr	r2, [pc, #112]	; (800bc6c <TIM_OC3_SetConfig+0x100>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00b      	beq.n	800bc16 <TIM_OC3_SetConfig+0xaa>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <TIM_OC3_SetConfig+0x104>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d007      	beq.n	800bc16 <TIM_OC3_SetConfig+0xaa>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a1a      	ldr	r2, [pc, #104]	; (800bc74 <TIM_OC3_SetConfig+0x108>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d003      	beq.n	800bc16 <TIM_OC3_SetConfig+0xaa>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a19      	ldr	r2, [pc, #100]	; (800bc78 <TIM_OC3_SetConfig+0x10c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d113      	bne.n	800bc3e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	011b      	lsls	r3, r3, #4
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	621a      	str	r2, [r3, #32]
}
 800bc58:	bf00      	nop
 800bc5a:	371c      	adds	r7, #28
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	fffeff8f 	.word	0xfffeff8f
 800bc68:	40010000 	.word	0x40010000
 800bc6c:	40010400 	.word	0x40010400
 800bc70:	40014000 	.word	0x40014000
 800bc74:	40014400 	.word	0x40014400
 800bc78:	40014800 	.word	0x40014800

0800bc7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	69db      	ldr	r3, [r3, #28]
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4b24      	ldr	r3, [pc, #144]	; (800bd38 <TIM_OC4_SetConfig+0xbc>)
 800bca8:	4013      	ands	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	031b      	lsls	r3, r3, #12
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a19      	ldr	r2, [pc, #100]	; (800bd3c <TIM_OC4_SetConfig+0xc0>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d00f      	beq.n	800bcfc <TIM_OC4_SetConfig+0x80>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a18      	ldr	r2, [pc, #96]	; (800bd40 <TIM_OC4_SetConfig+0xc4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d00b      	beq.n	800bcfc <TIM_OC4_SetConfig+0x80>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a17      	ldr	r2, [pc, #92]	; (800bd44 <TIM_OC4_SetConfig+0xc8>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d007      	beq.n	800bcfc <TIM_OC4_SetConfig+0x80>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <TIM_OC4_SetConfig+0xcc>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d003      	beq.n	800bcfc <TIM_OC4_SetConfig+0x80>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <TIM_OC4_SetConfig+0xd0>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d109      	bne.n	800bd10 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	019b      	lsls	r3, r3, #6
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	621a      	str	r2, [r3, #32]
}
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	feff8fff 	.word	0xfeff8fff
 800bd3c:	40010000 	.word	0x40010000
 800bd40:	40010400 	.word	0x40010400
 800bd44:	40014000 	.word	0x40014000
 800bd48:	40014400 	.word	0x40014400
 800bd4c:	40014800 	.word	0x40014800

0800bd50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	4b21      	ldr	r3, [pc, #132]	; (800be00 <TIM_OC5_SetConfig+0xb0>)
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bd90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	041b      	lsls	r3, r3, #16
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a18      	ldr	r2, [pc, #96]	; (800be04 <TIM_OC5_SetConfig+0xb4>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d00f      	beq.n	800bdc6 <TIM_OC5_SetConfig+0x76>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a17      	ldr	r2, [pc, #92]	; (800be08 <TIM_OC5_SetConfig+0xb8>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d00b      	beq.n	800bdc6 <TIM_OC5_SetConfig+0x76>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a16      	ldr	r2, [pc, #88]	; (800be0c <TIM_OC5_SetConfig+0xbc>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d007      	beq.n	800bdc6 <TIM_OC5_SetConfig+0x76>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a15      	ldr	r2, [pc, #84]	; (800be10 <TIM_OC5_SetConfig+0xc0>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d003      	beq.n	800bdc6 <TIM_OC5_SetConfig+0x76>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a14      	ldr	r2, [pc, #80]	; (800be14 <TIM_OC5_SetConfig+0xc4>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d109      	bne.n	800bdda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	685a      	ldr	r2, [r3, #4]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	621a      	str	r2, [r3, #32]
}
 800bdf4:	bf00      	nop
 800bdf6:	371c      	adds	r7, #28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	fffeff8f 	.word	0xfffeff8f
 800be04:	40010000 	.word	0x40010000
 800be08:	40010400 	.word	0x40010400
 800be0c:	40014000 	.word	0x40014000
 800be10:	40014400 	.word	0x40014400
 800be14:	40014800 	.word	0x40014800

0800be18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4b22      	ldr	r3, [pc, #136]	; (800becc <TIM_OC6_SetConfig+0xb4>)
 800be44:	4013      	ands	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4313      	orrs	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	051b      	lsls	r3, r3, #20
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	4313      	orrs	r3, r2
 800be66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a19      	ldr	r2, [pc, #100]	; (800bed0 <TIM_OC6_SetConfig+0xb8>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00f      	beq.n	800be90 <TIM_OC6_SetConfig+0x78>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a18      	ldr	r2, [pc, #96]	; (800bed4 <TIM_OC6_SetConfig+0xbc>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d00b      	beq.n	800be90 <TIM_OC6_SetConfig+0x78>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a17      	ldr	r2, [pc, #92]	; (800bed8 <TIM_OC6_SetConfig+0xc0>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d007      	beq.n	800be90 <TIM_OC6_SetConfig+0x78>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a16      	ldr	r2, [pc, #88]	; (800bedc <TIM_OC6_SetConfig+0xc4>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d003      	beq.n	800be90 <TIM_OC6_SetConfig+0x78>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <TIM_OC6_SetConfig+0xc8>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d109      	bne.n	800bea4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	029b      	lsls	r3, r3, #10
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	621a      	str	r2, [r3, #32]
}
 800bebe:	bf00      	nop
 800bec0:	371c      	adds	r7, #28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	feff8fff 	.word	0xfeff8fff
 800bed0:	40010000 	.word	0x40010000
 800bed4:	40010400 	.word	0x40010400
 800bed8:	40014000 	.word	0x40014000
 800bedc:	40014400 	.word	0x40014400
 800bee0:	40014800 	.word	0x40014800

0800bee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 031f 	and.w	r3, r3, #31
 800bef6:	2201      	movs	r2, #1
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6a1a      	ldr	r2, [r3, #32]
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	43db      	mvns	r3, r3
 800bf06:	401a      	ands	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6a1a      	ldr	r2, [r3, #32]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f003 031f 	and.w	r3, r3, #31
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	fa01 f303 	lsl.w	r3, r1, r3
 800bf1c:	431a      	orrs	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d101      	bne.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf44:	2302      	movs	r3, #2
 800bf46:	e077      	b.n	800c038 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2202      	movs	r2, #2
 800bf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a35      	ldr	r2, [pc, #212]	; (800c044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d004      	beq.n	800bf7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a34      	ldr	r2, [pc, #208]	; (800c048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d108      	bne.n	800bf8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a25      	ldr	r2, [pc, #148]	; (800c044 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d02c      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfba:	d027      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a22      	ldr	r2, [pc, #136]	; (800c04c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d022      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a21      	ldr	r2, [pc, #132]	; (800c050 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d01d      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a1f      	ldr	r2, [pc, #124]	; (800c054 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d018      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a1a      	ldr	r2, [pc, #104]	; (800c048 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d013      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a1b      	ldr	r2, [pc, #108]	; (800c058 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d00e      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a1a      	ldr	r2, [pc, #104]	; (800c05c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d009      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a18      	ldr	r2, [pc, #96]	; (800c060 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d004      	beq.n	800c00c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a17      	ldr	r2, [pc, #92]	; (800c064 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d10c      	bne.n	800c026 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	40010000 	.word	0x40010000
 800c048:	40010400 	.word	0x40010400
 800c04c:	40000400 	.word	0x40000400
 800c050:	40000800 	.word	0x40000800
 800c054:	40000c00 	.word	0x40000c00
 800c058:	40001800 	.word	0x40001800
 800c05c:	40014000 	.word	0x40014000
 800c060:	4000e000 	.word	0x4000e000
 800c064:	4000e400 	.word	0x4000e400

0800c068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e042      	b.n	800c13c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d106      	bne.n	800c0ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7f6 f8e1 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2224      	movs	r2, #36	; 0x24
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 0201 	bic.w	r2, r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f82c 	bl	800c144 <UART_SetConfig>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d101      	bne.n	800c0f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e022      	b.n	800c13c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fe8c 	bl	800ce1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689a      	ldr	r2, [r3, #8]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f042 0201 	orr.w	r2, r2, #1
 800c132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 ff13 	bl	800cf60 <UART_CheckIdleState>
 800c13a:	4603      	mov	r3, r0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c148:	b092      	sub	sp, #72	; 0x48
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	431a      	orrs	r2, r3
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	431a      	orrs	r2, r3
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	4313      	orrs	r3, r2
 800c16a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4bbe      	ldr	r3, [pc, #760]	; (800c46c <UART_SetConfig+0x328>)
 800c174:	4013      	ands	r3, r2
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	6812      	ldr	r2, [r2, #0]
 800c17a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4ab3      	ldr	r2, [pc, #716]	; (800c470 <UART_SetConfig+0x32c>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d004      	beq.n	800c1b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689a      	ldr	r2, [r3, #8]
 800c1b6:	4baf      	ldr	r3, [pc, #700]	; (800c474 <UART_SetConfig+0x330>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	6812      	ldr	r2, [r2, #0]
 800c1be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1c0:	430b      	orrs	r3, r1
 800c1c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	f023 010f 	bic.w	r1, r3, #15
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4aa6      	ldr	r2, [pc, #664]	; (800c478 <UART_SetConfig+0x334>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d177      	bne.n	800c2d4 <UART_SetConfig+0x190>
 800c1e4:	4ba5      	ldr	r3, [pc, #660]	; (800c47c <UART_SetConfig+0x338>)
 800c1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1ec:	2b28      	cmp	r3, #40	; 0x28
 800c1ee:	d86d      	bhi.n	800c2cc <UART_SetConfig+0x188>
 800c1f0:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0xb4>)
 800c1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f6:	bf00      	nop
 800c1f8:	0800c29d 	.word	0x0800c29d
 800c1fc:	0800c2cd 	.word	0x0800c2cd
 800c200:	0800c2cd 	.word	0x0800c2cd
 800c204:	0800c2cd 	.word	0x0800c2cd
 800c208:	0800c2cd 	.word	0x0800c2cd
 800c20c:	0800c2cd 	.word	0x0800c2cd
 800c210:	0800c2cd 	.word	0x0800c2cd
 800c214:	0800c2cd 	.word	0x0800c2cd
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2cd 	.word	0x0800c2cd
 800c220:	0800c2cd 	.word	0x0800c2cd
 800c224:	0800c2cd 	.word	0x0800c2cd
 800c228:	0800c2cd 	.word	0x0800c2cd
 800c22c:	0800c2cd 	.word	0x0800c2cd
 800c230:	0800c2cd 	.word	0x0800c2cd
 800c234:	0800c2cd 	.word	0x0800c2cd
 800c238:	0800c2ad 	.word	0x0800c2ad
 800c23c:	0800c2cd 	.word	0x0800c2cd
 800c240:	0800c2cd 	.word	0x0800c2cd
 800c244:	0800c2cd 	.word	0x0800c2cd
 800c248:	0800c2cd 	.word	0x0800c2cd
 800c24c:	0800c2cd 	.word	0x0800c2cd
 800c250:	0800c2cd 	.word	0x0800c2cd
 800c254:	0800c2cd 	.word	0x0800c2cd
 800c258:	0800c2b5 	.word	0x0800c2b5
 800c25c:	0800c2cd 	.word	0x0800c2cd
 800c260:	0800c2cd 	.word	0x0800c2cd
 800c264:	0800c2cd 	.word	0x0800c2cd
 800c268:	0800c2cd 	.word	0x0800c2cd
 800c26c:	0800c2cd 	.word	0x0800c2cd
 800c270:	0800c2cd 	.word	0x0800c2cd
 800c274:	0800c2cd 	.word	0x0800c2cd
 800c278:	0800c2bd 	.word	0x0800c2bd
 800c27c:	0800c2cd 	.word	0x0800c2cd
 800c280:	0800c2cd 	.word	0x0800c2cd
 800c284:	0800c2cd 	.word	0x0800c2cd
 800c288:	0800c2cd 	.word	0x0800c2cd
 800c28c:	0800c2cd 	.word	0x0800c2cd
 800c290:	0800c2cd 	.word	0x0800c2cd
 800c294:	0800c2cd 	.word	0x0800c2cd
 800c298:	0800c2c5 	.word	0x0800c2c5
 800c29c:	2301      	movs	r3, #1
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a2:	e326      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2a4:	2304      	movs	r3, #4
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2aa:	e322      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2ac:	2308      	movs	r3, #8
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b2:	e31e      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2b4:	2310      	movs	r3, #16
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e31a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2bc:	2320      	movs	r3, #32
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e316      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2c4:	2340      	movs	r3, #64	; 0x40
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e312      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2cc:	2380      	movs	r3, #128	; 0x80
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e30e      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a69      	ldr	r2, [pc, #420]	; (800c480 <UART_SetConfig+0x33c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d130      	bne.n	800c340 <UART_SetConfig+0x1fc>
 800c2de:	4b67      	ldr	r3, [pc, #412]	; (800c47c <UART_SetConfig+0x338>)
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e2:	f003 0307 	and.w	r3, r3, #7
 800c2e6:	2b05      	cmp	r3, #5
 800c2e8:	d826      	bhi.n	800c338 <UART_SetConfig+0x1f4>
 800c2ea:	a201      	add	r2, pc, #4	; (adr r2, 800c2f0 <UART_SetConfig+0x1ac>)
 800c2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f0:	0800c309 	.word	0x0800c309
 800c2f4:	0800c311 	.word	0x0800c311
 800c2f8:	0800c319 	.word	0x0800c319
 800c2fc:	0800c321 	.word	0x0800c321
 800c300:	0800c329 	.word	0x0800c329
 800c304:	0800c331 	.word	0x0800c331
 800c308:	2300      	movs	r3, #0
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30e:	e2f0      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c310:	2304      	movs	r3, #4
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c316:	e2ec      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c318:	2308      	movs	r3, #8
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31e:	e2e8      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c320:	2310      	movs	r3, #16
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c326:	e2e4      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c328:	2320      	movs	r3, #32
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32e:	e2e0      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c330:	2340      	movs	r3, #64	; 0x40
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e2dc      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c338:	2380      	movs	r3, #128	; 0x80
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33e:	e2d8      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a4f      	ldr	r2, [pc, #316]	; (800c484 <UART_SetConfig+0x340>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d130      	bne.n	800c3ac <UART_SetConfig+0x268>
 800c34a:	4b4c      	ldr	r3, [pc, #304]	; (800c47c <UART_SetConfig+0x338>)
 800c34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34e:	f003 0307 	and.w	r3, r3, #7
 800c352:	2b05      	cmp	r3, #5
 800c354:	d826      	bhi.n	800c3a4 <UART_SetConfig+0x260>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <UART_SetConfig+0x218>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c375 	.word	0x0800c375
 800c360:	0800c37d 	.word	0x0800c37d
 800c364:	0800c385 	.word	0x0800c385
 800c368:	0800c38d 	.word	0x0800c38d
 800c36c:	0800c395 	.word	0x0800c395
 800c370:	0800c39d 	.word	0x0800c39d
 800c374:	2300      	movs	r3, #0
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e2ba      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c37c:	2304      	movs	r3, #4
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c382:	e2b6      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c384:	2308      	movs	r3, #8
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38a:	e2b2      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c38c:	2310      	movs	r3, #16
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c392:	e2ae      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c394:	2320      	movs	r3, #32
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39a:	e2aa      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c39c:	2340      	movs	r3, #64	; 0x40
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e2a6      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c3a4:	2380      	movs	r3, #128	; 0x80
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e2a2      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a35      	ldr	r2, [pc, #212]	; (800c488 <UART_SetConfig+0x344>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d130      	bne.n	800c418 <UART_SetConfig+0x2d4>
 800c3b6:	4b31      	ldr	r3, [pc, #196]	; (800c47c <UART_SetConfig+0x338>)
 800c3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b05      	cmp	r3, #5
 800c3c0:	d826      	bhi.n	800c410 <UART_SetConfig+0x2cc>
 800c3c2:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <UART_SetConfig+0x284>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c3e9 	.word	0x0800c3e9
 800c3d0:	0800c3f1 	.word	0x0800c3f1
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c401 	.word	0x0800c401
 800c3dc:	0800c409 	.word	0x0800c409
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e284      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e280      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f6:	e27c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fe:	e278      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c400:	2320      	movs	r3, #32
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c406:	e274      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c408:	2340      	movs	r3, #64	; 0x40
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e270      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c410:	2380      	movs	r3, #128	; 0x80
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e26c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a1b      	ldr	r2, [pc, #108]	; (800c48c <UART_SetConfig+0x348>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d142      	bne.n	800c4a8 <UART_SetConfig+0x364>
 800c422:	4b16      	ldr	r3, [pc, #88]	; (800c47c <UART_SetConfig+0x338>)
 800c424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b05      	cmp	r3, #5
 800c42c:	d838      	bhi.n	800c4a0 <UART_SetConfig+0x35c>
 800c42e:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <UART_SetConfig+0x2f0>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c44d 	.word	0x0800c44d
 800c438:	0800c455 	.word	0x0800c455
 800c43c:	0800c45d 	.word	0x0800c45d
 800c440:	0800c465 	.word	0x0800c465
 800c444:	0800c491 	.word	0x0800c491
 800c448:	0800c499 	.word	0x0800c499
 800c44c:	2300      	movs	r3, #0
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e24e      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c454:	2304      	movs	r3, #4
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e24a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c45c:	2308      	movs	r3, #8
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e246      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c464:	2310      	movs	r3, #16
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e242      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c46c:	cfff69f3 	.word	0xcfff69f3
 800c470:	58000c00 	.word	0x58000c00
 800c474:	11fff4ff 	.word	0x11fff4ff
 800c478:	40011000 	.word	0x40011000
 800c47c:	58024400 	.word	0x58024400
 800c480:	40004400 	.word	0x40004400
 800c484:	40004800 	.word	0x40004800
 800c488:	40004c00 	.word	0x40004c00
 800c48c:	40005000 	.word	0x40005000
 800c490:	2320      	movs	r3, #32
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e22c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c498:	2340      	movs	r3, #64	; 0x40
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e228      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c4a0:	2380      	movs	r3, #128	; 0x80
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e224      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4ab1      	ldr	r2, [pc, #708]	; (800c774 <UART_SetConfig+0x630>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d176      	bne.n	800c5a0 <UART_SetConfig+0x45c>
 800c4b2:	4bb1      	ldr	r3, [pc, #708]	; (800c778 <UART_SetConfig+0x634>)
 800c4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4ba:	2b28      	cmp	r3, #40	; 0x28
 800c4bc:	d86c      	bhi.n	800c598 <UART_SetConfig+0x454>
 800c4be:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <UART_SetConfig+0x380>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c569 	.word	0x0800c569
 800c4c8:	0800c599 	.word	0x0800c599
 800c4cc:	0800c599 	.word	0x0800c599
 800c4d0:	0800c599 	.word	0x0800c599
 800c4d4:	0800c599 	.word	0x0800c599
 800c4d8:	0800c599 	.word	0x0800c599
 800c4dc:	0800c599 	.word	0x0800c599
 800c4e0:	0800c599 	.word	0x0800c599
 800c4e4:	0800c571 	.word	0x0800c571
 800c4e8:	0800c599 	.word	0x0800c599
 800c4ec:	0800c599 	.word	0x0800c599
 800c4f0:	0800c599 	.word	0x0800c599
 800c4f4:	0800c599 	.word	0x0800c599
 800c4f8:	0800c599 	.word	0x0800c599
 800c4fc:	0800c599 	.word	0x0800c599
 800c500:	0800c599 	.word	0x0800c599
 800c504:	0800c579 	.word	0x0800c579
 800c508:	0800c599 	.word	0x0800c599
 800c50c:	0800c599 	.word	0x0800c599
 800c510:	0800c599 	.word	0x0800c599
 800c514:	0800c599 	.word	0x0800c599
 800c518:	0800c599 	.word	0x0800c599
 800c51c:	0800c599 	.word	0x0800c599
 800c520:	0800c599 	.word	0x0800c599
 800c524:	0800c581 	.word	0x0800c581
 800c528:	0800c599 	.word	0x0800c599
 800c52c:	0800c599 	.word	0x0800c599
 800c530:	0800c599 	.word	0x0800c599
 800c534:	0800c599 	.word	0x0800c599
 800c538:	0800c599 	.word	0x0800c599
 800c53c:	0800c599 	.word	0x0800c599
 800c540:	0800c599 	.word	0x0800c599
 800c544:	0800c589 	.word	0x0800c589
 800c548:	0800c599 	.word	0x0800c599
 800c54c:	0800c599 	.word	0x0800c599
 800c550:	0800c599 	.word	0x0800c599
 800c554:	0800c599 	.word	0x0800c599
 800c558:	0800c599 	.word	0x0800c599
 800c55c:	0800c599 	.word	0x0800c599
 800c560:	0800c599 	.word	0x0800c599
 800c564:	0800c591 	.word	0x0800c591
 800c568:	2301      	movs	r3, #1
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56e:	e1c0      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c570:	2304      	movs	r3, #4
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e1bc      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c578:	2308      	movs	r3, #8
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e1b8      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c580:	2310      	movs	r3, #16
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e1b4      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c588:	2320      	movs	r3, #32
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e1b0      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c590:	2340      	movs	r3, #64	; 0x40
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e1ac      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c598:	2380      	movs	r3, #128	; 0x80
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e1a8      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a75      	ldr	r2, [pc, #468]	; (800c77c <UART_SetConfig+0x638>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d130      	bne.n	800c60c <UART_SetConfig+0x4c8>
 800c5aa:	4b73      	ldr	r3, [pc, #460]	; (800c778 <UART_SetConfig+0x634>)
 800c5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ae:	f003 0307 	and.w	r3, r3, #7
 800c5b2:	2b05      	cmp	r3, #5
 800c5b4:	d826      	bhi.n	800c604 <UART_SetConfig+0x4c0>
 800c5b6:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <UART_SetConfig+0x478>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c5d5 	.word	0x0800c5d5
 800c5c0:	0800c5dd 	.word	0x0800c5dd
 800c5c4:	0800c5e5 	.word	0x0800c5e5
 800c5c8:	0800c5ed 	.word	0x0800c5ed
 800c5cc:	0800c5f5 	.word	0x0800c5f5
 800c5d0:	0800c5fd 	.word	0x0800c5fd
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5da:	e18a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5dc:	2304      	movs	r3, #4
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e2:	e186      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5e4:	2308      	movs	r3, #8
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ea:	e182      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f2:	e17e      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e17a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c5fc:	2340      	movs	r3, #64	; 0x40
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e176      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c604:	2380      	movs	r3, #128	; 0x80
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e172      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a5b      	ldr	r2, [pc, #364]	; (800c780 <UART_SetConfig+0x63c>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d130      	bne.n	800c678 <UART_SetConfig+0x534>
 800c616:	4b58      	ldr	r3, [pc, #352]	; (800c778 <UART_SetConfig+0x634>)
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	f003 0307 	and.w	r3, r3, #7
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d826      	bhi.n	800c670 <UART_SetConfig+0x52c>
 800c622:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <UART_SetConfig+0x4e4>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c641 	.word	0x0800c641
 800c62c:	0800c649 	.word	0x0800c649
 800c630:	0800c651 	.word	0x0800c651
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c661 	.word	0x0800c661
 800c63c:	0800c669 	.word	0x0800c669
 800c640:	2300      	movs	r3, #0
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c646:	e154      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c648:	2304      	movs	r3, #4
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64e:	e150      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c650:	2308      	movs	r3, #8
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c656:	e14c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c658:	2310      	movs	r3, #16
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65e:	e148      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c660:	2320      	movs	r3, #32
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c666:	e144      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c668:	2340      	movs	r3, #64	; 0x40
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66e:	e140      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c670:	2380      	movs	r3, #128	; 0x80
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c676:	e13c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a41      	ldr	r2, [pc, #260]	; (800c784 <UART_SetConfig+0x640>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	f040 8082 	bne.w	800c788 <UART_SetConfig+0x644>
 800c684:	4b3c      	ldr	r3, [pc, #240]	; (800c778 <UART_SetConfig+0x634>)
 800c686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c68c:	2b28      	cmp	r3, #40	; 0x28
 800c68e:	d86d      	bhi.n	800c76c <UART_SetConfig+0x628>
 800c690:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <UART_SetConfig+0x554>)
 800c692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c696:	bf00      	nop
 800c698:	0800c73d 	.word	0x0800c73d
 800c69c:	0800c76d 	.word	0x0800c76d
 800c6a0:	0800c76d 	.word	0x0800c76d
 800c6a4:	0800c76d 	.word	0x0800c76d
 800c6a8:	0800c76d 	.word	0x0800c76d
 800c6ac:	0800c76d 	.word	0x0800c76d
 800c6b0:	0800c76d 	.word	0x0800c76d
 800c6b4:	0800c76d 	.word	0x0800c76d
 800c6b8:	0800c745 	.word	0x0800c745
 800c6bc:	0800c76d 	.word	0x0800c76d
 800c6c0:	0800c76d 	.word	0x0800c76d
 800c6c4:	0800c76d 	.word	0x0800c76d
 800c6c8:	0800c76d 	.word	0x0800c76d
 800c6cc:	0800c76d 	.word	0x0800c76d
 800c6d0:	0800c76d 	.word	0x0800c76d
 800c6d4:	0800c76d 	.word	0x0800c76d
 800c6d8:	0800c74d 	.word	0x0800c74d
 800c6dc:	0800c76d 	.word	0x0800c76d
 800c6e0:	0800c76d 	.word	0x0800c76d
 800c6e4:	0800c76d 	.word	0x0800c76d
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c76d 	.word	0x0800c76d
 800c6f0:	0800c76d 	.word	0x0800c76d
 800c6f4:	0800c76d 	.word	0x0800c76d
 800c6f8:	0800c755 	.word	0x0800c755
 800c6fc:	0800c76d 	.word	0x0800c76d
 800c700:	0800c76d 	.word	0x0800c76d
 800c704:	0800c76d 	.word	0x0800c76d
 800c708:	0800c76d 	.word	0x0800c76d
 800c70c:	0800c76d 	.word	0x0800c76d
 800c710:	0800c76d 	.word	0x0800c76d
 800c714:	0800c76d 	.word	0x0800c76d
 800c718:	0800c75d 	.word	0x0800c75d
 800c71c:	0800c76d 	.word	0x0800c76d
 800c720:	0800c76d 	.word	0x0800c76d
 800c724:	0800c76d 	.word	0x0800c76d
 800c728:	0800c76d 	.word	0x0800c76d
 800c72c:	0800c76d 	.word	0x0800c76d
 800c730:	0800c76d 	.word	0x0800c76d
 800c734:	0800c76d 	.word	0x0800c76d
 800c738:	0800c765 	.word	0x0800c765
 800c73c:	2301      	movs	r3, #1
 800c73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c742:	e0d6      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c744:	2304      	movs	r3, #4
 800c746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74a:	e0d2      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c74c:	2308      	movs	r3, #8
 800c74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c752:	e0ce      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c754:	2310      	movs	r3, #16
 800c756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75a:	e0ca      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c75c:	2320      	movs	r3, #32
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e0c6      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e0c2      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c76c:	2380      	movs	r3, #128	; 0x80
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e0be      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c774:	40011400 	.word	0x40011400
 800c778:	58024400 	.word	0x58024400
 800c77c:	40007800 	.word	0x40007800
 800c780:	40007c00 	.word	0x40007c00
 800c784:	40011800 	.word	0x40011800
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4aad      	ldr	r2, [pc, #692]	; (800ca44 <UART_SetConfig+0x900>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d176      	bne.n	800c880 <UART_SetConfig+0x73c>
 800c792:	4bad      	ldr	r3, [pc, #692]	; (800ca48 <UART_SetConfig+0x904>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c79a:	2b28      	cmp	r3, #40	; 0x28
 800c79c:	d86c      	bhi.n	800c878 <UART_SetConfig+0x734>
 800c79e:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <UART_SetConfig+0x660>)
 800c7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a4:	0800c849 	.word	0x0800c849
 800c7a8:	0800c879 	.word	0x0800c879
 800c7ac:	0800c879 	.word	0x0800c879
 800c7b0:	0800c879 	.word	0x0800c879
 800c7b4:	0800c879 	.word	0x0800c879
 800c7b8:	0800c879 	.word	0x0800c879
 800c7bc:	0800c879 	.word	0x0800c879
 800c7c0:	0800c879 	.word	0x0800c879
 800c7c4:	0800c851 	.word	0x0800c851
 800c7c8:	0800c879 	.word	0x0800c879
 800c7cc:	0800c879 	.word	0x0800c879
 800c7d0:	0800c879 	.word	0x0800c879
 800c7d4:	0800c879 	.word	0x0800c879
 800c7d8:	0800c879 	.word	0x0800c879
 800c7dc:	0800c879 	.word	0x0800c879
 800c7e0:	0800c879 	.word	0x0800c879
 800c7e4:	0800c859 	.word	0x0800c859
 800c7e8:	0800c879 	.word	0x0800c879
 800c7ec:	0800c879 	.word	0x0800c879
 800c7f0:	0800c879 	.word	0x0800c879
 800c7f4:	0800c879 	.word	0x0800c879
 800c7f8:	0800c879 	.word	0x0800c879
 800c7fc:	0800c879 	.word	0x0800c879
 800c800:	0800c879 	.word	0x0800c879
 800c804:	0800c861 	.word	0x0800c861
 800c808:	0800c879 	.word	0x0800c879
 800c80c:	0800c879 	.word	0x0800c879
 800c810:	0800c879 	.word	0x0800c879
 800c814:	0800c879 	.word	0x0800c879
 800c818:	0800c879 	.word	0x0800c879
 800c81c:	0800c879 	.word	0x0800c879
 800c820:	0800c879 	.word	0x0800c879
 800c824:	0800c869 	.word	0x0800c869
 800c828:	0800c879 	.word	0x0800c879
 800c82c:	0800c879 	.word	0x0800c879
 800c830:	0800c879 	.word	0x0800c879
 800c834:	0800c879 	.word	0x0800c879
 800c838:	0800c879 	.word	0x0800c879
 800c83c:	0800c879 	.word	0x0800c879
 800c840:	0800c879 	.word	0x0800c879
 800c844:	0800c871 	.word	0x0800c871
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84e:	e050      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c850:	2304      	movs	r3, #4
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c856:	e04c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c858:	2308      	movs	r3, #8
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85e:	e048      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c860:	2310      	movs	r3, #16
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c866:	e044      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c868:	2320      	movs	r3, #32
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e040      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e03c      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c878:	2380      	movs	r3, #128	; 0x80
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e038      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a71      	ldr	r2, [pc, #452]	; (800ca4c <UART_SetConfig+0x908>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d130      	bne.n	800c8ec <UART_SetConfig+0x7a8>
 800c88a:	4b6f      	ldr	r3, [pc, #444]	; (800ca48 <UART_SetConfig+0x904>)
 800c88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88e:	f003 0307 	and.w	r3, r3, #7
 800c892:	2b05      	cmp	r3, #5
 800c894:	d826      	bhi.n	800c8e4 <UART_SetConfig+0x7a0>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <UART_SetConfig+0x758>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8b5 	.word	0x0800c8b5
 800c8a0:	0800c8bd 	.word	0x0800c8bd
 800c8a4:	0800c8c5 	.word	0x0800c8c5
 800c8a8:	0800c8cd 	.word	0x0800c8cd
 800c8ac:	0800c8d5 	.word	0x0800c8d5
 800c8b0:	0800c8dd 	.word	0x0800c8dd
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ba:	e01a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8bc:	2304      	movs	r3, #4
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c2:	e016      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8c4:	2308      	movs	r3, #8
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ca:	e012      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d2:	e00e      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8da:	e00a      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e2:	e006      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8e4:	2380      	movs	r3, #128	; 0x80
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ea:	e002      	b.n	800c8f2 <UART_SetConfig+0x7ae>
 800c8ec:	2380      	movs	r3, #128	; 0x80
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a55      	ldr	r2, [pc, #340]	; (800ca4c <UART_SetConfig+0x908>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	f040 80f8 	bne.w	800caee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c902:	2b20      	cmp	r3, #32
 800c904:	dc46      	bgt.n	800c994 <UART_SetConfig+0x850>
 800c906:	2b02      	cmp	r3, #2
 800c908:	db75      	blt.n	800c9f6 <UART_SetConfig+0x8b2>
 800c90a:	3b02      	subs	r3, #2
 800c90c:	2b1e      	cmp	r3, #30
 800c90e:	d872      	bhi.n	800c9f6 <UART_SetConfig+0x8b2>
 800c910:	a201      	add	r2, pc, #4	; (adr r2, 800c918 <UART_SetConfig+0x7d4>)
 800c912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c916:	bf00      	nop
 800c918:	0800c99b 	.word	0x0800c99b
 800c91c:	0800c9f7 	.word	0x0800c9f7
 800c920:	0800c9a3 	.word	0x0800c9a3
 800c924:	0800c9f7 	.word	0x0800c9f7
 800c928:	0800c9f7 	.word	0x0800c9f7
 800c92c:	0800c9f7 	.word	0x0800c9f7
 800c930:	0800c9b3 	.word	0x0800c9b3
 800c934:	0800c9f7 	.word	0x0800c9f7
 800c938:	0800c9f7 	.word	0x0800c9f7
 800c93c:	0800c9f7 	.word	0x0800c9f7
 800c940:	0800c9f7 	.word	0x0800c9f7
 800c944:	0800c9f7 	.word	0x0800c9f7
 800c948:	0800c9f7 	.word	0x0800c9f7
 800c94c:	0800c9f7 	.word	0x0800c9f7
 800c950:	0800c9c3 	.word	0x0800c9c3
 800c954:	0800c9f7 	.word	0x0800c9f7
 800c958:	0800c9f7 	.word	0x0800c9f7
 800c95c:	0800c9f7 	.word	0x0800c9f7
 800c960:	0800c9f7 	.word	0x0800c9f7
 800c964:	0800c9f7 	.word	0x0800c9f7
 800c968:	0800c9f7 	.word	0x0800c9f7
 800c96c:	0800c9f7 	.word	0x0800c9f7
 800c970:	0800c9f7 	.word	0x0800c9f7
 800c974:	0800c9f7 	.word	0x0800c9f7
 800c978:	0800c9f7 	.word	0x0800c9f7
 800c97c:	0800c9f7 	.word	0x0800c9f7
 800c980:	0800c9f7 	.word	0x0800c9f7
 800c984:	0800c9f7 	.word	0x0800c9f7
 800c988:	0800c9f7 	.word	0x0800c9f7
 800c98c:	0800c9f7 	.word	0x0800c9f7
 800c990:	0800c9e9 	.word	0x0800c9e9
 800c994:	2b40      	cmp	r3, #64	; 0x40
 800c996:	d02a      	beq.n	800c9ee <UART_SetConfig+0x8aa>
 800c998:	e02d      	b.n	800c9f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c99a:	f7fd faa7 	bl	8009eec <HAL_RCCEx_GetD3PCLK1Freq>
 800c99e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9a0:	e02f      	b.n	800ca02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fd fab6 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b0:	e027      	b.n	800ca02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9b2:	f107 0318 	add.w	r3, r7, #24
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fd fc02 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9bc:	69fb      	ldr	r3, [r7, #28]
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c0:	e01f      	b.n	800ca02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9c2:	4b21      	ldr	r3, [pc, #132]	; (800ca48 <UART_SetConfig+0x904>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 0320 	and.w	r3, r3, #32
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d009      	beq.n	800c9e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9ce:	4b1e      	ldr	r3, [pc, #120]	; (800ca48 <UART_SetConfig+0x904>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	08db      	lsrs	r3, r3, #3
 800c9d4:	f003 0303 	and.w	r3, r3, #3
 800c9d8:	4a1d      	ldr	r2, [pc, #116]	; (800ca50 <UART_SetConfig+0x90c>)
 800c9da:	fa22 f303 	lsr.w	r3, r2, r3
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9e0:	e00f      	b.n	800ca02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ca50 <UART_SetConfig+0x90c>)
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	e00c      	b.n	800ca02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ca54 <UART_SetConfig+0x910>)
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ec:	e009      	b.n	800ca02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f4:	e005      	b.n	800ca02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 81ee 	beq.w	800cde6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0e:	4a12      	ldr	r2, [pc, #72]	; (800ca58 <UART_SetConfig+0x914>)
 800ca10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca14:	461a      	mov	r2, r3
 800ca16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca1c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	4613      	mov	r3, r2
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	4413      	add	r3, r2
 800ca28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d305      	bcc.n	800ca3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d910      	bls.n	800ca5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca40:	e1d1      	b.n	800cde6 <UART_SetConfig+0xca2>
 800ca42:	bf00      	nop
 800ca44:	40011c00 	.word	0x40011c00
 800ca48:	58024400 	.word	0x58024400
 800ca4c:	58000c00 	.word	0x58000c00
 800ca50:	03d09000 	.word	0x03d09000
 800ca54:	003d0900 	.word	0x003d0900
 800ca58:	0800de84 	.word	0x0800de84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5e:	2200      	movs	r2, #0
 800ca60:	60bb      	str	r3, [r7, #8]
 800ca62:	60fa      	str	r2, [r7, #12]
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	4ac0      	ldr	r2, [pc, #768]	; (800cd6c <UART_SetConfig+0xc28>)
 800ca6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	2200      	movs	r2, #0
 800ca72:	603b      	str	r3, [r7, #0]
 800ca74:	607a      	str	r2, [r7, #4]
 800ca76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca7e:	f7f3 fc47 	bl	8000310 <__aeabi_uldivmod>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4610      	mov	r0, r2
 800ca88:	4619      	mov	r1, r3
 800ca8a:	f04f 0200 	mov.w	r2, #0
 800ca8e:	f04f 0300 	mov.w	r3, #0
 800ca92:	020b      	lsls	r3, r1, #8
 800ca94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca98:	0202      	lsls	r2, r0, #8
 800ca9a:	6979      	ldr	r1, [r7, #20]
 800ca9c:	6849      	ldr	r1, [r1, #4]
 800ca9e:	0849      	lsrs	r1, r1, #1
 800caa0:	2000      	movs	r0, #0
 800caa2:	460c      	mov	r4, r1
 800caa4:	4605      	mov	r5, r0
 800caa6:	eb12 0804 	adds.w	r8, r2, r4
 800caaa:	eb43 0905 	adc.w	r9, r3, r5
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	469a      	mov	sl, r3
 800cab6:	4693      	mov	fp, r2
 800cab8:	4652      	mov	r2, sl
 800caba:	465b      	mov	r3, fp
 800cabc:	4640      	mov	r0, r8
 800cabe:	4649      	mov	r1, r9
 800cac0:	f7f3 fc26 	bl	8000310 <__aeabi_uldivmod>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4613      	mov	r3, r2
 800caca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cad2:	d308      	bcc.n	800cae6 <UART_SetConfig+0x9a2>
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cada:	d204      	bcs.n	800cae6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cae2:	60da      	str	r2, [r3, #12]
 800cae4:	e17f      	b.n	800cde6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800caec:	e17b      	b.n	800cde6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf6:	f040 80bd 	bne.w	800cc74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cafa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cafe:	2b20      	cmp	r3, #32
 800cb00:	dc48      	bgt.n	800cb94 <UART_SetConfig+0xa50>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	db7b      	blt.n	800cbfe <UART_SetConfig+0xaba>
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	d879      	bhi.n	800cbfe <UART_SetConfig+0xaba>
 800cb0a:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <UART_SetConfig+0x9cc>)
 800cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb10:	0800cb9b 	.word	0x0800cb9b
 800cb14:	0800cba3 	.word	0x0800cba3
 800cb18:	0800cbff 	.word	0x0800cbff
 800cb1c:	0800cbff 	.word	0x0800cbff
 800cb20:	0800cbab 	.word	0x0800cbab
 800cb24:	0800cbff 	.word	0x0800cbff
 800cb28:	0800cbff 	.word	0x0800cbff
 800cb2c:	0800cbff 	.word	0x0800cbff
 800cb30:	0800cbbb 	.word	0x0800cbbb
 800cb34:	0800cbff 	.word	0x0800cbff
 800cb38:	0800cbff 	.word	0x0800cbff
 800cb3c:	0800cbff 	.word	0x0800cbff
 800cb40:	0800cbff 	.word	0x0800cbff
 800cb44:	0800cbff 	.word	0x0800cbff
 800cb48:	0800cbff 	.word	0x0800cbff
 800cb4c:	0800cbff 	.word	0x0800cbff
 800cb50:	0800cbcb 	.word	0x0800cbcb
 800cb54:	0800cbff 	.word	0x0800cbff
 800cb58:	0800cbff 	.word	0x0800cbff
 800cb5c:	0800cbff 	.word	0x0800cbff
 800cb60:	0800cbff 	.word	0x0800cbff
 800cb64:	0800cbff 	.word	0x0800cbff
 800cb68:	0800cbff 	.word	0x0800cbff
 800cb6c:	0800cbff 	.word	0x0800cbff
 800cb70:	0800cbff 	.word	0x0800cbff
 800cb74:	0800cbff 	.word	0x0800cbff
 800cb78:	0800cbff 	.word	0x0800cbff
 800cb7c:	0800cbff 	.word	0x0800cbff
 800cb80:	0800cbff 	.word	0x0800cbff
 800cb84:	0800cbff 	.word	0x0800cbff
 800cb88:	0800cbff 	.word	0x0800cbff
 800cb8c:	0800cbff 	.word	0x0800cbff
 800cb90:	0800cbf1 	.word	0x0800cbf1
 800cb94:	2b40      	cmp	r3, #64	; 0x40
 800cb96:	d02e      	beq.n	800cbf6 <UART_SetConfig+0xab2>
 800cb98:	e031      	b.n	800cbfe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb9a:	f7fb fb09 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 800cb9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cba0:	e033      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cba2:	f7fb fb1b 	bl	80081dc <HAL_RCC_GetPCLK2Freq>
 800cba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cba8:	e02f      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd f9b2 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb8:	e027      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbba:	f107 0318 	add.w	r3, r7, #24
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd fafe 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc8:	e01f      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbca:	4b69      	ldr	r3, [pc, #420]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0320 	and.w	r3, r3, #32
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d009      	beq.n	800cbea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbd6:	4b66      	ldr	r3, [pc, #408]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	08db      	lsrs	r3, r3, #3
 800cbdc:	f003 0303 	and.w	r3, r3, #3
 800cbe0:	4a64      	ldr	r2, [pc, #400]	; (800cd74 <UART_SetConfig+0xc30>)
 800cbe2:	fa22 f303 	lsr.w	r3, r2, r3
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbe8:	e00f      	b.n	800cc0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cbea:	4b62      	ldr	r3, [pc, #392]	; (800cd74 <UART_SetConfig+0xc30>)
 800cbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbee:	e00c      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbf0:	4b61      	ldr	r3, [pc, #388]	; (800cd78 <UART_SetConfig+0xc34>)
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf4:	e009      	b.n	800cc0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfc:	e005      	b.n	800cc0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cc08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 80ea 	beq.w	800cde6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc16:	4a55      	ldr	r2, [pc, #340]	; (800cd6c <UART_SetConfig+0xc28>)
 800cc18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc20:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc24:	005a      	lsls	r2, r3, #1
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	085b      	lsrs	r3, r3, #1
 800cc2c:	441a      	add	r2, r3
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	2b0f      	cmp	r3, #15
 800cc3c:	d916      	bls.n	800cc6c <UART_SetConfig+0xb28>
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc44:	d212      	bcs.n	800cc6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f023 030f 	bic.w	r3, r3, #15
 800cc4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc68:	60da      	str	r2, [r3, #12]
 800cc6a:	e0bc      	b.n	800cde6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc72:	e0b8      	b.n	800cde6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc78:	2b20      	cmp	r3, #32
 800cc7a:	dc4b      	bgt.n	800cd14 <UART_SetConfig+0xbd0>
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f2c0 8087 	blt.w	800cd90 <UART_SetConfig+0xc4c>
 800cc82:	2b20      	cmp	r3, #32
 800cc84:	f200 8084 	bhi.w	800cd90 <UART_SetConfig+0xc4c>
 800cc88:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <UART_SetConfig+0xb4c>)
 800cc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8e:	bf00      	nop
 800cc90:	0800cd1b 	.word	0x0800cd1b
 800cc94:	0800cd23 	.word	0x0800cd23
 800cc98:	0800cd91 	.word	0x0800cd91
 800cc9c:	0800cd91 	.word	0x0800cd91
 800cca0:	0800cd2b 	.word	0x0800cd2b
 800cca4:	0800cd91 	.word	0x0800cd91
 800cca8:	0800cd91 	.word	0x0800cd91
 800ccac:	0800cd91 	.word	0x0800cd91
 800ccb0:	0800cd3b 	.word	0x0800cd3b
 800ccb4:	0800cd91 	.word	0x0800cd91
 800ccb8:	0800cd91 	.word	0x0800cd91
 800ccbc:	0800cd91 	.word	0x0800cd91
 800ccc0:	0800cd91 	.word	0x0800cd91
 800ccc4:	0800cd91 	.word	0x0800cd91
 800ccc8:	0800cd91 	.word	0x0800cd91
 800cccc:	0800cd91 	.word	0x0800cd91
 800ccd0:	0800cd4b 	.word	0x0800cd4b
 800ccd4:	0800cd91 	.word	0x0800cd91
 800ccd8:	0800cd91 	.word	0x0800cd91
 800ccdc:	0800cd91 	.word	0x0800cd91
 800cce0:	0800cd91 	.word	0x0800cd91
 800cce4:	0800cd91 	.word	0x0800cd91
 800cce8:	0800cd91 	.word	0x0800cd91
 800ccec:	0800cd91 	.word	0x0800cd91
 800ccf0:	0800cd91 	.word	0x0800cd91
 800ccf4:	0800cd91 	.word	0x0800cd91
 800ccf8:	0800cd91 	.word	0x0800cd91
 800ccfc:	0800cd91 	.word	0x0800cd91
 800cd00:	0800cd91 	.word	0x0800cd91
 800cd04:	0800cd91 	.word	0x0800cd91
 800cd08:	0800cd91 	.word	0x0800cd91
 800cd0c:	0800cd91 	.word	0x0800cd91
 800cd10:	0800cd83 	.word	0x0800cd83
 800cd14:	2b40      	cmp	r3, #64	; 0x40
 800cd16:	d037      	beq.n	800cd88 <UART_SetConfig+0xc44>
 800cd18:	e03a      	b.n	800cd90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd1a:	f7fb fa49 	bl	80081b0 <HAL_RCC_GetPCLK1Freq>
 800cd1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd20:	e03c      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd22:	f7fb fa5b 	bl	80081dc <HAL_RCC_GetPCLK2Freq>
 800cd26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd28:	e038      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd f8f2 	bl	8009f18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e030      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd3a:	f107 0318 	add.w	r3, r7, #24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fd fa3e 	bl	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd48:	e028      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd4a:	4b09      	ldr	r3, [pc, #36]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d012      	beq.n	800cd7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd56:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <UART_SetConfig+0xc2c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	08db      	lsrs	r3, r3, #3
 800cd5c:	f003 0303 	and.w	r3, r3, #3
 800cd60:	4a04      	ldr	r2, [pc, #16]	; (800cd74 <UART_SetConfig+0xc30>)
 800cd62:	fa22 f303 	lsr.w	r3, r2, r3
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd68:	e018      	b.n	800cd9c <UART_SetConfig+0xc58>
 800cd6a:	bf00      	nop
 800cd6c:	0800de84 	.word	0x0800de84
 800cd70:	58024400 	.word	0x58024400
 800cd74:	03d09000 	.word	0x03d09000
 800cd78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cd7c:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <UART_SetConfig+0xccc>)
 800cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd80:	e00c      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd82:	4b24      	ldr	r3, [pc, #144]	; (800ce14 <UART_SetConfig+0xcd0>)
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd86:	e009      	b.n	800cd9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8e:	e005      	b.n	800cd9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd9a:	bf00      	nop
    }

    if (pclk != 0U)
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d021      	beq.n	800cde6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	4a1c      	ldr	r2, [pc, #112]	; (800ce18 <UART_SetConfig+0xcd4>)
 800cda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdac:	461a      	mov	r2, r3
 800cdae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	085b      	lsrs	r3, r3, #1
 800cdba:	441a      	add	r2, r3
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc8:	2b0f      	cmp	r3, #15
 800cdca:	d909      	bls.n	800cde0 <UART_SetConfig+0xc9c>
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdd2:	d205      	bcs.n	800cde0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60da      	str	r2, [r3, #12]
 800cdde:	e002      	b.n	800cde6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ce02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3748      	adds	r7, #72	; 0x48
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce10:	03d09000 	.word	0x03d09000
 800ce14:	003d0900 	.word	0x003d0900
 800ce18:	0800de84 	.word	0x0800de84

0800ce1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	430a      	orrs	r2, r1
 800ce66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	430a      	orrs	r2, r1
 800ce88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00a      	beq.n	800ceac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	430a      	orrs	r2, r1
 800ceaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb0:	f003 0310 	and.w	r3, r3, #16
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00a      	beq.n	800cece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced2:	f003 0320 	and.w	r3, r3, #32
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d01a      	beq.n	800cf32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf1a:	d10a      	bne.n	800cf32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	430a      	orrs	r2, r1
 800cf30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	430a      	orrs	r2, r1
 800cf52:	605a      	str	r2, [r3, #4]
  }
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b098      	sub	sp, #96	; 0x60
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf70:	f7f5 fc14 	bl	800279c <HAL_GetTick>
 800cf74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d12f      	bne.n	800cfe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f88e 	bl	800d0b4 <UART_WaitOnFlagUntilTimeout>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d022      	beq.n	800cfe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb2:	653b      	str	r3, [r7, #80]	; 0x50
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfbc:	647b      	str	r3, [r7, #68]	; 0x44
 800cfbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfc4:	e841 2300 	strex	r3, r2, [r1]
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e6      	bne.n	800cf9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e063      	b.n	800d0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0304 	and.w	r3, r3, #4
 800cfee:	2b04      	cmp	r3, #4
 800cff0:	d149      	bne.n	800d086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cffa:	2200      	movs	r2, #0
 800cffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f857 	bl	800d0b4 <UART_WaitOnFlagUntilTimeout>
 800d006:	4603      	mov	r3, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d03c      	beq.n	800d086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	e853 3f00 	ldrex	r3, [r3]
 800d018:	623b      	str	r3, [r7, #32]
   return(result);
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d020:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02a:	633b      	str	r3, [r7, #48]	; 0x30
 800d02c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d032:	e841 2300 	strex	r3, r2, [r1]
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e6      	bne.n	800d00c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3308      	adds	r3, #8
 800d044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f023 0301 	bic.w	r3, r3, #1
 800d054:	64bb      	str	r3, [r7, #72]	; 0x48
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d05e:	61fa      	str	r2, [r7, #28]
 800d060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d062:	69b9      	ldr	r1, [r7, #24]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	e841 2300 	strex	r3, r2, [r1]
 800d06a:	617b      	str	r3, [r7, #20]
   return(result);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1e5      	bne.n	800d03e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2220      	movs	r2, #32
 800d076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d082:	2303      	movs	r3, #3
 800d084:	e012      	b.n	800d0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2220      	movs	r2, #32
 800d08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3758      	adds	r7, #88	; 0x58
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0c4:	e049      	b.n	800d15a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0cc:	d045      	beq.n	800d15a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ce:	f7f5 fb65 	bl	800279c <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d302      	bcc.n	800d0e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e048      	b.n	800d17a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 0304 	and.w	r3, r3, #4
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d031      	beq.n	800d15a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	69db      	ldr	r3, [r3, #28]
 800d0fc:	f003 0308 	and.w	r3, r3, #8
 800d100:	2b08      	cmp	r3, #8
 800d102:	d110      	bne.n	800d126 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2208      	movs	r2, #8
 800d10a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 f839 	bl	800d184 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2208      	movs	r2, #8
 800d116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e029      	b.n	800d17a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	69db      	ldr	r3, [r3, #28]
 800d12c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d134:	d111      	bne.n	800d15a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d13e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f000 f81f 	bl	800d184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2220      	movs	r2, #32
 800d14a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d156:	2303      	movs	r3, #3
 800d158:	e00f      	b.n	800d17a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69da      	ldr	r2, [r3, #28]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	4013      	ands	r3, r2
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	429a      	cmp	r2, r3
 800d168:	bf0c      	ite	eq
 800d16a:	2301      	moveq	r3, #1
 800d16c:	2300      	movne	r3, #0
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	461a      	mov	r2, r3
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	429a      	cmp	r2, r3
 800d176:	d0a6      	beq.n	800d0c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
	...

0800d184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b095      	sub	sp, #84	; 0x54
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d194:	e853 3f00 	ldrex	r3, [r3]
 800d198:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1aa:	643b      	str	r3, [r7, #64]	; 0x40
 800d1ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1b2:	e841 2300 	strex	r3, r2, [r1]
 800d1b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1e6      	bne.n	800d18c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ce:	69fa      	ldr	r2, [r7, #28]
 800d1d0:	4b1e      	ldr	r3, [pc, #120]	; (800d24c <UART_EndRxTransfer+0xc8>)
 800d1d2:	4013      	ands	r3, r2
 800d1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3308      	adds	r3, #8
 800d1dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e5      	bne.n	800d1be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d118      	bne.n	800d22c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	60bb      	str	r3, [r7, #8]
   return(result);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f023 0310 	bic.w	r3, r3, #16
 800d20e:	647b      	str	r3, [r7, #68]	; 0x44
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d218:	61bb      	str	r3, [r7, #24]
 800d21a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	6979      	ldr	r1, [r7, #20]
 800d21e:	69ba      	ldr	r2, [r7, #24]
 800d220:	e841 2300 	strex	r3, r2, [r1]
 800d224:	613b      	str	r3, [r7, #16]
   return(result);
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e6      	bne.n	800d1fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2220      	movs	r2, #32
 800d230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d240:	bf00      	nop
 800d242:	3754      	adds	r7, #84	; 0x54
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	effffffe 	.word	0xeffffffe

0800d250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d101      	bne.n	800d266 <HAL_UARTEx_DisableFifoMode+0x16>
 800d262:	2302      	movs	r3, #2
 800d264:	e027      	b.n	800d2b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2224      	movs	r2, #36	; 0x24
 800d272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f022 0201 	bic.w	r2, r2, #1
 800d28c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d101      	bne.n	800d2da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	e02d      	b.n	800d336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2224      	movs	r2, #36	; 0x24
 800d2e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f022 0201 	bic.w	r2, r2, #1
 800d300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f850 	bl	800d3bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2220      	movs	r2, #32
 800d328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d101      	bne.n	800d356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d352:	2302      	movs	r3, #2
 800d354:	e02d      	b.n	800d3b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2224      	movs	r2, #36	; 0x24
 800d362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f022 0201 	bic.w	r2, r2, #1
 800d37c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f812 	bl	800d3bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2220      	movs	r2, #32
 800d3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d108      	bne.n	800d3de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3dc:	e031      	b.n	800d442 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3de:	2310      	movs	r3, #16
 800d3e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3e2:	2310      	movs	r3, #16
 800d3e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	0e5b      	lsrs	r3, r3, #25
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f003 0307 	and.w	r3, r3, #7
 800d3f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	0f5b      	lsrs	r3, r3, #29
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	f003 0307 	and.w	r3, r3, #7
 800d404:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	7b3a      	ldrb	r2, [r7, #12]
 800d40a:	4911      	ldr	r1, [pc, #68]	; (800d450 <UARTEx_SetNbDataToProcess+0x94>)
 800d40c:	5c8a      	ldrb	r2, [r1, r2]
 800d40e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d412:	7b3a      	ldrb	r2, [r7, #12]
 800d414:	490f      	ldr	r1, [pc, #60]	; (800d454 <UARTEx_SetNbDataToProcess+0x98>)
 800d416:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d418:	fb93 f3f2 	sdiv	r3, r3, r2
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	7b7a      	ldrb	r2, [r7, #13]
 800d428:	4909      	ldr	r1, [pc, #36]	; (800d450 <UARTEx_SetNbDataToProcess+0x94>)
 800d42a:	5c8a      	ldrb	r2, [r1, r2]
 800d42c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d430:	7b7a      	ldrb	r2, [r7, #13]
 800d432:	4908      	ldr	r1, [pc, #32]	; (800d454 <UARTEx_SetNbDataToProcess+0x98>)
 800d434:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d436:	fb93 f3f2 	sdiv	r3, r3, r2
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d442:	bf00      	nop
 800d444:	3714      	adds	r7, #20
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	0800de9c 	.word	0x0800de9c
 800d454:	0800dea4 	.word	0x0800dea4

0800d458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d458:	b084      	sub	sp, #16
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	f107 001c 	add.w	r0, r7, #28
 800d466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d120      	bne.n	800d4b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	4b2a      	ldr	r3, [pc, #168]	; (800d52c <USB_CoreInit+0xd4>)
 800d482:	4013      	ands	r3, r2
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d496:	2b01      	cmp	r3, #1
 800d498:	d105      	bne.n	800d4a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 faac 	bl	800da04 <USB_CoreReset>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
 800d4b0:	e01a      	b.n	800d4e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 faa0 	bl	800da04 <USB_CoreReset>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d106      	bne.n	800d4dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d4da:	e005      	b.n	800d4e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d116      	bne.n	800d51c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4fc:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <USB_CoreInit+0xd8>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f043 0206 	orr.w	r2, r3, #6
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f043 0220 	orr.w	r2, r3, #32
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d528:	b004      	add	sp, #16
 800d52a:	4770      	bx	lr
 800d52c:	ffbdffbf 	.word	0xffbdffbf
 800d530:	03ee0000 	.word	0x03ee0000

0800d534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	f023 0201 	bic.w	r2, r3, #1
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b084      	sub	sp, #16
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	460b      	mov	r3, r1
 800d560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d572:	78fb      	ldrb	r3, [r7, #3]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d115      	bne.n	800d5a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d584:	2001      	movs	r0, #1
 800d586:	f7f5 f915 	bl	80027b4 <HAL_Delay>
      ms++;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3301      	adds	r3, #1
 800d58e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 fa29 	bl	800d9e8 <USB_GetMode>
 800d596:	4603      	mov	r3, r0
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d01e      	beq.n	800d5da <USB_SetCurrentMode+0x84>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2b31      	cmp	r3, #49	; 0x31
 800d5a0:	d9f0      	bls.n	800d584 <USB_SetCurrentMode+0x2e>
 800d5a2:	e01a      	b.n	800d5da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5a4:	78fb      	ldrb	r3, [r7, #3]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d115      	bne.n	800d5d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	f7f5 f8fc 	bl	80027b4 <HAL_Delay>
      ms++;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fa10 	bl	800d9e8 <USB_GetMode>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <USB_SetCurrentMode+0x84>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b31      	cmp	r3, #49	; 0x31
 800d5d2:	d9f0      	bls.n	800d5b6 <USB_SetCurrentMode+0x60>
 800d5d4:	e001      	b.n	800d5da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e005      	b.n	800d5e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2b32      	cmp	r3, #50	; 0x32
 800d5de:	d101      	bne.n	800d5e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e000      	b.n	800d5e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b086      	sub	sp, #24
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	613b      	str	r3, [r7, #16]
 800d60e:	e009      	b.n	800d624 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3340      	adds	r3, #64	; 0x40
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	2200      	movs	r2, #0
 800d61c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	3301      	adds	r3, #1
 800d622:	613b      	str	r3, [r7, #16]
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b0e      	cmp	r3, #14
 800d628:	d9f2      	bls.n	800d610 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d11c      	bne.n	800d66a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d63e:	f043 0302 	orr.w	r3, r3, #2
 800d642:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d648:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	e005      	b.n	800d676 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d67c:	461a      	mov	r2, r3
 800d67e:	2300      	movs	r3, #0
 800d680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d688:	4619      	mov	r1, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d690:	461a      	mov	r2, r3
 800d692:	680b      	ldr	r3, [r1, #0]
 800d694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d10c      	bne.n	800d6b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d104      	bne.n	800d6ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f965 	bl	800d974 <USB_SetDevSpeed>
 800d6aa:	e008      	b.n	800d6be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f960 	bl	800d974 <USB_SetDevSpeed>
 800d6b4:	e003      	b.n	800d6be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6b6:	2103      	movs	r1, #3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f95b 	bl	800d974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d6be:	2110      	movs	r1, #16
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f8f3 	bl	800d8ac <USB_FlushTxFifo>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f91f 	bl	800d914 <USB_FlushRxFifo>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6fe:	461a      	mov	r2, r3
 800d700:	2300      	movs	r3, #0
 800d702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d704:	2300      	movs	r3, #0
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	e043      	b.n	800d792 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d720:	d118      	bne.n	800d754 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10a      	bne.n	800d73e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d734:	461a      	mov	r2, r3
 800d736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d73a:	6013      	str	r3, [r2, #0]
 800d73c:	e013      	b.n	800d766 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74a:	461a      	mov	r2, r3
 800d74c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	e008      	b.n	800d766 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d760:	461a      	mov	r2, r3
 800d762:	2300      	movs	r3, #0
 800d764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d772:	461a      	mov	r2, r3
 800d774:	2300      	movs	r3, #0
 800d776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	015a      	lsls	r2, r3, #5
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4413      	add	r3, r2
 800d780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d784:	461a      	mov	r2, r3
 800d786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d78a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	3301      	adds	r3, #1
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	429a      	cmp	r2, r3
 800d798:	d3b7      	bcc.n	800d70a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d79a:	2300      	movs	r3, #0
 800d79c:	613b      	str	r3, [r7, #16]
 800d79e:	e043      	b.n	800d828 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7b6:	d118      	bne.n	800d7ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	015a      	lsls	r2, r3, #5
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	e013      	b.n	800d7fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	015a      	lsls	r2, r3, #5
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	e008      	b.n	800d7fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d808:	461a      	mov	r2, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	4413      	add	r3, r2
 800d816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81a:	461a      	mov	r2, r3
 800d81c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3301      	adds	r3, #1
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d3b7      	bcc.n	800d7a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d83e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	2b00      	cmp	r3, #0
 800d856:	d105      	bne.n	800d864 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	f043 0210 	orr.w	r2, r3, #16
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	699a      	ldr	r2, [r3, #24]
 800d868:	4b0e      	ldr	r3, [pc, #56]	; (800d8a4 <USB_DevInit+0x2b4>)
 800d86a:	4313      	orrs	r3, r2
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d005      	beq.n	800d882 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f043 0208 	orr.w	r2, r3, #8
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d884:	2b01      	cmp	r3, #1
 800d886:	d105      	bne.n	800d894 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	699a      	ldr	r2, [r3, #24]
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <USB_DevInit+0x2b8>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d894:	7dfb      	ldrb	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8a0:	b004      	add	sp, #16
 800d8a2:	4770      	bx	lr
 800d8a4:	803c3800 	.word	0x803c3800
 800d8a8:	40000004 	.word	0x40000004

0800d8ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4a13      	ldr	r2, [pc, #76]	; (800d910 <USB_FlushTxFifo+0x64>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d901      	bls.n	800d8cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	e01b      	b.n	800d904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	daf2      	bge.n	800d8ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	019b      	lsls	r3, r3, #6
 800d8dc:	f043 0220 	orr.w	r2, r3, #32
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	4a08      	ldr	r2, [pc, #32]	; (800d910 <USB_FlushTxFifo+0x64>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d901      	bls.n	800d8f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	e006      	b.n	800d904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d0f0      	beq.n	800d8e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	00030d40 	.word	0x00030d40

0800d914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d91c:	2300      	movs	r3, #0
 800d91e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	3301      	adds	r3, #1
 800d924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	4a11      	ldr	r2, [pc, #68]	; (800d970 <USB_FlushRxFifo+0x5c>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d901      	bls.n	800d932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	e018      	b.n	800d964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	daf2      	bge.n	800d920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2210      	movs	r2, #16
 800d942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3301      	adds	r3, #1
 800d948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	4a08      	ldr	r2, [pc, #32]	; (800d970 <USB_FlushRxFifo+0x5c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d901      	bls.n	800d956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d952:	2303      	movs	r3, #3
 800d954:	e006      	b.n	800d964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	f003 0310 	and.w	r3, r3, #16
 800d95e:	2b10      	cmp	r3, #16
 800d960:	d0f0      	beq.n	800d944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	00030d40 	.word	0x00030d40

0800d974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	78fb      	ldrb	r3, [r7, #3]
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d994:	4313      	orrs	r3, r2
 800d996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	b085      	sub	sp, #20
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9c0:	f023 0303 	bic.w	r3, r3, #3
 800d9c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9d4:	f043 0302 	orr.w	r3, r3, #2
 800d9d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9da:	2300      	movs	r3, #0
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	695b      	ldr	r3, [r3, #20]
 800d9f4:	f003 0301 	and.w	r3, r3, #1
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3301      	adds	r3, #1
 800da14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	4a13      	ldr	r2, [pc, #76]	; (800da68 <USB_CoreReset+0x64>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d901      	bls.n	800da22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da1e:	2303      	movs	r3, #3
 800da20:	e01b      	b.n	800da5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	daf2      	bge.n	800da10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f043 0201 	orr.w	r2, r3, #1
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	3301      	adds	r3, #1
 800da3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a09      	ldr	r2, [pc, #36]	; (800da68 <USB_CoreReset+0x64>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d901      	bls.n	800da4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da48:	2303      	movs	r3, #3
 800da4a:	e006      	b.n	800da5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	f003 0301 	and.w	r3, r3, #1
 800da54:	2b01      	cmp	r3, #1
 800da56:	d0f0      	beq.n	800da3a <USB_CoreReset+0x36>

  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	00030d40 	.word	0x00030d40

0800da6c <__errno>:
 800da6c:	4b01      	ldr	r3, [pc, #4]	; (800da74 <__errno+0x8>)
 800da6e:	6818      	ldr	r0, [r3, #0]
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	24000010 	.word	0x24000010

0800da78 <__libc_init_array>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	4d0d      	ldr	r5, [pc, #52]	; (800dab0 <__libc_init_array+0x38>)
 800da7c:	4c0d      	ldr	r4, [pc, #52]	; (800dab4 <__libc_init_array+0x3c>)
 800da7e:	1b64      	subs	r4, r4, r5
 800da80:	10a4      	asrs	r4, r4, #2
 800da82:	2600      	movs	r6, #0
 800da84:	42a6      	cmp	r6, r4
 800da86:	d109      	bne.n	800da9c <__libc_init_array+0x24>
 800da88:	4d0b      	ldr	r5, [pc, #44]	; (800dab8 <__libc_init_array+0x40>)
 800da8a:	4c0c      	ldr	r4, [pc, #48]	; (800dabc <__libc_init_array+0x44>)
 800da8c:	f000 f966 	bl	800dd5c <_init>
 800da90:	1b64      	subs	r4, r4, r5
 800da92:	10a4      	asrs	r4, r4, #2
 800da94:	2600      	movs	r6, #0
 800da96:	42a6      	cmp	r6, r4
 800da98:	d105      	bne.n	800daa6 <__libc_init_array+0x2e>
 800da9a:	bd70      	pop	{r4, r5, r6, pc}
 800da9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa0:	4798      	blx	r3
 800daa2:	3601      	adds	r6, #1
 800daa4:	e7ee      	b.n	800da84 <__libc_init_array+0xc>
 800daa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800daaa:	4798      	blx	r3
 800daac:	3601      	adds	r6, #1
 800daae:	e7f2      	b.n	800da96 <__libc_init_array+0x1e>
 800dab0:	0800dec8 	.word	0x0800dec8
 800dab4:	0800dec8 	.word	0x0800dec8
 800dab8:	0800dec8 	.word	0x0800dec8
 800dabc:	0800decc 	.word	0x0800decc

0800dac0 <memcpy>:
 800dac0:	440a      	add	r2, r1
 800dac2:	4291      	cmp	r1, r2
 800dac4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dac8:	d100      	bne.n	800dacc <memcpy+0xc>
 800daca:	4770      	bx	lr
 800dacc:	b510      	push	{r4, lr}
 800dace:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dad6:	4291      	cmp	r1, r2
 800dad8:	d1f9      	bne.n	800dace <memcpy+0xe>
 800dada:	bd10      	pop	{r4, pc}

0800dadc <memset>:
 800dadc:	4402      	add	r2, r0
 800dade:	4603      	mov	r3, r0
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d100      	bne.n	800dae6 <memset+0xa>
 800dae4:	4770      	bx	lr
 800dae6:	f803 1b01 	strb.w	r1, [r3], #1
 800daea:	e7f9      	b.n	800dae0 <memset+0x4>
 800daec:	0000      	movs	r0, r0
	...

0800daf0 <fmod>:
 800daf0:	b508      	push	{r3, lr}
 800daf2:	ed2d 8b04 	vpush	{d8-d9}
 800daf6:	eeb0 9b40 	vmov.f64	d9, d0
 800dafa:	eeb0 8b41 	vmov.f64	d8, d1
 800dafe:	f000 f81b 	bl	800db38 <__ieee754_fmod>
 800db02:	eeb4 9b48 	vcmp.f64	d9, d8
 800db06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db0a:	d60c      	bvs.n	800db26 <fmod+0x36>
 800db0c:	ed9f 9b08 	vldr	d9, [pc, #32]	; 800db30 <fmod+0x40>
 800db10:	eeb4 8b49 	vcmp.f64	d8, d9
 800db14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db18:	d105      	bne.n	800db26 <fmod+0x36>
 800db1a:	f7ff ffa7 	bl	800da6c <__errno>
 800db1e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800db22:	2321      	movs	r3, #33	; 0x21
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	ecbd 8b04 	vpop	{d8-d9}
 800db2a:	bd08      	pop	{r3, pc}
 800db2c:	f3af 8000 	nop.w
	...

0800db38 <__ieee754_fmod>:
 800db38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db3c:	ed8d 1b00 	vstr	d1, [sp]
 800db40:	e9dd 6500 	ldrd	r6, r5, [sp]
 800db44:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800db48:	ea57 0306 	orrs.w	r3, r7, r6
 800db4c:	46b4      	mov	ip, r6
 800db4e:	d00d      	beq.n	800db6c <__ieee754_fmod+0x34>
 800db50:	ee10 9a90 	vmov	r9, s1
 800db54:	4a7b      	ldr	r2, [pc, #492]	; (800dd44 <__ieee754_fmod+0x20c>)
 800db56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db5a:	4293      	cmp	r3, r2
 800db5c:	dc06      	bgt.n	800db6c <__ieee754_fmod+0x34>
 800db5e:	4272      	negs	r2, r6
 800db60:	4879      	ldr	r0, [pc, #484]	; (800dd48 <__ieee754_fmod+0x210>)
 800db62:	4332      	orrs	r2, r6
 800db64:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 800db68:	4282      	cmp	r2, r0
 800db6a:	d908      	bls.n	800db7e <__ieee754_fmod+0x46>
 800db6c:	ed9d 7b00 	vldr	d7, [sp]
 800db70:	ee20 7b07 	vmul.f64	d7, d0, d7
 800db74:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800db78:	b003      	add	sp, #12
 800db7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db7e:	42bb      	cmp	r3, r7
 800db80:	ee10 ea10 	vmov	lr, s0
 800db84:	ee10 1a10 	vmov	r1, s0
 800db88:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 800db8c:	dc09      	bgt.n	800dba2 <__ieee754_fmod+0x6a>
 800db8e:	dbf3      	blt.n	800db78 <__ieee754_fmod+0x40>
 800db90:	45b6      	cmp	lr, r6
 800db92:	d3f1      	bcc.n	800db78 <__ieee754_fmod+0x40>
 800db94:	d105      	bne.n	800dba2 <__ieee754_fmod+0x6a>
 800db96:	4b6d      	ldr	r3, [pc, #436]	; (800dd4c <__ieee754_fmod+0x214>)
 800db98:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800db9c:	ed94 0b00 	vldr	d0, [r4]
 800dba0:	e7ea      	b.n	800db78 <__ieee754_fmod+0x40>
 800dba2:	ea19 0f00 	tst.w	r9, r0
 800dba6:	d14d      	bne.n	800dc44 <__ieee754_fmod+0x10c>
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d144      	bne.n	800dc36 <__ieee754_fmod+0xfe>
 800dbac:	4868      	ldr	r0, [pc, #416]	; (800dd50 <__ieee754_fmod+0x218>)
 800dbae:	4672      	mov	r2, lr
 800dbb0:	2a00      	cmp	r2, #0
 800dbb2:	dc3d      	bgt.n	800dc30 <__ieee754_fmod+0xf8>
 800dbb4:	4a64      	ldr	r2, [pc, #400]	; (800dd48 <__ieee754_fmod+0x210>)
 800dbb6:	402a      	ands	r2, r5
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	d155      	bne.n	800dc68 <__ieee754_fmod+0x130>
 800dbbc:	2f00      	cmp	r7, #0
 800dbbe:	d149      	bne.n	800dc54 <__ieee754_fmod+0x11c>
 800dbc0:	46b0      	mov	r8, r6
 800dbc2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dbc6:	f1b8 0f00 	cmp.w	r8, #0
 800dbca:	dc3f      	bgt.n	800dc4c <__ieee754_fmod+0x114>
 800dbcc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800dd54 <__ieee754_fmod+0x21c>
 800dbd0:	4540      	cmp	r0, r8
 800dbd2:	db4d      	blt.n	800dc70 <__ieee754_fmod+0x138>
 800dbd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbdc:	f8df e174 	ldr.w	lr, [pc, #372]	; 800dd54 <__ieee754_fmod+0x21c>
 800dbe0:	4572      	cmp	r2, lr
 800dbe2:	db59      	blt.n	800dc98 <__ieee754_fmod+0x160>
 800dbe4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dbe8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800dbec:	1a80      	subs	r0, r0, r2
 800dbee:	1b5e      	subs	r6, r3, r5
 800dbf0:	eba1 070c 	sub.w	r7, r1, ip
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d165      	bne.n	800dcc4 <__ieee754_fmod+0x18c>
 800dbf8:	4561      	cmp	r1, ip
 800dbfa:	bf38      	it	cc
 800dbfc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	bfa4      	itt	ge
 800dc04:	4639      	movge	r1, r7
 800dc06:	4633      	movge	r3, r6
 800dc08:	ea53 0001 	orrs.w	r0, r3, r1
 800dc0c:	d0c3      	beq.n	800db96 <__ieee754_fmod+0x5e>
 800dc0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc12:	db6c      	blt.n	800dcee <__ieee754_fmod+0x1b6>
 800dc14:	484f      	ldr	r0, [pc, #316]	; (800dd54 <__ieee754_fmod+0x21c>)
 800dc16:	4282      	cmp	r2, r0
 800dc18:	db6f      	blt.n	800dcfa <__ieee754_fmod+0x1c2>
 800dc1a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc1e:	4323      	orrs	r3, r4
 800dc20:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800dc24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc28:	460c      	mov	r4, r1
 800dc2a:	ec45 4b10 	vmov	d0, r4, r5
 800dc2e:	e7a3      	b.n	800db78 <__ieee754_fmod+0x40>
 800dc30:	3801      	subs	r0, #1
 800dc32:	0052      	lsls	r2, r2, #1
 800dc34:	e7bc      	b.n	800dbb0 <__ieee754_fmod+0x78>
 800dc36:	4847      	ldr	r0, [pc, #284]	; (800dd54 <__ieee754_fmod+0x21c>)
 800dc38:	02da      	lsls	r2, r3, #11
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	ddba      	ble.n	800dbb4 <__ieee754_fmod+0x7c>
 800dc3e:	3801      	subs	r0, #1
 800dc40:	0052      	lsls	r2, r2, #1
 800dc42:	e7fa      	b.n	800dc3a <__ieee754_fmod+0x102>
 800dc44:	1518      	asrs	r0, r3, #20
 800dc46:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800dc4a:	e7b3      	b.n	800dbb4 <__ieee754_fmod+0x7c>
 800dc4c:	3a01      	subs	r2, #1
 800dc4e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dc52:	e7b8      	b.n	800dbc6 <__ieee754_fmod+0x8e>
 800dc54:	4a3f      	ldr	r2, [pc, #252]	; (800dd54 <__ieee754_fmod+0x21c>)
 800dc56:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 800dc5a:	f1b8 0f00 	cmp.w	r8, #0
 800dc5e:	ddb5      	ble.n	800dbcc <__ieee754_fmod+0x94>
 800dc60:	3a01      	subs	r2, #1
 800dc62:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dc66:	e7f8      	b.n	800dc5a <__ieee754_fmod+0x122>
 800dc68:	153a      	asrs	r2, r7, #20
 800dc6a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dc6e:	e7ad      	b.n	800dbcc <__ieee754_fmod+0x94>
 800dc70:	eba8 0100 	sub.w	r1, r8, r0
 800dc74:	291f      	cmp	r1, #31
 800dc76:	dc09      	bgt.n	800dc8c <__ieee754_fmod+0x154>
 800dc78:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 800dc7c:	408b      	lsls	r3, r1
 800dc7e:	fa2e f808 	lsr.w	r8, lr, r8
 800dc82:	ea48 0303 	orr.w	r3, r8, r3
 800dc86:	fa0e f101 	lsl.w	r1, lr, r1
 800dc8a:	e7a7      	b.n	800dbdc <__ieee754_fmod+0xa4>
 800dc8c:	4b32      	ldr	r3, [pc, #200]	; (800dd58 <__ieee754_fmod+0x220>)
 800dc8e:	1a1b      	subs	r3, r3, r0
 800dc90:	fa0e f303 	lsl.w	r3, lr, r3
 800dc94:	2100      	movs	r1, #0
 800dc96:	e7a1      	b.n	800dbdc <__ieee754_fmod+0xa4>
 800dc98:	ebae 0c02 	sub.w	ip, lr, r2
 800dc9c:	f1bc 0f1f 	cmp.w	ip, #31
 800dca0:	dc09      	bgt.n	800dcb6 <__ieee754_fmod+0x17e>
 800dca2:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800dca6:	fa07 f70c 	lsl.w	r7, r7, ip
 800dcaa:	fa26 f505 	lsr.w	r5, r6, r5
 800dcae:	433d      	orrs	r5, r7
 800dcb0:	fa06 fc0c 	lsl.w	ip, r6, ip
 800dcb4:	e79a      	b.n	800dbec <__ieee754_fmod+0xb4>
 800dcb6:	4d28      	ldr	r5, [pc, #160]	; (800dd58 <__ieee754_fmod+0x220>)
 800dcb8:	1aad      	subs	r5, r5, r2
 800dcba:	fa06 f505 	lsl.w	r5, r6, r5
 800dcbe:	f04f 0c00 	mov.w	ip, #0
 800dcc2:	e793      	b.n	800dbec <__ieee754_fmod+0xb4>
 800dcc4:	4561      	cmp	r1, ip
 800dcc6:	bf38      	it	cc
 800dcc8:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dccc:	2e00      	cmp	r6, #0
 800dcce:	da05      	bge.n	800dcdc <__ieee754_fmod+0x1a4>
 800dcd0:	0fce      	lsrs	r6, r1, #31
 800dcd2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dcd6:	0049      	lsls	r1, r1, #1
 800dcd8:	3801      	subs	r0, #1
 800dcda:	e788      	b.n	800dbee <__ieee754_fmod+0xb6>
 800dcdc:	ea56 0307 	orrs.w	r3, r6, r7
 800dce0:	f43f af59 	beq.w	800db96 <__ieee754_fmod+0x5e>
 800dce4:	0ffb      	lsrs	r3, r7, #31
 800dce6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800dcea:	0079      	lsls	r1, r7, #1
 800dcec:	e7f4      	b.n	800dcd8 <__ieee754_fmod+0x1a0>
 800dcee:	0fc8      	lsrs	r0, r1, #31
 800dcf0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dcf4:	0049      	lsls	r1, r1, #1
 800dcf6:	3a01      	subs	r2, #1
 800dcf8:	e789      	b.n	800dc0e <__ieee754_fmod+0xd6>
 800dcfa:	1a80      	subs	r0, r0, r2
 800dcfc:	2814      	cmp	r0, #20
 800dcfe:	dc0c      	bgt.n	800dd1a <__ieee754_fmod+0x1e2>
 800dd00:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dd04:	fa03 f202 	lsl.w	r2, r3, r2
 800dd08:	40c1      	lsrs	r1, r0
 800dd0a:	430a      	orrs	r2, r1
 800dd0c:	4103      	asrs	r3, r0
 800dd0e:	ea43 0104 	orr.w	r1, r3, r4
 800dd12:	4610      	mov	r0, r2
 800dd14:	ec41 0b10 	vmov	d0, r0, r1
 800dd18:	e72e      	b.n	800db78 <__ieee754_fmod+0x40>
 800dd1a:	281f      	cmp	r0, #31
 800dd1c:	dc07      	bgt.n	800dd2e <__ieee754_fmod+0x1f6>
 800dd1e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dd22:	40c1      	lsrs	r1, r0
 800dd24:	fa03 f202 	lsl.w	r2, r3, r2
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	4623      	mov	r3, r4
 800dd2c:	e7ef      	b.n	800dd0e <__ieee754_fmod+0x1d6>
 800dd2e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800dd32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd36:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800dd3a:	32e2      	adds	r2, #226	; 0xe2
 800dd3c:	fa43 f202 	asr.w	r2, r3, r2
 800dd40:	e7f3      	b.n	800dd2a <__ieee754_fmod+0x1f2>
 800dd42:	bf00      	nop
 800dd44:	7fefffff 	.word	0x7fefffff
 800dd48:	7ff00000 	.word	0x7ff00000
 800dd4c:	0800deb0 	.word	0x0800deb0
 800dd50:	fffffbed 	.word	0xfffffbed
 800dd54:	fffffc02 	.word	0xfffffc02
 800dd58:	fffffbe2 	.word	0xfffffbe2

0800dd5c <_init>:
 800dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5e:	bf00      	nop
 800dd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd62:	bc08      	pop	{r3}
 800dd64:	469e      	mov	lr, r3
 800dd66:	4770      	bx	lr

0800dd68 <_fini>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr
