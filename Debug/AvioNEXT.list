
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018090  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08018360  08018360  00028360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018718  08018718  00028718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018720  08018720  00028720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018724  08018724  00028724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018728  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  08018878  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  08018878  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035796  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  00065957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a916  00000000  00000000  000ae610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42f  00000000  00000000  000e8f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c4  00000000  00000000  00266358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018348 	.word	0x08018348

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018348 	.word	0x08018348

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc7a 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa10 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa0a 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc68 	bl	8007fec <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc50 	bl	8007fec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9e6 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fbdb 	bl	800ef1c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc3d 	bl	8007fec <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc26 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9bc 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9b6 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc14 	bl	8007fec <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08018504 	.word	0x08018504
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd74 	bl	800f7a4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd6e 	bl	800f7a4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd68 	bl	800f7a4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd62 	bl	800f7a4 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08018504 	.word	0x08018504
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f967 	bl	8007fec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d fefd 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f8f2 	bl	800ef1c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f954 	bl	8007fec <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f937 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fecd 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fec7 	bl	800eb24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f925 	bl	8007fec <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f84f 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f849 	bl	8007fec <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f883 	bl	801707c <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc23 	bl	80167d4 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08018360 	.word	0x08018360
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0d0      	sub	sp, #320	; 0x140
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80010c2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80010c4:	f7ff febc 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c8:	2012      	movs	r0, #18
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <LoRA_sendPacket+0x38>
 80010e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d04c      	beq.n	8001186 <LoRA_sendPacket+0xd2>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010ec:	f7ff ff7a 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80010f6:	e011      	b.n	800111c <LoRA_sendPacket+0x68>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010fc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001100:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe23 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8001112:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800111c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001120:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f7ff f8fd 	bl	8000324 <strlen>
 800112a:	4602      	mov	r2, r0
 800112c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001130:	429a      	cmp	r2, r3
 8001132:	d8e1      	bhi.n	80010f8 <LoRA_sendPacket+0x44>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001134:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001138:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f7ff f8f1 	bl	8000324 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2022      	movs	r0, #34	; 0x22
 800114a:	f7ff fe05 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800114e:	f7ff ff57 	bl	8001000 <LoRA_endPacket>
    	char sent[300];
    	sprintf(sent, "\nsent: %s\n", data);
 8001152:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001156:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800115a:	f107 000c 	add.w	r0, r7, #12
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	490e      	ldr	r1, [pc, #56]	; (800119c <LoRA_sendPacket+0xe8>)
 8001162:	f015 ff8b 	bl	801707c <siprintf>
    	HAL_Delay(100);
 8001166:	2064      	movs	r0, #100	; 0x64
 8001168:	f002 fc8e 	bl	8003a88 <HAL_Delay>
    	CDC_Transmit_HS(sent, strlen(sent));
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f8d7 	bl	8000324 <strlen>
 8001176:	4602      	mov	r2, r0
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f015 fb28 	bl	80167d4 <CDC_Transmit_HS>
	{
 8001184:	e004      	b.n	8001190 <LoRA_sendPacket+0xdc>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001186:	2185      	movs	r1, #133	; 0x85
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fde5 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08018364 	.word	0x08018364

080011a0 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	4827      	ldr	r0, [pc, #156]	; (800124c <disarm+0xac>)
 80011ae:	f006 ff1d 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2104      	movs	r1, #4
 80011b6:	4825      	ldr	r0, [pc, #148]	; (800124c <disarm+0xac>)
 80011b8:	f006 ff18 	bl	8007fec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <disarm+0xb0>)
 80011c2:	f006 ff13 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4821      	ldr	r0, [pc, #132]	; (8001254 <disarm+0xb4>)
 80011ce:	f006 ff0d 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <disarm+0xb4>)
 80011da:	f006 ff07 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e4:	481b      	ldr	r0, [pc, #108]	; (8001254 <disarm+0xb4>)
 80011e6:	f006 ff01 	bl	8007fec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2102      	movs	r1, #2
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <disarm+0xb8>)
 80011f0:	f006 fefc 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <disarm+0xbc>)
 80011fc:	f006 fef6 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <disarm+0xbc>)
 8001208:	f006 fef0 	bl	8007fec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <disarm+0xbc>)
 8001214:	f006 feea 	bl	8007fec <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <disarm+0xc0>)
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <disarm+0xc0>)
 8001220:	2200      	movs	r2, #0
 8001222:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <disarm+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 800122a:	f7ff fbb5 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <disarm+0xc4>)
 8001232:	461a      	mov	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	cb03      	ldmia	r3!, {r0, r1}
 8001238:	6010      	str	r0, [r2, #0]
 800123a:	6051      	str	r1, [r2, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	7213      	strb	r3, [r2, #8]
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	58020000 	.word	0x58020000
 8001250:	58020400 	.word	0x58020400
 8001254:	58021400 	.word	0x58021400
 8001258:	58021800 	.word	0x58021800
 800125c:	58021000 	.word	0x58021000
 8001260:	24000b50 	.word	0x24000b50
 8001264:	08018370 	.word	0x08018370

08001268 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8001272:	f7ff fede 	bl	8001032 <LoRA_parsePacket>
 8001276:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	429a      	cmp	r2, r3
 800127e:	dc01      	bgt.n	8001284 <recv_packet+0x1c>
  {
    return 0;
 8001280:	2300      	movs	r3, #0
 8001282:	e01c      	b.n	80012be <recv_packet+0x56>
  }
  if(packet_length){
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d018      	beq.n	80012bc <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e00a      	b.n	80012a6 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	18d4      	adds	r4, r2, r3
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fd36 	bl	8000d08 <LoRA_Read_Register>
 800129c:	4603      	mov	r3, r0
 800129e:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf0      	blt.n	8001290 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	e000      	b.n	80012be <recv_packet+0x56>
  }
  else{
    return 0;
 80012bc:	2300      	movs	r3, #0
  }
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}

080012c6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80012c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	466b      	mov	r3, sp
 80012d2:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff f825 	bl	8000324 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29b      	uxth	r3, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80012e2:	8a79      	ldrh	r1, [r7, #18]
 80012e4:	460b      	mov	r3, r1
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	b28b      	uxth	r3, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	4698      	mov	r8, r3
 80012f0:	4691      	mov	r9, r2
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001306:	b28b      	uxth	r3, r1
 8001308:	2200      	movs	r2, #0
 800130a:	461c      	mov	r4, r3
 800130c:	4615      	mov	r5, r2
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	00eb      	lsls	r3, r5, #3
 8001318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800131c:	00e2      	lsls	r2, r4, #3
 800131e:	460b      	mov	r3, r1
 8001320:	3307      	adds	r3, #7
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	ebad 0d03 	sub.w	sp, sp, r3
 800132a:	466b      	mov	r3, sp
 800132c:	3300      	adds	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001330:	f002 fb9e 	bl	8003a70 <HAL_GetTick>
 8001334:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff febc 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	4619      	mov	r1, r3
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f7ff ff91 	bl	8001268 <recv_packet>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d009      	beq.n	8001360 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	68b8      	ldr	r0, [r7, #8]
 8001350:	f7fe ffde 	bl	8000310 <strcmp>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d011      	beq.n	800137e <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff feaa 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001360:	f002 fb86 	bl	8003a70 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136e:	d9e5      	bls.n	800133c <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fe9f 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001376:	f002 fb7b 	bl	8003a70 <HAL_GetTick>
 800137a:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 800137c:	e7de      	b.n	800133c <reliable_send_packet+0x76>
				break;
 800137e:	bf00      	nop
 8001380:	46b5      	mov	sp, r6
		}
	}
}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800138c <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <usbReceiveHandle+0x38>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4909      	ldr	r1, [pc, #36]	; (80013c8 <usbReceiveHandle+0x3c>)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f015 fef3 	bl	8017190 <memcpy>
		output[temp] = '\0';
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <usbReceiveHandle+0x38>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	}
	return temp;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2400026c 	.word	0x2400026c
 80013c8:	2400016c 	.word	0x2400016c
 80013cc:	00000000 	.word	0x00000000

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80013d8:	4bdd      	ldr	r3, [pc, #884]	; (8001750 <main+0x380>)
 80013da:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 80013de:	461d      	mov	r5, r3
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e8:	c403      	stmia	r4!, {r0, r1}
 80013ea:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f002 faba 	bl	8003964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 fb40 	bl	8001a74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013f4:	f000 fbb6 	bl	8001b64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f8:	f001 f93e 	bl	8002678 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fc:	f001 f8dc 	bl	80025b8 <MX_DMA_Init>
  MX_SPI3_Init();
 8001400:	f000 fe36 	bl	8002070 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001404:	f000 fcc6 	bl	8001d94 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001408:	f001 f88a 	bl	8002520 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800140c:	f000 fbdc 	bl	8001bc8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001410:	f000 ff40 	bl	8002294 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001414:	f000 fc50 	bl	8001cb8 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001418:	f000 fdd4 	bl	8001fc4 <MX_SPI2_Init>
  MX_I2C2_Init();
 800141c:	f000 fd1e 	bl	8001e5c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001420:	f000 fe7c 	bl	800211c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001424:	f000 ffb2 	bl	800238c <MX_TIM5_Init>
  MX_TIM3_Init();
 8001428:	f000 fed0 	bl	80021cc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800142c:	f015 f8fc 	bl	8016628 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001430:	f000 fd72 	bl	8001f18 <MX_SPI1_Init>
  MX_UART4_Init();
 8001434:	f001 f828 	bl	8002488 <MX_UART4_Init>
  MX_FATFS_Init();
 8001438:	f012 fe8a 	bl	8014150 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800143c:	f000 fd4e 	bl	8001edc <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001440:	f000 fffe 	bl	8002440 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001444:	2332      	movs	r3, #50	; 0x32
 8001446:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 800144a:	a3bf      	add	r3, pc, #764	; (adr r3, 8001748 <main+0x378>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 8001454:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 8001464:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4bb9      	ldr	r3, [pc, #740]	; (8001754 <main+0x384>)
 800146e:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8001472:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147e:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 8001482:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8001486:	213c      	movs	r1, #60	; 0x3c
 8001488:	2010      	movs	r0, #16
 800148a:	f7ff f97b 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 800148e:	2130      	movs	r1, #48	; 0x30
 8001490:	2011      	movs	r0, #17
 8001492:	f7ff f977 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8001496:	2104      	movs	r1, #4
 8001498:	2013      	movs	r0, #19
 800149a:	f7ff f973 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 800149e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80014a2:	f002 faf1 	bl	8003a88 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80014a6:	21bf      	movs	r1, #191	; 0xbf
 80014a8:	201c      	movs	r0, #28
 80014aa:	f7ff f917 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f002 faea 	bl	8003a88 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80014b4:	2158      	movs	r1, #88	; 0x58
 80014b6:	201b      	movs	r0, #27
 80014b8:	f7ff f910 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80014bc:	21d8      	movs	r1, #216	; 0xd8
 80014be:	201b      	movs	r0, #27
 80014c0:	f7ff f90c 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 80014cc:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 80014dc:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 80014e6:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 80014f0:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014f8:	e02e      	b.n	8001558 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 80014fa:	f7ff f96b 	bl	80007d4 <LG2_Get_Gyro_X>
 80014fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001502:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150e:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001512:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8001516:	f7ff f98d 	bl	8000834 <LG2_Get_Gyro_Y>
 800151a:	eeb0 7a40 	vmov.f32	s14, s0
 800151e:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800152e:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 8001532:	f7ff f9b1 	bl	8000898 <LG2_Get_Gyro_Z>
 8001536:	eeb0 7a40 	vmov.f32	s14, s0
 800153a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001546:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800154a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 800154e:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001552:	3301      	adds	r3, #1
 8001554:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001558:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 800155c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001560:	dbcb      	blt.n	80014fa <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001562:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001758 <main+0x388>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8001576:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800157a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001758 <main+0x388>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800158e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001592:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001758 <main+0x388>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80015a6:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	486b      	ldr	r0, [pc, #428]	; (800175c <main+0x38c>)
 80015b0:	f006 fd1c 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015b4:	20c8      	movs	r0, #200	; 0xc8
 80015b6:	f002 fa67 	bl	8003a88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2101      	movs	r1, #1
 80015be:	4867      	ldr	r0, [pc, #412]	; (800175c <main+0x38c>)
 80015c0:	f006 fd14 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015c4:	20c8      	movs	r0, #200	; 0xc8
 80015c6:	f002 fa5f 	bl	8003a88 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2101      	movs	r1, #1
 80015ce:	4863      	ldr	r0, [pc, #396]	; (800175c <main+0x38c>)
 80015d0:	f006 fd0c 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f002 fa57 	bl	8003a88 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	2104      	movs	r1, #4
 80015de:	4860      	ldr	r0, [pc, #384]	; (8001760 <main+0x390>)
 80015e0:	f006 fd04 	bl	8007fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2108      	movs	r1, #8
 80015e8:	485d      	ldr	r0, [pc, #372]	; (8001760 <main+0x390>)
 80015ea:	f006 fcff 	bl	8007fec <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015ee:	2100      	movs	r1, #0
 80015f0:	485c      	ldr	r0, [pc, #368]	; (8001764 <main+0x394>)
 80015f2:	f00d ffbb 	bl	800f56c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015f6:	2104      	movs	r1, #4
 80015f8:	485a      	ldr	r0, [pc, #360]	; (8001764 <main+0x394>)
 80015fa:	f00d ffb7 	bl	800f56c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015fe:	2108      	movs	r1, #8
 8001600:	4858      	ldr	r0, [pc, #352]	; (8001764 <main+0x394>)
 8001602:	f00d ffb3 	bl	800f56c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001606:	210c      	movs	r1, #12
 8001608:	4856      	ldr	r0, [pc, #344]	; (8001764 <main+0x394>)
 800160a:	f00d ffaf 	bl	800f56c <HAL_TIM_PWM_Start>

    setServo(1, 90);
 800160e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001768 <main+0x398>
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff f978 	bl	8000908 <setServo>
    setServo(2, 180);
 8001618:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800176c <main+0x39c>
 800161c:	2002      	movs	r0, #2
 800161e:	f7ff f973 	bl	8000908 <setServo>
    setServo(3, 0);
 8001622:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001770 <main+0x3a0>
 8001626:	2003      	movs	r0, #3
 8001628:	f7ff f96e 	bl	8000908 <setServo>
    setServo(4, 45);
 800162c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001774 <main+0x3a4>
 8001630:	2004      	movs	r0, #4
 8001632:	f7ff f969 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 8001636:	4850      	ldr	r0, [pc, #320]	; (8001778 <main+0x3a8>)
 8001638:	f7ff fc80 	bl	8000f3c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 800164e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001652:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 8001660:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001664:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	3304      	adds	r3, #4
 800166e:	22f6      	movs	r2, #246	; 0xf6
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f015 fd50 	bl	8017118 <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 8001678:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800167c:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	3304      	adds	r3, #4
 8001686:	22f6      	movs	r2, #246	; 0xf6
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f015 fd44 	bl	8017118 <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001696:	2332      	movs	r3, #50	; 0x32
 8001698:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80016a2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80016a6:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <main+0x3ac>)
 80016ac:	4634      	mov	r4, r6
 80016ae:	461d      	mov	r5, r3
 80016b0:	6828      	ldr	r0, [r5, #0]
 80016b2:	6869      	ldr	r1, [r5, #4]
 80016b4:	68aa      	ldr	r2, [r5, #8]
 80016b6:	68eb      	ldr	r3, [r5, #12]
 80016b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ba:	7c2b      	ldrb	r3, [r5, #16]
 80016bc:	7023      	strb	r3, [r4, #0]
 80016be:	f106 0311 	add.w	r3, r6, #17
 80016c2:	2221      	movs	r2, #33	; 0x21
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f015 fd26 	bl	8017118 <memset>
  uint32_t previousTime = HAL_GetTick();
 80016cc:	f002 f9d0 	bl	8003a70 <HAL_GetTick>
 80016d0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 80016d4:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd61 	bl	80011a0 <disarm>
  LoRA_begin(868000000);
 80016de:	4826      	ldr	r0, [pc, #152]	; (8001778 <main+0x3a8>)
 80016e0:	f7ff fc2c 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 80016e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016e8:	4925      	ldr	r1, [pc, #148]	; (8001780 <main+0x3b0>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe10 	bl	8000310 <strcmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 809c 	bne.w	8001830 <main+0x460>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80016f8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016fc:	21fa      	movs	r1, #250	; 0xfa
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fdb2 	bl	8001268 <recv_packet>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8080 	beq.w	800180c <main+0x43c>
      {
    	have_recieved_anything = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 8001712:	f002 f9ad 	bl	8003a70 <HAL_GetTick>
 8001716:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800171a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800171e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001722:	4918      	ldr	r1, [pc, #96]	; (8001784 <main+0x3b4>)
 8001724:	4618      	mov	r0, r3
 8001726:	f015 fcc9 	bl	80170bc <siscanf>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d12b      	bne.n	8001788 <main+0x3b8>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001730:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001734:	4a11      	ldr	r2, [pc, #68]	; (800177c <main+0x3ac>)
 8001736:	461c      	mov	r4, r3
 8001738:	4615      	mov	r5, r2
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	7023      	strb	r3, [r4, #0]
 8001742:	e16a      	b.n	8001a1a <main+0x64a>
 8001744:	f3af 8000 	nop.w
 8001748:	d2f1a9fc 	.word	0xd2f1a9fc
 800174c:	3f50624d 	.word	0x3f50624d
 8001750:	08018450 	.word	0x08018450
 8001754:	3ff00000 	.word	0x3ff00000
 8001758:	43fa0000 	.word	0x43fa0000
 800175c:	58020c00 	.word	0x58020c00
 8001760:	58021800 	.word	0x58021800
 8001764:	24001168 	.word	0x24001168
 8001768:	42b40000 	.word	0x42b40000
 800176c:	43340000 	.word	0x43340000
 8001770:	00000000 	.word	0x00000000
 8001774:	42340000 	.word	0x42340000
 8001778:	33bca100 	.word	0x33bca100
 800177c:	080183d8 	.word	0x080183d8
 8001780:	080183bc 	.word	0x080183bc
 8001784:	080183d0 	.word	0x080183d0
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001788:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800178c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001790:	49ad      	ldr	r1, [pc, #692]	; (8001a48 <main+0x678>)
 8001792:	4618      	mov	r0, r3
 8001794:	f015 fc92 	bl	80170bc <siscanf>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10b      	bne.n	80017b6 <main+0x3e6>
        {
          strcpy(communication_state,"SENDING STREAM");
 800179e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017a2:	4aaa      	ldr	r2, [pc, #680]	; (8001a4c <main+0x67c>)
 80017a4:	461c      	mov	r4, r3
 80017a6:	4613      	mov	r3, r2
 80017a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017aa:	c407      	stmia	r4!, {r0, r1, r2}
 80017ac:	8023      	strh	r3, [r4, #0]
 80017ae:	3402      	adds	r4, #2
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	7023      	strb	r3, [r4, #0]
 80017b4:	e131      	b.n	8001a1a <main+0x64a>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 80017b6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80017ba:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fda5 	bl	8000310 <strcmp>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <main+0x408>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80017cc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc6f 	bl	80010b4 <LoRA_sendPacket>
 80017d6:	e120      	b.n	8001a1a <main+0x64a>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 80017d8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80017dc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f015 fccc 	bl	8017180 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 80017e8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc61 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017f2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd94 	bl	8000324 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f014 ffe5 	bl	80167d4 <CDC_Transmit_HS>
 800180a:	e106      	b.n	8001a1a <main+0x64a>

        }
      } else if (HAL_GetTick()-previousTime > 1000)
 800180c:	f002 f930 	bl	8003a70 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181c:	f240 80fd 	bls.w	8001a1a <main+0x64a>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001820:	f002 f926 	bl	8003a70 <HAL_GetTick>
 8001824:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        //HAL_Delay(100);
        LoRA_sendPacket("$");
 8001828:	4889      	ldr	r0, [pc, #548]	; (8001a50 <main+0x680>)
 800182a:	f7ff fc43 	bl	80010b4 <LoRA_sendPacket>
 800182e:	e0f4      	b.n	8001a1a <main+0x64a>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001830:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001834:	4987      	ldr	r1, [pc, #540]	; (8001a54 <main+0x684>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd6a 	bl	8000310 <strcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d14a      	bne.n	80018d8 <main+0x508>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001842:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001846:	21fa      	movs	r1, #250	; 0xfa
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd0d 	bl	8001268 <recv_packet>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d025      	beq.n	80018a0 <main+0x4d0>
      {
        previousTime = HAL_GetTick();
 8001854:	f002 f90c 	bl	8003a70 <HAL_GetTick>
 8001858:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800185c:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001860:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001864:	497c      	ldr	r1, [pc, #496]	; (8001a58 <main+0x688>)
 8001866:	4618      	mov	r0, r3
 8001868:	f015 fc28 	bl	80170bc <siscanf>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	d109      	bne.n	8001886 <main+0x4b6>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001872:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001876:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <main+0x68c>)
 8001878:	461c      	mov	r4, r3
 800187a:	4615      	mov	r5, r2
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	7023      	strb	r3, [r4, #0]
 8001884:	e0c9      	b.n	8001a1a <main+0x64a>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001886:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd4a 	bl	8000324 <strlen>
 8001890:	4602      	mov	r2, r0
 8001892:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f014 ff9b 	bl	80167d4 <CDC_Transmit_HS>
 800189e:	e0bc      	b.n	8001a1a <main+0x64a>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80018a0:	f002 f8e6 	bl	8003a70 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b0:	f240 80b3 	bls.w	8001a1a <main+0x64a>
      {
        previousTime = HAL_GetTick();
 80018b4:	f002 f8dc 	bl	8003a70 <HAL_GetTick>
 80018b8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 80018bc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018c0:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80018c4:	4960      	ldr	r1, [pc, #384]	; (8001a48 <main+0x678>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f015 fbd8 	bl	801707c <siprintf>
        LoRA_sendPacket(sendMessage);
 80018cc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fbef 	bl	80010b4 <LoRA_sendPacket>
 80018d6:	e0a0      	b.n	8001a1a <main+0x64a>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018dc:	495b      	ldr	r1, [pc, #364]	; (8001a4c <main+0x67c>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fd16 	bl	8000310 <strcmp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d126      	bne.n	8001938 <main+0x568>
    {
      if(max_packet_count == 0)
 80018ea:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018ee:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d113      	bne.n	8001920 <main+0x550>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80018f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <main+0x690>)
 80018fe:	461c      	mov	r4, r3
 8001900:	4615      	mov	r5, r2
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	8022      	strh	r2, [r4, #0]
 800190c:	3402      	adds	r4, #2
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001918:	484d      	ldr	r0, [pc, #308]	; (8001a50 <main+0x680>)
 800191a:	f7ff fbcb 	bl	80010b4 <LoRA_sendPacket>
 800191e:	e07c      	b.n	8001a1a <main+0x64a>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001920:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001924:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1e5a      	subs	r2, r3, #1
 800192c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001930:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e070      	b.n	8001a1a <main+0x64a>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001938:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800193c:	4947      	ldr	r1, [pc, #284]	; (8001a5c <main+0x68c>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fce6 	bl	8000310 <strcmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d167      	bne.n	8001a1a <main+0x64a>
    {
    	sprintf(response_packet, "\nState of other board: %s", state);
 800194a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800194e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001952:	4944      	ldr	r1, [pc, #272]	; (8001a64 <main+0x694>)
 8001954:	4618      	mov	r0, r3
 8001956:	f015 fb91 	bl	801707c <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 800195a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fce0 	bl	8000324 <strlen>
 8001964:	4602      	mov	r2, r0
 8001966:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f014 ff31 	bl	80167d4 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 8001972:	bf00      	nop
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fd08 	bl	800138c <usbReceiveHandle>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f8      	beq.n	8001974 <main+0x5a4>
    	{}

      reliable_send_packet(input);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fc9e 	bl	80012c6 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "\nEntered: %s\n", input);
 800198a:	1d3a      	adds	r2, r7, #4
 800198c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001990:	4935      	ldr	r1, [pc, #212]	; (8001a68 <main+0x698>)
 8001992:	4618      	mov	r0, r3
 8001994:	f015 fb72 	bl	801707c <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001998:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fcc1 	bl	8000324 <strlen>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f014 ff12 	bl	80167d4 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	492e      	ldr	r1, [pc, #184]	; (8001a6c <main+0x69c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fcab 	bl	8000310 <strcmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d116      	bne.n	80019ee <main+0x61e>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 80019c0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <main+0x684>)
 80019c6:	461c      	mov	r4, r3
 80019c8:	4615      	mov	r5, r2
 80019ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 80019d2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019d6:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <main+0x678>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f015 fb4d 	bl	801707c <siprintf>
        LoRA_sendPacket(sendMessage);
 80019e2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb64 	bl	80010b4 <LoRA_sendPacket>
 80019ec:	e015      	b.n	8001a1a <main+0x64a>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80019ee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <main+0x690>)
 80019f4:	461c      	mov	r4, r3
 80019f6:	4615      	mov	r5, r2
 80019f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	8022      	strh	r2, [r4, #0]
 8001a02:	3402      	adds	r4, #2
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 8001a0e:	2064      	movs	r0, #100	; 0x64
 8001a10:	f002 f83a 	bl	8003a88 <HAL_Delay>
        LoRA_sendPacket("$");
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <main+0x680>)
 8001a16:	f7ff fb4d 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a1a:	f002 f829 	bl	8003a70 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a70 <main+0x6a0>
 8001a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a36:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a3a:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a3e:	f002 f817 	bl	8003a70 <HAL_GetTick>
 8001a42:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a46:	e64d      	b.n	80016e4 <main+0x314>
 8001a48:	080183ec 	.word	0x080183ec
 8001a4c:	080183f4 	.word	0x080183f4
 8001a50:	08018404 	.word	0x08018404
 8001a54:	08018408 	.word	0x08018408
 8001a58:	080183d0 	.word	0x080183d0
 8001a5c:	080183d8 	.word	0x080183d8
 8001a60:	080183bc 	.word	0x080183bc
 8001a64:	0801841c 	.word	0x0801841c
 8001a68:	08018438 	.word	0x08018438
 8001a6c:	08018448 	.word	0x08018448
 8001a70:	447a0000 	.word	0x447a0000

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b09c      	sub	sp, #112	; 0x70
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	224c      	movs	r2, #76	; 0x4c
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f015 fb48 	bl	8017118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f015 fb42 	bl	8017118 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f007 febd 	bl	8009814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <SystemClock_Config+0xec>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <SystemClock_Config+0xec>)
 8001aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <SystemClock_Config+0xec>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001aba:	bf00      	nop
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <SystemClock_Config+0xec>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac8:	d1f8      	bne.n	8001abc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001aca:	2322      	movs	r3, #34	; 0x22
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ad2:	2340      	movs	r3, #64	; 0x40
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ada:	2302      	movs	r3, #2
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001aee:	230c      	movs	r3, #12
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001af6:	230c      	movs	r3, #12
 8001af8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	4618      	mov	r0, r3
 8001b08:	f007 fece 	bl	80098a8 <HAL_RCC_OscConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b12:	f000 ff1b 	bl	800294c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b16:	233f      	movs	r3, #63	; 0x3f
 8001b18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b22:	2308      	movs	r3, #8
 8001b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b26:	2340      	movs	r3, #64	; 0x40
 8001b28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b2a:	2340      	movs	r3, #64	; 0x40
 8001b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f008 fa8d 	bl	800a05c <HAL_RCC_ClockConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b48:	f000 ff00 	bl	800294c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b50:	2100      	movs	r1, #0
 8001b52:	2000      	movs	r0, #0
 8001b54:	f008 fc38 	bl	800a3c8 <HAL_RCC_MCOConfig>
}
 8001b58:	bf00      	nop
 8001b5a:	3770      	adds	r7, #112	; 0x70
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	58024800 	.word	0x58024800

08001b64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0ae      	sub	sp, #184	; 0xb8
 8001b68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	22b8      	movs	r2, #184	; 0xb8
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f015 fad1 	bl	8017118 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b76:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b82:	2304      	movs	r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b86:	230c      	movs	r3, #12
 8001b88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 fe49 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bbc:	f000 fec6 	bl	800294c <Error_Handler>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	37b8      	adds	r7, #184	; 0xb8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2224      	movs	r2, #36	; 0x24
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f015 fa99 	bl	8017118 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001be8:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <MX_ADC1_Init+0xe8>)
 8001bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001bee:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001bf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c46:	4819      	ldr	r0, [pc, #100]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c48:	f002 f99e 	bl	8003f88 <HAL_ADC_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c52:	f000 fe7b 	bl	800294c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c62:	f003 f9d9 	bl	8005018 <HAL_ADCEx_MultiModeConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c6c:	f000 fe6e 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_ADC1_Init+0xec>)
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c74:	2306      	movs	r3, #6
 8001c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c82:	2304      	movs	r3, #4
 8001c84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_ADC1_Init+0xe4>)
 8001c96:	f002 fb7f 	bl	8004398 <HAL_ADC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001ca0:	f000 fe54 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3730      	adds	r7, #48	; 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	24000bf8 	.word	0x24000bf8
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	2a000400 	.word	0x2a000400

08001cb8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2224      	movs	r2, #36	; 0x24
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f015 fa27 	bl	8017118 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001ccc:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <MX_ADC3_Init+0xd4>)
 8001cce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cd2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cd6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cda:	2208      	movs	r2, #8
 8001cdc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ce4:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cec:	2204      	movs	r2, #4
 8001cee:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d40:	f002 f922 	bl	8003f88 <HAL_ADC_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d4a:	f000 fdff 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_ADC3_Init+0xd8>)
 8001d50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d52:	2306      	movs	r3, #6
 8001d54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d5e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d60:	2304      	movs	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_ADC3_Init+0xd0>)
 8001d72:	f002 fb11 	bl	8004398 <HAL_ADC_ConfigChannel>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d7c:	f000 fde6 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	24000c68 	.word	0x24000c68
 8001d8c:	58026000 	.word	0x58026000
 8001d90:	04300002 	.word	0x04300002

08001d94 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <MX_FDCAN3_Init+0xc4>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e06:	2204      	movs	r2, #4
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e12:	2204      	movs	r2, #4
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_FDCAN3_Init+0xc0>)
 8001e42:	f005 fbaf 	bl	80075a4 <HAL_FDCAN_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e4c:	f000 fd7e 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	24000dc8 	.word	0x24000dc8
 8001e58:	4000d400 	.word	0x4000d400

08001e5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <MX_I2C2_Init+0x78>)
 8001e64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <MX_I2C2_Init+0x7c>)
 8001e6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e96:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001e98:	f006 f8c2 	bl	8008020 <HAL_I2C_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ea2:	f000 fd53 	bl	800294c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001eaa:	f006 f963 	bl	8008174 <HAL_I2CEx_ConfigAnalogFilter>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001eb4:	f000 fd4a 	bl	800294c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_I2C2_Init+0x74>)
 8001ebc:	f006 f9a5 	bl	800820a <HAL_I2CEx_ConfigDigitalFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ec6:	f000 fd41 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000e68 	.word	0x24000e68
 8001ed4:	40005800 	.word	0x40005800
 8001ed8:	20303e5d 	.word	0x20303e5d

08001edc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <MX_SDMMC2_SD_Init+0x38>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <MX_SDMMC2_SD_Init+0x34>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	24000ebc 	.word	0x24000ebc
 8001f14:	48022400 	.word	0x48022400

08001f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <MX_SPI1_Init+0xa8>)
 8001f20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f32:	2207      	movs	r2, #7
 8001f34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f4c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_SPI1_Init+0xa4>)
 8001faa:	f00c fc97 	bl	800e8dc <HAL_SPI_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fb4:	f000 fcca 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24000f38 	.word	0x24000f38
 8001fc0:	40013000 	.word	0x40013000

08001fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <MX_SPI2_Init+0xa8>)
 8001fcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fde:	2207      	movs	r2, #7
 8001fe0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001ff0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ff4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_SPI2_Init+0xa4>)
 8001ff8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ffc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_SPI2_Init+0xa4>)
 800200c:	2200      	movs	r2, #0
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002026:	2200      	movs	r2, #0
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_SPI2_Init+0xa4>)
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <MX_SPI2_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002044:	2200      	movs	r2, #0
 8002046:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <MX_SPI2_Init+0xa4>)
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_SPI2_Init+0xa4>)
 8002056:	f00c fc41 	bl	800e8dc <HAL_SPI_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002060:	f000 fc74 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	24000fc0 	.word	0x24000fc0
 800206c:	40003800 	.word	0x40003800

08002070 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <MX_SPI3_Init+0xa4>)
 8002076:	4a28      	ldr	r2, [pc, #160]	; (8002118 <MX_SPI3_Init+0xa8>)
 8002078:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <MX_SPI3_Init+0xa4>)
 800207c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002080:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <MX_SPI3_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MX_SPI3_Init+0xa4>)
 800208a:	2207      	movs	r2, #7
 800208c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <MX_SPI3_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002094:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <MX_SPI3_Init+0xa4>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <MX_SPI3_Init+0xa4>)
 800209c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020a4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_SPI3_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_SPI3_Init+0xa4>)
 8002102:	f00c fbeb 	bl	800e8dc <HAL_SPI_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800210c:	f000 fc1e 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	24001048 	.word	0x24001048
 8002118:	40003c00 	.word	0x40003c00

0800211c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212e:	463b      	mov	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]
 800213e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <MX_TIM2_Init+0xac>)
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002156:	225a      	movs	r2, #90	; 0x5a
 8002158:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <MX_TIM2_Init+0xac>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002166:	4818      	ldr	r0, [pc, #96]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002168:	f00d f9a8 	bl	800f4bc <HAL_TIM_PWM_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002172:	f000 fbeb 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4810      	ldr	r0, [pc, #64]	; (80021c8 <MX_TIM2_Init+0xac>)
 8002186:	f00e fc2f 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002190:	f000 fbdc 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002194:	2360      	movs	r3, #96	; 0x60
 8002196:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2208      	movs	r2, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM2_Init+0xac>)
 80021ac:	f00d fe4e 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021b6:	f000 fbc9 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM2_Init+0xac>)
 80021bc:	f001 f8e4 	bl	8003388 <HAL_TIM_MspPostInit>

}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	240010d0 	.word	0x240010d0

080021cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <MX_TIM3_Init+0xc0>)
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <MX_TIM3_Init+0xc4>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <MX_TIM3_Init+0xc0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <MX_TIM3_Init+0xc0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_TIM3_Init+0xc0>)
 8002204:	225a      	movs	r2, #90	; 0x5a
 8002206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <MX_TIM3_Init+0xc0>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_TIM3_Init+0xc0>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002214:	481d      	ldr	r0, [pc, #116]	; (800228c <MX_TIM3_Init+0xc0>)
 8002216:	f00d f951 	bl	800f4bc <HAL_TIM_PWM_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002220:	f000 fb94 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4816      	ldr	r0, [pc, #88]	; (800228c <MX_TIM3_Init+0xc0>)
 8002234:	f00e fbd8 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800223e:	f000 fb85 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002242:	2360      	movs	r3, #96	; 0x60
 8002244:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <MX_TIM3_Init+0xc0>)
 800225a:	f00d fdf7 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002264:	f000 fb72 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	2204      	movs	r2, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM3_Init+0xc0>)
 8002270:	f00d fdec 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800227a:	f000 fb67 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM3_Init+0xc0>)
 8002280:	f001 f882 	bl	8003388 <HAL_TIM_MspPostInit>

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2400111c 	.word	0x2400111c
 8002290:	40000400 	.word	0x40000400

08002294 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022ba:	4a33      	ldr	r2, [pc, #204]	; (8002388 <MX_TIM4_Init+0xf4>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022c0:	221c      	movs	r2, #28
 80022c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80022d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022de:	4829      	ldr	r0, [pc, #164]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022e0:	f00d f8ec 	bl	800f4bc <HAL_TIM_PWM_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022ea:	f000 fb2f 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	4821      	ldr	r0, [pc, #132]	; (8002384 <MX_TIM4_Init+0xf0>)
 80022fe:	f00e fb73 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002308:	f000 fb20 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230c:	2360      	movs	r3, #96	; 0x60
 800230e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <MX_TIM4_Init+0xf0>)
 8002324:	f00d fd92 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800232e:	f000 fb0d 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002332:	463b      	mov	r3, r7
 8002334:	2204      	movs	r2, #4
 8002336:	4619      	mov	r1, r3
 8002338:	4812      	ldr	r0, [pc, #72]	; (8002384 <MX_TIM4_Init+0xf0>)
 800233a:	f00d fd87 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002344:	f000 fb02 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	2208      	movs	r2, #8
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_TIM4_Init+0xf0>)
 8002350:	f00d fd7c 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800235a:	f000 faf7 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800235e:	463b      	mov	r3, r7
 8002360:	220c      	movs	r2, #12
 8002362:	4619      	mov	r1, r3
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <MX_TIM4_Init+0xf0>)
 8002366:	f00d fd71 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002370:	f000 faec 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <MX_TIM4_Init+0xf0>)
 8002376:	f001 f807 	bl	8003388 <HAL_TIM_MspPostInit>

}
 800237a:	bf00      	nop
 800237c:	3728      	adds	r7, #40	; 0x28
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	24001168 	.word	0x24001168
 8002388:	40000800 	.word	0x40000800

0800238c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239e:	463b      	mov	r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <MX_TIM5_Init+0xac>)
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <MX_TIM5_Init+0xb0>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <MX_TIM5_Init+0xac>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_TIM5_Init+0xac>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM5_Init+0xac>)
 80023c4:	225a      	movs	r2, #90	; 0x5a
 80023c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_TIM5_Init+0xac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM5_Init+0xac>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023d4:	4818      	ldr	r0, [pc, #96]	; (8002438 <MX_TIM5_Init+0xac>)
 80023d6:	f00d f871 	bl	800f4bc <HAL_TIM_PWM_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023e0:	f000 fab4 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <MX_TIM5_Init+0xac>)
 80023f4:	f00e faf8 	bl	80109e8 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023fe:	f000 faa5 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002402:	2360      	movs	r3, #96	; 0x60
 8002404:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002412:	463b      	mov	r3, r7
 8002414:	220c      	movs	r2, #12
 8002416:	4619      	mov	r1, r3
 8002418:	4807      	ldr	r0, [pc, #28]	; (8002438 <MX_TIM5_Init+0xac>)
 800241a:	f00d fd17 	bl	800fe4c <HAL_TIM_PWM_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002424:	f000 fa92 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <MX_TIM5_Init+0xac>)
 800242a:	f000 ffad 	bl	8003388 <HAL_TIM_MspPostInit>

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240011b4 	.word	0x240011b4
 800243c:	40000c00 	.word	0x40000c00

08002440 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MX_TIM13_Init+0x40>)
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <MX_TIM13_Init+0x44>)
 8002448:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <MX_TIM13_Init+0x40>)
 800244c:	225f      	movs	r2, #95	; 0x5f
 800244e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MX_TIM13_Init+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_TIM13_Init+0x40>)
 8002458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <MX_TIM13_Init+0x40>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_TIM13_Init+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_TIM13_Init+0x40>)
 800246c:	f00c ffcf 	bl	800f40e <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002476:	f000 fa69 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	24001200 	.word	0x24001200
 8002484:	40001c00 	.word	0x40001c00

08002488 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_UART4_Init+0x90>)
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <MX_UART4_Init+0x94>)
 8002490:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_UART4_Init+0x90>)
 8002494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002498:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_UART4_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_UART4_Init+0x90>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_UART4_Init+0x90>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_UART4_Init+0x90>)
 80024ae:	220c      	movs	r2, #12
 80024b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_UART4_Init+0x90>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_UART4_Init+0x90>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_UART4_Init+0x90>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_UART4_Init+0x90>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_UART4_Init+0x90>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024d0:	4811      	ldr	r0, [pc, #68]	; (8002518 <MX_UART4_Init+0x90>)
 80024d2:	f00e fb43 	bl	8010b5c <HAL_UART_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80024dc:	f000 fa36 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e0:	2100      	movs	r1, #0
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_UART4_Init+0x90>)
 80024e4:	f00f fc49 	bl	8011d7a <HAL_UARTEx_SetTxFifoThreshold>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80024ee:	f000 fa2d 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f2:	2100      	movs	r1, #0
 80024f4:	4808      	ldr	r0, [pc, #32]	; (8002518 <MX_UART4_Init+0x90>)
 80024f6:	f00f fc7e 	bl	8011df6 <HAL_UARTEx_SetRxFifoThreshold>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002500:	f000 fa24 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_UART4_Init+0x90>)
 8002506:	f00f fbff 	bl	8011d08 <HAL_UARTEx_DisableFifoMode>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002510:	f000 fa1c 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	240014a4 	.word	0x240014a4
 800251c:	40004c00 	.word	0x40004c00

08002520 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <MX_USART6_UART_Init+0x94>)
 8002528:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800252c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002530:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 8002564:	2200      	movs	r2, #0
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002568:	4811      	ldr	r0, [pc, #68]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800256a:	f00e faf7 	bl	8010b5c <HAL_UART_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002574:	f000 f9ea 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002578:	2100      	movs	r1, #0
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800257c:	f00f fbfd 	bl	8011d7a <HAL_UARTEx_SetTxFifoThreshold>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002586:	f000 f9e1 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4808      	ldr	r0, [pc, #32]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800258e:	f00f fc32 	bl	8011df6 <HAL_UARTEx_SetRxFifoThreshold>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002598:	f000 f9d8 	bl	800294c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800259c:	4804      	ldr	r0, [pc, #16]	; (80025b0 <MX_USART6_UART_Init+0x90>)
 800259e:	f00f fbb3 	bl	8011d08 <HAL_UARTEx_DisableFifoMode>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80025a8:	f000 f9d0 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	24001538 	.word	0x24001538
 80025b4:	40011400 	.word	0x40011400

080025b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <MX_DMA_Init+0xbc>)
 80025c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <MX_DMA_Init+0xbc>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <MX_DMA_Init+0xbc>)
 80025d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <MX_DMA_Init+0xbc>)
 80025de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e2:	4a24      	ldr	r2, [pc, #144]	; (8002674 <MX_DMA_Init+0xbc>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_DMA_Init+0xbc>)
 80025ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	200b      	movs	r0, #11
 8002600:	f002 fec7 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002604:	200b      	movs	r0, #11
 8002606:	f002 fede 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	200c      	movs	r0, #12
 8002610:	f002 febf 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002614:	200c      	movs	r0, #12
 8002616:	f002 fed6 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200d      	movs	r0, #13
 8002620:	f002 feb7 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002624:	200d      	movs	r0, #13
 8002626:	f002 fece 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	200e      	movs	r0, #14
 8002630:	f002 feaf 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002634:	200e      	movs	r0, #14
 8002636:	f002 fec6 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	200f      	movs	r0, #15
 8002640:	f002 fea7 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002644:	200f      	movs	r0, #15
 8002646:	f002 febe 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2010      	movs	r0, #16
 8002650:	f002 fe9f 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002654:	2010      	movs	r0, #16
 8002656:	f002 feb6 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2046      	movs	r0, #70	; 0x46
 8002660:	f002 fe97 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002664:	2046      	movs	r0, #70	; 0x46
 8002666:	f002 feae 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	58024400 	.word	0x58024400

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800268e:	4ba7      	ldr	r3, [pc, #668]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	4aa5      	ldr	r2, [pc, #660]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269e:	4ba3      	ldr	r3, [pc, #652]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ac:	4b9f      	ldr	r3, [pc, #636]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	4a9e      	ldr	r2, [pc, #632]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026bc:	4b9b      	ldr	r3, [pc, #620]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ca:	4b98      	ldr	r3, [pc, #608]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d0:	4a96      	ldr	r2, [pc, #600]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026da:	4b94      	ldr	r3, [pc, #592]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b90      	ldr	r3, [pc, #576]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ee:	4a8f      	ldr	r2, [pc, #572]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f8:	4b8c      	ldr	r3, [pc, #560]	; (800292c <MX_GPIO_Init+0x2b4>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b89      	ldr	r3, [pc, #548]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	4a87      	ldr	r2, [pc, #540]	; (800292c <MX_GPIO_Init+0x2b4>)
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002716:	4b85      	ldr	r3, [pc, #532]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002724:	4b81      	ldr	r3, [pc, #516]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272a:	4a80      	ldr	r2, [pc, #512]	; (800292c <MX_GPIO_Init+0x2b4>)
 800272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002734:	4b7d      	ldr	r3, [pc, #500]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002742:	4b7a      	ldr	r3, [pc, #488]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002748:	4a78      	ldr	r2, [pc, #480]	; (800292c <MX_GPIO_Init+0x2b4>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <MX_GPIO_Init+0x2b4>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	f241 5104 	movw	r1, #5380	; 0x1504
 8002766:	4872      	ldr	r0, [pc, #456]	; (8002930 <MX_GPIO_Init+0x2b8>)
 8002768:	f005 fc40 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f248 0106 	movw	r1, #32774	; 0x8006
 8002772:	4870      	ldr	r0, [pc, #448]	; (8002934 <MX_GPIO_Init+0x2bc>)
 8002774:	f005 fc3a 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2130      	movs	r1, #48	; 0x30
 800277c:	486e      	ldr	r0, [pc, #440]	; (8002938 <MX_GPIO_Init+0x2c0>)
 800277e:	f005 fc35 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	2103      	movs	r1, #3
 8002786:	486d      	ldr	r0, [pc, #436]	; (800293c <MX_GPIO_Init+0x2c4>)
 8002788:	f005 fc30 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002792:	486b      	ldr	r0, [pc, #428]	; (8002940 <MX_GPIO_Init+0x2c8>)
 8002794:	f005 fc2a 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	210e      	movs	r1, #14
 800279c:	4869      	ldr	r0, [pc, #420]	; (8002944 <MX_GPIO_Init+0x2cc>)
 800279e:	f005 fc25 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80027a8:	4867      	ldr	r0, [pc, #412]	; (8002948 <MX_GPIO_Init+0x2d0>)
 80027aa:	f005 fc1f 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2101      	movs	r1, #1
 80027b2:	4865      	ldr	r0, [pc, #404]	; (8002948 <MX_GPIO_Init+0x2d0>)
 80027b4:	f005 fc1a 	bl	8007fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80027b8:	f241 5304 	movw	r3, #5380	; 0x1504
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4857      	ldr	r0, [pc, #348]	; (8002930 <MX_GPIO_Init+0x2b8>)
 80027d2:	f005 fa4b 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80027d6:	f248 0306 	movw	r3, #32774	; 0x8006
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4851      	ldr	r0, [pc, #324]	; (8002934 <MX_GPIO_Init+0x2bc>)
 80027f0:	f005 fa3c 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027f4:	2330      	movs	r3, #48	; 0x30
 80027f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	484b      	ldr	r0, [pc, #300]	; (8002938 <MX_GPIO_Init+0x2c0>)
 800280c:	f005 fa2e 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002810:	2303      	movs	r3, #3
 8002812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4845      	ldr	r0, [pc, #276]	; (800293c <MX_GPIO_Init+0x2c4>)
 8002828:	f005 fa20 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800282c:	2304      	movs	r3, #4
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	483f      	ldr	r0, [pc, #252]	; (800293c <MX_GPIO_Init+0x2c4>)
 8002840:	f005 fa14 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002844:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284a:	2301      	movs	r3, #1
 800284c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002852:	2300      	movs	r3, #0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4838      	ldr	r0, [pc, #224]	; (8002940 <MX_GPIO_Init+0x2c8>)
 800285e:	f005 fa05 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002862:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286c:	2301      	movs	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	4832      	ldr	r0, [pc, #200]	; (8002940 <MX_GPIO_Init+0x2c8>)
 8002878:	f005 f9f8 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	482d      	ldr	r0, [pc, #180]	; (8002944 <MX_GPIO_Init+0x2cc>)
 8002890:	f005 f9ec 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002894:	230e      	movs	r3, #14
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4619      	mov	r1, r3
 80028aa:	4826      	ldr	r0, [pc, #152]	; (8002944 <MX_GPIO_Init+0x2cc>)
 80028ac:	f005 f9de 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80028b0:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80028b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	4619      	mov	r1, r3
 80028c4:	481a      	ldr	r0, [pc, #104]	; (8002930 <MX_GPIO_Init+0x2b8>)
 80028c6:	f005 f9d1 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80028ca:	f240 7301 	movw	r3, #1793	; 0x701
 80028ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	4819      	ldr	r0, [pc, #100]	; (8002948 <MX_GPIO_Init+0x2d0>)
 80028e4:	f005 f9c2 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80028e8:	2310      	movs	r3, #16
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	4619      	mov	r1, r3
 80028fa:	4812      	ldr	r0, [pc, #72]	; (8002944 <MX_GPIO_Init+0x2cc>)
 80028fc:	f005 f9b6 	bl	8007c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002912:	2300      	movs	r3, #0
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_GPIO_Init+0x2bc>)
 800291e:	f005 f9a5 	bl	8007c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002922:	bf00      	nop
 8002924:	3730      	adds	r7, #48	; 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
 8002930:	58021000 	.word	0x58021000
 8002934:	58020000 	.word	0x58020000
 8002938:	58020800 	.word	0x58020800
 800293c:	58020400 	.word	0x58020400
 8002940:	58021400 	.word	0x58021400
 8002944:	58021800 	.word	0x58021800
 8002948:	58020c00 	.word	0x58020c00

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002954:	e7fe      	b.n	8002954 <Error_Handler+0x8>
	...

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_MspInit+0x30>)
 8002960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002964:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_MspInit+0x30>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_MspInit+0x30>)
 8002970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	58024400 	.word	0x58024400

0800298c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	; 0x30
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_ADC_MspInit+0x194>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d159      	bne.n	8002a62 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029b4:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029be:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029dc:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ee:	2303      	movs	r3, #3
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	484a      	ldr	r0, [pc, #296]	; (8002b28 <HAL_ADC_MspInit+0x19c>)
 80029fe:	f005 f935 	bl	8007c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a02:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a04:	4a4a      	ldr	r2, [pc, #296]	; (8002b30 <HAL_ADC_MspInit+0x1a4>)
 8002a06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a08:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a0a:	2209      	movs	r2, #9
 8002a0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a14:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a1a:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a44:	4839      	ldr	r0, [pc, #228]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a46:	f002 fcd9 	bl	80053fc <HAL_DMA_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a50:	f7ff ff7c 	bl	800294c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a35      	ldr	r2, [pc, #212]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_ADC_MspInit+0x1a0>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a60:	e059      	b.n	8002b16 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a33      	ldr	r2, [pc, #204]	; (8002b34 <HAL_ADC_MspInit+0x1a8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d154      	bne.n	8002b16 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_ADC_MspInit+0x198>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002aa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002aac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ab0:	f001 f80e 	bl	8003ad0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002ab4:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <HAL_ADC_MspInit+0x1b0>)
 8002ab8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002abc:	2273      	movs	r2, #115	; 0x73
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ace:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aea:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002aee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002af2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002afa:	480f      	ldr	r0, [pc, #60]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002afc:	f002 fc7e 	bl	80053fc <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b06:	f7ff ff21 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b10:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_ADC_MspInit+0x1ac>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b16:	bf00      	nop
 8002b18:	3730      	adds	r7, #48	; 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40022000 	.word	0x40022000
 8002b24:	58024400 	.word	0x58024400
 8002b28:	58020800 	.word	0x58020800
 8002b2c:	24000cd8 	.word	0x24000cd8
 8002b30:	40020088 	.word	0x40020088
 8002b34:	58026000 	.word	0x58026000
 8002b38:	24000d50 	.word	0x24000d50
 8002b3c:	400204b8 	.word	0x400204b8

08002b40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0b8      	sub	sp, #224	; 0xe0
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	22b8      	movs	r2, #184	; 0xb8
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f014 fad9 	bl	8017118 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_FDCAN_MspInit+0xc4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d145      	bne.n	8002bfc <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b80:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f007 fe5e 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002b92:	f7ff fedb 	bl	800294c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002b98:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002ba8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bba:	4a13      	ldr	r2, [pc, #76]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_FDCAN_MspInit+0xc8>)
 8002bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002bea:	2302      	movs	r3, #2
 8002bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_FDCAN_MspInit+0xcc>)
 8002bf8:	f005 f838 	bl	8007c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	37e0      	adds	r7, #224	; 0xe0
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	4000d400 	.word	0x4000d400
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	58021400 	.word	0x58021400

08002c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b8      	sub	sp, #224	; 0xe0
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	22b8      	movs	r2, #184	; 0xb8
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f014 fa71 	bl	8017118 <memset>
  if(hi2c->Instance==I2C2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ce4 <HAL_I2C_MspInit+0xd4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d14d      	bne.n	8002cdc <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c40:	f04f 0208 	mov.w	r2, #8
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	f007 fdf6 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c62:	f7ff fe73 	bl	800294c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002c6e:	f043 0320 	orr.w	r3, r3, #32
 8002c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c8a:	2312      	movs	r3, #18
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ca2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4810      	ldr	r0, [pc, #64]	; (8002cec <HAL_I2C_MspInit+0xdc>)
 8002caa:	f004 ffdf 	bl	8007c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_I2C_MspInit+0xd8>)
 8002cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2021      	movs	r0, #33	; 0x21
 8002cd2:	f002 fb5e 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002cd6:	2021      	movs	r0, #33	; 0x21
 8002cd8:	f002 fb75 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cdc:	bf00      	nop
 8002cde:	37e0      	adds	r7, #224	; 0xe0
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40005800 	.word	0x40005800
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	58021400 	.word	0x58021400

08002cf0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0ba      	sub	sp, #232	; 0xe8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d08:	f107 0318 	add.w	r3, r7, #24
 8002d0c:	22b8      	movs	r2, #184	; 0xb8
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f014 fa01 	bl	8017118 <memset>
  if(hsd->Instance==SDMMC2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5d      	ldr	r2, [pc, #372]	; (8002e90 <HAL_SD_MspInit+0x1a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 80b3 	bne.w	8002e88 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d32:	f107 0318 	add.w	r3, r7, #24
 8002d36:	4618      	mov	r0, r3
 8002d38:	f007 fd86 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d42:	f7ff fe03 	bl	800294c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d46:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d56:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d74:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d82:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d88:	4a42      	ldr	r2, [pc, #264]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d92:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_SD_MspInit+0x1a4>)
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002da0:	2340      	movs	r3, #64	; 0x40
 8002da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002db8:	230b      	movs	r3, #11
 8002dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4834      	ldr	r0, [pc, #208]	; (8002e98 <HAL_SD_MspInit+0x1a8>)
 8002dc6:	f004 ff51 	bl	8007c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002de2:	230b      	movs	r3, #11
 8002de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dec:	4619      	mov	r1, r3
 8002dee:	482a      	ldr	r0, [pc, #168]	; (8002e98 <HAL_SD_MspInit+0x1a8>)
 8002df0:	f004 ff3c 	bl	8007c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e0e:	230b      	movs	r3, #11
 8002e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4820      	ldr	r0, [pc, #128]	; (8002e9c <HAL_SD_MspInit+0x1ac>)
 8002e1c:	f004 ff26 	bl	8007c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e3a:	230b      	movs	r3, #11
 8002e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4815      	ldr	r0, [pc, #84]	; (8002e9c <HAL_SD_MspInit+0x1ac>)
 8002e48:	f004 ff10 	bl	8007c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e66:	230a      	movs	r3, #10
 8002e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e70:	4619      	mov	r1, r3
 8002e72:	480a      	ldr	r0, [pc, #40]	; (8002e9c <HAL_SD_MspInit+0x1ac>)
 8002e74:	f004 fefa 	bl	8007c6c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	207c      	movs	r0, #124	; 0x7c
 8002e7e:	f002 fa88 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e82:	207c      	movs	r0, #124	; 0x7c
 8002e84:	f002 fa9f 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e88:	bf00      	nop
 8002e8a:	37e8      	adds	r7, #232	; 0xe8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	48022400 	.word	0x48022400
 8002e94:	58024400 	.word	0x58024400
 8002e98:	58020c00 	.word	0x58020c00
 8002e9c:	58021800 	.word	0x58021800

08002ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	; (8002ffc <HAL_SPI_MspInit+0x15c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d12e      	bne.n	8002f20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ec2:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ec8:	4a4d      	ldr	r2, [pc, #308]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002eca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ece:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	623b      	str	r3, [r7, #32]
 8002ede:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	4a46      	ldr	r2, [pc, #280]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002efe:	23e0      	movs	r3, #224	; 0xe0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f0e:	2305      	movs	r3, #5
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f16:	4619      	mov	r1, r3
 8002f18:	483a      	ldr	r0, [pc, #232]	; (8003004 <HAL_SPI_MspInit+0x164>)
 8002f1a:	f004 fea7 	bl	8007c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f1e:	e068      	b.n	8002ff2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a38      	ldr	r2, [pc, #224]	; (8003008 <HAL_SPI_MspInit+0x168>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d12f      	bne.n	8002f8a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f30:	4a33      	ldr	r2, [pc, #204]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4822      	ldr	r0, [pc, #136]	; (800300c <HAL_SPI_MspInit+0x16c>)
 8002f84:	f004 fe72 	bl	8007c6c <HAL_GPIO_Init>
}
 8002f88:	e033      	b.n	8002ff2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_SPI_MspInit+0x170>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12e      	bne.n	8002ff2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_SPI_MspInit+0x160>)
 8002fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_SPI_MspInit+0x174>)
 8002fee:	f004 fe3d 	bl	8007c6c <HAL_GPIO_Init>
}
 8002ff2:	bf00      	nop
 8002ff4:	3738      	adds	r7, #56	; 0x38
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40013000 	.word	0x40013000
 8003000:	58024400 	.word	0x58024400
 8003004:	58020000 	.word	0x58020000
 8003008:	40003800 	.word	0x40003800
 800300c:	58020400 	.word	0x58020400
 8003010:	40003c00 	.word	0x40003c00
 8003014:	58020800 	.word	0x58020800

08003018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003038:	d15d      	bne.n	80030f6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303a:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 800303c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003040:	4a8c      	ldr	r2, [pc, #560]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800304a:	4b8a      	ldr	r3, [pc, #552]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 800304c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b86      	ldr	r3, [pc, #536]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	4a85      	ldr	r2, [pc, #532]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003068:	4b82      	ldr	r3, [pc, #520]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 800306a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003086:	2301      	movs	r3, #1
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4619      	mov	r1, r3
 8003090:	4879      	ldr	r0, [pc, #484]	; (8003278 <HAL_TIM_PWM_MspInit+0x260>)
 8003092:	f004 fdeb 	bl	8007c6c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003096:	4b79      	ldr	r3, [pc, #484]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 8003098:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_TIM_PWM_MspInit+0x268>)
 800309a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800309c:	4b77      	ldr	r3, [pc, #476]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 800309e:	2214      	movs	r2, #20
 80030a0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a2:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a8:	4b74      	ldr	r3, [pc, #464]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030ae:	4b73      	ldr	r3, [pc, #460]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030b6:	4b71      	ldr	r3, [pc, #452]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030bc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030be:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80030c6:	4b6d      	ldr	r3, [pc, #436]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030cc:	4b6b      	ldr	r3, [pc, #428]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d2:	4b6a      	ldr	r3, [pc, #424]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80030d8:	4868      	ldr	r0, [pc, #416]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030da:	f002 f98f 	bl	80053fc <HAL_DMA_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80030e4:	f7ff fc32 	bl	800294c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a64      	ldr	r2, [pc, #400]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ee:	4a63      	ldr	r2, [pc, #396]	; (800327c <HAL_TIM_PWM_MspInit+0x264>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030f4:	e119      	b.n	800332a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a62      	ldr	r2, [pc, #392]	; (8003284 <HAL_TIM_PWM_MspInit+0x26c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d16d      	bne.n	80031dc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003100:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 8003102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003106:	4a5b      	ldr	r2, [pc, #364]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003110:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 8003112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003120:	4a5a      	ldr	r2, [pc, #360]	; (800328c <HAL_TIM_PWM_MspInit+0x274>)
 8003122:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003126:	2218      	movs	r2, #24
 8003128:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800312a:	4b57      	ldr	r3, [pc, #348]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003130:	4b55      	ldr	r3, [pc, #340]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003136:	4b54      	ldr	r3, [pc, #336]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800313e:	4b52      	ldr	r3, [pc, #328]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003144:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003146:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003148:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800314c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800315a:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003160:	4849      	ldr	r0, [pc, #292]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003162:	f002 f94b 	bl	80053fc <HAL_DMA_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800316c:	f7ff fbee 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a45      	ldr	r2, [pc, #276]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
 8003176:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_TIM_PWM_MspInit+0x270>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800317c:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 800317e:	4a45      	ldr	r2, [pc, #276]	; (8003294 <HAL_TIM_PWM_MspInit+0x27c>)
 8003180:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 8003184:	2217      	movs	r2, #23
 8003186:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003194:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 8003196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800319a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800319c:	4b3c      	ldr	r3, [pc, #240]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 800319e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031a2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031aa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031b2:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b8:	4b35      	ldr	r3, [pc, #212]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80031be:	4834      	ldr	r0, [pc, #208]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031c0:	f002 f91c 	bl	80053fc <HAL_DMA_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80031ca:	f7ff fbbf 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
 80031d4:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <HAL_TIM_PWM_MspInit+0x278>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031da:	e0a6      	b.n	800332a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <HAL_TIM_PWM_MspInit+0x280>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d15e      	bne.n	80032a4 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 80031e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_TIM_PWM_MspInit+0x25c>)
 80031f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <HAL_TIM_PWM_MspInit+0x288>)
 8003208:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800320c:	221f      	movs	r2, #31
 800320e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003218:	2200      	movs	r2, #0
 800321a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800321c:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800321e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003222:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800322a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800322e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003232:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003246:	4815      	ldr	r0, [pc, #84]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 8003248:	f002 f8d8 	bl	80053fc <HAL_DMA_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003252:	f7ff fb7b 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
 800325c:	4a0f      	ldr	r2, [pc, #60]	; (800329c <HAL_TIM_PWM_MspInit+0x284>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003262:	2200      	movs	r2, #0
 8003264:	2100      	movs	r1, #0
 8003266:	201e      	movs	r0, #30
 8003268:	f002 f893 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800326c:	201e      	movs	r0, #30
 800326e:	f002 f8aa 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8003272:	e05a      	b.n	800332a <HAL_TIM_PWM_MspInit+0x312>
 8003274:	58024400 	.word	0x58024400
 8003278:	58020000 	.word	0x58020000
 800327c:	2400124c 	.word	0x2400124c
 8003280:	40020028 	.word	0x40020028
 8003284:	40000400 	.word	0x40000400
 8003288:	240012c4 	.word	0x240012c4
 800328c:	40020058 	.word	0x40020058
 8003290:	2400133c 	.word	0x2400133c
 8003294:	40020070 	.word	0x40020070
 8003298:	40000800 	.word	0x40000800
 800329c:	240013b4 	.word	0x240013b4
 80032a0:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_TIM_PWM_MspInit+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d13d      	bne.n	800332a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_TIM_PWM_MspInit+0x320>)
 80032b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <HAL_TIM_PWM_MspInit+0x320>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_TIM_PWM_MspInit+0x320>)
 80032c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_TIM_PWM_MspInit+0x328>)
 80032d0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032d4:	223a      	movs	r2, #58	; 0x3a
 80032d6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ea:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 800330a:	2200      	movs	r2, #0
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800330e:	480b      	ldr	r0, [pc, #44]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 8003310:	f002 f874 	bl	80053fc <HAL_DMA_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800331a:	f7ff fb17 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_TIM_PWM_MspInit+0x324>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6393      	str	r3, [r2, #56]	; 0x38
}
 800332a:	bf00      	nop
 800332c:	3730      	adds	r7, #48	; 0x30
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40000c00 	.word	0x40000c00
 8003338:	58024400 	.word	0x58024400
 800333c:	2400142c 	.word	0x2400142c
 8003340:	40020040 	.word	0x40020040

08003344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_TIM_Base_MspInit+0x3c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_TIM_Base_MspInit+0x40>)
 8003358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800335c:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_TIM_Base_MspInit+0x40>)
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_TIM_Base_MspInit+0x40>)
 8003368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40001c00 	.word	0x40001c00
 8003384:	58024400 	.word	0x58024400

08003388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	; 0x30
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d120      	bne.n	80033ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b52      	ldr	r3, [pc, #328]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80033ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b0:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ba:	4b4e      	ldr	r3, [pc, #312]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80033bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033d2:	2302      	movs	r3, #2
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033da:	2301      	movs	r3, #1
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 031c 	add.w	r3, r7, #28
 80033e2:	4619      	mov	r1, r3
 80033e4:	4844      	ldr	r0, [pc, #272]	; (80034f8 <HAL_TIM_MspPostInit+0x170>)
 80033e6:	f004 fc41 	bl	8007c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033ea:	e07f      	b.n	80034ec <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a42      	ldr	r2, [pc, #264]	; (80034fc <HAL_TIM_MspPostInit+0x174>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d11f      	bne.n	8003436 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80033f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fc:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003414:	2330      	movs	r3, #48	; 0x30
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800341c:	2302      	movs	r3, #2
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003424:	2302      	movs	r3, #2
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	4832      	ldr	r0, [pc, #200]	; (80034f8 <HAL_TIM_MspPostInit+0x170>)
 8003430:	f004 fc1c 	bl	8007c6c <HAL_GPIO_Init>
}
 8003434:	e05a      	b.n	80034ec <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a31      	ldr	r2, [pc, #196]	; (8003500 <HAL_TIM_MspPostInit+0x178>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d131      	bne.n	80034a4 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003446:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800345e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003470:	2302      	movs	r3, #2
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	4619      	mov	r1, r3
 800347a:	4822      	ldr	r0, [pc, #136]	; (8003504 <HAL_TIM_MspPostInit+0x17c>)
 800347c:	f004 fbf6 	bl	8007c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800348a:	2302      	movs	r3, #2
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003492:	2302      	movs	r3, #2
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4819      	ldr	r0, [pc, #100]	; (8003504 <HAL_TIM_MspPostInit+0x17c>)
 800349e:	f004 fbe5 	bl	8007c6c <HAL_GPIO_Init>
}
 80034a2:	e023      	b.n	80034ec <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_TIM_MspPostInit+0x180>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d11e      	bne.n	80034ec <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80034b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b4:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_TIM_MspPostInit+0x16c>)
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034cc:	2308      	movs	r3, #8
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034d4:	2302      	movs	r3, #2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034dc:	2302      	movs	r3, #2
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	4619      	mov	r1, r3
 80034e6:	4809      	ldr	r0, [pc, #36]	; (800350c <HAL_TIM_MspPostInit+0x184>)
 80034e8:	f004 fbc0 	bl	8007c6c <HAL_GPIO_Init>
}
 80034ec:	bf00      	nop
 80034ee:	3730      	adds	r7, #48	; 0x30
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	58024400 	.word	0x58024400
 80034f8:	58020400 	.word	0x58020400
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	58020c00 	.word	0x58020c00
 8003508:	40000c00 	.word	0x40000c00
 800350c:	58020000 	.word	0x58020000

08003510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b0ba      	sub	sp, #232	; 0xe8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003528:	f107 0318 	add.w	r3, r7, #24
 800352c:	22b8      	movs	r2, #184	; 0xb8
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f013 fdf1 	bl	8017118 <memset>
  if(huart->Instance==UART4)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a4d      	ldr	r2, [pc, #308]	; (8003670 <HAL_UART_MspInit+0x160>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d147      	bne.n	80035d0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003540:	f04f 0202 	mov.w	r2, #2
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003552:	f107 0318 	add.w	r3, r7, #24
 8003556:	4618      	mov	r0, r3
 8003558:	f007 f976 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003562:	f7ff f9f3 	bl	800294c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356c:	4a41      	ldr	r2, [pc, #260]	; (8003674 <HAL_UART_MspInit+0x164>)
 800356e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358a:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_UART_MspInit+0x164>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035bc:	2308      	movs	r3, #8
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c6:	4619      	mov	r1, r3
 80035c8:	482b      	ldr	r0, [pc, #172]	; (8003678 <HAL_UART_MspInit+0x168>)
 80035ca:	f004 fb4f 	bl	8007c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035ce:	e04a      	b.n	8003666 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_UART_MspInit+0x16c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d145      	bne.n	8003666 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035da:	f04f 0201 	mov.w	r2, #1
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ec:	f107 0318 	add.w	r3, r7, #24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f007 f929 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80035fc:	f7ff f9a6 	bl	800294c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003608:	f043 0320 	orr.w	r3, r3, #32
 800360c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003624:	4a13      	ldr	r2, [pc, #76]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_UART_MspInit+0x164>)
 8003630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800363c:	23c0      	movs	r3, #192	; 0xc0
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003654:	2307      	movs	r3, #7
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	; (8003680 <HAL_UART_MspInit+0x170>)
 8003662:	f004 fb03 	bl	8007c6c <HAL_GPIO_Init>
}
 8003666:	bf00      	nop
 8003668:	37e8      	adds	r7, #232	; 0xe8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40004c00 	.word	0x40004c00
 8003674:	58024400 	.word	0x58024400
 8003678:	58020400 	.word	0x58020400
 800367c:	40011400 	.word	0x40011400
 8003680:	58020800 	.word	0x58020800

08003684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <NMI_Handler+0x4>

0800368a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <MemManage_Handler+0x4>

08003696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d0:	f000 f9ba 	bl	8003a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <DMA1_Stream0_IRQHandler+0x10>)
 80036de:	f002 fc4f 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	240013b4 	.word	0x240013b4

080036ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <DMA1_Stream1_IRQHandler+0x10>)
 80036f2:	f002 fc45 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2400124c 	.word	0x2400124c

08003700 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Stream2_IRQHandler+0x10>)
 8003706:	f002 fc3b 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2400142c 	.word	0x2400142c

08003714 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <DMA1_Stream3_IRQHandler+0x10>)
 800371a:	f002 fc31 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	240012c4 	.word	0x240012c4

08003728 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <DMA1_Stream4_IRQHandler+0x10>)
 800372e:	f002 fc27 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2400133c 	.word	0x2400133c

0800373c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003740:	4802      	ldr	r0, [pc, #8]	; (800374c <DMA1_Stream5_IRQHandler+0x10>)
 8003742:	f002 fc1d 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	24000cd8 	.word	0x24000cd8

08003750 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <TIM4_IRQHandler+0x10>)
 8003756:	f00c fa59 	bl	800fc0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	24001168 	.word	0x24001168

08003764 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <I2C2_EV_IRQHandler+0x10>)
 800376a:	f004 fce9 	bl	8008140 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	24000e68 	.word	0x24000e68

08003778 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <DMA2_Stream7_IRQHandler+0x10>)
 800377e:	f002 fbff 	bl	8005f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	24000d50 	.word	0x24000d50

0800378c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <OTG_HS_IRQHandler+0x10>)
 8003792:	f004 fedf 	bl	8008554 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	24002ad0 	.word	0x24002ad0

080037a0 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <SDMMC2_IRQHandler+0x10>)
 80037a6:	f009 fea5 	bl	800d4f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	24000ebc 	.word	0x24000ebc

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f013 fca0 	bl	8017128 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	220c      	movs	r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	24050000 	.word	0x24050000
 8003814:	00000800 	.word	0x00000800
 8003818:	240015cc 	.word	0x240015cc
 800381c:	24003348 	.word	0x24003348

08003820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <SystemInit+0xd0>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <SystemInit+0xd0>)
 800382c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003834:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <SystemInit+0xd4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2b06      	cmp	r3, #6
 800383e:	d807      	bhi.n	8003850 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <SystemInit+0xd4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 030f 	bic.w	r3, r3, #15
 8003848:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <SystemInit+0xd4>)
 800384a:	f043 0307 	orr.w	r3, r3, #7
 800384e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <SystemInit+0xd8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a28      	ldr	r2, [pc, #160]	; (80038f8 <SystemInit+0xd8>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <SystemInit+0xd8>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003862:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <SystemInit+0xd8>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4924      	ldr	r1, [pc, #144]	; (80038f8 <SystemInit+0xd8>)
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <SystemInit+0xdc>)
 800386a:	4013      	ands	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <SystemInit+0xd4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <SystemInit+0xd4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 030f 	bic.w	r3, r3, #15
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <SystemInit+0xd4>)
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <SystemInit+0xd8>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <SystemInit+0xd8>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003896:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <SystemInit+0xd8>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800389c:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <SystemInit+0xd8>)
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <SystemInit+0xe0>)
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <SystemInit+0xd8>)
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <SystemInit+0xe4>)
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <SystemInit+0xd8>)
 80038aa:	4a17      	ldr	r2, [pc, #92]	; (8003908 <SystemInit+0xe8>)
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <SystemInit+0xd8>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <SystemInit+0xd8>)
 80038b6:	4a14      	ldr	r2, [pc, #80]	; (8003908 <SystemInit+0xe8>)
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <SystemInit+0xd8>)
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <SystemInit+0xd8>)
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <SystemInit+0xe8>)
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <SystemInit+0xd8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <SystemInit+0xd8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <SystemInit+0xd8>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <SystemInit+0xd8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <SystemInit+0xec>)
 80038e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000ed00 	.word	0xe000ed00
 80038f4:	52002000 	.word	0x52002000
 80038f8:	58024400 	.word	0x58024400
 80038fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003900:	02020200 	.word	0x02020200
 8003904:	01ff0000 	.word	0x01ff0000
 8003908:	01010280 	.word	0x01010280
 800390c:	52004000 	.word	0x52004000

08003910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003914:	f7ff ff84 	bl	8003820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800391c:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800391e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003920:	e002      	b.n	8003928 <LoopCopyDataInit>

08003922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003926:	3304      	adds	r3, #4

08003928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800392c:	d3f9      	bcc.n	8003922 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003930:	4c0a      	ldr	r4, [pc, #40]	; (800395c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003934:	e001      	b.n	800393a <LoopFillZerobss>

08003936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003938:	3204      	adds	r2, #4

0800393a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800393c:	d3fb      	bcc.n	8003936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800393e:	f013 fbf9 	bl	8017134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003942:	f7fd fd45 	bl	80013d0 <main>
  bx  lr
 8003946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003948:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800394c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003950:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003954:	08018728 	.word	0x08018728
  ldr r2, =_sbss
 8003958:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 800395c:	24003344 	.word	0x24003344

08003960 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC3_IRQHandler>
	...

08003964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396a:	2003      	movs	r0, #3
 800396c:	f001 fd06 	bl	800537c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003970:	f006 fd94 	bl	800a49c <HAL_RCC_GetSysClockFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_Init+0x68>)
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	4913      	ldr	r1, [pc, #76]	; (80039d0 <HAL_Init+0x6c>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
 800398c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_Init+0x68>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <HAL_Init+0x6c>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <HAL_Init+0x70>)
 80039a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a8:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <HAL_Init+0x74>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ae:	200f      	movs	r0, #15
 80039b0:	f000 f814 	bl	80039dc <HAL_InitTick>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e002      	b.n	80039c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039be:	f7fe ffcb 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58024400 	.word	0x58024400
 80039d0:	08018574 	.word	0x08018574
 80039d4:	24000004 	.word	0x24000004
 80039d8:	24000000 	.word	0x24000000

080039dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_InitTick+0x60>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e021      	b.n	8003a34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_InitTick+0x64>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_InitTick+0x60>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fceb 	bl	80053e2 <HAL_SYSTICK_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00e      	b.n	8003a34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0f      	cmp	r3, #15
 8003a1a:	d80a      	bhi.n	8003a32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f001 fcb5 	bl	8005392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a28:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <HAL_InitTick+0x68>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2400000c 	.word	0x2400000c
 8003a40:	24000000 	.word	0x24000000
 8003a44:	24000008 	.word	0x24000008

08003a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_IncTick+0x20>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_IncTick+0x24>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <HAL_IncTick+0x24>)
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2400000c 	.word	0x2400000c
 8003a6c:	240015d0 	.word	0x240015d0

08003a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return uwTick;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_GetTick+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	240015d0 	.word	0x240015d0

08003a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a90:	f7ff ffee 	bl	8003a70 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d005      	beq.n	8003aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_Delay+0x44>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aae:	bf00      	nop
 8003ab0:	f7ff ffde 	bl	8003a70 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d8f7      	bhi.n	8003ab0 <HAL_Delay+0x28>
  {
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2400000c 	.word	0x2400000c

08003ad0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	4904      	ldr	r1, [pc, #16]	; (8003af8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	58000400 	.word	0x58000400

08003afc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3360      	adds	r3, #96	; 0x60
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <LL_ADC_SetOffset+0x60>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10b      	bne.n	8003ba0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b9e:	e00b      	b.n	8003bb8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	58026000 	.word	0x58026000

08003bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3360      	adds	r3, #96	; 0x60
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	611a      	str	r2, [r3, #16]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3360      	adds	r3, #96	; 0x60
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	601a      	str	r2, [r3, #0]
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	58026000 	.word	0x58026000

08003c6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <LL_ADC_SetOffsetSaturation+0x40>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10e      	bne.n	8003c9e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3360      	adds	r3, #96	; 0x60
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	58026000 	.word	0x58026000

08003cb0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <LL_ADC_SetOffsetSign+0x40>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10e      	bne.n	8003ce2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3360      	adds	r3, #96	; 0x60
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	58026000 	.word	0x58026000

08003cf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3360      	adds	r3, #96	; 0x60
 8003d04:	461a      	mov	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <LL_ADC_SetOffsetState+0x50>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d26:	e007      	b.n	8003d38 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	58026000 	.word	0x58026000

08003d48 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3330      	adds	r3, #48	; 0x30
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	4413      	add	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	211f      	movs	r1, #31
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	f003 011f 	and.w	r1, r3, #31
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3314      	adds	r3, #20
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	0e5b      	lsrs	r3, r3, #25
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	4413      	add	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	0d1b      	lsrs	r3, r3, #20
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2107      	movs	r1, #7
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	0d1b      	lsrs	r3, r3, #20
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	431a      	orrs	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a1a      	ldr	r2, [pc, #104]	; (8003e70 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d115      	bne.n	8003e38 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f003 0318 	and.w	r3, r3, #24
 8003e22:	4914      	ldr	r1, [pc, #80]	; (8003e74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e24:	40d9      	lsrs	r1, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	400b      	ands	r3, r1
 8003e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e36:	e014      	b.n	8003e62 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0318 	and.w	r3, r3, #24
 8003e4e:	4909      	ldr	r1, [pc, #36]	; (8003e74 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e50:	40d9      	lsrs	r1, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	400b      	ands	r3, r1
 8003e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	58026000 	.word	0x58026000
 8003e74:	000fffff 	.word	0x000fffff

08003e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6093      	str	r3, [r2, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	5fffffc0 	.word	0x5fffffc0

08003e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb0:	d101      	bne.n	8003eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	6fffffc0 	.word	0x6fffffc0

08003eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f00:	d101      	bne.n	8003f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <LL_ADC_IsEnabled+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_ADC_IsEnabled+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d101      	bne.n	8003f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d101      	bne.n	8003f78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1ee      	b.n	8004380 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fe fceb 	bl	800298c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff67 	bl	8003e9c <LL_ADC_IsDeepPowerDownEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff4d 	bl	8003e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ff82 	bl	8003eec <LL_ADC_IsInternalRegulatorEnabled>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d114      	bne.n	8004018 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ff66 	bl	8003ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff8:	4b8e      	ldr	r3, [pc, #568]	; (8004234 <HAL_ADC_Init+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	4a8e      	ldr	r2, [pc, #568]	; (8004238 <HAL_ADC_Init+0x2b0>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800400a:	e002      	b.n	8004012 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f9      	bne.n	800400c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff65 	bl	8003eec <LL_ADC_IsInternalRegulatorEnabled>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402c:	f043 0210 	orr.w	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff ff76 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 800404e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 8188 	bne.w	800436e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 8184 	bne.w	800436e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff4a 	bl	8003f14 <LL_ADC_IsEnabled>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d136      	bne.n	80040f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6c      	ldr	r2, [pc, #432]	; (800423c <HAL_ADC_Init+0x2b4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_ADC_Init+0x112>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <HAL_ADC_Init+0x2b8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10e      	bne.n	80040b8 <HAL_ADC_Init+0x130>
 800409a:	4868      	ldr	r0, [pc, #416]	; (800423c <HAL_ADC_Init+0x2b4>)
 800409c:	f7ff ff3a 	bl	8003f14 <LL_ADC_IsEnabled>
 80040a0:	4604      	mov	r4, r0
 80040a2:	4867      	ldr	r0, [pc, #412]	; (8004240 <HAL_ADC_Init+0x2b8>)
 80040a4:	f7ff ff36 	bl	8003f14 <LL_ADC_IsEnabled>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4323      	orrs	r3, r4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e008      	b.n	80040ca <HAL_ADC_Init+0x142>
 80040b8:	4862      	ldr	r0, [pc, #392]	; (8004244 <HAL_ADC_Init+0x2bc>)
 80040ba:	f7ff ff2b 	bl	8003f14 <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5a      	ldr	r2, [pc, #360]	; (800423c <HAL_ADC_Init+0x2b4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_ADC_Init+0x15a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_ADC_Init+0x2b8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Init+0x15e>
 80040e2:	4a59      	ldr	r2, [pc, #356]	; (8004248 <HAL_ADC_Init+0x2c0>)
 80040e4:	e000      	b.n	80040e8 <HAL_ADC_Init+0x160>
 80040e6:	4a59      	ldr	r2, [pc, #356]	; (800424c <HAL_ADC_Init+0x2c4>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7ff fd04 	bl	8003afc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_ADC_Init+0x2bc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d129      	bne.n	8004152 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7e5b      	ldrb	r3, [r3, #25]
 8004102:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004108:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800410e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d013      	beq.n	8004140 <HAL_ADC_Init+0x1b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d00d      	beq.n	800413c <HAL_ADC_Init+0x1b4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b1c      	cmp	r3, #28
 8004126:	d007      	beq.n	8004138 <HAL_ADC_Init+0x1b0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b18      	cmp	r3, #24
 800412e:	d101      	bne.n	8004134 <HAL_ADC_Init+0x1ac>
 8004130:	2318      	movs	r3, #24
 8004132:	e006      	b.n	8004142 <HAL_ADC_Init+0x1ba>
 8004134:	2300      	movs	r3, #0
 8004136:	e004      	b.n	8004142 <HAL_ADC_Init+0x1ba>
 8004138:	2310      	movs	r3, #16
 800413a:	e002      	b.n	8004142 <HAL_ADC_Init+0x1ba>
 800413c:	2308      	movs	r3, #8
 800413e:	e000      	b.n	8004142 <HAL_ADC_Init+0x1ba>
 8004140:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004142:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	e00e      	b.n	8004170 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7e5b      	ldrb	r3, [r3, #25]
 8004156:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800415c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004162:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d106      	bne.n	8004188 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	3b01      	subs	r3, #1
 8004180:	045b      	lsls	r3, r3, #17
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a26      	ldr	r2, [pc, #152]	; (8004244 <HAL_ADC_Init+0x2bc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d115      	bne.n	80041da <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4b26      	ldr	r3, [pc, #152]	; (8004250 <HAL_ADC_Init+0x2c8>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	430b      	orrs	r3, r1
 80041c0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	611a      	str	r2, [r3, #16]
 80041d8:	e009      	b.n	80041ee <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_ADC_Init+0x2cc>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	430b      	orrs	r3, r1
 80041ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fea1 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 80041f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff feae 	bl	8003f60 <LL_ADC_INJ_IsConversionOngoing>
 8004204:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 808e 	bne.w	800432a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 808a 	bne.w	800432a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_ADC_Init+0x2bc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d11b      	bne.n	8004258 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7e1b      	ldrb	r3, [r3, #24]
 8004224:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800422c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e018      	b.n	8004266 <HAL_ADC_Init+0x2de>
 8004234:	24000000 	.word	0x24000000
 8004238:	053e2d63 	.word	0x053e2d63
 800423c:	40022000 	.word	0x40022000
 8004240:	40022100 	.word	0x40022100
 8004244:	58026000 	.word	0x58026000
 8004248:	40022300 	.word	0x40022300
 800424c:	58026300 	.word	0x58026300
 8004250:	fff04007 	.word	0xfff04007
 8004254:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7e1b      	ldrb	r3, [r3, #24]
 800425c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_ADC_Init+0x400>)
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	430b      	orrs	r3, r1
 8004278:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004280:	2b01      	cmp	r3, #1
 8004282:	d137      	bne.n	80042f4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3f      	ldr	r2, [pc, #252]	; (800438c <HAL_ADC_Init+0x404>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d116      	bne.n	80042c2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_ADC_Init+0x408>)
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042b2:	430a      	orrs	r2, r1
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	611a      	str	r2, [r3, #16]
 80042c0:	e020      	b.n	8004304 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	4b32      	ldr	r3, [pc, #200]	; (8004394 <HAL_ADC_Init+0x40c>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0411      	lsls	r1, r2, #16
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042d8:	4311      	orrs	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042de:	4311      	orrs	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042e4:	430a      	orrs	r2, r1
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	611a      	str	r2, [r3, #16]
 80042f2:	e007      	b.n	8004304 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_ADC_Init+0x404>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d002      	beq.n	800432a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fd63 	bl	8004df0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10c      	bne.n	800434c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f023 010f 	bic.w	r1, r3, #15
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
 800434a:	e007      	b.n	800435c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 020f 	bic.w	r2, r2, #15
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	f023 0303 	bic.w	r3, r3, #3
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	661a      	str	r2, [r3, #96]	; 0x60
 800436c:	e007      	b.n	800437e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004372:	f043 0210 	orr.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800437e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3724      	adds	r7, #36	; 0x24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	ffffbffc 	.word	0xffffbffc
 800438c:	58026000 	.word	0x58026000
 8004390:	fc00f81f 	.word	0xfc00f81f
 8004394:	fc00f81e 	.word	0xfc00f81e

08004398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b0b9      	sub	sp, #228	; 0xe4
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4aa9      	ldr	r2, [pc, #676]	; (8004660 <HAL_ADC_ConfigChannel+0x2c8>)
 80043ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x34>
 80043c6:	2302      	movs	r3, #2
 80043c8:	f000 bcfa 	b.w	8004dc0 <HAL_ADC_ConfigChannel+0xa28>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fdae 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 84de 	bne.w	8004da2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a9e      	ldr	r2, [pc, #632]	; (8004664 <HAL_ADC_ConfigChannel+0x2cc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d033      	beq.n	8004458 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <HAL_ADC_ConfigChannel+0x76>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	e01d      	b.n	800444a <HAL_ADC_ConfigChannel+0xb2>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800442a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e004      	b.n	8004440 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2201      	movs	r2, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	69d1      	ldr	r1, [r2, #28]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	430b      	orrs	r3, r1
 8004456:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	f7ff fc6f 	bl	8003d48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fd63 	bl	8003f3a <LL_ADC_REG_IsConversionOngoing>
 8004474:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fd6f 	bl	8003f60 <LL_ADC_INJ_IsConversionOngoing>
 8004482:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 8270 	bne.w	8004970 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004494:	2b00      	cmp	r3, #0
 8004496:	f040 826b 	bne.w	8004970 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f7ff fc7a 	bl	8003da0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6c      	ldr	r2, [pc, #432]	; (8004664 <HAL_ADC_ConfigChannel+0x2cc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10d      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	08db      	lsrs	r3, r3, #3
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044d0:	e032      	b.n	8004538 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_ADC_ConfigChannel+0x2d0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044de:	d10b      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x160>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	e01d      	b.n	8004534 <HAL_ADC_ConfigChannel+0x19c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <HAL_ADC_ConfigChannel+0x186>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	e00a      	b.n	8004534 <HAL_ADC_ConfigChannel+0x19c>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d048      	beq.n	80045d2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6919      	ldr	r1, [r3, #16]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004550:	f7ff fb08 	bl	8003b64 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a42      	ldr	r2, [pc, #264]	; (8004664 <HAL_ADC_ConfigChannel+0x2cc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d119      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6919      	ldr	r1, [r3, #16]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	461a      	mov	r2, r3
 800456c:	f7ff fba0 	bl	8003cb0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d102      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x1f0>
 8004582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004586:	e000      	b.n	800458a <HAL_ADC_ConfigChannel+0x1f2>
 8004588:	2300      	movs	r3, #0
 800458a:	461a      	mov	r2, r3
 800458c:	f7ff fb6e 	bl	8003c6c <LL_ADC_SetOffsetSaturation>
 8004590:	e1ee      	b.n	8004970 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d102      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x212>
 80045a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045a8:	e000      	b.n	80045ac <HAL_ADC_ConfigChannel+0x214>
 80045aa:	2300      	movs	r3, #0
 80045ac:	461a      	mov	r2, r3
 80045ae:	f7ff fb3b 	bl	8003c28 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	7e1b      	ldrb	r3, [r3, #24]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x230>
 80045c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045c6:	e000      	b.n	80045ca <HAL_ADC_ConfigChannel+0x232>
 80045c8:	2300      	movs	r3, #0
 80045ca:	461a      	mov	r2, r3
 80045cc:	f7ff fb12 	bl	8003bf4 <LL_ADC_SetDataRightShift>
 80045d0:	e1ce      	b.n	8004970 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a23      	ldr	r2, [pc, #140]	; (8004664 <HAL_ADC_ConfigChannel+0x2cc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	f040 8181 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff faef 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <HAL_ADC_ConfigChannel+0x272>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fae4 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004600:	4603      	mov	r3, r0
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	e01e      	b.n	8004648 <HAL_ADC_ConfigChannel+0x2b0>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fad9 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004616:	4603      	mov	r3, r0
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800462c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004638:	2320      	movs	r3, #32
 800463a:	e004      	b.n	8004646 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800463c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <HAL_ADC_ConfigChannel+0x2d4>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	e01e      	b.n	800469e <HAL_ADC_ConfigChannel+0x306>
 8004660:	47ff0000 	.word	0x47ff0000
 8004664:	58026000 	.word	0x58026000
 8004668:	5c001000 	.word	0x5c001000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	e004      	b.n	800469e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	429a      	cmp	r2, r3
 80046a0:	d106      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb22 	bl	8003cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fa86 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 80046bc:	4603      	mov	r3, r0
 80046be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x344>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fa7b 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	0e9b      	lsrs	r3, r3, #26
 80046d6:	f003 021f 	and.w	r2, r3, #31
 80046da:	e01e      	b.n	800471a <HAL_ADC_ConfigChannel+0x382>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fa70 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80046fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e004      	b.n	8004718 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800470e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x39a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0e9b      	lsrs	r3, r3, #26
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	e018      	b.n	8004764 <HAL_ADC_ConfigChannel+0x3cc>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800474a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800474e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004756:	2320      	movs	r3, #32
 8004758:	e004      	b.n	8004764 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800475a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	2101      	movs	r1, #1
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fabf 	bl	8003cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2102      	movs	r1, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fa23 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x40a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fa18 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	e01e      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x448>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fa0d 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80047c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e004      	b.n	80047de <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x460>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	e014      	b.n	8004822 <HAL_ADC_ConfigChannel+0x48a>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800480c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e004      	b.n	8004822 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	429a      	cmp	r2, r3
 8004824:	d106      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fa60 	bl	8003cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2103      	movs	r1, #3
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff f9c4 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x4c8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2103      	movs	r1, #3
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff f9b9 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	f003 021f 	and.w	r2, r3, #31
 800485e:	e017      	b.n	8004890 <HAL_ADC_ConfigChannel+0x4f8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2103      	movs	r1, #3
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f9ae 	bl	8003bc8 <LL_ADC_GetOffsetChannel>
 800486c:	4603      	mov	r3, r0
 800486e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800487c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004882:	2320      	movs	r3, #32
 8004884:	e003      	b.n	800488e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x510>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	e011      	b.n	80048cc <HAL_ADC_ConfigChannel+0x534>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e003      	b.n	80048cc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c6:	fab3 f383 	clz	r3, r3
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d14f      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2103      	movs	r1, #3
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fa0b 	bl	8003cf4 <LL_ADC_SetOffsetState>
 80048de:	e047      	b.n	8004970 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d107      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004902:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	069b      	lsls	r3, r3, #26
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004926:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	069b      	lsls	r3, r3, #26
 8004938:	429a      	cmp	r2, r3
 800493a:	d107      	bne.n	800494c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800494a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800496e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff facd 	bl	8003f14 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 8219 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	461a      	mov	r2, r3
 8004990:	f7ff fa32 	bl	8003df8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4aa1      	ldr	r2, [pc, #644]	; (8004c20 <HAL_ADC_ConfigChannel+0x888>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f040 812e 	bne.w	8004bfc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x630>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	3301      	adds	r3, #1
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2b09      	cmp	r3, #9
 80049be:	bf94      	ite	ls
 80049c0:	2301      	movls	r3, #1
 80049c2:	2300      	movhi	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e019      	b.n	80049fc <HAL_ADC_ConfigChannel+0x664>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e003      	b.n	80049ec <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	bf94      	ite	ls
 80049f6:	2301      	movls	r3, #1
 80049f8:	2300      	movhi	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d079      	beq.n	8004af4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d107      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x684>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0e9b      	lsrs	r3, r3, #26
 8004a12:	3301      	adds	r3, #1
 8004a14:	069b      	lsls	r3, r3, #26
 8004a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a1a:	e015      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x6b0>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e003      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	069b      	lsls	r3, r3, #26
 8004a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x6d0>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	e017      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x700>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e003      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2101      	movs	r1, #1
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	ea42 0103 	orr.w	r1, r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x726>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0e9b      	lsrs	r3, r3, #26
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f003 021f 	and.w	r2, r3, #31
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	051b      	lsls	r3, r3, #20
 8004abc:	e018      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x758>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e003      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	430b      	orrs	r3, r1
 8004af2:	e07e      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x778>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	3301      	adds	r3, #1
 8004b08:	069b      	lsls	r3, r3, #26
 8004b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0e:	e015      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x7a4>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b28:	2320      	movs	r3, #32
 8004b2a:	e003      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	069b      	lsls	r3, r3, #26
 8004b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x7c4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	0e9b      	lsrs	r3, r3, #26
 8004b4e:	3301      	adds	r3, #1
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2101      	movs	r1, #1
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	e017      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x7f4>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	61bb      	str	r3, [r7, #24]
  return result;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b74:	2320      	movs	r3, #32
 8004b76:	e003      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8c:	ea42 0103 	orr.w	r1, r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x820>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	0e9b      	lsrs	r3, r3, #26
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	3b1e      	subs	r3, #30
 8004bb0:	051b      	lsls	r3, r3, #20
 8004bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	e01b      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x858>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	60fb      	str	r3, [r7, #12]
  return result;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e003      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f003 021f 	and.w	r2, r3, #31
 8004be2:	4613      	mov	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	3b1e      	subs	r3, #30
 8004bea:	051b      	lsls	r3, r3, #20
 8004bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f7ff f8d2 	bl	8003da0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f280 80d7 	bge.w	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a06      	ldr	r2, [pc, #24]	; (8004c24 <HAL_ADC_ConfigChannel+0x88c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_ADC_ConfigChannel+0x882>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <HAL_ADC_ConfigChannel+0x890>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10a      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x898>
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <HAL_ADC_ConfigChannel+0x894>)
 8004c1c:	e009      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x89a>
 8004c1e:	bf00      	nop
 8004c20:	47ff0000 	.word	0x47ff0000
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40022100 	.word	0x40022100
 8004c2c:	40022300 	.word	0x40022300
 8004c30:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_ADC_ConfigChannel+0xa30>)
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe ff88 	bl	8003b48 <LL_ADC_GetCommonPathInternalCh>
 8004c38:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a62      	ldr	r2, [pc, #392]	; (8004dcc <HAL_ADC_ConfigChannel+0xa34>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_ConfigChannel+0x8b8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a61      	ldr	r2, [pc, #388]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10e      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x8d6>
 8004c50:	485e      	ldr	r0, [pc, #376]	; (8004dcc <HAL_ADC_ConfigChannel+0xa34>)
 8004c52:	f7ff f95f 	bl	8003f14 <LL_ADC_IsEnabled>
 8004c56:	4604      	mov	r4, r0
 8004c58:	485d      	ldr	r0, [pc, #372]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c5a:	f7ff f95b 	bl	8003f14 <LL_ADC_IsEnabled>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4323      	orrs	r3, r4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e008      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x8e8>
 8004c6e:	4859      	ldr	r0, [pc, #356]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c70:	f7ff f950 	bl	8003f14 <LL_ADC_IsEnabled>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8084 	beq.w	8004d8e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a53      	ldr	r2, [pc, #332]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa40>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d132      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x95e>
 8004c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d12c      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a4c      	ldr	r2, [pc, #304]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f040 8086 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a47      	ldr	r2, [pc, #284]	; (8004dcc <HAL_ADC_ConfigChannel+0xa34>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_ADC_ConfigChannel+0x924>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a46      	ldr	r2, [pc, #280]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa38>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x928>
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_ADC_ConfigChannel+0xa44>)
 8004cbe:	e000      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x92a>
 8004cc0:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <HAL_ADC_ConfigChannel+0xa30>)
 8004cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fe ff28 	bl	8003b22 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cd2:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <HAL_ADC_ConfigChannel+0xa48>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	4a42      	ldr	r2, [pc, #264]	; (8004de4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ce6:	e002      	b.n	8004cee <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f9      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cf4:	e05e      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <HAL_ADC_ConfigChannel+0xa50>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d120      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x9aa>
 8004d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11a      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d14e      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <HAL_ADC_ConfigChannel+0xa34>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_ADC_ConfigChannel+0x992>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa38>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x996>
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <HAL_ADC_ConfigChannel+0xa44>)
 8004d2c:	e000      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x998>
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <HAL_ADC_ConfigChannel+0xa30>)
 8004d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fe fef1 	bl	8003b22 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d40:	e038      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a29      	ldr	r2, [pc, #164]	; (8004dec <HAL_ADC_ConfigChannel+0xa54>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d133      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
 8004d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d12d      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d128      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_ADC_ConfigChannel+0xa34>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d004      	beq.n	8004d76 <HAL_ADC_ConfigChannel+0x9de>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa38>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x9e2>
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_ADC_ConfigChannel+0xa44>)
 8004d78:	e000      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x9e4>
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <HAL_ADC_ConfigChannel+0xa30>)
 8004d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fe fecb 	bl	8003b22 <LL_ADC_SetCommonPathInternalCh>
 8004d8c:	e012      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004da0:	e008      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004dbc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	37e4      	adds	r7, #228	; 0xe4
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd90      	pop	{r4, r7, pc}
 8004dc8:	58026300 	.word	0x58026300
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40022100 	.word	0x40022100
 8004dd4:	58026000 	.word	0x58026000
 8004dd8:	c7520000 	.word	0xc7520000
 8004ddc:	40022300 	.word	0x40022300
 8004de0:	24000000 	.word	0x24000000
 8004de4:	053e2d63 	.word	0x053e2d63
 8004de8:	c3210000 	.word	0xc3210000
 8004dec:	cb840000 	.word	0xcb840000

08004df0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6c      	ldr	r2, [pc, #432]	; (8004fb0 <ADC_ConfigureBoostMode+0x1c0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <ADC_ConfigureBoostMode+0x1c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <ADC_ConfigureBoostMode+0x1c4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <ADC_ConfigureBoostMode+0x30>
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <ADC_ConfigureBoostMode+0x1c8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e008      	b.n	8004e32 <ADC_ConfigureBoostMode+0x42>
 8004e20:	4b66      	ldr	r3, [pc, #408]	; (8004fbc <ADC_ConfigureBoostMode+0x1cc>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01c      	beq.n	8004e70 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e36:	f005 fcab 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 8004e3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e44:	d010      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x78>
 8004e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4a:	d873      	bhi.n	8004f34 <ADC_ConfigureBoostMode+0x144>
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d002      	beq.n	8004e58 <ADC_ConfigureBoostMode+0x68>
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e56:	d16d      	bne.n	8004f34 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e068      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e064      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e70:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f006 fe86 	bl	800bb88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e7c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e86:	d051      	beq.n	8004f2c <ADC_ConfigureBoostMode+0x13c>
 8004e88:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e8c:	d854      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004e8e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e92:	d047      	beq.n	8004f24 <ADC_ConfigureBoostMode+0x134>
 8004e94:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e98:	d84e      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004e9a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e9e:	d03d      	beq.n	8004f1c <ADC_ConfigureBoostMode+0x12c>
 8004ea0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ea4:	d848      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eaa:	d033      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x124>
 8004eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb0:	d842      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eb2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004eb6:	d029      	beq.n	8004f0c <ADC_ConfigureBoostMode+0x11c>
 8004eb8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ebc:	d83c      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ebe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ec2:	d01a      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ec4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ec8:	d836      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ece:	d014      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ed0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ed4:	d830      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d00e      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee0:	d82a      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004ee2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ee6:	d008      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ee8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eec:	d824      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0x148>
 8004eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ef2:	d002      	beq.n	8004efa <ADC_ConfigureBoostMode+0x10a>
 8004ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef8:	d11e      	bne.n	8004f38 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0c9b      	lsrs	r3, r3, #18
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	60fb      	str	r3, [r7, #12]
        break;
 8004f0a:	e016      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	091b      	lsrs	r3, r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e012      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e00e      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	60fb      	str	r3, [r7, #12]
        break;
 8004f22:	e00a      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	09db      	lsrs	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]
        break;
 8004f2a:	e006      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	60fb      	str	r3, [r7, #12]
        break;
 8004f32:	e002      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f38:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <ADC_ConfigureBoostMode+0x1d0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d808      	bhi.n	8004f5a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f58:	e025      	b.n	8004fa6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <ADC_ConfigureBoostMode+0x1d4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d80a      	bhi.n	8004f78 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	e016      	b.n	8004fa6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <ADC_ConfigureBoostMode+0x1d8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d80a      	bhi.n	8004f96 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	e007      	b.n	8004fa6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fa4:	609a      	str	r2, [r3, #8]
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40022100 	.word	0x40022100
 8004fb8:	40022300 	.word	0x40022300
 8004fbc:	58026300 	.word	0x58026300
 8004fc0:	005f5e10 	.word	0x005f5e10
 8004fc4:	00bebc20 	.word	0x00bebc20
 8004fc8:	017d7840 	.word	0x017d7840

08004fcc <LL_ADC_IsEnabled>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <LL_ADC_IsEnabled+0x18>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_ADC_IsEnabled+0x1a>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b04      	cmp	r3, #4
 8005004:	d101      	bne.n	800500a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b0a3      	sub	sp, #140	; 0x8c
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005032:	2302      	movs	r3, #2
 8005034:	e0c1      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005042:	2300      	movs	r3, #0
 8005044:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5e      	ldr	r2, [pc, #376]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d102      	bne.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005050:	4b5d      	ldr	r3, [pc, #372]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e001      	b.n	800505a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0a0      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ffb9 	bl	8004ff2 <LL_ADC_REG_IsConversionOngoing>
 8005080:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ffb2 	bl	8004ff2 <LL_ADC_REG_IsConversionOngoing>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 8081 	bne.w	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d17c      	bne.n	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a48      	ldr	r2, [pc, #288]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a46      	ldr	r2, [pc, #280]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050b2:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050b4:	e000      	b.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050b6:	4b46      	ldr	r3, [pc, #280]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050b8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d039      	beq.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a39      	ldr	r2, [pc, #228]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10e      	bne.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050e8:	4836      	ldr	r0, [pc, #216]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ea:	f7ff ff6f 	bl	8004fcc <LL_ADC_IsEnabled>
 80050ee:	4604      	mov	r4, r0
 80050f0:	4835      	ldr	r0, [pc, #212]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050f2:	f7ff ff6b 	bl	8004fcc <LL_ADC_IsEnabled>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4323      	orrs	r3, r4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e008      	b.n	8005118 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005106:	4833      	ldr	r0, [pc, #204]	; (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005108:	f7ff ff60 	bl	8004fcc <LL_ADC_IsEnabled>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d047      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800511c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005122:	4013      	ands	r3, r2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	6811      	ldr	r1, [r2, #0]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	430a      	orrs	r2, r1
 800512e:	431a      	orrs	r2, r3
 8005130:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005132:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005134:	e03a      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800513e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005140:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10e      	bne.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005156:	481b      	ldr	r0, [pc, #108]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005158:	f7ff ff38 	bl	8004fcc <LL_ADC_IsEnabled>
 800515c:	4604      	mov	r4, r0
 800515e:	481a      	ldr	r0, [pc, #104]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005160:	f7ff ff34 	bl	8004fcc <LL_ADC_IsEnabled>
 8005164:	4603      	mov	r3, r0
 8005166:	4323      	orrs	r3, r4
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005174:	4817      	ldr	r0, [pc, #92]	; (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005176:	f7ff ff29 	bl	8004fcc <LL_ADC_IsEnabled>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800518a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005190:	4013      	ands	r3, r2
 8005192:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005194:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005196:	e009      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051aa:	e000      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	378c      	adds	r7, #140	; 0x8c
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40022100 	.word	0x40022100
 80051cc:	40022300 	.word	0x40022300
 80051d0:	58026300 	.word	0x58026300
 80051d4:	58026000 	.word	0x58026000
 80051d8:	fffff0e0 	.word	0xfffff0e0

080051dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f8:	4013      	ands	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <__NVIC_SetPriorityGrouping+0x44>)
 8005206:	4313      	orrs	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520a:	4a04      	ldr	r2, [pc, #16]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	60d3      	str	r3, [r2, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00
 8005220:	05fa0000 	.word	0x05fa0000

08005224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <__NVIC_GetPriorityGrouping+0x18>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	f003 0307 	and.w	r3, r3, #7
}
 8005232:	4618      	mov	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db0b      	blt.n	800526a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	4907      	ldr	r1, [pc, #28]	; (8005278 <__NVIC_EnableIRQ+0x38>)
 800525a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e100 	.word	0xe000e100

0800527c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db0a      	blt.n	80052a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	490c      	ldr	r1, [pc, #48]	; (80052c8 <__NVIC_SetPriority+0x4c>)
 8005296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	440b      	add	r3, r1
 80052a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a4:	e00a      	b.n	80052bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4908      	ldr	r1, [pc, #32]	; (80052cc <__NVIC_SetPriority+0x50>)
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3b04      	subs	r3, #4
 80052b4:	0112      	lsls	r2, r2, #4
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	440b      	add	r3, r1
 80052ba:	761a      	strb	r2, [r3, #24]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100
 80052cc:	e000ed00 	.word	0xe000ed00

080052d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f1c3 0307 	rsb	r3, r3, #7
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	bf28      	it	cs
 80052ee:	2304      	movcs	r3, #4
 80052f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3304      	adds	r3, #4
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d902      	bls.n	8005300 <NVIC_EncodePriority+0x30>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3b03      	subs	r3, #3
 80052fe:	e000      	b.n	8005302 <NVIC_EncodePriority+0x32>
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005304:	f04f 32ff 	mov.w	r2, #4294967295
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	401a      	ands	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005318:	f04f 31ff 	mov.w	r1, #4294967295
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	43d9      	mvns	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005328:	4313      	orrs	r3, r2
         );
}
 800532a:	4618      	mov	r0, r3
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005348:	d301      	bcc.n	800534e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800534a:	2301      	movs	r3, #1
 800534c:	e00f      	b.n	800536e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <SysTick_Config+0x40>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005356:	210f      	movs	r1, #15
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	f7ff ff8e 	bl	800527c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <SysTick_Config+0x40>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <SysTick_Config+0x40>)
 8005368:	2207      	movs	r2, #7
 800536a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	e000e010 	.word	0xe000e010

0800537c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff29 	bl	80051dc <__NVIC_SetPriorityGrouping>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a0:	f7ff ff40 	bl	8005224 <__NVIC_GetPriorityGrouping>
 80053a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff90 	bl	80052d0 <NVIC_EncodePriority>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff5f 	bl	800527c <__NVIC_SetPriority>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff33 	bl	8005240 <__NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ffa4 	bl	8005338 <SysTick_Config>
 80053f0:	4603      	mov	r3, r0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005404:	f7fe fb34 	bl	8003a70 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e312      	b.n	8005a3a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a66      	ldr	r2, [pc, #408]	; (80055b4 <HAL_DMA_Init+0x1b8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d04a      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a65      	ldr	r2, [pc, #404]	; (80055b8 <HAL_DMA_Init+0x1bc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d045      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a63      	ldr	r2, [pc, #396]	; (80055bc <HAL_DMA_Init+0x1c0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d040      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a62      	ldr	r2, [pc, #392]	; (80055c0 <HAL_DMA_Init+0x1c4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d03b      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a60      	ldr	r2, [pc, #384]	; (80055c4 <HAL_DMA_Init+0x1c8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d036      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5f      	ldr	r2, [pc, #380]	; (80055c8 <HAL_DMA_Init+0x1cc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d031      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5d      	ldr	r2, [pc, #372]	; (80055cc <HAL_DMA_Init+0x1d0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02c      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5c      	ldr	r2, [pc, #368]	; (80055d0 <HAL_DMA_Init+0x1d4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d027      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5a      	ldr	r2, [pc, #360]	; (80055d4 <HAL_DMA_Init+0x1d8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a59      	ldr	r2, [pc, #356]	; (80055d8 <HAL_DMA_Init+0x1dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d01d      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a57      	ldr	r2, [pc, #348]	; (80055dc <HAL_DMA_Init+0x1e0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a56      	ldr	r2, [pc, #344]	; (80055e0 <HAL_DMA_Init+0x1e4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a54      	ldr	r2, [pc, #336]	; (80055e4 <HAL_DMA_Init+0x1e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a53      	ldr	r2, [pc, #332]	; (80055e8 <HAL_DMA_Init+0x1ec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a51      	ldr	r2, [pc, #324]	; (80055ec <HAL_DMA_Init+0x1f0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_DMA_Init+0xb8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a50      	ldr	r2, [pc, #320]	; (80055f0 <HAL_DMA_Init+0x1f4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d101      	bne.n	80054b8 <HAL_DMA_Init+0xbc>
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <HAL_DMA_Init+0xbe>
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 813c 	beq.w	8005738 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a37      	ldr	r2, [pc, #220]	; (80055b4 <HAL_DMA_Init+0x1b8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d04a      	beq.n	8005570 <HAL_DMA_Init+0x174>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a36      	ldr	r2, [pc, #216]	; (80055b8 <HAL_DMA_Init+0x1bc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d045      	beq.n	8005570 <HAL_DMA_Init+0x174>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a34      	ldr	r2, [pc, #208]	; (80055bc <HAL_DMA_Init+0x1c0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d040      	beq.n	8005570 <HAL_DMA_Init+0x174>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a33      	ldr	r2, [pc, #204]	; (80055c0 <HAL_DMA_Init+0x1c4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d03b      	beq.n	8005570 <HAL_DMA_Init+0x174>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a31      	ldr	r2, [pc, #196]	; (80055c4 <HAL_DMA_Init+0x1c8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d036      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a30      	ldr	r2, [pc, #192]	; (80055c8 <HAL_DMA_Init+0x1cc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d031      	beq.n	8005570 <HAL_DMA_Init+0x174>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2e      	ldr	r2, [pc, #184]	; (80055cc <HAL_DMA_Init+0x1d0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d02c      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <HAL_DMA_Init+0x1d4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d027      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2b      	ldr	r2, [pc, #172]	; (80055d4 <HAL_DMA_Init+0x1d8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_DMA_Init+0x174>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <HAL_DMA_Init+0x1dc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d01d      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a28      	ldr	r2, [pc, #160]	; (80055dc <HAL_DMA_Init+0x1e0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_DMA_Init+0x174>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <HAL_DMA_Init+0x1e4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <HAL_DMA_Init+0x1e8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <HAL_DMA_Init+0x1ec>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_DMA_Init+0x174>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a22      	ldr	r2, [pc, #136]	; (80055ec <HAL_DMA_Init+0x1f0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_DMA_Init+0x174>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <HAL_DMA_Init+0x1f4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <HAL_DMA_Init+0x186>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e007      	b.n	8005592 <HAL_DMA_Init+0x196>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005592:	e02f      	b.n	80055f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005594:	f7fe fa6c 	bl	8003a70 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d928      	bls.n	80055f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2203      	movs	r2, #3
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e242      	b.n	8005a3a <HAL_DMA_Init+0x63e>
 80055b4:	40020010 	.word	0x40020010
 80055b8:	40020028 	.word	0x40020028
 80055bc:	40020040 	.word	0x40020040
 80055c0:	40020058 	.word	0x40020058
 80055c4:	40020070 	.word	0x40020070
 80055c8:	40020088 	.word	0x40020088
 80055cc:	400200a0 	.word	0x400200a0
 80055d0:	400200b8 	.word	0x400200b8
 80055d4:	40020410 	.word	0x40020410
 80055d8:	40020428 	.word	0x40020428
 80055dc:	40020440 	.word	0x40020440
 80055e0:	40020458 	.word	0x40020458
 80055e4:	40020470 	.word	0x40020470
 80055e8:	40020488 	.word	0x40020488
 80055ec:	400204a0 	.word	0x400204a0
 80055f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1c8      	bne.n	8005594 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4b83      	ldr	r3, [pc, #524]	; (800581c <HAL_DMA_Init+0x420>)
 800560e:	4013      	ands	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800561a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005626:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005632:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b04      	cmp	r3, #4
 8005646:	d107      	bne.n	8005658 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	4313      	orrs	r3, r2
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b28      	cmp	r3, #40	; 0x28
 800565e:	d903      	bls.n	8005668 <HAL_DMA_Init+0x26c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b2e      	cmp	r3, #46	; 0x2e
 8005666:	d91f      	bls.n	80056a8 <HAL_DMA_Init+0x2ac>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b3e      	cmp	r3, #62	; 0x3e
 800566e:	d903      	bls.n	8005678 <HAL_DMA_Init+0x27c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b42      	cmp	r3, #66	; 0x42
 8005676:	d917      	bls.n	80056a8 <HAL_DMA_Init+0x2ac>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b46      	cmp	r3, #70	; 0x46
 800567e:	d903      	bls.n	8005688 <HAL_DMA_Init+0x28c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b48      	cmp	r3, #72	; 0x48
 8005686:	d90f      	bls.n	80056a8 <HAL_DMA_Init+0x2ac>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b4e      	cmp	r3, #78	; 0x4e
 800568e:	d903      	bls.n	8005698 <HAL_DMA_Init+0x29c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b52      	cmp	r3, #82	; 0x52
 8005696:	d907      	bls.n	80056a8 <HAL_DMA_Init+0x2ac>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b73      	cmp	r3, #115	; 0x73
 800569e:	d905      	bls.n	80056ac <HAL_DMA_Init+0x2b0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b77      	cmp	r3, #119	; 0x77
 80056a6:	d801      	bhi.n	80056ac <HAL_DMA_Init+0x2b0>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_DMA_Init+0x2b2>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d117      	bne.n	8005714 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00e      	beq.n	8005714 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 fdca 	bl	8007290 <DMA_CheckFifoParam>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2240      	movs	r2, #64	; 0x40
 8005706:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e192      	b.n	8005a3a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 fd05 	bl	800712c <DMA_CalcBaseAndBitshift>
 8005722:	4603      	mov	r3, r0
 8005724:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	223f      	movs	r2, #63	; 0x3f
 8005730:	409a      	lsls	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	e0c8      	b.n	80058ca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a38      	ldr	r2, [pc, #224]	; (8005820 <HAL_DMA_Init+0x424>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a37      	ldr	r2, [pc, #220]	; (8005824 <HAL_DMA_Init+0x428>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <HAL_DMA_Init+0x42c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a34      	ldr	r2, [pc, #208]	; (800582c <HAL_DMA_Init+0x430>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a32      	ldr	r2, [pc, #200]	; (8005830 <HAL_DMA_Init+0x434>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a31      	ldr	r2, [pc, #196]	; (8005834 <HAL_DMA_Init+0x438>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2f      	ldr	r2, [pc, #188]	; (8005838 <HAL_DMA_Init+0x43c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_DMA_Init+0x38c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2e      	ldr	r2, [pc, #184]	; (800583c <HAL_DMA_Init+0x440>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <HAL_DMA_Init+0x390>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <HAL_DMA_Init+0x392>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8092 	beq.w	80058b8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_DMA_Init+0x424>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d021      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a20      	ldr	r2, [pc, #128]	; (8005824 <HAL_DMA_Init+0x428>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d01c      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_DMA_Init+0x42c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d017      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_DMA_Init+0x430>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d012      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <HAL_DMA_Init+0x434>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00d      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1a      	ldr	r2, [pc, #104]	; (8005834 <HAL_DMA_Init+0x438>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d008      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_DMA_Init+0x43c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <HAL_DMA_Init+0x3e6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_DMA_Init+0x440>)
 80057e0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4b10      	ldr	r3, [pc, #64]	; (8005840 <HAL_DMA_Init+0x444>)
 80057fe:	4013      	ands	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d01c      	beq.n	8005844 <HAL_DMA_Init+0x448>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d102      	bne.n	8005818 <HAL_DMA_Init+0x41c>
 8005812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005816:	e016      	b.n	8005846 <HAL_DMA_Init+0x44a>
 8005818:	2300      	movs	r3, #0
 800581a:	e014      	b.n	8005846 <HAL_DMA_Init+0x44a>
 800581c:	fe10803f 	.word	0xfe10803f
 8005820:	58025408 	.word	0x58025408
 8005824:	5802541c 	.word	0x5802541c
 8005828:	58025430 	.word	0x58025430
 800582c:	58025444 	.word	0x58025444
 8005830:	58025458 	.word	0x58025458
 8005834:	5802546c 	.word	0x5802546c
 8005838:	58025480 	.word	0x58025480
 800583c:	58025494 	.word	0x58025494
 8005840:	fffe000f 	.word	0xfffe000f
 8005844:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800584c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800585c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800586c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005874:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <HAL_DMA_Init+0x648>)
 800588c:	4413      	add	r3, r2
 800588e:	4a6e      	ldr	r2, [pc, #440]	; (8005a48 <HAL_DMA_Init+0x64c>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	009a      	lsls	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fc45 	bl	800712c <DMA_CalcBaseAndBitshift>
 80058a2:	4603      	mov	r3, r0
 80058a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2201      	movs	r2, #1
 80058b0:	409a      	lsls	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	e008      	b.n	80058ca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0b7      	b.n	8005a3a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a5f      	ldr	r2, [pc, #380]	; (8005a4c <HAL_DMA_Init+0x650>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d072      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <HAL_DMA_Init+0x654>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d06d      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5c      	ldr	r2, [pc, #368]	; (8005a54 <HAL_DMA_Init+0x658>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d068      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5a      	ldr	r2, [pc, #360]	; (8005a58 <HAL_DMA_Init+0x65c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d063      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a59      	ldr	r2, [pc, #356]	; (8005a5c <HAL_DMA_Init+0x660>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d05e      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_DMA_Init+0x664>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d059      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a56      	ldr	r2, [pc, #344]	; (8005a64 <HAL_DMA_Init+0x668>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d054      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a54      	ldr	r2, [pc, #336]	; (8005a68 <HAL_DMA_Init+0x66c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04f      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a53      	ldr	r2, [pc, #332]	; (8005a6c <HAL_DMA_Init+0x670>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d04a      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a51      	ldr	r2, [pc, #324]	; (8005a70 <HAL_DMA_Init+0x674>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d045      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a50      	ldr	r2, [pc, #320]	; (8005a74 <HAL_DMA_Init+0x678>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a4e      	ldr	r2, [pc, #312]	; (8005a78 <HAL_DMA_Init+0x67c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d03b      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a4d      	ldr	r2, [pc, #308]	; (8005a7c <HAL_DMA_Init+0x680>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d036      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a4b      	ldr	r2, [pc, #300]	; (8005a80 <HAL_DMA_Init+0x684>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d031      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <HAL_DMA_Init+0x688>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d02c      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a48      	ldr	r2, [pc, #288]	; (8005a88 <HAL_DMA_Init+0x68c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d027      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a47      	ldr	r2, [pc, #284]	; (8005a8c <HAL_DMA_Init+0x690>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a45      	ldr	r2, [pc, #276]	; (8005a90 <HAL_DMA_Init+0x694>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <HAL_DMA_Init+0x698>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a42      	ldr	r2, [pc, #264]	; (8005a98 <HAL_DMA_Init+0x69c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a41      	ldr	r2, [pc, #260]	; (8005a9c <HAL_DMA_Init+0x6a0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3f      	ldr	r2, [pc, #252]	; (8005aa0 <HAL_DMA_Init+0x6a4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3e      	ldr	r2, [pc, #248]	; (8005aa4 <HAL_DMA_Init+0x6a8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_Init+0x5be>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <HAL_DMA_Init+0x6ac>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <HAL_DMA_Init+0x5c2>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_DMA_Init+0x5c4>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d032      	beq.n	8005a2a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 fcdf 	bl	8007388 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b80      	cmp	r3, #128	; 0x80
 80059d0:	d102      	bne.n	80059d8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <HAL_DMA_Init+0x61c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d80c      	bhi.n	8005a18 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fd5c 	bl	80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e008      	b.n	8005a2a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	a7fdabf8 	.word	0xa7fdabf8
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494

08005aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e226      	b.n	8005f16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_DMA_Start_IT+0x2a>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e21f      	b.n	8005f16 <HAL_DMA_Start_IT+0x46a>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	f040 820a 	bne.w	8005f00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a68      	ldr	r2, [pc, #416]	; (8005ca0 <HAL_DMA_Start_IT+0x1f4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a66      	ldr	r2, [pc, #408]	; (8005ca4 <HAL_DMA_Start_IT+0x1f8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a65      	ldr	r2, [pc, #404]	; (8005ca8 <HAL_DMA_Start_IT+0x1fc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a63      	ldr	r2, [pc, #396]	; (8005cac <HAL_DMA_Start_IT+0x200>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a62      	ldr	r2, [pc, #392]	; (8005cb0 <HAL_DMA_Start_IT+0x204>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a60      	ldr	r2, [pc, #384]	; (8005cb4 <HAL_DMA_Start_IT+0x208>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <HAL_DMA_Start_IT+0x20c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5d      	ldr	r2, [pc, #372]	; (8005cbc <HAL_DMA_Start_IT+0x210>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_DMA_Start_IT+0x214>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5a      	ldr	r2, [pc, #360]	; (8005cc4 <HAL_DMA_Start_IT+0x218>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a59      	ldr	r2, [pc, #356]	; (8005cc8 <HAL_DMA_Start_IT+0x21c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_DMA_Start_IT+0x220>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a56      	ldr	r2, [pc, #344]	; (8005cd0 <HAL_DMA_Start_IT+0x224>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a54      	ldr	r2, [pc, #336]	; (8005cd4 <HAL_DMA_Start_IT+0x228>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a53      	ldr	r2, [pc, #332]	; (8005cd8 <HAL_DMA_Start_IT+0x22c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a51      	ldr	r2, [pc, #324]	; (8005cdc <HAL_DMA_Start_IT+0x230>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <HAL_DMA_Start_IT+0x100>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e007      	b.n	8005bbc <HAL_DMA_Start_IT+0x110>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f001 f906 	bl	8006dd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_DMA_Start_IT+0x1f4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d04a      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a33      	ldr	r2, [pc, #204]	; (8005ca4 <HAL_DMA_Start_IT+0x1f8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d045      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <HAL_DMA_Start_IT+0x1fc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d040      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a30      	ldr	r2, [pc, #192]	; (8005cac <HAL_DMA_Start_IT+0x200>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03b      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2e      	ldr	r2, [pc, #184]	; (8005cb0 <HAL_DMA_Start_IT+0x204>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d036      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <HAL_DMA_Start_IT+0x208>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d031      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2b      	ldr	r2, [pc, #172]	; (8005cb8 <HAL_DMA_Start_IT+0x20c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <HAL_DMA_Start_IT+0x210>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d027      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <HAL_DMA_Start_IT+0x214>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d022      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <HAL_DMA_Start_IT+0x218>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01d      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <HAL_DMA_Start_IT+0x21c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <HAL_DMA_Start_IT+0x220>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a22      	ldr	r2, [pc, #136]	; (8005cd0 <HAL_DMA_Start_IT+0x224>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a21      	ldr	r2, [pc, #132]	; (8005cd4 <HAL_DMA_Start_IT+0x228>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <HAL_DMA_Start_IT+0x22c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_DMA_Start_IT+0x230>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d101      	bne.n	8005c6c <HAL_DMA_Start_IT+0x1c0>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_DMA_Start_IT+0x1c2>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d036      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 021e 	bic.w	r2, r3, #30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0216 	orr.w	r2, r2, #22
 8005c84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03e      	beq.n	8005d0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e035      	b.n	8005d0c <HAL_DMA_Start_IT+0x260>
 8005ca0:	40020010 	.word	0x40020010
 8005ca4:	40020028 	.word	0x40020028
 8005ca8:	40020040 	.word	0x40020040
 8005cac:	40020058 	.word	0x40020058
 8005cb0:	40020070 	.word	0x40020070
 8005cb4:	40020088 	.word	0x40020088
 8005cb8:	400200a0 	.word	0x400200a0
 8005cbc:	400200b8 	.word	0x400200b8
 8005cc0:	40020410 	.word	0x40020410
 8005cc4:	40020428 	.word	0x40020428
 8005cc8:	40020440 	.word	0x40020440
 8005ccc:	40020458 	.word	0x40020458
 8005cd0:	40020470 	.word	0x40020470
 8005cd4:	40020488 	.word	0x40020488
 8005cd8:	400204a0 	.word	0x400204a0
 8005cdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 020e 	bic.w	r2, r3, #14
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 020a 	orr.w	r2, r2, #10
 8005cf2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0204 	orr.w	r2, r2, #4
 8005d0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a83      	ldr	r2, [pc, #524]	; (8005f20 <HAL_DMA_Start_IT+0x474>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d072      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a82      	ldr	r2, [pc, #520]	; (8005f24 <HAL_DMA_Start_IT+0x478>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d06d      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a80      	ldr	r2, [pc, #512]	; (8005f28 <HAL_DMA_Start_IT+0x47c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d068      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a7f      	ldr	r2, [pc, #508]	; (8005f2c <HAL_DMA_Start_IT+0x480>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d063      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a7d      	ldr	r2, [pc, #500]	; (8005f30 <HAL_DMA_Start_IT+0x484>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d05e      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a7c      	ldr	r2, [pc, #496]	; (8005f34 <HAL_DMA_Start_IT+0x488>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d059      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a7a      	ldr	r2, [pc, #488]	; (8005f38 <HAL_DMA_Start_IT+0x48c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d054      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a79      	ldr	r2, [pc, #484]	; (8005f3c <HAL_DMA_Start_IT+0x490>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04f      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a77      	ldr	r2, [pc, #476]	; (8005f40 <HAL_DMA_Start_IT+0x494>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a76      	ldr	r2, [pc, #472]	; (8005f44 <HAL_DMA_Start_IT+0x498>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a74      	ldr	r2, [pc, #464]	; (8005f48 <HAL_DMA_Start_IT+0x49c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a73      	ldr	r2, [pc, #460]	; (8005f4c <HAL_DMA_Start_IT+0x4a0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a71      	ldr	r2, [pc, #452]	; (8005f50 <HAL_DMA_Start_IT+0x4a4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a70      	ldr	r2, [pc, #448]	; (8005f54 <HAL_DMA_Start_IT+0x4a8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a6e      	ldr	r2, [pc, #440]	; (8005f58 <HAL_DMA_Start_IT+0x4ac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6d      	ldr	r2, [pc, #436]	; (8005f5c <HAL_DMA_Start_IT+0x4b0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6b      	ldr	r2, [pc, #428]	; (8005f60 <HAL_DMA_Start_IT+0x4b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a6a      	ldr	r2, [pc, #424]	; (8005f64 <HAL_DMA_Start_IT+0x4b8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a68      	ldr	r2, [pc, #416]	; (8005f68 <HAL_DMA_Start_IT+0x4bc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a67      	ldr	r2, [pc, #412]	; (8005f6c <HAL_DMA_Start_IT+0x4c0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a65      	ldr	r2, [pc, #404]	; (8005f70 <HAL_DMA_Start_IT+0x4c4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a64      	ldr	r2, [pc, #400]	; (8005f74 <HAL_DMA_Start_IT+0x4c8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a62      	ldr	r2, [pc, #392]	; (8005f78 <HAL_DMA_Start_IT+0x4cc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a61      	ldr	r2, [pc, #388]	; (8005f7c <HAL_DMA_Start_IT+0x4d0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <HAL_DMA_Start_IT+0x354>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_DMA_Start_IT+0x356>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01a      	beq.n	8005e3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <HAL_DMA_Start_IT+0x474>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a36      	ldr	r2, [pc, #216]	; (8005f24 <HAL_DMA_Start_IT+0x478>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <HAL_DMA_Start_IT+0x47c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a33      	ldr	r2, [pc, #204]	; (8005f2c <HAL_DMA_Start_IT+0x480>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <HAL_DMA_Start_IT+0x484>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_DMA_Start_IT+0x488>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <HAL_DMA_Start_IT+0x48c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2d      	ldr	r2, [pc, #180]	; (8005f3c <HAL_DMA_Start_IT+0x490>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_DMA_Start_IT+0x494>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_DMA_Start_IT+0x498>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a28      	ldr	r2, [pc, #160]	; (8005f48 <HAL_DMA_Start_IT+0x49c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <HAL_DMA_Start_IT+0x4a0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <HAL_DMA_Start_IT+0x4a4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <HAL_DMA_Start_IT+0x4a8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <HAL_DMA_Start_IT+0x4ac>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_DMA_Start_IT+0x4b0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <HAL_DMA_Start_IT+0x442>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e012      	b.n	8005f14 <HAL_DMA_Start_IT+0x468>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e009      	b.n	8005f14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	58025408 	.word	0x58025408
 8005f64:	5802541c 	.word	0x5802541c
 8005f68:	58025430 	.word	0x58025430
 8005f6c:	58025444 	.word	0x58025444
 8005f70:	58025458 	.word	0x58025458
 8005f74:	5802546c 	.word	0x5802546c
 8005f78:	58025480 	.word	0x58025480
 8005f7c:	58025494 	.word	0x58025494

08005f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f8c:	4b67      	ldr	r3, [pc, #412]	; (800612c <HAL_DMA_IRQHandler+0x1ac>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a67      	ldr	r2, [pc, #412]	; (8006130 <HAL_DMA_IRQHandler+0x1b0>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a9b      	lsrs	r3, r3, #10
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a5f      	ldr	r2, [pc, #380]	; (8006134 <HAL_DMA_IRQHandler+0x1b4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	; (8006138 <HAL_DMA_IRQHandler+0x1b8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	; (800613c <HAL_DMA_IRQHandler+0x1bc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5a      	ldr	r2, [pc, #360]	; (8006140 <HAL_DMA_IRQHandler+0x1c0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a59      	ldr	r2, [pc, #356]	; (8006144 <HAL_DMA_IRQHandler+0x1c4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_DMA_IRQHandler+0x1c8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_DMA_IRQHandler+0x1cc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a54      	ldr	r2, [pc, #336]	; (8006150 <HAL_DMA_IRQHandler+0x1d0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a53      	ldr	r2, [pc, #332]	; (8006154 <HAL_DMA_IRQHandler+0x1d4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a51      	ldr	r2, [pc, #324]	; (8006158 <HAL_DMA_IRQHandler+0x1d8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a50      	ldr	r2, [pc, #320]	; (800615c <HAL_DMA_IRQHandler+0x1dc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a4e      	ldr	r2, [pc, #312]	; (8006160 <HAL_DMA_IRQHandler+0x1e0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4d      	ldr	r2, [pc, #308]	; (8006164 <HAL_DMA_IRQHandler+0x1e4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a4b      	ldr	r2, [pc, #300]	; (8006168 <HAL_DMA_IRQHandler+0x1e8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <HAL_DMA_IRQHandler+0x1ec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a48      	ldr	r2, [pc, #288]	; (8006170 <HAL_DMA_IRQHandler+0x1f0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_DMA_IRQHandler+0xd6>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <HAL_DMA_IRQHandler+0xd8>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 842b 	beq.w	80068b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2208      	movs	r2, #8
 8006068:	409a      	lsls	r2, r3
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80a2 	beq.w	80061b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2e      	ldr	r2, [pc, #184]	; (8006134 <HAL_DMA_IRQHandler+0x1b4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2d      	ldr	r2, [pc, #180]	; (8006138 <HAL_DMA_IRQHandler+0x1b8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <HAL_DMA_IRQHandler+0x1bc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <HAL_DMA_IRQHandler+0x1c0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a28      	ldr	r2, [pc, #160]	; (8006144 <HAL_DMA_IRQHandler+0x1c4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a27      	ldr	r2, [pc, #156]	; (8006148 <HAL_DMA_IRQHandler+0x1c8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_DMA_IRQHandler+0x1cc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a24      	ldr	r2, [pc, #144]	; (8006150 <HAL_DMA_IRQHandler+0x1d0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <HAL_DMA_IRQHandler+0x1d4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_DMA_IRQHandler+0x1d8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_DMA_IRQHandler+0x1dc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_DMA_IRQHandler+0x1e0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_DMA_IRQHandler+0x1e4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_DMA_IRQHandler+0x1e8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_DMA_IRQHandler+0x1ec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	; (8006170 <HAL_DMA_IRQHandler+0x1f0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d12f      	bne.n	8006174 <HAL_DMA_IRQHandler+0x1f4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e02e      	b.n	8006188 <HAL_DMA_IRQHandler+0x208>
 800612a:	bf00      	nop
 800612c:	24000000 	.word	0x24000000
 8006130:	1b4e81b5 	.word	0x1b4e81b5
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2208      	movs	r2, #8
 80061a6:	409a      	lsls	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d06e      	beq.n	80062ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a69      	ldr	r2, [pc, #420]	; (8006378 <HAL_DMA_IRQHandler+0x3f8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a67      	ldr	r2, [pc, #412]	; (800637c <HAL_DMA_IRQHandler+0x3fc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a66      	ldr	r2, [pc, #408]	; (8006380 <HAL_DMA_IRQHandler+0x400>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a64      	ldr	r2, [pc, #400]	; (8006384 <HAL_DMA_IRQHandler+0x404>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a63      	ldr	r2, [pc, #396]	; (8006388 <HAL_DMA_IRQHandler+0x408>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a61      	ldr	r2, [pc, #388]	; (800638c <HAL_DMA_IRQHandler+0x40c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a60      	ldr	r2, [pc, #384]	; (8006390 <HAL_DMA_IRQHandler+0x410>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5e      	ldr	r2, [pc, #376]	; (8006394 <HAL_DMA_IRQHandler+0x414>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a5d      	ldr	r2, [pc, #372]	; (8006398 <HAL_DMA_IRQHandler+0x418>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a5b      	ldr	r2, [pc, #364]	; (800639c <HAL_DMA_IRQHandler+0x41c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5a      	ldr	r2, [pc, #360]	; (80063a0 <HAL_DMA_IRQHandler+0x420>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a58      	ldr	r2, [pc, #352]	; (80063a4 <HAL_DMA_IRQHandler+0x424>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a57      	ldr	r2, [pc, #348]	; (80063a8 <HAL_DMA_IRQHandler+0x428>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a55      	ldr	r2, [pc, #340]	; (80063ac <HAL_DMA_IRQHandler+0x42c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a54      	ldr	r2, [pc, #336]	; (80063b0 <HAL_DMA_IRQHandler+0x430>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <HAL_DMA_IRQHandler+0x434>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10a      	bne.n	8006284 <HAL_DMA_IRQHandler+0x304>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e003      	b.n	800628c <HAL_DMA_IRQHandler+0x30c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2201      	movs	r2, #1
 800629a:	409a      	lsls	r2, r3
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f043 0202 	orr.w	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	2204      	movs	r2, #4
 80062b6:	409a      	lsls	r2, r3
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 808f 	beq.w	80063e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2c      	ldr	r2, [pc, #176]	; (8006378 <HAL_DMA_IRQHandler+0x3f8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2a      	ldr	r2, [pc, #168]	; (800637c <HAL_DMA_IRQHandler+0x3fc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a29      	ldr	r2, [pc, #164]	; (8006380 <HAL_DMA_IRQHandler+0x400>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a27      	ldr	r2, [pc, #156]	; (8006384 <HAL_DMA_IRQHandler+0x404>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a26      	ldr	r2, [pc, #152]	; (8006388 <HAL_DMA_IRQHandler+0x408>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a24      	ldr	r2, [pc, #144]	; (800638c <HAL_DMA_IRQHandler+0x40c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a23      	ldr	r2, [pc, #140]	; (8006390 <HAL_DMA_IRQHandler+0x410>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a21      	ldr	r2, [pc, #132]	; (8006394 <HAL_DMA_IRQHandler+0x414>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a20      	ldr	r2, [pc, #128]	; (8006398 <HAL_DMA_IRQHandler+0x418>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1e      	ldr	r2, [pc, #120]	; (800639c <HAL_DMA_IRQHandler+0x41c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <HAL_DMA_IRQHandler+0x420>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_DMA_IRQHandler+0x424>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_DMA_IRQHandler+0x428>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_DMA_IRQHandler+0x42c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_DMA_IRQHandler+0x430>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_DMA_IRQHandler+0x434>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d12a      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x438>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e023      	b.n	80063c0 <HAL_DMA_IRQHandler+0x440>
 8006378:	40020010 	.word	0x40020010
 800637c:	40020028 	.word	0x40020028
 8006380:	40020040 	.word	0x40020040
 8006384:	40020058 	.word	0x40020058
 8006388:	40020070 	.word	0x40020070
 800638c:	40020088 	.word	0x40020088
 8006390:	400200a0 	.word	0x400200a0
 8006394:	400200b8 	.word	0x400200b8
 8006398:	40020410 	.word	0x40020410
 800639c:	40020428 	.word	0x40020428
 80063a0:	40020440 	.word	0x40020440
 80063a4:	40020458 	.word	0x40020458
 80063a8:	40020470 	.word	0x40020470
 80063ac:	40020488 	.word	0x40020488
 80063b0:	400204a0 	.word	0x400204a0
 80063b4:	400204b8 	.word	0x400204b8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	2204      	movs	r2, #4
 80063ce:	409a      	lsls	r2, r3
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	f043 0204 	orr.w	r2, r3, #4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2210      	movs	r2, #16
 80063ea:	409a      	lsls	r2, r3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a6 	beq.w	8006542 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a85      	ldr	r2, [pc, #532]	; (8006610 <HAL_DMA_IRQHandler+0x690>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a83      	ldr	r2, [pc, #524]	; (8006614 <HAL_DMA_IRQHandler+0x694>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a82      	ldr	r2, [pc, #520]	; (8006618 <HAL_DMA_IRQHandler+0x698>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a80      	ldr	r2, [pc, #512]	; (800661c <HAL_DMA_IRQHandler+0x69c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a7f      	ldr	r2, [pc, #508]	; (8006620 <HAL_DMA_IRQHandler+0x6a0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a7d      	ldr	r2, [pc, #500]	; (8006624 <HAL_DMA_IRQHandler+0x6a4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7c      	ldr	r2, [pc, #496]	; (8006628 <HAL_DMA_IRQHandler+0x6a8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a7a      	ldr	r2, [pc, #488]	; (800662c <HAL_DMA_IRQHandler+0x6ac>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a79      	ldr	r2, [pc, #484]	; (8006630 <HAL_DMA_IRQHandler+0x6b0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a77      	ldr	r2, [pc, #476]	; (8006634 <HAL_DMA_IRQHandler+0x6b4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a76      	ldr	r2, [pc, #472]	; (8006638 <HAL_DMA_IRQHandler+0x6b8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a74      	ldr	r2, [pc, #464]	; (800663c <HAL_DMA_IRQHandler+0x6bc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a73      	ldr	r2, [pc, #460]	; (8006640 <HAL_DMA_IRQHandler+0x6c0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a71      	ldr	r2, [pc, #452]	; (8006644 <HAL_DMA_IRQHandler+0x6c4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a70      	ldr	r2, [pc, #448]	; (8006648 <HAL_DMA_IRQHandler+0x6c8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a6e      	ldr	r2, [pc, #440]	; (800664c <HAL_DMA_IRQHandler+0x6cc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d10a      	bne.n	80064ac <HAL_DMA_IRQHandler+0x52c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e009      	b.n	80064c0 <HAL_DMA_IRQHandler+0x540>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d03e      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2210      	movs	r2, #16
 80064ce:	409a      	lsls	r2, r3
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d108      	bne.n	8006502 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d024      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	4798      	blx	r3
 8006500:	e01f      	b.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01b      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
 8006512:	e016      	b.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0208 	bic.w	r2, r2, #8
 8006530:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2220      	movs	r2, #32
 800654c:	409a      	lsls	r2, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8110 	beq.w	8006778 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2c      	ldr	r2, [pc, #176]	; (8006610 <HAL_DMA_IRQHandler+0x690>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d04a      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2b      	ldr	r2, [pc, #172]	; (8006614 <HAL_DMA_IRQHandler+0x694>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d045      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <HAL_DMA_IRQHandler+0x698>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d040      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a28      	ldr	r2, [pc, #160]	; (800661c <HAL_DMA_IRQHandler+0x69c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d03b      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_DMA_IRQHandler+0x6a0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d036      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a25      	ldr	r2, [pc, #148]	; (8006624 <HAL_DMA_IRQHandler+0x6a4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d031      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a23      	ldr	r2, [pc, #140]	; (8006628 <HAL_DMA_IRQHandler+0x6a8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d02c      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a22      	ldr	r2, [pc, #136]	; (800662c <HAL_DMA_IRQHandler+0x6ac>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d027      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a20      	ldr	r2, [pc, #128]	; (8006630 <HAL_DMA_IRQHandler+0x6b0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_DMA_IRQHandler+0x6b4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d01d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_DMA_IRQHandler+0x6b8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_DMA_IRQHandler+0x6bc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1a      	ldr	r2, [pc, #104]	; (8006640 <HAL_DMA_IRQHandler+0x6c0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_DMA_IRQHandler+0x6c4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_DMA_IRQHandler+0x6c8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a16      	ldr	r2, [pc, #88]	; (800664c <HAL_DMA_IRQHandler+0x6cc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d12b      	bne.n	8006650 <HAL_DMA_IRQHandler+0x6d0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	e02a      	b.n	8006664 <HAL_DMA_IRQHandler+0x6e4>
 800660e:	bf00      	nop
 8006610:	40020010 	.word	0x40020010
 8006614:	40020028 	.word	0x40020028
 8006618:	40020040 	.word	0x40020040
 800661c:	40020058 	.word	0x40020058
 8006620:	40020070 	.word	0x40020070
 8006624:	40020088 	.word	0x40020088
 8006628:	400200a0 	.word	0x400200a0
 800662c:	400200b8 	.word	0x400200b8
 8006630:	40020410 	.word	0x40020410
 8006634:	40020428 	.word	0x40020428
 8006638:	40020440 	.word	0x40020440
 800663c:	40020458 	.word	0x40020458
 8006640:	40020470 	.word	0x40020470
 8006644:	40020488 	.word	0x40020488
 8006648:	400204a0 	.word	0x400204a0
 800664c:	400204b8 	.word	0x400204b8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf14      	ite	ne
 800665e:	2301      	movne	r3, #1
 8006660:	2300      	moveq	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8087 	beq.w	8006778 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2220      	movs	r2, #32
 8006674:	409a      	lsls	r2, r3
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b04      	cmp	r3, #4
 8006684:	d139      	bne.n	80066fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0216 	bic.w	r2, r2, #22
 8006694:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_DMA_IRQHandler+0x736>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0208 	bic.w	r2, r2, #8
 80066c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	223f      	movs	r2, #63	; 0x3f
 80066d0:	409a      	lsls	r2, r3
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 834a 	beq.w	8006d84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
          }
          return;
 80066f8:	e344      	b.n	8006d84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d018      	beq.n	800673a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02c      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
 8006726:	e027      	b.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d023      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	4798      	blx	r3
 8006738:	e01e      	b.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0210 	bic.w	r2, r2, #16
 8006756:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8306 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8088 	beq.w	80068a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2204      	movs	r2, #4
 8006794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a7a      	ldr	r2, [pc, #488]	; (8006988 <HAL_DMA_IRQHandler+0xa08>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d04a      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a79      	ldr	r2, [pc, #484]	; (800698c <HAL_DMA_IRQHandler+0xa0c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d045      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a77      	ldr	r2, [pc, #476]	; (8006990 <HAL_DMA_IRQHandler+0xa10>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d040      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a76      	ldr	r2, [pc, #472]	; (8006994 <HAL_DMA_IRQHandler+0xa14>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d03b      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a74      	ldr	r2, [pc, #464]	; (8006998 <HAL_DMA_IRQHandler+0xa18>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d036      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	; (800699c <HAL_DMA_IRQHandler+0xa1c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d031      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a71      	ldr	r2, [pc, #452]	; (80069a0 <HAL_DMA_IRQHandler+0xa20>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d02c      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a70      	ldr	r2, [pc, #448]	; (80069a4 <HAL_DMA_IRQHandler+0xa24>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d027      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6e      	ldr	r2, [pc, #440]	; (80069a8 <HAL_DMA_IRQHandler+0xa28>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6d      	ldr	r2, [pc, #436]	; (80069ac <HAL_DMA_IRQHandler+0xa2c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d01d      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6b      	ldr	r2, [pc, #428]	; (80069b0 <HAL_DMA_IRQHandler+0xa30>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6a      	ldr	r2, [pc, #424]	; (80069b4 <HAL_DMA_IRQHandler+0xa34>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a68      	ldr	r2, [pc, #416]	; (80069b8 <HAL_DMA_IRQHandler+0xa38>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a67      	ldr	r2, [pc, #412]	; (80069bc <HAL_DMA_IRQHandler+0xa3c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <HAL_DMA_IRQHandler+0xa40>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a64      	ldr	r2, [pc, #400]	; (80069c4 <HAL_DMA_IRQHandler+0xa44>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d108      	bne.n	800684a <HAL_DMA_IRQHandler+0x8ca>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e007      	b.n	800685a <HAL_DMA_IRQHandler+0x8da>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0201 	bic.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d307      	bcc.n	8006876 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f2      	bne.n	800685a <HAL_DMA_IRQHandler+0x8da>
 8006874:	e000      	b.n	8006878 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006876:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2203      	movs	r2, #3
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800688e:	e003      	b.n	8006898 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8272 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	e26c      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a43      	ldr	r2, [pc, #268]	; (80069c8 <HAL_DMA_IRQHandler+0xa48>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a42      	ldr	r2, [pc, #264]	; (80069cc <HAL_DMA_IRQHandler+0xa4c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a40      	ldr	r2, [pc, #256]	; (80069d0 <HAL_DMA_IRQHandler+0xa50>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <HAL_DMA_IRQHandler+0xa54>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3d      	ldr	r2, [pc, #244]	; (80069d8 <HAL_DMA_IRQHandler+0xa58>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3c      	ldr	r2, [pc, #240]	; (80069dc <HAL_DMA_IRQHandler+0xa5c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3a      	ldr	r2, [pc, #232]	; (80069e0 <HAL_DMA_IRQHandler+0xa60>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_IRQHandler+0x984>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a39      	ldr	r2, [pc, #228]	; (80069e4 <HAL_DMA_IRQHandler+0xa64>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_DMA_IRQHandler+0x988>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_DMA_IRQHandler+0x98a>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 823f 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2204      	movs	r2, #4
 8006922:	409a      	lsls	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80cd 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xb48>
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80c7 	beq.w	8006ac8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2204      	movs	r2, #4
 8006944:	409a      	lsls	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d049      	beq.n	80069e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8210 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006970:	e20a      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8206 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006984:	e200      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d160      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7f      	ldr	r2, [pc, #508]	; (8006bf4 <HAL_DMA_IRQHandler+0xc74>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04a      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a7d      	ldr	r2, [pc, #500]	; (8006bf8 <HAL_DMA_IRQHandler+0xc78>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d045      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a7c      	ldr	r2, [pc, #496]	; (8006bfc <HAL_DMA_IRQHandler+0xc7c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d040      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7a      	ldr	r2, [pc, #488]	; (8006c00 <HAL_DMA_IRQHandler+0xc80>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d03b      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a79      	ldr	r2, [pc, #484]	; (8006c04 <HAL_DMA_IRQHandler+0xc84>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d036      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a77      	ldr	r2, [pc, #476]	; (8006c08 <HAL_DMA_IRQHandler+0xc88>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d031      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a76      	ldr	r2, [pc, #472]	; (8006c0c <HAL_DMA_IRQHandler+0xc8c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d02c      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a74      	ldr	r2, [pc, #464]	; (8006c10 <HAL_DMA_IRQHandler+0xc90>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d027      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a73      	ldr	r2, [pc, #460]	; (8006c14 <HAL_DMA_IRQHandler+0xc94>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d022      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a71      	ldr	r2, [pc, #452]	; (8006c18 <HAL_DMA_IRQHandler+0xc98>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01d      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a70      	ldr	r2, [pc, #448]	; (8006c1c <HAL_DMA_IRQHandler+0xc9c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d018      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6e      	ldr	r2, [pc, #440]	; (8006c20 <HAL_DMA_IRQHandler+0xca0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6d      	ldr	r2, [pc, #436]	; (8006c24 <HAL_DMA_IRQHandler+0xca4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6b      	ldr	r2, [pc, #428]	; (8006c28 <HAL_DMA_IRQHandler+0xca8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a6a      	ldr	r2, [pc, #424]	; (8006c2c <HAL_DMA_IRQHandler+0xcac>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xb12>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a68      	ldr	r2, [pc, #416]	; (8006c30 <HAL_DMA_IRQHandler+0xcb0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <HAL_DMA_IRQHandler+0xb24>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0208 	bic.w	r2, r2, #8
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e007      	b.n	8006ab4 <HAL_DMA_IRQHandler+0xb34>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0204 	bic.w	r2, r2, #4
 8006ab2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8165 	beq.w	8006d88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac6:	e15f      	b.n	8006d88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80c5 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xce8>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80bf 	beq.w	8006c68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2202      	movs	r2, #2
 8006af4:	409a      	lsls	r2, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d018      	beq.n	8006b36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 813a 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b20:	e134      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8130 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b34:	e12a      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8089 	bne.w	8006c54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2b      	ldr	r2, [pc, #172]	; (8006bf4 <HAL_DMA_IRQHandler+0xc74>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d04a      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a29      	ldr	r2, [pc, #164]	; (8006bf8 <HAL_DMA_IRQHandler+0xc78>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d045      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <HAL_DMA_IRQHandler+0xc7c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d040      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <HAL_DMA_IRQHandler+0xc80>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d03b      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <HAL_DMA_IRQHandler+0xc84>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d036      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <HAL_DMA_IRQHandler+0xc88>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d031      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <HAL_DMA_IRQHandler+0xc8c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d02c      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <HAL_DMA_IRQHandler+0xc90>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d027      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_DMA_IRQHandler+0xc94>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <HAL_DMA_IRQHandler+0xc98>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <HAL_DMA_IRQHandler+0xc9c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1a      	ldr	r2, [pc, #104]	; (8006c20 <HAL_DMA_IRQHandler+0xca0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <HAL_DMA_IRQHandler+0xca4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <HAL_DMA_IRQHandler+0xca8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a16      	ldr	r2, [pc, #88]	; (8006c2c <HAL_DMA_IRQHandler+0xcac>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_DMA_IRQHandler+0xc62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <HAL_DMA_IRQHandler+0xcb0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d128      	bne.n	8006c34 <HAL_DMA_IRQHandler+0xcb4>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0214 	bic.w	r2, r2, #20
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e027      	b.n	8006c44 <HAL_DMA_IRQHandler+0xcc4>
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 020a 	bic.w	r2, r2, #10
 8006c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8097 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c66:	e091      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2208      	movs	r2, #8
 8006c72:	409a      	lsls	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8088 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8082 	beq.w	8006d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a41      	ldr	r2, [pc, #260]	; (8006d94 <HAL_DMA_IRQHandler+0xe14>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <HAL_DMA_IRQHandler+0xe18>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3e      	ldr	r2, [pc, #248]	; (8006d9c <HAL_DMA_IRQHandler+0xe1c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_DMA_IRQHandler+0xe20>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3b      	ldr	r2, [pc, #236]	; (8006da4 <HAL_DMA_IRQHandler+0xe24>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a39      	ldr	r2, [pc, #228]	; (8006da8 <HAL_DMA_IRQHandler+0xe28>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a38      	ldr	r2, [pc, #224]	; (8006dac <HAL_DMA_IRQHandler+0xe2c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <HAL_DMA_IRQHandler+0xe30>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a35      	ldr	r2, [pc, #212]	; (8006db4 <HAL_DMA_IRQHandler+0xe34>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_DMA_IRQHandler+0xe38>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a32      	ldr	r2, [pc, #200]	; (8006dbc <HAL_DMA_IRQHandler+0xe3c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <HAL_DMA_IRQHandler+0xe40>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2f      	ldr	r2, [pc, #188]	; (8006dc4 <HAL_DMA_IRQHandler+0xe44>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2d      	ldr	r2, [pc, #180]	; (8006dc8 <HAL_DMA_IRQHandler+0xe48>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2c      	ldr	r2, [pc, #176]	; (8006dcc <HAL_DMA_IRQHandler+0xe4c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_IRQHandler+0xdaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <HAL_DMA_IRQHandler+0xe50>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xdbc>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 021c 	bic.w	r2, r2, #28
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <HAL_DMA_IRQHandler+0xdcc>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 020e 	bic.w	r2, r2, #14
 8006d4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2201      	movs	r2, #1
 8006d56:	409a      	lsls	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	e004      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8

08006dd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a7f      	ldr	r2, [pc, #508]	; (8006ff0 <DMA_SetConfig+0x21c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d072      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7d      	ldr	r2, [pc, #500]	; (8006ff4 <DMA_SetConfig+0x220>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d06d      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7c      	ldr	r2, [pc, #496]	; (8006ff8 <DMA_SetConfig+0x224>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d068      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a7a      	ldr	r2, [pc, #488]	; (8006ffc <DMA_SetConfig+0x228>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d063      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a79      	ldr	r2, [pc, #484]	; (8007000 <DMA_SetConfig+0x22c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d05e      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a77      	ldr	r2, [pc, #476]	; (8007004 <DMA_SetConfig+0x230>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d059      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a76      	ldr	r2, [pc, #472]	; (8007008 <DMA_SetConfig+0x234>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d054      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a74      	ldr	r2, [pc, #464]	; (800700c <DMA_SetConfig+0x238>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d04f      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a73      	ldr	r2, [pc, #460]	; (8007010 <DMA_SetConfig+0x23c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d04a      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a71      	ldr	r2, [pc, #452]	; (8007014 <DMA_SetConfig+0x240>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d045      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a70      	ldr	r2, [pc, #448]	; (8007018 <DMA_SetConfig+0x244>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d040      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a6e      	ldr	r2, [pc, #440]	; (800701c <DMA_SetConfig+0x248>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d03b      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a6d      	ldr	r2, [pc, #436]	; (8007020 <DMA_SetConfig+0x24c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d036      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a6b      	ldr	r2, [pc, #428]	; (8007024 <DMA_SetConfig+0x250>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d031      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a6a      	ldr	r2, [pc, #424]	; (8007028 <DMA_SetConfig+0x254>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d02c      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a68      	ldr	r2, [pc, #416]	; (800702c <DMA_SetConfig+0x258>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d027      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a67      	ldr	r2, [pc, #412]	; (8007030 <DMA_SetConfig+0x25c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d022      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a65      	ldr	r2, [pc, #404]	; (8007034 <DMA_SetConfig+0x260>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01d      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a64      	ldr	r2, [pc, #400]	; (8007038 <DMA_SetConfig+0x264>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a62      	ldr	r2, [pc, #392]	; (800703c <DMA_SetConfig+0x268>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a61      	ldr	r2, [pc, #388]	; (8007040 <DMA_SetConfig+0x26c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5f      	ldr	r2, [pc, #380]	; (8007044 <DMA_SetConfig+0x270>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5e      	ldr	r2, [pc, #376]	; (8007048 <DMA_SetConfig+0x274>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a5c      	ldr	r2, [pc, #368]	; (800704c <DMA_SetConfig+0x278>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d101      	bne.n	8006ee2 <DMA_SetConfig+0x10e>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <DMA_SetConfig+0x110>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ef0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a39      	ldr	r2, [pc, #228]	; (8006ff0 <DMA_SetConfig+0x21c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d04a      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a38      	ldr	r2, [pc, #224]	; (8006ff4 <DMA_SetConfig+0x220>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d045      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a36      	ldr	r2, [pc, #216]	; (8006ff8 <DMA_SetConfig+0x224>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d040      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a35      	ldr	r2, [pc, #212]	; (8006ffc <DMA_SetConfig+0x228>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d03b      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a33      	ldr	r2, [pc, #204]	; (8007000 <DMA_SetConfig+0x22c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d036      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a32      	ldr	r2, [pc, #200]	; (8007004 <DMA_SetConfig+0x230>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d031      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a30      	ldr	r2, [pc, #192]	; (8007008 <DMA_SetConfig+0x234>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d02c      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2f      	ldr	r2, [pc, #188]	; (800700c <DMA_SetConfig+0x238>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d027      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <DMA_SetConfig+0x23c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d022      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2c      	ldr	r2, [pc, #176]	; (8007014 <DMA_SetConfig+0x240>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d01d      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <DMA_SetConfig+0x244>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d018      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a29      	ldr	r2, [pc, #164]	; (800701c <DMA_SetConfig+0x248>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a27      	ldr	r2, [pc, #156]	; (8007020 <DMA_SetConfig+0x24c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00e      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	; (8007024 <DMA_SetConfig+0x250>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d009      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a24      	ldr	r2, [pc, #144]	; (8007028 <DMA_SetConfig+0x254>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <DMA_SetConfig+0x1d0>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a23      	ldr	r2, [pc, #140]	; (800702c <DMA_SetConfig+0x258>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d101      	bne.n	8006fa8 <DMA_SetConfig+0x1d4>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <DMA_SetConfig+0x1d6>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d059      	beq.n	8007062 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	223f      	movs	r2, #63	; 0x3f
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fcc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d138      	bne.n	8007050 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fee:	e086      	b.n	80070fe <DMA_SetConfig+0x32a>
 8006ff0:	40020010 	.word	0x40020010
 8006ff4:	40020028 	.word	0x40020028
 8006ff8:	40020040 	.word	0x40020040
 8006ffc:	40020058 	.word	0x40020058
 8007000:	40020070 	.word	0x40020070
 8007004:	40020088 	.word	0x40020088
 8007008:	400200a0 	.word	0x400200a0
 800700c:	400200b8 	.word	0x400200b8
 8007010:	40020410 	.word	0x40020410
 8007014:	40020428 	.word	0x40020428
 8007018:	40020440 	.word	0x40020440
 800701c:	40020458 	.word	0x40020458
 8007020:	40020470 	.word	0x40020470
 8007024:	40020488 	.word	0x40020488
 8007028:	400204a0 	.word	0x400204a0
 800702c:	400204b8 	.word	0x400204b8
 8007030:	58025408 	.word	0x58025408
 8007034:	5802541c 	.word	0x5802541c
 8007038:	58025430 	.word	0x58025430
 800703c:	58025444 	.word	0x58025444
 8007040:	58025458 	.word	0x58025458
 8007044:	5802546c 	.word	0x5802546c
 8007048:	58025480 	.word	0x58025480
 800704c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
}
 8007060:	e04d      	b.n	80070fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a29      	ldr	r2, [pc, #164]	; (800710c <DMA_SetConfig+0x338>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d022      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a27      	ldr	r2, [pc, #156]	; (8007110 <DMA_SetConfig+0x33c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01d      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <DMA_SetConfig+0x340>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d018      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a24      	ldr	r2, [pc, #144]	; (8007118 <DMA_SetConfig+0x344>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d013      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a23      	ldr	r2, [pc, #140]	; (800711c <DMA_SetConfig+0x348>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <DMA_SetConfig+0x34c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a20      	ldr	r2, [pc, #128]	; (8007124 <DMA_SetConfig+0x350>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <DMA_SetConfig+0x2de>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <DMA_SetConfig+0x354>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d101      	bne.n	80070b6 <DMA_SetConfig+0x2e2>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <DMA_SetConfig+0x2e4>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d108      	bne.n	80070ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	60da      	str	r2, [r3, #12]
}
 80070ec:	e007      	b.n	80070fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	60da      	str	r2, [r3, #12]
}
 80070fe:	bf00      	nop
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	58025408 	.word	0x58025408
 8007110:	5802541c 	.word	0x5802541c
 8007114:	58025430 	.word	0x58025430
 8007118:	58025444 	.word	0x58025444
 800711c:	58025458 	.word	0x58025458
 8007120:	5802546c 	.word	0x5802546c
 8007124:	58025480 	.word	0x58025480
 8007128:	58025494 	.word	0x58025494

0800712c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a42      	ldr	r2, [pc, #264]	; (8007244 <DMA_CalcBaseAndBitshift+0x118>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d04a      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a41      	ldr	r2, [pc, #260]	; (8007248 <DMA_CalcBaseAndBitshift+0x11c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d045      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3f      	ldr	r2, [pc, #252]	; (800724c <DMA_CalcBaseAndBitshift+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d040      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3e      	ldr	r2, [pc, #248]	; (8007250 <DMA_CalcBaseAndBitshift+0x124>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d03b      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3c      	ldr	r2, [pc, #240]	; (8007254 <DMA_CalcBaseAndBitshift+0x128>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d036      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3b      	ldr	r2, [pc, #236]	; (8007258 <DMA_CalcBaseAndBitshift+0x12c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d031      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a39      	ldr	r2, [pc, #228]	; (800725c <DMA_CalcBaseAndBitshift+0x130>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02c      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a38      	ldr	r2, [pc, #224]	; (8007260 <DMA_CalcBaseAndBitshift+0x134>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d027      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a36      	ldr	r2, [pc, #216]	; (8007264 <DMA_CalcBaseAndBitshift+0x138>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a35      	ldr	r2, [pc, #212]	; (8007268 <DMA_CalcBaseAndBitshift+0x13c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d01d      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a33      	ldr	r2, [pc, #204]	; (800726c <DMA_CalcBaseAndBitshift+0x140>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a32      	ldr	r2, [pc, #200]	; (8007270 <DMA_CalcBaseAndBitshift+0x144>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a30      	ldr	r2, [pc, #192]	; (8007274 <DMA_CalcBaseAndBitshift+0x148>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2f      	ldr	r2, [pc, #188]	; (8007278 <DMA_CalcBaseAndBitshift+0x14c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2d      	ldr	r2, [pc, #180]	; (800727c <DMA_CalcBaseAndBitshift+0x150>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <DMA_CalcBaseAndBitshift+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2c      	ldr	r2, [pc, #176]	; (8007280 <DMA_CalcBaseAndBitshift+0x154>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d101      	bne.n	80071d8 <DMA_CalcBaseAndBitshift+0xac>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <DMA_CalcBaseAndBitshift+0xae>
 80071d8:	2300      	movs	r3, #0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d024      	beq.n	8007228 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	3b10      	subs	r3, #16
 80071e6:	4a27      	ldr	r2, [pc, #156]	; (8007284 <DMA_CalcBaseAndBitshift+0x158>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	4a24      	ldr	r2, [pc, #144]	; (8007288 <DMA_CalcBaseAndBitshift+0x15c>)
 80071f8:	5cd3      	ldrb	r3, [r2, r3]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d908      	bls.n	8007218 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	4b1f      	ldr	r3, [pc, #124]	; (800728c <DMA_CalcBaseAndBitshift+0x160>)
 800720e:	4013      	ands	r3, r2
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	659a      	str	r2, [r3, #88]	; 0x58
 8007216:	e00d      	b.n	8007234 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	4b1b      	ldr	r3, [pc, #108]	; (800728c <DMA_CalcBaseAndBitshift+0x160>)
 8007220:	4013      	ands	r3, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6593      	str	r3, [r2, #88]	; 0x58
 8007226:	e005      	b.n	8007234 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40020010 	.word	0x40020010
 8007248:	40020028 	.word	0x40020028
 800724c:	40020040 	.word	0x40020040
 8007250:	40020058 	.word	0x40020058
 8007254:	40020070 	.word	0x40020070
 8007258:	40020088 	.word	0x40020088
 800725c:	400200a0 	.word	0x400200a0
 8007260:	400200b8 	.word	0x400200b8
 8007264:	40020410 	.word	0x40020410
 8007268:	40020428 	.word	0x40020428
 800726c:	40020440 	.word	0x40020440
 8007270:	40020458 	.word	0x40020458
 8007274:	40020470 	.word	0x40020470
 8007278:	40020488 	.word	0x40020488
 800727c:	400204a0 	.word	0x400204a0
 8007280:	400204b8 	.word	0x400204b8
 8007284:	aaaaaaab 	.word	0xaaaaaaab
 8007288:	08018584 	.word	0x08018584
 800728c:	fffffc00 	.word	0xfffffc00

08007290 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d120      	bne.n	80072e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d858      	bhi.n	800735e <DMA_CheckFifoParam+0xce>
 80072ac:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <DMA_CheckFifoParam+0x24>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	080072d7 	.word	0x080072d7
 80072bc:	080072c5 	.word	0x080072c5
 80072c0:	0800735f 	.word	0x0800735f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d048      	beq.n	8007362 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072d4:	e045      	b.n	8007362 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072de:	d142      	bne.n	8007366 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072e4:	e03f      	b.n	8007366 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ee:	d123      	bne.n	8007338 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d838      	bhi.n	800736a <DMA_CheckFifoParam+0xda>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <DMA_CheckFifoParam+0x70>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007311 	.word	0x08007311
 8007304:	08007317 	.word	0x08007317
 8007308:	08007311 	.word	0x08007311
 800730c:	08007329 	.word	0x08007329
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
        break;
 8007314:	e030      	b.n	8007378 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d025      	beq.n	800736e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007326:	e022      	b.n	800736e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007330:	d11f      	bne.n	8007372 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007336:	e01c      	b.n	8007372 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	2b02      	cmp	r3, #2
 800733e:	d902      	bls.n	8007346 <DMA_CheckFifoParam+0xb6>
 8007340:	2b03      	cmp	r3, #3
 8007342:	d003      	beq.n	800734c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007344:	e018      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
        break;
 800734a:	e015      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
    break;
 800735c:	e00b      	b.n	8007376 <DMA_CheckFifoParam+0xe6>
        break;
 800735e:	bf00      	nop
 8007360:	e00a      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        break;
 8007362:	bf00      	nop
 8007364:	e008      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        break;
 8007366:	bf00      	nop
 8007368:	e006      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        break;
 800736a:	bf00      	nop
 800736c:	e004      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        break;
 800736e:	bf00      	nop
 8007370:	e002      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
        break;
 8007372:	bf00      	nop
 8007374:	e000      	b.n	8007378 <DMA_CheckFifoParam+0xe8>
    break;
 8007376:	bf00      	nop
    }
  }

  return status;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a38      	ldr	r2, [pc, #224]	; (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d022      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a36      	ldr	r2, [pc, #216]	; (8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a35      	ldr	r2, [pc, #212]	; (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d018      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a33      	ldr	r2, [pc, #204]	; (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a32      	ldr	r2, [pc, #200]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a30      	ldr	r2, [pc, #192]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d009      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01a      	beq.n	8007426 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	3b08      	subs	r3, #8
 80073f8:	4a28      	ldr	r2, [pc, #160]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	091b      	lsrs	r3, r3, #4
 8007400:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a24      	ldr	r2, [pc, #144]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007414:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2201      	movs	r2, #1
 800741e:	409a      	lsls	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007424:	e024      	b.n	8007470 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	3b10      	subs	r3, #16
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d806      	bhi.n	800744e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d902      	bls.n	800744e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3308      	adds	r3, #8
 800744c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007460:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2201      	movs	r2, #1
 800746a:	409a      	lsls	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	58025408 	.word	0x58025408
 8007480:	5802541c 	.word	0x5802541c
 8007484:	58025430 	.word	0x58025430
 8007488:	58025444 	.word	0x58025444
 800748c:	58025458 	.word	0x58025458
 8007490:	5802546c 	.word	0x5802546c
 8007494:	58025480 	.word	0x58025480
 8007498:	58025494 	.word	0x58025494
 800749c:	cccccccd 	.word	0xcccccccd
 80074a0:	16009600 	.word	0x16009600
 80074a4:	58025880 	.word	0x58025880
 80074a8:	aaaaaaab 	.word	0xaaaaaaab
 80074ac:	400204b8 	.word	0x400204b8
 80074b0:	4002040f 	.word	0x4002040f
 80074b4:	10008200 	.word	0x10008200
 80074b8:	40020880 	.word	0x40020880

080074bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d04a      	beq.n	8007568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d847      	bhi.n	8007568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d022      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a24      	ldr	r2, [pc, #144]	; (8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d01d      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a22      	ldr	r2, [pc, #136]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d018      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a21      	ldr	r2, [pc, #132]	; (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00e      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d009      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1c      	ldr	r2, [pc, #112]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a15      	ldr	r2, [pc, #84]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007544:	671a      	str	r2, [r3, #112]	; 0x70
 8007546:	e009      	b.n	800755c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a11      	ldr	r2, [pc, #68]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800755a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3b01      	subs	r3, #1
 8007560:	2201      	movs	r2, #1
 8007562:	409a      	lsls	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	58025408 	.word	0x58025408
 8007578:	5802541c 	.word	0x5802541c
 800757c:	58025430 	.word	0x58025430
 8007580:	58025444 	.word	0x58025444
 8007584:	58025458 	.word	0x58025458
 8007588:	5802546c 	.word	0x5802546c
 800758c:	58025480 	.word	0x58025480
 8007590:	58025494 	.word	0x58025494
 8007594:	1600963f 	.word	0x1600963f
 8007598:	58025940 	.word	0x58025940
 800759c:	1000823f 	.word	0x1000823f
 80075a0:	40020940 	.word	0x40020940

080075a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b098      	sub	sp, #96	; 0x60
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80075ac:	4a84      	ldr	r2, [pc, #528]	; (80077c0 <HAL_FDCAN_Init+0x21c>)
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4611      	mov	r1, r2
 80075b4:	224c      	movs	r2, #76	; 0x4c
 80075b6:	4618      	mov	r0, r3
 80075b8:	f00f fdea 	bl	8017190 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e1c6      	b.n	8007954 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a7e      	ldr	r2, [pc, #504]	; (80077c4 <HAL_FDCAN_Init+0x220>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d106      	bne.n	80075de <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075d8:	461a      	mov	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fb faa4 	bl	8002b40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0210 	bic.w	r2, r2, #16
 8007606:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007608:	f7fc fa32 	bl	8003a70 <HAL_GetTick>
 800760c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800760e:	e014      	b.n	800763a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007610:	f7fc fa2e 	bl	8003a70 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b0a      	cmp	r3, #10
 800761c:	d90d      	bls.n	800763a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2203      	movs	r2, #3
 8007632:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e18c      	b.n	8007954 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f003 0308 	and.w	r3, r3, #8
 8007644:	2b08      	cmp	r3, #8
 8007646:	d0e3      	beq.n	8007610 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007658:	f7fc fa0a 	bl	8003a70 <HAL_GetTick>
 800765c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800765e:	e014      	b.n	800768a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007660:	f7fc fa06 	bl	8003a70 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b0a      	cmp	r3, #10
 800766c:	d90d      	bls.n	800768a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007674:	f043 0201 	orr.w	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2203      	movs	r2, #3
 8007682:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e164      	b.n	8007954 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0e3      	beq.n	8007660 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0202 	orr.w	r2, r2, #2
 80076a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	7c1b      	ldrb	r3, [r3, #16]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076be:	619a      	str	r2, [r3, #24]
 80076c0:	e007      	b.n	80076d2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	7c5b      	ldrb	r3, [r3, #17]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d108      	bne.n	80076ec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e8:	619a      	str	r2, [r3, #24]
 80076ea:	e007      	b.n	80076fc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	7c9b      	ldrb	r3, [r3, #18]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d108      	bne.n	8007716 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007712:	619a      	str	r2, [r3, #24]
 8007714:	e007      	b.n	8007726 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007724:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800774a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0210 	bic.w	r2, r2, #16
 800775a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d108      	bne.n	8007776 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0204 	orr.w	r2, r2, #4
 8007772:	619a      	str	r2, [r3, #24]
 8007774:	e030      	b.n	80077d8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d02c      	beq.n	80077d8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d020      	beq.n	80077c8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007794:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0210 	orr.w	r2, r2, #16
 80077a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d114      	bne.n	80077d8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0220 	orr.w	r2, r2, #32
 80077bc:	619a      	str	r2, [r3, #24]
 80077be:	e00b      	b.n	80077d8 <HAL_FDCAN_Init+0x234>
 80077c0:	08018470 	.word	0x08018470
 80077c4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0220 	orr.w	r2, r2, #32
 80077d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	3b01      	subs	r3, #1
 80077de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077f0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007800:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007802:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780c:	d115      	bne.n	800783a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	3b01      	subs	r3, #1
 800781a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800781c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	3b01      	subs	r3, #1
 8007824:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007826:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	3b01      	subs	r3, #1
 8007830:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007836:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007838:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007860:	4413      	add	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d011      	beq.n	800788a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800786e:	f023 0107 	bic.w	r1, r3, #7
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	3360      	adds	r3, #96	; 0x60
 800787a:	443b      	add	r3, r7
 800787c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	2b00      	cmp	r3, #0
 8007890:	d011      	beq.n	80078b6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800789a:	f023 0107 	bic.w	r1, r3, #7
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	3360      	adds	r3, #96	; 0x60
 80078a6:	443b      	add	r3, r7
 80078a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d012      	beq.n	80078e4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078c6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	3360      	adds	r3, #96	; 0x60
 80078d2:	443b      	add	r3, r7
 80078d4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078d8:	011a      	lsls	r2, r3, #4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d012      	beq.n	8007912 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078f4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	3360      	adds	r3, #96	; 0x60
 8007900:	443b      	add	r3, r7
 8007902:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007906:	021a      	lsls	r2, r3, #8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a11      	ldr	r2, [pc, #68]	; (800795c <HAL_FDCAN_Init+0x3b8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d107      	bne.n	800792c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f022 0203 	bic.w	r2, r2, #3
 800792a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f80b 	bl	8007960 <FDCAN_CalcultateRamBlockAddresses>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007950:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007954:	4618      	mov	r0, r3
 8007956:	3760      	adds	r7, #96	; 0x60
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	4000a000 	.word	0x4000a000

08007960 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007976:	4ba7      	ldr	r3, [pc, #668]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007978:	4013      	ands	r3, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	0091      	lsls	r1, r2, #2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6812      	ldr	r2, [r2, #0]
 8007982:	430b      	orrs	r3, r1
 8007984:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007990:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	041a      	lsls	r2, r3, #16
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079b6:	4b97      	ldr	r3, [pc, #604]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	0091      	lsls	r1, r2, #2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	430b      	orrs	r3, r1
 80079c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	041a      	lsls	r2, r3, #16
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80079f8:	4b86      	ldr	r3, [pc, #536]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	0091      	lsls	r1, r2, #2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6812      	ldr	r2, [r2, #0]
 8007a04:	430b      	orrs	r3, r1
 8007a06:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	041a      	lsls	r2, r3, #16
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	4413      	add	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a40:	4b74      	ldr	r3, [pc, #464]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	0091      	lsls	r1, r2, #2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a62:	041a      	lsls	r2, r3, #16
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a88:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	0091      	lsls	r1, r2, #2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	430b      	orrs	r3, r1
 8007a96:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ab4:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	0091      	lsls	r1, r2, #2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ace:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	041a      	lsls	r2, r3, #16
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	4413      	add	r3, r2
 8007aec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007af6:	4b47      	ldr	r3, [pc, #284]	; (8007c14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	0091      	lsls	r1, r2, #2
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	430b      	orrs	r3, r1
 8007b04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b10:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b18:	041a      	lsls	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b2c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b34:	061a      	lsls	r2, r3, #24
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b44:	4b34      	ldr	r3, [pc, #208]	; (8007c18 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b46:	4413      	add	r3, r2
 8007b48:	009a      	lsls	r2, r3, #2
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	441a      	add	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	441a      	add	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bda:	fb01 f303 	mul.w	r3, r1, r3
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bf6:	fb01 f303 	mul.w	r3, r1, r3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	4a04      	ldr	r2, [pc, #16]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d915      	bls.n	8007c3c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c10:	e006      	b.n	8007c20 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c12:	bf00      	nop
 8007c14:	ffff0003 	.word	0xffff0003
 8007c18:	10002b00 	.word	0x10002b00
 8007c1c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2203      	movs	r2, #3
 8007c34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e010      	b.n	8007c5e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	e005      	b.n	8007c50 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3f3      	bcc.n	8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop

08007c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	; 0x24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c7a:	4b86      	ldr	r3, [pc, #536]	; (8007e94 <HAL_GPIO_Init+0x228>)
 8007c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c7e:	e18c      	b.n	8007f9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	2101      	movs	r1, #1
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 817e 	beq.w	8007f94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d005      	beq.n	8007cb0 <HAL_GPIO_Init+0x44>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f003 0303 	and.w	r3, r3, #3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d130      	bne.n	8007d12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2203      	movs	r2, #3
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 0201 	and.w	r2, r3, #1
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d017      	beq.n	8007d4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2203      	movs	r2, #3
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d123      	bne.n	8007da2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	08da      	lsrs	r2, r3, #3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3208      	adds	r2, #8
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	220f      	movs	r2, #15
 8007d72:	fa02 f303 	lsl.w	r3, r2, r3
 8007d76:	43db      	mvns	r3, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	08da      	lsrs	r2, r3, #3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3208      	adds	r2, #8
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	2203      	movs	r2, #3
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	43db      	mvns	r3, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4013      	ands	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f003 0203 	and.w	r2, r3, #3
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80d8 	beq.w	8007f94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007de4:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <HAL_GPIO_Init+0x22c>)
 8007de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dea:	4a2b      	ldr	r2, [pc, #172]	; (8007e98 <HAL_GPIO_Init+0x22c>)
 8007dec:	f043 0302 	orr.w	r3, r3, #2
 8007df0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007df4:	4b28      	ldr	r3, [pc, #160]	; (8007e98 <HAL_GPIO_Init+0x22c>)
 8007df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e02:	4a26      	ldr	r2, [pc, #152]	; (8007e9c <HAL_GPIO_Init+0x230>)
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	089b      	lsrs	r3, r3, #2
 8007e08:	3302      	adds	r3, #2
 8007e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	220f      	movs	r2, #15
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4013      	ands	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <HAL_GPIO_Init+0x234>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d04a      	beq.n	8007ec4 <HAL_GPIO_Init+0x258>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <HAL_GPIO_Init+0x238>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02b      	beq.n	8007e8e <HAL_GPIO_Init+0x222>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <HAL_GPIO_Init+0x23c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d025      	beq.n	8007e8a <HAL_GPIO_Init+0x21e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <HAL_GPIO_Init+0x240>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01f      	beq.n	8007e86 <HAL_GPIO_Init+0x21a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <HAL_GPIO_Init+0x244>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d019      	beq.n	8007e82 <HAL_GPIO_Init+0x216>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_GPIO_Init+0x248>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_GPIO_Init+0x212>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <HAL_GPIO_Init+0x24c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00d      	beq.n	8007e7a <HAL_GPIO_Init+0x20e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <HAL_GPIO_Init+0x250>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <HAL_GPIO_Init+0x20a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <HAL_GPIO_Init+0x254>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d101      	bne.n	8007e72 <HAL_GPIO_Init+0x206>
 8007e6e:	2309      	movs	r3, #9
 8007e70:	e029      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e72:	230a      	movs	r3, #10
 8007e74:	e027      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e76:	2307      	movs	r3, #7
 8007e78:	e025      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e7a:	2306      	movs	r3, #6
 8007e7c:	e023      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e7e:	2305      	movs	r3, #5
 8007e80:	e021      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e82:	2304      	movs	r3, #4
 8007e84:	e01f      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e86:	2303      	movs	r3, #3
 8007e88:	e01d      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e01b      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e019      	b.n	8007ec6 <HAL_GPIO_Init+0x25a>
 8007e92:	bf00      	nop
 8007e94:	58000080 	.word	0x58000080
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	58000400 	.word	0x58000400
 8007ea0:	58020000 	.word	0x58020000
 8007ea4:	58020400 	.word	0x58020400
 8007ea8:	58020800 	.word	0x58020800
 8007eac:	58020c00 	.word	0x58020c00
 8007eb0:	58021000 	.word	0x58021000
 8007eb4:	58021400 	.word	0x58021400
 8007eb8:	58021800 	.word	0x58021800
 8007ebc:	58021c00 	.word	0x58021c00
 8007ec0:	58022400 	.word	0x58022400
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	f002 0203 	and.w	r2, r2, #3
 8007ecc:	0092      	lsls	r2, r2, #2
 8007ece:	4093      	lsls	r3, r2
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ed6:	4938      	ldr	r1, [pc, #224]	; (8007fb8 <HAL_GPIO_Init+0x34c>)
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	089b      	lsrs	r3, r3, #2
 8007edc:	3302      	adds	r3, #2
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	4013      	ands	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	43db      	mvns	r3, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4013      	ands	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f ae6b 	bne.w	8007c80 <HAL_GPIO_Init+0x14>
  }
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	3724      	adds	r7, #36	; 0x24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	58000400 	.word	0x58000400

08007fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	887b      	ldrh	r3, [r7, #2]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e001      	b.n	8007fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	807b      	strh	r3, [r7, #2]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ffc:	787b      	ldrb	r3, [r7, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008002:	887a      	ldrh	r2, [r7, #2]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008008:	e003      	b.n	8008012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800800a:	887b      	ldrh	r3, [r7, #2]
 800800c:	041a      	lsls	r2, r3, #16
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	619a      	str	r2, [r3, #24]
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e07f      	b.n	8008132 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa fde2 	bl	8002c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2224      	movs	r2, #36	; 0x24
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d107      	bne.n	800809a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	e006      	b.n	80080a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d104      	bne.n	80080ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6859      	ldr	r1, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	4b1d      	ldr	r3, [pc, #116]	; (800813c <HAL_I2C_Init+0x11c>)
 80080c6:	430b      	orrs	r3, r1
 80080c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69d9      	ldr	r1, [r3, #28]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a1a      	ldr	r2, [r3, #32]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	02008000 	.word	0x02008000

08008140 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	68f9      	ldr	r1, [r7, #12]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	4798      	blx	r3
  }
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b20      	cmp	r3, #32
 8008188:	d138      	bne.n	80081fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008194:	2302      	movs	r3, #2
 8008196:	e032      	b.n	80081fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2224      	movs	r2, #36	; 0x24
 80081a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6819      	ldr	r1, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e000      	b.n	80081fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081fc:	2302      	movs	r3, #2
  }
}
 80081fe:	4618      	mov	r0, r3
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b20      	cmp	r3, #32
 800821e:	d139      	bne.n	8008294 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800822a:	2302      	movs	r3, #2
 800822c:	e033      	b.n	8008296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2224      	movs	r2, #36	; 0x24
 800823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0201 	bic.w	r2, r2, #1
 800824c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800825c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0201 	orr.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008294:	2302      	movs	r3, #2
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a4:	b08f      	sub	sp, #60	; 0x3c
 80082a6:	af0a      	add	r7, sp, #40	; 0x28
 80082a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e116      	b.n	80084e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f00e fbc8 	bl	8016a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2203      	movs	r2, #3
 80082d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d102      	bne.n	80082ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f00a fcf7 	bl	8012ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	603b      	str	r3, [r7, #0]
 80082fe:	687e      	ldr	r6, [r7, #4]
 8008300:	466d      	mov	r5, sp
 8008302:	f106 0410 	add.w	r4, r6, #16
 8008306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800830a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800830c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800830e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008312:	e885 0003 	stmia.w	r5, {r0, r1}
 8008316:	1d33      	adds	r3, r6, #4
 8008318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800831a:	6838      	ldr	r0, [r7, #0]
 800831c:	f00a fbc2 	bl	8012aa4 <USB_CoreInit>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e0d7      	b.n	80084e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2100      	movs	r1, #0
 8008338:	4618      	mov	r0, r3
 800833a:	f00a fce5 	bl	8012d08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800833e:	2300      	movs	r3, #0
 8008340:	73fb      	strb	r3, [r7, #15]
 8008342:	e04a      	b.n	80083da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008344:	7bfa      	ldrb	r2, [r7, #15]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	333d      	adds	r3, #61	; 0x3d
 8008354:	2201      	movs	r2, #1
 8008356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008358:	7bfa      	ldrb	r2, [r7, #15]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	333c      	adds	r3, #60	; 0x3c
 8008368:	7bfa      	ldrb	r2, [r7, #15]
 800836a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	b298      	uxth	r0, r3
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	3356      	adds	r3, #86	; 0x56
 8008380:	4602      	mov	r2, r0
 8008382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008384:	7bfa      	ldrb	r2, [r7, #15]
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3340      	adds	r3, #64	; 0x40
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008398:	7bfa      	ldrb	r2, [r7, #15]
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	3344      	adds	r3, #68	; 0x44
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083ac:	7bfa      	ldrb	r2, [r7, #15]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3348      	adds	r3, #72	; 0x48
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083c0:	7bfa      	ldrb	r2, [r7, #15]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	334c      	adds	r3, #76	; 0x4c
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	3301      	adds	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]
 80083da:	7bfa      	ldrb	r2, [r7, #15]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d3af      	bcc.n	8008344 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
 80083e8:	e044      	b.n	8008474 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80083ea:	7bfa      	ldrb	r2, [r7, #15]
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008400:	7bfa      	ldrb	r2, [r7, #15]
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008412:	7bfa      	ldrb	r2, [r7, #15]
 8008414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008416:	7bfa      	ldrb	r2, [r7, #15]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800842c:	7bfa      	ldrb	r2, [r7, #15]
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008442:	7bfa      	ldrb	r2, [r7, #15]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008458:	7bfa      	ldrb	r2, [r7, #15]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	3301      	adds	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
 8008474:	7bfa      	ldrb	r2, [r7, #15]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	429a      	cmp	r2, r3
 800847c:	d3b5      	bcc.n	80083ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	687e      	ldr	r6, [r7, #4]
 8008486:	466d      	mov	r5, sp
 8008488:	f106 0410 	add.w	r4, r6, #16
 800848c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800848e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008498:	e885 0003 	stmia.w	r5, {r0, r1}
 800849c:	1d33      	adds	r3, r6, #4
 800849e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084a0:	6838      	ldr	r0, [r7, #0]
 80084a2:	f00a fc7d 	bl	8012da0 <USB_DevInit>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e014      	b.n	80084e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 f96f 	bl	80097b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f00b fcbf 	bl	8013e5e <USB_DevDisconnect>

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <HAL_PCD_Start+0x1c>
 8008502:	2302      	movs	r3, #2
 8008504:	e022      	b.n	800854c <HAL_PCD_Start+0x62>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800851e:	2b01      	cmp	r3, #1
 8008520:	d105      	bne.n	800852e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f00a fbc6 	bl	8012cc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f00b fc6d 	bl	8013e1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b08d      	sub	sp, #52	; 0x34
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f00b fd2b 	bl	8013fc6 <USB_GetMode>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 84b7 	bne.w	8008ee6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f00b fc8f 	bl	8013ea0 <USB_ReadInterrupts>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 84ad 	beq.w	8008ee4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f00b fc7c 	bl	8013ea0 <USB_ReadInterrupts>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d107      	bne.n	80085c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f002 0202 	and.w	r2, r2, #2
 80085c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f00b fc6a 	bl	8013ea0 <USB_ReadInterrupts>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b10      	cmp	r3, #16
 80085d4:	d161      	bne.n	800869a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0210 	bic.w	r2, r2, #16
 80085e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f003 020f 	and.w	r2, r3, #15
 80085f2:	4613      	mov	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	3304      	adds	r3, #4
 8008604:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	0c5b      	lsrs	r3, r3, #17
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	2b02      	cmp	r3, #2
 8008610:	d124      	bne.n	800865c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d035      	beq.n	800868a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800862c:	b29b      	uxth	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	6a38      	ldr	r0, [r7, #32]
 8008632:	f00b faa1 	bl	8013b78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	091b      	lsrs	r3, r3, #4
 800863e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008642:	441a      	add	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	091b      	lsrs	r3, r3, #4
 8008650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008654:	441a      	add	r2, r3
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	615a      	str	r2, [r3, #20]
 800865a:	e016      	b.n	800868a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	0c5b      	lsrs	r3, r3, #17
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	2b06      	cmp	r3, #6
 8008666:	d110      	bne.n	800868a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800866e:	2208      	movs	r2, #8
 8008670:	4619      	mov	r1, r3
 8008672:	6a38      	ldr	r0, [r7, #32]
 8008674:	f00b fa80 	bl	8013b78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	091b      	lsrs	r3, r3, #4
 8008680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008684:	441a      	add	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0210 	orr.w	r2, r2, #16
 8008698:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f00b fbfe 	bl	8013ea0 <USB_ReadInterrupts>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086ae:	f040 80a7 	bne.w	8008800 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f00b fc03 	bl	8013ec6 <USB_ReadDevAllOutEpInterrupt>
 80086c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086c2:	e099      	b.n	80087f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 808e 	beq.w	80087ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f00b fc27 	bl	8013f2e <USB_ReadDevOutEPInterrupt>
 80086e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00c      	beq.n	8008706 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	461a      	mov	r2, r3
 80086fa:	2301      	movs	r3, #1
 80086fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80086fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fed1 	bl	80094a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	461a      	mov	r2, r3
 800871e:	2308      	movs	r3, #8
 8008720:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 ffa7 	bl	8009678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	d008      	beq.n	8008746 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	461a      	mov	r2, r3
 8008742:	2310      	movs	r3, #16
 8008744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d030      	beq.n	80087b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b80      	cmp	r3, #128	; 0x80
 800875a:	d109      	bne.n	8008770 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800876a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800876e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	3304      	adds	r3, #4
 8008784:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	78db      	ldrb	r3, [r3, #3]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d108      	bne.n	80087a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2200      	movs	r2, #0
 8008792:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	b2db      	uxtb	r3, r3
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f00e fa5a 	bl	8016c54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ac:	461a      	mov	r2, r3
 80087ae:	2302      	movs	r3, #2
 80087b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d008      	beq.n	80087ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	461a      	mov	r2, r3
 80087ca:	2320      	movs	r3, #32
 80087cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	461a      	mov	r2, r3
 80087e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	3301      	adds	r3, #1
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	085b      	lsrs	r3, r3, #1
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f47f af62 	bne.w	80086c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f00b fb4b 	bl	8013ea0 <USB_ReadInterrupts>
 800880a:	4603      	mov	r3, r0
 800880c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008814:	f040 80db 	bne.w	80089ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f00b fb6c 	bl	8013efa <USB_ReadDevAllInEpInterrupt>
 8008822:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008828:	e0cd      	b.n	80089c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80c2 	beq.w	80089ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883c:	b2d2      	uxtb	r2, r2
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f00b fb92 	bl	8013f6a <USB_ReadDevInEPInterrupt>
 8008846:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d057      	beq.n	8008902 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	2201      	movs	r2, #1
 800885a:	fa02 f303 	lsl.w	r3, r2, r3
 800885e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	43db      	mvns	r3, r3
 800886c:	69f9      	ldr	r1, [r7, #28]
 800886e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008872:	4013      	ands	r3, r2
 8008874:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008882:	461a      	mov	r2, r3
 8008884:	2301      	movs	r3, #1
 8008886:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d132      	bne.n	80088f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008894:	4613      	mov	r3, r2
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	440b      	add	r3, r1
 800889e:	3348      	adds	r3, #72	; 0x48
 80088a0:	6819      	ldr	r1, [r3, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a6:	4613      	mov	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4403      	add	r3, r0
 80088b0:	3344      	adds	r3, #68	; 0x44
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4419      	add	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	4613      	mov	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4403      	add	r3, r0
 80088c4:	3348      	adds	r3, #72	; 0x48
 80088c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d113      	bne.n	80088f6 <HAL_PCD_IRQHandler+0x3a2>
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d2:	4613      	mov	r3, r2
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	334c      	adds	r3, #76	; 0x4c
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d108      	bne.n	80088f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6818      	ldr	r0, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088ee:	461a      	mov	r2, r3
 80088f0:	2101      	movs	r1, #1
 80088f2:	f00b fb9b 	bl	801402c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f00e f924 	bl	8016b4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f003 0308 	and.w	r3, r3, #8
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008918:	461a      	mov	r2, r3
 800891a:	2308      	movs	r3, #8
 800891c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	461a      	mov	r2, r3
 8008936:	2310      	movs	r3, #16
 8008938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008950:	461a      	mov	r2, r3
 8008952:	2340      	movs	r3, #64	; 0x40
 8008954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d023      	beq.n	80089a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008962:	6a38      	ldr	r0, [r7, #32]
 8008964:	f00a fb7a 	bl	801305c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896a:	4613      	mov	r3, r2
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	3338      	adds	r3, #56	; 0x38
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	78db      	ldrb	r3, [r3, #3]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d108      	bne.n	8008996 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2200      	movs	r2, #0
 8008988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	b2db      	uxtb	r3, r3
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f00e f971 	bl	8016c78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	461a      	mov	r2, r3
 80089a4:	2302      	movs	r3, #2
 80089a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fcea 	bl	800938e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	3301      	adds	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f47f af2e 	bne.w	800882a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f00b fa64 	bl	8013ea0 <USB_ReadInterrupts>
 80089d8:	4603      	mov	r3, r0
 80089da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e2:	d122      	bne.n	8008a2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d108      	bne.n	8008a14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fef5 	bl	80097fc <HAL_PCDEx_LPM_Callback>
 8008a12:	e002      	b.n	8008a1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f00e f90f 	bl	8016c38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695a      	ldr	r2, [r3, #20]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f00b fa36 	bl	8013ea0 <USB_ReadInterrupts>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a3e:	d112      	bne.n	8008a66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f00e f8cb 	bl	8016bec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f00b fa18 	bl	8013ea0 <USB_ReadInterrupts>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7a:	d121      	bne.n	8008ac0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d111      	bne.n	8008aba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	f003 020f 	and.w	r2, r3, #15
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fea2 	bl	80097fc <HAL_PCDEx_LPM_Callback>
 8008ab8:	e002      	b.n	8008ac0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f00e f896 	bl	8016bec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f00b f9eb 	bl	8013ea0 <USB_ReadInterrupts>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	f040 80b7 	bne.w	8008c46 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2110      	movs	r1, #16
 8008af2:	4618      	mov	r0, r3
 8008af4:	f00a fab2 	bl	801305c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008afc:	e046      	b.n	8008b8c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	3301      	adds	r3, #1
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d3b3      	bcc.n	8008afe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ba8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d016      	beq.n	8008be0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc2:	f043 030b 	orr.w	r3, r3, #11
 8008bc6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd8:	f043 030b 	orr.w	r3, r3, #11
 8008bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8008bde:	e015      	b.n	8008c0c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	695a      	ldr	r2, [r3, #20]
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f242 032b 	movw	r3, #8235	; 0x202b
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c06:	f043 030b 	orr.w	r3, r3, #11
 8008c0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c30:	461a      	mov	r2, r3
 8008c32:	f00b f9fb 	bl	801402c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	695a      	ldr	r2, [r3, #20]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f00b f928 	bl	8013ea0 <USB_ReadInterrupts>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5a:	d124      	bne.n	8008ca6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00b f9bf 	bl	8013fe4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00a fa73 	bl	8013156 <USB_GetDevSpeed>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681c      	ldr	r4, [r3, #0]
 8008c7c:	f001 fd88 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 8008c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f009 ff78 	bl	8012b80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f00d ff82 	bl	8016b9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008ca4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f00b f8f8 	bl	8013ea0 <USB_ReadInterrupts>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f003 0308 	and.w	r3, r3, #8
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d10a      	bne.n	8008cd0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f00d ff5f 	bl	8016b7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f002 0208 	and.w	r2, r2, #8
 8008cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f00b f8e3 	bl	8013ea0 <USB_ReadInterrupts>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d122      	bne.n	8008d2a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf4:	e014      	b.n	8008d20 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d105      	bne.n	8008d1a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fb09 	bl	800932c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d3e5      	bcc.n	8008cf6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f00b f8b6 	bl	8013ea0 <USB_ReadInterrupts>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3e:	d13b      	bne.n	8008db8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d40:	2301      	movs	r3, #1
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
 8008d44:	e02b      	b.n	8008d9e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	440b      	add	r3, r1
 8008d64:	3340      	adds	r3, #64	; 0x40
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d115      	bne.n	8008d98 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	da12      	bge.n	8008d98 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	333f      	adds	r3, #63	; 0x3f
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 faca 	bl	800932c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3ce      	bcc.n	8008d46 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	695a      	ldr	r2, [r3, #20]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f00b f86f 	bl	8013ea0 <USB_ReadInterrupts>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dcc:	d155      	bne.n	8008e7a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dce:	2301      	movs	r3, #1
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd2:	e045      	b.n	8008e60 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d12e      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da2b      	bge.n	8008e5a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d121      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e28:	2201      	movs	r2, #1
 8008e2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e56:	6053      	str	r3, [r2, #4]
            break;
 8008e58:	e007      	b.n	8008e6a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d3b4      	bcc.n	8008dd4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f00b f80e 	bl	8013ea0 <USB_ReadInterrupts>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8e:	d10a      	bne.n	8008ea6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f00d ff03 	bl	8016c9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695a      	ldr	r2, [r3, #20]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f00a fff8 	bl	8013ea0 <USB_ReadInterrupts>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f003 0304 	and.w	r3, r3, #4
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d115      	bne.n	8008ee6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f00d fef3 	bl	8016cb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6859      	ldr	r1, [r3, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e000      	b.n	8008ee6 <HAL_PCD_IRQHandler+0x992>
      return;
 8008ee4:	bf00      	nop
    }
  }
}
 8008ee6:	3734      	adds	r7, #52	; 0x34
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd90      	pop	{r4, r7, pc}

08008eec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_PCD_SetAddress+0x1a>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e013      	b.n	8008f2e <HAL_PCD_SetAddress+0x42>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f00a ff56 	bl	8013dd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	461a      	mov	r2, r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	70fb      	strb	r3, [r7, #3]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	803b      	strh	r3, [r7, #0]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da0f      	bge.n	8008f7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	f003 020f 	and.w	r2, r3, #15
 8008f62:	4613      	mov	r3, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	3338      	adds	r3, #56	; 0x38
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	3304      	adds	r3, #4
 8008f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	705a      	strb	r2, [r3, #1]
 8008f7a:	e00f      	b.n	8008f9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	f003 020f 	and.w	r2, r3, #15
 8008f82:	4613      	mov	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	4413      	add	r3, r2
 8008f92:	3304      	adds	r3, #4
 8008f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fa8:	883a      	ldrh	r2, [r7, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	78ba      	ldrb	r2, [r7, #2]
 8008fb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fc6:	78bb      	ldrb	r3, [r7, #2]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d102      	bne.n	8008fd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_PCD_EP_Open+0xaa>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e00e      	b.n	8008ffe <HAL_PCD_EP_Open+0xc8>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68f9      	ldr	r1, [r7, #12]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f00a f8d6 	bl	80131a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009016:	2b00      	cmp	r3, #0
 8009018:	da0f      	bge.n	800903a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	3338      	adds	r3, #56	; 0x38
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2201      	movs	r2, #1
 8009036:	705a      	strb	r2, [r3, #1]
 8009038:	e00f      	b.n	800905a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	4413      	add	r3, r2
 8009050:	3304      	adds	r3, #4
 8009052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_PCD_EP_Close+0x6e>
 8009070:	2302      	movs	r3, #2
 8009072:	e00e      	b.n	8009092 <HAL_PCD_EP_Close+0x8c>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68f9      	ldr	r1, [r7, #12]
 8009082:	4618      	mov	r0, r3
 8009084:	f00a f914 	bl	80132b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	460b      	mov	r3, r1
 80090a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090aa:	7afb      	ldrb	r3, [r7, #11]
 80090ac:	f003 020f 	and.w	r2, r3, #15
 80090b0:	4613      	mov	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	3304      	adds	r3, #4
 80090c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2200      	movs	r2, #0
 80090d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2200      	movs	r2, #0
 80090da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d102      	bne.n	80090f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6818      	ldr	r0, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	6979      	ldr	r1, [r7, #20]
 8009104:	f00a f9b0 	bl	8013468 <USB_EPStartXfer>

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	460b      	mov	r3, r1
 800911c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	f003 020f 	and.w	r2, r3, #15
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009134:	681b      	ldr	r3, [r3, #0]
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
 800914e:	460b      	mov	r3, r1
 8009150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4413      	add	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	3338      	adds	r3, #56	; 0x38
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	3304      	adds	r3, #4
 8009168:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2200      	movs	r2, #0
 800917a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2201      	movs	r2, #1
 8009180:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	b2da      	uxtb	r2, r3
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d102      	bne.n	800919c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	6979      	ldr	r1, [r7, #20]
 80091aa:	f00a f95d 	bl	8013468 <USB_EPStartXfer>

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	f003 020f 	and.w	r2, r3, #15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d901      	bls.n	80091d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e050      	b.n	8009278 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0f      	bge.n	80091fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	4613      	mov	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	3338      	adds	r3, #56	; 0x38
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	3304      	adds	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	705a      	strb	r2, [r3, #1]
 80091fc:	e00d      	b.n	800921a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	3304      	adds	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	b2da      	uxtb	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009232:	2b01      	cmp	r3, #1
 8009234:	d101      	bne.n	800923a <HAL_PCD_EP_SetStall+0x82>
 8009236:	2302      	movs	r3, #2
 8009238:	e01e      	b.n	8009278 <HAL_PCD_EP_SetStall+0xc0>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	4618      	mov	r0, r3
 800924a:	f00a fced 	bl	8013c28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	b2d9      	uxtb	r1, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009268:	461a      	mov	r2, r3
 800926a:	f00a fedf 	bl	801402c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d901      	bls.n	800929e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e042      	b.n	8009324 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800929e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da0f      	bge.n	80092c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	3338      	adds	r3, #56	; 0x38
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	3304      	adds	r3, #4
 80092bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	705a      	strb	r2, [r3, #1]
 80092c4:	e00f      	b.n	80092e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	f003 020f 	and.w	r2, r3, #15
 80092cc:	4613      	mov	r3, r2
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4413      	add	r3, r2
 80092dc:	3304      	adds	r3, #4
 80092de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	f003 030f 	and.w	r3, r3, #15
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_PCD_EP_ClrStall+0x86>
 8009302:	2302      	movs	r3, #2
 8009304:	e00e      	b.n	8009324 <HAL_PCD_EP_ClrStall+0xa4>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68f9      	ldr	r1, [r7, #12]
 8009314:	4618      	mov	r0, r3
 8009316:	f00a fcf5 	bl	8013d04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da0c      	bge.n	800935a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	f003 020f 	and.w	r2, r3, #15
 8009346:	4613      	mov	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3338      	adds	r3, #56	; 0x38
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	3304      	adds	r3, #4
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	e00c      	b.n	8009374 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	f003 020f 	and.w	r2, r3, #15
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	4413      	add	r3, r2
 8009370:	3304      	adds	r3, #4
 8009372:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68f9      	ldr	r1, [r7, #12]
 800937a:	4618      	mov	r0, r3
 800937c:	f00a fb14 	bl	80139a8 <USB_EPStopXfer>
 8009380:	4603      	mov	r3, r0
 8009382:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009384:	7afb      	ldrb	r3, [r7, #11]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b08a      	sub	sp, #40	; 0x28
 8009392:	af02      	add	r7, sp, #8
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	3338      	adds	r3, #56	; 0x38
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	4413      	add	r3, r2
 80093b2:	3304      	adds	r3, #4
 80093b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	695a      	ldr	r2, [r3, #20]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d901      	bls.n	80093c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e06c      	b.n	80094a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d902      	bls.n	80093e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	3303      	adds	r3, #3
 80093e6:	089b      	lsrs	r3, r3, #2
 80093e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093ea:	e02b      	b.n	8009444 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d902      	bls.n	8009408 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	3303      	adds	r3, #3
 800940c:	089b      	lsrs	r3, r3, #2
 800940e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68d9      	ldr	r1, [r3, #12]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	b2da      	uxtb	r2, r3
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009420:	b2db      	uxtb	r3, r3
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4603      	mov	r3, r0
 8009426:	6978      	ldr	r0, [r7, #20]
 8009428:	f00a fb68 	bl	8013afc <USB_WritePacket>

    ep->xfer_buff  += len;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	441a      	add	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	695a      	ldr	r2, [r3, #20]
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	441a      	add	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	429a      	cmp	r2, r3
 8009458:	d809      	bhi.n	800946e <PCD_WriteEmptyTxFifo+0xe0>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009462:	429a      	cmp	r2, r3
 8009464:	d203      	bcs.n	800946e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1be      	bne.n	80093ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	429a      	cmp	r2, r3
 8009478:	d811      	bhi.n	800949e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	2201      	movs	r2, #1
 8009482:	fa02 f303 	lsl.w	r3, r2, r3
 8009486:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	43db      	mvns	r3, r3
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800949a:	4013      	ands	r3, r2
 800949c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3720      	adds	r7, #32
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	333c      	adds	r3, #60	; 0x3c
 80094c0:	3304      	adds	r3, #4
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d17b      	bne.n	80095d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d015      	beq.n	8009514 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4a61      	ldr	r2, [pc, #388]	; (8009670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	f240 80b9 	bls.w	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 80b3 	beq.w	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950a:	461a      	mov	r2, r3
 800950c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009510:	6093      	str	r3, [r2, #8]
 8009512:	e0a7      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952a:	461a      	mov	r2, r3
 800952c:	2320      	movs	r3, #32
 800952e:	6093      	str	r3, [r2, #8]
 8009530:	e098      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009538:	2b00      	cmp	r3, #0
 800953a:	f040 8093 	bne.w	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	4a4b      	ldr	r2, [pc, #300]	; (8009670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d90f      	bls.n	8009566 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	461a      	mov	r2, r3
 800955e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009562:	6093      	str	r3, [r2, #8]
 8009564:	e07e      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	4613      	mov	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1a      	ldr	r2, [r3, #32]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	0159      	lsls	r1, r3, #5
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	440b      	add	r3, r1
 8009588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009592:	1ad2      	subs	r2, r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d114      	bne.n	80095c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d109      	bne.n	80095ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095b0:	461a      	mov	r2, r3
 80095b2:	2101      	movs	r1, #1
 80095b4:	f00a fd3a 	bl	801402c <USB_EP0_OutStart>
 80095b8:	e006      	b.n	80095c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	441a      	add	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f00d faa0 	bl	8016b14 <HAL_PCD_DataOutStageCallback>
 80095d4:	e046      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	4a26      	ldr	r2, [pc, #152]	; (8009674 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d124      	bne.n	8009628 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f4:	461a      	mov	r2, r3
 80095f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095fa:	6093      	str	r3, [r2, #8]
 80095fc:	e032      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f003 0320 	and.w	r3, r3, #32
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	015a      	lsls	r2, r3, #5
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	4413      	add	r3, r2
 8009610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009614:	461a      	mov	r2, r3
 8009616:	2320      	movs	r3, #32
 8009618:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f00d fa77 	bl	8016b14 <HAL_PCD_DataOutStageCallback>
 8009626:	e01d      	b.n	8009664 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d114      	bne.n	8009658 <PCD_EP_OutXfrComplete_int+0x1b0>
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	4613      	mov	r3, r2
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	440b      	add	r3, r1
 800963c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d108      	bne.n	8009658 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009650:	461a      	mov	r2, r3
 8009652:	2100      	movs	r1, #0
 8009654:	f00a fcea 	bl	801402c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f00d fa58 	bl	8016b14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	4f54300a 	.word	0x4f54300a
 8009674:	4f54310a 	.word	0x4f54310a

08009678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	333c      	adds	r3, #60	; 0x3c
 8009690:	3304      	adds	r3, #4
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4a15      	ldr	r2, [pc, #84]	; (8009700 <PCD_EP_OutSetupPacket_int+0x88>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d90e      	bls.n	80096cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	461a      	mov	r2, r3
 80096c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f00d fa0f 	bl	8016af0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <PCD_EP_OutSetupPacket_int+0x88>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d90c      	bls.n	80096f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d108      	bne.n	80096f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096ec:	461a      	mov	r2, r3
 80096ee:	2101      	movs	r1, #1
 80096f0:	f00a fc9c 	bl	801402c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	4f54300a 	.word	0x4f54300a

08009704 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
 8009710:	4613      	mov	r3, r2
 8009712:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d107      	bne.n	8009732 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009722:	883b      	ldrh	r3, [r7, #0]
 8009724:	0419      	lsls	r1, r3, #16
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	430a      	orrs	r2, r1
 800972e:	629a      	str	r2, [r3, #40]	; 0x28
 8009730:	e028      	b.n	8009784 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	0c1b      	lsrs	r3, r3, #16
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	4413      	add	r3, r2
 800973e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
 8009744:	e00d      	b.n	8009762 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	3340      	adds	r3, #64	; 0x40
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	4413      	add	r3, r2
 800975a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	3301      	adds	r3, #1
 8009760:	73fb      	strb	r3, [r7, #15]
 8009762:	7bfa      	ldrb	r2, [r7, #15]
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	3b01      	subs	r3, #1
 8009768:	429a      	cmp	r2, r3
 800976a:	d3ec      	bcc.n	8009746 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800976c:	883b      	ldrh	r3, [r7, #0]
 800976e:	0418      	lsls	r0, r3, #16
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	3b01      	subs	r3, #1
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	4302      	orrs	r2, r0
 800977c:	3340      	adds	r3, #64	; 0x40
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	887a      	ldrh	r2, [r7, #2]
 80097a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097e2:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	10000003 	.word	0x10000003

080097fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800981c:	4b19      	ldr	r3, [pc, #100]	; (8009884 <HAL_PWREx_ConfigSupply+0x70>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b04      	cmp	r3, #4
 8009826:	d00a      	beq.n	800983e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009828:	4b16      	ldr	r3, [pc, #88]	; (8009884 <HAL_PWREx_ConfigSupply+0x70>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f003 0307 	and.w	r3, r3, #7
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d001      	beq.n	800983a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e01f      	b.n	800987a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	e01d      	b.n	800987a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800983e:	4b11      	ldr	r3, [pc, #68]	; (8009884 <HAL_PWREx_ConfigSupply+0x70>)
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f023 0207 	bic.w	r2, r3, #7
 8009846:	490f      	ldr	r1, [pc, #60]	; (8009884 <HAL_PWREx_ConfigSupply+0x70>)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4313      	orrs	r3, r2
 800984c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800984e:	f7fa f90f 	bl	8003a70 <HAL_GetTick>
 8009852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009854:	e009      	b.n	800986a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009856:	f7fa f90b 	bl	8003a70 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009864:	d901      	bls.n	800986a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e007      	b.n	800987a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800986a:	4b06      	ldr	r3, [pc, #24]	; (8009884 <HAL_PWREx_ConfigSupply+0x70>)
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009876:	d1ee      	bne.n	8009856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	58024800 	.word	0x58024800

08009888 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4a04      	ldr	r2, [pc, #16]	; (80098a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009896:	60d3      	str	r3, [r2, #12]
}
 8009898:	bf00      	nop
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	58024800 	.word	0x58024800

080098a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08c      	sub	sp, #48	; 0x30
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e3c8      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 8087 	beq.w	80099d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098c8:	4b88      	ldr	r3, [pc, #544]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098d2:	4b86      	ldr	r3, [pc, #536]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	2b10      	cmp	r3, #16
 80098dc:	d007      	beq.n	80098ee <HAL_RCC_OscConfig+0x46>
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	2b18      	cmp	r3, #24
 80098e2:	d110      	bne.n	8009906 <HAL_RCC_OscConfig+0x5e>
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d10b      	bne.n	8009906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098ee:	4b7f      	ldr	r3, [pc, #508]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d06c      	beq.n	80099d4 <HAL_RCC_OscConfig+0x12c>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d168      	bne.n	80099d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e3a2      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800990e:	d106      	bne.n	800991e <HAL_RCC_OscConfig+0x76>
 8009910:	4b76      	ldr	r3, [pc, #472]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a75      	ldr	r2, [pc, #468]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	e02e      	b.n	800997c <HAL_RCC_OscConfig+0xd4>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10c      	bne.n	8009940 <HAL_RCC_OscConfig+0x98>
 8009926:	4b71      	ldr	r3, [pc, #452]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a70      	ldr	r2, [pc, #448]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 800992c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	4b6e      	ldr	r3, [pc, #440]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a6d      	ldr	r2, [pc, #436]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	e01d      	b.n	800997c <HAL_RCC_OscConfig+0xd4>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009948:	d10c      	bne.n	8009964 <HAL_RCC_OscConfig+0xbc>
 800994a:	4b68      	ldr	r3, [pc, #416]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a67      	ldr	r2, [pc, #412]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	4b65      	ldr	r3, [pc, #404]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a64      	ldr	r2, [pc, #400]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 800995c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	e00b      	b.n	800997c <HAL_RCC_OscConfig+0xd4>
 8009964:	4b61      	ldr	r3, [pc, #388]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a60      	ldr	r2, [pc, #384]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 800996a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	4b5e      	ldr	r3, [pc, #376]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a5d      	ldr	r2, [pc, #372]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800997a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d013      	beq.n	80099ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009984:	f7fa f874 	bl	8003a70 <HAL_GetTick>
 8009988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800998a:	e008      	b.n	800999e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800998c:	f7fa f870 	bl	8003a70 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	2b64      	cmp	r3, #100	; 0x64
 8009998:	d901      	bls.n	800999e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e356      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800999e:	4b53      	ldr	r3, [pc, #332]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0f0      	beq.n	800998c <HAL_RCC_OscConfig+0xe4>
 80099aa:	e014      	b.n	80099d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ac:	f7fa f860 	bl	8003a70 <HAL_GetTick>
 80099b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099b2:	e008      	b.n	80099c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099b4:	f7fa f85c 	bl	8003a70 <HAL_GetTick>
 80099b8:	4602      	mov	r2, r0
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b64      	cmp	r3, #100	; 0x64
 80099c0:	d901      	bls.n	80099c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e342      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099c6:	4b49      	ldr	r3, [pc, #292]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1f0      	bne.n	80099b4 <HAL_RCC_OscConfig+0x10c>
 80099d2:	e000      	b.n	80099d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 808c 	beq.w	8009afc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099e4:	4b41      	ldr	r3, [pc, #260]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ee:	4b3f      	ldr	r3, [pc, #252]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d007      	beq.n	8009a0a <HAL_RCC_OscConfig+0x162>
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	2b18      	cmp	r3, #24
 80099fe:	d137      	bne.n	8009a70 <HAL_RCC_OscConfig+0x1c8>
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d132      	bne.n	8009a70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a0a:	4b38      	ldr	r3, [pc, #224]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d005      	beq.n	8009a22 <HAL_RCC_OscConfig+0x17a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e314      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a22:	4b32      	ldr	r3, [pc, #200]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f023 0219 	bic.w	r2, r3, #25
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	492f      	ldr	r1, [pc, #188]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a34:	f7fa f81c 	bl	8003a70 <HAL_GetTick>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a3c:	f7fa f818 	bl	8003a70 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e2fe      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a4e:	4b27      	ldr	r3, [pc, #156]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a5a:	4b24      	ldr	r3, [pc, #144]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	4920      	ldr	r1, [pc, #128]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a6e:	e045      	b.n	8009afc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d026      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a78:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f023 0219 	bic.w	r2, r3, #25
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	4919      	ldr	r1, [pc, #100]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8a:	f7f9 fff1 	bl	8003a70 <HAL_GetTick>
 8009a8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a92:	f7f9 ffed 	bl	8003a70 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e2d3      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aa4:	4b11      	ldr	r3, [pc, #68]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0f0      	beq.n	8009a92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab0:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	061b      	lsls	r3, r3, #24
 8009abe:	490b      	ldr	r1, [pc, #44]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	604b      	str	r3, [r1, #4]
 8009ac4:	e01a      	b.n	8009afc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ac6:	4b09      	ldr	r3, [pc, #36]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a08      	ldr	r2, [pc, #32]	; (8009aec <HAL_RCC_OscConfig+0x244>)
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad2:	f7f9 ffcd 	bl	8003a70 <HAL_GetTick>
 8009ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ad8:	e00a      	b.n	8009af0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ada:	f7f9 ffc9 	bl	8003a70 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d903      	bls.n	8009af0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e2af      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
 8009aec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009af0:	4b96      	ldr	r3, [pc, #600]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1ee      	bne.n	8009ada <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d06a      	beq.n	8009bde <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b08:	4b90      	ldr	r3, [pc, #576]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b12:	4b8e      	ldr	r3, [pc, #568]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	d007      	beq.n	8009b2e <HAL_RCC_OscConfig+0x286>
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b18      	cmp	r3, #24
 8009b22:	d11b      	bne.n	8009b5c <HAL_RCC_OscConfig+0x2b4>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d116      	bne.n	8009b5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b2e:	4b87      	ldr	r3, [pc, #540]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_RCC_OscConfig+0x29e>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	2b80      	cmp	r3, #128	; 0x80
 8009b40:	d001      	beq.n	8009b46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e282      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b46:	4b81      	ldr	r3, [pc, #516]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	061b      	lsls	r3, r3, #24
 8009b54:	497d      	ldr	r1, [pc, #500]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b5a:	e040      	b.n	8009bde <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d023      	beq.n	8009bac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b64:	4b79      	ldr	r3, [pc, #484]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a78      	ldr	r2, [pc, #480]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b70:	f7f9 ff7e 	bl	8003a70 <HAL_GetTick>
 8009b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b76:	e008      	b.n	8009b8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b78:	f7f9 ff7a 	bl	8003a70 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d901      	bls.n	8009b8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e260      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b8a:	4b70      	ldr	r3, [pc, #448]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0f0      	beq.n	8009b78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b96:	4b6d      	ldr	r3, [pc, #436]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	061b      	lsls	r3, r3, #24
 8009ba4:	4969      	ldr	r1, [pc, #420]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60cb      	str	r3, [r1, #12]
 8009baa:	e018      	b.n	8009bde <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bac:	4b67      	ldr	r3, [pc, #412]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a66      	ldr	r2, [pc, #408]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb8:	f7f9 ff5a 	bl	8003a70 <HAL_GetTick>
 8009bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bc0:	f7f9 ff56 	bl	8003a70 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e23c      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bd2:	4b5e      	ldr	r3, [pc, #376]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1f0      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0308 	and.w	r3, r3, #8
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d036      	beq.n	8009c58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d019      	beq.n	8009c26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bf2:	4b56      	ldr	r3, [pc, #344]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf6:	4a55      	ldr	r2, [pc, #340]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bfe:	f7f9 ff37 	bl	8003a70 <HAL_GetTick>
 8009c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c04:	e008      	b.n	8009c18 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c06:	f7f9 ff33 	bl	8003a70 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d901      	bls.n	8009c18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e219      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c18:	4b4c      	ldr	r3, [pc, #304]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0f0      	beq.n	8009c06 <HAL_RCC_OscConfig+0x35e>
 8009c24:	e018      	b.n	8009c58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c26:	4b49      	ldr	r3, [pc, #292]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c2a:	4a48      	ldr	r2, [pc, #288]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c32:	f7f9 ff1d 	bl	8003a70 <HAL_GetTick>
 8009c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c38:	e008      	b.n	8009c4c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c3a:	f7f9 ff19 	bl	8003a70 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e1ff      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c4c:	4b3f      	ldr	r3, [pc, #252]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f0      	bne.n	8009c3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0320 	and.w	r3, r3, #32
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d036      	beq.n	8009cd2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d019      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c6c:	4b37      	ldr	r3, [pc, #220]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a36      	ldr	r2, [pc, #216]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c78:	f7f9 fefa 	bl	8003a70 <HAL_GetTick>
 8009c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c80:	f7f9 fef6 	bl	8003a70 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e1dc      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c92:	4b2e      	ldr	r3, [pc, #184]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0f0      	beq.n	8009c80 <HAL_RCC_OscConfig+0x3d8>
 8009c9e:	e018      	b.n	8009cd2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ca0:	4b2a      	ldr	r3, [pc, #168]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a29      	ldr	r2, [pc, #164]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009caa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cac:	f7f9 fee0 	bl	8003a70 <HAL_GetTick>
 8009cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cb4:	f7f9 fedc 	bl	8003a70 <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d901      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e1c2      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cc6:	4b21      	ldr	r3, [pc, #132]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f0      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8086 	beq.w	8009dec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ce0:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <HAL_RCC_OscConfig+0x4a8>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a1a      	ldr	r2, [pc, #104]	; (8009d50 <HAL_RCC_OscConfig+0x4a8>)
 8009ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cec:	f7f9 fec0 	bl	8003a70 <HAL_GetTick>
 8009cf0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cf2:	e008      	b.n	8009d06 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cf4:	f7f9 febc 	bl	8003a70 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b64      	cmp	r3, #100	; 0x64
 8009d00:	d901      	bls.n	8009d06 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e1a2      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d06:	4b12      	ldr	r3, [pc, #72]	; (8009d50 <HAL_RCC_OscConfig+0x4a8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0f0      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d106      	bne.n	8009d28 <HAL_RCC_OscConfig+0x480>
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1e:	4a0b      	ldr	r2, [pc, #44]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d20:	f043 0301 	orr.w	r3, r3, #1
 8009d24:	6713      	str	r3, [r2, #112]	; 0x70
 8009d26:	e032      	b.n	8009d8e <HAL_RCC_OscConfig+0x4e6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d111      	bne.n	8009d54 <HAL_RCC_OscConfig+0x4ac>
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a05      	ldr	r2, [pc, #20]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d36:	f023 0301 	bic.w	r3, r3, #1
 8009d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3c:	4b03      	ldr	r3, [pc, #12]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	4a02      	ldr	r2, [pc, #8]	; (8009d4c <HAL_RCC_OscConfig+0x4a4>)
 8009d42:	f023 0304 	bic.w	r3, r3, #4
 8009d46:	6713      	str	r3, [r2, #112]	; 0x70
 8009d48:	e021      	b.n	8009d8e <HAL_RCC_OscConfig+0x4e6>
 8009d4a:	bf00      	nop
 8009d4c:	58024400 	.word	0x58024400
 8009d50:	58024800 	.word	0x58024800
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b05      	cmp	r3, #5
 8009d5a:	d10c      	bne.n	8009d76 <HAL_RCC_OscConfig+0x4ce>
 8009d5c:	4b83      	ldr	r3, [pc, #524]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d60:	4a82      	ldr	r2, [pc, #520]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d62:	f043 0304 	orr.w	r3, r3, #4
 8009d66:	6713      	str	r3, [r2, #112]	; 0x70
 8009d68:	4b80      	ldr	r3, [pc, #512]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6c:	4a7f      	ldr	r2, [pc, #508]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d6e:	f043 0301 	orr.w	r3, r3, #1
 8009d72:	6713      	str	r3, [r2, #112]	; 0x70
 8009d74:	e00b      	b.n	8009d8e <HAL_RCC_OscConfig+0x4e6>
 8009d76:	4b7d      	ldr	r3, [pc, #500]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7a:	4a7c      	ldr	r2, [pc, #496]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	6713      	str	r3, [r2, #112]	; 0x70
 8009d82:	4b7a      	ldr	r3, [pc, #488]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	4a79      	ldr	r2, [pc, #484]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009d88:	f023 0304 	bic.w	r3, r3, #4
 8009d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d015      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d96:	f7f9 fe6b 	bl	8003a70 <HAL_GetTick>
 8009d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d9c:	e00a      	b.n	8009db4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d9e:	f7f9 fe67 	bl	8003a70 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e14b      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db4:	4b6d      	ldr	r3, [pc, #436]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0ee      	beq.n	8009d9e <HAL_RCC_OscConfig+0x4f6>
 8009dc0:	e014      	b.n	8009dec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc2:	f7f9 fe55 	bl	8003a70 <HAL_GetTick>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dca:	f7f9 fe51 	bl	8003a70 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e135      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009de0:	4b62      	ldr	r3, [pc, #392]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1ee      	bne.n	8009dca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 812a 	beq.w	800a04a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009df6:	4b5d      	ldr	r3, [pc, #372]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfe:	2b18      	cmp	r3, #24
 8009e00:	f000 80ba 	beq.w	8009f78 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	f040 8095 	bne.w	8009f38 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e0e:	4b57      	ldr	r3, [pc, #348]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a56      	ldr	r2, [pc, #344]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1a:	f7f9 fe29 	bl	8003a70 <HAL_GetTick>
 8009e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e20:	e008      	b.n	8009e34 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e22:	f7f9 fe25 	bl	8003a70 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d901      	bls.n	8009e34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e10b      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e34:	4b4d      	ldr	r3, [pc, #308]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1f0      	bne.n	8009e22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e40:	4b4a      	ldr	r3, [pc, #296]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e44:	4b4a      	ldr	r3, [pc, #296]	; (8009f70 <HAL_RCC_OscConfig+0x6c8>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e50:	0112      	lsls	r2, r2, #4
 8009e52:	430a      	orrs	r2, r1
 8009e54:	4945      	ldr	r1, [pc, #276]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	628b      	str	r3, [r1, #40]	; 0x28
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	025b      	lsls	r3, r3, #9
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	3b01      	subs	r3, #1
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e82:	3b01      	subs	r3, #1
 8009e84:	061b      	lsls	r3, r3, #24
 8009e86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e8a:	4938      	ldr	r1, [pc, #224]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e90:	4b36      	ldr	r3, [pc, #216]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a35      	ldr	r2, [pc, #212]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e96:	f023 0301 	bic.w	r3, r3, #1
 8009e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e9c:	4b33      	ldr	r3, [pc, #204]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea0:	4b34      	ldr	r3, [pc, #208]	; (8009f74 <HAL_RCC_OscConfig+0x6cc>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ea8:	00d2      	lsls	r2, r2, #3
 8009eaa:	4930      	ldr	r1, [pc, #192]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009eb0:	4b2e      	ldr	r3, [pc, #184]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	f023 020c 	bic.w	r2, r3, #12
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	492b      	ldr	r1, [pc, #172]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	f023 0202 	bic.w	r2, r3, #2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ece:	4927      	ldr	r1, [pc, #156]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ed4:	4b25      	ldr	r3, [pc, #148]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	4a24      	ldr	r2, [pc, #144]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4b22      	ldr	r3, [pc, #136]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a21      	ldr	r2, [pc, #132]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009eec:	4b1f      	ldr	r3, [pc, #124]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef0:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ef8:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f10:	f7f9 fdae 	bl	8003a70 <HAL_GetTick>
 8009f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f16:	e008      	b.n	8009f2a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f18:	f7f9 fdaa 	bl	8003a70 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d901      	bls.n	8009f2a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e090      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f2a:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0f0      	beq.n	8009f18 <HAL_RCC_OscConfig+0x670>
 8009f36:	e088      	b.n	800a04a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f38:	4b0c      	ldr	r3, [pc, #48]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f44:	f7f9 fd94 	bl	8003a70 <HAL_GetTick>
 8009f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f4a:	e008      	b.n	8009f5e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f4c:	f7f9 fd90 	bl	8003a70 <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e076      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f5e:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <HAL_RCC_OscConfig+0x6c4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f0      	bne.n	8009f4c <HAL_RCC_OscConfig+0x6a4>
 8009f6a:	e06e      	b.n	800a04a <HAL_RCC_OscConfig+0x7a2>
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	fffffc0c 	.word	0xfffffc0c
 8009f74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f78:	4b36      	ldr	r3, [pc, #216]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f7e:	4b35      	ldr	r3, [pc, #212]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d031      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f003 0203 	and.w	r2, r3, #3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d12a      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	091b      	lsrs	r3, r3, #4
 8009f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d122      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d11a      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d111      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	0c1b      	lsrs	r3, r3, #16
 8009fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d108      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	0e1b      	lsrs	r3, r3, #24
 8009fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e02b      	b.n	800a04c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ff4:	4b17      	ldr	r3, [pc, #92]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	08db      	lsrs	r3, r3, #3
 8009ffa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ffe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	429a      	cmp	r2, r3
 800a008:	d01f      	beq.n	800a04a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a00a:	4b12      	ldr	r3, [pc, #72]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	4a11      	ldr	r2, [pc, #68]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a016:	f7f9 fd2b 	bl	8003a70 <HAL_GetTick>
 800a01a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a01c:	bf00      	nop
 800a01e:	f7f9 fd27 	bl	8003a70 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	4293      	cmp	r3, r2
 800a028:	d0f9      	beq.n	800a01e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a02a:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a02c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a02e:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <HAL_RCC_OscConfig+0x7b0>)
 800a030:	4013      	ands	r3, r2
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a036:	00d2      	lsls	r2, r2, #3
 800a038:	4906      	ldr	r1, [pc, #24]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	4a04      	ldr	r2, [pc, #16]	; (800a054 <HAL_RCC_OscConfig+0x7ac>)
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3730      	adds	r7, #48	; 0x30
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400
 800a058:	ffff0007 	.word	0xffff0007

0800a05c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e19c      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a070:	4b8a      	ldr	r3, [pc, #552]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d910      	bls.n	800a0a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a07e:	4b87      	ldr	r3, [pc, #540]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f023 020f 	bic.w	r2, r3, #15
 800a086:	4985      	ldr	r1, [pc, #532]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a08e:	4b83      	ldr	r3, [pc, #524]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d001      	beq.n	800a0a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e184      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d010      	beq.n	800a0ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691a      	ldr	r2, [r3, #16]
 800a0b0:	4b7b      	ldr	r3, [pc, #492]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d908      	bls.n	800a0ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0bc:	4b78      	ldr	r3, [pc, #480]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	4975      	ldr	r1, [pc, #468]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d010      	beq.n	800a0fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	695a      	ldr	r2, [r3, #20]
 800a0de:	4b70      	ldr	r3, [pc, #448]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d908      	bls.n	800a0fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0ea:	4b6d      	ldr	r3, [pc, #436]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	496a      	ldr	r1, [pc, #424]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b00      	cmp	r3, #0
 800a106:	d010      	beq.n	800a12a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	4b64      	ldr	r3, [pc, #400]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a114:	429a      	cmp	r2, r3
 800a116:	d908      	bls.n	800a12a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a118:	4b61      	ldr	r3, [pc, #388]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	495e      	ldr	r1, [pc, #376]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a126:	4313      	orrs	r3, r2
 800a128:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0320 	and.w	r3, r3, #32
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69da      	ldr	r2, [r3, #28]
 800a13a:	4b59      	ldr	r3, [pc, #356]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a142:	429a      	cmp	r2, r3
 800a144:	d908      	bls.n	800a158 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a146:	4b56      	ldr	r3, [pc, #344]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	4953      	ldr	r1, [pc, #332]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a154:	4313      	orrs	r3, r2
 800a156:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d010      	beq.n	800a186 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68da      	ldr	r2, [r3, #12]
 800a168:	4b4d      	ldr	r3, [pc, #308]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	429a      	cmp	r2, r3
 800a172:	d908      	bls.n	800a186 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a174:	4b4a      	ldr	r3, [pc, #296]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	f023 020f 	bic.w	r2, r3, #15
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	4947      	ldr	r1, [pc, #284]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a182:	4313      	orrs	r3, r2
 800a184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d055      	beq.n	800a23e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a192:	4b43      	ldr	r3, [pc, #268]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	4940      	ldr	r1, [pc, #256]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d107      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1ac:	4b3c      	ldr	r3, [pc, #240]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d121      	bne.n	800a1fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e0f6      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d107      	bne.n	800a1d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1c4:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d115      	bne.n	800a1fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e0ea      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d107      	bne.n	800a1ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1dc:	4b30      	ldr	r3, [pc, #192]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e0de      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ec:	4b2c      	ldr	r3, [pc, #176]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e0d6      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1fc:	4b28      	ldr	r3, [pc, #160]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	f023 0207 	bic.w	r2, r3, #7
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4925      	ldr	r1, [pc, #148]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a20e:	f7f9 fc2f 	bl	8003a70 <HAL_GetTick>
 800a212:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a214:	e00a      	b.n	800a22c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a216:	f7f9 fc2b 	bl	8003a70 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	f241 3288 	movw	r2, #5000	; 0x1388
 800a224:	4293      	cmp	r3, r2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e0be      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a22c:	4b1c      	ldr	r3, [pc, #112]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d1eb      	bne.n	800a216 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d010      	beq.n	800a26c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	429a      	cmp	r2, r3
 800a258:	d208      	bcs.n	800a26c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a25a:	4b11      	ldr	r3, [pc, #68]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	f023 020f 	bic.w	r2, r3, #15
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	490e      	ldr	r1, [pc, #56]	; (800a2a0 <HAL_RCC_ClockConfig+0x244>)
 800a268:	4313      	orrs	r3, r2
 800a26a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a26c:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d214      	bcs.n	800a2a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a27a:	4b08      	ldr	r3, [pc, #32]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 020f 	bic.w	r2, r3, #15
 800a282:	4906      	ldr	r1, [pc, #24]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	4313      	orrs	r3, r2
 800a288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	4b04      	ldr	r3, [pc, #16]	; (800a29c <HAL_RCC_ClockConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d005      	beq.n	800a2a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e086      	b.n	800a3aa <HAL_RCC_ClockConfig+0x34e>
 800a29c:	52002000 	.word	0x52002000
 800a2a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d010      	beq.n	800a2d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	4b3f      	ldr	r3, [pc, #252]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d208      	bcs.n	800a2d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2c0:	4b3c      	ldr	r3, [pc, #240]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	4939      	ldr	r1, [pc, #228]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0308 	and.w	r3, r3, #8
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d010      	beq.n	800a300 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	695a      	ldr	r2, [r3, #20]
 800a2e2:	4b34      	ldr	r3, [pc, #208]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d208      	bcs.n	800a300 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2ee:	4b31      	ldr	r3, [pc, #196]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2f0:	69db      	ldr	r3, [r3, #28]
 800a2f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	492e      	ldr	r1, [pc, #184]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0310 	and.w	r3, r3, #16
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d010      	beq.n	800a32e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	699a      	ldr	r2, [r3, #24]
 800a310:	4b28      	ldr	r3, [pc, #160]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a318:	429a      	cmp	r2, r3
 800a31a:	d208      	bcs.n	800a32e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	4922      	ldr	r1, [pc, #136]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	d010      	beq.n	800a35c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69da      	ldr	r2, [r3, #28]
 800a33e:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a346:	429a      	cmp	r2, r3
 800a348:	d208      	bcs.n	800a35c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a34a:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	4917      	ldr	r1, [pc, #92]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a35c:	f000 f89e 	bl	800a49c <HAL_RCC_GetSysClockFreq>
 800a360:	4602      	mov	r2, r0
 800a362:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	4912      	ldr	r1, [pc, #72]	; (800a3b8 <HAL_RCC_ClockConfig+0x35c>)
 800a36e:	5ccb      	ldrb	r3, [r1, r3]
 800a370:	f003 031f 	and.w	r3, r3, #31
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
 800a378:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <HAL_RCC_ClockConfig+0x358>)
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	f003 030f 	and.w	r3, r3, #15
 800a382:	4a0d      	ldr	r2, [pc, #52]	; (800a3b8 <HAL_RCC_ClockConfig+0x35c>)
 800a384:	5cd3      	ldrb	r3, [r2, r3]
 800a386:	f003 031f 	and.w	r3, r3, #31
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <HAL_RCC_ClockConfig+0x360>)
 800a392:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a394:	4a0a      	ldr	r2, [pc, #40]	; (800a3c0 <HAL_RCC_ClockConfig+0x364>)
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a39a:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <HAL_RCC_ClockConfig+0x368>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f9 fb1c 	bl	80039dc <HAL_InitTick>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	58024400 	.word	0x58024400
 800a3b8:	08018574 	.word	0x08018574
 800a3bc:	24000004 	.word	0x24000004
 800a3c0:	24000000 	.word	0x24000000
 800a3c4:	24000008 	.word	0x24000008

0800a3c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08c      	sub	sp, #48	; 0x30
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d12a      	bne.n	800a430 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a3da:	4b2d      	ldr	r3, [pc, #180]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a3dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3e0:	4a2b      	ldr	r2, [pc, #172]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a3e2:	f043 0301 	orr.w	r3, r3, #1
 800a3e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3ea:	4b29      	ldr	r3, [pc, #164]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a3ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a3f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fe:	2302      	movs	r3, #2
 800a400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a402:	2303      	movs	r3, #3
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a406:	2300      	movs	r3, #0
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a40a:	2300      	movs	r3, #0
 800a40c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a40e:	f107 031c 	add.w	r3, r7, #28
 800a412:	4619      	mov	r1, r3
 800a414:	481f      	ldr	r0, [pc, #124]	; (800a494 <HAL_RCC_MCOConfig+0xcc>)
 800a416:	f7fd fc29 	bl	8007c6c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a41a:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	430b      	orrs	r3, r1
 800a428:	4919      	ldr	r1, [pc, #100]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a42e:	e02a      	b.n	800a486 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a430:	4b17      	ldr	r3, [pc, #92]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a436:	4a16      	ldr	r2, [pc, #88]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a438:	f043 0304 	orr.w	r3, r3, #4
 800a43c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a440:	4b13      	ldr	r3, [pc, #76]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a44e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a454:	2302      	movs	r3, #2
 800a456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a458:	2303      	movs	r3, #3
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a460:	2300      	movs	r3, #0
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a464:	f107 031c 	add.w	r3, r7, #28
 800a468:	4619      	mov	r1, r3
 800a46a:	480b      	ldr	r0, [pc, #44]	; (800a498 <HAL_RCC_MCOConfig+0xd0>)
 800a46c:	f7fd fbfe 	bl	8007c6c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a470:	4b07      	ldr	r3, [pc, #28]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	01d9      	lsls	r1, r3, #7
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	430b      	orrs	r3, r1
 800a480:	4903      	ldr	r1, [pc, #12]	; (800a490 <HAL_RCC_MCOConfig+0xc8>)
 800a482:	4313      	orrs	r3, r2
 800a484:	610b      	str	r3, [r1, #16]
}
 800a486:	bf00      	nop
 800a488:	3730      	adds	r7, #48	; 0x30
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	58024400 	.word	0x58024400
 800a494:	58020000 	.word	0x58020000
 800a498:	58020800 	.word	0x58020800

0800a49c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b089      	sub	sp, #36	; 0x24
 800a4a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4a2:	4bb3      	ldr	r3, [pc, #716]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4aa:	2b18      	cmp	r3, #24
 800a4ac:	f200 8155 	bhi.w	800a75a <HAL_RCC_GetSysClockFreq+0x2be>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a51d 	.word	0x0800a51d
 800a4bc:	0800a75b 	.word	0x0800a75b
 800a4c0:	0800a75b 	.word	0x0800a75b
 800a4c4:	0800a75b 	.word	0x0800a75b
 800a4c8:	0800a75b 	.word	0x0800a75b
 800a4cc:	0800a75b 	.word	0x0800a75b
 800a4d0:	0800a75b 	.word	0x0800a75b
 800a4d4:	0800a75b 	.word	0x0800a75b
 800a4d8:	0800a543 	.word	0x0800a543
 800a4dc:	0800a75b 	.word	0x0800a75b
 800a4e0:	0800a75b 	.word	0x0800a75b
 800a4e4:	0800a75b 	.word	0x0800a75b
 800a4e8:	0800a75b 	.word	0x0800a75b
 800a4ec:	0800a75b 	.word	0x0800a75b
 800a4f0:	0800a75b 	.word	0x0800a75b
 800a4f4:	0800a75b 	.word	0x0800a75b
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	0800a75b 	.word	0x0800a75b
 800a500:	0800a75b 	.word	0x0800a75b
 800a504:	0800a75b 	.word	0x0800a75b
 800a508:	0800a75b 	.word	0x0800a75b
 800a50c:	0800a75b 	.word	0x0800a75b
 800a510:	0800a75b 	.word	0x0800a75b
 800a514:	0800a75b 	.word	0x0800a75b
 800a518:	0800a54f 	.word	0x0800a54f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a51c:	4b94      	ldr	r3, [pc, #592]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b00      	cmp	r3, #0
 800a526:	d009      	beq.n	800a53c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a528:	4b91      	ldr	r3, [pc, #580]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	08db      	lsrs	r3, r3, #3
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	4a90      	ldr	r2, [pc, #576]	; (800a774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a534:	fa22 f303 	lsr.w	r3, r2, r3
 800a538:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a53a:	e111      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a53c:	4b8d      	ldr	r3, [pc, #564]	; (800a774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a53e:	61bb      	str	r3, [r7, #24]
      break;
 800a540:	e10e      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a542:	4b8d      	ldr	r3, [pc, #564]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a544:	61bb      	str	r3, [r7, #24]
      break;
 800a546:	e10b      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a548:	4b8c      	ldr	r3, [pc, #560]	; (800a77c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a54a:	61bb      	str	r3, [r7, #24]
      break;
 800a54c:	e108      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a54e:	4b88      	ldr	r3, [pc, #544]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a558:	4b85      	ldr	r3, [pc, #532]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	091b      	lsrs	r3, r3, #4
 800a55e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a562:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a564:	4b82      	ldr	r3, [pc, #520]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a56e:	4b80      	ldr	r3, [pc, #512]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a572:	08db      	lsrs	r3, r3, #3
 800a574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	fb02 f303 	mul.w	r3, r2, r3
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a586:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 80e1 	beq.w	800a754 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b02      	cmp	r3, #2
 800a596:	f000 8083 	beq.w	800a6a0 <HAL_RCC_GetSysClockFreq+0x204>
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	f200 80a1 	bhi.w	800a6e4 <HAL_RCC_GetSysClockFreq+0x248>
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_RCC_GetSysClockFreq+0x114>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d056      	beq.n	800a65c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5ae:	e099      	b.n	800a6e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5b0:	4b6f      	ldr	r3, [pc, #444]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d02d      	beq.n	800a618 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5bc:	4b6c      	ldr	r3, [pc, #432]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	08db      	lsrs	r3, r3, #3
 800a5c2:	f003 0303 	and.w	r3, r3, #3
 800a5c6:	4a6b      	ldr	r2, [pc, #428]	; (800a774 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e6:	4b62      	ldr	r3, [pc, #392]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a612:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a616:	e087      	b.n	800a728 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a784 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62a:	4b51      	ldr	r3, [pc, #324]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a63e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a656:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a65a:	e065      	b.n	800a728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a66e:	4b40      	ldr	r3, [pc, #256]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a67e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a682:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a68e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a69e:	e043      	b.n	800a728 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a78c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b2:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6e2:	e021      	b.n	800a728 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f6:	4b1e      	ldr	r3, [pc, #120]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a706:	ed97 6a02 	vldr	s12, [r7, #8]
 800a70a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a780 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a726:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a728:	4b11      	ldr	r3, [pc, #68]	; (800a770 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	0a5b      	lsrs	r3, r3, #9
 800a72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a732:	3301      	adds	r3, #1
 800a734:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a740:	edd7 6a07 	vldr	s13, [r7, #28]
 800a744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a74c:	ee17 3a90 	vmov	r3, s15
 800a750:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a752:	e005      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]
      break;
 800a758:	e002      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a75a:	4b07      	ldr	r3, [pc, #28]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a75c:	61bb      	str	r3, [r7, #24]
      break;
 800a75e:	bf00      	nop
  }

  return sysclockfreq;
 800a760:	69bb      	ldr	r3, [r7, #24]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3724      	adds	r7, #36	; 0x24
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	58024400 	.word	0x58024400
 800a774:	03d09000 	.word	0x03d09000
 800a778:	003d0900 	.word	0x003d0900
 800a77c:	02faf080 	.word	0x02faf080
 800a780:	46000000 	.word	0x46000000
 800a784:	4c742400 	.word	0x4c742400
 800a788:	4a742400 	.word	0x4a742400
 800a78c:	4c3ebc20 	.word	0x4c3ebc20

0800a790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a796:	f7ff fe81 	bl	800a49c <HAL_RCC_GetSysClockFreq>
 800a79a:	4602      	mov	r2, r0
 800a79c:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	0a1b      	lsrs	r3, r3, #8
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	490f      	ldr	r1, [pc, #60]	; (800a7e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7a8:	5ccb      	ldrb	r3, [r1, r3]
 800a7aa:	f003 031f 	and.w	r3, r3, #31
 800a7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7b4:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	4a09      	ldr	r2, [pc, #36]	; (800a7e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7be:	5cd3      	ldrb	r3, [r2, r3]
 800a7c0:	f003 031f 	and.w	r3, r3, #31
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ca:	4a07      	ldr	r2, [pc, #28]	; (800a7e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7ce:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7d4:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	58024400 	.word	0x58024400
 800a7e4:	08018574 	.word	0x08018574
 800a7e8:	24000004 	.word	0x24000004
 800a7ec:	24000000 	.word	0x24000000

0800a7f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7f4:	f7ff ffcc 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	4b06      	ldr	r3, [pc, #24]	; (800a814 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	091b      	lsrs	r3, r3, #4
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	4904      	ldr	r1, [pc, #16]	; (800a818 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a806:	5ccb      	ldrb	r3, [r1, r3]
 800a808:	f003 031f 	and.w	r3, r3, #31
 800a80c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a810:	4618      	mov	r0, r3
 800a812:	bd80      	pop	{r7, pc}
 800a814:	58024400 	.word	0x58024400
 800a818:	08018574 	.word	0x08018574

0800a81c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a820:	f7ff ffb6 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800a824:	4602      	mov	r2, r0
 800a826:	4b06      	ldr	r3, [pc, #24]	; (800a840 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f003 0307 	and.w	r3, r3, #7
 800a830:	4904      	ldr	r1, [pc, #16]	; (800a844 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a832:	5ccb      	ldrb	r3, [r1, r3]
 800a834:	f003 031f 	and.w	r3, r3, #31
 800a838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	58024400 	.word	0x58024400
 800a844:	08018574 	.word	0x08018574

0800a848 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a84c:	b0c6      	sub	sp, #280	; 0x118
 800a84e:	af00      	add	r7, sp, #0
 800a850:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a854:	2300      	movs	r3, #0
 800a856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a86c:	2500      	movs	r5, #0
 800a86e:	ea54 0305 	orrs.w	r3, r4, r5
 800a872:	d049      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a87e:	d02f      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a884:	d828      	bhi.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a88a:	d01a      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a88c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a890:	d822      	bhi.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a89a:	d007      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a89c:	e01c      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a89e:	4bab      	ldr	r3, [pc, #684]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a2:	4aaa      	ldr	r2, [pc, #680]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8aa:	e01a      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f002 fa49 	bl	800cd4c <RCCEx_PLL2_Config>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8c0:	e00f      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c6:	3328      	adds	r3, #40	; 0x28
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f002 faf0 	bl	800ceb0 <RCCEx_PLL3_Config>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8d6:	e004      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8de:	e000      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10a      	bne.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8ea:	4b98      	ldr	r3, [pc, #608]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f8:	4a94      	ldr	r2, [pc, #592]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8fa:	430b      	orrs	r3, r1
 800a8fc:	6513      	str	r3, [r2, #80]	; 0x50
 800a8fe:	e003      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a900:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a914:	f04f 0900 	mov.w	r9, #0
 800a918:	ea58 0309 	orrs.w	r3, r8, r9
 800a91c:	d047      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a924:	2b04      	cmp	r3, #4
 800a926:	d82a      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a945 	.word	0x0800a945
 800a934:	0800a953 	.word	0x0800a953
 800a938:	0800a969 	.word	0x0800a969
 800a93c:	0800a987 	.word	0x0800a987
 800a940:	0800a987 	.word	0x0800a987
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a944:	4b81      	ldr	r3, [pc, #516]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	4a80      	ldr	r2, [pc, #512]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a94a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a94e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a950:	e01a      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a956:	3308      	adds	r3, #8
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f002 f9f6 	bl	800cd4c <RCCEx_PLL2_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a966:	e00f      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	3328      	adds	r3, #40	; 0x28
 800a96e:	2100      	movs	r1, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f002 fa9d 	bl	800ceb0 <RCCEx_PLL3_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a97c:	e004      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a984:	e000      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a990:	4b6e      	ldr	r3, [pc, #440]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a994:	f023 0107 	bic.w	r1, r3, #7
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99e:	4a6b      	ldr	r2, [pc, #428]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6513      	str	r3, [r2, #80]	; 0x50
 800a9a4:	e003      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a9ba:	f04f 0b00 	mov.w	fp, #0
 800a9be:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9c2:	d05b      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9cc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9d0:	d03b      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9d6:	d834      	bhi.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9dc:	d037      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9e2:	d82e      	bhi.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9e8:	d033      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9ee:	d828      	bhi.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9f4:	d01a      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a9f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9fa:	d822      	bhi.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d003      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa04:	d007      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa06:	e01c      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa08:	4b50      	ldr	r3, [pc, #320]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	4a4f      	ldr	r2, [pc, #316]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa14:	e01e      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f002 f994 	bl	800cd4c <RCCEx_PLL2_Config>
 800aa24:	4603      	mov	r3, r0
 800aa26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa2a:	e013      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa30:	3328      	adds	r3, #40	; 0x28
 800aa32:	2100      	movs	r1, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f002 fa3b 	bl	800ceb0 <RCCEx_PLL3_Config>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa40:	e008      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa48:	e004      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa4a:	bf00      	nop
 800aa4c:	e002      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa4e:	bf00      	nop
 800aa50:	e000      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10b      	bne.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa5c:	4b3b      	ldr	r3, [pc, #236]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa60:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa6c:	4a37      	ldr	r2, [pc, #220]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa6e:	430b      	orrs	r3, r1
 800aa70:	6593      	str	r3, [r2, #88]	; 0x58
 800aa72:	e003      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa96:	460b      	mov	r3, r1
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	d05d      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaa4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aaa8:	d03b      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aaaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aaae:	d834      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aab4:	d037      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaba:	d82e      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aabc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aac0:	d033      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aac6:	d828      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aacc:	d01a      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aad2:	d822      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aadc:	d007      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aade:	e01c      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	4a19      	ldr	r2, [pc, #100]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaec:	e01e      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f002 f928 	bl	800cd4c <RCCEx_PLL2_Config>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab02:	e013      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab08:	3328      	adds	r3, #40	; 0x28
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f002 f9cf 	bl	800ceb0 <RCCEx_PLL3_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab18:	e008      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab20:	e004      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab22:	bf00      	nop
 800ab24:	e002      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab26:	bf00      	nop
 800ab28:	e000      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10d      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab34:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab44:	4a01      	ldr	r2, [pc, #4]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab46:	430b      	orrs	r3, r1
 800ab48:	6593      	str	r3, [r2, #88]	; 0x58
 800ab4a:	e005      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4313      	orrs	r3, r2
 800ab76:	d03a      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab7e:	2b30      	cmp	r3, #48	; 0x30
 800ab80:	d01f      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab82:	2b30      	cmp	r3, #48	; 0x30
 800ab84:	d819      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d00c      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d815      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d019      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ab92:	2b10      	cmp	r3, #16
 800ab94:	d111      	bne.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab96:	4baa      	ldr	r3, [pc, #680]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	4aa9      	ldr	r2, [pc, #676]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aba2:	e011      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	3308      	adds	r3, #8
 800abaa:	2102      	movs	r1, #2
 800abac:	4618      	mov	r0, r3
 800abae:	f002 f8cd 	bl	800cd4c <RCCEx_PLL2_Config>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abb8:	e006      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abd0:	4b9b      	ldr	r3, [pc, #620]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abde:	4a98      	ldr	r2, [pc, #608]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abe0:	430b      	orrs	r3, r1
 800abe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abe4:	e003      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800abfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abfe:	2300      	movs	r3, #0
 800ac00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d051      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac18:	d035      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac1e:	d82e      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac24:	d031      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac2a:	d828      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac30:	d01a      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac36:	d822      	bhi.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac40:	d007      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac42:	e01c      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac44:	4b7e      	ldr	r3, [pc, #504]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	4a7d      	ldr	r2, [pc, #500]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac50:	e01c      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac56:	3308      	adds	r3, #8
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f002 f876 	bl	800cd4c <RCCEx_PLL2_Config>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac66:	e011      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	3328      	adds	r3, #40	; 0x28
 800ac6e:	2100      	movs	r1, #0
 800ac70:	4618      	mov	r0, r3
 800ac72:	f002 f91d 	bl	800ceb0 <RCCEx_PLL3_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac7c:	e006      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac84:	e002      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac94:	4b6a      	ldr	r3, [pc, #424]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca2:	4a67      	ldr	r2, [pc, #412]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aca4:	430b      	orrs	r3, r1
 800aca6:	6513      	str	r3, [r2, #80]	; 0x50
 800aca8:	e003      	b.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acc2:	2300      	movs	r3, #0
 800acc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800accc:	460b      	mov	r3, r1
 800acce:	4313      	orrs	r3, r2
 800acd0:	d053      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acdc:	d033      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800acde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ace2:	d82c      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ace4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ace8:	d02f      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800acea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acee:	d826      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acf4:	d02b      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800acf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acfa:	d820      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad00:	d012      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad06:	d81a      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d022      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad10:	d115      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad16:	3308      	adds	r3, #8
 800ad18:	2101      	movs	r1, #1
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 f816 	bl	800cd4c <RCCEx_PLL2_Config>
 800ad20:	4603      	mov	r3, r0
 800ad22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad26:	e015      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2c:	3328      	adds	r3, #40	; 0x28
 800ad2e:	2101      	movs	r1, #1
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 f8bd 	bl	800ceb0 <RCCEx_PLL3_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad3c:	e00a      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad44:	e006      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad46:	bf00      	nop
 800ad48:	e004      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad5c:	4b38      	ldr	r3, [pc, #224]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad6a:	4a35      	ldr	r2, [pc, #212]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad70:	e003      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad76:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad94:	460b      	mov	r3, r1
 800ad96:	4313      	orrs	r3, r2
 800ad98:	d058      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ada2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ada6:	d033      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ada8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adac:	d82c      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb2:	d02f      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800adb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb8:	d826      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adbe:	d02b      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800adc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adc4:	d820      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adca:	d012      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800adcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add0:	d81a      	bhi.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d022      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800add6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adda:	d115      	bne.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	3308      	adds	r3, #8
 800ade2:	2101      	movs	r1, #1
 800ade4:	4618      	mov	r0, r3
 800ade6:	f001 ffb1 	bl	800cd4c <RCCEx_PLL2_Config>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adf0:	e015      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	3328      	adds	r3, #40	; 0x28
 800adf8:	2101      	movs	r1, #1
 800adfa:	4618      	mov	r0, r3
 800adfc:	f002 f858 	bl	800ceb0 <RCCEx_PLL3_Config>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae06:	e00a      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae0e:	e006      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae10:	bf00      	nop
 800ae12:	e004      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae14:	bf00      	nop
 800ae16:	e002      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10e      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae26:	4b06      	ldr	r3, [pc, #24]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae36:	4a02      	ldr	r2, [pc, #8]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae3c:	e006      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae3e:	bf00      	nop
 800ae40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	d037      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae76:	d00e      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae7c:	d816      	bhi.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d018      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae86:	d111      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae88:	4bc4      	ldr	r3, [pc, #784]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4ac3      	ldr	r2, [pc, #780]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae94:	e00f      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 ff54 	bl	800cd4c <RCCEx_PLL2_Config>
 800aea4:	4603      	mov	r3, r0
 800aea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeaa:	e004      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aeb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aebe:	4bb7      	ldr	r3, [pc, #732]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aecc:	4ab3      	ldr	r2, [pc, #716]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aece:	430b      	orrs	r3, r1
 800aed0:	6513      	str	r3, [r2, #80]	; 0x50
 800aed2:	e003      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeec:	2300      	movs	r3, #0
 800aeee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aef2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aef6:	460b      	mov	r3, r1
 800aef8:	4313      	orrs	r3, r2
 800aefa:	d039      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af02:	2b03      	cmp	r3, #3
 800af04:	d81c      	bhi.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af49 	.word	0x0800af49
 800af10:	0800af1d 	.word	0x0800af1d
 800af14:	0800af2b 	.word	0x0800af2b
 800af18:	0800af49 	.word	0x0800af49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af1c:	4b9f      	ldr	r3, [pc, #636]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	4a9e      	ldr	r2, [pc, #632]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af28:	e00f      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2e:	3308      	adds	r3, #8
 800af30:	2102      	movs	r1, #2
 800af32:	4618      	mov	r0, r3
 800af34:	f001 ff0a 	bl	800cd4c <RCCEx_PLL2_Config>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af3e:	e004      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af46:	e000      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af52:	4b92      	ldr	r3, [pc, #584]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af56:	f023 0103 	bic.w	r1, r3, #3
 800af5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af60:	4a8e      	ldr	r2, [pc, #568]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af62:	430b      	orrs	r3, r1
 800af64:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af66:	e003      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af80:	2300      	movs	r3, #0
 800af82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af8a:	460b      	mov	r3, r1
 800af8c:	4313      	orrs	r3, r2
 800af8e:	f000 8099 	beq.w	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af92:	4b83      	ldr	r3, [pc, #524]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a82      	ldr	r2, [pc, #520]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af9e:	f7f8 fd67 	bl	8003a70 <HAL_GetTick>
 800afa2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afa6:	e00b      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afa8:	f7f8 fd62 	bl	8003a70 <HAL_GetTick>
 800afac:	4602      	mov	r2, r0
 800afae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	2b64      	cmp	r3, #100	; 0x64
 800afb6:	d903      	bls.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afbe:	e005      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afc0:	4b77      	ldr	r3, [pc, #476]	; (800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d0ed      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d173      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afd4:	4b71      	ldr	r3, [pc, #452]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afe0:	4053      	eors	r3, r2
 800afe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d015      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afea:	4b6c      	ldr	r3, [pc, #432]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aff6:	4b69      	ldr	r3, [pc, #420]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affa:	4a68      	ldr	r2, [pc, #416]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800affc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b000:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b002:	4b66      	ldr	r3, [pc, #408]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	4a65      	ldr	r2, [pc, #404]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b00e:	4a63      	ldr	r2, [pc, #396]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b014:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b01e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b022:	d118      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b024:	f7f8 fd24 	bl	8003a70 <HAL_GetTick>
 800b028:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b02c:	e00d      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b02e:	f7f8 fd1f 	bl	8003a70 <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b038:	1ad2      	subs	r2, r2, r3
 800b03a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b03e:	429a      	cmp	r2, r3
 800b040:	d903      	bls.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b048:	e005      	b.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b04a:	4b54      	ldr	r3, [pc, #336]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0eb      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b056:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d129      	bne.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b06e:	d10e      	bne.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b070:	4b4a      	ldr	r3, [pc, #296]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b080:	091a      	lsrs	r2, r3, #4
 800b082:	4b48      	ldr	r3, [pc, #288]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b084:	4013      	ands	r3, r2
 800b086:	4a45      	ldr	r2, [pc, #276]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b088:	430b      	orrs	r3, r1
 800b08a:	6113      	str	r3, [r2, #16]
 800b08c:	e005      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b08e:	4b43      	ldr	r3, [pc, #268]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	4a42      	ldr	r2, [pc, #264]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b094:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b098:	6113      	str	r3, [r2, #16]
 800b09a:	4b40      	ldr	r3, [pc, #256]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b09c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0aa:	4a3c      	ldr	r2, [pc, #240]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b0:	e008      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b0ba:	e003      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f002 0301 	and.w	r3, r2, #1
 800b0d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	f000 808f 	beq.w	800b204 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ec:	2b28      	cmp	r3, #40	; 0x28
 800b0ee:	d871      	bhi.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b0f0:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b1dd 	.word	0x0800b1dd
 800b0fc:	0800b1d5 	.word	0x0800b1d5
 800b100:	0800b1d5 	.word	0x0800b1d5
 800b104:	0800b1d5 	.word	0x0800b1d5
 800b108:	0800b1d5 	.word	0x0800b1d5
 800b10c:	0800b1d5 	.word	0x0800b1d5
 800b110:	0800b1d5 	.word	0x0800b1d5
 800b114:	0800b1d5 	.word	0x0800b1d5
 800b118:	0800b1a9 	.word	0x0800b1a9
 800b11c:	0800b1d5 	.word	0x0800b1d5
 800b120:	0800b1d5 	.word	0x0800b1d5
 800b124:	0800b1d5 	.word	0x0800b1d5
 800b128:	0800b1d5 	.word	0x0800b1d5
 800b12c:	0800b1d5 	.word	0x0800b1d5
 800b130:	0800b1d5 	.word	0x0800b1d5
 800b134:	0800b1d5 	.word	0x0800b1d5
 800b138:	0800b1bf 	.word	0x0800b1bf
 800b13c:	0800b1d5 	.word	0x0800b1d5
 800b140:	0800b1d5 	.word	0x0800b1d5
 800b144:	0800b1d5 	.word	0x0800b1d5
 800b148:	0800b1d5 	.word	0x0800b1d5
 800b14c:	0800b1d5 	.word	0x0800b1d5
 800b150:	0800b1d5 	.word	0x0800b1d5
 800b154:	0800b1d5 	.word	0x0800b1d5
 800b158:	0800b1dd 	.word	0x0800b1dd
 800b15c:	0800b1d5 	.word	0x0800b1d5
 800b160:	0800b1d5 	.word	0x0800b1d5
 800b164:	0800b1d5 	.word	0x0800b1d5
 800b168:	0800b1d5 	.word	0x0800b1d5
 800b16c:	0800b1d5 	.word	0x0800b1d5
 800b170:	0800b1d5 	.word	0x0800b1d5
 800b174:	0800b1d5 	.word	0x0800b1d5
 800b178:	0800b1dd 	.word	0x0800b1dd
 800b17c:	0800b1d5 	.word	0x0800b1d5
 800b180:	0800b1d5 	.word	0x0800b1d5
 800b184:	0800b1d5 	.word	0x0800b1d5
 800b188:	0800b1d5 	.word	0x0800b1d5
 800b18c:	0800b1d5 	.word	0x0800b1d5
 800b190:	0800b1d5 	.word	0x0800b1d5
 800b194:	0800b1d5 	.word	0x0800b1d5
 800b198:	0800b1dd 	.word	0x0800b1dd
 800b19c:	58024400 	.word	0x58024400
 800b1a0:	58024800 	.word	0x58024800
 800b1a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 fdcb 	bl	800cd4c <RCCEx_PLL2_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1bc:	e00f      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c2:	3328      	adds	r3, #40	; 0x28
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 fe72 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1d2:	e004      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1da:	e000      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1e6:	4bbf      	ldr	r3, [pc, #764]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1f4:	4abb      	ldr	r2, [pc, #748]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1fa:	e003      	b.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f002 0302 	and.w	r3, r2, #2
 800b210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b214:	2300      	movs	r3, #0
 800b216:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b21a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b21e:	460b      	mov	r3, r1
 800b220:	4313      	orrs	r3, r2
 800b222:	d041      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b22a:	2b05      	cmp	r3, #5
 800b22c:	d824      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b22e:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b281 	.word	0x0800b281
 800b238:	0800b24d 	.word	0x0800b24d
 800b23c:	0800b263 	.word	0x0800b263
 800b240:	0800b281 	.word	0x0800b281
 800b244:	0800b281 	.word	0x0800b281
 800b248:	0800b281 	.word	0x0800b281
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b250:	3308      	adds	r3, #8
 800b252:	2101      	movs	r1, #1
 800b254:	4618      	mov	r0, r3
 800b256:	f001 fd79 	bl	800cd4c <RCCEx_PLL2_Config>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b260:	e00f      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b266:	3328      	adds	r3, #40	; 0x28
 800b268:	2101      	movs	r1, #1
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 fe20 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b276:	e004      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b27e:	e000      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b282:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10a      	bne.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b28a:	4b96      	ldr	r3, [pc, #600]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28e:	f023 0107 	bic.w	r1, r3, #7
 800b292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b298:	4a92      	ldr	r2, [pc, #584]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b29a:	430b      	orrs	r3, r1
 800b29c:	6553      	str	r3, [r2, #84]	; 0x54
 800b29e:	e003      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f002 0304 	and.w	r3, r2, #4
 800b2b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	d044      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d0:	2b05      	cmp	r3, #5
 800b2d2:	d825      	bhi.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2d4:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2da:	bf00      	nop
 800b2dc:	0800b329 	.word	0x0800b329
 800b2e0:	0800b2f5 	.word	0x0800b2f5
 800b2e4:	0800b30b 	.word	0x0800b30b
 800b2e8:	0800b329 	.word	0x0800b329
 800b2ec:	0800b329 	.word	0x0800b329
 800b2f0:	0800b329 	.word	0x0800b329
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f8:	3308      	adds	r3, #8
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 fd25 	bl	800cd4c <RCCEx_PLL2_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b308:	e00f      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30e:	3328      	adds	r3, #40	; 0x28
 800b310:	2101      	movs	r1, #1
 800b312:	4618      	mov	r0, r3
 800b314:	f001 fdcc 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b318:	4603      	mov	r3, r0
 800b31a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b31e:	e004      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b326:	e000      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b332:	4b6c      	ldr	r3, [pc, #432]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b336:	f023 0107 	bic.w	r1, r3, #7
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b342:	4a68      	ldr	r2, [pc, #416]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b344:	430b      	orrs	r3, r1
 800b346:	6593      	str	r3, [r2, #88]	; 0x58
 800b348:	e003      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b34e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f002 0320 	and.w	r3, r2, #32
 800b35e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b362:	2300      	movs	r3, #0
 800b364:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b368:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b36c:	460b      	mov	r3, r1
 800b36e:	4313      	orrs	r3, r2
 800b370:	d055      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b37e:	d033      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b384:	d82c      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38a:	d02f      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b38c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b390:	d826      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b396:	d02b      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b398:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b39c:	d820      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a2:	d012      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a8:	d81a      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d022      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b3ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3b2:	d115      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f001 fcc5 	bl	800cd4c <RCCEx_PLL2_Config>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3c8:	e015      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	3328      	adds	r3, #40	; 0x28
 800b3d0:	2102      	movs	r1, #2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f001 fd6c 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3de:	e00a      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3e6:	e006      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3e8:	bf00      	nop
 800b3ea:	e004      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3ec:	bf00      	nop
 800b3ee:	e002      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3f0:	bf00      	nop
 800b3f2:	e000      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10b      	bne.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3fe:	4b39      	ldr	r3, [pc, #228]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b402:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40e:	4a35      	ldr	r2, [pc, #212]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b410:	430b      	orrs	r3, r1
 800b412:	6553      	str	r3, [r2, #84]	; 0x54
 800b414:	e003      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b416:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b41a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b42a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b42e:	2300      	movs	r3, #0
 800b430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b434:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b438:	460b      	mov	r3, r1
 800b43a:	4313      	orrs	r3, r2
 800b43c:	d058      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b446:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b44a:	d033      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b44c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b450:	d82c      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b456:	d02f      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45c:	d826      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b45e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b462:	d02b      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b468:	d820      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b46e:	d012      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b474:	d81a      	bhi.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d022      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b47e:	d115      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b484:	3308      	adds	r3, #8
 800b486:	2100      	movs	r1, #0
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fc5f 	bl	800cd4c <RCCEx_PLL2_Config>
 800b48e:	4603      	mov	r3, r0
 800b490:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b494:	e015      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b49a:	3328      	adds	r3, #40	; 0x28
 800b49c:	2102      	movs	r1, #2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 fd06 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4aa:	e00a      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4b2:	e006      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4b4:	bf00      	nop
 800b4b6:	e004      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4b8:	bf00      	nop
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4bc:	bf00      	nop
 800b4be:	e000      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10e      	bne.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4da:	4a02      	ldr	r2, [pc, #8]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e0:	e006      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4e2:	bf00      	nop
 800b4e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b4fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b500:	2300      	movs	r3, #0
 800b502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b506:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b50a:	460b      	mov	r3, r1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d055      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b518:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b51c:	d033      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b51e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b522:	d82c      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b528:	d02f      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b52a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b52e:	d826      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b530:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b534:	d02b      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b536:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b53a:	d820      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b540:	d012      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b546:	d81a      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d022      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b550:	d115      	bne.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b556:	3308      	adds	r3, #8
 800b558:	2100      	movs	r1, #0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 fbf6 	bl	800cd4c <RCCEx_PLL2_Config>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b566:	e015      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	3328      	adds	r3, #40	; 0x28
 800b56e:	2102      	movs	r1, #2
 800b570:	4618      	mov	r0, r3
 800b572:	f001 fc9d 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b57c:	e00a      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b584:	e006      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b586:	bf00      	nop
 800b588:	e004      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b58a:	bf00      	nop
 800b58c:	e002      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b594:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b59c:	4ba0      	ldr	r3, [pc, #640]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5ac:	4a9c      	ldr	r2, [pc, #624]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b5b2:	e003      	b.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f002 0308 	and.w	r3, r2, #8
 800b5c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	d01e      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e8:	d10c      	bne.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ee:	3328      	adds	r3, #40	; 0x28
 800b5f0:	2102      	movs	r1, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f001 fc5c 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b604:	4b86      	ldr	r3, [pc, #536]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b608:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b614:	4a82      	ldr	r2, [pc, #520]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b616:	430b      	orrs	r3, r1
 800b618:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	f002 0310 	and.w	r3, r2, #16
 800b626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b62a:	2300      	movs	r3, #0
 800b62c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b630:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b634:	460b      	mov	r3, r1
 800b636:	4313      	orrs	r3, r2
 800b638:	d01e      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b646:	d10c      	bne.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	3328      	adds	r3, #40	; 0x28
 800b64e:	2102      	movs	r1, #2
 800b650:	4618      	mov	r0, r3
 800b652:	f001 fc2d 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b662:	4b6f      	ldr	r3, [pc, #444]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b666:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b672:	4a6b      	ldr	r2, [pc, #428]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b674:	430b      	orrs	r3, r1
 800b676:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b684:	67bb      	str	r3, [r7, #120]	; 0x78
 800b686:	2300      	movs	r3, #0
 800b688:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b68a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b68e:	460b      	mov	r3, r1
 800b690:	4313      	orrs	r3, r2
 800b692:	d03e      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b69c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6a0:	d022      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6a6:	d81b      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b6ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b0:	d00b      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b6b2:	e015      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 fb45 	bl	800cd4c <RCCEx_PLL2_Config>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6c8:	e00f      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	3328      	adds	r3, #40	; 0x28
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fbec 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6de:	e004      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6e6:	e000      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b6e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10b      	bne.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6f2:	4b4b      	ldr	r3, [pc, #300]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b702:	4a47      	ldr	r2, [pc, #284]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b704:	430b      	orrs	r3, r1
 800b706:	6593      	str	r3, [r2, #88]	; 0x58
 800b708:	e003      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b70e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b71e:	673b      	str	r3, [r7, #112]	; 0x70
 800b720:	2300      	movs	r3, #0
 800b722:	677b      	str	r3, [r7, #116]	; 0x74
 800b724:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b728:	460b      	mov	r3, r1
 800b72a:	4313      	orrs	r3, r2
 800b72c:	d03b      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b73a:	d01f      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b73c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b740:	d818      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b746:	d003      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b74c:	d007      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b74e:	e011      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b750:	4b33      	ldr	r3, [pc, #204]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	4a32      	ldr	r2, [pc, #200]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b75c:	e00f      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	3328      	adds	r3, #40	; 0x28
 800b764:	2101      	movs	r1, #1
 800b766:	4618      	mov	r0, r3
 800b768:	f001 fba2 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b772:	e004      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b77a:	e000      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b796:	4a22      	ldr	r2, [pc, #136]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b798:	430b      	orrs	r3, r1
 800b79a:	6553      	str	r3, [r2, #84]	; 0x54
 800b79c:	e003      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	d034      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d0:	d007      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7d2:	e011      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d4:	4b12      	ldr	r3, [pc, #72]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d8:	4a11      	ldr	r2, [pc, #68]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7e0:	e00e      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	2102      	movs	r1, #2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f001 faae 	bl	800cd4c <RCCEx_PLL2_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7f6:	e003      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b800:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10d      	bne.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b808:	4b05      	ldr	r3, [pc, #20]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b816:	4a02      	ldr	r2, [pc, #8]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b818:	430b      	orrs	r3, r1
 800b81a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b81c:	e006      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b81e:	bf00      	nop
 800b820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b824:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b838:	663b      	str	r3, [r7, #96]	; 0x60
 800b83a:	2300      	movs	r3, #0
 800b83c:	667b      	str	r3, [r7, #100]	; 0x64
 800b83e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	d00c      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84c:	3328      	adds	r3, #40	; 0x28
 800b84e:	2102      	movs	r1, #2
 800b850:	4618      	mov	r0, r3
 800b852:	f001 fb2d 	bl	800ceb0 <RCCEx_PLL3_Config>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b86e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b870:	2300      	movs	r3, #0
 800b872:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b874:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b878:	460b      	mov	r3, r1
 800b87a:	4313      	orrs	r3, r2
 800b87c:	d036      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b888:	d018      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b88a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b88e:	d811      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b894:	d014      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b89a:	d80b      	bhi.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d011      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a4:	d106      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a6:	4bb7      	ldr	r3, [pc, #732]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8aa:	4ab6      	ldr	r2, [pc, #728]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8b2:	e008      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8ba:	e004      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8bc:	bf00      	nop
 800b8be:	e002      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8c0:	bf00      	nop
 800b8c2:	e000      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10a      	bne.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8ce:	4bad      	ldr	r3, [pc, #692]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8dc:	4aa9      	ldr	r2, [pc, #676]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b8e2:	e003      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b8f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	657b      	str	r3, [r7, #84]	; 0x54
 800b8fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b902:	460b      	mov	r3, r1
 800b904:	4313      	orrs	r3, r2
 800b906:	d009      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b908:	4b9e      	ldr	r3, [pc, #632]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b916:	4a9b      	ldr	r2, [pc, #620]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b918:	430b      	orrs	r3, r1
 800b91a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b928:	64bb      	str	r3, [r7, #72]	; 0x48
 800b92a:	2300      	movs	r3, #0
 800b92c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b92e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b932:	460b      	mov	r3, r1
 800b934:	4313      	orrs	r3, r2
 800b936:	d009      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b938:	4b92      	ldr	r3, [pc, #584]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b946:	4a8f      	ldr	r2, [pc, #572]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b948:	430b      	orrs	r3, r1
 800b94a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b958:	643b      	str	r3, [r7, #64]	; 0x40
 800b95a:	2300      	movs	r3, #0
 800b95c:	647b      	str	r3, [r7, #68]	; 0x44
 800b95e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b962:	460b      	mov	r3, r1
 800b964:	4313      	orrs	r3, r2
 800b966:	d00e      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b968:	4b86      	ldr	r3, [pc, #536]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	4a85      	ldr	r2, [pc, #532]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b96e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b972:	6113      	str	r3, [r2, #16]
 800b974:	4b83      	ldr	r3, [pc, #524]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b976:	6919      	ldr	r1, [r3, #16]
 800b978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b980:	4a80      	ldr	r2, [pc, #512]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b982:	430b      	orrs	r3, r1
 800b984:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b992:	63bb      	str	r3, [r7, #56]	; 0x38
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b998:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b99c:	460b      	mov	r3, r1
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	d009      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9a2:	4b78      	ldr	r3, [pc, #480]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b0:	4a74      	ldr	r2, [pc, #464]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9b2:	430b      	orrs	r3, r1
 800b9b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	d00a      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9d2:	4b6c      	ldr	r3, [pc, #432]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9e2:	4a68      	ldr	r2, [pc, #416]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	d011      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba08:	3308      	adds	r3, #8
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f001 f99d 	bl	800cd4c <RCCEx_PLL2_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	2100      	movs	r1, #0
 800ba32:	6239      	str	r1, [r7, #32]
 800ba34:	f003 0302 	and.w	r3, r3, #2
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d011      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	3308      	adds	r3, #8
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f97d 	bl	800cd4c <RCCEx_PLL2_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	2100      	movs	r1, #0
 800ba72:	61b9      	str	r1, [r7, #24]
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	61fb      	str	r3, [r7, #28]
 800ba7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d011      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	3308      	adds	r3, #8
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 f95d 	bl	800cd4c <RCCEx_PLL2_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	2100      	movs	r1, #0
 800bab2:	6139      	str	r1, [r7, #16]
 800bab4:	f003 0308 	and.w	r3, r3, #8
 800bab8:	617b      	str	r3, [r7, #20]
 800baba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800babe:	460b      	mov	r3, r1
 800bac0:	4313      	orrs	r3, r2
 800bac2:	d011      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2100      	movs	r1, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 f9ef 	bl	800ceb0 <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bae4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	2100      	movs	r1, #0
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	f003 0310 	and.w	r3, r3, #16
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bafe:	460b      	mov	r3, r1
 800bb00:	4313      	orrs	r3, r2
 800bb02:	d011      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	3328      	adds	r3, #40	; 0x28
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 f9cf 	bl	800ceb0 <RCCEx_PLL3_Config>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	2100      	movs	r1, #0
 800bb32:	6039      	str	r1, [r7, #0]
 800bb34:	f003 0320 	and.w	r3, r3, #32
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	d011      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb48:	3328      	adds	r3, #40	; 0x28
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 f9af 	bl	800ceb0 <RCCEx_PLL3_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb68:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	e000      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb82:	bf00      	nop
 800bb84:	58024400 	.word	0x58024400

0800bb88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b090      	sub	sp, #64	; 0x40
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	f040 8094 	bne.w	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bba0:	4b9b      	ldr	r3, [pc, #620]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba4:	f003 0307 	and.w	r3, r3, #7
 800bba8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	2b04      	cmp	r3, #4
 800bbae:	f200 8087 	bhi.w	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bbb2:	a201      	add	r2, pc, #4	; (adr r2, 800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbcd 	.word	0x0800bbcd
 800bbbc:	0800bbf5 	.word	0x0800bbf5
 800bbc0:	0800bc1d 	.word	0x0800bc1d
 800bbc4:	0800bcb9 	.word	0x0800bcb9
 800bbc8:	0800bc45 	.word	0x0800bc45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbcc:	4b90      	ldr	r3, [pc, #576]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbd8:	d108      	bne.n	800bbec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 ff62 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbe8:	f000 bc93 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf0:	f000 bc8f 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbf4:	4b86      	ldr	r3, [pc, #536]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc00:	d108      	bne.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc02:	f107 0318 	add.w	r3, r7, #24
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 fca6 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc10:	f000 bc7f 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc18:	f000 bc7b 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc1c:	4b7c      	ldr	r3, [pc, #496]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc28:	d108      	bne.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fde6 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc38:	f000 bc6b 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc40:	f000 bc67 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc44:	4b72      	ldr	r3, [pc, #456]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc4e:	4b70      	ldr	r3, [pc, #448]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d10c      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc60:	4b6b      	ldr	r3, [pc, #428]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	08db      	lsrs	r3, r3, #3
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	4a6a      	ldr	r2, [pc, #424]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc72:	e01f      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc74:	4b66      	ldr	r3, [pc, #408]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc80:	d106      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc88:	d102      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc8a:	4b63      	ldr	r3, [pc, #396]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc8e:	e011      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc90:	4b5f      	ldr	r3, [pc, #380]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc9c:	d106      	bne.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca4:	d102      	bne.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bca6:	4b5d      	ldr	r3, [pc, #372]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcaa:	e003      	b.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcb0:	f000 bc2f 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcb4:	f000 bc2d 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcb8:	4b59      	ldr	r3, [pc, #356]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcbc:	f000 bc29 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc4:	f000 bc25 	b.w	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bcc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bccc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	f040 80a7 	bne.w	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcd6:	4b4e      	ldr	r3, [pc, #312]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bcde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bce6:	d054      	beq.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcee:	f200 808b 	bhi.w	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcf8:	f000 8083 	beq.w	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd02:	f200 8081 	bhi.w	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd0c:	d02f      	beq.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd14:	d878      	bhi.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd22:	d012      	beq.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd24:	e070      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd26:	4b3a      	ldr	r3, [pc, #232]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd32:	d107      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 feb5 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd42:	e3e6      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd48:	e3e3      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd4a:	4b31      	ldr	r3, [pc, #196]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd56:	d107      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd58:	f107 0318 	add.w	r3, r7, #24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fbfb 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd66:	e3d4      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd6c:	e3d1      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd6e:	4b28      	ldr	r3, [pc, #160]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd7a:	d107      	bne.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 fd3d 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd8a:	e3c2      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd90:	e3bf      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd92:	4b1f      	ldr	r3, [pc, #124]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd9c:	4b1c      	ldr	r3, [pc, #112]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0304 	and.w	r3, r3, #4
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d10c      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d109      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdae:	4b18      	ldr	r3, [pc, #96]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	08db      	lsrs	r3, r3, #3
 800bdb4:	f003 0303 	and.w	r3, r3, #3
 800bdb8:	4a16      	ldr	r2, [pc, #88]	; (800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bdba:	fa22 f303 	lsr.w	r3, r2, r3
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc0:	e01e      	b.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdc2:	4b13      	ldr	r3, [pc, #76]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdce:	d106      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdd6:	d102      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdd8:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bddc:	e010      	b.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdde:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bde6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdea:	d106      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bdec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdf2:	d102      	bne.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdf4:	4b09      	ldr	r3, [pc, #36]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf8:	e002      	b.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdfe:	e388      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be00:	e387      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be06:	e384      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be0c:	e381      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be0e:	bf00      	nop
 800be10:	58024400 	.word	0x58024400
 800be14:	03d09000 	.word	0x03d09000
 800be18:	003d0900 	.word	0x003d0900
 800be1c:	02faf080 	.word	0x02faf080
 800be20:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be28:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be2c:	430b      	orrs	r3, r1
 800be2e:	f040 809c 	bne.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be32:	4b9e      	ldr	r3, [pc, #632]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be3a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be42:	d054      	beq.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be4a:	f200 808b 	bhi.w	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be54:	f000 8083 	beq.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be5e:	f200 8081 	bhi.w	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be68:	d02f      	beq.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be70:	d878      	bhi.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be7e:	d012      	beq.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be80:	e070      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be82:	4b8a      	ldr	r3, [pc, #552]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be8e:	d107      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fe07 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be9e:	e338      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea4:	e335      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bea6:	4b81      	ldr	r3, [pc, #516]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beb2:	d107      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb4:	f107 0318 	add.w	r3, r7, #24
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 fb4d 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec2:	e326      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec8:	e323      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beca:	4b78      	ldr	r3, [pc, #480]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed6:	d107      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed8:	f107 030c 	add.w	r3, r7, #12
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fc8f 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee6:	e314      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beec:	e311      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beee:	4b6f      	ldr	r3, [pc, #444]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bef6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bef8:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d10c      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf0a:	4b68      	ldr	r3, [pc, #416]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	08db      	lsrs	r3, r3, #3
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	4a66      	ldr	r2, [pc, #408]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf16:	fa22 f303 	lsr.w	r3, r2, r3
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf1c:	e01e      	b.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf1e:	4b63      	ldr	r3, [pc, #396]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf2a:	d106      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf32:	d102      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf34:	4b5f      	ldr	r3, [pc, #380]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf38:	e010      	b.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf3a:	4b5c      	ldr	r3, [pc, #368]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf46:	d106      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf4e:	d102      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf50:	4b59      	ldr	r3, [pc, #356]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf54:	e002      	b.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf5a:	e2da      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf5c:	e2d9      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf5e:	4b57      	ldr	r3, [pc, #348]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf62:	e2d6      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf68:	e2d3      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf72:	430b      	orrs	r3, r1
 800bf74:	f040 80a7 	bne.w	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf78:	4b4c      	ldr	r3, [pc, #304]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf80:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf88:	d055      	beq.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	f200 8096 	bhi.w	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf9a:	f000 8084 	beq.w	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfa4:	f200 808c 	bhi.w	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfae:	d030      	beq.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfb6:	f200 8083 	bhi.w	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc6:	d012      	beq.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bfc8:	e07a      	b.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfca:	4b38      	ldr	r3, [pc, #224]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfd6:	d107      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 fd63 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe6:	e294      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfec:	e291      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfee:	4b2f      	ldr	r3, [pc, #188]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bffa:	d107      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffc:	f107 0318 	add.w	r3, r7, #24
 800c000:	4618      	mov	r0, r3
 800c002:	f000 faa9 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00a:	e282      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c010:	e27f      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c012:	4b26      	ldr	r3, [pc, #152]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c01a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c01e:	d107      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fbeb 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02e:	e270      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	e26d      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c036:	4b1d      	ldr	r3, [pc, #116]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c03e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c040:	4b1a      	ldr	r3, [pc, #104]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d10c      	bne.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c052:	4b16      	ldr	r3, [pc, #88]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	08db      	lsrs	r3, r3, #3
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	4a14      	ldr	r2, [pc, #80]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c05e:	fa22 f303 	lsr.w	r3, r2, r3
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c064:	e01e      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c066:	4b11      	ldr	r3, [pc, #68]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c072:	d106      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c07a:	d102      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c07c:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c080:	e010      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c082:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c08e:	d106      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c096:	d102      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c098:	4b07      	ldr	r3, [pc, #28]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09c:	e002      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0a2:	e236      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0a4:	e235      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0a6:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0aa:	e232      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0ac:	58024400 	.word	0x58024400
 800c0b0:	03d09000 	.word	0x03d09000
 800c0b4:	003d0900 	.word	0x003d0900
 800c0b8:	02faf080 	.word	0x02faf080
 800c0bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c4:	e225      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c0ce:	430b      	orrs	r3, r1
 800c0d0:	f040 8085 	bne.w	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0d4:	4b9c      	ldr	r3, [pc, #624]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0e4:	d06b      	beq.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0ec:	d874      	bhi.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0f4:	d056      	beq.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0fc:	d86c      	bhi.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c104:	d03b      	beq.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c10c:	d864      	bhi.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c114:	d021      	beq.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11c:	d85c      	bhi.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12a:	d004      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c12c:	e054      	b.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c12e:	f7fe fb5f 	bl	800a7f0 <HAL_RCC_GetPCLK1Freq>
 800c132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c134:	e1ed      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c136:	4b84      	ldr	r3, [pc, #528]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c13e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c142:	d107      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c144:	f107 0318 	add.w	r3, r7, #24
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fa05 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c152:	e1de      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c158:	e1db      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c15a:	4b7b      	ldr	r3, [pc, #492]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c166:	d107      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c168:	f107 030c 	add.w	r3, r7, #12
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 fb47 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c176:	e1cc      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17c:	e1c9      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c17e:	4b72      	ldr	r3, [pc, #456]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b04      	cmp	r3, #4
 800c188:	d109      	bne.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c18a:	4b6f      	ldr	r3, [pc, #444]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	08db      	lsrs	r3, r3, #3
 800c190:	f003 0303 	and.w	r3, r3, #3
 800c194:	4a6d      	ldr	r2, [pc, #436]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c196:	fa22 f303 	lsr.w	r3, r2, r3
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19c:	e1b9      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a2:	e1b6      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1a4:	4b68      	ldr	r3, [pc, #416]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b0:	d102      	bne.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c1b2:	4b67      	ldr	r3, [pc, #412]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b6:	e1ac      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1bc:	e1a9      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1be:	4b62      	ldr	r3, [pc, #392]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ca:	d102      	bne.n	800c1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c1cc:	4b61      	ldr	r3, [pc, #388]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d0:	e19f      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d6:	e19c      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1dc:	e199      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c1e6:	430b      	orrs	r3, r1
 800c1e8:	d173      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1ea:	4b57      	ldr	r3, [pc, #348]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1fa:	d02f      	beq.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c202:	d863      	bhi.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	2b00      	cmp	r3, #0
 800c208:	d004      	beq.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c210:	d012      	beq.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c212:	e05b      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c214:	4b4c      	ldr	r3, [pc, #304]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c21c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c220:	d107      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c222:	f107 0318 	add.w	r3, r7, #24
 800c226:	4618      	mov	r0, r3
 800c228:	f000 f996 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c230:	e16f      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c236:	e16c      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c238:	4b43      	ldr	r3, [pc, #268]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c244:	d107      	bne.n	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c246:	f107 030c 	add.w	r3, r7, #12
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 fad8 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c254:	e15d      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25a:	e15a      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c25c:	4b3a      	ldr	r3, [pc, #232]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c264:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c266:	4b38      	ldr	r3, [pc, #224]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0304 	and.w	r3, r3, #4
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d10c      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c274:	2b00      	cmp	r3, #0
 800c276:	d109      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c278:	4b33      	ldr	r3, [pc, #204]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	08db      	lsrs	r3, r3, #3
 800c27e:	f003 0303 	and.w	r3, r3, #3
 800c282:	4a32      	ldr	r2, [pc, #200]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c284:	fa22 f303 	lsr.w	r3, r2, r3
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c28a:	e01e      	b.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c28c:	4b2e      	ldr	r3, [pc, #184]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c298:	d106      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a0:	d102      	bne.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2a2:	4b2b      	ldr	r3, [pc, #172]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a6:	e010      	b.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2a8:	4b27      	ldr	r3, [pc, #156]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2b4:	d106      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2bc:	d102      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2be:	4b25      	ldr	r3, [pc, #148]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c2:	e002      	b.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2c8:	e123      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2ca:	e122      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d0:	e11f      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	d13c      	bne.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2de:	4b1a      	ldr	r3, [pc, #104]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d004      	beq.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2f4:	d012      	beq.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c2f6:	e023      	b.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2f8:	4b13      	ldr	r3, [pc, #76]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c304:	d107      	bne.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fbcc 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c314:	e0fd      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31a:	e0fa      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c328:	d107      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c32a:	f107 0318 	add.w	r3, r7, #24
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f912 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c338:	e0eb      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c33e:	e0e8      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c344:	e0e5      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c346:	bf00      	nop
 800c348:	58024400 	.word	0x58024400
 800c34c:	03d09000 	.word	0x03d09000
 800c350:	003d0900 	.word	0x003d0900
 800c354:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c35c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c360:	430b      	orrs	r3, r1
 800c362:	f040 8085 	bne.w	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c366:	4b6d      	ldr	r3, [pc, #436]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c36a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c36e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c376:	d06b      	beq.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c37e:	d874      	bhi.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c386:	d056      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c38e:	d86c      	bhi.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c396:	d03b      	beq.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c39e:	d864      	bhi.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a6:	d021      	beq.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ae:	d85c      	bhi.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3bc:	d004      	beq.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c3be:	e054      	b.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3c0:	f000 f8b4 	bl	800c52c <HAL_RCCEx_GetD3PCLK1Freq>
 800c3c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3c6:	e0a4      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c8:	4b54      	ldr	r3, [pc, #336]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d4:	d107      	bne.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d6:	f107 0318 	add.w	r3, r7, #24
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 f8bc 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e4:	e095      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ea:	e092      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ec:	4b4b      	ldr	r3, [pc, #300]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f8:	d107      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f9fe 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c408:	e083      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40e:	e080      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c410:	4b42      	ldr	r3, [pc, #264]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d109      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c41c:	4b3f      	ldr	r3, [pc, #252]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	08db      	lsrs	r3, r3, #3
 800c422:	f003 0303 	and.w	r3, r3, #3
 800c426:	4a3e      	ldr	r2, [pc, #248]	; (800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c428:	fa22 f303 	lsr.w	r3, r2, r3
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42e:	e070      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c434:	e06d      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c436:	4b39      	ldr	r3, [pc, #228]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c43e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c442:	d102      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c444:	4b37      	ldr	r3, [pc, #220]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c448:	e063      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44e:	e060      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c450:	4b32      	ldr	r3, [pc, #200]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c45c:	d102      	bne.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c45e:	4b32      	ldr	r3, [pc, #200]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c462:	e056      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c468:	e053      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46e:	e050      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c470:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c474:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c478:	430b      	orrs	r3, r1
 800c47a:	d148      	bne.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c47c:	4b27      	ldr	r3, [pc, #156]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c484:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c48c:	d02a      	beq.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c494:	d838      	bhi.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d004      	beq.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4a2:	d00d      	beq.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c4a4:	e030      	b.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4a6:	4b1d      	ldr	r3, [pc, #116]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b2:	d102      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4b8:	e02b      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4be:	e028      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4c0:	4b16      	ldr	r3, [pc, #88]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4cc:	d107      	bne.n	800c4de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fae8 	bl	800caa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4dc:	e019      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e2:	e016      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4e4:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f0:	d107      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4f2:	f107 0318 	add.w	r3, r7, #24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 f82e 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c500:	e007      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c506:	e004      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50c:	e001      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c514:	4618      	mov	r0, r3
 800c516:	3740      	adds	r7, #64	; 0x40
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	58024400 	.word	0x58024400
 800c520:	03d09000 	.word	0x03d09000
 800c524:	003d0900 	.word	0x003d0900
 800c528:	02faf080 	.word	0x02faf080

0800c52c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c530:	f7fe f92e 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800c534:	4602      	mov	r2, r0
 800c536:	4b06      	ldr	r3, [pc, #24]	; (800c550 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	091b      	lsrs	r3, r3, #4
 800c53c:	f003 0307 	and.w	r3, r3, #7
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c542:	5ccb      	ldrb	r3, [r1, r3]
 800c544:	f003 031f 	and.w	r3, r3, #31
 800c548:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	58024400 	.word	0x58024400
 800c554:	08018574 	.word	0x08018574

0800c558 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c558:	b480      	push	{r7}
 800c55a:	b089      	sub	sp, #36	; 0x24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c560:	4ba1      	ldr	r3, [pc, #644]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	f003 0303 	and.w	r3, r3, #3
 800c568:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c56a:	4b9f      	ldr	r3, [pc, #636]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56e:	0b1b      	lsrs	r3, r3, #12
 800c570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c574:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c576:	4b9c      	ldr	r3, [pc, #624]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	091b      	lsrs	r3, r3, #4
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c582:	4b99      	ldr	r3, [pc, #612]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	fb02 f303 	mul.w	r3, r2, r3
 800c592:	ee07 3a90 	vmov	s15, r3
 800c596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c59a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f000 8111 	beq.w	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	f000 8083 	beq.w	800c6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	f200 80a1 	bhi.w	800c6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d056      	beq.n	800c670 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c5c2:	e099      	b.n	800c6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5c4:	4b88      	ldr	r3, [pc, #544]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 0320 	and.w	r3, r3, #32
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d02d      	beq.n	800c62c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5d0:	4b85      	ldr	r3, [pc, #532]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	08db      	lsrs	r3, r3, #3
 800c5d6:	f003 0303 	and.w	r3, r3, #3
 800c5da:	4a84      	ldr	r2, [pc, #528]	; (800c7ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	ee07 3a90 	vmov	s15, r3
 800c5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fa:	4b7b      	ldr	r3, [pc, #492]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c626:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c62a:	e087      	b.n	800c73c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63e:	4b6a      	ldr	r3, [pc, #424]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c646:	ee07 3a90 	vmov	s15, r3
 800c64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c652:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c66e:	e065      	b.n	800c73c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	ee07 3a90 	vmov	s15, r3
 800c676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c682:	4b59      	ldr	r3, [pc, #356]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c692:	ed97 6a03 	vldr	s12, [r7, #12]
 800c696:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6b2:	e043      	b.n	800c73c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	ee07 3a90 	vmov	s15, r3
 800c6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6c6:	4b48      	ldr	r3, [pc, #288]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6f6:	e021      	b.n	800c73c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	ee07 3a90 	vmov	s15, r3
 800c6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c702:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70a:	4b37      	ldr	r3, [pc, #220]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c712:	ee07 3a90 	vmov	s15, r3
 800c716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c71e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c73a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c73c:	4b2a      	ldr	r3, [pc, #168]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c740:	0a5b      	lsrs	r3, r3, #9
 800c742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c752:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c756:	edd7 6a07 	vldr	s13, [r7, #28]
 800c75a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c75e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c762:	ee17 2a90 	vmov	r2, s15
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c76a:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76e:	0c1b      	lsrs	r3, r3, #16
 800c770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c774:	ee07 3a90 	vmov	s15, r3
 800c778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c780:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c784:	edd7 6a07 	vldr	s13, [r7, #28]
 800c788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c78c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c790:	ee17 2a90 	vmov	r2, s15
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c798:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79c:	0e1b      	lsrs	r3, r3, #24
 800c79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7be:	ee17 2a90 	vmov	r2, s15
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7c6:	e008      	b.n	800c7da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	609a      	str	r2, [r3, #8]
}
 800c7da:	bf00      	nop
 800c7dc:	3724      	adds	r7, #36	; 0x24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	03d09000 	.word	0x03d09000
 800c7f0:	46000000 	.word	0x46000000
 800c7f4:	4c742400 	.word	0x4c742400
 800c7f8:	4a742400 	.word	0x4a742400
 800c7fc:	4c3ebc20 	.word	0x4c3ebc20

0800c800 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c800:	b480      	push	{r7}
 800c802:	b089      	sub	sp, #36	; 0x24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c808:	4ba1      	ldr	r3, [pc, #644]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80c:	f003 0303 	and.w	r3, r3, #3
 800c810:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c812:	4b9f      	ldr	r3, [pc, #636]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c816:	0d1b      	lsrs	r3, r3, #20
 800c818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c81c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c81e:	4b9c      	ldr	r3, [pc, #624]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c822:	0a1b      	lsrs	r3, r3, #8
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c82a:	4b99      	ldr	r3, [pc, #612]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82e:	08db      	lsrs	r3, r3, #3
 800c830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	fb02 f303 	mul.w	r3, r2, r3
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 8111 	beq.w	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	2b02      	cmp	r3, #2
 800c852:	f000 8083 	beq.w	800c95c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	f200 80a1 	bhi.w	800c9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d056      	beq.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c86a:	e099      	b.n	800c9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c86c:	4b88      	ldr	r3, [pc, #544]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0320 	and.w	r3, r3, #32
 800c874:	2b00      	cmp	r3, #0
 800c876:	d02d      	beq.n	800c8d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c878:	4b85      	ldr	r3, [pc, #532]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	08db      	lsrs	r3, r3, #3
 800c87e:	f003 0303 	and.w	r3, r3, #3
 800c882:	4a84      	ldr	r2, [pc, #528]	; (800ca94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c884:	fa22 f303 	lsr.w	r3, r2, r3
 800c888:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	ee07 3a90 	vmov	s15, r3
 800c890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a2:	4b7b      	ldr	r3, [pc, #492]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8d2:	e087      	b.n	800c9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e6:	4b6a      	ldr	r3, [pc, #424]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c916:	e065      	b.n	800c9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	ee07 3a90 	vmov	s15, r3
 800c91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c922:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92a:	4b59      	ldr	r3, [pc, #356]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c93e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c95a:	e043      	b.n	800c9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c966:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c96e:	4b48      	ldr	r3, [pc, #288]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c97e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c982:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c98e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c99e:	e021      	b.n	800c9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	ee07 3a90 	vmov	s15, r3
 800c9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b2:	4b37      	ldr	r3, [pc, #220]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e8:	0a5b      	lsrs	r3, r3, #9
 800c9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca0a:	ee17 2a90 	vmov	r2, s15
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca12:	4b1f      	ldr	r3, [pc, #124]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca16:	0c1b      	lsrs	r3, r3, #16
 800ca18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1c:	ee07 3a90 	vmov	s15, r3
 800ca20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca38:	ee17 2a90 	vmov	r2, s15
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	0e1b      	lsrs	r3, r3, #24
 800ca46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca66:	ee17 2a90 	vmov	r2, s15
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca6e:	e008      	b.n	800ca82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	609a      	str	r2, [r3, #8]
}
 800ca82:	bf00      	nop
 800ca84:	3724      	adds	r7, #36	; 0x24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	58024400 	.word	0x58024400
 800ca94:	03d09000 	.word	0x03d09000
 800ca98:	46000000 	.word	0x46000000
 800ca9c:	4c742400 	.word	0x4c742400
 800caa0:	4a742400 	.word	0x4a742400
 800caa4:	4c3ebc20 	.word	0x4c3ebc20

0800caa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b089      	sub	sp, #36	; 0x24
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cab0:	4ba0      	ldr	r3, [pc, #640]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab4:	f003 0303 	and.w	r3, r3, #3
 800cab8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800caba:	4b9e      	ldr	r3, [pc, #632]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabe:	091b      	lsrs	r3, r3, #4
 800cac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cac4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cac6:	4b9b      	ldr	r3, [pc, #620]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cad0:	4b98      	ldr	r3, [pc, #608]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cad4:	08db      	lsrs	r3, r3, #3
 800cad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	fb02 f303 	mul.w	r3, r2, r3
 800cae0:	ee07 3a90 	vmov	s15, r3
 800cae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 8111 	beq.w	800cd16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	f000 8083 	beq.w	800cc02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	f200 80a1 	bhi.w	800cc46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d003      	beq.n	800cb12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d056      	beq.n	800cbbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb10:	e099      	b.n	800cc46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb12:	4b88      	ldr	r3, [pc, #544]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0320 	and.w	r3, r3, #32
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d02d      	beq.n	800cb7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb1e:	4b85      	ldr	r3, [pc, #532]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	08db      	lsrs	r3, r3, #3
 800cb24:	f003 0303 	and.w	r3, r3, #3
 800cb28:	4a83      	ldr	r2, [pc, #524]	; (800cd38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb2a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	ee07 3a90 	vmov	s15, r3
 800cb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb48:	4b7a      	ldr	r3, [pc, #488]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb58:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb78:	e087      	b.n	800cc8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb8c:	4b69      	ldr	r3, [pc, #420]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbbc:	e065      	b.n	800cc8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	ee07 3a90 	vmov	s15, r3
 800cbc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cbcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd0:	4b58      	ldr	r3, [pc, #352]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd8:	ee07 3a90 	vmov	s15, r3
 800cbdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc00:	e043      	b.n	800cc8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	ee07 3a90 	vmov	s15, r3
 800cc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc14:	4b47      	ldr	r3, [pc, #284]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc1c:	ee07 3a90 	vmov	s15, r3
 800cc20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc24:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc28:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc44:	e021      	b.n	800cc8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	ee07 3a90 	vmov	s15, r3
 800cc4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc50:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc58:	4b36      	ldr	r3, [pc, #216]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc60:	ee07 3a90 	vmov	s15, r3
 800cc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc68:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc8a:	4b2a      	ldr	r3, [pc, #168]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc8e:	0a5b      	lsrs	r3, r3, #9
 800cc90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cca4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb0:	ee17 2a90 	vmov	r2, s15
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbc:	0c1b      	lsrs	r3, r3, #16
 800ccbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccde:	ee17 2a90 	vmov	r2, s15
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cce6:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccea:	0e1b      	lsrs	r3, r3, #24
 800ccec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccf0:	ee07 3a90 	vmov	s15, r3
 800ccf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd00:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd0c:	ee17 2a90 	vmov	r2, s15
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd14:	e008      	b.n	800cd28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	609a      	str	r2, [r3, #8]
}
 800cd28:	bf00      	nop
 800cd2a:	3724      	adds	r7, #36	; 0x24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	58024400 	.word	0x58024400
 800cd38:	03d09000 	.word	0x03d09000
 800cd3c:	46000000 	.word	0x46000000
 800cd40:	4c742400 	.word	0x4c742400
 800cd44:	4a742400 	.word	0x4a742400
 800cd48:	4c3ebc20 	.word	0x4c3ebc20

0800cd4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd5a:	4b53      	ldr	r3, [pc, #332]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5e:	f003 0303 	and.w	r3, r3, #3
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d101      	bne.n	800cd6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e099      	b.n	800ce9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd6a:	4b4f      	ldr	r3, [pc, #316]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a4e      	ldr	r2, [pc, #312]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cd70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd76:	f7f6 fe7b 	bl	8003a70 <HAL_GetTick>
 800cd7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd7c:	e008      	b.n	800cd90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd7e:	f7f6 fe77 	bl	8003a70 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d901      	bls.n	800cd90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	e086      	b.n	800ce9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd90:	4b45      	ldr	r3, [pc, #276]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f0      	bne.n	800cd7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd9c:	4b42      	ldr	r3, [pc, #264]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	031b      	lsls	r3, r3, #12
 800cdaa:	493f      	ldr	r1, [pc, #252]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cdac:	4313      	orrs	r3, r2
 800cdae:	628b      	str	r3, [r1, #40]	; 0x28
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	025b      	lsls	r3, r3, #9
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	431a      	orrs	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	041b      	lsls	r3, r3, #16
 800cdce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdd2:	431a      	orrs	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	061b      	lsls	r3, r3, #24
 800cddc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cde0:	4931      	ldr	r1, [pc, #196]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cde2:	4313      	orrs	r3, r2
 800cde4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cde6:	4b30      	ldr	r3, [pc, #192]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	492d      	ldr	r1, [pc, #180]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdf8:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	f023 0220 	bic.w	r2, r3, #32
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	4928      	ldr	r1, [pc, #160]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce0a:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	4a26      	ldr	r2, [pc, #152]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce10:	f023 0310 	bic.w	r3, r3, #16
 800ce14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce16:	4b24      	ldr	r3, [pc, #144]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce1a:	4b24      	ldr	r3, [pc, #144]	; (800ceac <RCCEx_PLL2_Config+0x160>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	69d2      	ldr	r2, [r2, #28]
 800ce22:	00d2      	lsls	r2, r2, #3
 800ce24:	4920      	ldr	r1, [pc, #128]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce2a:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	4a1e      	ldr	r2, [pc, #120]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce30:	f043 0310 	orr.w	r3, r3, #16
 800ce34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce3c:	4b1a      	ldr	r3, [pc, #104]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	4a19      	ldr	r2, [pc, #100]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce48:	e00f      	b.n	800ce6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d106      	bne.n	800ce5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce54:	4a14      	ldr	r2, [pc, #80]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce5c:	e005      	b.n	800ce6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	4a11      	ldr	r2, [pc, #68]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce6a:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a0e      	ldr	r2, [pc, #56]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce76:	f7f6 fdfb 	bl	8003a70 <HAL_GetTick>
 800ce7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce7c:	e008      	b.n	800ce90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce7e:	f7f6 fdf7 	bl	8003a70 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e006      	b.n	800ce9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <RCCEx_PLL2_Config+0x15c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d0f0      	beq.n	800ce7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	58024400 	.word	0x58024400
 800ceac:	ffff0007 	.word	0xffff0007

0800ceb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cebe:	4b53      	ldr	r3, [pc, #332]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec2:	f003 0303 	and.w	r3, r3, #3
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d101      	bne.n	800cece <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e099      	b.n	800d002 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cece:	4b4f      	ldr	r3, [pc, #316]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a4e      	ldr	r2, [pc, #312]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800ced4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ced8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceda:	f7f6 fdc9 	bl	8003a70 <HAL_GetTick>
 800cede:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cee0:	e008      	b.n	800cef4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cee2:	f7f6 fdc5 	bl	8003a70 <HAL_GetTick>
 800cee6:	4602      	mov	r2, r0
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d901      	bls.n	800cef4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	e086      	b.n	800d002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cef4:	4b45      	ldr	r3, [pc, #276]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1f0      	bne.n	800cee2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf00:	4b42      	ldr	r3, [pc, #264]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	051b      	lsls	r3, r3, #20
 800cf0e:	493f      	ldr	r1, [pc, #252]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf10:	4313      	orrs	r3, r2
 800cf12:	628b      	str	r3, [r1, #40]	; 0x28
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	025b      	lsls	r3, r3, #9
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	041b      	lsls	r3, r3, #16
 800cf32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	061b      	lsls	r3, r3, #24
 800cf40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf44:	4931      	ldr	r1, [pc, #196]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf46:	4313      	orrs	r3, r2
 800cf48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf4a:	4b30      	ldr	r3, [pc, #192]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	492d      	ldr	r1, [pc, #180]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf5c:	4b2b      	ldr	r3, [pc, #172]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	4928      	ldr	r1, [pc, #160]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf6e:	4b27      	ldr	r3, [pc, #156]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	4a26      	ldr	r2, [pc, #152]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf7a:	4b24      	ldr	r3, [pc, #144]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf7e:	4b24      	ldr	r3, [pc, #144]	; (800d010 <RCCEx_PLL3_Config+0x160>)
 800cf80:	4013      	ands	r3, r2
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	69d2      	ldr	r2, [r2, #28]
 800cf86:	00d2      	lsls	r2, r2, #3
 800cf88:	4920      	ldr	r1, [pc, #128]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf8e:	4b1f      	ldr	r3, [pc, #124]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf92:	4a1e      	ldr	r2, [pc, #120]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cf94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfa0:	4b1a      	ldr	r3, [pc, #104]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	4a19      	ldr	r2, [pc, #100]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfac:	e00f      	b.n	800cfce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d106      	bne.n	800cfc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfb4:	4b15      	ldr	r3, [pc, #84]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	4a14      	ldr	r2, [pc, #80]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfc0:	e005      	b.n	800cfce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfc2:	4b12      	ldr	r3, [pc, #72]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc6:	4a11      	ldr	r2, [pc, #68]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfce:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a0e      	ldr	r2, [pc, #56]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cfd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfda:	f7f6 fd49 	bl	8003a70 <HAL_GetTick>
 800cfde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfe0:	e008      	b.n	800cff4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfe2:	f7f6 fd45 	bl	8003a70 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d901      	bls.n	800cff4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e006      	b.n	800d002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cff4:	4b05      	ldr	r3, [pc, #20]	; (800d00c <RCCEx_PLL3_Config+0x15c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0f0      	beq.n	800cfe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d000:	7bfb      	ldrb	r3, [r7, #15]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	58024400 	.word	0x58024400
 800d010:	ffff0007 	.word	0xffff0007

0800d014 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08a      	sub	sp, #40	; 0x28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e075      	b.n	800d112 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d105      	bne.n	800d03e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7f5 fe59 	bl	8002cf0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2204      	movs	r2, #4
 800d042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f868 	bl	800d11c <HAL_SD_InitCard>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e05d      	b.n	800d112 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d056:	f107 0308 	add.w	r3, r7, #8
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 fdaf 	bl	800dbc0 <HAL_SD_GetCardStatus>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e052      	b.n	800d112 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d06c:	7e3b      	ldrb	r3, [r7, #24]
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d072:	7e7b      	ldrb	r3, [r7, #25]
 800d074:	b2db      	uxtb	r3, r3
 800d076:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d10a      	bne.n	800d096 <HAL_SD_Init+0x82>
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	2b00      	cmp	r3, #0
 800d084:	d102      	bne.n	800d08c <HAL_SD_Init+0x78>
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d092:	659a      	str	r2, [r3, #88]	; 0x58
 800d094:	e00b      	b.n	800d0ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d104      	bne.n	800d0a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0a4:	659a      	str	r2, [r3, #88]	; 0x58
 800d0a6:	e002      	b.n	800d0ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fe6d 	bl	800dd94 <HAL_SD_ConfigWideBusOperation>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e026      	b.n	800d112 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0c4:	f7f6 fcd4 	bl	8003a70 <HAL_GetTick>
 800d0c8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0ca:	e011      	b.n	800d0f0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0cc:	f7f6 fcd0 	bl	8003a70 <HAL_GetTick>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0da:	d109      	bne.n	800d0f0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e010      	b.n	800d112 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 ff61 	bl	800dfb8 <HAL_SD_GetCardState>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b04      	cmp	r3, #4
 800d0fa:	d1e7      	bne.n	800d0cc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3728      	adds	r7, #40	; 0x28
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d11c:	b590      	push	{r4, r7, lr}
 800d11e:	b08d      	sub	sp, #52	; 0x34
 800d120:	af02      	add	r7, sp, #8
 800d122:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d124:	2300      	movs	r3, #0
 800d126:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d128:	2300      	movs	r3, #0
 800d12a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d12c:	2300      	movs	r3, #0
 800d12e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d130:	2300      	movs	r3, #0
 800d132:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d134:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d138:	f04f 0100 	mov.w	r1, #0
 800d13c:	f7fe fd24 	bl	800bb88 <HAL_RCCEx_GetPeriphCLKFreq>
 800d140:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	2b00      	cmp	r3, #0
 800d146:	d109      	bne.n	800d15c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d156:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	e070      	b.n	800d23e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	4a39      	ldr	r2, [pc, #228]	; (800d248 <HAL_SD_InitCard+0x12c>)
 800d162:	fba2 2303 	umull	r2, r3, r2, r3
 800d166:	091b      	lsrs	r3, r3, #4
 800d168:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681c      	ldr	r4, [r3, #0]
 800d16e:	466a      	mov	r2, sp
 800d170:	f107 0318 	add.w	r3, r7, #24
 800d174:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d178:	e882 0003 	stmia.w	r2, {r0, r1}
 800d17c:	f107 030c 	add.w	r3, r7, #12
 800d180:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d182:	4620      	mov	r0, r4
 800d184:	f004 fec4 	bl	8011f10 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f004 ff07 	bl	8011fa0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d005      	beq.n	800d1a4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d19e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d1aa:	4a28      	ldr	r2, [pc, #160]	; (800d24c <HAL_SD_InitCard+0x130>)
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f6 fc67 	bl	8003a88 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 ffea 	bl	800e194 <SD_PowerON>
 800d1c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1c2:	6a3b      	ldr	r3, [r7, #32]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	431a      	orrs	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e02e      	b.n	800d23e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 ff09 	bl	800dff8 <SD_InitCard>
 800d1e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00b      	beq.n	800d206 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	e01b      	b.n	800d23e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d20e:	4618      	mov	r0, r3
 800d210:	f004 ff5c 	bl	80120cc <SDMMC_CmdBlockLength>
 800d214:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00f      	beq.n	800d23c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a0b      	ldr	r2, [pc, #44]	; (800d250 <HAL_SD_InitCard+0x134>)
 800d222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	431a      	orrs	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	372c      	adds	r7, #44	; 0x2c
 800d242:	46bd      	mov	sp, r7
 800d244:	bd90      	pop	{r4, r7, pc}
 800d246:	bf00      	nop
 800d248:	014f8b59 	.word	0x014f8b59
 800d24c:	00012110 	.word	0x00012110
 800d250:	1fe00fff 	.word	0x1fe00fff

0800d254 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	; 0x30
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d107      	bne.n	800d27c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d270:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	e08d      	b.n	800d398 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	f040 8086 	bne.w	800d396 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	441a      	add	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d907      	bls.n	800d2ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e074      	b.n	800d398 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	025a      	lsls	r2, r3, #9
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d002      	beq.n	800d2da <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	025b      	lsls	r3, r3, #9
 800d2d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2da:	f04f 33ff 	mov.w	r3, #4294967295
 800d2de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	025b      	lsls	r3, r3, #9
 800d2e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2e6:	2390      	movs	r3, #144	; 0x90
 800d2e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f107 0210 	add.w	r2, r7, #16
 800d2fe:	4611      	mov	r1, r2
 800d300:	4618      	mov	r0, r3
 800d302:	f004 feb7 	bl	8012074 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68da      	ldr	r2, [r3, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d314:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2201      	movs	r2, #1
 800d324:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d90a      	bls.n	800d342 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2282      	movs	r2, #130	; 0x82
 800d330:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 ff0d 	bl	8012158 <SDMMC_CmdReadMultiBlock>
 800d33e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d340:	e009      	b.n	800d356 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2281      	movs	r2, #129	; 0x81
 800d346:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d34e:	4618      	mov	r0, r3
 800d350:	f004 fedf 	bl	8012112 <SDMMC_CmdReadSingleBlock>
 800d354:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a0f      	ldr	r2, [pc, #60]	; (800d3a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	431a      	orrs	r2, r3
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e00a      	b.n	800d398 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d390:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	e000      	b.n	800d398 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d396:	2302      	movs	r3, #2
  }
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3730      	adds	r7, #48	; 0x30
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	1fe00fff 	.word	0x1fe00fff

0800d3a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08c      	sub	sp, #48	; 0x30
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d107      	bne.n	800d3cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e08d      	b.n	800d4e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	f040 8086 	bne.w	800d4e6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	441a      	add	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d907      	bls.n	800d3fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e074      	b.n	800d4e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2203      	movs	r2, #3
 800d402:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2200      	movs	r2, #0
 800d40c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	025a      	lsls	r2, r3, #9
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d420:	2b01      	cmp	r3, #1
 800d422:	d002      	beq.n	800d42a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d426:	025b      	lsls	r3, r3, #9
 800d428:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d42a:	f04f 33ff 	mov.w	r3, #4294967295
 800d42e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	025b      	lsls	r3, r3, #9
 800d434:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d436:	2390      	movs	r3, #144	; 0x90
 800d438:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d43e:	2300      	movs	r3, #0
 800d440:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d442:	2300      	movs	r3, #0
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f107 0210 	add.w	r2, r7, #16
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f004 fe0f 	bl	8012074 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68da      	ldr	r2, [r3, #12]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d464:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2201      	movs	r2, #1
 800d474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d90a      	bls.n	800d492 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	22a0      	movs	r2, #160	; 0xa0
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d488:	4618      	mov	r0, r3
 800d48a:	f004 feab 	bl	80121e4 <SDMMC_CmdWriteMultiBlock>
 800d48e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d490:	e009      	b.n	800d4a6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2290      	movs	r2, #144	; 0x90
 800d496:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f004 fe7d 	bl	801219e <SDMMC_CmdWriteSingleBlock>
 800d4a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d012      	beq.n	800d4d2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a0f      	ldr	r2, [pc, #60]	; (800d4f0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	431a      	orrs	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e00a      	b.n	800d4e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4e0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e000      	b.n	800d4e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4e6:	2302      	movs	r3, #2
  }
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3730      	adds	r7, #48	; 0x30
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	1fe00fff 	.word	0x1fe00fff

0800d4f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <HAL_SD_IRQHandler+0x2e>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f003 0308 	and.w	r3, r3, #8
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f001 f926 	bl	800e76c <SD_Read_IT>
 800d520:	e19a      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80ac 	beq.w	800d68a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	4b59      	ldr	r3, [pc, #356]	; (800d6ac <HAL_SD_IRQHandler+0x1b8>)
 800d548:	400b      	ands	r3, r1
 800d54a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d55a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68da      	ldr	r2, [r3, #12]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d56a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f003 0308 	and.w	r3, r3, #8
 800d572:	2b00      	cmp	r3, #0
 800d574:	d038      	beq.n	800d5e8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d104      	bne.n	800d58a <HAL_SD_IRQHandler+0x96>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d011      	beq.n	800d5ae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4618      	mov	r0, r3
 800d590:	f004 fe4c 	bl	801222c <SDMMC_CmdStopTransfer>
 800d594:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d008      	beq.n	800d5ae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f95b 	bl	800d864 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a3f      	ldr	r2, [pc, #252]	; (800d6b0 <HAL_SD_IRQHandler+0x1bc>)
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d104      	bne.n	800d5d8 <HAL_SD_IRQHandler+0xe4>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f003 0302 	and.w	r3, r3, #2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f006 fe4d 	bl	8014278 <HAL_SD_RxCpltCallback>
 800d5de:	e13b      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f006 fe3f 	bl	8014264 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5e6:	e137      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 8132 	beq.w	800d858 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2200      	movs	r2, #0
 800d602:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f003 0302 	and.w	r3, r3, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d104      	bne.n	800d620 <HAL_SD_IRQHandler+0x12c>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f003 0320 	and.w	r3, r3, #32
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d011      	beq.n	800d644 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4618      	mov	r0, r3
 800d626:	f004 fe01 	bl	801222c <SDMMC_CmdStopTransfer>
 800d62a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d008      	beq.n	800d644 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	431a      	orrs	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f910 	bl	800d864 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f003 0310 	and.w	r3, r3, #16
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d104      	bne.n	800d666 <HAL_SD_IRQHandler+0x172>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f003 0320 	and.w	r3, r3, #32
 800d662:	2b00      	cmp	r3, #0
 800d664:	d002      	beq.n	800d66c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f006 fdfc 	bl	8014264 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d105      	bne.n	800d682 <HAL_SD_IRQHandler+0x18e>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f003 0302 	and.w	r3, r3, #2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 80eb 	beq.w	800d858 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f006 fdf8 	bl	8014278 <HAL_SD_RxCpltCallback>
}
 800d688:	e0e6      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00d      	beq.n	800d6b4 <HAL_SD_IRQHandler+0x1c0>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f003 0308 	and.w	r3, r3, #8
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d008      	beq.n	800d6b4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f001 f8a8 	bl	800e7f8 <SD_Write_IT>
 800d6a8:	e0d6      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
 800d6aa:	bf00      	nop
 800d6ac:	ffff3ec5 	.word	0xffff3ec5
 800d6b0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 809d 	beq.w	800d7fe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d005      	beq.n	800d6de <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d6:	f043 0202 	orr.w	r2, r3, #2
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e4:	f003 0308 	and.w	r3, r3, #8
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f0:	f043 0208 	orr.w	r2, r3, #8
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fe:	f003 0320 	and.w	r3, r3, #32
 800d702:	2b00      	cmp	r3, #0
 800d704:	d005      	beq.n	800d712 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70a:	f043 0220 	orr.w	r2, r3, #32
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d718:	f003 0310 	and.w	r3, r3, #16
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d005      	beq.n	800d72c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d724:	f043 0210 	orr.w	r2, r3, #16
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a4b      	ldr	r2, [pc, #300]	; (800d860 <HAL_SD_IRQHandler+0x36c>)
 800d732:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d742:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68da      	ldr	r2, [r3, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d752:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d762:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d772:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4618      	mov	r0, r3
 800d77a:	f004 fd57 	bl	801222c <SDMMC_CmdStopTransfer>
 800d77e:	4602      	mov	r2, r0
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d784:	431a      	orrs	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68da      	ldr	r2, [r3, #12]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d798:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f003 0308 	and.w	r3, r3, #8
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f851 	bl	800d864 <HAL_SD_ErrorCallback>
}
 800d7c2:	e049      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d044      	beq.n	800d858 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d040      	beq.n	800d858 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7e4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f834 	bl	800d864 <HAL_SD_ErrorCallback>
}
 800d7fc:	e02c      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d025      	beq.n	800d858 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d814:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d81c:	f003 0304 	and.w	r3, r3, #4
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10c      	bne.n	800d83e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f001 f84a 	bl	800e8c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d834:	e010      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f001 f832 	bl	800e8a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d83c:	e00c      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f001 f833 	bl	800e8b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d84e:	e003      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f001 f81b 	bl	800e88c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d856:	e7ff      	b.n	800d858 <HAL_SD_IRQHandler+0x364>
 800d858:	bf00      	nop
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	18000f3a 	.word	0x18000f3a

0800d864 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d86c:	bf00      	nop
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d886:	0f9b      	lsrs	r3, r3, #30
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d892:	0e9b      	lsrs	r3, r3, #26
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 030f 	and.w	r3, r3, #15
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a4:	0e1b      	lsrs	r3, r3, #24
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 0303 	and.w	r3, r3, #3
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8b6:	0c1b      	lsrs	r3, r3, #16
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c2:	0a1b      	lsrs	r3, r3, #8
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8d8:	0d1b      	lsrs	r3, r3, #20
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e4:	0c1b      	lsrs	r3, r3, #16
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f6:	0bdb      	lsrs	r3, r3, #15
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d908:	0b9b      	lsrs	r3, r3, #14
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d91a:	0b5b      	lsrs	r3, r3, #13
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0301 	and.w	r3, r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92c:	0b1b      	lsrs	r3, r3, #12
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0301 	and.w	r3, r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2200      	movs	r2, #0
 800d93e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d944:	2b00      	cmp	r3, #0
 800d946:	d163      	bne.n	800da10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d94c:	009a      	lsls	r2, r3, #2
 800d94e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d952:	4013      	ands	r3, r2
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d958:	0f92      	lsrs	r2, r2, #30
 800d95a:	431a      	orrs	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d964:	0edb      	lsrs	r3, r3, #27
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d976:	0e1b      	lsrs	r3, r3, #24
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d988:	0d5b      	lsrs	r3, r3, #21
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0307 	and.w	r3, r3, #7
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d99a:	0c9b      	lsrs	r3, r3, #18
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 0307 	and.w	r3, r3, #7
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ac:	0bdb      	lsrs	r3, r3, #15
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	7e1b      	ldrb	r3, [r3, #24]
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 0307 	and.w	r3, r3, #7
 800d9ce:	3302      	adds	r3, #2
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d9da:	fb03 f202 	mul.w	r2, r3, r2
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	7a1b      	ldrb	r3, [r3, #8]
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	f003 030f 	and.w	r3, r3, #15
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	409a      	lsls	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d9fc:	0a52      	lsrs	r2, r2, #9
 800d9fe:	fb03 f202 	mul.w	r2, r3, r2
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da0c:	655a      	str	r2, [r3, #84]	; 0x54
 800da0e:	e031      	b.n	800da74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da14:	2b01      	cmp	r3, #1
 800da16:	d11d      	bne.n	800da54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da1c:	041b      	lsls	r3, r3, #16
 800da1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da26:	0c1b      	lsrs	r3, r3, #16
 800da28:	431a      	orrs	r2, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	3301      	adds	r3, #1
 800da34:	029a      	lsls	r2, r3, #10
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da48:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	655a      	str	r2, [r3, #84]	; 0x54
 800da52:	e00f      	b.n	800da74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a58      	ldr	r2, [pc, #352]	; (800dbbc <HAL_SD_GetCardCSD+0x344>)
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	e09d      	b.n	800dbb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da78:	0b9b      	lsrs	r3, r3, #14
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	b2da      	uxtb	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8a:	09db      	lsrs	r3, r3, #7
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da92:	b2da      	uxtb	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daac:	0fdb      	lsrs	r3, r3, #31
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab8:	0f5b      	lsrs	r3, r3, #29
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	f003 0303 	and.w	r3, r3, #3
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daca:	0e9b      	lsrs	r3, r3, #26
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dadc:	0d9b      	lsrs	r3, r3, #22
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 030f 	and.w	r3, r3, #15
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daee:	0d5b      	lsrs	r3, r3, #21
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db0a:	0c1b      	lsrs	r3, r3, #16
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db1e:	0bdb      	lsrs	r3, r3, #15
 800db20:	b2db      	uxtb	r3, r3
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db32:	0b9b      	lsrs	r3, r3, #14
 800db34:	b2db      	uxtb	r3, r3
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db46:	0b5b      	lsrs	r3, r3, #13
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db5a:	0b1b      	lsrs	r3, r3, #12
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6e:	0a9b      	lsrs	r3, r3, #10
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0303 	and.w	r3, r3, #3
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db82:	0a1b      	lsrs	r3, r3, #8
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db96:	085b      	lsrs	r3, r3, #1
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	1fe00fff 	.word	0x1fe00fff

0800dbc0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b094      	sub	sp, #80	; 0x50
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b03      	cmp	r3, #3
 800dbda:	d101      	bne.n	800dbe0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e0a7      	b.n	800dd30 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbe0:	f107 0308 	add.w	r3, r7, #8
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fb62 	bl	800e2b0 <SD_SendSDStatus>
 800dbec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d011      	beq.n	800dc18 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a4f      	ldr	r2, [pc, #316]	; (800dd38 <HAL_SD_GetCardStatus+0x178>)
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc02:	431a      	orrs	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc16:	e070      	b.n	800dcfa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	099b      	lsrs	r3, r3, #6
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0303 	and.w	r3, r3, #3
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	095b      	lsrs	r3, r3, #5
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	b2da      	uxtb	r2, r3
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	0a1b      	lsrs	r3, r3, #8
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	0e1b      	lsrs	r3, r3, #24
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	061a      	lsls	r2, r3, #24
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc5e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc68:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	0e1b      	lsrs	r3, r3, #24
 800dc6e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	0a1b      	lsrs	r3, r3, #8
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	0d1b      	lsrs	r3, r3, #20
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 030f 	and.w	r3, r3, #15
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	0c1b      	lsrs	r3, r3, #16
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	0a9b      	lsrs	r3, r3, #10
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	0a1b      	lsrs	r3, r3, #8
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	f003 0303 	and.w	r3, r3, #3
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	091b      	lsrs	r3, r3, #4
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	f003 030f 	and.w	r3, r3, #15
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	0e1b      	lsrs	r3, r3, #24
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd02:	4618      	mov	r0, r3
 800dd04:	f004 f9e2 	bl	80120cc <SDMMC_CmdBlockLength>
 800dd08:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00d      	beq.n	800dd2c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a08      	ldr	r2, [pc, #32]	; (800dd38 <HAL_SD_GetCardStatus+0x178>)
 800dd16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd1c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3750      	adds	r7, #80	; 0x50
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	1fe00fff 	.word	0x1fe00fff

0800dd3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd94:	b590      	push	{r4, r7, lr}
 800dd96:	b08d      	sub	sp, #52	; 0x34
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2203      	movs	r2, #3
 800dda8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	d02e      	beq.n	800de12 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddba:	d106      	bne.n	800ddca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	635a      	str	r2, [r3, #52]	; 0x34
 800ddc8:	e029      	b.n	800de1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddd0:	d10a      	bne.n	800dde8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 fb64 	bl	800e4a0 <SD_WideBus_Enable>
 800ddd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	431a      	orrs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	635a      	str	r2, [r3, #52]	; 0x34
 800dde6:	e01a      	b.n	800de1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10a      	bne.n	800de04 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fba1 	bl	800e536 <SD_WideBus_Disable>
 800ddf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddfa:	6a3b      	ldr	r3, [r7, #32]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	635a      	str	r2, [r3, #52]	; 0x34
 800de02:	e00c      	b.n	800de1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de08:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	635a      	str	r2, [r3, #52]	; 0x34
 800de10:	e005      	b.n	800de1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a5f      	ldr	r2, [pc, #380]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de2c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de34:	e096      	b.n	800df64 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de36:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de3a:	f04f 0100 	mov.w	r1, #0
 800de3e:	f7fd fea3 	bl	800bb88 <HAL_RCCEx_GetPeriphCLKFreq>
 800de42:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 8083 	beq.w	800df52 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	689b      	ldr	r3, [r3, #8]
 800de56:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	695a      	ldr	r2, [r3, #20]
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	4950      	ldr	r1, [pc, #320]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x218>)
 800de6a:	fba1 1303 	umull	r1, r3, r1, r3
 800de6e:	0e1b      	lsrs	r3, r3, #24
 800de70:	429a      	cmp	r2, r3
 800de72:	d303      	bcc.n	800de7c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e05a      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de84:	d103      	bne.n	800de8e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	61bb      	str	r3, [r7, #24]
 800de8c:	e051      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de96:	d126      	bne.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10e      	bne.n	800debe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	4a43      	ldr	r2, [pc, #268]	; (800dfb0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d906      	bls.n	800deb6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	4a40      	ldr	r2, [pc, #256]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x218>)
 800deac:	fba2 2303 	umull	r2, r3, r2, r3
 800deb0:	0e5b      	lsrs	r3, r3, #25
 800deb2:	61bb      	str	r3, [r7, #24]
 800deb4:	e03d      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	e039      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	69fa      	ldr	r2, [r7, #28]
 800dec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deca:	4a39      	ldr	r2, [pc, #228]	; (800dfb0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d906      	bls.n	800dede <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	4a36      	ldr	r2, [pc, #216]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x218>)
 800ded4:	fba2 2303 	umull	r2, r3, r2, r3
 800ded8:	0e5b      	lsrs	r3, r3, #25
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e029      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	61bb      	str	r3, [r7, #24]
 800dee4:	e025      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10e      	bne.n	800df0c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	4a30      	ldr	r2, [pc, #192]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d906      	bls.n	800df04 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	4a2c      	ldr	r2, [pc, #176]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x218>)
 800defa:	fba2 2303 	umull	r2, r3, r2, r3
 800defe:	0e1b      	lsrs	r3, r3, #24
 800df00:	61bb      	str	r3, [r7, #24]
 800df02:	e016      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e012      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	69fa      	ldr	r2, [r7, #28]
 800df14:	fbb2 f3f3 	udiv	r3, r2, r3
 800df18:	4a26      	ldr	r2, [pc, #152]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d906      	bls.n	800df2c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	4a22      	ldr	r2, [pc, #136]	; (800dfac <HAL_SD_ConfigWideBusOperation+0x218>)
 800df22:	fba2 2303 	umull	r2, r3, r2, r3
 800df26:	0e1b      	lsrs	r3, r3, #24
 800df28:	61bb      	str	r3, [r7, #24]
 800df2a:	e002      	b.n	800df32 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681c      	ldr	r4, [r3, #0]
 800df36:	466a      	mov	r2, sp
 800df38:	f107 0314 	add.w	r3, r7, #20
 800df3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df40:	e882 0003 	stmia.w	r2, {r0, r1}
 800df44:	f107 0308 	add.w	r3, r7, #8
 800df48:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df4a:	4620      	mov	r0, r4
 800df4c:	f003 ffe0 	bl	8011f10 <SDMMC_Init>
 800df50:	e008      	b.n	800df64 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df6c:	4618      	mov	r0, r3
 800df6e:	f004 f8ad 	bl	80120cc <SDMMC_CmdBlockLength>
 800df72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df74:	6a3b      	ldr	r3, [r7, #32]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00c      	beq.n	800df94 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df86:	6a3b      	ldr	r3, [r7, #32]
 800df88:	431a      	orrs	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	372c      	adds	r7, #44	; 0x2c
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd90      	pop	{r4, r7, pc}
 800dfa8:	1fe00fff 	.word	0x1fe00fff
 800dfac:	55e63b89 	.word	0x55e63b89
 800dfb0:	02faf080 	.word	0x02faf080
 800dfb4:	017d7840 	.word	0x017d7840

0800dfb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfc4:	f107 030c 	add.w	r3, r7, #12
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa40 	bl	800e450 <SD_SendStatus>
 800dfd0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d005      	beq.n	800dfe4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	0a5b      	lsrs	r3, r3, #9
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfee:	693b      	ldr	r3, [r7, #16]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b090      	sub	sp, #64	; 0x40
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e000:	2300      	movs	r3, #0
 800e002:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e004:	f7f5 fd34 	bl	8003a70 <HAL_GetTick>
 800e008:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	f003 ffd7 	bl	8011fc2 <SDMMC_GetPowerState>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d102      	bne.n	800e020 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e01a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e01e:	e0b5      	b.n	800e18c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	2b03      	cmp	r3, #3
 800e026:	d02e      	beq.n	800e086 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f004 fa22 	bl	8012476 <SDMMC_CmdSendCID>
 800e032:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <SD_InitCard+0x46>
    {
      return errorstate;
 800e03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03c:	e0a6      	b.n	800e18c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2100      	movs	r1, #0
 800e044:	4618      	mov	r0, r3
 800e046:	f004 f802 	bl	801204e <SDMMC_GetResponse>
 800e04a:	4602      	mov	r2, r0
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2104      	movs	r1, #4
 800e056:	4618      	mov	r0, r3
 800e058:	f003 fff9 	bl	801204e <SDMMC_GetResponse>
 800e05c:	4602      	mov	r2, r0
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2108      	movs	r1, #8
 800e068:	4618      	mov	r0, r3
 800e06a:	f003 fff0 	bl	801204e <SDMMC_GetResponse>
 800e06e:	4602      	mov	r2, r0
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	210c      	movs	r1, #12
 800e07a:	4618      	mov	r0, r3
 800e07c:	f003 ffe7 	bl	801204e <SDMMC_GetResponse>
 800e080:	4602      	mov	r2, r0
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d01d      	beq.n	800e0ca <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e08e:	e019      	b.n	800e0c4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f107 020a 	add.w	r2, r7, #10
 800e098:	4611      	mov	r1, r2
 800e09a:	4618      	mov	r0, r3
 800e09c:	f004 fa2a 	bl	80124f4 <SDMMC_CmdSetRelAdd>
 800e0a0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <SD_InitCard+0xb4>
      {
        return errorstate;
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	e06f      	b.n	800e18c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0ac:	f7f5 fce0 	bl	8003a70 <HAL_GetTick>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	f241 3287 	movw	r2, #4999	; 0x1387
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d902      	bls.n	800e0c4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e0be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0c2:	e063      	b.n	800e18c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e0c4:	897b      	ldrh	r3, [r7, #10]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0e2      	beq.n	800e090 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d036      	beq.n	800e140 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0d2:	897b      	ldrh	r3, [r7, #10]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e2:	041b      	lsls	r3, r3, #16
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	f004 f9e4 	bl	80124b4 <SDMMC_CmdSendCSD>
 800e0ec:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <SD_InitCard+0x100>
    {
      return errorstate;
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	e049      	b.n	800e18c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f003 ffa5 	bl	801204e <SDMMC_GetResponse>
 800e104:	4602      	mov	r2, r0
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2104      	movs	r1, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f003 ff9c 	bl	801204e <SDMMC_GetResponse>
 800e116:	4602      	mov	r2, r0
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2108      	movs	r1, #8
 800e122:	4618      	mov	r0, r3
 800e124:	f003 ff93 	bl	801204e <SDMMC_GetResponse>
 800e128:	4602      	mov	r2, r0
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	210c      	movs	r1, #12
 800e134:	4618      	mov	r0, r3
 800e136:	f003 ff8a 	bl	801204e <SDMMC_GetResponse>
 800e13a:	4602      	mov	r2, r0
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2104      	movs	r1, #4
 800e146:	4618      	mov	r0, r3
 800e148:	f003 ff81 	bl	801204e <SDMMC_GetResponse>
 800e14c:	4603      	mov	r3, r0
 800e14e:	0d1a      	lsrs	r2, r3, #20
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e154:	f107 030c 	add.w	r3, r7, #12
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff fb8c 	bl	800d878 <HAL_SD_GetCardCSD>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e16a:	e00f      	b.n	800e18c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e174:	041b      	lsls	r3, r3, #16
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f004 f893 	bl	80122a4 <SDMMC_CmdSelDesel>
 800e17e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	2b00      	cmp	r3, #0
 800e184:	d001      	beq.n	800e18a <SD_InitCard+0x192>
  {
    return errorstate;
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	e000      	b.n	800e18c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3740      	adds	r7, #64	; 0x40
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e19c:	2300      	movs	r3, #0
 800e19e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f004 f89c 	bl	80122ea <SDMMC_CmdGoIdleState>
 800e1b2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	e072      	b.n	800e2a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f004 f8af 	bl	8012326 <SDMMC_CmdOperCond>
 800e1c8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1d0:	d10d      	bne.n	800e1ee <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f004 f884 	bl	80122ea <SDMMC_CmdGoIdleState>
 800e1e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d004      	beq.n	800e1f4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	e05a      	b.n	800e2a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d137      	bne.n	800e26c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2100      	movs	r1, #0
 800e202:	4618      	mov	r0, r3
 800e204:	f004 f8af 	bl	8012366 <SDMMC_CmdAppCommand>
 800e208:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d02d      	beq.n	800e26c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e214:	e046      	b.n	800e2a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2100      	movs	r1, #0
 800e21c:	4618      	mov	r0, r3
 800e21e:	f004 f8a2 	bl	8012366 <SDMMC_CmdAppCommand>
 800e222:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	e03a      	b.n	800e2a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	491e      	ldr	r1, [pc, #120]	; (800e2ac <SD_PowerON+0x118>)
 800e234:	4618      	mov	r0, r3
 800e236:	f004 f8b9 	bl	80123ac <SDMMC_CmdAppOperCommand>
 800e23a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e246:	e02d      	b.n	800e2a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2100      	movs	r1, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f003 fefd 	bl	801204e <SDMMC_GetResponse>
 800e254:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	0fdb      	lsrs	r3, r3, #31
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d101      	bne.n	800e262 <SD_PowerON+0xce>
 800e25e:	2301      	movs	r3, #1
 800e260:	e000      	b.n	800e264 <SD_PowerON+0xd0>
 800e262:	2300      	movs	r3, #0
 800e264:	613b      	str	r3, [r7, #16]

    count++;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	3301      	adds	r3, #1
 800e26a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e272:	4293      	cmp	r3, r2
 800e274:	d802      	bhi.n	800e27c <SD_PowerON+0xe8>
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d0cc      	beq.n	800e216 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e282:	4293      	cmp	r3, r2
 800e284:	d902      	bls.n	800e28c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e28a:	e00b      	b.n	800e2a4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	c1100000 	.word	0xc1100000

0800e2b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08c      	sub	sp, #48	; 0x30
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2ba:	f7f5 fbd9 	bl	8003a70 <HAL_GetTick>
 800e2be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f003 febf 	bl	801204e <SDMMC_GetResponse>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2da:	d102      	bne.n	800e2e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2e0:	e0b0      	b.n	800e444 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2140      	movs	r1, #64	; 0x40
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f003 feef 	bl	80120cc <SDMMC_CmdBlockLength>
 800e2ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	e0a0      	b.n	800e444 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30a:	041b      	lsls	r3, r3, #16
 800e30c:	4619      	mov	r1, r3
 800e30e:	4610      	mov	r0, r2
 800e310:	f004 f829 	bl	8012366 <SDMMC_CmdAppCommand>
 800e314:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	e08d      	b.n	800e444 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e328:	f04f 33ff 	mov.w	r3, #4294967295
 800e32c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e32e:	2340      	movs	r3, #64	; 0x40
 800e330:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e332:	2360      	movs	r3, #96	; 0x60
 800e334:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e336:	2302      	movs	r3, #2
 800e338:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e33e:	2301      	movs	r3, #1
 800e340:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f107 0208 	add.w	r2, r7, #8
 800e34a:	4611      	mov	r1, r2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f003 fe91 	bl	8012074 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f004 f911 	bl	801257e <SDMMC_CmdStatusRegister>
 800e35c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d02b      	beq.n	800e3bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	e069      	b.n	800e444 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e37e:	2300      	movs	r3, #0
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e382:	e00d      	b.n	800e3a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4618      	mov	r0, r3
 800e38a:	f003 fdeb 	bl	8011f64 <SDMMC_ReadFIFO>
 800e38e:	4602      	mov	r2, r0
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	601a      	str	r2, [r3, #0]
        pData++;
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	3304      	adds	r3, #4
 800e398:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	3301      	adds	r3, #1
 800e39e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	2b07      	cmp	r3, #7
 800e3a4:	d9ee      	bls.n	800e384 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3a6:	f7f5 fb63 	bl	8003a70 <HAL_GetTick>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d102      	bne.n	800e3bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3ba:	e043      	b.n	800e444 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0d2      	beq.n	800e370 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d0:	f003 0308 	and.w	r3, r3, #8
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3d8:	2308      	movs	r3, #8
 800e3da:	e033      	b.n	800e444 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e2:	f003 0302 	and.w	r3, r3, #2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3ea:	2302      	movs	r3, #2
 800e3ec:	e02a      	b.n	800e444 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d017      	beq.n	800e42c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e3fc:	2320      	movs	r3, #32
 800e3fe:	e021      	b.n	800e444 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	f003 fdad 	bl	8011f64 <SDMMC_ReadFIFO>
 800e40a:	4602      	mov	r2, r0
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	601a      	str	r2, [r3, #0]
    pData++;
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	3304      	adds	r3, #4
 800e414:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e416:	f7f5 fb2b 	bl	8003a70 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e424:	d102      	bne.n	800e42c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e426:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e42a:	e00b      	b.n	800e444 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1e2      	bne.n	800e400 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a03      	ldr	r2, [pc, #12]	; (800e44c <SD_SendSDStatus+0x19c>)
 800e440:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3730      	adds	r7, #48	; 0x30
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	18000f3a 	.word	0x18000f3a

0800e450 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d102      	bne.n	800e466 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e464:	e018      	b.n	800e498 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	4619      	mov	r1, r3
 800e472:	4610      	mov	r0, r2
 800e474:	f004 f860 	bl	8012538 <SDMMC_CmdSendStatus>
 800e478:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	e009      	b.n	800e498 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f003 fddf 	bl	801204e <SDMMC_GetResponse>
 800e490:	4602      	mov	r2, r0
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f003 fdc9 	bl	801204e <SDMMC_GetResponse>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4c6:	d102      	bne.n	800e4ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4cc:	e02f      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4ce:	f107 030c 	add.w	r3, r7, #12
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f879 	bl	800e5cc <SD_FindSCR>
 800e4da:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	e023      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01c      	beq.n	800e52a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f8:	041b      	lsls	r3, r3, #16
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f003 ff32 	bl	8012366 <SDMMC_CmdAppCommand>
 800e502:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	e00f      	b.n	800e52e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2102      	movs	r1, #2
 800e514:	4618      	mov	r0, r3
 800e516:	f003 ff69 	bl	80123ec <SDMMC_CmdBusWidth>
 800e51a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	e003      	b.n	800e52e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e526:	2300      	movs	r3, #0
 800e528:	e001      	b.n	800e52e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e52a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b086      	sub	sp, #24
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e53e:	2300      	movs	r3, #0
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	2300      	movs	r3, #0
 800e544:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2100      	movs	r1, #0
 800e54c:	4618      	mov	r0, r3
 800e54e:	f003 fd7e 	bl	801204e <SDMMC_GetResponse>
 800e552:	4603      	mov	r3, r0
 800e554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e55c:	d102      	bne.n	800e564 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e55e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e562:	e02f      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e564:	f107 030c 	add.w	r3, r7, #12
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f82e 	bl	800e5cc <SD_FindSCR>
 800e570:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	e023      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01c      	beq.n	800e5c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58e:	041b      	lsls	r3, r3, #16
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f003 fee7 	bl	8012366 <SDMMC_CmdAppCommand>
 800e598:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	e00f      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f003 ff1e 	bl	80123ec <SDMMC_CmdBusWidth>
 800e5b0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	e003      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e001      	b.n	800e5c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08e      	sub	sp, #56	; 0x38
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5d6:	f7f5 fa4b 	bl	8003a70 <HAL_GetTick>
 800e5da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60bb      	str	r3, [r7, #8]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2108      	movs	r1, #8
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f003 fd6a 	bl	80120cc <SDMMC_CmdBlockLength>
 800e5f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	e0ad      	b.n	800e760 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e60c:	041b      	lsls	r3, r3, #16
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f003 fea8 	bl	8012366 <SDMMC_CmdAppCommand>
 800e616:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	e09e      	b.n	800e760 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e622:	f04f 33ff 	mov.w	r3, #4294967295
 800e626:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e628:	2308      	movs	r3, #8
 800e62a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e62c:	2330      	movs	r3, #48	; 0x30
 800e62e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e630:	2302      	movs	r3, #2
 800e632:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e634:	2300      	movs	r3, #0
 800e636:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e638:	2301      	movs	r3, #1
 800e63a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f107 0210 	add.w	r2, r7, #16
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f003 fd14 	bl	8012074 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f003 feee 	bl	8012432 <SDMMC_CmdSendSCR>
 800e656:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d027      	beq.n	800e6ae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	e07e      	b.n	800e760 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d113      	bne.n	800e698 <SD_FindSCR+0xcc>
 800e670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e672:	2b00      	cmp	r3, #0
 800e674:	d110      	bne.n	800e698 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f003 fc72 	bl	8011f64 <SDMMC_ReadFIFO>
 800e680:	4603      	mov	r3, r0
 800e682:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f003 fc6b 	bl	8011f64 <SDMMC_ReadFIFO>
 800e68e:	4603      	mov	r3, r0
 800e690:	60fb      	str	r3, [r7, #12]
      index++;
 800e692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e694:	3301      	adds	r3, #1
 800e696:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e698:	f7f5 f9ea 	bl	8003a70 <HAL_GetTick>
 800e69c:	4602      	mov	r2, r0
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a6:	d102      	bne.n	800e6ae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6ac:	e058      	b.n	800e760 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6b4:	f240 532a 	movw	r3, #1322	; 0x52a
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d0d1      	beq.n	800e662 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c4:	f003 0308 	and.w	r3, r3, #8
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2208      	movs	r2, #8
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6d4:	2308      	movs	r3, #8
 800e6d6:	e043      	b.n	800e760 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6de:	f003 0302 	and.w	r3, r3, #2
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d005      	beq.n	800e6f2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6ee:	2302      	movs	r3, #2
 800e6f0:	e036      	b.n	800e760 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f8:	f003 0320 	and.w	r3, r3, #32
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2220      	movs	r2, #32
 800e706:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e708:	2320      	movs	r3, #32
 800e70a:	e029      	b.n	800e760 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a15      	ldr	r2, [pc, #84]	; (800e768 <SD_FindSCR+0x19c>)
 800e712:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	061a      	lsls	r2, r3, #24
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	021b      	lsls	r3, r3, #8
 800e71c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e720:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	0a1b      	lsrs	r3, r3, #8
 800e726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e72a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	0e1b      	lsrs	r3, r3, #24
 800e730:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	601a      	str	r2, [r3, #0]
    scr++;
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	3304      	adds	r3, #4
 800e73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	061a      	lsls	r2, r3, #24
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	021b      	lsls	r3, r3, #8
 800e744:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e748:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	0a1b      	lsrs	r3, r3, #8
 800e74e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e752:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	0e1b      	lsrs	r3, r3, #24
 800e758:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3738      	adds	r7, #56	; 0x38
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	18000f3a 	.word	0x18000f3a

0800e76c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e77e:	2b1f      	cmp	r3, #31
 800e780:	d936      	bls.n	800e7f0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e782:	2300      	movs	r3, #0
 800e784:	617b      	str	r3, [r7, #20]
 800e786:	e027      	b.n	800e7d8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f003 fbe9 	bl	8011f64 <SDMMC_ReadFIFO>
 800e792:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	b2da      	uxtb	r2, r3
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	0a1b      	lsrs	r3, r3, #8
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	0c1b      	lsrs	r3, r3, #16
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	0e1b      	lsrs	r3, r3, #24
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	2b07      	cmp	r3, #7
 800e7dc:	d9d4      	bls.n	800e788 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e8:	f1a3 0220 	sub.w	r2, r3, #32
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e7f0:	bf00      	nop
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	69db      	ldr	r3, [r3, #28]
 800e804:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	2b1f      	cmp	r3, #31
 800e80c:	d93a      	bls.n	800e884 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e80e:	2300      	movs	r3, #0
 800e810:	617b      	str	r3, [r7, #20]
 800e812:	e02b      	b.n	800e86c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	3301      	adds	r3, #1
 800e81e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	021a      	lsls	r2, r3, #8
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	4313      	orrs	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	3301      	adds	r3, #1
 800e830:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	041a      	lsls	r2, r3, #16
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4313      	orrs	r3, r2
 800e83c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	3301      	adds	r3, #1
 800e842:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	061a      	lsls	r2, r3, #24
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	3301      	adds	r3, #1
 800e854:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f107 020c 	add.w	r2, r7, #12
 800e85e:	4611      	mov	r1, r2
 800e860:	4618      	mov	r0, r3
 800e862:	f003 fb8c 	bl	8011f7e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	3301      	adds	r3, #1
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2b07      	cmp	r3, #7
 800e870:	d9d0      	bls.n	800e814 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a1b      	ldr	r3, [r3, #32]
 800e87c:	f1a3 0220 	sub.w	r2, r3, #32
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	621a      	str	r2, [r3, #32]
  }
}
 800e884:	bf00      	nop
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8a8:	bf00      	nop
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e10f      	b.n	800eb0e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a87      	ldr	r2, [pc, #540]	; (800eb18 <HAL_SPI_Init+0x23c>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00f      	beq.n	800e91e <HAL_SPI_Init+0x42>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a86      	ldr	r2, [pc, #536]	; (800eb1c <HAL_SPI_Init+0x240>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d00a      	beq.n	800e91e <HAL_SPI_Init+0x42>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a84      	ldr	r2, [pc, #528]	; (800eb20 <HAL_SPI_Init+0x244>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d005      	beq.n	800e91e <HAL_SPI_Init+0x42>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	2b0f      	cmp	r3, #15
 800e918:	d901      	bls.n	800e91e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e91a:	2301      	movs	r3, #1
 800e91c:	e0f7      	b.n	800eb0e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fd5a 	bl	800f3d8 <SPI_GetPacketSize>
 800e924:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a7b      	ldr	r2, [pc, #492]	; (800eb18 <HAL_SPI_Init+0x23c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d00c      	beq.n	800e94a <HAL_SPI_Init+0x6e>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4a79      	ldr	r2, [pc, #484]	; (800eb1c <HAL_SPI_Init+0x240>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d007      	beq.n	800e94a <HAL_SPI_Init+0x6e>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a78      	ldr	r2, [pc, #480]	; (800eb20 <HAL_SPI_Init+0x244>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d002      	beq.n	800e94a <HAL_SPI_Init+0x6e>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b08      	cmp	r3, #8
 800e948:	d811      	bhi.n	800e96e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e94e:	4a72      	ldr	r2, [pc, #456]	; (800eb18 <HAL_SPI_Init+0x23c>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d009      	beq.n	800e968 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a70      	ldr	r2, [pc, #448]	; (800eb1c <HAL_SPI_Init+0x240>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d004      	beq.n	800e968 <HAL_SPI_Init+0x8c>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a6f      	ldr	r2, [pc, #444]	; (800eb20 <HAL_SPI_Init+0x244>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d104      	bne.n	800e972 <HAL_SPI_Init+0x96>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b10      	cmp	r3, #16
 800e96c:	d901      	bls.n	800e972 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e0cd      	b.n	800eb0e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7f4 fa8a 	bl	8002ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f022 0201 	bic.w	r2, r2, #1
 800e9a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e9ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9b8:	d119      	bne.n	800e9ee <HAL_SPI_Init+0x112>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9c2:	d103      	bne.n	800e9cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d008      	beq.n	800e9de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10c      	bne.n	800e9ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9dc:	d107      	bne.n	800e9ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00f      	beq.n	800ea1a <HAL_SPI_Init+0x13e>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	2b06      	cmp	r3, #6
 800ea00:	d90b      	bls.n	800ea1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	e007      	b.n	800ea2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	69da      	ldr	r2, [r3, #28]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea32:	431a      	orrs	r2, r3
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	431a      	orrs	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3c:	ea42 0103 	orr.w	r1, r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	68da      	ldr	r2, [r3, #12]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea54:	431a      	orrs	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	431a      	orrs	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	695b      	ldr	r3, [r3, #20]
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	431a      	orrs	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea7e:	431a      	orrs	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	431a      	orrs	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea8a:	ea42 0103 	orr.w	r1, r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	430a      	orrs	r2, r1
 800ea98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d113      	bne.n	800eaca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eab4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eac8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f022 0201 	bic.w	r2, r2, #1
 800ead8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00a      	beq.n	800eafc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	430a      	orrs	r2, r1
 800eafa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	40013000 	.word	0x40013000
 800eb1c:	40003800 	.word	0x40003800
 800eb20:	40003c00 	.word	0x40003c00

0800eb24 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08a      	sub	sp, #40	; 0x28
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	603b      	str	r3, [r7, #0]
 800eb30:	4613      	mov	r3, r2
 800eb32:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3320      	adds	r3, #32
 800eb3a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d101      	bne.n	800eb4e <HAL_SPI_Transmit+0x2a>
 800eb4a:	2302      	movs	r3, #2
 800eb4c:	e1e1      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb56:	f7f4 ff8b 	bl	8003a70 <HAL_GetTick>
 800eb5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d007      	beq.n	800eb78 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb68:	2302      	movs	r3, #2
 800eb6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb74:	7efb      	ldrb	r3, [r7, #27]
 800eb76:	e1cc      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d002      	beq.n	800eb84 <HAL_SPI_Transmit+0x60>
 800eb7e:	88fb      	ldrh	r3, [r7, #6]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d107      	bne.n	800eb94 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb90:	7efb      	ldrb	r3, [r7, #27]
 800eb92:	e1be      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2203      	movs	r2, #3
 800eb98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	88fa      	ldrh	r2, [r7, #6]
 800ebae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	88fa      	ldrh	r2, [r7, #6]
 800ebb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ebe4:	d108      	bne.n	800ebf8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	e009      	b.n	800ec0c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec0a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	4b96      	ldr	r3, [pc, #600]	; (800ee6c <HAL_SPI_Transmit+0x348>)
 800ec14:	4013      	ands	r3, r2
 800ec16:	88f9      	ldrh	r1, [r7, #6]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	6812      	ldr	r2, [r2, #0]
 800ec1c:	430b      	orrs	r3, r1
 800ec1e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f042 0201 	orr.w	r2, r2, #1
 800ec2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec38:	d107      	bne.n	800ec4a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	2b0f      	cmp	r3, #15
 800ec50:	d947      	bls.n	800ece2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec52:	e03f      	b.n	800ecd4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	f003 0302 	and.w	r3, r3, #2
 800ec5e:	2b02      	cmp	r3, #2
 800ec60:	d114      	bne.n	800ec8c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6812      	ldr	r2, [r2, #0]
 800ec6c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec72:	1d1a      	adds	r2, r3, #4
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	3b01      	subs	r3, #1
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec8a:	e023      	b.n	800ecd4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec8c:	f7f4 fef0 	bl	8003a70 <HAL_GetTick>
 800ec90:	4602      	mov	r2, r0
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d803      	bhi.n	800eca4 <HAL_SPI_Transmit+0x180>
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca2:	d102      	bne.n	800ecaa <HAL_SPI_Transmit+0x186>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d114      	bne.n	800ecd4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f000 fac6 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecd0:	2303      	movs	r3, #3
 800ecd2:	e11e      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1b9      	bne.n	800ec54 <HAL_SPI_Transmit+0x130>
 800ece0:	e0f1      	b.n	800eec6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	2b07      	cmp	r3, #7
 800ece8:	f240 80e6 	bls.w	800eeb8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecec:	e05d      	b.n	800edaa <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	695b      	ldr	r3, [r3, #20]
 800ecf4:	f003 0302 	and.w	r3, r3, #2
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d132      	bne.n	800ed62 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d918      	bls.n	800ed3a <HAL_SPI_Transmit+0x216>
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d014      	beq.n	800ed3a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6812      	ldr	r2, [r2, #0]
 800ed1a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed20:	1d1a      	adds	r2, r3, #4
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	3b02      	subs	r3, #2
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed38:	e037      	b.n	800edaa <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed3e:	881a      	ldrh	r2, [r3, #0]
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed48:	1c9a      	adds	r2, r3, #2
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	3b01      	subs	r3, #1
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed60:	e023      	b.n	800edaa <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed62:	f7f4 fe85 	bl	8003a70 <HAL_GetTick>
 800ed66:	4602      	mov	r2, r0
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d803      	bhi.n	800ed7a <HAL_SPI_Transmit+0x256>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed78:	d102      	bne.n	800ed80 <HAL_SPI_Transmit+0x25c>
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d114      	bne.n	800edaa <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f000 fa5b 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eda6:	2303      	movs	r3, #3
 800eda8:	e0b3      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d19b      	bne.n	800ecee <HAL_SPI_Transmit+0x1ca>
 800edb6:	e086      	b.n	800eec6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	f003 0302 	and.w	r3, r3, #2
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d154      	bne.n	800ee70 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edcc:	b29b      	uxth	r3, r3
 800edce:	2b03      	cmp	r3, #3
 800edd0:	d918      	bls.n	800ee04 <HAL_SPI_Transmit+0x2e0>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edd6:	2b40      	cmp	r3, #64	; 0x40
 800edd8:	d914      	bls.n	800ee04 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	6812      	ldr	r2, [r2, #0]
 800ede4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edea:	1d1a      	adds	r2, r3, #4
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	3b04      	subs	r3, #4
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee02:	e059      	b.n	800eeb8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d917      	bls.n	800ee40 <HAL_SPI_Transmit+0x31c>
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d013      	beq.n	800ee40 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee1c:	881a      	ldrh	r2, [r3, #0]
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee26:	1c9a      	adds	r2, r3, #2
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	3b02      	subs	r3, #2
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee3e:	e03b      	b.n	800eeb8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3320      	adds	r3, #32
 800ee4a:	7812      	ldrb	r2, [r2, #0]
 800ee4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee52:	1c5a      	adds	r2, r3, #1
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	3b01      	subs	r3, #1
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee6a:	e025      	b.n	800eeb8 <HAL_SPI_Transmit+0x394>
 800ee6c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee70:	f7f4 fdfe 	bl	8003a70 <HAL_GetTick>
 800ee74:	4602      	mov	r2, r0
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	683a      	ldr	r2, [r7, #0]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d803      	bhi.n	800ee88 <HAL_SPI_Transmit+0x364>
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee86:	d102      	bne.n	800ee8e <HAL_SPI_Transmit+0x36a>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d114      	bne.n	800eeb8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f000 f9d4 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	e02c      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f47f af79 	bne.w	800edb8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	9300      	str	r3, [sp, #0]
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2200      	movs	r2, #0
 800eece:	2108      	movs	r1, #8
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f000 fa53 	bl	800f37c <SPI_WaitOnFlagUntilTimeout>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d007      	beq.n	800eeec <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eee2:	f043 0220 	orr.w	r2, r3, #32
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 f9a5 	bl	800f23c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d001      	beq.n	800ef10 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e000      	b.n	800ef12 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ef10:	7efb      	ldrb	r3, [r7, #27]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3720      	adds	r7, #32
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop

0800ef1c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3330      	adds	r3, #48	; 0x30
 800ef36:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d101      	bne.n	800ef46 <HAL_SPI_Receive+0x2a>
 800ef42:	2302      	movs	r3, #2
 800ef44:	e173      	b.n	800f22e <HAL_SPI_Receive+0x312>
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef4e:	f7f4 fd8f 	bl	8003a70 <HAL_GetTick>
 800ef52:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d007      	beq.n	800ef70 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef60:	2302      	movs	r3, #2
 800ef62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef6c:	7ffb      	ldrb	r3, [r7, #31]
 800ef6e:	e15e      	b.n	800f22e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <HAL_SPI_Receive+0x60>
 800ef76:	88fb      	ldrh	r3, [r7, #6]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d107      	bne.n	800ef8c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef88:	7ffb      	ldrb	r3, [r7, #31]
 800ef8a:	e150      	b.n	800f22e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2204      	movs	r2, #4
 800ef90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	88fa      	ldrh	r2, [r7, #6]
 800efa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	88fa      	ldrh	r2, [r7, #6]
 800efae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800efdc:	d108      	bne.n	800eff0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efec:	601a      	str	r2, [r3, #0]
 800efee:	e009      	b.n	800f004 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f002:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	685a      	ldr	r2, [r3, #4]
 800f00a:	4b8b      	ldr	r3, [pc, #556]	; (800f238 <HAL_SPI_Receive+0x31c>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	88f9      	ldrh	r1, [r7, #6]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	6812      	ldr	r2, [r2, #0]
 800f014:	430b      	orrs	r3, r1
 800f016:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f042 0201 	orr.w	r2, r2, #1
 800f026:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f030:	d107      	bne.n	800f042 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f040:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	2b0f      	cmp	r3, #15
 800f048:	d948      	bls.n	800f0dc <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f04a:	e040      	b.n	800f0ce <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	695a      	ldr	r2, [r3, #20]
 800f052:	f248 0308 	movw	r3, #32776	; 0x8008
 800f056:	4013      	ands	r3, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d014      	beq.n	800f086 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f066:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f06c:	1d1a      	adds	r2, r3, #4
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f078:	b29b      	uxth	r3, r3
 800f07a:	3b01      	subs	r3, #1
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f084:	e023      	b.n	800f0ce <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f086:	f7f4 fcf3 	bl	8003a70 <HAL_GetTick>
 800f08a:	4602      	mov	r2, r0
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	429a      	cmp	r2, r3
 800f094:	d803      	bhi.n	800f09e <HAL_SPI_Receive+0x182>
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09c:	d102      	bne.n	800f0a4 <HAL_SPI_Receive+0x188>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d114      	bne.n	800f0ce <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 f8c9 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	e0af      	b.n	800f22e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1b8      	bne.n	800f04c <HAL_SPI_Receive+0x130>
 800f0da:	e095      	b.n	800f208 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	2b07      	cmp	r3, #7
 800f0e2:	f240 808b 	bls.w	800f1fc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0e6:	e03f      	b.n	800f168 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d114      	bne.n	800f120 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0fa:	69ba      	ldr	r2, [r7, #24]
 800f0fc:	8812      	ldrh	r2, [r2, #0]
 800f0fe:	b292      	uxth	r2, r2
 800f100:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f106:	1c9a      	adds	r2, r3, #2
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f112:	b29b      	uxth	r3, r3
 800f114:	3b01      	subs	r3, #1
 800f116:	b29a      	uxth	r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f11e:	e023      	b.n	800f168 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f120:	f7f4 fca6 	bl	8003a70 <HAL_GetTick>
 800f124:	4602      	mov	r2, r0
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d803      	bhi.n	800f138 <HAL_SPI_Receive+0x21c>
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f136:	d102      	bne.n	800f13e <HAL_SPI_Receive+0x222>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d114      	bne.n	800f168 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 f87c 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2201      	movs	r2, #1
 800f160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f164:	2303      	movs	r3, #3
 800f166:	e062      	b.n	800f22e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f16e:	b29b      	uxth	r3, r3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1b9      	bne.n	800f0e8 <HAL_SPI_Receive+0x1cc>
 800f174:	e048      	b.n	800f208 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	f003 0301 	and.w	r3, r3, #1
 800f180:	2b01      	cmp	r3, #1
 800f182:	d117      	bne.n	800f1b4 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f190:	7812      	ldrb	r2, [r2, #0]
 800f192:	b2d2      	uxtb	r2, r2
 800f194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f19a:	1c5a      	adds	r2, r3, #1
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1b2:	e023      	b.n	800f1fc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1b4:	f7f4 fc5c 	bl	8003a70 <HAL_GetTick>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	1ad3      	subs	r3, r2, r3
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d803      	bhi.n	800f1cc <HAL_SPI_Receive+0x2b0>
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ca:	d102      	bne.n	800f1d2 <HAL_SPI_Receive+0x2b6>
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d114      	bne.n	800f1fc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f000 f832 	bl	800f23c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e018      	b.n	800f22e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f202:	b29b      	uxth	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d1b6      	bne.n	800f176 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f817 	bl	800f23c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2200      	movs	r2, #0
 800f212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	e000      	b.n	800f22e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f22c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3720      	adds	r7, #32
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	ffff0000 	.word	0xffff0000

0800f23c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	699a      	ldr	r2, [r3, #24]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f042 0208 	orr.w	r2, r2, #8
 800f25a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	699a      	ldr	r2, [r3, #24]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f042 0210 	orr.w	r2, r2, #16
 800f26a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f022 0201 	bic.w	r2, r2, #1
 800f27a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6919      	ldr	r1, [r3, #16]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	4b3c      	ldr	r3, [pc, #240]	; (800f378 <SPI_CloseTransfer+0x13c>)
 800f288:	400b      	ands	r3, r1
 800f28a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689a      	ldr	r2, [r3, #8]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f29a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b04      	cmp	r3, #4
 800f2a6:	d014      	beq.n	800f2d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f003 0320 	and.w	r3, r3, #32
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00f      	beq.n	800f2d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	699a      	ldr	r2, [r3, #24]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f042 0220 	orr.w	r2, r2, #32
 800f2d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d014      	beq.n	800f308 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00f      	beq.n	800f308 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ee:	f043 0204 	orr.w	r2, r3, #4
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	699a      	ldr	r2, [r3, #24]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f306:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00f      	beq.n	800f332 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f318:	f043 0201 	orr.w	r2, r3, #1
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	699a      	ldr	r2, [r3, #24]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f330:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00f      	beq.n	800f35c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f342:	f043 0208 	orr.w	r2, r3, #8
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	699a      	ldr	r2, [r3, #24]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f35a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f36c:	bf00      	nop
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	fffffc90 	.word	0xfffffc90

0800f37c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	603b      	str	r3, [r7, #0]
 800f388:	4613      	mov	r3, r2
 800f38a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f38c:	e010      	b.n	800f3b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f38e:	f7f4 fb6f 	bl	8003a70 <HAL_GetTick>
 800f392:	4602      	mov	r2, r0
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	683a      	ldr	r2, [r7, #0]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d803      	bhi.n	800f3a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a4:	d102      	bne.n	800f3ac <SPI_WaitOnFlagUntilTimeout+0x30>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d101      	bne.n	800f3b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	e00f      	b.n	800f3d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	695a      	ldr	r2, [r3, #20]
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	bf0c      	ite	eq
 800f3c0:	2301      	moveq	r3, #1
 800f3c2:	2300      	movne	r3, #0
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d0df      	beq.n	800f38e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3710      	adds	r7, #16
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e4:	095b      	lsrs	r3, r3, #5
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	3307      	adds	r3, #7
 800f3f6:	08db      	lsrs	r3, r3, #3
 800f3f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800f402:	4618      	mov	r0, r3
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b082      	sub	sp, #8
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d101      	bne.n	800f420 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	e049      	b.n	800f4b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f426:	b2db      	uxtb	r3, r3
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d106      	bne.n	800f43a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7f3 ff85 	bl	8003344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2202      	movs	r2, #2
 800f43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3304      	adds	r3, #4
 800f44a:	4619      	mov	r1, r3
 800f44c:	4610      	mov	r0, r2
 800f44e:	f000 ff29 	bl	80102a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2201      	movs	r2, #1
 800f496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e049      	b.n	800f562 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d106      	bne.n	800f4e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7f3 fd98 	bl	8003018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f000 fed2 	bl	80102a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f560:	2300      	movs	r3, #0
}
 800f562:	4618      	mov	r0, r3
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
	...

0800f56c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <HAL_TIM_PWM_Start+0x24>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f582:	b2db      	uxtb	r3, r3
 800f584:	2b01      	cmp	r3, #1
 800f586:	bf14      	ite	ne
 800f588:	2301      	movne	r3, #1
 800f58a:	2300      	moveq	r3, #0
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	e03c      	b.n	800f60a <HAL_TIM_PWM_Start+0x9e>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2b04      	cmp	r3, #4
 800f594:	d109      	bne.n	800f5aa <HAL_TIM_PWM_Start+0x3e>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	bf14      	ite	ne
 800f5a2:	2301      	movne	r3, #1
 800f5a4:	2300      	moveq	r3, #0
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	e02f      	b.n	800f60a <HAL_TIM_PWM_Start+0x9e>
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b08      	cmp	r3, #8
 800f5ae:	d109      	bne.n	800f5c4 <HAL_TIM_PWM_Start+0x58>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	bf14      	ite	ne
 800f5bc:	2301      	movne	r3, #1
 800f5be:	2300      	moveq	r3, #0
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	e022      	b.n	800f60a <HAL_TIM_PWM_Start+0x9e>
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	2b0c      	cmp	r3, #12
 800f5c8:	d109      	bne.n	800f5de <HAL_TIM_PWM_Start+0x72>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	bf14      	ite	ne
 800f5d6:	2301      	movne	r3, #1
 800f5d8:	2300      	moveq	r3, #0
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	e015      	b.n	800f60a <HAL_TIM_PWM_Start+0x9e>
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b10      	cmp	r3, #16
 800f5e2:	d109      	bne.n	800f5f8 <HAL_TIM_PWM_Start+0x8c>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	bf14      	ite	ne
 800f5f0:	2301      	movne	r3, #1
 800f5f2:	2300      	moveq	r3, #0
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	e008      	b.n	800f60a <HAL_TIM_PWM_Start+0x9e>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b01      	cmp	r3, #1
 800f602:	bf14      	ite	ne
 800f604:	2301      	movne	r3, #1
 800f606:	2300      	moveq	r3, #0
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d001      	beq.n	800f612 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	e0ab      	b.n	800f76a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d104      	bne.n	800f622 <HAL_TIM_PWM_Start+0xb6>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2202      	movs	r2, #2
 800f61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f620:	e023      	b.n	800f66a <HAL_TIM_PWM_Start+0xfe>
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	2b04      	cmp	r3, #4
 800f626:	d104      	bne.n	800f632 <HAL_TIM_PWM_Start+0xc6>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2202      	movs	r2, #2
 800f62c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f630:	e01b      	b.n	800f66a <HAL_TIM_PWM_Start+0xfe>
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b08      	cmp	r3, #8
 800f636:	d104      	bne.n	800f642 <HAL_TIM_PWM_Start+0xd6>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2202      	movs	r2, #2
 800f63c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f640:	e013      	b.n	800f66a <HAL_TIM_PWM_Start+0xfe>
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b0c      	cmp	r3, #12
 800f646:	d104      	bne.n	800f652 <HAL_TIM_PWM_Start+0xe6>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2202      	movs	r2, #2
 800f64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f650:	e00b      	b.n	800f66a <HAL_TIM_PWM_Start+0xfe>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	2b10      	cmp	r3, #16
 800f656:	d104      	bne.n	800f662 <HAL_TIM_PWM_Start+0xf6>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2202      	movs	r2, #2
 800f65c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f660:	e003      	b.n	800f66a <HAL_TIM_PWM_Start+0xfe>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2202      	movs	r2, #2
 800f666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2201      	movs	r2, #1
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	4618      	mov	r0, r3
 800f674:	f001 f992 	bl	801099c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a3d      	ldr	r2, [pc, #244]	; (800f774 <HAL_TIM_PWM_Start+0x208>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d013      	beq.n	800f6aa <HAL_TIM_PWM_Start+0x13e>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4a3c      	ldr	r2, [pc, #240]	; (800f778 <HAL_TIM_PWM_Start+0x20c>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d00e      	beq.n	800f6aa <HAL_TIM_PWM_Start+0x13e>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a3a      	ldr	r2, [pc, #232]	; (800f77c <HAL_TIM_PWM_Start+0x210>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d009      	beq.n	800f6aa <HAL_TIM_PWM_Start+0x13e>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a39      	ldr	r2, [pc, #228]	; (800f780 <HAL_TIM_PWM_Start+0x214>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d004      	beq.n	800f6aa <HAL_TIM_PWM_Start+0x13e>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a37      	ldr	r2, [pc, #220]	; (800f784 <HAL_TIM_PWM_Start+0x218>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d101      	bne.n	800f6ae <HAL_TIM_PWM_Start+0x142>
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e000      	b.n	800f6b0 <HAL_TIM_PWM_Start+0x144>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d007      	beq.n	800f6c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a2a      	ldr	r2, [pc, #168]	; (800f774 <HAL_TIM_PWM_Start+0x208>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d02c      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6d6:	d027      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a2a      	ldr	r2, [pc, #168]	; (800f788 <HAL_TIM_PWM_Start+0x21c>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d022      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a29      	ldr	r2, [pc, #164]	; (800f78c <HAL_TIM_PWM_Start+0x220>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d01d      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a27      	ldr	r2, [pc, #156]	; (800f790 <HAL_TIM_PWM_Start+0x224>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d018      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a1f      	ldr	r2, [pc, #124]	; (800f778 <HAL_TIM_PWM_Start+0x20c>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d013      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a23      	ldr	r2, [pc, #140]	; (800f794 <HAL_TIM_PWM_Start+0x228>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d00e      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a1b      	ldr	r2, [pc, #108]	; (800f77c <HAL_TIM_PWM_Start+0x210>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d009      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a1f      	ldr	r2, [pc, #124]	; (800f798 <HAL_TIM_PWM_Start+0x22c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d004      	beq.n	800f728 <HAL_TIM_PWM_Start+0x1bc>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a1e      	ldr	r2, [pc, #120]	; (800f79c <HAL_TIM_PWM_Start+0x230>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d115      	bne.n	800f754 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	689a      	ldr	r2, [r3, #8]
 800f72e:	4b1c      	ldr	r3, [pc, #112]	; (800f7a0 <HAL_TIM_PWM_Start+0x234>)
 800f730:	4013      	ands	r3, r2
 800f732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2b06      	cmp	r3, #6
 800f738:	d015      	beq.n	800f766 <HAL_TIM_PWM_Start+0x1fa>
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f740:	d011      	beq.n	800f766 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f042 0201 	orr.w	r2, r2, #1
 800f750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f752:	e008      	b.n	800f766 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f042 0201 	orr.w	r2, r2, #1
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	e000      	b.n	800f768 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	40010000 	.word	0x40010000
 800f778:	40010400 	.word	0x40010400
 800f77c:	40014000 	.word	0x40014000
 800f780:	40014400 	.word	0x40014400
 800f784:	40014800 	.word	0x40014800
 800f788:	40000400 	.word	0x40000400
 800f78c:	40000800 	.word	0x40000800
 800f790:	40000c00 	.word	0x40000c00
 800f794:	40001800 	.word	0x40001800
 800f798:	4000e000 	.word	0x4000e000
 800f79c:	4000e400 	.word	0x4000e400
 800f7a0:	00010007 	.word	0x00010007

0800f7a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d109      	bne.n	800f7d0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	bf0c      	ite	eq
 800f7c8:	2301      	moveq	r3, #1
 800f7ca:	2300      	movne	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	e03c      	b.n	800f84a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2b04      	cmp	r3, #4
 800f7d4:	d109      	bne.n	800f7ea <HAL_TIM_PWM_Start_DMA+0x46>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	bf0c      	ite	eq
 800f7e2:	2301      	moveq	r3, #1
 800f7e4:	2300      	movne	r3, #0
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	e02f      	b.n	800f84a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b08      	cmp	r3, #8
 800f7ee:	d109      	bne.n	800f804 <HAL_TIM_PWM_Start_DMA+0x60>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b02      	cmp	r3, #2
 800f7fa:	bf0c      	ite	eq
 800f7fc:	2301      	moveq	r3, #1
 800f7fe:	2300      	movne	r3, #0
 800f800:	b2db      	uxtb	r3, r3
 800f802:	e022      	b.n	800f84a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	2b0c      	cmp	r3, #12
 800f808:	d109      	bne.n	800f81e <HAL_TIM_PWM_Start_DMA+0x7a>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b02      	cmp	r3, #2
 800f814:	bf0c      	ite	eq
 800f816:	2301      	moveq	r3, #1
 800f818:	2300      	movne	r3, #0
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	e015      	b.n	800f84a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2b10      	cmp	r3, #16
 800f822:	d109      	bne.n	800f838 <HAL_TIM_PWM_Start_DMA+0x94>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	bf0c      	ite	eq
 800f830:	2301      	moveq	r3, #1
 800f832:	2300      	movne	r3, #0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	e008      	b.n	800f84a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b02      	cmp	r3, #2
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f84e:	2302      	movs	r3, #2
 800f850:	e1ba      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d109      	bne.n	800f86c <HAL_TIM_PWM_Start_DMA+0xc8>
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b01      	cmp	r3, #1
 800f862:	bf0c      	ite	eq
 800f864:	2301      	moveq	r3, #1
 800f866:	2300      	movne	r3, #0
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	e03c      	b.n	800f8e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2b04      	cmp	r3, #4
 800f870:	d109      	bne.n	800f886 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	bf0c      	ite	eq
 800f87e:	2301      	moveq	r3, #1
 800f880:	2300      	movne	r3, #0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	e02f      	b.n	800f8e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	2b08      	cmp	r3, #8
 800f88a:	d109      	bne.n	800f8a0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f892:	b2db      	uxtb	r3, r3
 800f894:	2b01      	cmp	r3, #1
 800f896:	bf0c      	ite	eq
 800f898:	2301      	moveq	r3, #1
 800f89a:	2300      	movne	r3, #0
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	e022      	b.n	800f8e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2b0c      	cmp	r3, #12
 800f8a4:	d109      	bne.n	800f8ba <HAL_TIM_PWM_Start_DMA+0x116>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8ac:	b2db      	uxtb	r3, r3
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	bf0c      	ite	eq
 800f8b2:	2301      	moveq	r3, #1
 800f8b4:	2300      	movne	r3, #0
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	e015      	b.n	800f8e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2b10      	cmp	r3, #16
 800f8be:	d109      	bne.n	800f8d4 <HAL_TIM_PWM_Start_DMA+0x130>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	bf0c      	ite	eq
 800f8cc:	2301      	moveq	r3, #1
 800f8ce:	2300      	movne	r3, #0
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	e008      	b.n	800f8e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	bf0c      	ite	eq
 800f8e0:	2301      	moveq	r3, #1
 800f8e2:	2300      	movne	r3, #0
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d034      	beq.n	800f954 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <HAL_TIM_PWM_Start_DMA+0x152>
 800f8f0:	887b      	ldrh	r3, [r7, #2]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e166      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d104      	bne.n	800f90a <HAL_TIM_PWM_Start_DMA+0x166>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2202      	movs	r2, #2
 800f904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f908:	e026      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d104      	bne.n	800f91a <HAL_TIM_PWM_Start_DMA+0x176>
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2202      	movs	r2, #2
 800f914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f918:	e01e      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2b08      	cmp	r3, #8
 800f91e:	d104      	bne.n	800f92a <HAL_TIM_PWM_Start_DMA+0x186>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2202      	movs	r2, #2
 800f924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f928:	e016      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2b0c      	cmp	r3, #12
 800f92e:	d104      	bne.n	800f93a <HAL_TIM_PWM_Start_DMA+0x196>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2202      	movs	r2, #2
 800f934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f938:	e00e      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	2b10      	cmp	r3, #16
 800f93e:	d104      	bne.n	800f94a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2202      	movs	r2, #2
 800f944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f948:	e006      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2202      	movs	r2, #2
 800f94e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f952:	e001      	b.n	800f958 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f954:	2301      	movs	r3, #1
 800f956:	e137      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2b0c      	cmp	r3, #12
 800f95c:	f200 80ae 	bhi.w	800fabc <HAL_TIM_PWM_Start_DMA+0x318>
 800f960:	a201      	add	r2, pc, #4	; (adr r2, 800f968 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f966:	bf00      	nop
 800f968:	0800f99d 	.word	0x0800f99d
 800f96c:	0800fabd 	.word	0x0800fabd
 800f970:	0800fabd 	.word	0x0800fabd
 800f974:	0800fabd 	.word	0x0800fabd
 800f978:	0800f9e5 	.word	0x0800f9e5
 800f97c:	0800fabd 	.word	0x0800fabd
 800f980:	0800fabd 	.word	0x0800fabd
 800f984:	0800fabd 	.word	0x0800fabd
 800f988:	0800fa2d 	.word	0x0800fa2d
 800f98c:	0800fabd 	.word	0x0800fabd
 800f990:	0800fabd 	.word	0x0800fabd
 800f994:	0800fabd 	.word	0x0800fabd
 800f998:	0800fa75 	.word	0x0800fa75
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a0:	4a8b      	ldr	r2, [pc, #556]	; (800fbd0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a8:	4a8a      	ldr	r2, [pc, #552]	; (800fbd4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b0:	4a89      	ldr	r2, [pc, #548]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	3334      	adds	r3, #52	; 0x34
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	887b      	ldrh	r3, [r7, #2]
 800f9c4:	f7f6 f872 	bl	8005aac <HAL_DMA_Start_IT>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e0fa      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9e0:	60da      	str	r2, [r3, #12]
      break;
 800f9e2:	e06e      	b.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e8:	4a79      	ldr	r2, [pc, #484]	; (800fbd0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f0:	4a78      	ldr	r2, [pc, #480]	; (800fbd4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f8:	4a77      	ldr	r2, [pc, #476]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3338      	adds	r3, #56	; 0x38
 800fa08:	461a      	mov	r2, r3
 800fa0a:	887b      	ldrh	r3, [r7, #2]
 800fa0c:	f7f6 f84e 	bl	8005aac <HAL_DMA_Start_IT>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa16:	2301      	movs	r3, #1
 800fa18:	e0d6      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68da      	ldr	r2, [r3, #12]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa28:	60da      	str	r2, [r3, #12]
      break;
 800fa2a:	e04a      	b.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa30:	4a67      	ldr	r2, [pc, #412]	; (800fbd0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa38:	4a66      	ldr	r2, [pc, #408]	; (800fbd4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	4a65      	ldr	r2, [pc, #404]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	333c      	adds	r3, #60	; 0x3c
 800fa50:	461a      	mov	r2, r3
 800fa52:	887b      	ldrh	r3, [r7, #2]
 800fa54:	f7f6 f82a 	bl	8005aac <HAL_DMA_Start_IT>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	e0b2      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68da      	ldr	r2, [r3, #12]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa70:	60da      	str	r2, [r3, #12]
      break;
 800fa72:	e026      	b.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa78:	4a55      	ldr	r2, [pc, #340]	; (800fbd0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa80:	4a54      	ldr	r2, [pc, #336]	; (800fbd4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa88:	4a53      	ldr	r2, [pc, #332]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3340      	adds	r3, #64	; 0x40
 800fa98:	461a      	mov	r2, r3
 800fa9a:	887b      	ldrh	r3, [r7, #2]
 800fa9c:	f7f6 f806 	bl	8005aac <HAL_DMA_Start_IT>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e08e      	b.n	800fbc8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fab8:	60da      	str	r2, [r3, #12]
      break;
 800faba:	e002      	b.n	800fac2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fabc:	2301      	movs	r3, #1
 800fabe:	75fb      	strb	r3, [r7, #23]
      break;
 800fac0:	bf00      	nop
  }

  if (status == HAL_OK)
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d17e      	bne.n	800fbc6 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2201      	movs	r2, #1
 800face:	68b9      	ldr	r1, [r7, #8]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f000 ff63 	bl	801099c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a40      	ldr	r2, [pc, #256]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x438>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d013      	beq.n	800fb08 <HAL_TIM_PWM_Start_DMA+0x364>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a3e      	ldr	r2, [pc, #248]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d00e      	beq.n	800fb08 <HAL_TIM_PWM_Start_DMA+0x364>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a3d      	ldr	r2, [pc, #244]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d009      	beq.n	800fb08 <HAL_TIM_PWM_Start_DMA+0x364>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a3b      	ldr	r2, [pc, #236]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d004      	beq.n	800fb08 <HAL_TIM_PWM_Start_DMA+0x364>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a3a      	ldr	r2, [pc, #232]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d101      	bne.n	800fb0c <HAL_TIM_PWM_Start_DMA+0x368>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e000      	b.n	800fb0e <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a2d      	ldr	r2, [pc, #180]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d02c      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb34:	d027      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a2d      	ldr	r2, [pc, #180]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d022      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4a2b      	ldr	r2, [pc, #172]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d01d      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a2a      	ldr	r2, [pc, #168]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d018      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a21      	ldr	r2, [pc, #132]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d013      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4a26      	ldr	r2, [pc, #152]	; (800fbfc <HAL_TIM_PWM_Start_DMA+0x458>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d00e      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a1d      	ldr	r2, [pc, #116]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d009      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4a22      	ldr	r2, [pc, #136]	; (800fc00 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d004      	beq.n	800fb86 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a20      	ldr	r2, [pc, #128]	; (800fc04 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d115      	bne.n	800fbb2 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	689a      	ldr	r2, [r3, #8]
 800fb8c:	4b1e      	ldr	r3, [pc, #120]	; (800fc08 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fb8e:	4013      	ands	r3, r2
 800fb90:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	2b06      	cmp	r3, #6
 800fb96:	d015      	beq.n	800fbc4 <HAL_TIM_PWM_Start_DMA+0x420>
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb9e:	d011      	beq.n	800fbc4 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f042 0201 	orr.w	r2, r2, #1
 800fbae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbb0:	e008      	b.n	800fbc4 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f042 0201 	orr.w	r2, r2, #1
 800fbc0:	601a      	str	r2, [r3, #0]
 800fbc2:	e000      	b.n	800fbc6 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbc4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3718      	adds	r7, #24
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	08010193 	.word	0x08010193
 800fbd4:	0801023b 	.word	0x0801023b
 800fbd8:	08010101 	.word	0x08010101
 800fbdc:	40010000 	.word	0x40010000
 800fbe0:	40010400 	.word	0x40010400
 800fbe4:	40014000 	.word	0x40014000
 800fbe8:	40014400 	.word	0x40014400
 800fbec:	40014800 	.word	0x40014800
 800fbf0:	40000400 	.word	0x40000400
 800fbf4:	40000800 	.word	0x40000800
 800fbf8:	40000c00 	.word	0x40000c00
 800fbfc:	40001800 	.word	0x40001800
 800fc00:	4000e000 	.word	0x4000e000
 800fc04:	4000e400 	.word	0x4000e400
 800fc08:	00010007 	.word	0x00010007

0800fc0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	f003 0302 	and.w	r3, r3, #2
 800fc1e:	2b02      	cmp	r3, #2
 800fc20:	d122      	bne.n	800fc68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	f003 0302 	and.w	r3, r3, #2
 800fc2c:	2b02      	cmp	r3, #2
 800fc2e:	d11b      	bne.n	800fc68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f06f 0202 	mvn.w	r2, #2
 800fc38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	699b      	ldr	r3, [r3, #24]
 800fc46:	f003 0303 	and.w	r3, r3, #3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 fa24 	bl	801009c <HAL_TIM_IC_CaptureCallback>
 800fc54:	e005      	b.n	800fc62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fa16 	bl	8010088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fa27 	bl	80100b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	f003 0304 	and.w	r3, r3, #4
 800fc72:	2b04      	cmp	r3, #4
 800fc74:	d122      	bne.n	800fcbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	f003 0304 	and.w	r3, r3, #4
 800fc80:	2b04      	cmp	r3, #4
 800fc82:	d11b      	bne.n	800fcbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f06f 0204 	mvn.w	r2, #4
 800fc8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2202      	movs	r2, #2
 800fc92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	699b      	ldr	r3, [r3, #24]
 800fc9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d003      	beq.n	800fcaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f9fa 	bl	801009c <HAL_TIM_IC_CaptureCallback>
 800fca8:	e005      	b.n	800fcb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f9ec 	bl	8010088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 f9fd 	bl	80100b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	f003 0308 	and.w	r3, r3, #8
 800fcc6:	2b08      	cmp	r3, #8
 800fcc8:	d122      	bne.n	800fd10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	f003 0308 	and.w	r3, r3, #8
 800fcd4:	2b08      	cmp	r3, #8
 800fcd6:	d11b      	bne.n	800fd10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f06f 0208 	mvn.w	r2, #8
 800fce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2204      	movs	r2, #4
 800fce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	69db      	ldr	r3, [r3, #28]
 800fcee:	f003 0303 	and.w	r3, r3, #3
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d003      	beq.n	800fcfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f9d0 	bl	801009c <HAL_TIM_IC_CaptureCallback>
 800fcfc:	e005      	b.n	800fd0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f9c2 	bl	8010088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f9d3 	bl	80100b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	f003 0310 	and.w	r3, r3, #16
 800fd1a:	2b10      	cmp	r3, #16
 800fd1c:	d122      	bne.n	800fd64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	f003 0310 	and.w	r3, r3, #16
 800fd28:	2b10      	cmp	r3, #16
 800fd2a:	d11b      	bne.n	800fd64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f06f 0210 	mvn.w	r2, #16
 800fd34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2208      	movs	r2, #8
 800fd3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f9a6 	bl	801009c <HAL_TIM_IC_CaptureCallback>
 800fd50:	e005      	b.n	800fd5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 f998 	bl	8010088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f9a9 	bl	80100b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d10e      	bne.n	800fd90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	f003 0301 	and.w	r3, r3, #1
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d107      	bne.n	800fd90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f06f 0201 	mvn.w	r2, #1
 800fd88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f972 	bl	8010074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd9a:	2b80      	cmp	r3, #128	; 0x80
 800fd9c:	d10e      	bne.n	800fdbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda8:	2b80      	cmp	r3, #128	; 0x80
 800fdaa:	d107      	bne.n	800fdbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fdb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 febc 	bl	8010b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdca:	d10e      	bne.n	800fdea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdd6:	2b80      	cmp	r3, #128	; 0x80
 800fdd8:	d107      	bne.n	800fdea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fde2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 feaf 	bl	8010b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf4:	2b40      	cmp	r3, #64	; 0x40
 800fdf6:	d10e      	bne.n	800fe16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe02:	2b40      	cmp	r3, #64	; 0x40
 800fe04:	d107      	bne.n	800fe16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f961 	bl	80100d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	f003 0320 	and.w	r3, r3, #32
 800fe20:	2b20      	cmp	r3, #32
 800fe22:	d10e      	bne.n	800fe42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	f003 0320 	and.w	r3, r3, #32
 800fe2e:	2b20      	cmp	r3, #32
 800fe30:	d107      	bne.n	800fe42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f06f 0220 	mvn.w	r2, #32
 800fe3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fe6f 	bl	8010b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe42:	bf00      	nop
 800fe44:	3708      	adds	r7, #8
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b086      	sub	sp, #24
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d101      	bne.n	800fe6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe66:	2302      	movs	r3, #2
 800fe68:	e0ff      	b.n	801006a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b14      	cmp	r3, #20
 800fe76:	f200 80f0 	bhi.w	801005a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe7a:	a201      	add	r2, pc, #4	; (adr r2, 800fe80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe80:	0800fed5 	.word	0x0800fed5
 800fe84:	0801005b 	.word	0x0801005b
 800fe88:	0801005b 	.word	0x0801005b
 800fe8c:	0801005b 	.word	0x0801005b
 800fe90:	0800ff15 	.word	0x0800ff15
 800fe94:	0801005b 	.word	0x0801005b
 800fe98:	0801005b 	.word	0x0801005b
 800fe9c:	0801005b 	.word	0x0801005b
 800fea0:	0800ff57 	.word	0x0800ff57
 800fea4:	0801005b 	.word	0x0801005b
 800fea8:	0801005b 	.word	0x0801005b
 800feac:	0801005b 	.word	0x0801005b
 800feb0:	0800ff97 	.word	0x0800ff97
 800feb4:	0801005b 	.word	0x0801005b
 800feb8:	0801005b 	.word	0x0801005b
 800febc:	0801005b 	.word	0x0801005b
 800fec0:	0800ffd9 	.word	0x0800ffd9
 800fec4:	0801005b 	.word	0x0801005b
 800fec8:	0801005b 	.word	0x0801005b
 800fecc:	0801005b 	.word	0x0801005b
 800fed0:	08010019 	.word	0x08010019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	4618      	mov	r0, r3
 800fedc:	f000 fa88 	bl	80103f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	699a      	ldr	r2, [r3, #24]
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f042 0208 	orr.w	r2, r2, #8
 800feee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	699a      	ldr	r2, [r3, #24]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f022 0204 	bic.w	r2, r2, #4
 800fefe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6999      	ldr	r1, [r3, #24]
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	691a      	ldr	r2, [r3, #16]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	619a      	str	r2, [r3, #24]
      break;
 800ff12:	e0a5      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68b9      	ldr	r1, [r7, #8]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 faf8 	bl	8010510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	699a      	ldr	r2, [r3, #24]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	699a      	ldr	r2, [r3, #24]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6999      	ldr	r1, [r3, #24]
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	021a      	lsls	r2, r3, #8
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	430a      	orrs	r2, r1
 800ff52:	619a      	str	r2, [r3, #24]
      break;
 800ff54:	e084      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	68b9      	ldr	r1, [r7, #8]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 fb61 	bl	8010624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	69da      	ldr	r2, [r3, #28]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f042 0208 	orr.w	r2, r2, #8
 800ff70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	69da      	ldr	r2, [r3, #28]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f022 0204 	bic.w	r2, r2, #4
 800ff80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	69d9      	ldr	r1, [r3, #28]
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	691a      	ldr	r2, [r3, #16]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	430a      	orrs	r2, r1
 800ff92:	61da      	str	r2, [r3, #28]
      break;
 800ff94:	e064      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	68b9      	ldr	r1, [r7, #8]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f000 fbc9 	bl	8010734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	69da      	ldr	r2, [r3, #28]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	69da      	ldr	r2, [r3, #28]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	69d9      	ldr	r1, [r3, #28]
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	021a      	lsls	r2, r3, #8
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	61da      	str	r2, [r3, #28]
      break;
 800ffd6:	e043      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68b9      	ldr	r1, [r7, #8]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f000 fc12 	bl	8010808 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f042 0208 	orr.w	r2, r2, #8
 800fff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f022 0204 	bic.w	r2, r2, #4
 8010002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	691a      	ldr	r2, [r3, #16]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	430a      	orrs	r2, r1
 8010014:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010016:	e023      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68b9      	ldr	r1, [r7, #8]
 801001e:	4618      	mov	r0, r3
 8010020:	f000 fc56 	bl	80108d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	021a      	lsls	r2, r3, #8
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	430a      	orrs	r2, r1
 8010056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010058:	e002      	b.n	8010060 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	75fb      	strb	r3, [r7, #23]
      break;
 801005e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2200      	movs	r2, #0
 8010064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010068:	7dfb      	ldrb	r3, [r7, #23]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop

08010074 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801007c:	bf00      	nop
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010090:	bf00      	nop
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80100f4:	bf00      	nop
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801010c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	429a      	cmp	r2, r3
 8010116:	d107      	bne.n	8010128 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2201      	movs	r2, #1
 801011c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2201      	movs	r2, #1
 8010122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010126:	e02a      	b.n	801017e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	429a      	cmp	r2, r3
 8010130:	d107      	bne.n	8010142 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2202      	movs	r2, #2
 8010136:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010140:	e01d      	b.n	801017e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	429a      	cmp	r2, r3
 801014a:	d107      	bne.n	801015c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2204      	movs	r2, #4
 8010150:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801015a:	e010      	b.n	801017e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	429a      	cmp	r2, r3
 8010164:	d107      	bne.n	8010176 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2208      	movs	r2, #8
 801016a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010174:	e003      	b.n	801017e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2201      	movs	r2, #1
 801017a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f7ff ffb4 	bl	80100ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2200      	movs	r2, #0
 8010188:	771a      	strb	r2, [r3, #28]
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d10b      	bne.n	80101c2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2201      	movs	r2, #1
 80101ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	69db      	ldr	r3, [r3, #28]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d136      	bne.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2201      	movs	r2, #1
 80101bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101c0:	e031      	b.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d10b      	bne.n	80101e4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2202      	movs	r2, #2
 80101d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	69db      	ldr	r3, [r3, #28]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d125      	bne.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2201      	movs	r2, #1
 80101de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101e2:	e020      	b.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d10b      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2204      	movs	r2, #4
 80101f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	69db      	ldr	r3, [r3, #28]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d114      	bne.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010204:	e00f      	b.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	429a      	cmp	r2, r3
 801020e:	d10a      	bne.n	8010226 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2208      	movs	r2, #8
 8010214:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	69db      	ldr	r3, [r3, #28]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d103      	bne.n	8010226 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7ff ff42 	bl	80100b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	771a      	strb	r2, [r3, #28]
}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b084      	sub	sp, #16
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010246:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	429a      	cmp	r2, r3
 8010250:	d103      	bne.n	801025a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	771a      	strb	r2, [r3, #28]
 8010258:	e019      	b.n	801028e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	429a      	cmp	r2, r3
 8010262:	d103      	bne.n	801026c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2202      	movs	r2, #2
 8010268:	771a      	strb	r2, [r3, #28]
 801026a:	e010      	b.n	801028e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	429a      	cmp	r2, r3
 8010274:	d103      	bne.n	801027e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2204      	movs	r2, #4
 801027a:	771a      	strb	r2, [r3, #28]
 801027c:	e007      	b.n	801028e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	429a      	cmp	r2, r3
 8010286:	d102      	bne.n	801028e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2208      	movs	r2, #8
 801028c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f7ff ff18 	bl	80100c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	771a      	strb	r2, [r3, #28]
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
	...

080102a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4a44      	ldr	r2, [pc, #272]	; (80103c8 <TIM_Base_SetConfig+0x124>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d013      	beq.n	80102e4 <TIM_Base_SetConfig+0x40>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102c2:	d00f      	beq.n	80102e4 <TIM_Base_SetConfig+0x40>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4a41      	ldr	r2, [pc, #260]	; (80103cc <TIM_Base_SetConfig+0x128>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d00b      	beq.n	80102e4 <TIM_Base_SetConfig+0x40>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4a40      	ldr	r2, [pc, #256]	; (80103d0 <TIM_Base_SetConfig+0x12c>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d007      	beq.n	80102e4 <TIM_Base_SetConfig+0x40>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4a3f      	ldr	r2, [pc, #252]	; (80103d4 <TIM_Base_SetConfig+0x130>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d003      	beq.n	80102e4 <TIM_Base_SetConfig+0x40>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4a3e      	ldr	r2, [pc, #248]	; (80103d8 <TIM_Base_SetConfig+0x134>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d108      	bne.n	80102f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a33      	ldr	r2, [pc, #204]	; (80103c8 <TIM_Base_SetConfig+0x124>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d027      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010304:	d023      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4a30      	ldr	r2, [pc, #192]	; (80103cc <TIM_Base_SetConfig+0x128>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d01f      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a2f      	ldr	r2, [pc, #188]	; (80103d0 <TIM_Base_SetConfig+0x12c>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d01b      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a2e      	ldr	r2, [pc, #184]	; (80103d4 <TIM_Base_SetConfig+0x130>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d017      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a2d      	ldr	r2, [pc, #180]	; (80103d8 <TIM_Base_SetConfig+0x134>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d013      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a2c      	ldr	r2, [pc, #176]	; (80103dc <TIM_Base_SetConfig+0x138>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d00f      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4a2b      	ldr	r2, [pc, #172]	; (80103e0 <TIM_Base_SetConfig+0x13c>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d00b      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4a2a      	ldr	r2, [pc, #168]	; (80103e4 <TIM_Base_SetConfig+0x140>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d007      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4a29      	ldr	r2, [pc, #164]	; (80103e8 <TIM_Base_SetConfig+0x144>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d003      	beq.n	801034e <TIM_Base_SetConfig+0xaa>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a28      	ldr	r2, [pc, #160]	; (80103ec <TIM_Base_SetConfig+0x148>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d108      	bne.n	8010360 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	4313      	orrs	r3, r2
 801035e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	695b      	ldr	r3, [r3, #20]
 801036a:	4313      	orrs	r3, r2
 801036c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	68fa      	ldr	r2, [r7, #12]
 8010372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	689a      	ldr	r2, [r3, #8]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a10      	ldr	r2, [pc, #64]	; (80103c8 <TIM_Base_SetConfig+0x124>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d00f      	beq.n	80103ac <TIM_Base_SetConfig+0x108>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a12      	ldr	r2, [pc, #72]	; (80103d8 <TIM_Base_SetConfig+0x134>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d00b      	beq.n	80103ac <TIM_Base_SetConfig+0x108>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a11      	ldr	r2, [pc, #68]	; (80103dc <TIM_Base_SetConfig+0x138>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d007      	beq.n	80103ac <TIM_Base_SetConfig+0x108>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a10      	ldr	r2, [pc, #64]	; (80103e0 <TIM_Base_SetConfig+0x13c>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d003      	beq.n	80103ac <TIM_Base_SetConfig+0x108>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a0f      	ldr	r2, [pc, #60]	; (80103e4 <TIM_Base_SetConfig+0x140>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d103      	bne.n	80103b4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	691a      	ldr	r2, [r3, #16]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2201      	movs	r2, #1
 80103b8:	615a      	str	r2, [r3, #20]
}
 80103ba:	bf00      	nop
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	40010000 	.word	0x40010000
 80103cc:	40000400 	.word	0x40000400
 80103d0:	40000800 	.word	0x40000800
 80103d4:	40000c00 	.word	0x40000c00
 80103d8:	40010400 	.word	0x40010400
 80103dc:	40014000 	.word	0x40014000
 80103e0:	40014400 	.word	0x40014400
 80103e4:	40014800 	.word	0x40014800
 80103e8:	4000e000 	.word	0x4000e000
 80103ec:	4000e400 	.word	0x4000e400

080103f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a1b      	ldr	r3, [r3, #32]
 80103fe:	f023 0201 	bic.w	r2, r3, #1
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6a1b      	ldr	r3, [r3, #32]
 801040a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	699b      	ldr	r3, [r3, #24]
 8010416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4b37      	ldr	r3, [pc, #220]	; (80104f8 <TIM_OC1_SetConfig+0x108>)
 801041c:	4013      	ands	r3, r2
 801041e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f023 0303 	bic.w	r3, r3, #3
 8010426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	4313      	orrs	r3, r2
 8010430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	f023 0302 	bic.w	r3, r3, #2
 8010438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	697a      	ldr	r2, [r7, #20]
 8010440:	4313      	orrs	r3, r2
 8010442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a2d      	ldr	r2, [pc, #180]	; (80104fc <TIM_OC1_SetConfig+0x10c>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d00f      	beq.n	801046c <TIM_OC1_SetConfig+0x7c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a2c      	ldr	r2, [pc, #176]	; (8010500 <TIM_OC1_SetConfig+0x110>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d00b      	beq.n	801046c <TIM_OC1_SetConfig+0x7c>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a2b      	ldr	r2, [pc, #172]	; (8010504 <TIM_OC1_SetConfig+0x114>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d007      	beq.n	801046c <TIM_OC1_SetConfig+0x7c>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4a2a      	ldr	r2, [pc, #168]	; (8010508 <TIM_OC1_SetConfig+0x118>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d003      	beq.n	801046c <TIM_OC1_SetConfig+0x7c>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a29      	ldr	r2, [pc, #164]	; (801050c <TIM_OC1_SetConfig+0x11c>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d10c      	bne.n	8010486 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	f023 0308 	bic.w	r3, r3, #8
 8010472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	697a      	ldr	r2, [r7, #20]
 801047a:	4313      	orrs	r3, r2
 801047c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	f023 0304 	bic.w	r3, r3, #4
 8010484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4a1c      	ldr	r2, [pc, #112]	; (80104fc <TIM_OC1_SetConfig+0x10c>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d00f      	beq.n	80104ae <TIM_OC1_SetConfig+0xbe>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4a1b      	ldr	r2, [pc, #108]	; (8010500 <TIM_OC1_SetConfig+0x110>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d00b      	beq.n	80104ae <TIM_OC1_SetConfig+0xbe>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a1a      	ldr	r2, [pc, #104]	; (8010504 <TIM_OC1_SetConfig+0x114>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d007      	beq.n	80104ae <TIM_OC1_SetConfig+0xbe>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4a19      	ldr	r2, [pc, #100]	; (8010508 <TIM_OC1_SetConfig+0x118>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d003      	beq.n	80104ae <TIM_OC1_SetConfig+0xbe>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4a18      	ldr	r2, [pc, #96]	; (801050c <TIM_OC1_SetConfig+0x11c>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d111      	bne.n	80104d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	693a      	ldr	r2, [r7, #16]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	685a      	ldr	r2, [r3, #4]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	621a      	str	r2, [r3, #32]
}
 80104ec:	bf00      	nop
 80104ee:	371c      	adds	r7, #28
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	fffeff8f 	.word	0xfffeff8f
 80104fc:	40010000 	.word	0x40010000
 8010500:	40010400 	.word	0x40010400
 8010504:	40014000 	.word	0x40014000
 8010508:	40014400 	.word	0x40014400
 801050c:	40014800 	.word	0x40014800

08010510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010510:	b480      	push	{r7}
 8010512:	b087      	sub	sp, #28
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a1b      	ldr	r3, [r3, #32]
 801051e:	f023 0210 	bic.w	r2, r3, #16
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	4b34      	ldr	r3, [pc, #208]	; (801060c <TIM_OC2_SetConfig+0xfc>)
 801053c:	4013      	ands	r3, r2
 801053e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	021b      	lsls	r3, r3, #8
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4313      	orrs	r3, r2
 8010552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f023 0320 	bic.w	r3, r3, #32
 801055a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	4313      	orrs	r3, r2
 8010566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4a29      	ldr	r2, [pc, #164]	; (8010610 <TIM_OC2_SetConfig+0x100>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d003      	beq.n	8010578 <TIM_OC2_SetConfig+0x68>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4a28      	ldr	r2, [pc, #160]	; (8010614 <TIM_OC2_SetConfig+0x104>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d10d      	bne.n	8010594 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801057e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	011b      	lsls	r3, r3, #4
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	4313      	orrs	r3, r2
 801058a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4a1e      	ldr	r2, [pc, #120]	; (8010610 <TIM_OC2_SetConfig+0x100>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d00f      	beq.n	80105bc <TIM_OC2_SetConfig+0xac>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4a1d      	ldr	r2, [pc, #116]	; (8010614 <TIM_OC2_SetConfig+0x104>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d00b      	beq.n	80105bc <TIM_OC2_SetConfig+0xac>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a1c      	ldr	r2, [pc, #112]	; (8010618 <TIM_OC2_SetConfig+0x108>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d007      	beq.n	80105bc <TIM_OC2_SetConfig+0xac>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a1b      	ldr	r2, [pc, #108]	; (801061c <TIM_OC2_SetConfig+0x10c>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d003      	beq.n	80105bc <TIM_OC2_SetConfig+0xac>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4a1a      	ldr	r2, [pc, #104]	; (8010620 <TIM_OC2_SetConfig+0x110>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d113      	bne.n	80105e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	695b      	ldr	r3, [r3, #20]
 80105d0:	009b      	lsls	r3, r3, #2
 80105d2:	693a      	ldr	r2, [r7, #16]
 80105d4:	4313      	orrs	r3, r2
 80105d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	685a      	ldr	r2, [r3, #4]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	621a      	str	r2, [r3, #32]
}
 80105fe:	bf00      	nop
 8010600:	371c      	adds	r7, #28
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	feff8fff 	.word	0xfeff8fff
 8010610:	40010000 	.word	0x40010000
 8010614:	40010400 	.word	0x40010400
 8010618:	40014000 	.word	0x40014000
 801061c:	40014400 	.word	0x40014400
 8010620:	40014800 	.word	0x40014800

08010624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010624:	b480      	push	{r7}
 8010626:	b087      	sub	sp, #28
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6a1b      	ldr	r3, [r3, #32]
 8010632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a1b      	ldr	r3, [r3, #32]
 801063e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	69db      	ldr	r3, [r3, #28]
 801064a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	4b33      	ldr	r3, [pc, #204]	; (801071c <TIM_OC3_SetConfig+0xf8>)
 8010650:	4013      	ands	r3, r2
 8010652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f023 0303 	bic.w	r3, r3, #3
 801065a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	4313      	orrs	r3, r2
 8010664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801066c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	021b      	lsls	r3, r3, #8
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	4313      	orrs	r3, r2
 8010678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a28      	ldr	r2, [pc, #160]	; (8010720 <TIM_OC3_SetConfig+0xfc>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d003      	beq.n	801068a <TIM_OC3_SetConfig+0x66>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4a27      	ldr	r2, [pc, #156]	; (8010724 <TIM_OC3_SetConfig+0x100>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d10d      	bne.n	80106a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	4313      	orrs	r3, r2
 801069c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a1d      	ldr	r2, [pc, #116]	; (8010720 <TIM_OC3_SetConfig+0xfc>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d00f      	beq.n	80106ce <TIM_OC3_SetConfig+0xaa>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4a1c      	ldr	r2, [pc, #112]	; (8010724 <TIM_OC3_SetConfig+0x100>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d00b      	beq.n	80106ce <TIM_OC3_SetConfig+0xaa>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4a1b      	ldr	r2, [pc, #108]	; (8010728 <TIM_OC3_SetConfig+0x104>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d007      	beq.n	80106ce <TIM_OC3_SetConfig+0xaa>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4a1a      	ldr	r2, [pc, #104]	; (801072c <TIM_OC3_SetConfig+0x108>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d003      	beq.n	80106ce <TIM_OC3_SetConfig+0xaa>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4a19      	ldr	r2, [pc, #100]	; (8010730 <TIM_OC3_SetConfig+0x10c>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d113      	bne.n	80106f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	695b      	ldr	r3, [r3, #20]
 80106e2:	011b      	lsls	r3, r3, #4
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	4313      	orrs	r3, r2
 80106e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	699b      	ldr	r3, [r3, #24]
 80106ee:	011b      	lsls	r3, r3, #4
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	697a      	ldr	r2, [r7, #20]
 801070e:	621a      	str	r2, [r3, #32]
}
 8010710:	bf00      	nop
 8010712:	371c      	adds	r7, #28
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr
 801071c:	fffeff8f 	.word	0xfffeff8f
 8010720:	40010000 	.word	0x40010000
 8010724:	40010400 	.word	0x40010400
 8010728:	40014000 	.word	0x40014000
 801072c:	40014400 	.word	0x40014400
 8010730:	40014800 	.word	0x40014800

08010734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a1b      	ldr	r3, [r3, #32]
 801074e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	69db      	ldr	r3, [r3, #28]
 801075a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801075c:	68fa      	ldr	r2, [r7, #12]
 801075e:	4b24      	ldr	r3, [pc, #144]	; (80107f0 <TIM_OC4_SetConfig+0xbc>)
 8010760:	4013      	ands	r3, r2
 8010762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801076a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	4313      	orrs	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801077e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	031b      	lsls	r3, r3, #12
 8010786:	693a      	ldr	r2, [r7, #16]
 8010788:	4313      	orrs	r3, r2
 801078a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a19      	ldr	r2, [pc, #100]	; (80107f4 <TIM_OC4_SetConfig+0xc0>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d00f      	beq.n	80107b4 <TIM_OC4_SetConfig+0x80>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a18      	ldr	r2, [pc, #96]	; (80107f8 <TIM_OC4_SetConfig+0xc4>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d00b      	beq.n	80107b4 <TIM_OC4_SetConfig+0x80>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a17      	ldr	r2, [pc, #92]	; (80107fc <TIM_OC4_SetConfig+0xc8>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d007      	beq.n	80107b4 <TIM_OC4_SetConfig+0x80>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a16      	ldr	r2, [pc, #88]	; (8010800 <TIM_OC4_SetConfig+0xcc>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d003      	beq.n	80107b4 <TIM_OC4_SetConfig+0x80>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a15      	ldr	r2, [pc, #84]	; (8010804 <TIM_OC4_SetConfig+0xd0>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d109      	bne.n	80107c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	695b      	ldr	r3, [r3, #20]
 80107c0:	019b      	lsls	r3, r3, #6
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	685a      	ldr	r2, [r3, #4]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	621a      	str	r2, [r3, #32]
}
 80107e2:	bf00      	nop
 80107e4:	371c      	adds	r7, #28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	feff8fff 	.word	0xfeff8fff
 80107f4:	40010000 	.word	0x40010000
 80107f8:	40010400 	.word	0x40010400
 80107fc:	40014000 	.word	0x40014000
 8010800:	40014400 	.word	0x40014400
 8010804:	40014800 	.word	0x40014800

08010808 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010808:	b480      	push	{r7}
 801080a:	b087      	sub	sp, #28
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a1b      	ldr	r3, [r3, #32]
 8010816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6a1b      	ldr	r3, [r3, #32]
 8010822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801082e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	4b21      	ldr	r3, [pc, #132]	; (80108b8 <TIM_OC5_SetConfig+0xb0>)
 8010834:	4013      	ands	r3, r2
 8010836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	4313      	orrs	r3, r2
 8010840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	041b      	lsls	r3, r3, #16
 8010850:	693a      	ldr	r2, [r7, #16]
 8010852:	4313      	orrs	r3, r2
 8010854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4a18      	ldr	r2, [pc, #96]	; (80108bc <TIM_OC5_SetConfig+0xb4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d00f      	beq.n	801087e <TIM_OC5_SetConfig+0x76>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4a17      	ldr	r2, [pc, #92]	; (80108c0 <TIM_OC5_SetConfig+0xb8>)
 8010862:	4293      	cmp	r3, r2
 8010864:	d00b      	beq.n	801087e <TIM_OC5_SetConfig+0x76>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4a16      	ldr	r2, [pc, #88]	; (80108c4 <TIM_OC5_SetConfig+0xbc>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d007      	beq.n	801087e <TIM_OC5_SetConfig+0x76>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4a15      	ldr	r2, [pc, #84]	; (80108c8 <TIM_OC5_SetConfig+0xc0>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d003      	beq.n	801087e <TIM_OC5_SetConfig+0x76>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4a14      	ldr	r2, [pc, #80]	; (80108cc <TIM_OC5_SetConfig+0xc4>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d109      	bne.n	8010892 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	021b      	lsls	r3, r3, #8
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	4313      	orrs	r3, r2
 8010890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	697a      	ldr	r2, [r7, #20]
 8010896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	685a      	ldr	r2, [r3, #4]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	693a      	ldr	r2, [r7, #16]
 80108aa:	621a      	str	r2, [r3, #32]
}
 80108ac:	bf00      	nop
 80108ae:	371c      	adds	r7, #28
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr
 80108b8:	fffeff8f 	.word	0xfffeff8f
 80108bc:	40010000 	.word	0x40010000
 80108c0:	40010400 	.word	0x40010400
 80108c4:	40014000 	.word	0x40014000
 80108c8:	40014400 	.word	0x40014400
 80108cc:	40014800 	.word	0x40014800

080108d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b087      	sub	sp, #28
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a1b      	ldr	r3, [r3, #32]
 80108de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80108f8:	68fa      	ldr	r2, [r7, #12]
 80108fa:	4b22      	ldr	r3, [pc, #136]	; (8010984 <TIM_OC6_SetConfig+0xb4>)
 80108fc:	4013      	ands	r3, r2
 80108fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	021b      	lsls	r3, r3, #8
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	4313      	orrs	r3, r2
 801090a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	051b      	lsls	r3, r3, #20
 801091a:	693a      	ldr	r2, [r7, #16]
 801091c:	4313      	orrs	r3, r2
 801091e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a19      	ldr	r2, [pc, #100]	; (8010988 <TIM_OC6_SetConfig+0xb8>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d00f      	beq.n	8010948 <TIM_OC6_SetConfig+0x78>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a18      	ldr	r2, [pc, #96]	; (801098c <TIM_OC6_SetConfig+0xbc>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d00b      	beq.n	8010948 <TIM_OC6_SetConfig+0x78>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a17      	ldr	r2, [pc, #92]	; (8010990 <TIM_OC6_SetConfig+0xc0>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d007      	beq.n	8010948 <TIM_OC6_SetConfig+0x78>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a16      	ldr	r2, [pc, #88]	; (8010994 <TIM_OC6_SetConfig+0xc4>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d003      	beq.n	8010948 <TIM_OC6_SetConfig+0x78>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4a15      	ldr	r2, [pc, #84]	; (8010998 <TIM_OC6_SetConfig+0xc8>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d109      	bne.n	801095c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801094e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	695b      	ldr	r3, [r3, #20]
 8010954:	029b      	lsls	r3, r3, #10
 8010956:	697a      	ldr	r2, [r7, #20]
 8010958:	4313      	orrs	r3, r2
 801095a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	685a      	ldr	r2, [r3, #4]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	693a      	ldr	r2, [r7, #16]
 8010974:	621a      	str	r2, [r3, #32]
}
 8010976:	bf00      	nop
 8010978:	371c      	adds	r7, #28
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	feff8fff 	.word	0xfeff8fff
 8010988:	40010000 	.word	0x40010000
 801098c:	40010400 	.word	0x40010400
 8010990:	40014000 	.word	0x40014000
 8010994:	40014400 	.word	0x40014400
 8010998:	40014800 	.word	0x40014800

0801099c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801099c:	b480      	push	{r7}
 801099e:	b087      	sub	sp, #28
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	f003 031f 	and.w	r3, r3, #31
 80109ae:	2201      	movs	r2, #1
 80109b0:	fa02 f303 	lsl.w	r3, r2, r3
 80109b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6a1a      	ldr	r2, [r3, #32]
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	43db      	mvns	r3, r3
 80109be:	401a      	ands	r2, r3
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a1a      	ldr	r2, [r3, #32]
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f003 031f 	and.w	r3, r3, #31
 80109ce:	6879      	ldr	r1, [r7, #4]
 80109d0:	fa01 f303 	lsl.w	r3, r1, r3
 80109d4:	431a      	orrs	r2, r3
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	621a      	str	r2, [r3, #32]
}
 80109da:	bf00      	nop
 80109dc:	371c      	adds	r7, #28
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
	...

080109e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d101      	bne.n	8010a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80109fc:	2302      	movs	r3, #2
 80109fe:	e077      	b.n	8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2202      	movs	r2, #2
 8010a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a35      	ldr	r2, [pc, #212]	; (8010afc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d004      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a34      	ldr	r2, [pc, #208]	; (8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d108      	bne.n	8010a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	68fa      	ldr	r2, [r7, #12]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a25      	ldr	r2, [pc, #148]	; (8010afc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d02c      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a72:	d027      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a22      	ldr	r2, [pc, #136]	; (8010b04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d022      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a21      	ldr	r2, [pc, #132]	; (8010b08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d01d      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a1f      	ldr	r2, [pc, #124]	; (8010b0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d018      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a1a      	ldr	r2, [pc, #104]	; (8010b00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d013      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a1b      	ldr	r2, [pc, #108]	; (8010b10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d00e      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a1a      	ldr	r2, [pc, #104]	; (8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d009      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a18      	ldr	r2, [pc, #96]	; (8010b18 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d004      	beq.n	8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a17      	ldr	r2, [pc, #92]	; (8010b1c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d10c      	bne.n	8010ade <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	68ba      	ldr	r2, [r7, #8]
 8010adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr
 8010afc:	40010000 	.word	0x40010000
 8010b00:	40010400 	.word	0x40010400
 8010b04:	40000400 	.word	0x40000400
 8010b08:	40000800 	.word	0x40000800
 8010b0c:	40000c00 	.word	0x40000c00
 8010b10:	40001800 	.word	0x40001800
 8010b14:	40014000 	.word	0x40014000
 8010b18:	4000e000 	.word	0x4000e000
 8010b1c:	4000e400 	.word	0x4000e400

08010b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b28:	bf00      	nop
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr

08010b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b083      	sub	sp, #12
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b3c:	bf00      	nop
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b50:	bf00      	nop
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d101      	bne.n	8010b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e042      	b.n	8010bf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7f2 fcc5 	bl	8003510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2224      	movs	r2, #36	; 0x24
 8010b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f022 0201 	bic.w	r2, r2, #1
 8010b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 f82c 	bl	8010bfc <UART_SetConfig>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d101      	bne.n	8010bae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010baa:	2301      	movs	r3, #1
 8010bac:	e022      	b.n	8010bf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d002      	beq.n	8010bbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fe8c 	bl	80118d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	689a      	ldr	r2, [r3, #8]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	f042 0201 	orr.w	r2, r2, #1
 8010bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 ff13 	bl	8011a18 <UART_CheckIdleState>
 8010bf2:	4603      	mov	r3, r0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c00:	b092      	sub	sp, #72	; 0x48
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c06:	2300      	movs	r3, #0
 8010c08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	689a      	ldr	r2, [r3, #8]
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	431a      	orrs	r2, r3
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	431a      	orrs	r2, r3
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	69db      	ldr	r3, [r3, #28]
 8010c20:	4313      	orrs	r3, r2
 8010c22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	4bbe      	ldr	r3, [pc, #760]	; (8010f24 <UART_SetConfig+0x328>)
 8010c2c:	4013      	ands	r3, r2
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	6812      	ldr	r2, [r2, #0]
 8010c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c34:	430b      	orrs	r3, r1
 8010c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	68da      	ldr	r2, [r3, #12]
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	430a      	orrs	r2, r1
 8010c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4ab3      	ldr	r2, [pc, #716]	; (8010f28 <UART_SetConfig+0x32c>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d004      	beq.n	8010c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c64:	4313      	orrs	r3, r2
 8010c66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	689a      	ldr	r2, [r3, #8]
 8010c6e:	4baf      	ldr	r3, [pc, #700]	; (8010f2c <UART_SetConfig+0x330>)
 8010c70:	4013      	ands	r3, r2
 8010c72:	697a      	ldr	r2, [r7, #20]
 8010c74:	6812      	ldr	r2, [r2, #0]
 8010c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c78:	430b      	orrs	r3, r1
 8010c7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c82:	f023 010f 	bic.w	r1, r3, #15
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	430a      	orrs	r2, r1
 8010c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4aa6      	ldr	r2, [pc, #664]	; (8010f30 <UART_SetConfig+0x334>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d177      	bne.n	8010d8c <UART_SetConfig+0x190>
 8010c9c:	4ba5      	ldr	r3, [pc, #660]	; (8010f34 <UART_SetConfig+0x338>)
 8010c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ca4:	2b28      	cmp	r3, #40	; 0x28
 8010ca6:	d86d      	bhi.n	8010d84 <UART_SetConfig+0x188>
 8010ca8:	a201      	add	r2, pc, #4	; (adr r2, 8010cb0 <UART_SetConfig+0xb4>)
 8010caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cae:	bf00      	nop
 8010cb0:	08010d55 	.word	0x08010d55
 8010cb4:	08010d85 	.word	0x08010d85
 8010cb8:	08010d85 	.word	0x08010d85
 8010cbc:	08010d85 	.word	0x08010d85
 8010cc0:	08010d85 	.word	0x08010d85
 8010cc4:	08010d85 	.word	0x08010d85
 8010cc8:	08010d85 	.word	0x08010d85
 8010ccc:	08010d85 	.word	0x08010d85
 8010cd0:	08010d5d 	.word	0x08010d5d
 8010cd4:	08010d85 	.word	0x08010d85
 8010cd8:	08010d85 	.word	0x08010d85
 8010cdc:	08010d85 	.word	0x08010d85
 8010ce0:	08010d85 	.word	0x08010d85
 8010ce4:	08010d85 	.word	0x08010d85
 8010ce8:	08010d85 	.word	0x08010d85
 8010cec:	08010d85 	.word	0x08010d85
 8010cf0:	08010d65 	.word	0x08010d65
 8010cf4:	08010d85 	.word	0x08010d85
 8010cf8:	08010d85 	.word	0x08010d85
 8010cfc:	08010d85 	.word	0x08010d85
 8010d00:	08010d85 	.word	0x08010d85
 8010d04:	08010d85 	.word	0x08010d85
 8010d08:	08010d85 	.word	0x08010d85
 8010d0c:	08010d85 	.word	0x08010d85
 8010d10:	08010d6d 	.word	0x08010d6d
 8010d14:	08010d85 	.word	0x08010d85
 8010d18:	08010d85 	.word	0x08010d85
 8010d1c:	08010d85 	.word	0x08010d85
 8010d20:	08010d85 	.word	0x08010d85
 8010d24:	08010d85 	.word	0x08010d85
 8010d28:	08010d85 	.word	0x08010d85
 8010d2c:	08010d85 	.word	0x08010d85
 8010d30:	08010d75 	.word	0x08010d75
 8010d34:	08010d85 	.word	0x08010d85
 8010d38:	08010d85 	.word	0x08010d85
 8010d3c:	08010d85 	.word	0x08010d85
 8010d40:	08010d85 	.word	0x08010d85
 8010d44:	08010d85 	.word	0x08010d85
 8010d48:	08010d85 	.word	0x08010d85
 8010d4c:	08010d85 	.word	0x08010d85
 8010d50:	08010d7d 	.word	0x08010d7d
 8010d54:	2301      	movs	r3, #1
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e326      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d5c:	2304      	movs	r3, #4
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e322      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d64:	2308      	movs	r3, #8
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e31e      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d6c:	2310      	movs	r3, #16
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e31a      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d74:	2320      	movs	r3, #32
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e316      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d7c:	2340      	movs	r3, #64	; 0x40
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e312      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d84:	2380      	movs	r3, #128	; 0x80
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e30e      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a69      	ldr	r2, [pc, #420]	; (8010f38 <UART_SetConfig+0x33c>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d130      	bne.n	8010df8 <UART_SetConfig+0x1fc>
 8010d96:	4b67      	ldr	r3, [pc, #412]	; (8010f34 <UART_SetConfig+0x338>)
 8010d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d9a:	f003 0307 	and.w	r3, r3, #7
 8010d9e:	2b05      	cmp	r3, #5
 8010da0:	d826      	bhi.n	8010df0 <UART_SetConfig+0x1f4>
 8010da2:	a201      	add	r2, pc, #4	; (adr r2, 8010da8 <UART_SetConfig+0x1ac>)
 8010da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da8:	08010dc1 	.word	0x08010dc1
 8010dac:	08010dc9 	.word	0x08010dc9
 8010db0:	08010dd1 	.word	0x08010dd1
 8010db4:	08010dd9 	.word	0x08010dd9
 8010db8:	08010de1 	.word	0x08010de1
 8010dbc:	08010de9 	.word	0x08010de9
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e2f0      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010dc8:	2304      	movs	r3, #4
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e2ec      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010dd0:	2308      	movs	r3, #8
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e2e8      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010dd8:	2310      	movs	r3, #16
 8010dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dde:	e2e4      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010de0:	2320      	movs	r3, #32
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e2e0      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010de8:	2340      	movs	r3, #64	; 0x40
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e2dc      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010df0:	2380      	movs	r3, #128	; 0x80
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df6:	e2d8      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a4f      	ldr	r2, [pc, #316]	; (8010f3c <UART_SetConfig+0x340>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d130      	bne.n	8010e64 <UART_SetConfig+0x268>
 8010e02:	4b4c      	ldr	r3, [pc, #304]	; (8010f34 <UART_SetConfig+0x338>)
 8010e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	2b05      	cmp	r3, #5
 8010e0c:	d826      	bhi.n	8010e5c <UART_SetConfig+0x260>
 8010e0e:	a201      	add	r2, pc, #4	; (adr r2, 8010e14 <UART_SetConfig+0x218>)
 8010e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e14:	08010e2d 	.word	0x08010e2d
 8010e18:	08010e35 	.word	0x08010e35
 8010e1c:	08010e3d 	.word	0x08010e3d
 8010e20:	08010e45 	.word	0x08010e45
 8010e24:	08010e4d 	.word	0x08010e4d
 8010e28:	08010e55 	.word	0x08010e55
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e32:	e2ba      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e34:	2304      	movs	r3, #4
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3a:	e2b6      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e3c:	2308      	movs	r3, #8
 8010e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e42:	e2b2      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e44:	2310      	movs	r3, #16
 8010e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4a:	e2ae      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e4c:	2320      	movs	r3, #32
 8010e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e52:	e2aa      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e54:	2340      	movs	r3, #64	; 0x40
 8010e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5a:	e2a6      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e5c:	2380      	movs	r3, #128	; 0x80
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e62:	e2a2      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4a35      	ldr	r2, [pc, #212]	; (8010f40 <UART_SetConfig+0x344>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d130      	bne.n	8010ed0 <UART_SetConfig+0x2d4>
 8010e6e:	4b31      	ldr	r3, [pc, #196]	; (8010f34 <UART_SetConfig+0x338>)
 8010e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e72:	f003 0307 	and.w	r3, r3, #7
 8010e76:	2b05      	cmp	r3, #5
 8010e78:	d826      	bhi.n	8010ec8 <UART_SetConfig+0x2cc>
 8010e7a:	a201      	add	r2, pc, #4	; (adr r2, 8010e80 <UART_SetConfig+0x284>)
 8010e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e80:	08010e99 	.word	0x08010e99
 8010e84:	08010ea1 	.word	0x08010ea1
 8010e88:	08010ea9 	.word	0x08010ea9
 8010e8c:	08010eb1 	.word	0x08010eb1
 8010e90:	08010eb9 	.word	0x08010eb9
 8010e94:	08010ec1 	.word	0x08010ec1
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e284      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010ea0:	2304      	movs	r3, #4
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e280      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010ea8:	2308      	movs	r3, #8
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e27c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010eb0:	2310      	movs	r3, #16
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e278      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010eb8:	2320      	movs	r3, #32
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e274      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010ec0:	2340      	movs	r3, #64	; 0x40
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e270      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010ec8:	2380      	movs	r3, #128	; 0x80
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e26c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4a1b      	ldr	r2, [pc, #108]	; (8010f44 <UART_SetConfig+0x348>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d142      	bne.n	8010f60 <UART_SetConfig+0x364>
 8010eda:	4b16      	ldr	r3, [pc, #88]	; (8010f34 <UART_SetConfig+0x338>)
 8010edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ede:	f003 0307 	and.w	r3, r3, #7
 8010ee2:	2b05      	cmp	r3, #5
 8010ee4:	d838      	bhi.n	8010f58 <UART_SetConfig+0x35c>
 8010ee6:	a201      	add	r2, pc, #4	; (adr r2, 8010eec <UART_SetConfig+0x2f0>)
 8010ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eec:	08010f05 	.word	0x08010f05
 8010ef0:	08010f0d 	.word	0x08010f0d
 8010ef4:	08010f15 	.word	0x08010f15
 8010ef8:	08010f1d 	.word	0x08010f1d
 8010efc:	08010f49 	.word	0x08010f49
 8010f00:	08010f51 	.word	0x08010f51
 8010f04:	2300      	movs	r3, #0
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0a:	e24e      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f0c:	2304      	movs	r3, #4
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e24a      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f14:	2308      	movs	r3, #8
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e246      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f1c:	2310      	movs	r3, #16
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e242      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f24:	cfff69f3 	.word	0xcfff69f3
 8010f28:	58000c00 	.word	0x58000c00
 8010f2c:	11fff4ff 	.word	0x11fff4ff
 8010f30:	40011000 	.word	0x40011000
 8010f34:	58024400 	.word	0x58024400
 8010f38:	40004400 	.word	0x40004400
 8010f3c:	40004800 	.word	0x40004800
 8010f40:	40004c00 	.word	0x40004c00
 8010f44:	40005000 	.word	0x40005000
 8010f48:	2320      	movs	r3, #32
 8010f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f4e:	e22c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f50:	2340      	movs	r3, #64	; 0x40
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e228      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f58:	2380      	movs	r3, #128	; 0x80
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e224      	b.n	80113aa <UART_SetConfig+0x7ae>
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4ab1      	ldr	r2, [pc, #708]	; (801122c <UART_SetConfig+0x630>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d176      	bne.n	8011058 <UART_SetConfig+0x45c>
 8010f6a:	4bb1      	ldr	r3, [pc, #708]	; (8011230 <UART_SetConfig+0x634>)
 8010f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f72:	2b28      	cmp	r3, #40	; 0x28
 8010f74:	d86c      	bhi.n	8011050 <UART_SetConfig+0x454>
 8010f76:	a201      	add	r2, pc, #4	; (adr r2, 8010f7c <UART_SetConfig+0x380>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	08011021 	.word	0x08011021
 8010f80:	08011051 	.word	0x08011051
 8010f84:	08011051 	.word	0x08011051
 8010f88:	08011051 	.word	0x08011051
 8010f8c:	08011051 	.word	0x08011051
 8010f90:	08011051 	.word	0x08011051
 8010f94:	08011051 	.word	0x08011051
 8010f98:	08011051 	.word	0x08011051
 8010f9c:	08011029 	.word	0x08011029
 8010fa0:	08011051 	.word	0x08011051
 8010fa4:	08011051 	.word	0x08011051
 8010fa8:	08011051 	.word	0x08011051
 8010fac:	08011051 	.word	0x08011051
 8010fb0:	08011051 	.word	0x08011051
 8010fb4:	08011051 	.word	0x08011051
 8010fb8:	08011051 	.word	0x08011051
 8010fbc:	08011031 	.word	0x08011031
 8010fc0:	08011051 	.word	0x08011051
 8010fc4:	08011051 	.word	0x08011051
 8010fc8:	08011051 	.word	0x08011051
 8010fcc:	08011051 	.word	0x08011051
 8010fd0:	08011051 	.word	0x08011051
 8010fd4:	08011051 	.word	0x08011051
 8010fd8:	08011051 	.word	0x08011051
 8010fdc:	08011039 	.word	0x08011039
 8010fe0:	08011051 	.word	0x08011051
 8010fe4:	08011051 	.word	0x08011051
 8010fe8:	08011051 	.word	0x08011051
 8010fec:	08011051 	.word	0x08011051
 8010ff0:	08011051 	.word	0x08011051
 8010ff4:	08011051 	.word	0x08011051
 8010ff8:	08011051 	.word	0x08011051
 8010ffc:	08011041 	.word	0x08011041
 8011000:	08011051 	.word	0x08011051
 8011004:	08011051 	.word	0x08011051
 8011008:	08011051 	.word	0x08011051
 801100c:	08011051 	.word	0x08011051
 8011010:	08011051 	.word	0x08011051
 8011014:	08011051 	.word	0x08011051
 8011018:	08011051 	.word	0x08011051
 801101c:	08011049 	.word	0x08011049
 8011020:	2301      	movs	r3, #1
 8011022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011026:	e1c0      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011028:	2304      	movs	r3, #4
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e1bc      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011030:	2308      	movs	r3, #8
 8011032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011036:	e1b8      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011038:	2310      	movs	r3, #16
 801103a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103e:	e1b4      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011040:	2320      	movs	r3, #32
 8011042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011046:	e1b0      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011048:	2340      	movs	r3, #64	; 0x40
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e1ac      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011050:	2380      	movs	r3, #128	; 0x80
 8011052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011056:	e1a8      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	4a75      	ldr	r2, [pc, #468]	; (8011234 <UART_SetConfig+0x638>)
 801105e:	4293      	cmp	r3, r2
 8011060:	d130      	bne.n	80110c4 <UART_SetConfig+0x4c8>
 8011062:	4b73      	ldr	r3, [pc, #460]	; (8011230 <UART_SetConfig+0x634>)
 8011064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011066:	f003 0307 	and.w	r3, r3, #7
 801106a:	2b05      	cmp	r3, #5
 801106c:	d826      	bhi.n	80110bc <UART_SetConfig+0x4c0>
 801106e:	a201      	add	r2, pc, #4	; (adr r2, 8011074 <UART_SetConfig+0x478>)
 8011070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011074:	0801108d 	.word	0x0801108d
 8011078:	08011095 	.word	0x08011095
 801107c:	0801109d 	.word	0x0801109d
 8011080:	080110a5 	.word	0x080110a5
 8011084:	080110ad 	.word	0x080110ad
 8011088:	080110b5 	.word	0x080110b5
 801108c:	2300      	movs	r3, #0
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e18a      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011094:	2304      	movs	r3, #4
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e186      	b.n	80113aa <UART_SetConfig+0x7ae>
 801109c:	2308      	movs	r3, #8
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a2:	e182      	b.n	80113aa <UART_SetConfig+0x7ae>
 80110a4:	2310      	movs	r3, #16
 80110a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110aa:	e17e      	b.n	80113aa <UART_SetConfig+0x7ae>
 80110ac:	2320      	movs	r3, #32
 80110ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b2:	e17a      	b.n	80113aa <UART_SetConfig+0x7ae>
 80110b4:	2340      	movs	r3, #64	; 0x40
 80110b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ba:	e176      	b.n	80113aa <UART_SetConfig+0x7ae>
 80110bc:	2380      	movs	r3, #128	; 0x80
 80110be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c2:	e172      	b.n	80113aa <UART_SetConfig+0x7ae>
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a5b      	ldr	r2, [pc, #364]	; (8011238 <UART_SetConfig+0x63c>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d130      	bne.n	8011130 <UART_SetConfig+0x534>
 80110ce:	4b58      	ldr	r3, [pc, #352]	; (8011230 <UART_SetConfig+0x634>)
 80110d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110d2:	f003 0307 	and.w	r3, r3, #7
 80110d6:	2b05      	cmp	r3, #5
 80110d8:	d826      	bhi.n	8011128 <UART_SetConfig+0x52c>
 80110da:	a201      	add	r2, pc, #4	; (adr r2, 80110e0 <UART_SetConfig+0x4e4>)
 80110dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e0:	080110f9 	.word	0x080110f9
 80110e4:	08011101 	.word	0x08011101
 80110e8:	08011109 	.word	0x08011109
 80110ec:	08011111 	.word	0x08011111
 80110f0:	08011119 	.word	0x08011119
 80110f4:	08011121 	.word	0x08011121
 80110f8:	2300      	movs	r3, #0
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fe:	e154      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011100:	2304      	movs	r3, #4
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011106:	e150      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011108:	2308      	movs	r3, #8
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110e:	e14c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011110:	2310      	movs	r3, #16
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011116:	e148      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011118:	2320      	movs	r3, #32
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e144      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011120:	2340      	movs	r3, #64	; 0x40
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e140      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011128:	2380      	movs	r3, #128	; 0x80
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e13c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a41      	ldr	r2, [pc, #260]	; (801123c <UART_SetConfig+0x640>)
 8011136:	4293      	cmp	r3, r2
 8011138:	f040 8082 	bne.w	8011240 <UART_SetConfig+0x644>
 801113c:	4b3c      	ldr	r3, [pc, #240]	; (8011230 <UART_SetConfig+0x634>)
 801113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011144:	2b28      	cmp	r3, #40	; 0x28
 8011146:	d86d      	bhi.n	8011224 <UART_SetConfig+0x628>
 8011148:	a201      	add	r2, pc, #4	; (adr r2, 8011150 <UART_SetConfig+0x554>)
 801114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114e:	bf00      	nop
 8011150:	080111f5 	.word	0x080111f5
 8011154:	08011225 	.word	0x08011225
 8011158:	08011225 	.word	0x08011225
 801115c:	08011225 	.word	0x08011225
 8011160:	08011225 	.word	0x08011225
 8011164:	08011225 	.word	0x08011225
 8011168:	08011225 	.word	0x08011225
 801116c:	08011225 	.word	0x08011225
 8011170:	080111fd 	.word	0x080111fd
 8011174:	08011225 	.word	0x08011225
 8011178:	08011225 	.word	0x08011225
 801117c:	08011225 	.word	0x08011225
 8011180:	08011225 	.word	0x08011225
 8011184:	08011225 	.word	0x08011225
 8011188:	08011225 	.word	0x08011225
 801118c:	08011225 	.word	0x08011225
 8011190:	08011205 	.word	0x08011205
 8011194:	08011225 	.word	0x08011225
 8011198:	08011225 	.word	0x08011225
 801119c:	08011225 	.word	0x08011225
 80111a0:	08011225 	.word	0x08011225
 80111a4:	08011225 	.word	0x08011225
 80111a8:	08011225 	.word	0x08011225
 80111ac:	08011225 	.word	0x08011225
 80111b0:	0801120d 	.word	0x0801120d
 80111b4:	08011225 	.word	0x08011225
 80111b8:	08011225 	.word	0x08011225
 80111bc:	08011225 	.word	0x08011225
 80111c0:	08011225 	.word	0x08011225
 80111c4:	08011225 	.word	0x08011225
 80111c8:	08011225 	.word	0x08011225
 80111cc:	08011225 	.word	0x08011225
 80111d0:	08011215 	.word	0x08011215
 80111d4:	08011225 	.word	0x08011225
 80111d8:	08011225 	.word	0x08011225
 80111dc:	08011225 	.word	0x08011225
 80111e0:	08011225 	.word	0x08011225
 80111e4:	08011225 	.word	0x08011225
 80111e8:	08011225 	.word	0x08011225
 80111ec:	08011225 	.word	0x08011225
 80111f0:	0801121d 	.word	0x0801121d
 80111f4:	2301      	movs	r3, #1
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e0d6      	b.n	80113aa <UART_SetConfig+0x7ae>
 80111fc:	2304      	movs	r3, #4
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e0d2      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011204:	2308      	movs	r3, #8
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e0ce      	b.n	80113aa <UART_SetConfig+0x7ae>
 801120c:	2310      	movs	r3, #16
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e0ca      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011214:	2320      	movs	r3, #32
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e0c6      	b.n	80113aa <UART_SetConfig+0x7ae>
 801121c:	2340      	movs	r3, #64	; 0x40
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e0c2      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011224:	2380      	movs	r3, #128	; 0x80
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e0be      	b.n	80113aa <UART_SetConfig+0x7ae>
 801122c:	40011400 	.word	0x40011400
 8011230:	58024400 	.word	0x58024400
 8011234:	40007800 	.word	0x40007800
 8011238:	40007c00 	.word	0x40007c00
 801123c:	40011800 	.word	0x40011800
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4aad      	ldr	r2, [pc, #692]	; (80114fc <UART_SetConfig+0x900>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d176      	bne.n	8011338 <UART_SetConfig+0x73c>
 801124a:	4bad      	ldr	r3, [pc, #692]	; (8011500 <UART_SetConfig+0x904>)
 801124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801124e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011252:	2b28      	cmp	r3, #40	; 0x28
 8011254:	d86c      	bhi.n	8011330 <UART_SetConfig+0x734>
 8011256:	a201      	add	r2, pc, #4	; (adr r2, 801125c <UART_SetConfig+0x660>)
 8011258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125c:	08011301 	.word	0x08011301
 8011260:	08011331 	.word	0x08011331
 8011264:	08011331 	.word	0x08011331
 8011268:	08011331 	.word	0x08011331
 801126c:	08011331 	.word	0x08011331
 8011270:	08011331 	.word	0x08011331
 8011274:	08011331 	.word	0x08011331
 8011278:	08011331 	.word	0x08011331
 801127c:	08011309 	.word	0x08011309
 8011280:	08011331 	.word	0x08011331
 8011284:	08011331 	.word	0x08011331
 8011288:	08011331 	.word	0x08011331
 801128c:	08011331 	.word	0x08011331
 8011290:	08011331 	.word	0x08011331
 8011294:	08011331 	.word	0x08011331
 8011298:	08011331 	.word	0x08011331
 801129c:	08011311 	.word	0x08011311
 80112a0:	08011331 	.word	0x08011331
 80112a4:	08011331 	.word	0x08011331
 80112a8:	08011331 	.word	0x08011331
 80112ac:	08011331 	.word	0x08011331
 80112b0:	08011331 	.word	0x08011331
 80112b4:	08011331 	.word	0x08011331
 80112b8:	08011331 	.word	0x08011331
 80112bc:	08011319 	.word	0x08011319
 80112c0:	08011331 	.word	0x08011331
 80112c4:	08011331 	.word	0x08011331
 80112c8:	08011331 	.word	0x08011331
 80112cc:	08011331 	.word	0x08011331
 80112d0:	08011331 	.word	0x08011331
 80112d4:	08011331 	.word	0x08011331
 80112d8:	08011331 	.word	0x08011331
 80112dc:	08011321 	.word	0x08011321
 80112e0:	08011331 	.word	0x08011331
 80112e4:	08011331 	.word	0x08011331
 80112e8:	08011331 	.word	0x08011331
 80112ec:	08011331 	.word	0x08011331
 80112f0:	08011331 	.word	0x08011331
 80112f4:	08011331 	.word	0x08011331
 80112f8:	08011331 	.word	0x08011331
 80112fc:	08011329 	.word	0x08011329
 8011300:	2301      	movs	r3, #1
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e050      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011308:	2304      	movs	r3, #4
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e04c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011310:	2308      	movs	r3, #8
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e048      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011318:	2310      	movs	r3, #16
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e044      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011320:	2320      	movs	r3, #32
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e040      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011328:	2340      	movs	r3, #64	; 0x40
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e03c      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e038      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a71      	ldr	r2, [pc, #452]	; (8011504 <UART_SetConfig+0x908>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d130      	bne.n	80113a4 <UART_SetConfig+0x7a8>
 8011342:	4b6f      	ldr	r3, [pc, #444]	; (8011500 <UART_SetConfig+0x904>)
 8011344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011346:	f003 0307 	and.w	r3, r3, #7
 801134a:	2b05      	cmp	r3, #5
 801134c:	d826      	bhi.n	801139c <UART_SetConfig+0x7a0>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <UART_SetConfig+0x758>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	0801136d 	.word	0x0801136d
 8011358:	08011375 	.word	0x08011375
 801135c:	0801137d 	.word	0x0801137d
 8011360:	08011385 	.word	0x08011385
 8011364:	0801138d 	.word	0x0801138d
 8011368:	08011395 	.word	0x08011395
 801136c:	2302      	movs	r3, #2
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e01a      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011374:	2304      	movs	r3, #4
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e016      	b.n	80113aa <UART_SetConfig+0x7ae>
 801137c:	2308      	movs	r3, #8
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e012      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011384:	2310      	movs	r3, #16
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e00e      	b.n	80113aa <UART_SetConfig+0x7ae>
 801138c:	2320      	movs	r3, #32
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e00a      	b.n	80113aa <UART_SetConfig+0x7ae>
 8011394:	2340      	movs	r3, #64	; 0x40
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e006      	b.n	80113aa <UART_SetConfig+0x7ae>
 801139c:	2380      	movs	r3, #128	; 0x80
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e002      	b.n	80113aa <UART_SetConfig+0x7ae>
 80113a4:	2380      	movs	r3, #128	; 0x80
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a55      	ldr	r2, [pc, #340]	; (8011504 <UART_SetConfig+0x908>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	f040 80f8 	bne.w	80115a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113ba:	2b20      	cmp	r3, #32
 80113bc:	dc46      	bgt.n	801144c <UART_SetConfig+0x850>
 80113be:	2b02      	cmp	r3, #2
 80113c0:	db75      	blt.n	80114ae <UART_SetConfig+0x8b2>
 80113c2:	3b02      	subs	r3, #2
 80113c4:	2b1e      	cmp	r3, #30
 80113c6:	d872      	bhi.n	80114ae <UART_SetConfig+0x8b2>
 80113c8:	a201      	add	r2, pc, #4	; (adr r2, 80113d0 <UART_SetConfig+0x7d4>)
 80113ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ce:	bf00      	nop
 80113d0:	08011453 	.word	0x08011453
 80113d4:	080114af 	.word	0x080114af
 80113d8:	0801145b 	.word	0x0801145b
 80113dc:	080114af 	.word	0x080114af
 80113e0:	080114af 	.word	0x080114af
 80113e4:	080114af 	.word	0x080114af
 80113e8:	0801146b 	.word	0x0801146b
 80113ec:	080114af 	.word	0x080114af
 80113f0:	080114af 	.word	0x080114af
 80113f4:	080114af 	.word	0x080114af
 80113f8:	080114af 	.word	0x080114af
 80113fc:	080114af 	.word	0x080114af
 8011400:	080114af 	.word	0x080114af
 8011404:	080114af 	.word	0x080114af
 8011408:	0801147b 	.word	0x0801147b
 801140c:	080114af 	.word	0x080114af
 8011410:	080114af 	.word	0x080114af
 8011414:	080114af 	.word	0x080114af
 8011418:	080114af 	.word	0x080114af
 801141c:	080114af 	.word	0x080114af
 8011420:	080114af 	.word	0x080114af
 8011424:	080114af 	.word	0x080114af
 8011428:	080114af 	.word	0x080114af
 801142c:	080114af 	.word	0x080114af
 8011430:	080114af 	.word	0x080114af
 8011434:	080114af 	.word	0x080114af
 8011438:	080114af 	.word	0x080114af
 801143c:	080114af 	.word	0x080114af
 8011440:	080114af 	.word	0x080114af
 8011444:	080114af 	.word	0x080114af
 8011448:	080114a1 	.word	0x080114a1
 801144c:	2b40      	cmp	r3, #64	; 0x40
 801144e:	d02a      	beq.n	80114a6 <UART_SetConfig+0x8aa>
 8011450:	e02d      	b.n	80114ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011452:	f7fb f86b 	bl	800c52c <HAL_RCCEx_GetD3PCLK1Freq>
 8011456:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011458:	e02f      	b.n	80114ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801145e:	4618      	mov	r0, r3
 8011460:	f7fb f87a 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011468:	e027      	b.n	80114ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801146a:	f107 0318 	add.w	r3, r7, #24
 801146e:	4618      	mov	r0, r3
 8011470:	f7fb f9c6 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011478:	e01f      	b.n	80114ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801147a:	4b21      	ldr	r3, [pc, #132]	; (8011500 <UART_SetConfig+0x904>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0320 	and.w	r3, r3, #32
 8011482:	2b00      	cmp	r3, #0
 8011484:	d009      	beq.n	801149a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011486:	4b1e      	ldr	r3, [pc, #120]	; (8011500 <UART_SetConfig+0x904>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	08db      	lsrs	r3, r3, #3
 801148c:	f003 0303 	and.w	r3, r3, #3
 8011490:	4a1d      	ldr	r2, [pc, #116]	; (8011508 <UART_SetConfig+0x90c>)
 8011492:	fa22 f303 	lsr.w	r3, r2, r3
 8011496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011498:	e00f      	b.n	80114ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801149a:	4b1b      	ldr	r3, [pc, #108]	; (8011508 <UART_SetConfig+0x90c>)
 801149c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801149e:	e00c      	b.n	80114ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114a0:	4b1a      	ldr	r3, [pc, #104]	; (801150c <UART_SetConfig+0x910>)
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a4:	e009      	b.n	80114ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ac:	e005      	b.n	80114ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114ae:	2300      	movs	r3, #0
 80114b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114b2:	2301      	movs	r3, #1
 80114b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 81ee 	beq.w	801189e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c6:	4a12      	ldr	r2, [pc, #72]	; (8011510 <UART_SetConfig+0x914>)
 80114c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114cc:	461a      	mov	r2, r3
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80114d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	685a      	ldr	r2, [r3, #4]
 80114da:	4613      	mov	r3, r2
 80114dc:	005b      	lsls	r3, r3, #1
 80114de:	4413      	add	r3, r2
 80114e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d305      	bcc.n	80114f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d910      	bls.n	8011514 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80114f2:	2301      	movs	r3, #1
 80114f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114f8:	e1d1      	b.n	801189e <UART_SetConfig+0xca2>
 80114fa:	bf00      	nop
 80114fc:	40011c00 	.word	0x40011c00
 8011500:	58024400 	.word	0x58024400
 8011504:	58000c00 	.word	0x58000c00
 8011508:	03d09000 	.word	0x03d09000
 801150c:	003d0900 	.word	0x003d0900
 8011510:	0801858c 	.word	0x0801858c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011516:	2200      	movs	r2, #0
 8011518:	60bb      	str	r3, [r7, #8]
 801151a:	60fa      	str	r2, [r7, #12]
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011520:	4ac0      	ldr	r2, [pc, #768]	; (8011824 <UART_SetConfig+0xc28>)
 8011522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011526:	b29b      	uxth	r3, r3
 8011528:	2200      	movs	r2, #0
 801152a:	603b      	str	r3, [r7, #0]
 801152c:	607a      	str	r2, [r7, #4]
 801152e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011536:	f7ee ff53 	bl	80003e0 <__aeabi_uldivmod>
 801153a:	4602      	mov	r2, r0
 801153c:	460b      	mov	r3, r1
 801153e:	4610      	mov	r0, r2
 8011540:	4619      	mov	r1, r3
 8011542:	f04f 0200 	mov.w	r2, #0
 8011546:	f04f 0300 	mov.w	r3, #0
 801154a:	020b      	lsls	r3, r1, #8
 801154c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011550:	0202      	lsls	r2, r0, #8
 8011552:	6979      	ldr	r1, [r7, #20]
 8011554:	6849      	ldr	r1, [r1, #4]
 8011556:	0849      	lsrs	r1, r1, #1
 8011558:	2000      	movs	r0, #0
 801155a:	460c      	mov	r4, r1
 801155c:	4605      	mov	r5, r0
 801155e:	eb12 0804 	adds.w	r8, r2, r4
 8011562:	eb43 0905 	adc.w	r9, r3, r5
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	469a      	mov	sl, r3
 801156e:	4693      	mov	fp, r2
 8011570:	4652      	mov	r2, sl
 8011572:	465b      	mov	r3, fp
 8011574:	4640      	mov	r0, r8
 8011576:	4649      	mov	r1, r9
 8011578:	f7ee ff32 	bl	80003e0 <__aeabi_uldivmod>
 801157c:	4602      	mov	r2, r0
 801157e:	460b      	mov	r3, r1
 8011580:	4613      	mov	r3, r2
 8011582:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801158a:	d308      	bcc.n	801159e <UART_SetConfig+0x9a2>
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011592:	d204      	bcs.n	801159e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801159a:	60da      	str	r2, [r3, #12]
 801159c:	e17f      	b.n	801189e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801159e:	2301      	movs	r3, #1
 80115a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115a4:	e17b      	b.n	801189e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	69db      	ldr	r3, [r3, #28]
 80115aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115ae:	f040 80bd 	bne.w	801172c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115b6:	2b20      	cmp	r3, #32
 80115b8:	dc48      	bgt.n	801164c <UART_SetConfig+0xa50>
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	db7b      	blt.n	80116b6 <UART_SetConfig+0xaba>
 80115be:	2b20      	cmp	r3, #32
 80115c0:	d879      	bhi.n	80116b6 <UART_SetConfig+0xaba>
 80115c2:	a201      	add	r2, pc, #4	; (adr r2, 80115c8 <UART_SetConfig+0x9cc>)
 80115c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c8:	08011653 	.word	0x08011653
 80115cc:	0801165b 	.word	0x0801165b
 80115d0:	080116b7 	.word	0x080116b7
 80115d4:	080116b7 	.word	0x080116b7
 80115d8:	08011663 	.word	0x08011663
 80115dc:	080116b7 	.word	0x080116b7
 80115e0:	080116b7 	.word	0x080116b7
 80115e4:	080116b7 	.word	0x080116b7
 80115e8:	08011673 	.word	0x08011673
 80115ec:	080116b7 	.word	0x080116b7
 80115f0:	080116b7 	.word	0x080116b7
 80115f4:	080116b7 	.word	0x080116b7
 80115f8:	080116b7 	.word	0x080116b7
 80115fc:	080116b7 	.word	0x080116b7
 8011600:	080116b7 	.word	0x080116b7
 8011604:	080116b7 	.word	0x080116b7
 8011608:	08011683 	.word	0x08011683
 801160c:	080116b7 	.word	0x080116b7
 8011610:	080116b7 	.word	0x080116b7
 8011614:	080116b7 	.word	0x080116b7
 8011618:	080116b7 	.word	0x080116b7
 801161c:	080116b7 	.word	0x080116b7
 8011620:	080116b7 	.word	0x080116b7
 8011624:	080116b7 	.word	0x080116b7
 8011628:	080116b7 	.word	0x080116b7
 801162c:	080116b7 	.word	0x080116b7
 8011630:	080116b7 	.word	0x080116b7
 8011634:	080116b7 	.word	0x080116b7
 8011638:	080116b7 	.word	0x080116b7
 801163c:	080116b7 	.word	0x080116b7
 8011640:	080116b7 	.word	0x080116b7
 8011644:	080116b7 	.word	0x080116b7
 8011648:	080116a9 	.word	0x080116a9
 801164c:	2b40      	cmp	r3, #64	; 0x40
 801164e:	d02e      	beq.n	80116ae <UART_SetConfig+0xab2>
 8011650:	e031      	b.n	80116b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011652:	f7f9 f8cd 	bl	800a7f0 <HAL_RCC_GetPCLK1Freq>
 8011656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011658:	e033      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801165a:	f7f9 f8df 	bl	800a81c <HAL_RCC_GetPCLK2Freq>
 801165e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011660:	e02f      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011666:	4618      	mov	r0, r3
 8011668:	f7fa ff76 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011670:	e027      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011672:	f107 0318 	add.w	r3, r7, #24
 8011676:	4618      	mov	r0, r3
 8011678:	f7fb f8c2 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011680:	e01f      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011682:	4b69      	ldr	r3, [pc, #420]	; (8011828 <UART_SetConfig+0xc2c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f003 0320 	and.w	r3, r3, #32
 801168a:	2b00      	cmp	r3, #0
 801168c:	d009      	beq.n	80116a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801168e:	4b66      	ldr	r3, [pc, #408]	; (8011828 <UART_SetConfig+0xc2c>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	08db      	lsrs	r3, r3, #3
 8011694:	f003 0303 	and.w	r3, r3, #3
 8011698:	4a64      	ldr	r2, [pc, #400]	; (801182c <UART_SetConfig+0xc30>)
 801169a:	fa22 f303 	lsr.w	r3, r2, r3
 801169e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116a0:	e00f      	b.n	80116c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116a2:	4b62      	ldr	r3, [pc, #392]	; (801182c <UART_SetConfig+0xc30>)
 80116a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a6:	e00c      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116a8:	4b61      	ldr	r3, [pc, #388]	; (8011830 <UART_SetConfig+0xc34>)
 80116aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ac:	e009      	b.n	80116c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116b4:	e005      	b.n	80116c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116b6:	2300      	movs	r3, #0
 80116b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116ba:	2301      	movs	r3, #1
 80116bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f000 80ea 	beq.w	801189e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ce:	4a55      	ldr	r2, [pc, #340]	; (8011824 <UART_SetConfig+0xc28>)
 80116d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116d4:	461a      	mov	r2, r3
 80116d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80116dc:	005a      	lsls	r2, r3, #1
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	085b      	lsrs	r3, r3, #1
 80116e4:	441a      	add	r2, r3
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f2:	2b0f      	cmp	r3, #15
 80116f4:	d916      	bls.n	8011724 <UART_SetConfig+0xb28>
 80116f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116fc:	d212      	bcs.n	8011724 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	b29b      	uxth	r3, r3
 8011702:	f023 030f 	bic.w	r3, r3, #15
 8011706:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170a:	085b      	lsrs	r3, r3, #1
 801170c:	b29b      	uxth	r3, r3
 801170e:	f003 0307 	and.w	r3, r3, #7
 8011712:	b29a      	uxth	r2, r3
 8011714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011716:	4313      	orrs	r3, r2
 8011718:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011720:	60da      	str	r2, [r3, #12]
 8011722:	e0bc      	b.n	801189e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011724:	2301      	movs	r3, #1
 8011726:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801172a:	e0b8      	b.n	801189e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801172c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011730:	2b20      	cmp	r3, #32
 8011732:	dc4b      	bgt.n	80117cc <UART_SetConfig+0xbd0>
 8011734:	2b00      	cmp	r3, #0
 8011736:	f2c0 8087 	blt.w	8011848 <UART_SetConfig+0xc4c>
 801173a:	2b20      	cmp	r3, #32
 801173c:	f200 8084 	bhi.w	8011848 <UART_SetConfig+0xc4c>
 8011740:	a201      	add	r2, pc, #4	; (adr r2, 8011748 <UART_SetConfig+0xb4c>)
 8011742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011746:	bf00      	nop
 8011748:	080117d3 	.word	0x080117d3
 801174c:	080117db 	.word	0x080117db
 8011750:	08011849 	.word	0x08011849
 8011754:	08011849 	.word	0x08011849
 8011758:	080117e3 	.word	0x080117e3
 801175c:	08011849 	.word	0x08011849
 8011760:	08011849 	.word	0x08011849
 8011764:	08011849 	.word	0x08011849
 8011768:	080117f3 	.word	0x080117f3
 801176c:	08011849 	.word	0x08011849
 8011770:	08011849 	.word	0x08011849
 8011774:	08011849 	.word	0x08011849
 8011778:	08011849 	.word	0x08011849
 801177c:	08011849 	.word	0x08011849
 8011780:	08011849 	.word	0x08011849
 8011784:	08011849 	.word	0x08011849
 8011788:	08011803 	.word	0x08011803
 801178c:	08011849 	.word	0x08011849
 8011790:	08011849 	.word	0x08011849
 8011794:	08011849 	.word	0x08011849
 8011798:	08011849 	.word	0x08011849
 801179c:	08011849 	.word	0x08011849
 80117a0:	08011849 	.word	0x08011849
 80117a4:	08011849 	.word	0x08011849
 80117a8:	08011849 	.word	0x08011849
 80117ac:	08011849 	.word	0x08011849
 80117b0:	08011849 	.word	0x08011849
 80117b4:	08011849 	.word	0x08011849
 80117b8:	08011849 	.word	0x08011849
 80117bc:	08011849 	.word	0x08011849
 80117c0:	08011849 	.word	0x08011849
 80117c4:	08011849 	.word	0x08011849
 80117c8:	0801183b 	.word	0x0801183b
 80117cc:	2b40      	cmp	r3, #64	; 0x40
 80117ce:	d037      	beq.n	8011840 <UART_SetConfig+0xc44>
 80117d0:	e03a      	b.n	8011848 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117d2:	f7f9 f80d 	bl	800a7f0 <HAL_RCC_GetPCLK1Freq>
 80117d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117d8:	e03c      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117da:	f7f9 f81f 	bl	800a81c <HAL_RCC_GetPCLK2Freq>
 80117de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117e0:	e038      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fa feb6 	bl	800c558 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117f0:	e030      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117f2:	f107 0318 	add.w	r3, r7, #24
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fb f802 	bl	800c800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011800:	e028      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011802:	4b09      	ldr	r3, [pc, #36]	; (8011828 <UART_SetConfig+0xc2c>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f003 0320 	and.w	r3, r3, #32
 801180a:	2b00      	cmp	r3, #0
 801180c:	d012      	beq.n	8011834 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801180e:	4b06      	ldr	r3, [pc, #24]	; (8011828 <UART_SetConfig+0xc2c>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	08db      	lsrs	r3, r3, #3
 8011814:	f003 0303 	and.w	r3, r3, #3
 8011818:	4a04      	ldr	r2, [pc, #16]	; (801182c <UART_SetConfig+0xc30>)
 801181a:	fa22 f303 	lsr.w	r3, r2, r3
 801181e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011820:	e018      	b.n	8011854 <UART_SetConfig+0xc58>
 8011822:	bf00      	nop
 8011824:	0801858c 	.word	0x0801858c
 8011828:	58024400 	.word	0x58024400
 801182c:	03d09000 	.word	0x03d09000
 8011830:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011834:	4b24      	ldr	r3, [pc, #144]	; (80118c8 <UART_SetConfig+0xccc>)
 8011836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011838:	e00c      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801183a:	4b24      	ldr	r3, [pc, #144]	; (80118cc <UART_SetConfig+0xcd0>)
 801183c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801183e:	e009      	b.n	8011854 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011846:	e005      	b.n	8011854 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011848:	2300      	movs	r3, #0
 801184a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801184c:	2301      	movs	r3, #1
 801184e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011852:	bf00      	nop
    }

    if (pclk != 0U)
 8011854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011856:	2b00      	cmp	r3, #0
 8011858:	d021      	beq.n	801189e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185e:	4a1c      	ldr	r2, [pc, #112]	; (80118d0 <UART_SetConfig+0xcd4>)
 8011860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011864:	461a      	mov	r2, r3
 8011866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011868:	fbb3 f2f2 	udiv	r2, r3, r2
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	085b      	lsrs	r3, r3, #1
 8011872:	441a      	add	r2, r3
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	fbb2 f3f3 	udiv	r3, r2, r3
 801187c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011880:	2b0f      	cmp	r3, #15
 8011882:	d909      	bls.n	8011898 <UART_SetConfig+0xc9c>
 8011884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801188a:	d205      	bcs.n	8011898 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	b29a      	uxth	r2, r3
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	60da      	str	r2, [r3, #12]
 8011896:	e002      	b.n	801189e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	2201      	movs	r2, #1
 80118a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2201      	movs	r2, #1
 80118aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2200      	movs	r2, #0
 80118b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2200      	movs	r2, #0
 80118b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3748      	adds	r7, #72	; 0x48
 80118c2:	46bd      	mov	sp, r7
 80118c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118c8:	03d09000 	.word	0x03d09000
 80118cc:	003d0900 	.word	0x003d0900
 80118d0:	0801858c 	.word	0x0801858c

080118d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d00a      	beq.n	80118fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	430a      	orrs	r2, r1
 80118fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011902:	f003 0302 	and.w	r3, r3, #2
 8011906:	2b00      	cmp	r3, #0
 8011908:	d00a      	beq.n	8011920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	430a      	orrs	r2, r1
 801191e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011924:	f003 0304 	and.w	r3, r3, #4
 8011928:	2b00      	cmp	r3, #0
 801192a:	d00a      	beq.n	8011942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	430a      	orrs	r2, r1
 8011940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011946:	f003 0308 	and.w	r3, r3, #8
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00a      	beq.n	8011964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	430a      	orrs	r2, r1
 8011962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011968:	f003 0310 	and.w	r3, r3, #16
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00a      	beq.n	8011986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	430a      	orrs	r2, r1
 8011984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198a:	f003 0320 	and.w	r3, r3, #32
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00a      	beq.n	80119a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	430a      	orrs	r2, r1
 80119a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d01a      	beq.n	80119ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	430a      	orrs	r2, r1
 80119c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119d2:	d10a      	bne.n	80119ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	430a      	orrs	r2, r1
 80119e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d00a      	beq.n	8011a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	430a      	orrs	r2, r1
 8011a0a:	605a      	str	r2, [r3, #4]
  }
}
 8011a0c:	bf00      	nop
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b098      	sub	sp, #96	; 0x60
 8011a1c:	af02      	add	r7, sp, #8
 8011a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a28:	f7f2 f822 	bl	8003a70 <HAL_GetTick>
 8011a2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f003 0308 	and.w	r3, r3, #8
 8011a38:	2b08      	cmp	r3, #8
 8011a3a:	d12f      	bne.n	8011a9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a44:	2200      	movs	r2, #0
 8011a46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 f88e 	bl	8011b6c <UART_WaitOnFlagUntilTimeout>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d022      	beq.n	8011a9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5e:	e853 3f00 	ldrex	r3, [r3]
 8011a62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	461a      	mov	r2, r3
 8011a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a74:	647b      	str	r3, [r7, #68]	; 0x44
 8011a76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a7c:	e841 2300 	strex	r3, r2, [r1]
 8011a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1e6      	bne.n	8011a56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2220      	movs	r2, #32
 8011a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a98:	2303      	movs	r3, #3
 8011a9a:	e063      	b.n	8011b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f003 0304 	and.w	r3, r3, #4
 8011aa6:	2b04      	cmp	r3, #4
 8011aa8:	d149      	bne.n	8011b3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011aaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011aae:	9300      	str	r3, [sp, #0]
 8011ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f857 	bl	8011b6c <UART_WaitOnFlagUntilTimeout>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d03c      	beq.n	8011b3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	e853 3f00 	ldrex	r3, [r3]
 8011ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8011ad2:	6a3b      	ldr	r3, [r7, #32]
 8011ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	461a      	mov	r2, r3
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aea:	e841 2300 	strex	r3, r2, [r1]
 8011aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1e6      	bne.n	8011ac4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	3308      	adds	r3, #8
 8011afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	e853 3f00 	ldrex	r3, [r3]
 8011b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f023 0301 	bic.w	r3, r3, #1
 8011b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	3308      	adds	r3, #8
 8011b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b16:	61fa      	str	r2, [r7, #28]
 8011b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b1a:	69b9      	ldr	r1, [r7, #24]
 8011b1c:	69fa      	ldr	r2, [r7, #28]
 8011b1e:	e841 2300 	strex	r3, r2, [r1]
 8011b22:	617b      	str	r3, [r7, #20]
   return(result);
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1e5      	bne.n	8011af6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2220      	movs	r2, #32
 8011b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b3a:	2303      	movs	r3, #3
 8011b3c:	e012      	b.n	8011b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2220      	movs	r2, #32
 8011b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2200      	movs	r2, #0
 8011b58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b62:	2300      	movs	r3, #0
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3758      	adds	r7, #88	; 0x58
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b7c:	e049      	b.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b84:	d045      	beq.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b86:	f7f1 ff73 	bl	8003a70 <HAL_GetTick>
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	69ba      	ldr	r2, [r7, #24]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d302      	bcc.n	8011b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b9c:	2303      	movs	r3, #3
 8011b9e:	e048      	b.n	8011c32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f003 0304 	and.w	r3, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d031      	beq.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	f003 0308 	and.w	r3, r3, #8
 8011bb8:	2b08      	cmp	r3, #8
 8011bba:	d110      	bne.n	8011bde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2208      	movs	r2, #8
 8011bc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 f839 	bl	8011c3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2208      	movs	r2, #8
 8011bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e029      	b.n	8011c32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	69db      	ldr	r3, [r3, #28]
 8011be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bec:	d111      	bne.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f000 f81f 	bl	8011c3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2220      	movs	r2, #32
 8011c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	e00f      	b.n	8011c32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	69da      	ldr	r2, [r3, #28]
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	4013      	ands	r3, r2
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	bf0c      	ite	eq
 8011c22:	2301      	moveq	r3, #1
 8011c24:	2300      	movne	r3, #0
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	461a      	mov	r2, r3
 8011c2a:	79fb      	ldrb	r3, [r7, #7]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d0a6      	beq.n	8011b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
	...

08011c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b095      	sub	sp, #84	; 0x54
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c4c:	e853 3f00 	ldrex	r3, [r3]
 8011c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c62:	643b      	str	r3, [r7, #64]	; 0x40
 8011c64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c6a:	e841 2300 	strex	r3, r2, [r1]
 8011c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d1e6      	bne.n	8011c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	3308      	adds	r3, #8
 8011c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	e853 3f00 	ldrex	r3, [r3]
 8011c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c86:	69fa      	ldr	r2, [r7, #28]
 8011c88:	4b1e      	ldr	r3, [pc, #120]	; (8011d04 <UART_EndRxTransfer+0xc8>)
 8011c8a:	4013      	ands	r3, r2
 8011c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	3308      	adds	r3, #8
 8011c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c9e:	e841 2300 	strex	r3, r2, [r1]
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1e5      	bne.n	8011c76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d118      	bne.n	8011ce4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	e853 3f00 	ldrex	r3, [r3]
 8011cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	f023 0310 	bic.w	r3, r3, #16
 8011cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	461a      	mov	r2, r3
 8011cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd0:	61bb      	str	r3, [r7, #24]
 8011cd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd4:	6979      	ldr	r1, [r7, #20]
 8011cd6:	69ba      	ldr	r2, [r7, #24]
 8011cd8:	e841 2300 	strex	r3, r2, [r1]
 8011cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1e6      	bne.n	8011cb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2220      	movs	r2, #32
 8011ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011cf8:	bf00      	nop
 8011cfa:	3754      	adds	r7, #84	; 0x54
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	effffffe 	.word	0xeffffffe

08011d08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d101      	bne.n	8011d1e <HAL_UARTEx_DisableFifoMode+0x16>
 8011d1a:	2302      	movs	r3, #2
 8011d1c:	e027      	b.n	8011d6e <HAL_UARTEx_DisableFifoMode+0x66>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2201      	movs	r2, #1
 8011d22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2224      	movs	r2, #36	; 0x24
 8011d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f022 0201 	bic.w	r2, r2, #1
 8011d44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	68fa      	ldr	r2, [r7, #12]
 8011d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2220      	movs	r2, #32
 8011d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3714      	adds	r7, #20
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr

08011d7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d7a:	b580      	push	{r7, lr}
 8011d7c:	b084      	sub	sp, #16
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	6078      	str	r0, [r7, #4]
 8011d82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d101      	bne.n	8011d92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d8e:	2302      	movs	r3, #2
 8011d90:	e02d      	b.n	8011dee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2201      	movs	r2, #1
 8011d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2224      	movs	r2, #36	; 0x24
 8011d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f022 0201 	bic.w	r2, r2, #1
 8011db8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	689b      	ldr	r3, [r3, #8]
 8011dc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	683a      	ldr	r2, [r7, #0]
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f000 f850 	bl	8011e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2220      	movs	r2, #32
 8011de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b084      	sub	sp, #16
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d101      	bne.n	8011e0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e0a:	2302      	movs	r3, #2
 8011e0c:	e02d      	b.n	8011e6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2201      	movs	r2, #1
 8011e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2224      	movs	r2, #36	; 0x24
 8011e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f022 0201 	bic.w	r2, r2, #1
 8011e34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	689b      	ldr	r3, [r3, #8]
 8011e3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	430a      	orrs	r2, r1
 8011e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 f812 	bl	8011e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2220      	movs	r2, #32
 8011e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e68:	2300      	movs	r3, #0
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
	...

08011e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d108      	bne.n	8011e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2201      	movs	r2, #1
 8011e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e94:	e031      	b.n	8011efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e96:	2310      	movs	r3, #16
 8011e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e9a:	2310      	movs	r3, #16
 8011e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	689b      	ldr	r3, [r3, #8]
 8011ea4:	0e5b      	lsrs	r3, r3, #25
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f003 0307 	and.w	r3, r3, #7
 8011eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	0f5b      	lsrs	r3, r3, #29
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	f003 0307 	and.w	r3, r3, #7
 8011ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ebe:	7bbb      	ldrb	r3, [r7, #14]
 8011ec0:	7b3a      	ldrb	r2, [r7, #12]
 8011ec2:	4911      	ldr	r1, [pc, #68]	; (8011f08 <UARTEx_SetNbDataToProcess+0x94>)
 8011ec4:	5c8a      	ldrb	r2, [r1, r2]
 8011ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011eca:	7b3a      	ldrb	r2, [r7, #12]
 8011ecc:	490f      	ldr	r1, [pc, #60]	; (8011f0c <UARTEx_SetNbDataToProcess+0x98>)
 8011ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011edc:	7bfb      	ldrb	r3, [r7, #15]
 8011ede:	7b7a      	ldrb	r2, [r7, #13]
 8011ee0:	4909      	ldr	r1, [pc, #36]	; (8011f08 <UARTEx_SetNbDataToProcess+0x94>)
 8011ee2:	5c8a      	ldrb	r2, [r1, r2]
 8011ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ee8:	7b7a      	ldrb	r2, [r7, #13]
 8011eea:	4908      	ldr	r1, [pc, #32]	; (8011f0c <UARTEx_SetNbDataToProcess+0x98>)
 8011eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011efa:	bf00      	nop
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	080185a4 	.word	0x080185a4
 8011f0c:	080185ac 	.word	0x080185ac

08011f10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f10:	b084      	sub	sp, #16
 8011f12:	b480      	push	{r7}
 8011f14:	b085      	sub	sp, #20
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
 8011f1a:	f107 001c 	add.w	r0, r7, #28
 8011f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f22:	2300      	movs	r3, #0
 8011f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f2a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <SDMMC_Init+0x50>)
 8011f44:	4013      	ands	r3, r2
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	431a      	orrs	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f4e:	2300      	movs	r3, #0
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	b004      	add	sp, #16
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	ffc02c00 	.word	0xffc02c00

08011f64 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f043 0203 	orr.w	r2, r3, #3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011fb4:	2300      	movs	r3, #0
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	370c      	adds	r7, #12
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b083      	sub	sp, #12
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f003 0303 	and.w	r3, r3, #3
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	370c      	adds	r7, #12
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr
	...

08011fe0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b085      	sub	sp, #20
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011fea:	2300      	movs	r3, #0
 8011fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011ffe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012004:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801200a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	4313      	orrs	r3, r2
 8012010:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68da      	ldr	r2, [r3, #12]
 8012016:	4b06      	ldr	r3, [pc, #24]	; (8012030 <SDMMC_SendCommand+0x50>)
 8012018:	4013      	ands	r3, r2
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	431a      	orrs	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3714      	adds	r7, #20
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	fffee0c0 	.word	0xfffee0c0

08012034 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	691b      	ldr	r3, [r3, #16]
 8012040:	b2db      	uxtb	r3, r3
}
 8012042:	4618      	mov	r0, r3
 8012044:	370c      	adds	r7, #12
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr

0801204e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801204e:	b480      	push	{r7}
 8012050:	b085      	sub	sp, #20
 8012052:	af00      	add	r7, sp, #0
 8012054:	6078      	str	r0, [r7, #4]
 8012056:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	3314      	adds	r3, #20
 801205c:	461a      	mov	r2, r3
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	4413      	add	r3, r2
 8012062:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3714      	adds	r7, #20
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012074:	b480      	push	{r7}
 8012076:	b085      	sub	sp, #20
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	685a      	ldr	r2, [r3, #4]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801209a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120a0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	4313      	orrs	r3, r2
 80120ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	431a      	orrs	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120be:	2300      	movs	r3, #0

}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b088      	sub	sp, #32
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120da:	2310      	movs	r3, #16
 80120dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120e4:	2300      	movs	r3, #0
 80120e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ee:	f107 0308 	add.w	r3, r7, #8
 80120f2:	4619      	mov	r1, r3
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff ff73 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80120fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80120fe:	2110      	movs	r1, #16
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fa5f 	bl	80125c4 <SDMMC_GetCmdResp1>
 8012106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012108:	69fb      	ldr	r3, [r7, #28]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3720      	adds	r7, #32
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b088      	sub	sp, #32
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012120:	2311      	movs	r3, #17
 8012122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801212a:	2300      	movs	r3, #0
 801212c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012134:	f107 0308 	add.w	r3, r7, #8
 8012138:	4619      	mov	r1, r3
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff ff50 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012140:	f241 3288 	movw	r2, #5000	; 0x1388
 8012144:	2111      	movs	r1, #17
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 fa3c 	bl	80125c4 <SDMMC_GetCmdResp1>
 801214c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801214e:	69fb      	ldr	r3, [r7, #28]
}
 8012150:	4618      	mov	r0, r3
 8012152:	3720      	adds	r7, #32
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b088      	sub	sp, #32
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012166:	2312      	movs	r3, #18
 8012168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801216a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801216e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012170:	2300      	movs	r3, #0
 8012172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012178:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801217a:	f107 0308 	add.w	r3, r7, #8
 801217e:	4619      	mov	r1, r3
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7ff ff2d 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012186:	f241 3288 	movw	r2, #5000	; 0x1388
 801218a:	2112      	movs	r1, #18
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 fa19 	bl	80125c4 <SDMMC_GetCmdResp1>
 8012192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012194:	69fb      	ldr	r3, [r7, #28]
}
 8012196:	4618      	mov	r0, r3
 8012198:	3720      	adds	r7, #32
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b088      	sub	sp, #32
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121ac:	2318      	movs	r3, #24
 80121ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121b6:	2300      	movs	r3, #0
 80121b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c0:	f107 0308 	add.w	r3, r7, #8
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7ff ff0a 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d0:	2118      	movs	r1, #24
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 f9f6 	bl	80125c4 <SDMMC_GetCmdResp1>
 80121d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121da:	69fb      	ldr	r3, [r7, #28]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3720      	adds	r7, #32
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80121f2:	2319      	movs	r3, #25
 80121f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121fc:	2300      	movs	r3, #0
 80121fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff fee7 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012212:	f241 3288 	movw	r2, #5000	; 0x1388
 8012216:	2119      	movs	r1, #25
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f9d3 	bl	80125c4 <SDMMC_GetCmdResp1>
 801221e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012220:	69fb      	ldr	r3, [r7, #28]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3720      	adds	r7, #32
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
	...

0801222c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012234:	2300      	movs	r3, #0
 8012236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012238:	230c      	movs	r3, #12
 801223a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012242:	2300      	movs	r3, #0
 8012244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801224a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012264:	f107 0308 	add.w	r3, r7, #8
 8012268:	4619      	mov	r1, r3
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f7ff feb8 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012270:	4a0b      	ldr	r2, [pc, #44]	; (80122a0 <SDMMC_CmdStopTransfer+0x74>)
 8012272:	210c      	movs	r1, #12
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f000 f9a5 	bl	80125c4 <SDMMC_GetCmdResp1>
 801227a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801228e:	d101      	bne.n	8012294 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012290:	2300      	movs	r3, #0
 8012292:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012294:	69fb      	ldr	r3, [r7, #28]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3720      	adds	r7, #32
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	05f5e100 	.word	0x05f5e100

080122a4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b088      	sub	sp, #32
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80122b2:	2307      	movs	r3, #7
 80122b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122bc:	2300      	movs	r3, #0
 80122be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122c6:	f107 0308 	add.w	r3, r7, #8
 80122ca:	4619      	mov	r1, r3
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff fe87 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80122d6:	2107      	movs	r1, #7
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 f973 	bl	80125c4 <SDMMC_GetCmdResp1>
 80122de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122e0:	69fb      	ldr	r3, [r7, #28]
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3720      	adds	r7, #32
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}

080122ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b088      	sub	sp, #32
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80122fa:	2300      	movs	r3, #0
 80122fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122fe:	2300      	movs	r3, #0
 8012300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012308:	f107 0308 	add.w	r3, r7, #8
 801230c:	4619      	mov	r1, r3
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff fe66 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fb97 	bl	8012a48 <SDMMC_GetCmdError>
 801231a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801231c:	69fb      	ldr	r3, [r7, #28]
}
 801231e:	4618      	mov	r0, r3
 8012320:	3720      	adds	r7, #32
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b088      	sub	sp, #32
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801232e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012334:	2308      	movs	r3, #8
 8012336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012338:	f44f 7380 	mov.w	r3, #256	; 0x100
 801233c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801233e:	2300      	movs	r3, #0
 8012340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012348:	f107 0308 	add.w	r3, r7, #8
 801234c:	4619      	mov	r1, r3
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7ff fe46 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 fb29 	bl	80129ac <SDMMC_GetCmdResp7>
 801235a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801235c:	69fb      	ldr	r3, [r7, #28]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3720      	adds	r7, #32
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}

08012366 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012366:	b580      	push	{r7, lr}
 8012368:	b088      	sub	sp, #32
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
 801236e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012374:	2337      	movs	r3, #55	; 0x37
 8012376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012378:	f44f 7380 	mov.w	r3, #256	; 0x100
 801237c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801237e:	2300      	movs	r3, #0
 8012380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012388:	f107 0308 	add.w	r3, r7, #8
 801238c:	4619      	mov	r1, r3
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f7ff fe26 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012394:	f241 3288 	movw	r2, #5000	; 0x1388
 8012398:	2137      	movs	r1, #55	; 0x37
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 f912 	bl	80125c4 <SDMMC_GetCmdResp1>
 80123a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123a2:	69fb      	ldr	r3, [r7, #28]
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3720      	adds	r7, #32
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b088      	sub	sp, #32
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80123ba:	2329      	movs	r3, #41	; 0x29
 80123bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123c4:	2300      	movs	r3, #0
 80123c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ce:	f107 0308 	add.w	r3, r7, #8
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff fe03 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 fa2e 	bl	801283c <SDMMC_GetCmdResp3>
 80123e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123e2:	69fb      	ldr	r3, [r7, #28]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3720      	adds	r7, #32
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b088      	sub	sp, #32
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80123fa:	2306      	movs	r3, #6
 80123fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012404:	2300      	movs	r3, #0
 8012406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801240c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801240e:	f107 0308 	add.w	r3, r7, #8
 8012412:	4619      	mov	r1, r3
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7ff fde3 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801241a:	f241 3288 	movw	r2, #5000	; 0x1388
 801241e:	2106      	movs	r1, #6
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f000 f8cf 	bl	80125c4 <SDMMC_GetCmdResp1>
 8012426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012428:	69fb      	ldr	r3, [r7, #28]
}
 801242a:	4618      	mov	r0, r3
 801242c:	3720      	adds	r7, #32
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b088      	sub	sp, #32
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801243e:	2333      	movs	r3, #51	; 0x33
 8012440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012448:	2300      	movs	r3, #0
 801244a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012452:	f107 0308 	add.w	r3, r7, #8
 8012456:	4619      	mov	r1, r3
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff fdc1 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012462:	2133      	movs	r1, #51	; 0x33
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 f8ad 	bl	80125c4 <SDMMC_GetCmdResp1>
 801246a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801246c:	69fb      	ldr	r3, [r7, #28]
}
 801246e:	4618      	mov	r0, r3
 8012470:	3720      	adds	r7, #32
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b088      	sub	sp, #32
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801247e:	2300      	movs	r3, #0
 8012480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012482:	2302      	movs	r3, #2
 8012484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012486:	f44f 7340 	mov.w	r3, #768	; 0x300
 801248a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801248c:	2300      	movs	r3, #0
 801248e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012496:	f107 0308 	add.w	r3, r7, #8
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f7ff fd9f 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 f980 	bl	80127a8 <SDMMC_GetCmdResp2>
 80124a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124aa:	69fb      	ldr	r3, [r7, #28]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3720      	adds	r7, #32
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124c2:	2309      	movs	r3, #9
 80124c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124cc:	2300      	movs	r3, #0
 80124ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124d6:	f107 0308 	add.w	r3, r7, #8
 80124da:	4619      	mov	r1, r3
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff fd7f 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 f960 	bl	80127a8 <SDMMC_GetCmdResp2>
 80124e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ea:	69fb      	ldr	r3, [r7, #28]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3720      	adds	r7, #32
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}

080124f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80124fe:	2300      	movs	r3, #0
 8012500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012502:	2303      	movs	r3, #3
 8012504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012506:	f44f 7380 	mov.w	r3, #256	; 0x100
 801250a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801250c:	2300      	movs	r3, #0
 801250e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012516:	f107 0308 	add.w	r3, r7, #8
 801251a:	4619      	mov	r1, r3
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff fd5f 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012522:	683a      	ldr	r2, [r7, #0]
 8012524:	2103      	movs	r1, #3
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 f9c8 	bl	80128bc <SDMMC_GetCmdResp6>
 801252c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801252e:	69fb      	ldr	r3, [r7, #28]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3720      	adds	r7, #32
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012546:	230d      	movs	r3, #13
 8012548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801254a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801254e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012550:	2300      	movs	r3, #0
 8012552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801255a:	f107 0308 	add.w	r3, r7, #8
 801255e:	4619      	mov	r1, r3
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff fd3d 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012566:	f241 3288 	movw	r2, #5000	; 0x1388
 801256a:	210d      	movs	r1, #13
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 f829 	bl	80125c4 <SDMMC_GetCmdResp1>
 8012572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012574:	69fb      	ldr	r3, [r7, #28]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3720      	adds	r7, #32
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b088      	sub	sp, #32
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012586:	2300      	movs	r3, #0
 8012588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801258a:	230d      	movs	r3, #13
 801258c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012594:	2300      	movs	r3, #0
 8012596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801259c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801259e:	f107 0308 	add.w	r3, r7, #8
 80125a2:	4619      	mov	r1, r3
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff fd1b 	bl	8011fe0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80125aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ae:	210d      	movs	r1, #13
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 f807 	bl	80125c4 <SDMMC_GetCmdResp1>
 80125b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125b8:	69fb      	ldr	r3, [r7, #28]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3720      	adds	r7, #32
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
	...

080125c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b088      	sub	sp, #32
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	460b      	mov	r3, r1
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125d2:	4b70      	ldr	r3, [pc, #448]	; (8012794 <SDMMC_GetCmdResp1+0x1d0>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a70      	ldr	r2, [pc, #448]	; (8012798 <SDMMC_GetCmdResp1+0x1d4>)
 80125d8:	fba2 2303 	umull	r2, r3, r2, r3
 80125dc:	0a5a      	lsrs	r2, r3, #9
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	fb02 f303 	mul.w	r3, r2, r3
 80125e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	1e5a      	subs	r2, r3, #1
 80125ea:	61fa      	str	r2, [r7, #28]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125f4:	e0c9      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80125fc:	69ba      	ldr	r2, [r7, #24]
 80125fe:	4b67      	ldr	r3, [pc, #412]	; (801279c <SDMMC_GetCmdResp1+0x1d8>)
 8012600:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012602:	2b00      	cmp	r3, #0
 8012604:	d0ef      	beq.n	80125e6 <SDMMC_GetCmdResp1+0x22>
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1ea      	bne.n	80125e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012614:	f003 0304 	and.w	r3, r3, #4
 8012618:	2b00      	cmp	r3, #0
 801261a:	d004      	beq.n	8012626 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2204      	movs	r2, #4
 8012620:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012622:	2304      	movs	r3, #4
 8012624:	e0b1      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	d004      	beq.n	801263c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2201      	movs	r2, #1
 8012636:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012638:	2301      	movs	r3, #1
 801263a:	e0a6      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	4a58      	ldr	r2, [pc, #352]	; (80127a0 <SDMMC_GetCmdResp1+0x1dc>)
 8012640:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012642:	68f8      	ldr	r0, [r7, #12]
 8012644:	f7ff fcf6 	bl	8012034 <SDMMC_GetCommandResponse>
 8012648:	4603      	mov	r3, r0
 801264a:	461a      	mov	r2, r3
 801264c:	7afb      	ldrb	r3, [r7, #11]
 801264e:	4293      	cmp	r3, r2
 8012650:	d001      	beq.n	8012656 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012652:	2301      	movs	r3, #1
 8012654:	e099      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012656:	2100      	movs	r1, #0
 8012658:	68f8      	ldr	r0, [r7, #12]
 801265a:	f7ff fcf8 	bl	801204e <SDMMC_GetResponse>
 801265e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012660:	697a      	ldr	r2, [r7, #20]
 8012662:	4b50      	ldr	r3, [pc, #320]	; (80127a4 <SDMMC_GetCmdResp1+0x1e0>)
 8012664:	4013      	ands	r3, r2
 8012666:	2b00      	cmp	r3, #0
 8012668:	d101      	bne.n	801266e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801266a:	2300      	movs	r3, #0
 801266c:	e08d      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	da02      	bge.n	801267a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012678:	e087      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012680:	2b00      	cmp	r3, #0
 8012682:	d001      	beq.n	8012688 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012684:	2340      	movs	r3, #64	; 0x40
 8012686:	e080      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012692:	2380      	movs	r3, #128	; 0x80
 8012694:	e079      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126a4:	e071      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126b4:	e069      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126c4:	e061      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126d4:	e059      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126e4:	e051      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126f4:	e049      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012704:	e041      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012714:	e039      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801271c:	2b00      	cmp	r3, #0
 801271e:	d002      	beq.n	8012726 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012724:	e031      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012730:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012734:	e029      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012744:	e021      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801274c:	2b00      	cmp	r3, #0
 801274e:	d002      	beq.n	8012756 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012754:	e019      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012764:	e011      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801276c:	2b00      	cmp	r3, #0
 801276e:	d002      	beq.n	8012776 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012770:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012774:	e009      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	f003 0308 	and.w	r3, r3, #8
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012780:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012784:	e001      	b.n	801278a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801278a:	4618      	mov	r0, r3
 801278c:	3720      	adds	r7, #32
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	24000000 	.word	0x24000000
 8012798:	10624dd3 	.word	0x10624dd3
 801279c:	00200045 	.word	0x00200045
 80127a0:	002000c5 	.word	0x002000c5
 80127a4:	fdffe008 	.word	0xfdffe008

080127a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127b0:	4b1f      	ldr	r3, [pc, #124]	; (8012830 <SDMMC_GetCmdResp2+0x88>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4a1f      	ldr	r2, [pc, #124]	; (8012834 <SDMMC_GetCmdResp2+0x8c>)
 80127b6:	fba2 2303 	umull	r2, r3, r2, r3
 80127ba:	0a5b      	lsrs	r3, r3, #9
 80127bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c0:	fb02 f303 	mul.w	r3, r2, r3
 80127c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	1e5a      	subs	r2, r3, #1
 80127ca:	60fa      	str	r2, [r7, #12]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d102      	bne.n	80127d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127d4:	e026      	b.n	8012824 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d0ef      	beq.n	80127c6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d1ea      	bne.n	80127c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f4:	f003 0304 	and.w	r3, r3, #4
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d004      	beq.n	8012806 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2204      	movs	r2, #4
 8012800:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012802:	2304      	movs	r3, #4
 8012804:	e00e      	b.n	8012824 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280a:	f003 0301 	and.w	r3, r3, #1
 801280e:	2b00      	cmp	r3, #0
 8012810:	d004      	beq.n	801281c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2201      	movs	r2, #1
 8012816:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012818:	2301      	movs	r3, #1
 801281a:	e003      	b.n	8012824 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4a06      	ldr	r2, [pc, #24]	; (8012838 <SDMMC_GetCmdResp2+0x90>)
 8012820:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012822:	2300      	movs	r3, #0
}
 8012824:	4618      	mov	r0, r3
 8012826:	3714      	adds	r7, #20
 8012828:	46bd      	mov	sp, r7
 801282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282e:	4770      	bx	lr
 8012830:	24000000 	.word	0x24000000
 8012834:	10624dd3 	.word	0x10624dd3
 8012838:	002000c5 	.word	0x002000c5

0801283c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012844:	4b1a      	ldr	r3, [pc, #104]	; (80128b0 <SDMMC_GetCmdResp3+0x74>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a1a      	ldr	r2, [pc, #104]	; (80128b4 <SDMMC_GetCmdResp3+0x78>)
 801284a:	fba2 2303 	umull	r2, r3, r2, r3
 801284e:	0a5b      	lsrs	r3, r3, #9
 8012850:	f241 3288 	movw	r2, #5000	; 0x1388
 8012854:	fb02 f303 	mul.w	r3, r2, r3
 8012858:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	1e5a      	subs	r2, r3, #1
 801285e:	60fa      	str	r2, [r7, #12]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d102      	bne.n	801286a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012868:	e01b      	b.n	80128a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801286e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012876:	2b00      	cmp	r3, #0
 8012878:	d0ef      	beq.n	801285a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1ea      	bne.n	801285a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012888:	f003 0304 	and.w	r3, r3, #4
 801288c:	2b00      	cmp	r3, #0
 801288e:	d004      	beq.n	801289a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2204      	movs	r2, #4
 8012894:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012896:	2304      	movs	r3, #4
 8012898:	e003      	b.n	80128a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4a06      	ldr	r2, [pc, #24]	; (80128b8 <SDMMC_GetCmdResp3+0x7c>)
 801289e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	24000000 	.word	0x24000000
 80128b4:	10624dd3 	.word	0x10624dd3
 80128b8:	002000c5 	.word	0x002000c5

080128bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b088      	sub	sp, #32
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	460b      	mov	r3, r1
 80128c6:	607a      	str	r2, [r7, #4]
 80128c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128ca:	4b35      	ldr	r3, [pc, #212]	; (80129a0 <SDMMC_GetCmdResp6+0xe4>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a35      	ldr	r2, [pc, #212]	; (80129a4 <SDMMC_GetCmdResp6+0xe8>)
 80128d0:	fba2 2303 	umull	r2, r3, r2, r3
 80128d4:	0a5b      	lsrs	r3, r3, #9
 80128d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80128da:	fb02 f303 	mul.w	r3, r2, r3
 80128de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	1e5a      	subs	r2, r3, #1
 80128e4:	61fa      	str	r2, [r7, #28]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d102      	bne.n	80128f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128ee:	e052      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d0ef      	beq.n	80128e0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012906:	2b00      	cmp	r3, #0
 8012908:	d1ea      	bne.n	80128e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801290e:	f003 0304 	and.w	r3, r3, #4
 8012912:	2b00      	cmp	r3, #0
 8012914:	d004      	beq.n	8012920 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2204      	movs	r2, #4
 801291a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801291c:	2304      	movs	r3, #4
 801291e:	e03a      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012924:	f003 0301 	and.w	r3, r3, #1
 8012928:	2b00      	cmp	r3, #0
 801292a:	d004      	beq.n	8012936 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2201      	movs	r2, #1
 8012930:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012932:	2301      	movs	r3, #1
 8012934:	e02f      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012936:	68f8      	ldr	r0, [r7, #12]
 8012938:	f7ff fb7c 	bl	8012034 <SDMMC_GetCommandResponse>
 801293c:	4603      	mov	r3, r0
 801293e:	461a      	mov	r2, r3
 8012940:	7afb      	ldrb	r3, [r7, #11]
 8012942:	4293      	cmp	r3, r2
 8012944:	d001      	beq.n	801294a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012946:	2301      	movs	r3, #1
 8012948:	e025      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	4a16      	ldr	r2, [pc, #88]	; (80129a8 <SDMMC_GetCmdResp6+0xec>)
 801294e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012950:	2100      	movs	r1, #0
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f7ff fb7b 	bl	801204e <SDMMC_GetResponse>
 8012958:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012960:	2b00      	cmp	r3, #0
 8012962:	d106      	bne.n	8012972 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	0c1b      	lsrs	r3, r3, #16
 8012968:	b29a      	uxth	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801296e:	2300      	movs	r3, #0
 8012970:	e011      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012978:	2b00      	cmp	r3, #0
 801297a:	d002      	beq.n	8012982 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801297c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012980:	e009      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801298c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012990:	e001      	b.n	8012996 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012996:	4618      	mov	r0, r3
 8012998:	3720      	adds	r7, #32
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	24000000 	.word	0x24000000
 80129a4:	10624dd3 	.word	0x10624dd3
 80129a8:	002000c5 	.word	0x002000c5

080129ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b085      	sub	sp, #20
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129b4:	4b22      	ldr	r3, [pc, #136]	; (8012a40 <SDMMC_GetCmdResp7+0x94>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4a22      	ldr	r2, [pc, #136]	; (8012a44 <SDMMC_GetCmdResp7+0x98>)
 80129ba:	fba2 2303 	umull	r2, r3, r2, r3
 80129be:	0a5b      	lsrs	r3, r3, #9
 80129c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129c4:	fb02 f303 	mul.w	r3, r2, r3
 80129c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	1e5a      	subs	r2, r3, #1
 80129ce:	60fa      	str	r2, [r7, #12]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129d8:	e02c      	b.n	8012a34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d0ef      	beq.n	80129ca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1ea      	bne.n	80129ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129f8:	f003 0304 	and.w	r3, r3, #4
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d004      	beq.n	8012a0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2204      	movs	r2, #4
 8012a04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a06:	2304      	movs	r3, #4
 8012a08:	e014      	b.n	8012a34 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a0e:	f003 0301 	and.w	r3, r3, #1
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d004      	beq.n	8012a20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	e009      	b.n	8012a34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d002      	beq.n	8012a32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2240      	movs	r2, #64	; 0x40
 8012a30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a32:	2300      	movs	r3, #0

}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr
 8012a40:	24000000 	.word	0x24000000
 8012a44:	10624dd3 	.word	0x10624dd3

08012a48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a50:	4b11      	ldr	r3, [pc, #68]	; (8012a98 <SDMMC_GetCmdError+0x50>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a11      	ldr	r2, [pc, #68]	; (8012a9c <SDMMC_GetCmdError+0x54>)
 8012a56:	fba2 2303 	umull	r2, r3, r2, r3
 8012a5a:	0a5b      	lsrs	r3, r3, #9
 8012a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a60:	fb02 f303 	mul.w	r3, r2, r3
 8012a64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	1e5a      	subs	r2, r3, #1
 8012a6a:	60fa      	str	r2, [r7, #12]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d102      	bne.n	8012a76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a74:	e009      	b.n	8012a8a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d0f1      	beq.n	8012a66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4a06      	ldr	r2, [pc, #24]	; (8012aa0 <SDMMC_GetCmdError+0x58>)
 8012a86:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a88:	2300      	movs	r3, #0
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3714      	adds	r7, #20
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a94:	4770      	bx	lr
 8012a96:	bf00      	nop
 8012a98:	24000000 	.word	0x24000000
 8012a9c:	10624dd3 	.word	0x10624dd3
 8012aa0:	002000c5 	.word	0x002000c5

08012aa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012aa4:	b084      	sub	sp, #16
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
 8012aae:	f107 001c 	add.w	r0, r7, #28
 8012ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	2b01      	cmp	r3, #1
 8012aba:	d120      	bne.n	8012afe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	68da      	ldr	r2, [r3, #12]
 8012acc:	4b2a      	ldr	r3, [pc, #168]	; (8012b78 <USB_CoreInit+0xd4>)
 8012ace:	4013      	ands	r3, r2
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d105      	bne.n	8012af2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	68db      	ldr	r3, [r3, #12]
 8012aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f001 faf8 	bl	80140e8 <USB_CoreReset>
 8012af8:	4603      	mov	r3, r0
 8012afa:	73fb      	strb	r3, [r7, #15]
 8012afc:	e01a      	b.n	8012b34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f001 faec 	bl	80140e8 <USB_CoreReset>
 8012b10:	4603      	mov	r3, r0
 8012b12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d106      	bne.n	8012b28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	639a      	str	r2, [r3, #56]	; 0x38
 8012b26:	e005      	b.n	8012b34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d116      	bne.n	8012b68 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b48:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <USB_CoreInit+0xd8>)
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	689b      	ldr	r3, [r3, #8]
 8012b54:	f043 0206 	orr.w	r2, r3, #6
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	689b      	ldr	r3, [r3, #8]
 8012b60:	f043 0220 	orr.w	r2, r3, #32
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3710      	adds	r7, #16
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b74:	b004      	add	sp, #16
 8012b76:	4770      	bx	lr
 8012b78:	ffbdffbf 	.word	0xffbdffbf
 8012b7c:	03ee0000 	.word	0x03ee0000

08012b80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b80:	b480      	push	{r7}
 8012b82:	b087      	sub	sp, #28
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	4613      	mov	r3, r2
 8012b8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012b8e:	79fb      	ldrb	r3, [r7, #7]
 8012b90:	2b02      	cmp	r3, #2
 8012b92:	d165      	bne.n	8012c60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	4a41      	ldr	r2, [pc, #260]	; (8012c9c <USB_SetTurnaroundTime+0x11c>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d906      	bls.n	8012baa <USB_SetTurnaroundTime+0x2a>
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	4a40      	ldr	r2, [pc, #256]	; (8012ca0 <USB_SetTurnaroundTime+0x120>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d202      	bcs.n	8012baa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012ba4:	230f      	movs	r3, #15
 8012ba6:	617b      	str	r3, [r7, #20]
 8012ba8:	e062      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	4a3c      	ldr	r2, [pc, #240]	; (8012ca0 <USB_SetTurnaroundTime+0x120>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d306      	bcc.n	8012bc0 <USB_SetTurnaroundTime+0x40>
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	4a3b      	ldr	r2, [pc, #236]	; (8012ca4 <USB_SetTurnaroundTime+0x124>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d202      	bcs.n	8012bc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012bba:	230e      	movs	r3, #14
 8012bbc:	617b      	str	r3, [r7, #20]
 8012bbe:	e057      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	4a38      	ldr	r2, [pc, #224]	; (8012ca4 <USB_SetTurnaroundTime+0x124>)
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d306      	bcc.n	8012bd6 <USB_SetTurnaroundTime+0x56>
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	4a37      	ldr	r2, [pc, #220]	; (8012ca8 <USB_SetTurnaroundTime+0x128>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d202      	bcs.n	8012bd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012bd0:	230d      	movs	r3, #13
 8012bd2:	617b      	str	r3, [r7, #20]
 8012bd4:	e04c      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	4a33      	ldr	r2, [pc, #204]	; (8012ca8 <USB_SetTurnaroundTime+0x128>)
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	d306      	bcc.n	8012bec <USB_SetTurnaroundTime+0x6c>
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	4a32      	ldr	r2, [pc, #200]	; (8012cac <USB_SetTurnaroundTime+0x12c>)
 8012be2:	4293      	cmp	r3, r2
 8012be4:	d802      	bhi.n	8012bec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012be6:	230c      	movs	r3, #12
 8012be8:	617b      	str	r3, [r7, #20]
 8012bea:	e041      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	4a2f      	ldr	r2, [pc, #188]	; (8012cac <USB_SetTurnaroundTime+0x12c>)
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d906      	bls.n	8012c02 <USB_SetTurnaroundTime+0x82>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	4a2e      	ldr	r2, [pc, #184]	; (8012cb0 <USB_SetTurnaroundTime+0x130>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d802      	bhi.n	8012c02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012bfc:	230b      	movs	r3, #11
 8012bfe:	617b      	str	r3, [r7, #20]
 8012c00:	e036      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	4a2a      	ldr	r2, [pc, #168]	; (8012cb0 <USB_SetTurnaroundTime+0x130>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d906      	bls.n	8012c18 <USB_SetTurnaroundTime+0x98>
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	4a29      	ldr	r2, [pc, #164]	; (8012cb4 <USB_SetTurnaroundTime+0x134>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d802      	bhi.n	8012c18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c12:	230a      	movs	r3, #10
 8012c14:	617b      	str	r3, [r7, #20]
 8012c16:	e02b      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	4a26      	ldr	r2, [pc, #152]	; (8012cb4 <USB_SetTurnaroundTime+0x134>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d906      	bls.n	8012c2e <USB_SetTurnaroundTime+0xae>
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	4a25      	ldr	r2, [pc, #148]	; (8012cb8 <USB_SetTurnaroundTime+0x138>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d202      	bcs.n	8012c2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c28:	2309      	movs	r3, #9
 8012c2a:	617b      	str	r3, [r7, #20]
 8012c2c:	e020      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	4a21      	ldr	r2, [pc, #132]	; (8012cb8 <USB_SetTurnaroundTime+0x138>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d306      	bcc.n	8012c44 <USB_SetTurnaroundTime+0xc4>
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	4a20      	ldr	r2, [pc, #128]	; (8012cbc <USB_SetTurnaroundTime+0x13c>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d802      	bhi.n	8012c44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c3e:	2308      	movs	r3, #8
 8012c40:	617b      	str	r3, [r7, #20]
 8012c42:	e015      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	4a1d      	ldr	r2, [pc, #116]	; (8012cbc <USB_SetTurnaroundTime+0x13c>)
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d906      	bls.n	8012c5a <USB_SetTurnaroundTime+0xda>
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	4a1c      	ldr	r2, [pc, #112]	; (8012cc0 <USB_SetTurnaroundTime+0x140>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d202      	bcs.n	8012c5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c54:	2307      	movs	r3, #7
 8012c56:	617b      	str	r3, [r7, #20]
 8012c58:	e00a      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c5a:	2306      	movs	r3, #6
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	e007      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c60:	79fb      	ldrb	r3, [r7, #7]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d102      	bne.n	8012c6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c66:	2309      	movs	r3, #9
 8012c68:	617b      	str	r3, [r7, #20]
 8012c6a:	e001      	b.n	8012c70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c6c:	2309      	movs	r3, #9
 8012c6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	68da      	ldr	r2, [r3, #12]
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	029b      	lsls	r3, r3, #10
 8012c84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c88:	431a      	orrs	r2, r3
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	371c      	adds	r7, #28
 8012c94:	46bd      	mov	sp, r7
 8012c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9a:	4770      	bx	lr
 8012c9c:	00d8acbf 	.word	0x00d8acbf
 8012ca0:	00e4e1c0 	.word	0x00e4e1c0
 8012ca4:	00f42400 	.word	0x00f42400
 8012ca8:	01067380 	.word	0x01067380
 8012cac:	011a499f 	.word	0x011a499f
 8012cb0:	01312cff 	.word	0x01312cff
 8012cb4:	014ca43f 	.word	0x014ca43f
 8012cb8:	016e3600 	.word	0x016e3600
 8012cbc:	01a6ab1f 	.word	0x01a6ab1f
 8012cc0:	01e84800 	.word	0x01e84800

08012cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	f043 0201 	orr.w	r2, r3, #1
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cd8:	2300      	movs	r3, #0
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	370c      	adds	r7, #12
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce4:	4770      	bx	lr

08012ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	f023 0201 	bic.w	r2, r3, #1
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	460b      	mov	r3, r1
 8012d12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d14:	2300      	movs	r3, #0
 8012d16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d24:	78fb      	ldrb	r3, [r7, #3]
 8012d26:	2b01      	cmp	r3, #1
 8012d28:	d115      	bne.n	8012d56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d36:	2001      	movs	r0, #1
 8012d38:	f7f0 fea6 	bl	8003a88 <HAL_Delay>
      ms++;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f001 f93f 	bl	8013fc6 <USB_GetMode>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d01e      	beq.n	8012d8c <USB_SetCurrentMode+0x84>
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2b31      	cmp	r3, #49	; 0x31
 8012d52:	d9f0      	bls.n	8012d36 <USB_SetCurrentMode+0x2e>
 8012d54:	e01a      	b.n	8012d8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d56:	78fb      	ldrb	r3, [r7, #3]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d115      	bne.n	8012d88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d68:	2001      	movs	r0, #1
 8012d6a:	f7f0 fe8d 	bl	8003a88 <HAL_Delay>
      ms++;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	3301      	adds	r3, #1
 8012d72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f001 f926 	bl	8013fc6 <USB_GetMode>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d005      	beq.n	8012d8c <USB_SetCurrentMode+0x84>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b31      	cmp	r3, #49	; 0x31
 8012d84:	d9f0      	bls.n	8012d68 <USB_SetCurrentMode+0x60>
 8012d86:	e001      	b.n	8012d8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e005      	b.n	8012d98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2b32      	cmp	r3, #50	; 0x32
 8012d90:	d101      	bne.n	8012d96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d92:	2301      	movs	r3, #1
 8012d94:	e000      	b.n	8012d98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d96:	2300      	movs	r3, #0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012da0:	b084      	sub	sp, #16
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b086      	sub	sp, #24
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012db2:	2300      	movs	r3, #0
 8012db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012dba:	2300      	movs	r3, #0
 8012dbc:	613b      	str	r3, [r7, #16]
 8012dbe:	e009      	b.n	8012dd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	3340      	adds	r3, #64	; 0x40
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4413      	add	r3, r2
 8012dca:	2200      	movs	r2, #0
 8012dcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	613b      	str	r3, [r7, #16]
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	2b0e      	cmp	r3, #14
 8012dd8:	d9f2      	bls.n	8012dc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d11c      	bne.n	8012e1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012dee:	f043 0302 	orr.w	r3, r3, #2
 8012df2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012df8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	601a      	str	r2, [r3, #0]
 8012e18:	e005      	b.n	8012e26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	2300      	movs	r3, #0
 8012e30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e38:	4619      	mov	r1, r3
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e40:	461a      	mov	r2, r3
 8012e42:	680b      	ldr	r3, [r1, #0]
 8012e44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d10c      	bne.n	8012e66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d104      	bne.n	8012e5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e52:	2100      	movs	r1, #0
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f000 f965 	bl	8013124 <USB_SetDevSpeed>
 8012e5a:	e008      	b.n	8012e6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e5c:	2101      	movs	r1, #1
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f000 f960 	bl	8013124 <USB_SetDevSpeed>
 8012e64:	e003      	b.n	8012e6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e66:	2103      	movs	r1, #3
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f000 f95b 	bl	8013124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e6e:	2110      	movs	r1, #16
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 f8f3 	bl	801305c <USB_FlushTxFifo>
 8012e76:	4603      	mov	r3, r0
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 f91f 	bl	80130c4 <USB_FlushRxFifo>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e96:	461a      	mov	r2, r3
 8012e98:	2300      	movs	r3, #0
 8012e9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eae:	461a      	mov	r2, r3
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	613b      	str	r3, [r7, #16]
 8012eb8:	e043      	b.n	8012f42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	015a      	lsls	r2, r3, #5
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ed0:	d118      	bne.n	8012f04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d10a      	bne.n	8012eee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	015a      	lsls	r2, r3, #5
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	4413      	add	r3, r2
 8012ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012eea:	6013      	str	r3, [r2, #0]
 8012eec:	e013      	b.n	8012f16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	015a      	lsls	r2, r3, #5
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012efa:	461a      	mov	r2, r3
 8012efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f00:	6013      	str	r3, [r2, #0]
 8012f02:	e008      	b.n	8012f16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	015a      	lsls	r2, r3, #5
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f10:	461a      	mov	r2, r3
 8012f12:	2300      	movs	r3, #0
 8012f14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	015a      	lsls	r2, r3, #5
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f22:	461a      	mov	r2, r3
 8012f24:	2300      	movs	r3, #0
 8012f26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	015a      	lsls	r2, r3, #5
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	4413      	add	r3, r2
 8012f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f34:	461a      	mov	r2, r3
 8012f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	613b      	str	r3, [r7, #16]
 8012f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f44:	693a      	ldr	r2, [r7, #16]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d3b7      	bcc.n	8012eba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	613b      	str	r3, [r7, #16]
 8012f4e:	e043      	b.n	8012fd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	015a      	lsls	r2, r3, #5
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4413      	add	r3, r2
 8012f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f66:	d118      	bne.n	8012f9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d10a      	bne.n	8012f84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	015a      	lsls	r2, r3, #5
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	4413      	add	r3, r2
 8012f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f80:	6013      	str	r3, [r2, #0]
 8012f82:	e013      	b.n	8012fac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	015a      	lsls	r2, r3, #5
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	4413      	add	r3, r2
 8012f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f90:	461a      	mov	r2, r3
 8012f92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f96:	6013      	str	r3, [r2, #0]
 8012f98:	e008      	b.n	8012fac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	015a      	lsls	r2, r3, #5
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	2300      	movs	r3, #0
 8012faa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	015a      	lsls	r2, r3, #5
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb8:	461a      	mov	r2, r3
 8012fba:	2300      	movs	r3, #0
 8012fbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	015a      	lsls	r2, r3, #5
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fca:	461a      	mov	r2, r3
 8012fcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	613b      	str	r3, [r7, #16]
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	693a      	ldr	r2, [r7, #16]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d3b7      	bcc.n	8012f50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe6:	691b      	ldr	r3, [r3, #16]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013004:	2b00      	cmp	r3, #0
 8013006:	d105      	bne.n	8013014 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	699b      	ldr	r3, [r3, #24]
 801300c:	f043 0210 	orr.w	r2, r3, #16
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	699a      	ldr	r2, [r3, #24]
 8013018:	4b0e      	ldr	r3, [pc, #56]	; (8013054 <USB_DevInit+0x2b4>)
 801301a:	4313      	orrs	r3, r2
 801301c:	687a      	ldr	r2, [r7, #4]
 801301e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013022:	2b00      	cmp	r3, #0
 8013024:	d005      	beq.n	8013032 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	699b      	ldr	r3, [r3, #24]
 801302a:	f043 0208 	orr.w	r2, r3, #8
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013034:	2b01      	cmp	r3, #1
 8013036:	d105      	bne.n	8013044 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	699a      	ldr	r2, [r3, #24]
 801303c:	4b06      	ldr	r3, [pc, #24]	; (8013058 <USB_DevInit+0x2b8>)
 801303e:	4313      	orrs	r3, r2
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013044:	7dfb      	ldrb	r3, [r7, #23]
}
 8013046:	4618      	mov	r0, r3
 8013048:	3718      	adds	r7, #24
 801304a:	46bd      	mov	sp, r7
 801304c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013050:	b004      	add	sp, #16
 8013052:	4770      	bx	lr
 8013054:	803c3800 	.word	0x803c3800
 8013058:	40000004 	.word	0x40000004

0801305c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801305c:	b480      	push	{r7}
 801305e:	b085      	sub	sp, #20
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013066:	2300      	movs	r3, #0
 8013068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	3301      	adds	r3, #1
 801306e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	4a13      	ldr	r2, [pc, #76]	; (80130c0 <USB_FlushTxFifo+0x64>)
 8013074:	4293      	cmp	r3, r2
 8013076:	d901      	bls.n	801307c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013078:	2303      	movs	r3, #3
 801307a:	e01b      	b.n	80130b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	2b00      	cmp	r3, #0
 8013082:	daf2      	bge.n	801306a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013084:	2300      	movs	r3, #0
 8013086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	019b      	lsls	r3, r3, #6
 801308c:	f043 0220 	orr.w	r2, r3, #32
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	3301      	adds	r3, #1
 8013098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	4a08      	ldr	r2, [pc, #32]	; (80130c0 <USB_FlushTxFifo+0x64>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d901      	bls.n	80130a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130a2:	2303      	movs	r3, #3
 80130a4:	e006      	b.n	80130b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	691b      	ldr	r3, [r3, #16]
 80130aa:	f003 0320 	and.w	r3, r3, #32
 80130ae:	2b20      	cmp	r3, #32
 80130b0:	d0f0      	beq.n	8013094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3714      	adds	r7, #20
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr
 80130c0:	00030d40 	.word	0x00030d40

080130c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b085      	sub	sp, #20
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130cc:	2300      	movs	r3, #0
 80130ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	3301      	adds	r3, #1
 80130d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	4a11      	ldr	r2, [pc, #68]	; (8013120 <USB_FlushRxFifo+0x5c>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d901      	bls.n	80130e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130de:	2303      	movs	r3, #3
 80130e0:	e018      	b.n	8013114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	691b      	ldr	r3, [r3, #16]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	daf2      	bge.n	80130d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80130ea:	2300      	movs	r3, #0
 80130ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2210      	movs	r2, #16
 80130f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3301      	adds	r3, #1
 80130f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	4a08      	ldr	r2, [pc, #32]	; (8013120 <USB_FlushRxFifo+0x5c>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d901      	bls.n	8013106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e006      	b.n	8013114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	f003 0310 	and.w	r3, r3, #16
 801310e:	2b10      	cmp	r3, #16
 8013110:	d0f0      	beq.n	80130f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3714      	adds	r7, #20
 8013118:	46bd      	mov	sp, r7
 801311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311e:	4770      	bx	lr
 8013120:	00030d40 	.word	0x00030d40

08013124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013124:	b480      	push	{r7}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	460b      	mov	r3, r1
 801312e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	78fb      	ldrb	r3, [r7, #3]
 801313e:	68f9      	ldr	r1, [r7, #12]
 8013140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013144:	4313      	orrs	r3, r2
 8013146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3714      	adds	r7, #20
 801314e:	46bd      	mov	sp, r7
 8013150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013154:	4770      	bx	lr

08013156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013156:	b480      	push	{r7}
 8013158:	b087      	sub	sp, #28
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	f003 0306 	and.w	r3, r3, #6
 801316e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d102      	bne.n	801317c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013176:	2300      	movs	r3, #0
 8013178:	75fb      	strb	r3, [r7, #23]
 801317a:	e00a      	b.n	8013192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2b02      	cmp	r3, #2
 8013180:	d002      	beq.n	8013188 <USB_GetDevSpeed+0x32>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b06      	cmp	r3, #6
 8013186:	d102      	bne.n	801318e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013188:	2302      	movs	r3, #2
 801318a:	75fb      	strb	r3, [r7, #23]
 801318c:	e001      	b.n	8013192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801318e:	230f      	movs	r3, #15
 8013190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013192:	7dfb      	ldrb	r3, [r7, #23]
}
 8013194:	4618      	mov	r0, r3
 8013196:	371c      	adds	r7, #28
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b085      	sub	sp, #20
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	785b      	ldrb	r3, [r3, #1]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d139      	bne.n	8013230 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131c2:	69da      	ldr	r2, [r3, #28]
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	f003 030f 	and.w	r3, r3, #15
 80131cc:	2101      	movs	r1, #1
 80131ce:	fa01 f303 	lsl.w	r3, r1, r3
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	68f9      	ldr	r1, [r7, #12]
 80131d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131da:	4313      	orrs	r3, r2
 80131dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	015a      	lsls	r2, r3, #5
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	4413      	add	r3, r2
 80131e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d153      	bne.n	801329c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	015a      	lsls	r2, r3, #5
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	4413      	add	r3, r2
 80131fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	689b      	ldr	r3, [r3, #8]
 8013206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	791b      	ldrb	r3, [r3, #4]
 801320e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	059b      	lsls	r3, r3, #22
 8013216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013218:	431a      	orrs	r2, r3
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	0159      	lsls	r1, r3, #5
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	440b      	add	r3, r1
 8013222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013226:	4619      	mov	r1, r3
 8013228:	4b20      	ldr	r3, [pc, #128]	; (80132ac <USB_ActivateEndpoint+0x10c>)
 801322a:	4313      	orrs	r3, r2
 801322c:	600b      	str	r3, [r1, #0]
 801322e:	e035      	b.n	801329c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013236:	69da      	ldr	r2, [r3, #28]
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	f003 030f 	and.w	r3, r3, #15
 8013240:	2101      	movs	r1, #1
 8013242:	fa01 f303 	lsl.w	r3, r1, r3
 8013246:	041b      	lsls	r3, r3, #16
 8013248:	68f9      	ldr	r1, [r7, #12]
 801324a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801324e:	4313      	orrs	r3, r2
 8013250:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	015a      	lsls	r2, r3, #5
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4413      	add	r3, r2
 801325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013264:	2b00      	cmp	r3, #0
 8013266:	d119      	bne.n	801329c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	015a      	lsls	r2, r3, #5
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	4413      	add	r3, r2
 8013270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	689b      	ldr	r3, [r3, #8]
 801327a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	791b      	ldrb	r3, [r3, #4]
 8013282:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013284:	430b      	orrs	r3, r1
 8013286:	431a      	orrs	r2, r3
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	0159      	lsls	r1, r3, #5
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	440b      	add	r3, r1
 8013290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013294:	4619      	mov	r1, r3
 8013296:	4b05      	ldr	r3, [pc, #20]	; (80132ac <USB_ActivateEndpoint+0x10c>)
 8013298:	4313      	orrs	r3, r2
 801329a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	10008000 	.word	0x10008000

080132b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b085      	sub	sp, #20
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	785b      	ldrb	r3, [r3, #1]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d161      	bne.n	8013390 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	015a      	lsls	r2, r3, #5
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	4413      	add	r3, r2
 80132d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132e2:	d11f      	bne.n	8013324 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68ba      	ldr	r2, [r7, #8]
 80132f4:	0151      	lsls	r1, r2, #5
 80132f6:	68fa      	ldr	r2, [r7, #12]
 80132f8:	440a      	add	r2, r1
 80132fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013302:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	68ba      	ldr	r2, [r7, #8]
 8013314:	0151      	lsls	r1, r2, #5
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	440a      	add	r2, r1
 801331a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801331e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801332a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	f003 030f 	and.w	r3, r3, #15
 8013334:	2101      	movs	r1, #1
 8013336:	fa01 f303 	lsl.w	r3, r1, r3
 801333a:	b29b      	uxth	r3, r3
 801333c:	43db      	mvns	r3, r3
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013344:	4013      	ands	r3, r2
 8013346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334e:	69da      	ldr	r2, [r3, #28]
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f003 030f 	and.w	r3, r3, #15
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f303 	lsl.w	r3, r1, r3
 801335e:	b29b      	uxth	r3, r3
 8013360:	43db      	mvns	r3, r3
 8013362:	68f9      	ldr	r1, [r7, #12]
 8013364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013368:	4013      	ands	r3, r2
 801336a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	015a      	lsls	r2, r3, #5
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	4413      	add	r3, r2
 8013374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	0159      	lsls	r1, r3, #5
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	440b      	add	r3, r1
 8013382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013386:	4619      	mov	r1, r3
 8013388:	4b35      	ldr	r3, [pc, #212]	; (8013460 <USB_DeactivateEndpoint+0x1b0>)
 801338a:	4013      	ands	r3, r2
 801338c:	600b      	str	r3, [r1, #0]
 801338e:	e060      	b.n	8013452 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133a6:	d11f      	bne.n	80133e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	015a      	lsls	r2, r3, #5
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	0151      	lsls	r1, r2, #5
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	440a      	add	r2, r1
 80133be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	015a      	lsls	r2, r3, #5
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4413      	add	r3, r2
 80133d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	0151      	lsls	r1, r2, #5
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	440a      	add	r2, r1
 80133de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	f003 030f 	and.w	r3, r3, #15
 80133f8:	2101      	movs	r1, #1
 80133fa:	fa01 f303 	lsl.w	r3, r1, r3
 80133fe:	041b      	lsls	r3, r3, #16
 8013400:	43db      	mvns	r3, r3
 8013402:	68f9      	ldr	r1, [r7, #12]
 8013404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013408:	4013      	ands	r3, r2
 801340a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013412:	69da      	ldr	r2, [r3, #28]
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	f003 030f 	and.w	r3, r3, #15
 801341c:	2101      	movs	r1, #1
 801341e:	fa01 f303 	lsl.w	r3, r1, r3
 8013422:	041b      	lsls	r3, r3, #16
 8013424:	43db      	mvns	r3, r3
 8013426:	68f9      	ldr	r1, [r7, #12]
 8013428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801342c:	4013      	ands	r3, r2
 801342e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	015a      	lsls	r2, r3, #5
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	4413      	add	r3, r2
 8013438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	0159      	lsls	r1, r3, #5
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	440b      	add	r3, r1
 8013446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801344a:	4619      	mov	r1, r3
 801344c:	4b05      	ldr	r3, [pc, #20]	; (8013464 <USB_DeactivateEndpoint+0x1b4>)
 801344e:	4013      	ands	r3, r2
 8013450:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013452:	2300      	movs	r3, #0
}
 8013454:	4618      	mov	r0, r3
 8013456:	3714      	adds	r7, #20
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr
 8013460:	ec337800 	.word	0xec337800
 8013464:	eff37800 	.word	0xeff37800

08013468 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af02      	add	r7, sp, #8
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	4613      	mov	r3, r2
 8013474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	785b      	ldrb	r3, [r3, #1]
 8013484:	2b01      	cmp	r3, #1
 8013486:	f040 8181 	bne.w	801378c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d132      	bne.n	80134f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	015a      	lsls	r2, r3, #5
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	4413      	add	r3, r2
 801349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801349e:	691a      	ldr	r2, [r3, #16]
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	0159      	lsls	r1, r3, #5
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	440b      	add	r3, r1
 80134a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ac:	4619      	mov	r1, r3
 80134ae:	4ba5      	ldr	r3, [pc, #660]	; (8013744 <USB_EPStartXfer+0x2dc>)
 80134b0:	4013      	ands	r3, r2
 80134b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	015a      	lsls	r2, r3, #5
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	4413      	add	r3, r2
 80134bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	69ba      	ldr	r2, [r7, #24]
 80134c4:	0151      	lsls	r1, r2, #5
 80134c6:	69fa      	ldr	r2, [r7, #28]
 80134c8:	440a      	add	r2, r1
 80134ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	015a      	lsls	r2, r3, #5
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	4413      	add	r3, r2
 80134dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e0:	691a      	ldr	r2, [r3, #16]
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	0159      	lsls	r1, r3, #5
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	440b      	add	r3, r1
 80134ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ee:	4619      	mov	r1, r3
 80134f0:	4b95      	ldr	r3, [pc, #596]	; (8013748 <USB_EPStartXfer+0x2e0>)
 80134f2:	4013      	ands	r3, r2
 80134f4:	610b      	str	r3, [r1, #16]
 80134f6:	e092      	b.n	801361e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	015a      	lsls	r2, r3, #5
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	4413      	add	r3, r2
 8013500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013504:	691a      	ldr	r2, [r3, #16]
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	0159      	lsls	r1, r3, #5
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	440b      	add	r3, r1
 801350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013512:	4619      	mov	r1, r3
 8013514:	4b8c      	ldr	r3, [pc, #560]	; (8013748 <USB_EPStartXfer+0x2e0>)
 8013516:	4013      	ands	r3, r2
 8013518:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	015a      	lsls	r2, r3, #5
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	4413      	add	r3, r2
 8013522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013526:	691a      	ldr	r2, [r3, #16]
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	0159      	lsls	r1, r3, #5
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	440b      	add	r3, r1
 8013530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013534:	4619      	mov	r1, r3
 8013536:	4b83      	ldr	r3, [pc, #524]	; (8013744 <USB_EPStartXfer+0x2dc>)
 8013538:	4013      	ands	r3, r2
 801353a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d11a      	bne.n	8013578 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	691a      	ldr	r2, [r3, #16]
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	429a      	cmp	r2, r3
 801354c:	d903      	bls.n	8013556 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	689a      	ldr	r2, [r3, #8]
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	015a      	lsls	r2, r3, #5
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	4413      	add	r3, r2
 801355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013562:	691b      	ldr	r3, [r3, #16]
 8013564:	69ba      	ldr	r2, [r7, #24]
 8013566:	0151      	lsls	r1, r2, #5
 8013568:	69fa      	ldr	r2, [r7, #28]
 801356a:	440a      	add	r2, r1
 801356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013574:	6113      	str	r3, [r2, #16]
 8013576:	e01b      	b.n	80135b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	015a      	lsls	r2, r3, #5
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	4413      	add	r3, r2
 8013580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013584:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	6919      	ldr	r1, [r3, #16]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	440b      	add	r3, r1
 8013590:	1e59      	subs	r1, r3, #1
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	fbb1 f3f3 	udiv	r3, r1, r3
 801359a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801359c:	4b6b      	ldr	r3, [pc, #428]	; (801374c <USB_EPStartXfer+0x2e4>)
 801359e:	400b      	ands	r3, r1
 80135a0:	69b9      	ldr	r1, [r7, #24]
 80135a2:	0148      	lsls	r0, r1, #5
 80135a4:	69f9      	ldr	r1, [r7, #28]
 80135a6:	4401      	add	r1, r0
 80135a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135ac:	4313      	orrs	r3, r2
 80135ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	015a      	lsls	r2, r3, #5
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	4413      	add	r3, r2
 80135b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135bc:	691a      	ldr	r2, [r3, #16]
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	691b      	ldr	r3, [r3, #16]
 80135c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135c6:	69b9      	ldr	r1, [r7, #24]
 80135c8:	0148      	lsls	r0, r1, #5
 80135ca:	69f9      	ldr	r1, [r7, #28]
 80135cc:	4401      	add	r1, r0
 80135ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135d2:	4313      	orrs	r3, r2
 80135d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	791b      	ldrb	r3, [r3, #4]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d11f      	bne.n	801361e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	015a      	lsls	r2, r3, #5
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	0151      	lsls	r1, r2, #5
 80135f0:	69fa      	ldr	r2, [r7, #28]
 80135f2:	440a      	add	r2, r1
 80135f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80135fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	015a      	lsls	r2, r3, #5
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	4413      	add	r3, r2
 8013606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801360a:	691b      	ldr	r3, [r3, #16]
 801360c:	69ba      	ldr	r2, [r7, #24]
 801360e:	0151      	lsls	r1, r2, #5
 8013610:	69fa      	ldr	r2, [r7, #28]
 8013612:	440a      	add	r2, r1
 8013614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801361c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801361e:	79fb      	ldrb	r3, [r7, #7]
 8013620:	2b01      	cmp	r3, #1
 8013622:	d14b      	bne.n	80136bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	69db      	ldr	r3, [r3, #28]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d009      	beq.n	8013640 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	015a      	lsls	r2, r3, #5
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	4413      	add	r3, r2
 8013634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013638:	461a      	mov	r2, r3
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	69db      	ldr	r3, [r3, #28]
 801363e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	791b      	ldrb	r3, [r3, #4]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d128      	bne.n	801369a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801364e:	689b      	ldr	r3, [r3, #8]
 8013650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013654:	2b00      	cmp	r3, #0
 8013656:	d110      	bne.n	801367a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	015a      	lsls	r2, r3, #5
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	4413      	add	r3, r2
 8013660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	69ba      	ldr	r2, [r7, #24]
 8013668:	0151      	lsls	r1, r2, #5
 801366a:	69fa      	ldr	r2, [r7, #28]
 801366c:	440a      	add	r2, r1
 801366e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013676:	6013      	str	r3, [r2, #0]
 8013678:	e00f      	b.n	801369a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	015a      	lsls	r2, r3, #5
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	4413      	add	r3, r2
 8013682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	69ba      	ldr	r2, [r7, #24]
 801368a:	0151      	lsls	r1, r2, #5
 801368c:	69fa      	ldr	r2, [r7, #28]
 801368e:	440a      	add	r2, r1
 8013690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013698:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	015a      	lsls	r2, r3, #5
 801369e:	69fb      	ldr	r3, [r7, #28]
 80136a0:	4413      	add	r3, r2
 80136a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	0151      	lsls	r1, r2, #5
 80136ac:	69fa      	ldr	r2, [r7, #28]
 80136ae:	440a      	add	r2, r1
 80136b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136b8:	6013      	str	r3, [r2, #0]
 80136ba:	e16a      	b.n	8013992 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136bc:	69bb      	ldr	r3, [r7, #24]
 80136be:	015a      	lsls	r2, r3, #5
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	4413      	add	r3, r2
 80136c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	69ba      	ldr	r2, [r7, #24]
 80136cc:	0151      	lsls	r1, r2, #5
 80136ce:	69fa      	ldr	r2, [r7, #28]
 80136d0:	440a      	add	r2, r1
 80136d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	791b      	ldrb	r3, [r3, #4]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d015      	beq.n	8013710 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	691b      	ldr	r3, [r3, #16]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 8152 	beq.w	8013992 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	f003 030f 	and.w	r3, r3, #15
 80136fe:	2101      	movs	r1, #1
 8013700:	fa01 f303 	lsl.w	r3, r1, r3
 8013704:	69f9      	ldr	r1, [r7, #28]
 8013706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801370a:	4313      	orrs	r3, r2
 801370c:	634b      	str	r3, [r1, #52]	; 0x34
 801370e:	e140      	b.n	8013992 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801371c:	2b00      	cmp	r3, #0
 801371e:	d117      	bne.n	8013750 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	015a      	lsls	r2, r3, #5
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	4413      	add	r3, r2
 8013728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	69ba      	ldr	r2, [r7, #24]
 8013730:	0151      	lsls	r1, r2, #5
 8013732:	69fa      	ldr	r2, [r7, #28]
 8013734:	440a      	add	r2, r1
 8013736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801373a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801373e:	6013      	str	r3, [r2, #0]
 8013740:	e016      	b.n	8013770 <USB_EPStartXfer+0x308>
 8013742:	bf00      	nop
 8013744:	e007ffff 	.word	0xe007ffff
 8013748:	fff80000 	.word	0xfff80000
 801374c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	015a      	lsls	r2, r3, #5
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	4413      	add	r3, r2
 8013758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	69ba      	ldr	r2, [r7, #24]
 8013760:	0151      	lsls	r1, r2, #5
 8013762:	69fa      	ldr	r2, [r7, #28]
 8013764:	440a      	add	r2, r1
 8013766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801376e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	68d9      	ldr	r1, [r3, #12]
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	781a      	ldrb	r2, [r3, #0]
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	691b      	ldr	r3, [r3, #16]
 801377c:	b298      	uxth	r0, r3
 801377e:	79fb      	ldrb	r3, [r7, #7]
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	4603      	mov	r3, r0
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f000 f9b9 	bl	8013afc <USB_WritePacket>
 801378a:	e102      	b.n	8013992 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801378c:	69bb      	ldr	r3, [r7, #24]
 801378e:	015a      	lsls	r2, r3, #5
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	4413      	add	r3, r2
 8013794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013798:	691a      	ldr	r2, [r3, #16]
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	0159      	lsls	r1, r3, #5
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	440b      	add	r3, r1
 80137a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a6:	4619      	mov	r1, r3
 80137a8:	4b7c      	ldr	r3, [pc, #496]	; (801399c <USB_EPStartXfer+0x534>)
 80137aa:	4013      	ands	r3, r2
 80137ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	015a      	lsls	r2, r3, #5
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	4413      	add	r3, r2
 80137b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ba:	691a      	ldr	r2, [r3, #16]
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	0159      	lsls	r1, r3, #5
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	440b      	add	r3, r1
 80137c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c8:	4619      	mov	r1, r3
 80137ca:	4b75      	ldr	r3, [pc, #468]	; (80139a0 <USB_EPStartXfer+0x538>)
 80137cc:	4013      	ands	r3, r2
 80137ce:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d12f      	bne.n	8013836 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	691b      	ldr	r3, [r3, #16]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d003      	beq.n	80137e6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	689a      	ldr	r2, [r3, #8]
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	689a      	ldr	r2, [r3, #8]
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	015a      	lsls	r2, r3, #5
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	4413      	add	r3, r2
 80137f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137fa:	691a      	ldr	r2, [r3, #16]
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	6a1b      	ldr	r3, [r3, #32]
 8013800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013804:	69b9      	ldr	r1, [r7, #24]
 8013806:	0148      	lsls	r0, r1, #5
 8013808:	69f9      	ldr	r1, [r7, #28]
 801380a:	4401      	add	r1, r0
 801380c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013810:	4313      	orrs	r3, r2
 8013812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	015a      	lsls	r2, r3, #5
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	4413      	add	r3, r2
 801381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	69ba      	ldr	r2, [r7, #24]
 8013824:	0151      	lsls	r1, r2, #5
 8013826:	69fa      	ldr	r2, [r7, #28]
 8013828:	440a      	add	r2, r1
 801382a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801382e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013832:	6113      	str	r3, [r2, #16]
 8013834:	e05f      	b.n	80138f6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d123      	bne.n	8013886 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	015a      	lsls	r2, r3, #5
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	4413      	add	r3, r2
 8013846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384a:	691a      	ldr	r2, [r3, #16]
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	689b      	ldr	r3, [r3, #8]
 8013850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013854:	69b9      	ldr	r1, [r7, #24]
 8013856:	0148      	lsls	r0, r1, #5
 8013858:	69f9      	ldr	r1, [r7, #28]
 801385a:	4401      	add	r1, r0
 801385c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013860:	4313      	orrs	r3, r2
 8013862:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	015a      	lsls	r2, r3, #5
 8013868:	69fb      	ldr	r3, [r7, #28]
 801386a:	4413      	add	r3, r2
 801386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013870:	691b      	ldr	r3, [r3, #16]
 8013872:	69ba      	ldr	r2, [r7, #24]
 8013874:	0151      	lsls	r1, r2, #5
 8013876:	69fa      	ldr	r2, [r7, #28]
 8013878:	440a      	add	r2, r1
 801387a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801387e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013882:	6113      	str	r3, [r2, #16]
 8013884:	e037      	b.n	80138f6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	691a      	ldr	r2, [r3, #16]
 801388a:	68bb      	ldr	r3, [r7, #8]
 801388c:	689b      	ldr	r3, [r3, #8]
 801388e:	4413      	add	r3, r2
 8013890:	1e5a      	subs	r2, r3, #1
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	fbb2 f3f3 	udiv	r3, r2, r3
 801389a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	8afa      	ldrh	r2, [r7, #22]
 80138a2:	fb03 f202 	mul.w	r2, r3, r2
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	015a      	lsls	r2, r3, #5
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	4413      	add	r3, r2
 80138b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138b6:	691a      	ldr	r2, [r3, #16]
 80138b8:	8afb      	ldrh	r3, [r7, #22]
 80138ba:	04d9      	lsls	r1, r3, #19
 80138bc:	4b39      	ldr	r3, [pc, #228]	; (80139a4 <USB_EPStartXfer+0x53c>)
 80138be:	400b      	ands	r3, r1
 80138c0:	69b9      	ldr	r1, [r7, #24]
 80138c2:	0148      	lsls	r0, r1, #5
 80138c4:	69f9      	ldr	r1, [r7, #28]
 80138c6:	4401      	add	r1, r0
 80138c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138cc:	4313      	orrs	r3, r2
 80138ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	015a      	lsls	r2, r3, #5
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	4413      	add	r3, r2
 80138d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138dc:	691a      	ldr	r2, [r3, #16]
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	6a1b      	ldr	r3, [r3, #32]
 80138e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138e6:	69b9      	ldr	r1, [r7, #24]
 80138e8:	0148      	lsls	r0, r1, #5
 80138ea:	69f9      	ldr	r1, [r7, #28]
 80138ec:	4401      	add	r1, r0
 80138ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138f2:	4313      	orrs	r3, r2
 80138f4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80138f6:	79fb      	ldrb	r3, [r7, #7]
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d10d      	bne.n	8013918 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d009      	beq.n	8013918 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	68d9      	ldr	r1, [r3, #12]
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013914:	460a      	mov	r2, r1
 8013916:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	791b      	ldrb	r3, [r3, #4]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d128      	bne.n	8013972 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013926:	689b      	ldr	r3, [r3, #8]
 8013928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801392c:	2b00      	cmp	r3, #0
 801392e:	d110      	bne.n	8013952 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013930:	69bb      	ldr	r3, [r7, #24]
 8013932:	015a      	lsls	r2, r3, #5
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	4413      	add	r3, r2
 8013938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	69ba      	ldr	r2, [r7, #24]
 8013940:	0151      	lsls	r1, r2, #5
 8013942:	69fa      	ldr	r2, [r7, #28]
 8013944:	440a      	add	r2, r1
 8013946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801394a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	e00f      	b.n	8013972 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	015a      	lsls	r2, r3, #5
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	4413      	add	r3, r2
 801395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	69ba      	ldr	r2, [r7, #24]
 8013962:	0151      	lsls	r1, r2, #5
 8013964:	69fa      	ldr	r2, [r7, #28]
 8013966:	440a      	add	r2, r1
 8013968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013970:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013972:	69bb      	ldr	r3, [r7, #24]
 8013974:	015a      	lsls	r2, r3, #5
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	4413      	add	r3, r2
 801397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	69ba      	ldr	r2, [r7, #24]
 8013982:	0151      	lsls	r1, r2, #5
 8013984:	69fa      	ldr	r2, [r7, #28]
 8013986:	440a      	add	r2, r1
 8013988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801398c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013992:	2300      	movs	r3, #0
}
 8013994:	4618      	mov	r0, r3
 8013996:	3720      	adds	r7, #32
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}
 801399c:	fff80000 	.word	0xfff80000
 80139a0:	e007ffff 	.word	0xe007ffff
 80139a4:	1ff80000 	.word	0x1ff80000

080139a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b087      	sub	sp, #28
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139b2:	2300      	movs	r3, #0
 80139b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139b6:	2300      	movs	r3, #0
 80139b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	785b      	ldrb	r3, [r3, #1]
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d14a      	bne.n	8013a5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	015a      	lsls	r2, r3, #5
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	4413      	add	r3, r2
 80139d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139de:	f040 8086 	bne.w	8013aee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	015a      	lsls	r2, r3, #5
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	4413      	add	r3, r2
 80139ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	683a      	ldr	r2, [r7, #0]
 80139f4:	7812      	ldrb	r2, [r2, #0]
 80139f6:	0151      	lsls	r1, r2, #5
 80139f8:	693a      	ldr	r2, [r7, #16]
 80139fa:	440a      	add	r2, r1
 80139fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	015a      	lsls	r2, r3, #5
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	4413      	add	r3, r2
 8013a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	683a      	ldr	r2, [r7, #0]
 8013a18:	7812      	ldrb	r2, [r2, #0]
 8013a1a:	0151      	lsls	r1, r2, #5
 8013a1c:	693a      	ldr	r2, [r7, #16]
 8013a1e:	440a      	add	r2, r1
 8013a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d902      	bls.n	8013a40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8013a3e:	e056      	b.n	8013aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	015a      	lsls	r2, r3, #5
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	4413      	add	r3, r2
 8013a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a58:	d0e7      	beq.n	8013a2a <USB_EPStopXfer+0x82>
 8013a5a:	e048      	b.n	8013aee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	015a      	lsls	r2, r3, #5
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	4413      	add	r3, r2
 8013a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a74:	d13b      	bne.n	8013aee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	015a      	lsls	r2, r3, #5
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	4413      	add	r3, r2
 8013a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	683a      	ldr	r2, [r7, #0]
 8013a88:	7812      	ldrb	r2, [r2, #0]
 8013a8a:	0151      	lsls	r1, r2, #5
 8013a8c:	693a      	ldr	r2, [r7, #16]
 8013a8e:	440a      	add	r2, r1
 8013a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	015a      	lsls	r2, r3, #5
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	683a      	ldr	r2, [r7, #0]
 8013aac:	7812      	ldrb	r2, [r2, #0]
 8013aae:	0151      	lsls	r1, r2, #5
 8013ab0:	693a      	ldr	r2, [r7, #16]
 8013ab2:	440a      	add	r2, r1
 8013ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013abc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	f242 7210 	movw	r2, #10000	; 0x2710
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d902      	bls.n	8013ad4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013ace:	2301      	movs	r3, #1
 8013ad0:	75fb      	strb	r3, [r7, #23]
          break;
 8013ad2:	e00c      	b.n	8013aee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	015a      	lsls	r2, r3, #5
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	4413      	add	r3, r2
 8013ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013aec:	d0e7      	beq.n	8013abe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	371c      	adds	r7, #28
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr

08013afc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013afc:	b480      	push	{r7}
 8013afe:	b089      	sub	sp, #36	; 0x24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	4611      	mov	r1, r2
 8013b08:	461a      	mov	r2, r3
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	71fb      	strb	r3, [r7, #7]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d123      	bne.n	8013b6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b22:	88bb      	ldrh	r3, [r7, #4]
 8013b24:	3303      	adds	r3, #3
 8013b26:	089b      	lsrs	r3, r3, #2
 8013b28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	61bb      	str	r3, [r7, #24]
 8013b2e:	e018      	b.n	8013b62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b30:	79fb      	ldrb	r3, [r7, #7]
 8013b32:	031a      	lsls	r2, r3, #12
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	4413      	add	r3, r2
 8013b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	3301      	adds	r3, #1
 8013b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	3301      	adds	r3, #1
 8013b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	3301      	adds	r3, #1
 8013b5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	61bb      	str	r3, [r7, #24]
 8013b62:	69ba      	ldr	r2, [r7, #24]
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d3e2      	bcc.n	8013b30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3724      	adds	r7, #36	; 0x24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b08b      	sub	sp, #44	; 0x2c
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	4613      	mov	r3, r2
 8013b84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013b8e:	88fb      	ldrh	r3, [r7, #6]
 8013b90:	089b      	lsrs	r3, r3, #2
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b96:	88fb      	ldrh	r3, [r7, #6]
 8013b98:	f003 0303 	and.w	r3, r3, #3
 8013b9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	623b      	str	r3, [r7, #32]
 8013ba2:	e014      	b.n	8013bce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bae:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb8:	3301      	adds	r3, #1
 8013bba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013bc8:	6a3b      	ldr	r3, [r7, #32]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	623b      	str	r3, [r7, #32]
 8013bce:	6a3a      	ldr	r2, [r7, #32]
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d3e6      	bcc.n	8013ba4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bd6:	8bfb      	ldrh	r3, [r7, #30]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d01e      	beq.n	8013c1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013be6:	461a      	mov	r2, r3
 8013be8:	f107 0310 	add.w	r3, r7, #16
 8013bec:	6812      	ldr	r2, [r2, #0]
 8013bee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013bf0:	693a      	ldr	r2, [r7, #16]
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	00db      	lsls	r3, r3, #3
 8013bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bfc:	b2da      	uxtb	r2, r3
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c00:	701a      	strb	r2, [r3, #0]
      i++;
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	3301      	adds	r3, #1
 8013c06:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c0e:	8bfb      	ldrh	r3, [r7, #30]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c14:	8bfb      	ldrh	r3, [r7, #30]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d1ea      	bne.n	8013bf0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	372c      	adds	r7, #44	; 0x2c
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b085      	sub	sp, #20
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	785b      	ldrb	r3, [r3, #1]
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d12c      	bne.n	8013c9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	015a      	lsls	r2, r3, #5
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	db12      	blt.n	8013c7c <USB_EPSetStall+0x54>
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00f      	beq.n	8013c7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	0151      	lsls	r1, r2, #5
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	440a      	add	r2, r1
 8013c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	015a      	lsls	r2, r3, #5
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	4413      	add	r3, r2
 8013c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	68ba      	ldr	r2, [r7, #8]
 8013c8c:	0151      	lsls	r1, r2, #5
 8013c8e:	68fa      	ldr	r2, [r7, #12]
 8013c90:	440a      	add	r2, r1
 8013c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c9a:	6013      	str	r3, [r2, #0]
 8013c9c:	e02b      	b.n	8013cf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	015a      	lsls	r2, r3, #5
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	db12      	blt.n	8013cd6 <USB_EPSetStall+0xae>
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d00f      	beq.n	8013cd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	015a      	lsls	r2, r3, #5
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	0151      	lsls	r1, r2, #5
 8013cc8:	68fa      	ldr	r2, [r7, #12]
 8013cca:	440a      	add	r2, r1
 8013ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	015a      	lsls	r2, r3, #5
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	4413      	add	r3, r2
 8013cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	0151      	lsls	r1, r2, #5
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	440a      	add	r2, r1
 8013cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cf6:	2300      	movs	r3, #0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3714      	adds	r7, #20
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	785b      	ldrb	r3, [r3, #1]
 8013d1c:	2b01      	cmp	r3, #1
 8013d1e:	d128      	bne.n	8013d72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	015a      	lsls	r2, r3, #5
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	4413      	add	r3, r2
 8013d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	0151      	lsls	r1, r2, #5
 8013d32:	68fa      	ldr	r2, [r7, #12]
 8013d34:	440a      	add	r2, r1
 8013d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	791b      	ldrb	r3, [r3, #4]
 8013d44:	2b03      	cmp	r3, #3
 8013d46:	d003      	beq.n	8013d50 <USB_EPClearStall+0x4c>
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	791b      	ldrb	r3, [r3, #4]
 8013d4c:	2b02      	cmp	r3, #2
 8013d4e:	d138      	bne.n	8013dc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	015a      	lsls	r2, r3, #5
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	4413      	add	r3, r2
 8013d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	68ba      	ldr	r2, [r7, #8]
 8013d60:	0151      	lsls	r1, r2, #5
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	440a      	add	r2, r1
 8013d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d6e:	6013      	str	r3, [r2, #0]
 8013d70:	e027      	b.n	8013dc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	015a      	lsls	r2, r3, #5
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	4413      	add	r3, r2
 8013d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68ba      	ldr	r2, [r7, #8]
 8013d82:	0151      	lsls	r1, r2, #5
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	440a      	add	r2, r1
 8013d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	791b      	ldrb	r3, [r3, #4]
 8013d96:	2b03      	cmp	r3, #3
 8013d98:	d003      	beq.n	8013da2 <USB_EPClearStall+0x9e>
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	791b      	ldrb	r3, [r3, #4]
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d10f      	bne.n	8013dc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	015a      	lsls	r2, r3, #5
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	4413      	add	r3, r2
 8013daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	68ba      	ldr	r2, [r7, #8]
 8013db2:	0151      	lsls	r1, r2, #5
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	440a      	add	r2, r1
 8013db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b085      	sub	sp, #20
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	68fa      	ldr	r2, [r7, #12]
 8013dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013df2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	78fb      	ldrb	r3, [r7, #3]
 8013dfe:	011b      	lsls	r3, r3, #4
 8013e00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e04:	68f9      	ldr	r1, [r7, #12]
 8013e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e0a:	4313      	orrs	r3, r2
 8013e0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3714      	adds	r7, #20
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b085      	sub	sp, #20
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e36:	f023 0303 	bic.w	r3, r3, #3
 8013e3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e4a:	f023 0302 	bic.w	r3, r3, #2
 8013e4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e50:	2300      	movs	r3, #0
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3714      	adds	r7, #20
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e5e:	b480      	push	{r7}
 8013e60:	b085      	sub	sp, #20
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	68fa      	ldr	r2, [r7, #12]
 8013e74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e78:	f023 0303 	bic.w	r3, r3, #3
 8013e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e8c:	f043 0302 	orr.w	r3, r3, #2
 8013e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e92:	2300      	movs	r3, #0
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3714      	adds	r7, #20
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	695b      	ldr	r3, [r3, #20]
 8013eac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	699b      	ldr	r3, [r3, #24]
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3714      	adds	r7, #20
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec4:	4770      	bx	lr

08013ec6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ec6:	b480      	push	{r7}
 8013ec8:	b085      	sub	sp, #20
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ed8:	699b      	ldr	r3, [r3, #24]
 8013eda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ee2:	69db      	ldr	r3, [r3, #28]
 8013ee4:	68ba      	ldr	r2, [r7, #8]
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	0c1b      	lsrs	r3, r3, #16
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3714      	adds	r7, #20
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr

08013efa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013efa:	b480      	push	{r7}
 8013efc:	b085      	sub	sp, #20
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f0c:	699b      	ldr	r3, [r3, #24]
 8013f0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f16:	69db      	ldr	r3, [r3, #28]
 8013f18:	68ba      	ldr	r2, [r7, #8]
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	b29b      	uxth	r3, r3
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3714      	adds	r7, #20
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr

08013f2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f2e:	b480      	push	{r7}
 8013f30:	b085      	sub	sp, #20
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	460b      	mov	r3, r1
 8013f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f3e:	78fb      	ldrb	r3, [r7, #3]
 8013f40:	015a      	lsls	r2, r3, #5
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	4413      	add	r3, r2
 8013f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f54:	695b      	ldr	r3, [r3, #20]
 8013f56:	68ba      	ldr	r2, [r7, #8]
 8013f58:	4013      	ands	r3, r2
 8013f5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f5c:	68bb      	ldr	r3, [r7, #8]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3714      	adds	r7, #20
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr

08013f6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f6a:	b480      	push	{r7}
 8013f6c:	b087      	sub	sp, #28
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
 8013f72:	460b      	mov	r3, r1
 8013f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013f8e:	78fb      	ldrb	r3, [r7, #3]
 8013f90:	f003 030f 	and.w	r3, r3, #15
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	fa22 f303 	lsr.w	r3, r2, r3
 8013f9a:	01db      	lsls	r3, r3, #7
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	693a      	ldr	r2, [r7, #16]
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fa4:	78fb      	ldrb	r3, [r7, #3]
 8013fa6:	015a      	lsls	r2, r3, #5
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	4413      	add	r3, r2
 8013fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb0:	689b      	ldr	r3, [r3, #8]
 8013fb2:	693a      	ldr	r2, [r7, #16]
 8013fb4:	4013      	ands	r3, r2
 8013fb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fb8:	68bb      	ldr	r3, [r7, #8]
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	371c      	adds	r7, #28
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr

08013fc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fc6:	b480      	push	{r7}
 8013fc8:	b083      	sub	sp, #12
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	695b      	ldr	r3, [r3, #20]
 8013fd2:	f003 0301 	and.w	r3, r3, #1
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr
	...

08013fe4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b085      	sub	sp, #20
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffe:	4619      	mov	r1, r3
 8014000:	4b09      	ldr	r3, [pc, #36]	; (8014028 <USB_ActivateSetup+0x44>)
 8014002:	4013      	ands	r3, r2
 8014004:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr
 8014028:	fffff800 	.word	0xfffff800

0801402c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801402c:	b480      	push	{r7}
 801402e:	b087      	sub	sp, #28
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	460b      	mov	r3, r1
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	333c      	adds	r3, #60	; 0x3c
 8014042:	3304      	adds	r3, #4
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	4a26      	ldr	r2, [pc, #152]	; (80140e4 <USB_EP0_OutStart+0xb8>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d90a      	bls.n	8014066 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801405c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014060:	d101      	bne.n	8014066 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014062:	2300      	movs	r3, #0
 8014064:	e037      	b.n	80140d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801406c:	461a      	mov	r2, r3
 801406e:	2300      	movs	r3, #0
 8014070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014078:	691b      	ldr	r3, [r3, #16]
 801407a:	697a      	ldr	r2, [r7, #20]
 801407c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014094:	f043 0318 	orr.w	r3, r3, #24
 8014098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	697a      	ldr	r2, [r7, #20]
 80140a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140ae:	7afb      	ldrb	r3, [r7, #11]
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d10f      	bne.n	80140d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ba:	461a      	mov	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	697a      	ldr	r2, [r7, #20]
 80140ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	371c      	adds	r7, #28
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr
 80140e2:	bf00      	nop
 80140e4:	4f54300a 	.word	0x4f54300a

080140e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80140f0:	2300      	movs	r3, #0
 80140f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3301      	adds	r3, #1
 80140f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	4a13      	ldr	r2, [pc, #76]	; (801414c <USB_CoreReset+0x64>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d901      	bls.n	8014106 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014102:	2303      	movs	r3, #3
 8014104:	e01b      	b.n	801413e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	2b00      	cmp	r3, #0
 801410c:	daf2      	bge.n	80140f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801410e:	2300      	movs	r3, #0
 8014110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	691b      	ldr	r3, [r3, #16]
 8014116:	f043 0201 	orr.w	r2, r3, #1
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	3301      	adds	r3, #1
 8014122:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	4a09      	ldr	r2, [pc, #36]	; (801414c <USB_CoreReset+0x64>)
 8014128:	4293      	cmp	r3, r2
 801412a:	d901      	bls.n	8014130 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801412c:	2303      	movs	r3, #3
 801412e:	e006      	b.n	801413e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	691b      	ldr	r3, [r3, #16]
 8014134:	f003 0301 	and.w	r3, r3, #1
 8014138:	2b01      	cmp	r3, #1
 801413a:	d0f0      	beq.n	801411e <USB_CoreReset+0x36>

  return HAL_OK;
 801413c:	2300      	movs	r3, #0
}
 801413e:	4618      	mov	r0, r3
 8014140:	3714      	adds	r7, #20
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop
 801414c:	00030d40 	.word	0x00030d40

08014150 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014154:	4904      	ldr	r1, [pc, #16]	; (8014168 <MX_FATFS_Init+0x18>)
 8014156:	4805      	ldr	r0, [pc, #20]	; (801416c <MX_FATFS_Init+0x1c>)
 8014158:	f002 fa56 	bl	8016608 <FATFS_LinkDriver>
 801415c:	4603      	mov	r3, r0
 801415e:	461a      	mov	r2, r3
 8014160:	4b03      	ldr	r3, [pc, #12]	; (8014170 <MX_FATFS_Init+0x20>)
 8014162:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014164:	bf00      	nop
 8014166:	bd80      	pop	{r7, pc}
 8014168:	240015d8 	.word	0x240015d8
 801416c:	080185b4 	.word	0x080185b4
 8014170:	240015d4 	.word	0x240015d4

08014174 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801417a:	2300      	movs	r3, #0
 801417c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801417e:	f000 f885 	bl	801428c <BSP_SD_IsDetected>
 8014182:	4603      	mov	r3, r0
 8014184:	2b01      	cmp	r3, #1
 8014186:	d001      	beq.n	801418c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014188:	2302      	movs	r3, #2
 801418a:	e012      	b.n	80141b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801418c:	480b      	ldr	r0, [pc, #44]	; (80141bc <BSP_SD_Init+0x48>)
 801418e:	f7f8 ff41 	bl	800d014 <HAL_SD_Init>
 8014192:	4603      	mov	r3, r0
 8014194:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014196:	79fb      	ldrb	r3, [r7, #7]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d109      	bne.n	80141b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801419c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141a0:	4806      	ldr	r0, [pc, #24]	; (80141bc <BSP_SD_Init+0x48>)
 80141a2:	f7f9 fdf7 	bl	800dd94 <HAL_SD_ConfigWideBusOperation>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d001      	beq.n	80141b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141ac:	2301      	movs	r3, #1
 80141ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141b0:	79fb      	ldrb	r3, [r7, #7]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3708      	adds	r7, #8
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	24000ebc 	.word	0x24000ebc

080141c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141cc:	2300      	movs	r3, #0
 80141ce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	68f9      	ldr	r1, [r7, #12]
 80141d6:	4806      	ldr	r0, [pc, #24]	; (80141f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141d8:	f7f9 f83c 	bl	800d254 <HAL_SD_ReadBlocks_DMA>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d001      	beq.n	80141e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141e2:	2301      	movs	r3, #1
 80141e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3718      	adds	r7, #24
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	24000ebc 	.word	0x24000ebc

080141f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b086      	sub	sp, #24
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014200:	2300      	movs	r3, #0
 8014202:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	68f9      	ldr	r1, [r7, #12]
 801420a:	4806      	ldr	r0, [pc, #24]	; (8014224 <BSP_SD_WriteBlocks_DMA+0x30>)
 801420c:	f7f9 f8ca 	bl	800d3a4 <HAL_SD_WriteBlocks_DMA>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d001      	beq.n	801421a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014216:	2301      	movs	r3, #1
 8014218:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801421a:	7dfb      	ldrb	r3, [r7, #23]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3718      	adds	r7, #24
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	24000ebc 	.word	0x24000ebc

08014228 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801422c:	4805      	ldr	r0, [pc, #20]	; (8014244 <BSP_SD_GetCardState+0x1c>)
 801422e:	f7f9 fec3 	bl	800dfb8 <HAL_SD_GetCardState>
 8014232:	4603      	mov	r3, r0
 8014234:	2b04      	cmp	r3, #4
 8014236:	bf14      	ite	ne
 8014238:	2301      	movne	r3, #1
 801423a:	2300      	moveq	r3, #0
 801423c:	b2db      	uxtb	r3, r3
}
 801423e:	4618      	mov	r0, r3
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	24000ebc 	.word	0x24000ebc

08014248 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014250:	6879      	ldr	r1, [r7, #4]
 8014252:	4803      	ldr	r0, [pc, #12]	; (8014260 <BSP_SD_GetCardInfo+0x18>)
 8014254:	f7f9 fd72 	bl	800dd3c <HAL_SD_GetCardInfo>
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	24000ebc 	.word	0x24000ebc

08014264 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801426c:	f000 f9a0 	bl	80145b0 <BSP_SD_WriteCpltCallback>
}
 8014270:	bf00      	nop
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014280:	f000 f9a2 	bl	80145c8 <BSP_SD_ReadCpltCallback>
}
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014292:	2301      	movs	r3, #1
 8014294:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014296:	f000 f80b 	bl	80142b0 <BSP_PlatformIsDetected>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	d101      	bne.n	80142a4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142a0:	2300      	movs	r3, #0
 80142a2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	b2db      	uxtb	r3, r3
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80142b6:	2301      	movs	r3, #1
 80142b8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80142ba:	2104      	movs	r1, #4
 80142bc:	4806      	ldr	r0, [pc, #24]	; (80142d8 <BSP_PlatformIsDetected+0x28>)
 80142be:	f7f3 fe7d 	bl	8007fbc <HAL_GPIO_ReadPin>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d001      	beq.n	80142cc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142c8:	2300      	movs	r3, #0
 80142ca:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142cc:	79fb      	ldrb	r3, [r7, #7]
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	58020400 	.word	0x58020400

080142dc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80142e4:	f7ef fbc4 	bl	8003a70 <HAL_GetTick>
 80142e8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80142ea:	e006      	b.n	80142fa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142ec:	f7ff ff9c 	bl	8014228 <BSP_SD_GetCardState>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d101      	bne.n	80142fa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80142f6:	2300      	movs	r3, #0
 80142f8:	e009      	b.n	801430e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80142fa:	f7ef fbb9 	bl	8003a70 <HAL_GetTick>
 80142fe:	4602      	mov	r2, r0
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	1ad3      	subs	r3, r2, r3
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	429a      	cmp	r2, r3
 8014308:	d8f0      	bhi.n	80142ec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801430a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801430e:	4618      	mov	r0, r3
 8014310:	3710      	adds	r7, #16
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
	...

08014318 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014322:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <SD_CheckStatus+0x38>)
 8014324:	2201      	movs	r2, #1
 8014326:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014328:	f7ff ff7e 	bl	8014228 <BSP_SD_GetCardState>
 801432c:	4603      	mov	r3, r0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d107      	bne.n	8014342 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014332:	4b07      	ldr	r3, [pc, #28]	; (8014350 <SD_CheckStatus+0x38>)
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	b2db      	uxtb	r3, r3
 8014338:	f023 0301 	bic.w	r3, r3, #1
 801433c:	b2da      	uxtb	r2, r3
 801433e:	4b04      	ldr	r3, [pc, #16]	; (8014350 <SD_CheckStatus+0x38>)
 8014340:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014342:	4b03      	ldr	r3, [pc, #12]	; (8014350 <SD_CheckStatus+0x38>)
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	b2db      	uxtb	r3, r3
}
 8014348:	4618      	mov	r0, r3
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	2400000d 	.word	0x2400000d

08014354 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	4603      	mov	r3, r0
 801435c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801435e:	f7ff ff09 	bl	8014174 <BSP_SD_Init>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d107      	bne.n	8014378 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014368:	79fb      	ldrb	r3, [r7, #7]
 801436a:	4618      	mov	r0, r3
 801436c:	f7ff ffd4 	bl	8014318 <SD_CheckStatus>
 8014370:	4603      	mov	r3, r0
 8014372:	461a      	mov	r2, r3
 8014374:	4b04      	ldr	r3, [pc, #16]	; (8014388 <SD_initialize+0x34>)
 8014376:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014378:	4b03      	ldr	r3, [pc, #12]	; (8014388 <SD_initialize+0x34>)
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	b2db      	uxtb	r3, r3
}
 801437e:	4618      	mov	r0, r3
 8014380:	3708      	adds	r7, #8
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	2400000d 	.word	0x2400000d

0801438c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	4603      	mov	r3, r0
 8014394:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014396:	79fb      	ldrb	r3, [r7, #7]
 8014398:	4618      	mov	r0, r3
 801439a:	f7ff ffbd 	bl	8014318 <SD_CheckStatus>
 801439e:	4603      	mov	r3, r0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b086      	sub	sp, #24
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	60b9      	str	r1, [r7, #8]
 80143b0:	607a      	str	r2, [r7, #4]
 80143b2:	603b      	str	r3, [r7, #0]
 80143b4:	4603      	mov	r3, r0
 80143b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143b8:	2301      	movs	r3, #1
 80143ba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80143c0:	f7ff ff8c 	bl	80142dc <SD_CheckStatusWithTimeout>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	da01      	bge.n	80143ce <SD_read+0x26>
  {
    return res;
 80143ca:	7dfb      	ldrb	r3, [r7, #23]
 80143cc:	e03b      	b.n	8014446 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	6879      	ldr	r1, [r7, #4]
 80143d2:	68b8      	ldr	r0, [r7, #8]
 80143d4:	f7ff fef4 	bl	80141c0 <BSP_SD_ReadBlocks_DMA>
 80143d8:	4603      	mov	r3, r0
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d132      	bne.n	8014444 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143de:	4b1c      	ldr	r3, [pc, #112]	; (8014450 <SD_read+0xa8>)
 80143e0:	2200      	movs	r2, #0
 80143e2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80143e4:	f7ef fb44 	bl	8003a70 <HAL_GetTick>
 80143e8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143ea:	bf00      	nop
 80143ec:	4b18      	ldr	r3, [pc, #96]	; (8014450 <SD_read+0xa8>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d108      	bne.n	8014406 <SD_read+0x5e>
 80143f4:	f7ef fb3c 	bl	8003a70 <HAL_GetTick>
 80143f8:	4602      	mov	r2, r0
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	1ad3      	subs	r3, r2, r3
 80143fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8014402:	4293      	cmp	r3, r2
 8014404:	d9f2      	bls.n	80143ec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014406:	4b12      	ldr	r3, [pc, #72]	; (8014450 <SD_read+0xa8>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d102      	bne.n	8014414 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801440e:	2301      	movs	r3, #1
 8014410:	75fb      	strb	r3, [r7, #23]
 8014412:	e017      	b.n	8014444 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014414:	4b0e      	ldr	r3, [pc, #56]	; (8014450 <SD_read+0xa8>)
 8014416:	2200      	movs	r2, #0
 8014418:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801441a:	f7ef fb29 	bl	8003a70 <HAL_GetTick>
 801441e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014420:	e007      	b.n	8014432 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014422:	f7ff ff01 	bl	8014228 <BSP_SD_GetCardState>
 8014426:	4603      	mov	r3, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	d102      	bne.n	8014432 <SD_read+0x8a>
          {
            res = RES_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014430:	e008      	b.n	8014444 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014432:	f7ef fb1d 	bl	8003a70 <HAL_GetTick>
 8014436:	4602      	mov	r2, r0
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	1ad3      	subs	r3, r2, r3
 801443c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014440:	4293      	cmp	r3, r2
 8014442:	d9ee      	bls.n	8014422 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014444:	7dfb      	ldrb	r3, [r7, #23]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3718      	adds	r7, #24
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	240015e0 	.word	0x240015e0

08014454 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b086      	sub	sp, #24
 8014458:	af00      	add	r7, sp, #0
 801445a:	60b9      	str	r1, [r7, #8]
 801445c:	607a      	str	r2, [r7, #4]
 801445e:	603b      	str	r3, [r7, #0]
 8014460:	4603      	mov	r3, r0
 8014462:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014464:	2301      	movs	r3, #1
 8014466:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014468:	4b24      	ldr	r3, [pc, #144]	; (80144fc <SD_write+0xa8>)
 801446a:	2200      	movs	r2, #0
 801446c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801446e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014472:	f7ff ff33 	bl	80142dc <SD_CheckStatusWithTimeout>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	da01      	bge.n	8014480 <SD_write+0x2c>
  {
    return res;
 801447c:	7dfb      	ldrb	r3, [r7, #23]
 801447e:	e038      	b.n	80144f2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014480:	683a      	ldr	r2, [r7, #0]
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	68b8      	ldr	r0, [r7, #8]
 8014486:	f7ff feb5 	bl	80141f4 <BSP_SD_WriteBlocks_DMA>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d12f      	bne.n	80144f0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014490:	f7ef faee 	bl	8003a70 <HAL_GetTick>
 8014494:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014496:	bf00      	nop
 8014498:	4b18      	ldr	r3, [pc, #96]	; (80144fc <SD_write+0xa8>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d108      	bne.n	80144b2 <SD_write+0x5e>
 80144a0:	f7ef fae6 	bl	8003a70 <HAL_GetTick>
 80144a4:	4602      	mov	r2, r0
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	1ad3      	subs	r3, r2, r3
 80144aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d9f2      	bls.n	8014498 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80144b2:	4b12      	ldr	r3, [pc, #72]	; (80144fc <SD_write+0xa8>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d102      	bne.n	80144c0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80144ba:	2301      	movs	r3, #1
 80144bc:	75fb      	strb	r3, [r7, #23]
 80144be:	e017      	b.n	80144f0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144c0:	4b0e      	ldr	r3, [pc, #56]	; (80144fc <SD_write+0xa8>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144c6:	f7ef fad3 	bl	8003a70 <HAL_GetTick>
 80144ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144cc:	e007      	b.n	80144de <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144ce:	f7ff feab 	bl	8014228 <BSP_SD_GetCardState>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d102      	bne.n	80144de <SD_write+0x8a>
          {
            res = RES_OK;
 80144d8:	2300      	movs	r3, #0
 80144da:	75fb      	strb	r3, [r7, #23]
            break;
 80144dc:	e008      	b.n	80144f0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144de:	f7ef fac7 	bl	8003a70 <HAL_GetTick>
 80144e2:	4602      	mov	r2, r0
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	1ad3      	subs	r3, r2, r3
 80144e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d9ee      	bls.n	80144ce <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	3718      	adds	r7, #24
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	240015dc 	.word	0x240015dc

08014500 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b08c      	sub	sp, #48	; 0x30
 8014504:	af00      	add	r7, sp, #0
 8014506:	4603      	mov	r3, r0
 8014508:	603a      	str	r2, [r7, #0]
 801450a:	71fb      	strb	r3, [r7, #7]
 801450c:	460b      	mov	r3, r1
 801450e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014510:	2301      	movs	r3, #1
 8014512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014516:	4b25      	ldr	r3, [pc, #148]	; (80145ac <SD_ioctl+0xac>)
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	b2db      	uxtb	r3, r3
 801451c:	f003 0301 	and.w	r3, r3, #1
 8014520:	2b00      	cmp	r3, #0
 8014522:	d001      	beq.n	8014528 <SD_ioctl+0x28>
 8014524:	2303      	movs	r3, #3
 8014526:	e03c      	b.n	80145a2 <SD_ioctl+0xa2>

  switch (cmd)
 8014528:	79bb      	ldrb	r3, [r7, #6]
 801452a:	2b03      	cmp	r3, #3
 801452c:	d834      	bhi.n	8014598 <SD_ioctl+0x98>
 801452e:	a201      	add	r2, pc, #4	; (adr r2, 8014534 <SD_ioctl+0x34>)
 8014530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014534:	08014545 	.word	0x08014545
 8014538:	0801454d 	.word	0x0801454d
 801453c:	08014565 	.word	0x08014565
 8014540:	0801457f 	.word	0x0801457f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014544:	2300      	movs	r3, #0
 8014546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801454a:	e028      	b.n	801459e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801454c:	f107 0308 	add.w	r3, r7, #8
 8014550:	4618      	mov	r0, r3
 8014552:	f7ff fe79 	bl	8014248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014556:	6a3a      	ldr	r2, [r7, #32]
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801455c:	2300      	movs	r3, #0
 801455e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014562:	e01c      	b.n	801459e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014564:	f107 0308 	add.w	r3, r7, #8
 8014568:	4618      	mov	r0, r3
 801456a:	f7ff fe6d 	bl	8014248 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014570:	b29a      	uxth	r2, r3
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014576:	2300      	movs	r3, #0
 8014578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801457c:	e00f      	b.n	801459e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801457e:	f107 0308 	add.w	r3, r7, #8
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff fe60 	bl	8014248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458a:	0a5a      	lsrs	r2, r3, #9
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014590:	2300      	movs	r3, #0
 8014592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014596:	e002      	b.n	801459e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014598:	2304      	movs	r3, #4
 801459a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801459e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3730      	adds	r7, #48	; 0x30
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	2400000d 	.word	0x2400000d

080145b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80145b4:	4b03      	ldr	r3, [pc, #12]	; (80145c4 <BSP_SD_WriteCpltCallback+0x14>)
 80145b6:	2201      	movs	r2, #1
 80145b8:	601a      	str	r2, [r3, #0]
}
 80145ba:	bf00      	nop
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr
 80145c4:	240015dc 	.word	0x240015dc

080145c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145c8:	b480      	push	{r7}
 80145ca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145cc:	4b03      	ldr	r3, [pc, #12]	; (80145dc <BSP_SD_ReadCpltCallback+0x14>)
 80145ce:	2201      	movs	r2, #1
 80145d0:	601a      	str	r2, [r3, #0]
}
 80145d2:	bf00      	nop
 80145d4:	46bd      	mov	sp, r7
 80145d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145da:	4770      	bx	lr
 80145dc:	240015e0 	.word	0x240015e0

080145e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	460b      	mov	r3, r1
 80145ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80145ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80145f0:	f002 fd00 	bl	8016ff4 <USBD_static_malloc>
 80145f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d109      	bne.n	8014610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	32b0      	adds	r2, #176	; 0xb0
 8014606:	2100      	movs	r1, #0
 8014608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801460c:	2302      	movs	r3, #2
 801460e:	e0d4      	b.n	80147ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014610:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014614:	2100      	movs	r1, #0
 8014616:	68f8      	ldr	r0, [r7, #12]
 8014618:	f002 fd7e 	bl	8017118 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	32b0      	adds	r2, #176	; 0xb0
 8014626:	68f9      	ldr	r1, [r7, #12]
 8014628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	32b0      	adds	r2, #176	; 0xb0
 8014636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	7c1b      	ldrb	r3, [r3, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d138      	bne.n	80146ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014648:	4b5e      	ldr	r3, [pc, #376]	; (80147c4 <USBD_CDC_Init+0x1e4>)
 801464a:	7819      	ldrb	r1, [r3, #0]
 801464c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014650:	2202      	movs	r2, #2
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f002 fbab 	bl	8016dae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014658:	4b5a      	ldr	r3, [pc, #360]	; (80147c4 <USBD_CDC_Init+0x1e4>)
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	f003 020f 	and.w	r2, r3, #15
 8014660:	6879      	ldr	r1, [r7, #4]
 8014662:	4613      	mov	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	440b      	add	r3, r1
 801466c:	3324      	adds	r3, #36	; 0x24
 801466e:	2201      	movs	r2, #1
 8014670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014672:	4b55      	ldr	r3, [pc, #340]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 8014674:	7819      	ldrb	r1, [r3, #0]
 8014676:	f44f 7300 	mov.w	r3, #512	; 0x200
 801467a:	2202      	movs	r2, #2
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f002 fb96 	bl	8016dae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014682:	4b51      	ldr	r3, [pc, #324]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	f003 020f 	and.w	r2, r3, #15
 801468a:	6879      	ldr	r1, [r7, #4]
 801468c:	4613      	mov	r3, r2
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	4413      	add	r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	440b      	add	r3, r1
 8014696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801469a:	2201      	movs	r2, #1
 801469c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801469e:	4b4b      	ldr	r3, [pc, #300]	; (80147cc <USBD_CDC_Init+0x1ec>)
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	f003 020f 	and.w	r2, r3, #15
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	440b      	add	r3, r1
 80146b2:	3326      	adds	r3, #38	; 0x26
 80146b4:	2210      	movs	r2, #16
 80146b6:	801a      	strh	r2, [r3, #0]
 80146b8:	e035      	b.n	8014726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146ba:	4b42      	ldr	r3, [pc, #264]	; (80147c4 <USBD_CDC_Init+0x1e4>)
 80146bc:	7819      	ldrb	r1, [r3, #0]
 80146be:	2340      	movs	r3, #64	; 0x40
 80146c0:	2202      	movs	r2, #2
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f002 fb73 	bl	8016dae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146c8:	4b3e      	ldr	r3, [pc, #248]	; (80147c4 <USBD_CDC_Init+0x1e4>)
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	f003 020f 	and.w	r2, r3, #15
 80146d0:	6879      	ldr	r1, [r7, #4]
 80146d2:	4613      	mov	r3, r2
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	4413      	add	r3, r2
 80146d8:	009b      	lsls	r3, r3, #2
 80146da:	440b      	add	r3, r1
 80146dc:	3324      	adds	r3, #36	; 0x24
 80146de:	2201      	movs	r2, #1
 80146e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146e2:	4b39      	ldr	r3, [pc, #228]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 80146e4:	7819      	ldrb	r1, [r3, #0]
 80146e6:	2340      	movs	r3, #64	; 0x40
 80146e8:	2202      	movs	r2, #2
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f002 fb5f 	bl	8016dae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146f0:	4b35      	ldr	r3, [pc, #212]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 020f 	and.w	r2, r3, #15
 80146f8:	6879      	ldr	r1, [r7, #4]
 80146fa:	4613      	mov	r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	4413      	add	r3, r2
 8014700:	009b      	lsls	r3, r3, #2
 8014702:	440b      	add	r3, r1
 8014704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014708:	2201      	movs	r2, #1
 801470a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801470c:	4b2f      	ldr	r3, [pc, #188]	; (80147cc <USBD_CDC_Init+0x1ec>)
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	f003 020f 	and.w	r2, r3, #15
 8014714:	6879      	ldr	r1, [r7, #4]
 8014716:	4613      	mov	r3, r2
 8014718:	009b      	lsls	r3, r3, #2
 801471a:	4413      	add	r3, r2
 801471c:	009b      	lsls	r3, r3, #2
 801471e:	440b      	add	r3, r1
 8014720:	3326      	adds	r3, #38	; 0x26
 8014722:	2210      	movs	r2, #16
 8014724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014726:	4b29      	ldr	r3, [pc, #164]	; (80147cc <USBD_CDC_Init+0x1ec>)
 8014728:	7819      	ldrb	r1, [r3, #0]
 801472a:	2308      	movs	r3, #8
 801472c:	2203      	movs	r2, #3
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f002 fb3d 	bl	8016dae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014734:	4b25      	ldr	r3, [pc, #148]	; (80147cc <USBD_CDC_Init+0x1ec>)
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f003 020f 	and.w	r2, r3, #15
 801473c:	6879      	ldr	r1, [r7, #4]
 801473e:	4613      	mov	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4413      	add	r3, r2
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	440b      	add	r3, r1
 8014748:	3324      	adds	r3, #36	; 0x24
 801474a:	2201      	movs	r2, #1
 801474c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2200      	movs	r2, #0
 8014752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	33b0      	adds	r3, #176	; 0xb0
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	4413      	add	r3, r2
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2200      	movs	r2, #0
 8014776:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014780:	2b00      	cmp	r3, #0
 8014782:	d101      	bne.n	8014788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014784:	2302      	movs	r3, #2
 8014786:	e018      	b.n	80147ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	7c1b      	ldrb	r3, [r3, #16]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d10a      	bne.n	80147a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014790:	4b0d      	ldr	r3, [pc, #52]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 8014792:	7819      	ldrb	r1, [r3, #0]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801479a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f002 fbf4 	bl	8016f8c <USBD_LL_PrepareReceive>
 80147a4:	e008      	b.n	80147b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147a6:	4b08      	ldr	r3, [pc, #32]	; (80147c8 <USBD_CDC_Init+0x1e8>)
 80147a8:	7819      	ldrb	r1, [r3, #0]
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147b0:	2340      	movs	r3, #64	; 0x40
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f002 fbea 	bl	8016f8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80147b8:	2300      	movs	r3, #0
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3710      	adds	r7, #16
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	24000097 	.word	0x24000097
 80147c8:	24000098 	.word	0x24000098
 80147cc:	24000099 	.word	0x24000099

080147d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	460b      	mov	r3, r1
 80147da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147dc:	4b3a      	ldr	r3, [pc, #232]	; (80148c8 <USBD_CDC_DeInit+0xf8>)
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	4619      	mov	r1, r3
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f002 fb09 	bl	8016dfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80147e8:	4b37      	ldr	r3, [pc, #220]	; (80148c8 <USBD_CDC_DeInit+0xf8>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	f003 020f 	and.w	r2, r3, #15
 80147f0:	6879      	ldr	r1, [r7, #4]
 80147f2:	4613      	mov	r3, r2
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	4413      	add	r3, r2
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	440b      	add	r3, r1
 80147fc:	3324      	adds	r3, #36	; 0x24
 80147fe:	2200      	movs	r2, #0
 8014800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014802:	4b32      	ldr	r3, [pc, #200]	; (80148cc <USBD_CDC_DeInit+0xfc>)
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	4619      	mov	r1, r3
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f002 faf6 	bl	8016dfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801480e:	4b2f      	ldr	r3, [pc, #188]	; (80148cc <USBD_CDC_DeInit+0xfc>)
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	f003 020f 	and.w	r2, r3, #15
 8014816:	6879      	ldr	r1, [r7, #4]
 8014818:	4613      	mov	r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	4413      	add	r3, r2
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	440b      	add	r3, r1
 8014822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014826:	2200      	movs	r2, #0
 8014828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801482a:	4b29      	ldr	r3, [pc, #164]	; (80148d0 <USBD_CDC_DeInit+0x100>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	4619      	mov	r1, r3
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f002 fae2 	bl	8016dfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014836:	4b26      	ldr	r3, [pc, #152]	; (80148d0 <USBD_CDC_DeInit+0x100>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	f003 020f 	and.w	r2, r3, #15
 801483e:	6879      	ldr	r1, [r7, #4]
 8014840:	4613      	mov	r3, r2
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	4413      	add	r3, r2
 8014846:	009b      	lsls	r3, r3, #2
 8014848:	440b      	add	r3, r1
 801484a:	3324      	adds	r3, #36	; 0x24
 801484c:	2200      	movs	r2, #0
 801484e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014850:	4b1f      	ldr	r3, [pc, #124]	; (80148d0 <USBD_CDC_DeInit+0x100>)
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	f003 020f 	and.w	r2, r3, #15
 8014858:	6879      	ldr	r1, [r7, #4]
 801485a:	4613      	mov	r3, r2
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	4413      	add	r3, r2
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	440b      	add	r3, r1
 8014864:	3326      	adds	r3, #38	; 0x26
 8014866:	2200      	movs	r2, #0
 8014868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	32b0      	adds	r2, #176	; 0xb0
 8014874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d01f      	beq.n	80148bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	33b0      	adds	r3, #176	; 0xb0
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	4413      	add	r3, r2
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	32b0      	adds	r2, #176	; 0xb0
 801489a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489e:	4618      	mov	r0, r3
 80148a0:	f002 fbb6 	bl	8017010 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	32b0      	adds	r2, #176	; 0xb0
 80148ae:	2100      	movs	r1, #0
 80148b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80148bc:	2300      	movs	r3, #0
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	24000097 	.word	0x24000097
 80148cc:	24000098 	.word	0x24000098
 80148d0:	24000099 	.word	0x24000099

080148d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b086      	sub	sp, #24
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	32b0      	adds	r2, #176	; 0xb0
 80148e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80148ee:	2300      	movs	r3, #0
 80148f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80148f2:	2300      	movs	r3, #0
 80148f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80148f6:	2300      	movs	r3, #0
 80148f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014900:	2303      	movs	r3, #3
 8014902:	e0bf      	b.n	8014a84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801490c:	2b00      	cmp	r3, #0
 801490e:	d050      	beq.n	80149b2 <USBD_CDC_Setup+0xde>
 8014910:	2b20      	cmp	r3, #32
 8014912:	f040 80af 	bne.w	8014a74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	88db      	ldrh	r3, [r3, #6]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d03a      	beq.n	8014994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	b25b      	sxtb	r3, r3
 8014924:	2b00      	cmp	r3, #0
 8014926:	da1b      	bge.n	8014960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	33b0      	adds	r3, #176	; 0xb0
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	4413      	add	r3, r2
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	683a      	ldr	r2, [r7, #0]
 801493c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801493e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	88d2      	ldrh	r2, [r2, #6]
 8014944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	88db      	ldrh	r3, [r3, #6]
 801494a:	2b07      	cmp	r3, #7
 801494c:	bf28      	it	cs
 801494e:	2307      	movcs	r3, #7
 8014950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	89fa      	ldrh	r2, [r7, #14]
 8014956:	4619      	mov	r1, r3
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f001 fd89 	bl	8016470 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801495e:	e090      	b.n	8014a82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	785a      	ldrb	r2, [r3, #1]
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	88db      	ldrh	r3, [r3, #6]
 801496e:	2b3f      	cmp	r3, #63	; 0x3f
 8014970:	d803      	bhi.n	801497a <USBD_CDC_Setup+0xa6>
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	88db      	ldrh	r3, [r3, #6]
 8014976:	b2da      	uxtb	r2, r3
 8014978:	e000      	b.n	801497c <USBD_CDC_Setup+0xa8>
 801497a:	2240      	movs	r2, #64	; 0x40
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014982:	6939      	ldr	r1, [r7, #16]
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801498a:	461a      	mov	r2, r3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f001 fd9b 	bl	80164c8 <USBD_CtlPrepareRx>
      break;
 8014992:	e076      	b.n	8014a82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801499a:	687a      	ldr	r2, [r7, #4]
 801499c:	33b0      	adds	r3, #176	; 0xb0
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	4413      	add	r3, r2
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	689b      	ldr	r3, [r3, #8]
 80149a6:	683a      	ldr	r2, [r7, #0]
 80149a8:	7850      	ldrb	r0, [r2, #1]
 80149aa:	2200      	movs	r2, #0
 80149ac:	6839      	ldr	r1, [r7, #0]
 80149ae:	4798      	blx	r3
      break;
 80149b0:	e067      	b.n	8014a82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	785b      	ldrb	r3, [r3, #1]
 80149b6:	2b0b      	cmp	r3, #11
 80149b8:	d851      	bhi.n	8014a5e <USBD_CDC_Setup+0x18a>
 80149ba:	a201      	add	r2, pc, #4	; (adr r2, 80149c0 <USBD_CDC_Setup+0xec>)
 80149bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149c0:	080149f1 	.word	0x080149f1
 80149c4:	08014a6d 	.word	0x08014a6d
 80149c8:	08014a5f 	.word	0x08014a5f
 80149cc:	08014a5f 	.word	0x08014a5f
 80149d0:	08014a5f 	.word	0x08014a5f
 80149d4:	08014a5f 	.word	0x08014a5f
 80149d8:	08014a5f 	.word	0x08014a5f
 80149dc:	08014a5f 	.word	0x08014a5f
 80149e0:	08014a5f 	.word	0x08014a5f
 80149e4:	08014a5f 	.word	0x08014a5f
 80149e8:	08014a1b 	.word	0x08014a1b
 80149ec:	08014a45 	.word	0x08014a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	d107      	bne.n	8014a0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80149fc:	f107 030a 	add.w	r3, r7, #10
 8014a00:	2202      	movs	r2, #2
 8014a02:	4619      	mov	r1, r3
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f001 fd33 	bl	8016470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a0a:	e032      	b.n	8014a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a0c:	6839      	ldr	r1, [r7, #0]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f001 fcbd 	bl	801638e <USBD_CtlError>
            ret = USBD_FAIL;
 8014a14:	2303      	movs	r3, #3
 8014a16:	75fb      	strb	r3, [r7, #23]
          break;
 8014a18:	e02b      	b.n	8014a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2b03      	cmp	r3, #3
 8014a24:	d107      	bne.n	8014a36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a26:	f107 030d 	add.w	r3, r7, #13
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f001 fd1e 	bl	8016470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a34:	e01d      	b.n	8014a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f001 fca8 	bl	801638e <USBD_CtlError>
            ret = USBD_FAIL;
 8014a3e:	2303      	movs	r3, #3
 8014a40:	75fb      	strb	r3, [r7, #23]
          break;
 8014a42:	e016      	b.n	8014a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	2b03      	cmp	r3, #3
 8014a4e:	d00f      	beq.n	8014a70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a50:	6839      	ldr	r1, [r7, #0]
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f001 fc9b 	bl	801638e <USBD_CtlError>
            ret = USBD_FAIL;
 8014a58:	2303      	movs	r3, #3
 8014a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a5c:	e008      	b.n	8014a70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f001 fc94 	bl	801638e <USBD_CtlError>
          ret = USBD_FAIL;
 8014a66:	2303      	movs	r3, #3
 8014a68:	75fb      	strb	r3, [r7, #23]
          break;
 8014a6a:	e002      	b.n	8014a72 <USBD_CDC_Setup+0x19e>
          break;
 8014a6c:	bf00      	nop
 8014a6e:	e008      	b.n	8014a82 <USBD_CDC_Setup+0x1ae>
          break;
 8014a70:	bf00      	nop
      }
      break;
 8014a72:	e006      	b.n	8014a82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f001 fc89 	bl	801638e <USBD_CtlError>
      ret = USBD_FAIL;
 8014a7c:	2303      	movs	r3, #3
 8014a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8014a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3718      	adds	r7, #24
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	460b      	mov	r3, r1
 8014a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	32b0      	adds	r2, #176	; 0xb0
 8014aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d101      	bne.n	8014ab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ab2:	2303      	movs	r3, #3
 8014ab4:	e065      	b.n	8014b82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	32b0      	adds	r2, #176	; 0xb0
 8014ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ac6:	78fb      	ldrb	r3, [r7, #3]
 8014ac8:	f003 020f 	and.w	r2, r3, #15
 8014acc:	6879      	ldr	r1, [r7, #4]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	009b      	lsls	r3, r3, #2
 8014ad2:	4413      	add	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	440b      	add	r3, r1
 8014ad8:	3318      	adds	r3, #24
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d02f      	beq.n	8014b40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014ae0:	78fb      	ldrb	r3, [r7, #3]
 8014ae2:	f003 020f 	and.w	r2, r3, #15
 8014ae6:	6879      	ldr	r1, [r7, #4]
 8014ae8:	4613      	mov	r3, r2
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	4413      	add	r3, r2
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	440b      	add	r3, r1
 8014af2:	3318      	adds	r3, #24
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	78fb      	ldrb	r3, [r7, #3]
 8014af8:	f003 010f 	and.w	r1, r3, #15
 8014afc:	68f8      	ldr	r0, [r7, #12]
 8014afe:	460b      	mov	r3, r1
 8014b00:	00db      	lsls	r3, r3, #3
 8014b02:	440b      	add	r3, r1
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	4403      	add	r3, r0
 8014b08:	3344      	adds	r3, #68	; 0x44
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b10:	fb01 f303 	mul.w	r3, r1, r3
 8014b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d112      	bne.n	8014b40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b1a:	78fb      	ldrb	r3, [r7, #3]
 8014b1c:	f003 020f 	and.w	r2, r3, #15
 8014b20:	6879      	ldr	r1, [r7, #4]
 8014b22:	4613      	mov	r3, r2
 8014b24:	009b      	lsls	r3, r3, #2
 8014b26:	4413      	add	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	440b      	add	r3, r1
 8014b2c:	3318      	adds	r3, #24
 8014b2e:	2200      	movs	r2, #0
 8014b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b32:	78f9      	ldrb	r1, [r7, #3]
 8014b34:	2300      	movs	r3, #0
 8014b36:	2200      	movs	r2, #0
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f002 fa06 	bl	8016f4a <USBD_LL_Transmit>
 8014b3e:	e01f      	b.n	8014b80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	33b0      	adds	r3, #176	; 0xb0
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	691b      	ldr	r3, [r3, #16]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d010      	beq.n	8014b80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	33b0      	adds	r3, #176	; 0xb0
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	4413      	add	r3, r2
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	691b      	ldr	r3, [r3, #16]
 8014b70:	68ba      	ldr	r2, [r7, #8]
 8014b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b7c:	78fa      	ldrb	r2, [r7, #3]
 8014b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	460b      	mov	r3, r1
 8014b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	32b0      	adds	r2, #176	; 0xb0
 8014ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	32b0      	adds	r2, #176	; 0xb0
 8014bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d101      	bne.n	8014bbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014bb8:	2303      	movs	r3, #3
 8014bba:	e01a      	b.n	8014bf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014bbc:	78fb      	ldrb	r3, [r7, #3]
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f002 fa04 	bl	8016fce <USBD_LL_GetRxDataSize>
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	33b0      	adds	r3, #176	; 0xb0
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	4413      	add	r3, r2
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014bec:	4611      	mov	r1, r2
 8014bee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014bf0:	2300      	movs	r3, #0
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	32b0      	adds	r2, #176	; 0xb0
 8014c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d101      	bne.n	8014c1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c18:	2303      	movs	r3, #3
 8014c1a:	e025      	b.n	8014c68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	33b0      	adds	r3, #176	; 0xb0
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4413      	add	r3, r2
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d01a      	beq.n	8014c66 <USBD_CDC_EP0_RxReady+0x6c>
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c36:	2bff      	cmp	r3, #255	; 0xff
 8014c38:	d015      	beq.n	8014c66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c40:	687a      	ldr	r2, [r7, #4]
 8014c42:	33b0      	adds	r3, #176	; 0xb0
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4413      	add	r3, r2
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	689b      	ldr	r3, [r3, #8]
 8014c4c:	68fa      	ldr	r2, [r7, #12]
 8014c4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c54:	68fa      	ldr	r2, [r7, #12]
 8014c56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c5a:	b292      	uxth	r2, r2
 8014c5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	22ff      	movs	r2, #255	; 0xff
 8014c62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3710      	adds	r7, #16
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b086      	sub	sp, #24
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c78:	2182      	movs	r1, #130	; 0x82
 8014c7a:	4818      	ldr	r0, [pc, #96]	; (8014cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c7c:	f000 fd4f 	bl	801571e <USBD_GetEpDesc>
 8014c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c82:	2101      	movs	r1, #1
 8014c84:	4815      	ldr	r0, [pc, #84]	; (8014cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c86:	f000 fd4a 	bl	801571e <USBD_GetEpDesc>
 8014c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c8c:	2181      	movs	r1, #129	; 0x81
 8014c8e:	4813      	ldr	r0, [pc, #76]	; (8014cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c90:	f000 fd45 	bl	801571e <USBD_GetEpDesc>
 8014c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	2210      	movs	r2, #16
 8014ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d006      	beq.n	8014cb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	2200      	movs	r2, #0
 8014cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cb0:	711a      	strb	r2, [r3, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d006      	beq.n	8014cca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cc4:	711a      	strb	r2, [r3, #4]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2243      	movs	r2, #67	; 0x43
 8014cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cd0:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	3718      	adds	r7, #24
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	24000054 	.word	0x24000054

08014ce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b086      	sub	sp, #24
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ce8:	2182      	movs	r1, #130	; 0x82
 8014cea:	4818      	ldr	r0, [pc, #96]	; (8014d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cec:	f000 fd17 	bl	801571e <USBD_GetEpDesc>
 8014cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014cf2:	2101      	movs	r1, #1
 8014cf4:	4815      	ldr	r0, [pc, #84]	; (8014d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cf6:	f000 fd12 	bl	801571e <USBD_GetEpDesc>
 8014cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cfc:	2181      	movs	r1, #129	; 0x81
 8014cfe:	4813      	ldr	r0, [pc, #76]	; (8014d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d00:	f000 fd0d 	bl	801571e <USBD_GetEpDesc>
 8014d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d002      	beq.n	8014d12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	2210      	movs	r2, #16
 8014d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d006      	beq.n	8014d26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	711a      	strb	r2, [r3, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	f042 0202 	orr.w	r2, r2, #2
 8014d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d006      	beq.n	8014d3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	711a      	strb	r2, [r3, #4]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f042 0202 	orr.w	r2, r2, #2
 8014d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2243      	movs	r2, #67	; 0x43
 8014d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d40:	4b02      	ldr	r3, [pc, #8]	; (8014d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3718      	adds	r7, #24
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	24000054 	.word	0x24000054

08014d50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b086      	sub	sp, #24
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d58:	2182      	movs	r1, #130	; 0x82
 8014d5a:	4818      	ldr	r0, [pc, #96]	; (8014dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d5c:	f000 fcdf 	bl	801571e <USBD_GetEpDesc>
 8014d60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d62:	2101      	movs	r1, #1
 8014d64:	4815      	ldr	r0, [pc, #84]	; (8014dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d66:	f000 fcda 	bl	801571e <USBD_GetEpDesc>
 8014d6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d6c:	2181      	movs	r1, #129	; 0x81
 8014d6e:	4813      	ldr	r0, [pc, #76]	; (8014dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d70:	f000 fcd5 	bl	801571e <USBD_GetEpDesc>
 8014d74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	2210      	movs	r2, #16
 8014d80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d006      	beq.n	8014d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d90:	711a      	strb	r2, [r3, #4]
 8014d92:	2200      	movs	r2, #0
 8014d94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d006      	beq.n	8014daa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014da4:	711a      	strb	r2, [r3, #4]
 8014da6:	2200      	movs	r2, #0
 8014da8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2243      	movs	r2, #67	; 0x43
 8014dae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014db0:	4b02      	ldr	r3, [pc, #8]	; (8014dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	3718      	adds	r7, #24
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	24000054 	.word	0x24000054

08014dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	220a      	movs	r2, #10
 8014dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014dce:	4b03      	ldr	r3, [pc, #12]	; (8014ddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	370c      	adds	r7, #12
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr
 8014ddc:	24000010 	.word	0x24000010

08014de0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d101      	bne.n	8014df4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014df0:	2303      	movs	r3, #3
 8014df2:	e009      	b.n	8014e08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	33b0      	adds	r3, #176	; 0xb0
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4413      	add	r3, r2
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e06:	2300      	movs	r3, #0
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	370c      	adds	r7, #12
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr

08014e14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b087      	sub	sp, #28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	32b0      	adds	r2, #176	; 0xb0
 8014e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d101      	bne.n	8014e3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e36:	2303      	movs	r3, #3
 8014e38:	e008      	b.n	8014e4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	68ba      	ldr	r2, [r7, #8]
 8014e3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e4a:	2300      	movs	r3, #0
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	371c      	adds	r7, #28
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b085      	sub	sp, #20
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	32b0      	adds	r2, #176	; 0xb0
 8014e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d101      	bne.n	8014e7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e78:	2303      	movs	r3, #3
 8014e7a:	e004      	b.n	8014e86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	683a      	ldr	r2, [r7, #0]
 8014e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e84:	2300      	movs	r3, #0
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3714      	adds	r7, #20
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
	...

08014e94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	32b0      	adds	r2, #176	; 0xb0
 8014ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eaa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014eac:	2301      	movs	r3, #1
 8014eae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d101      	bne.n	8014eba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	e025      	b.n	8014f06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d11f      	bne.n	8014f04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ecc:	4b10      	ldr	r3, [pc, #64]	; (8014f10 <USBD_CDC_TransmitPacket+0x7c>)
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	f003 020f 	and.w	r2, r3, #15
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	4613      	mov	r3, r2
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	4413      	add	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4403      	add	r3, r0
 8014ee6:	3318      	adds	r3, #24
 8014ee8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014eea:	4b09      	ldr	r3, [pc, #36]	; (8014f10 <USBD_CDC_TransmitPacket+0x7c>)
 8014eec:	7819      	ldrb	r1, [r3, #0]
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f002 f825 	bl	8016f4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f00:	2300      	movs	r3, #0
 8014f02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	24000097 	.word	0x24000097

08014f14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b084      	sub	sp, #16
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	32b0      	adds	r2, #176	; 0xb0
 8014f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	32b0      	adds	r2, #176	; 0xb0
 8014f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f3e:	2303      	movs	r3, #3
 8014f40:	e018      	b.n	8014f74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	7c1b      	ldrb	r3, [r3, #16]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d10a      	bne.n	8014f60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f4a:	4b0c      	ldr	r3, [pc, #48]	; (8014f7c <USBD_CDC_ReceivePacket+0x68>)
 8014f4c:	7819      	ldrb	r1, [r3, #0]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f58:	6878      	ldr	r0, [r7, #4]
 8014f5a:	f002 f817 	bl	8016f8c <USBD_LL_PrepareReceive>
 8014f5e:	e008      	b.n	8014f72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f60:	4b06      	ldr	r3, [pc, #24]	; (8014f7c <USBD_CDC_ReceivePacket+0x68>)
 8014f62:	7819      	ldrb	r1, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f6a:	2340      	movs	r3, #64	; 0x40
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f002 f80d 	bl	8016f8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f72:	2300      	movs	r3, #0
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	24000098 	.word	0x24000098

08014f80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d101      	bne.n	8014f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f94:	2303      	movs	r3, #3
 8014f96:	e01f      	b.n	8014fd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2200      	movs	r2, #0
 8014fac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d003      	beq.n	8014fbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	68ba      	ldr	r2, [r7, #8]
 8014fba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	79fa      	ldrb	r2, [r7, #7]
 8014fca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f001 fe81 	bl	8016cd4 <USBD_LL_Init>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3718      	adds	r7, #24
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014fea:	2300      	movs	r3, #0
 8014fec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014ff4:	2303      	movs	r3, #3
 8014ff6:	e025      	b.n	8015044 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	683a      	ldr	r2, [r7, #0]
 8014ffc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	32ae      	adds	r2, #174	; 0xae
 801500a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00f      	beq.n	8015034 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	32ae      	adds	r2, #174	; 0xae
 801501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015024:	f107 020e 	add.w	r2, r7, #14
 8015028:	4610      	mov	r0, r2
 801502a:	4798      	blx	r3
 801502c:	4602      	mov	r2, r0
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015042:	2300      	movs	r3, #0
}
 8015044:	4618      	mov	r0, r3
 8015046:	3710      	adds	r7, #16
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f001 fe8f 	bl	8016d78 <USBD_LL_Start>
 801505a:	4603      	mov	r3, r0
}
 801505c:	4618      	mov	r0, r3
 801505e:	3708      	adds	r7, #8
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801506c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801506e:	4618      	mov	r0, r3
 8015070:	370c      	adds	r7, #12
 8015072:	46bd      	mov	sp, r7
 8015074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015078:	4770      	bx	lr

0801507a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b084      	sub	sp, #16
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	460b      	mov	r3, r1
 8015084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015086:	2300      	movs	r3, #0
 8015088:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015090:	2b00      	cmp	r3, #0
 8015092:	d009      	beq.n	80150a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	78fa      	ldrb	r2, [r7, #3]
 801509e:	4611      	mov	r1, r2
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	4798      	blx	r3
 80150a4:	4603      	mov	r3, r0
 80150a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b084      	sub	sp, #16
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	460b      	mov	r3, r1
 80150bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	78fa      	ldrb	r2, [r7, #3]
 80150cc:	4611      	mov	r1, r2
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	4798      	blx	r3
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d001      	beq.n	80150dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150d8:	2303      	movs	r3, #3
 80150da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b084      	sub	sp, #16
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
 80150ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150f6:	6839      	ldr	r1, [r7, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f001 f90e 	bl	801631a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2201      	movs	r2, #1
 8015102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801510c:	461a      	mov	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801511a:	f003 031f 	and.w	r3, r3, #31
 801511e:	2b02      	cmp	r3, #2
 8015120:	d01a      	beq.n	8015158 <USBD_LL_SetupStage+0x72>
 8015122:	2b02      	cmp	r3, #2
 8015124:	d822      	bhi.n	801516c <USBD_LL_SetupStage+0x86>
 8015126:	2b00      	cmp	r3, #0
 8015128:	d002      	beq.n	8015130 <USBD_LL_SetupStage+0x4a>
 801512a:	2b01      	cmp	r3, #1
 801512c:	d00a      	beq.n	8015144 <USBD_LL_SetupStage+0x5e>
 801512e:	e01d      	b.n	801516c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015136:	4619      	mov	r1, r3
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f000 fb65 	bl	8015808 <USBD_StdDevReq>
 801513e:	4603      	mov	r3, r0
 8015140:	73fb      	strb	r3, [r7, #15]
      break;
 8015142:	e020      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801514a:	4619      	mov	r1, r3
 801514c:	6878      	ldr	r0, [r7, #4]
 801514e:	f000 fbcd 	bl	80158ec <USBD_StdItfReq>
 8015152:	4603      	mov	r3, r0
 8015154:	73fb      	strb	r3, [r7, #15]
      break;
 8015156:	e016      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801515e:	4619      	mov	r1, r3
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f000 fc2f 	bl	80159c4 <USBD_StdEPReq>
 8015166:	4603      	mov	r3, r0
 8015168:	73fb      	strb	r3, [r7, #15]
      break;
 801516a:	e00c      	b.n	8015186 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015176:	b2db      	uxtb	r3, r3
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f001 fe5c 	bl	8016e38 <USBD_LL_StallEP>
 8015180:	4603      	mov	r3, r0
 8015182:	73fb      	strb	r3, [r7, #15]
      break;
 8015184:	bf00      	nop
  }

  return ret;
 8015186:	7bfb      	ldrb	r3, [r7, #15]
}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b086      	sub	sp, #24
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	460b      	mov	r3, r1
 801519a:	607a      	str	r2, [r7, #4]
 801519c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801519e:	2300      	movs	r3, #0
 80151a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151a2:	7afb      	ldrb	r3, [r7, #11]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d16e      	bne.n	8015286 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80151ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80151b6:	2b03      	cmp	r3, #3
 80151b8:	f040 8098 	bne.w	80152ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	689a      	ldr	r2, [r3, #8]
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d913      	bls.n	80151f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	689a      	ldr	r2, [r3, #8]
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	1ad2      	subs	r2, r2, r3
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	68da      	ldr	r2, [r3, #12]
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	689b      	ldr	r3, [r3, #8]
 80151de:	4293      	cmp	r3, r2
 80151e0:	bf28      	it	cs
 80151e2:	4613      	movcs	r3, r2
 80151e4:	461a      	mov	r2, r3
 80151e6:	6879      	ldr	r1, [r7, #4]
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f001 f98a 	bl	8016502 <USBD_CtlContinueRx>
 80151ee:	e07d      	b.n	80152ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151f6:	f003 031f 	and.w	r3, r3, #31
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	d014      	beq.n	8015228 <USBD_LL_DataOutStage+0x98>
 80151fe:	2b02      	cmp	r3, #2
 8015200:	d81d      	bhi.n	801523e <USBD_LL_DataOutStage+0xae>
 8015202:	2b00      	cmp	r3, #0
 8015204:	d002      	beq.n	801520c <USBD_LL_DataOutStage+0x7c>
 8015206:	2b01      	cmp	r3, #1
 8015208:	d003      	beq.n	8015212 <USBD_LL_DataOutStage+0x82>
 801520a:	e018      	b.n	801523e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801520c:	2300      	movs	r3, #0
 801520e:	75bb      	strb	r3, [r7, #22]
            break;
 8015210:	e018      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015218:	b2db      	uxtb	r3, r3
 801521a:	4619      	mov	r1, r3
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f000 fa64 	bl	80156ea <USBD_CoreFindIF>
 8015222:	4603      	mov	r3, r0
 8015224:	75bb      	strb	r3, [r7, #22]
            break;
 8015226:	e00d      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801522e:	b2db      	uxtb	r3, r3
 8015230:	4619      	mov	r1, r3
 8015232:	68f8      	ldr	r0, [r7, #12]
 8015234:	f000 fa66 	bl	8015704 <USBD_CoreFindEP>
 8015238:	4603      	mov	r3, r0
 801523a:	75bb      	strb	r3, [r7, #22]
            break;
 801523c:	e002      	b.n	8015244 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801523e:	2300      	movs	r3, #0
 8015240:	75bb      	strb	r3, [r7, #22]
            break;
 8015242:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015244:	7dbb      	ldrb	r3, [r7, #22]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d119      	bne.n	801527e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015250:	b2db      	uxtb	r3, r3
 8015252:	2b03      	cmp	r3, #3
 8015254:	d113      	bne.n	801527e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015256:	7dba      	ldrb	r2, [r7, #22]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	32ae      	adds	r2, #174	; 0xae
 801525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015260:	691b      	ldr	r3, [r3, #16]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d00b      	beq.n	801527e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015266:	7dba      	ldrb	r2, [r7, #22]
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801526e:	7dba      	ldrb	r2, [r7, #22]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	32ae      	adds	r2, #174	; 0xae
 8015274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015278:	691b      	ldr	r3, [r3, #16]
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801527e:	68f8      	ldr	r0, [r7, #12]
 8015280:	f001 f950 	bl	8016524 <USBD_CtlSendStatus>
 8015284:	e032      	b.n	80152ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015286:	7afb      	ldrb	r3, [r7, #11]
 8015288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801528c:	b2db      	uxtb	r3, r3
 801528e:	4619      	mov	r1, r3
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f000 fa37 	bl	8015704 <USBD_CoreFindEP>
 8015296:	4603      	mov	r3, r0
 8015298:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801529a:	7dbb      	ldrb	r3, [r7, #22]
 801529c:	2bff      	cmp	r3, #255	; 0xff
 801529e:	d025      	beq.n	80152ec <USBD_LL_DataOutStage+0x15c>
 80152a0:	7dbb      	ldrb	r3, [r7, #22]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d122      	bne.n	80152ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	2b03      	cmp	r3, #3
 80152b0:	d117      	bne.n	80152e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152b2:	7dba      	ldrb	r2, [r7, #22]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	32ae      	adds	r2, #174	; 0xae
 80152b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152bc:	699b      	ldr	r3, [r3, #24]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d00f      	beq.n	80152e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152c2:	7dba      	ldrb	r2, [r7, #22]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152ca:	7dba      	ldrb	r2, [r7, #22]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	32ae      	adds	r2, #174	; 0xae
 80152d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d4:	699b      	ldr	r3, [r3, #24]
 80152d6:	7afa      	ldrb	r2, [r7, #11]
 80152d8:	4611      	mov	r1, r2
 80152da:	68f8      	ldr	r0, [r7, #12]
 80152dc:	4798      	blx	r3
 80152de:	4603      	mov	r3, r0
 80152e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152e2:	7dfb      	ldrb	r3, [r7, #23]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d001      	beq.n	80152ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152e8:	7dfb      	ldrb	r3, [r7, #23]
 80152ea:	e000      	b.n	80152ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3718      	adds	r7, #24
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80152f6:	b580      	push	{r7, lr}
 80152f8:	b086      	sub	sp, #24
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	60f8      	str	r0, [r7, #12]
 80152fe:	460b      	mov	r3, r1
 8015300:	607a      	str	r2, [r7, #4]
 8015302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015304:	7afb      	ldrb	r3, [r7, #11]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d16f      	bne.n	80153ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	3314      	adds	r3, #20
 801530e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015316:	2b02      	cmp	r3, #2
 8015318:	d15a      	bne.n	80153d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	689a      	ldr	r2, [r3, #8]
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	429a      	cmp	r2, r3
 8015324:	d914      	bls.n	8015350 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	689a      	ldr	r2, [r3, #8]
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	68db      	ldr	r3, [r3, #12]
 801532e:	1ad2      	subs	r2, r2, r3
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	689b      	ldr	r3, [r3, #8]
 8015338:	461a      	mov	r2, r3
 801533a:	6879      	ldr	r1, [r7, #4]
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f001 f8b2 	bl	80164a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015342:	2300      	movs	r3, #0
 8015344:	2200      	movs	r2, #0
 8015346:	2100      	movs	r1, #0
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f001 fe1f 	bl	8016f8c <USBD_LL_PrepareReceive>
 801534e:	e03f      	b.n	80153d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	68da      	ldr	r2, [r3, #12]
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	689b      	ldr	r3, [r3, #8]
 8015358:	429a      	cmp	r2, r3
 801535a:	d11c      	bne.n	8015396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	685a      	ldr	r2, [r3, #4]
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015364:	429a      	cmp	r2, r3
 8015366:	d316      	bcc.n	8015396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	685a      	ldr	r2, [r3, #4]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015372:	429a      	cmp	r2, r3
 8015374:	d20f      	bcs.n	8015396 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015376:	2200      	movs	r2, #0
 8015378:	2100      	movs	r1, #0
 801537a:	68f8      	ldr	r0, [r7, #12]
 801537c:	f001 f893 	bl	80164a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2200      	movs	r2, #0
 8015384:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015388:	2300      	movs	r3, #0
 801538a:	2200      	movs	r2, #0
 801538c:	2100      	movs	r1, #0
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f001 fdfc 	bl	8016f8c <USBD_LL_PrepareReceive>
 8015394:	e01c      	b.n	80153d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801539c:	b2db      	uxtb	r3, r3
 801539e:	2b03      	cmp	r3, #3
 80153a0:	d10f      	bne.n	80153c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d009      	beq.n	80153c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	2200      	movs	r2, #0
 80153b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	68f8      	ldr	r0, [r7, #12]
 80153c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153c2:	2180      	movs	r1, #128	; 0x80
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f001 fd37 	bl	8016e38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f001 f8bd 	bl	801654a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d03a      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	f7ff fe42 	bl	8015064 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80153e8:	e032      	b.n	8015450 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153ea:	7afb      	ldrb	r3, [r7, #11]
 80153ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	4619      	mov	r1, r3
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f000 f985 	bl	8015704 <USBD_CoreFindEP>
 80153fa:	4603      	mov	r3, r0
 80153fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153fe:	7dfb      	ldrb	r3, [r7, #23]
 8015400:	2bff      	cmp	r3, #255	; 0xff
 8015402:	d025      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d122      	bne.n	8015450 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015410:	b2db      	uxtb	r3, r3
 8015412:	2b03      	cmp	r3, #3
 8015414:	d11c      	bne.n	8015450 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015416:	7dfa      	ldrb	r2, [r7, #23]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	32ae      	adds	r2, #174	; 0xae
 801541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015420:	695b      	ldr	r3, [r3, #20]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d014      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015426:	7dfa      	ldrb	r2, [r7, #23]
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801542e:	7dfa      	ldrb	r2, [r7, #23]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	32ae      	adds	r2, #174	; 0xae
 8015434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015438:	695b      	ldr	r3, [r3, #20]
 801543a:	7afa      	ldrb	r2, [r7, #11]
 801543c:	4611      	mov	r1, r2
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	4798      	blx	r3
 8015442:	4603      	mov	r3, r0
 8015444:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015446:	7dbb      	ldrb	r3, [r7, #22]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d001      	beq.n	8015450 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801544c:	7dbb      	ldrb	r3, [r7, #22]
 801544e:	e000      	b.n	8015452 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015450:	2300      	movs	r3, #0
}
 8015452:	4618      	mov	r0, r3
 8015454:	3718      	adds	r7, #24
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b084      	sub	sp, #16
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015462:	2300      	movs	r3, #0
 8015464:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2201      	movs	r2, #1
 801546a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2200      	movs	r2, #0
 8015472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2200      	movs	r2, #0
 801547a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2200      	movs	r2, #0
 8015488:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015492:	2b00      	cmp	r3, #0
 8015494:	d014      	beq.n	80154c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00e      	beq.n	80154c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	687a      	ldr	r2, [r7, #4]
 80154ac:	6852      	ldr	r2, [r2, #4]
 80154ae:	b2d2      	uxtb	r2, r2
 80154b0:	4611      	mov	r1, r2
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	4798      	blx	r3
 80154b6:	4603      	mov	r3, r0
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d001      	beq.n	80154c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154bc:	2303      	movs	r3, #3
 80154be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154c0:	2340      	movs	r3, #64	; 0x40
 80154c2:	2200      	movs	r2, #0
 80154c4:	2100      	movs	r1, #0
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f001 fc71 	bl	8016dae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2201      	movs	r2, #1
 80154d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2240      	movs	r2, #64	; 0x40
 80154d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154dc:	2340      	movs	r3, #64	; 0x40
 80154de:	2200      	movs	r2, #0
 80154e0:	2180      	movs	r1, #128	; 0x80
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f001 fc63 	bl	8016dae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2201      	movs	r2, #1
 80154ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2240      	movs	r2, #64	; 0x40
 80154f2:	621a      	str	r2, [r3, #32]

  return ret;
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}

080154fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80154fe:	b480      	push	{r7}
 8015500:	b083      	sub	sp, #12
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
 8015506:	460b      	mov	r3, r1
 8015508:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	78fa      	ldrb	r2, [r7, #3]
 801550e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015510:	2300      	movs	r3, #0
}
 8015512:	4618      	mov	r0, r3
 8015514:	370c      	adds	r7, #12
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr

0801551e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801551e:	b480      	push	{r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801552c:	b2db      	uxtb	r3, r3
 801552e:	2b04      	cmp	r3, #4
 8015530:	d006      	beq.n	8015540 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015538:	b2da      	uxtb	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2204      	movs	r2, #4
 8015544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015548:	2300      	movs	r3, #0
}
 801554a:	4618      	mov	r0, r3
 801554c:	370c      	adds	r7, #12
 801554e:	46bd      	mov	sp, r7
 8015550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015554:	4770      	bx	lr

08015556 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015556:	b480      	push	{r7}
 8015558:	b083      	sub	sp, #12
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b04      	cmp	r3, #4
 8015568:	d106      	bne.n	8015578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015570:	b2da      	uxtb	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015578:	2300      	movs	r3, #0
}
 801557a:	4618      	mov	r0, r3
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr

08015586 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015594:	b2db      	uxtb	r3, r3
 8015596:	2b03      	cmp	r3, #3
 8015598:	d110      	bne.n	80155bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d00b      	beq.n	80155bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155aa:	69db      	ldr	r3, [r3, #28]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d005      	beq.n	80155bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155b6:	69db      	ldr	r3, [r3, #28]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155bc:	2300      	movs	r3, #0
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3708      	adds	r7, #8
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}

080155c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155c6:	b580      	push	{r7, lr}
 80155c8:	b082      	sub	sp, #8
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	6078      	str	r0, [r7, #4]
 80155ce:	460b      	mov	r3, r1
 80155d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	32ae      	adds	r2, #174	; 0xae
 80155dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d101      	bne.n	80155e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155e4:	2303      	movs	r3, #3
 80155e6:	e01c      	b.n	8015622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b03      	cmp	r3, #3
 80155f2:	d115      	bne.n	8015620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	32ae      	adds	r2, #174	; 0xae
 80155fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015602:	6a1b      	ldr	r3, [r3, #32]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d00b      	beq.n	8015620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	32ae      	adds	r2, #174	; 0xae
 8015612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015616:	6a1b      	ldr	r3, [r3, #32]
 8015618:	78fa      	ldrb	r2, [r7, #3]
 801561a:	4611      	mov	r1, r2
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015620:	2300      	movs	r3, #0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3708      	adds	r7, #8
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b082      	sub	sp, #8
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	460b      	mov	r3, r1
 8015634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	32ae      	adds	r2, #174	; 0xae
 8015640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015648:	2303      	movs	r3, #3
 801564a:	e01c      	b.n	8015686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015652:	b2db      	uxtb	r3, r3
 8015654:	2b03      	cmp	r3, #3
 8015656:	d115      	bne.n	8015684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	32ae      	adds	r2, #174	; 0xae
 8015662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00b      	beq.n	8015684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	32ae      	adds	r2, #174	; 0xae
 8015676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801567c:	78fa      	ldrb	r2, [r7, #3]
 801567e:	4611      	mov	r1, r2
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015684:	2300      	movs	r3, #0
}
 8015686:	4618      	mov	r0, r3
 8015688:	3708      	adds	r7, #8
 801568a:	46bd      	mov	sp, r7
 801568c:	bd80      	pop	{r7, pc}

0801568e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801568e:	b480      	push	{r7}
 8015690:	b083      	sub	sp, #12
 8015692:	af00      	add	r7, sp, #0
 8015694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015696:	2300      	movs	r3, #0
}
 8015698:	4618      	mov	r0, r3
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr

080156a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156ac:	2300      	movs	r3, #0
 80156ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2201      	movs	r2, #1
 80156b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d00e      	beq.n	80156e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	6852      	ldr	r2, [r2, #4]
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	4611      	mov	r1, r2
 80156d2:	6878      	ldr	r0, [r7, #4]
 80156d4:	4798      	blx	r3
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d001      	beq.n	80156e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156dc:	2303      	movs	r3, #3
 80156de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}

080156ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156ea:	b480      	push	{r7}
 80156ec:	b083      	sub	sp, #12
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
 80156f2:	460b      	mov	r3, r1
 80156f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	370c      	adds	r7, #12
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	460b      	mov	r3, r1
 801570e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr

0801571e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801571e:	b580      	push	{r7, lr}
 8015720:	b086      	sub	sp, #24
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
 8015726:	460b      	mov	r3, r1
 8015728:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015732:	2300      	movs	r3, #0
 8015734:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	885b      	ldrh	r3, [r3, #2]
 801573a:	b29a      	uxth	r2, r3
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	b29b      	uxth	r3, r3
 8015742:	429a      	cmp	r2, r3
 8015744:	d920      	bls.n	8015788 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	b29b      	uxth	r3, r3
 801574c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801574e:	e013      	b.n	8015778 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015750:	f107 030a 	add.w	r3, r7, #10
 8015754:	4619      	mov	r1, r3
 8015756:	6978      	ldr	r0, [r7, #20]
 8015758:	f000 f81b 	bl	8015792 <USBD_GetNextDesc>
 801575c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	785b      	ldrb	r3, [r3, #1]
 8015762:	2b05      	cmp	r3, #5
 8015764:	d108      	bne.n	8015778 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	789b      	ldrb	r3, [r3, #2]
 801576e:	78fa      	ldrb	r2, [r7, #3]
 8015770:	429a      	cmp	r2, r3
 8015772:	d008      	beq.n	8015786 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015774:	2300      	movs	r3, #0
 8015776:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	885b      	ldrh	r3, [r3, #2]
 801577c:	b29a      	uxth	r2, r3
 801577e:	897b      	ldrh	r3, [r7, #10]
 8015780:	429a      	cmp	r2, r3
 8015782:	d8e5      	bhi.n	8015750 <USBD_GetEpDesc+0x32>
 8015784:	e000      	b.n	8015788 <USBD_GetEpDesc+0x6a>
          break;
 8015786:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015788:	693b      	ldr	r3, [r7, #16]
}
 801578a:	4618      	mov	r0, r3
 801578c:	3718      	adds	r7, #24
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015792:	b480      	push	{r7}
 8015794:	b085      	sub	sp, #20
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
 801579a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	881a      	ldrh	r2, [r3, #0]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	4413      	add	r3, r2
 80157ac:	b29a      	uxth	r2, r3
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	461a      	mov	r2, r3
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	4413      	add	r3, r2
 80157bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80157be:	68fb      	ldr	r3, [r7, #12]
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3714      	adds	r7, #20
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157cc:	b480      	push	{r7}
 80157ce:	b087      	sub	sp, #28
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	3301      	adds	r3, #1
 80157e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157ea:	8a3b      	ldrh	r3, [r7, #16]
 80157ec:	021b      	lsls	r3, r3, #8
 80157ee:	b21a      	sxth	r2, r3
 80157f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157f4:	4313      	orrs	r3, r2
 80157f6:	b21b      	sxth	r3, r3
 80157f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157fa:	89fb      	ldrh	r3, [r7, #14]
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	371c      	adds	r7, #28
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015812:	2300      	movs	r3, #0
 8015814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	781b      	ldrb	r3, [r3, #0]
 801581a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801581e:	2b40      	cmp	r3, #64	; 0x40
 8015820:	d005      	beq.n	801582e <USBD_StdDevReq+0x26>
 8015822:	2b40      	cmp	r3, #64	; 0x40
 8015824:	d857      	bhi.n	80158d6 <USBD_StdDevReq+0xce>
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00f      	beq.n	801584a <USBD_StdDevReq+0x42>
 801582a:	2b20      	cmp	r3, #32
 801582c:	d153      	bne.n	80158d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	32ae      	adds	r2, #174	; 0xae
 8015838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801583c:	689b      	ldr	r3, [r3, #8]
 801583e:	6839      	ldr	r1, [r7, #0]
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	4798      	blx	r3
 8015844:	4603      	mov	r3, r0
 8015846:	73fb      	strb	r3, [r7, #15]
      break;
 8015848:	e04a      	b.n	80158e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	785b      	ldrb	r3, [r3, #1]
 801584e:	2b09      	cmp	r3, #9
 8015850:	d83b      	bhi.n	80158ca <USBD_StdDevReq+0xc2>
 8015852:	a201      	add	r2, pc, #4	; (adr r2, 8015858 <USBD_StdDevReq+0x50>)
 8015854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015858:	080158ad 	.word	0x080158ad
 801585c:	080158c1 	.word	0x080158c1
 8015860:	080158cb 	.word	0x080158cb
 8015864:	080158b7 	.word	0x080158b7
 8015868:	080158cb 	.word	0x080158cb
 801586c:	0801588b 	.word	0x0801588b
 8015870:	08015881 	.word	0x08015881
 8015874:	080158cb 	.word	0x080158cb
 8015878:	080158a3 	.word	0x080158a3
 801587c:	08015895 	.word	0x08015895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015880:	6839      	ldr	r1, [r7, #0]
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 fa3c 	bl	8015d00 <USBD_GetDescriptor>
          break;
 8015888:	e024      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801588a:	6839      	ldr	r1, [r7, #0]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 fba1 	bl	8015fd4 <USBD_SetAddress>
          break;
 8015892:	e01f      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015894:	6839      	ldr	r1, [r7, #0]
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f000 fbe0 	bl	801605c <USBD_SetConfig>
 801589c:	4603      	mov	r3, r0
 801589e:	73fb      	strb	r3, [r7, #15]
          break;
 80158a0:	e018      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158a2:	6839      	ldr	r1, [r7, #0]
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f000 fc83 	bl	80161b0 <USBD_GetConfig>
          break;
 80158aa:	e013      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158ac:	6839      	ldr	r1, [r7, #0]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 fcb4 	bl	801621c <USBD_GetStatus>
          break;
 80158b4:	e00e      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158b6:	6839      	ldr	r1, [r7, #0]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 fce3 	bl	8016284 <USBD_SetFeature>
          break;
 80158be:	e009      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158c0:	6839      	ldr	r1, [r7, #0]
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f000 fd07 	bl	80162d6 <USBD_ClrFeature>
          break;
 80158c8:	e004      	b.n	80158d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158ca:	6839      	ldr	r1, [r7, #0]
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fd5e 	bl	801638e <USBD_CtlError>
          break;
 80158d2:	bf00      	nop
      }
      break;
 80158d4:	e004      	b.n	80158e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158d6:	6839      	ldr	r1, [r7, #0]
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f000 fd58 	bl	801638e <USBD_CtlError>
      break;
 80158de:	bf00      	nop
  }

  return ret;
 80158e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3710      	adds	r7, #16
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop

080158ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158f6:	2300      	movs	r3, #0
 80158f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015902:	2b40      	cmp	r3, #64	; 0x40
 8015904:	d005      	beq.n	8015912 <USBD_StdItfReq+0x26>
 8015906:	2b40      	cmp	r3, #64	; 0x40
 8015908:	d852      	bhi.n	80159b0 <USBD_StdItfReq+0xc4>
 801590a:	2b00      	cmp	r3, #0
 801590c:	d001      	beq.n	8015912 <USBD_StdItfReq+0x26>
 801590e:	2b20      	cmp	r3, #32
 8015910:	d14e      	bne.n	80159b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015918:	b2db      	uxtb	r3, r3
 801591a:	3b01      	subs	r3, #1
 801591c:	2b02      	cmp	r3, #2
 801591e:	d840      	bhi.n	80159a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	889b      	ldrh	r3, [r3, #4]
 8015924:	b2db      	uxtb	r3, r3
 8015926:	2b01      	cmp	r3, #1
 8015928:	d836      	bhi.n	8015998 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	889b      	ldrh	r3, [r3, #4]
 801592e:	b2db      	uxtb	r3, r3
 8015930:	4619      	mov	r1, r3
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7ff fed9 	bl	80156ea <USBD_CoreFindIF>
 8015938:	4603      	mov	r3, r0
 801593a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801593c:	7bbb      	ldrb	r3, [r7, #14]
 801593e:	2bff      	cmp	r3, #255	; 0xff
 8015940:	d01d      	beq.n	801597e <USBD_StdItfReq+0x92>
 8015942:	7bbb      	ldrb	r3, [r7, #14]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d11a      	bne.n	801597e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015948:	7bba      	ldrb	r2, [r7, #14]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	32ae      	adds	r2, #174	; 0xae
 801594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015952:	689b      	ldr	r3, [r3, #8]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d00f      	beq.n	8015978 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015958:	7bba      	ldrb	r2, [r7, #14]
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015960:	7bba      	ldrb	r2, [r7, #14]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	32ae      	adds	r2, #174	; 0xae
 8015966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801596a:	689b      	ldr	r3, [r3, #8]
 801596c:	6839      	ldr	r1, [r7, #0]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	4798      	blx	r3
 8015972:	4603      	mov	r3, r0
 8015974:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015976:	e004      	b.n	8015982 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015978:	2303      	movs	r3, #3
 801597a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801597c:	e001      	b.n	8015982 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801597e:	2303      	movs	r3, #3
 8015980:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	88db      	ldrh	r3, [r3, #6]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d110      	bne.n	80159ac <USBD_StdItfReq+0xc0>
 801598a:	7bfb      	ldrb	r3, [r7, #15]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d10d      	bne.n	80159ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f000 fdc7 	bl	8016524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015996:	e009      	b.n	80159ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015998:	6839      	ldr	r1, [r7, #0]
 801599a:	6878      	ldr	r0, [r7, #4]
 801599c:	f000 fcf7 	bl	801638e <USBD_CtlError>
          break;
 80159a0:	e004      	b.n	80159ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	f000 fcf2 	bl	801638e <USBD_CtlError>
          break;
 80159aa:	e000      	b.n	80159ae <USBD_StdItfReq+0xc2>
          break;
 80159ac:	bf00      	nop
      }
      break;
 80159ae:	e004      	b.n	80159ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159b0:	6839      	ldr	r1, [r7, #0]
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f000 fceb 	bl	801638e <USBD_CtlError>
      break;
 80159b8:	bf00      	nop
  }

  return ret;
 80159ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159ce:	2300      	movs	r3, #0
 80159d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	889b      	ldrh	r3, [r3, #4]
 80159d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159e0:	2b40      	cmp	r3, #64	; 0x40
 80159e2:	d007      	beq.n	80159f4 <USBD_StdEPReq+0x30>
 80159e4:	2b40      	cmp	r3, #64	; 0x40
 80159e6:	f200 817f 	bhi.w	8015ce8 <USBD_StdEPReq+0x324>
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d02a      	beq.n	8015a44 <USBD_StdEPReq+0x80>
 80159ee:	2b20      	cmp	r3, #32
 80159f0:	f040 817a 	bne.w	8015ce8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
 80159f6:	4619      	mov	r1, r3
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f7ff fe83 	bl	8015704 <USBD_CoreFindEP>
 80159fe:	4603      	mov	r3, r0
 8015a00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a02:	7b7b      	ldrb	r3, [r7, #13]
 8015a04:	2bff      	cmp	r3, #255	; 0xff
 8015a06:	f000 8174 	beq.w	8015cf2 <USBD_StdEPReq+0x32e>
 8015a0a:	7b7b      	ldrb	r3, [r7, #13]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f040 8170 	bne.w	8015cf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a12:	7b7a      	ldrb	r2, [r7, #13]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a1a:	7b7a      	ldrb	r2, [r7, #13]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	32ae      	adds	r2, #174	; 0xae
 8015a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a24:	689b      	ldr	r3, [r3, #8]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	f000 8163 	beq.w	8015cf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a2c:	7b7a      	ldrb	r2, [r7, #13]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	32ae      	adds	r2, #174	; 0xae
 8015a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a36:	689b      	ldr	r3, [r3, #8]
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	4798      	blx	r3
 8015a3e:	4603      	mov	r3, r0
 8015a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a42:	e156      	b.n	8015cf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	785b      	ldrb	r3, [r3, #1]
 8015a48:	2b03      	cmp	r3, #3
 8015a4a:	d008      	beq.n	8015a5e <USBD_StdEPReq+0x9a>
 8015a4c:	2b03      	cmp	r3, #3
 8015a4e:	f300 8145 	bgt.w	8015cdc <USBD_StdEPReq+0x318>
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	f000 809b 	beq.w	8015b8e <USBD_StdEPReq+0x1ca>
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d03c      	beq.n	8015ad6 <USBD_StdEPReq+0x112>
 8015a5c:	e13e      	b.n	8015cdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	2b02      	cmp	r3, #2
 8015a68:	d002      	beq.n	8015a70 <USBD_StdEPReq+0xac>
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	d016      	beq.n	8015a9c <USBD_StdEPReq+0xd8>
 8015a6e:	e02c      	b.n	8015aca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00d      	beq.n	8015a92 <USBD_StdEPReq+0xce>
 8015a76:	7bbb      	ldrb	r3, [r7, #14]
 8015a78:	2b80      	cmp	r3, #128	; 0x80
 8015a7a:	d00a      	beq.n	8015a92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	4619      	mov	r1, r3
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f001 f9d9 	bl	8016e38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a86:	2180      	movs	r1, #128	; 0x80
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f001 f9d5 	bl	8016e38 <USBD_LL_StallEP>
 8015a8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a90:	e020      	b.n	8015ad4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a92:	6839      	ldr	r1, [r7, #0]
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f000 fc7a 	bl	801638e <USBD_CtlError>
              break;
 8015a9a:	e01b      	b.n	8015ad4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	885b      	ldrh	r3, [r3, #2]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10e      	bne.n	8015ac2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015aa4:	7bbb      	ldrb	r3, [r7, #14]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00b      	beq.n	8015ac2 <USBD_StdEPReq+0xfe>
 8015aaa:	7bbb      	ldrb	r3, [r7, #14]
 8015aac:	2b80      	cmp	r3, #128	; 0x80
 8015aae:	d008      	beq.n	8015ac2 <USBD_StdEPReq+0xfe>
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	88db      	ldrh	r3, [r3, #6]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d104      	bne.n	8015ac2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ab8:	7bbb      	ldrb	r3, [r7, #14]
 8015aba:	4619      	mov	r1, r3
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f001 f9bb 	bl	8016e38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f000 fd2e 	bl	8016524 <USBD_CtlSendStatus>

              break;
 8015ac8:	e004      	b.n	8015ad4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f000 fc5e 	bl	801638e <USBD_CtlError>
              break;
 8015ad2:	bf00      	nop
          }
          break;
 8015ad4:	e107      	b.n	8015ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b02      	cmp	r3, #2
 8015ae0:	d002      	beq.n	8015ae8 <USBD_StdEPReq+0x124>
 8015ae2:	2b03      	cmp	r3, #3
 8015ae4:	d016      	beq.n	8015b14 <USBD_StdEPReq+0x150>
 8015ae6:	e04b      	b.n	8015b80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d00d      	beq.n	8015b0a <USBD_StdEPReq+0x146>
 8015aee:	7bbb      	ldrb	r3, [r7, #14]
 8015af0:	2b80      	cmp	r3, #128	; 0x80
 8015af2:	d00a      	beq.n	8015b0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015af4:	7bbb      	ldrb	r3, [r7, #14]
 8015af6:	4619      	mov	r1, r3
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f001 f99d 	bl	8016e38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015afe:	2180      	movs	r1, #128	; 0x80
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 f999 	bl	8016e38 <USBD_LL_StallEP>
 8015b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b08:	e040      	b.n	8015b8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b0a:	6839      	ldr	r1, [r7, #0]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f000 fc3e 	bl	801638e <USBD_CtlError>
              break;
 8015b12:	e03b      	b.n	8015b8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b14:	683b      	ldr	r3, [r7, #0]
 8015b16:	885b      	ldrh	r3, [r3, #2]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d136      	bne.n	8015b8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b1c:	7bbb      	ldrb	r3, [r7, #14]
 8015b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d004      	beq.n	8015b30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b26:	7bbb      	ldrb	r3, [r7, #14]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f001 f9a3 	bl	8016e76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f000 fcf7 	bl	8016524 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b36:	7bbb      	ldrb	r3, [r7, #14]
 8015b38:	4619      	mov	r1, r3
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7ff fde2 	bl	8015704 <USBD_CoreFindEP>
 8015b40:	4603      	mov	r3, r0
 8015b42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b44:	7b7b      	ldrb	r3, [r7, #13]
 8015b46:	2bff      	cmp	r3, #255	; 0xff
 8015b48:	d01f      	beq.n	8015b8a <USBD_StdEPReq+0x1c6>
 8015b4a:	7b7b      	ldrb	r3, [r7, #13]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d11c      	bne.n	8015b8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b50:	7b7a      	ldrb	r2, [r7, #13]
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b58:	7b7a      	ldrb	r2, [r7, #13]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	32ae      	adds	r2, #174	; 0xae
 8015b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d010      	beq.n	8015b8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b68:	7b7a      	ldrb	r2, [r7, #13]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	32ae      	adds	r2, #174	; 0xae
 8015b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b72:	689b      	ldr	r3, [r3, #8]
 8015b74:	6839      	ldr	r1, [r7, #0]
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	4798      	blx	r3
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b7e:	e004      	b.n	8015b8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b80:	6839      	ldr	r1, [r7, #0]
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f000 fc03 	bl	801638e <USBD_CtlError>
              break;
 8015b88:	e000      	b.n	8015b8c <USBD_StdEPReq+0x1c8>
              break;
 8015b8a:	bf00      	nop
          }
          break;
 8015b8c:	e0ab      	b.n	8015ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b94:	b2db      	uxtb	r3, r3
 8015b96:	2b02      	cmp	r3, #2
 8015b98:	d002      	beq.n	8015ba0 <USBD_StdEPReq+0x1dc>
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d032      	beq.n	8015c04 <USBD_StdEPReq+0x240>
 8015b9e:	e097      	b.n	8015cd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ba0:	7bbb      	ldrb	r3, [r7, #14]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d007      	beq.n	8015bb6 <USBD_StdEPReq+0x1f2>
 8015ba6:	7bbb      	ldrb	r3, [r7, #14]
 8015ba8:	2b80      	cmp	r3, #128	; 0x80
 8015baa:	d004      	beq.n	8015bb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015bac:	6839      	ldr	r1, [r7, #0]
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 fbed 	bl	801638e <USBD_CtlError>
                break;
 8015bb4:	e091      	b.n	8015cda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	da0b      	bge.n	8015bd6 <USBD_StdEPReq+0x212>
 8015bbe:	7bbb      	ldrb	r3, [r7, #14]
 8015bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	009b      	lsls	r3, r3, #2
 8015bc8:	4413      	add	r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	3310      	adds	r3, #16
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	3304      	adds	r3, #4
 8015bd4:	e00b      	b.n	8015bee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bd6:	7bbb      	ldrb	r3, [r7, #14]
 8015bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bdc:	4613      	mov	r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4413      	add	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015be8:	687a      	ldr	r2, [r7, #4]
 8015bea:	4413      	add	r3, r2
 8015bec:	3304      	adds	r3, #4
 8015bee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f000 fc37 	bl	8016470 <USBD_CtlSendData>
              break;
 8015c02:	e06a      	b.n	8015cda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	da11      	bge.n	8015c30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c0c:	7bbb      	ldrb	r3, [r7, #14]
 8015c0e:	f003 020f 	and.w	r2, r3, #15
 8015c12:	6879      	ldr	r1, [r7, #4]
 8015c14:	4613      	mov	r3, r2
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	4413      	add	r3, r2
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	440b      	add	r3, r1
 8015c1e:	3324      	adds	r3, #36	; 0x24
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d117      	bne.n	8015c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c26:	6839      	ldr	r1, [r7, #0]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 fbb0 	bl	801638e <USBD_CtlError>
                  break;
 8015c2e:	e054      	b.n	8015cda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c30:	7bbb      	ldrb	r3, [r7, #14]
 8015c32:	f003 020f 	and.w	r2, r3, #15
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	4613      	mov	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4413      	add	r3, r2
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	440b      	add	r3, r1
 8015c42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c46:	881b      	ldrh	r3, [r3, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d104      	bne.n	8015c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c4c:	6839      	ldr	r1, [r7, #0]
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f000 fb9d 	bl	801638e <USBD_CtlError>
                  break;
 8015c54:	e041      	b.n	8015cda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	da0b      	bge.n	8015c76 <USBD_StdEPReq+0x2b2>
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c64:	4613      	mov	r3, r2
 8015c66:	009b      	lsls	r3, r3, #2
 8015c68:	4413      	add	r3, r2
 8015c6a:	009b      	lsls	r3, r3, #2
 8015c6c:	3310      	adds	r3, #16
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	4413      	add	r3, r2
 8015c72:	3304      	adds	r3, #4
 8015c74:	e00b      	b.n	8015c8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c76:	7bbb      	ldrb	r3, [r7, #14]
 8015c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	4413      	add	r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	4413      	add	r3, r2
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c90:	7bbb      	ldrb	r3, [r7, #14]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d002      	beq.n	8015c9c <USBD_StdEPReq+0x2d8>
 8015c96:	7bbb      	ldrb	r3, [r7, #14]
 8015c98:	2b80      	cmp	r3, #128	; 0x80
 8015c9a:	d103      	bne.n	8015ca4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	601a      	str	r2, [r3, #0]
 8015ca2:	e00e      	b.n	8015cc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015ca4:	7bbb      	ldrb	r3, [r7, #14]
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f001 f903 	bl	8016eb4 <USBD_LL_IsStallEP>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d003      	beq.n	8015cbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	601a      	str	r2, [r3, #0]
 8015cba:	e002      	b.n	8015cc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	2202      	movs	r2, #2
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 fbd1 	bl	8016470 <USBD_CtlSendData>
              break;
 8015cce:	e004      	b.n	8015cda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cd0:	6839      	ldr	r1, [r7, #0]
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 fb5b 	bl	801638e <USBD_CtlError>
              break;
 8015cd8:	bf00      	nop
          }
          break;
 8015cda:	e004      	b.n	8015ce6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015cdc:	6839      	ldr	r1, [r7, #0]
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f000 fb55 	bl	801638e <USBD_CtlError>
          break;
 8015ce4:	bf00      	nop
      }
      break;
 8015ce6:	e005      	b.n	8015cf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015ce8:	6839      	ldr	r1, [r7, #0]
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f000 fb4f 	bl	801638e <USBD_CtlError>
      break;
 8015cf0:	e000      	b.n	8015cf4 <USBD_StdEPReq+0x330>
      break;
 8015cf2:	bf00      	nop
  }

  return ret;
 8015cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3710      	adds	r7, #16
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
	...

08015d00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b084      	sub	sp, #16
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d12:	2300      	movs	r3, #0
 8015d14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	885b      	ldrh	r3, [r3, #2]
 8015d1a:	0a1b      	lsrs	r3, r3, #8
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	2b06      	cmp	r3, #6
 8015d22:	f200 8128 	bhi.w	8015f76 <USBD_GetDescriptor+0x276>
 8015d26:	a201      	add	r2, pc, #4	; (adr r2, 8015d2c <USBD_GetDescriptor+0x2c>)
 8015d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d2c:	08015d49 	.word	0x08015d49
 8015d30:	08015d61 	.word	0x08015d61
 8015d34:	08015da1 	.word	0x08015da1
 8015d38:	08015f77 	.word	0x08015f77
 8015d3c:	08015f77 	.word	0x08015f77
 8015d40:	08015f17 	.word	0x08015f17
 8015d44:	08015f43 	.word	0x08015f43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	7c12      	ldrb	r2, [r2, #16]
 8015d54:	f107 0108 	add.w	r1, r7, #8
 8015d58:	4610      	mov	r0, r2
 8015d5a:	4798      	blx	r3
 8015d5c:	60f8      	str	r0, [r7, #12]
      break;
 8015d5e:	e112      	b.n	8015f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	7c1b      	ldrb	r3, [r3, #16]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d10d      	bne.n	8015d84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d70:	f107 0208 	add.w	r2, r7, #8
 8015d74:	4610      	mov	r0, r2
 8015d76:	4798      	blx	r3
 8015d78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	3301      	adds	r3, #1
 8015d7e:	2202      	movs	r2, #2
 8015d80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d82:	e100      	b.n	8015f86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d8c:	f107 0208 	add.w	r2, r7, #8
 8015d90:	4610      	mov	r0, r2
 8015d92:	4798      	blx	r3
 8015d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	2202      	movs	r2, #2
 8015d9c:	701a      	strb	r2, [r3, #0]
      break;
 8015d9e:	e0f2      	b.n	8015f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	885b      	ldrh	r3, [r3, #2]
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	2b05      	cmp	r3, #5
 8015da8:	f200 80ac 	bhi.w	8015f04 <USBD_GetDescriptor+0x204>
 8015dac:	a201      	add	r2, pc, #4	; (adr r2, 8015db4 <USBD_GetDescriptor+0xb4>)
 8015dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015db2:	bf00      	nop
 8015db4:	08015dcd 	.word	0x08015dcd
 8015db8:	08015e01 	.word	0x08015e01
 8015dbc:	08015e35 	.word	0x08015e35
 8015dc0:	08015e69 	.word	0x08015e69
 8015dc4:	08015e9d 	.word	0x08015e9d
 8015dc8:	08015ed1 	.word	0x08015ed1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d00b      	beq.n	8015df0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	7c12      	ldrb	r2, [r2, #16]
 8015de4:	f107 0108 	add.w	r1, r7, #8
 8015de8:	4610      	mov	r0, r2
 8015dea:	4798      	blx	r3
 8015dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dee:	e091      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015df0:	6839      	ldr	r1, [r7, #0]
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 facb 	bl	801638e <USBD_CtlError>
            err++;
 8015df8:	7afb      	ldrb	r3, [r7, #11]
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8015dfe:	e089      	b.n	8015f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e06:	689b      	ldr	r3, [r3, #8]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00b      	beq.n	8015e24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e12:	689b      	ldr	r3, [r3, #8]
 8015e14:	687a      	ldr	r2, [r7, #4]
 8015e16:	7c12      	ldrb	r2, [r2, #16]
 8015e18:	f107 0108 	add.w	r1, r7, #8
 8015e1c:	4610      	mov	r0, r2
 8015e1e:	4798      	blx	r3
 8015e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e22:	e077      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 fab1 	bl	801638e <USBD_CtlError>
            err++;
 8015e2c:	7afb      	ldrb	r3, [r7, #11]
 8015e2e:	3301      	adds	r3, #1
 8015e30:	72fb      	strb	r3, [r7, #11]
          break;
 8015e32:	e06f      	b.n	8015f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e3a:	68db      	ldr	r3, [r3, #12]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d00b      	beq.n	8015e58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	7c12      	ldrb	r2, [r2, #16]
 8015e4c:	f107 0108 	add.w	r1, r7, #8
 8015e50:	4610      	mov	r0, r2
 8015e52:	4798      	blx	r3
 8015e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e56:	e05d      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e58:	6839      	ldr	r1, [r7, #0]
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 fa97 	bl	801638e <USBD_CtlError>
            err++;
 8015e60:	7afb      	ldrb	r3, [r7, #11]
 8015e62:	3301      	adds	r3, #1
 8015e64:	72fb      	strb	r3, [r7, #11]
          break;
 8015e66:	e055      	b.n	8015f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e6e:	691b      	ldr	r3, [r3, #16]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d00b      	beq.n	8015e8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	7c12      	ldrb	r2, [r2, #16]
 8015e80:	f107 0108 	add.w	r1, r7, #8
 8015e84:	4610      	mov	r0, r2
 8015e86:	4798      	blx	r3
 8015e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e8a:	e043      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e8c:	6839      	ldr	r1, [r7, #0]
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f000 fa7d 	bl	801638e <USBD_CtlError>
            err++;
 8015e94:	7afb      	ldrb	r3, [r7, #11]
 8015e96:	3301      	adds	r3, #1
 8015e98:	72fb      	strb	r3, [r7, #11]
          break;
 8015e9a:	e03b      	b.n	8015f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ea2:	695b      	ldr	r3, [r3, #20]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d00b      	beq.n	8015ec0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eae:	695b      	ldr	r3, [r3, #20]
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	7c12      	ldrb	r2, [r2, #16]
 8015eb4:	f107 0108 	add.w	r1, r7, #8
 8015eb8:	4610      	mov	r0, r2
 8015eba:	4798      	blx	r3
 8015ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ebe:	e029      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ec0:	6839      	ldr	r1, [r7, #0]
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 fa63 	bl	801638e <USBD_CtlError>
            err++;
 8015ec8:	7afb      	ldrb	r3, [r7, #11]
 8015eca:	3301      	adds	r3, #1
 8015ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8015ece:	e021      	b.n	8015f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ed6:	699b      	ldr	r3, [r3, #24]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d00b      	beq.n	8015ef4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ee2:	699b      	ldr	r3, [r3, #24]
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	7c12      	ldrb	r2, [r2, #16]
 8015ee8:	f107 0108 	add.w	r1, r7, #8
 8015eec:	4610      	mov	r0, r2
 8015eee:	4798      	blx	r3
 8015ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ef2:	e00f      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ef4:	6839      	ldr	r1, [r7, #0]
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 fa49 	bl	801638e <USBD_CtlError>
            err++;
 8015efc:	7afb      	ldrb	r3, [r7, #11]
 8015efe:	3301      	adds	r3, #1
 8015f00:	72fb      	strb	r3, [r7, #11]
          break;
 8015f02:	e007      	b.n	8015f14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f04:	6839      	ldr	r1, [r7, #0]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fa41 	bl	801638e <USBD_CtlError>
          err++;
 8015f0c:	7afb      	ldrb	r3, [r7, #11]
 8015f0e:	3301      	adds	r3, #1
 8015f10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f12:	bf00      	nop
      }
      break;
 8015f14:	e037      	b.n	8015f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	7c1b      	ldrb	r3, [r3, #16]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d109      	bne.n	8015f32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f26:	f107 0208 	add.w	r2, r7, #8
 8015f2a:	4610      	mov	r0, r2
 8015f2c:	4798      	blx	r3
 8015f2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f30:	e029      	b.n	8015f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fa2a 	bl	801638e <USBD_CtlError>
        err++;
 8015f3a:	7afb      	ldrb	r3, [r7, #11]
 8015f3c:	3301      	adds	r3, #1
 8015f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8015f40:	e021      	b.n	8015f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	7c1b      	ldrb	r3, [r3, #16]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d10d      	bne.n	8015f66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f52:	f107 0208 	add.w	r2, r7, #8
 8015f56:	4610      	mov	r0, r2
 8015f58:	4798      	blx	r3
 8015f5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	2207      	movs	r2, #7
 8015f62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f64:	e00f      	b.n	8015f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f66:	6839      	ldr	r1, [r7, #0]
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 fa10 	bl	801638e <USBD_CtlError>
        err++;
 8015f6e:	7afb      	ldrb	r3, [r7, #11]
 8015f70:	3301      	adds	r3, #1
 8015f72:	72fb      	strb	r3, [r7, #11]
      break;
 8015f74:	e007      	b.n	8015f86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f76:	6839      	ldr	r1, [r7, #0]
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 fa08 	bl	801638e <USBD_CtlError>
      err++;
 8015f7e:	7afb      	ldrb	r3, [r7, #11]
 8015f80:	3301      	adds	r3, #1
 8015f82:	72fb      	strb	r3, [r7, #11]
      break;
 8015f84:	bf00      	nop
  }

  if (err != 0U)
 8015f86:	7afb      	ldrb	r3, [r7, #11]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d11e      	bne.n	8015fca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	88db      	ldrh	r3, [r3, #6]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d016      	beq.n	8015fc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f94:	893b      	ldrh	r3, [r7, #8]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00e      	beq.n	8015fb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	88da      	ldrh	r2, [r3, #6]
 8015f9e:	893b      	ldrh	r3, [r7, #8]
 8015fa0:	4293      	cmp	r3, r2
 8015fa2:	bf28      	it	cs
 8015fa4:	4613      	movcs	r3, r2
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015faa:	893b      	ldrh	r3, [r7, #8]
 8015fac:	461a      	mov	r2, r3
 8015fae:	68f9      	ldr	r1, [r7, #12]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fa5d 	bl	8016470 <USBD_CtlSendData>
 8015fb6:	e009      	b.n	8015fcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f9e7 	bl	801638e <USBD_CtlError>
 8015fc0:	e004      	b.n	8015fcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 faae 	bl	8016524 <USBD_CtlSendStatus>
 8015fc8:	e000      	b.n	8015fcc <USBD_GetDescriptor+0x2cc>
    return;
 8015fca:	bf00      	nop
  }
}
 8015fcc:	3710      	adds	r7, #16
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}
 8015fd2:	bf00      	nop

08015fd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b084      	sub	sp, #16
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	889b      	ldrh	r3, [r3, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d131      	bne.n	801604a <USBD_SetAddress+0x76>
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	88db      	ldrh	r3, [r3, #6]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d12d      	bne.n	801604a <USBD_SetAddress+0x76>
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	885b      	ldrh	r3, [r3, #2]
 8015ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8015ff4:	d829      	bhi.n	801604a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	885b      	ldrh	r3, [r3, #2]
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016008:	b2db      	uxtb	r3, r3
 801600a:	2b03      	cmp	r3, #3
 801600c:	d104      	bne.n	8016018 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 f9bc 	bl	801638e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016016:	e01d      	b.n	8016054 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	7bfa      	ldrb	r2, [r7, #15]
 801601c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016020:	7bfb      	ldrb	r3, [r7, #15]
 8016022:	4619      	mov	r1, r3
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 ff71 	bl	8016f0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 fa7a 	bl	8016524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016030:	7bfb      	ldrb	r3, [r7, #15]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d004      	beq.n	8016040 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2202      	movs	r2, #2
 801603a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801603e:	e009      	b.n	8016054 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2201      	movs	r2, #1
 8016044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016048:	e004      	b.n	8016054 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801604a:	6839      	ldr	r1, [r7, #0]
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f000 f99e 	bl	801638e <USBD_CtlError>
  }
}
 8016052:	bf00      	nop
 8016054:	bf00      	nop
 8016056:	3710      	adds	r7, #16
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}

0801605c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b084      	sub	sp, #16
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016066:	2300      	movs	r3, #0
 8016068:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	885b      	ldrh	r3, [r3, #2]
 801606e:	b2da      	uxtb	r2, r3
 8016070:	4b4e      	ldr	r3, [pc, #312]	; (80161ac <USBD_SetConfig+0x150>)
 8016072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016074:	4b4d      	ldr	r3, [pc, #308]	; (80161ac <USBD_SetConfig+0x150>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	2b01      	cmp	r3, #1
 801607a:	d905      	bls.n	8016088 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801607c:	6839      	ldr	r1, [r7, #0]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f000 f985 	bl	801638e <USBD_CtlError>
    return USBD_FAIL;
 8016084:	2303      	movs	r3, #3
 8016086:	e08c      	b.n	80161a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801608e:	b2db      	uxtb	r3, r3
 8016090:	2b02      	cmp	r3, #2
 8016092:	d002      	beq.n	801609a <USBD_SetConfig+0x3e>
 8016094:	2b03      	cmp	r3, #3
 8016096:	d029      	beq.n	80160ec <USBD_SetConfig+0x90>
 8016098:	e075      	b.n	8016186 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801609a:	4b44      	ldr	r3, [pc, #272]	; (80161ac <USBD_SetConfig+0x150>)
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d020      	beq.n	80160e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160a2:	4b42      	ldr	r3, [pc, #264]	; (80161ac <USBD_SetConfig+0x150>)
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	461a      	mov	r2, r3
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160ac:	4b3f      	ldr	r3, [pc, #252]	; (80161ac <USBD_SetConfig+0x150>)
 80160ae:	781b      	ldrb	r3, [r3, #0]
 80160b0:	4619      	mov	r1, r3
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7fe ffe1 	bl	801507a <USBD_SetClassConfig>
 80160b8:	4603      	mov	r3, r0
 80160ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160bc:	7bfb      	ldrb	r3, [r7, #15]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d008      	beq.n	80160d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160c2:	6839      	ldr	r1, [r7, #0]
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 f962 	bl	801638e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	2202      	movs	r2, #2
 80160ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160d2:	e065      	b.n	80161a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f000 fa25 	bl	8016524 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2203      	movs	r2, #3
 80160de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160e2:	e05d      	b.n	80161a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f000 fa1d 	bl	8016524 <USBD_CtlSendStatus>
      break;
 80160ea:	e059      	b.n	80161a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160ec:	4b2f      	ldr	r3, [pc, #188]	; (80161ac <USBD_SetConfig+0x150>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d112      	bne.n	801611a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2202      	movs	r2, #2
 80160f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80160fc:	4b2b      	ldr	r3, [pc, #172]	; (80161ac <USBD_SetConfig+0x150>)
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	461a      	mov	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016106:	4b29      	ldr	r3, [pc, #164]	; (80161ac <USBD_SetConfig+0x150>)
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	4619      	mov	r1, r3
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7fe ffd0 	bl	80150b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 fa06 	bl	8016524 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016118:	e042      	b.n	80161a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801611a:	4b24      	ldr	r3, [pc, #144]	; (80161ac <USBD_SetConfig+0x150>)
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	461a      	mov	r2, r3
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	429a      	cmp	r2, r3
 8016126:	d02a      	beq.n	801617e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	b2db      	uxtb	r3, r3
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7fe ffbe 	bl	80150b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016136:	4b1d      	ldr	r3, [pc, #116]	; (80161ac <USBD_SetConfig+0x150>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	461a      	mov	r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016140:	4b1a      	ldr	r3, [pc, #104]	; (80161ac <USBD_SetConfig+0x150>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	4619      	mov	r1, r3
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7fe ff97 	bl	801507a <USBD_SetClassConfig>
 801614c:	4603      	mov	r3, r0
 801614e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016150:	7bfb      	ldrb	r3, [r7, #15]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d00f      	beq.n	8016176 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016156:	6839      	ldr	r1, [r7, #0]
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f000 f918 	bl	801638e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	b2db      	uxtb	r3, r3
 8016164:	4619      	mov	r1, r3
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f7fe ffa3 	bl	80150b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2202      	movs	r2, #2
 8016170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016174:	e014      	b.n	80161a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f000 f9d4 	bl	8016524 <USBD_CtlSendStatus>
      break;
 801617c:	e010      	b.n	80161a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 f9d0 	bl	8016524 <USBD_CtlSendStatus>
      break;
 8016184:	e00c      	b.n	80161a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016186:	6839      	ldr	r1, [r7, #0]
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 f900 	bl	801638e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801618e:	4b07      	ldr	r3, [pc, #28]	; (80161ac <USBD_SetConfig+0x150>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	4619      	mov	r1, r3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7fe ff8c 	bl	80150b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801619a:	2303      	movs	r3, #3
 801619c:	73fb      	strb	r3, [r7, #15]
      break;
 801619e:	bf00      	nop
  }

  return ret;
 80161a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3710      	adds	r7, #16
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	240015e4 	.word	0x240015e4

080161b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	88db      	ldrh	r3, [r3, #6]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d004      	beq.n	80161cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 f8e2 	bl	801638e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161ca:	e023      	b.n	8016214 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b02      	cmp	r3, #2
 80161d6:	dc02      	bgt.n	80161de <USBD_GetConfig+0x2e>
 80161d8:	2b00      	cmp	r3, #0
 80161da:	dc03      	bgt.n	80161e4 <USBD_GetConfig+0x34>
 80161dc:	e015      	b.n	801620a <USBD_GetConfig+0x5a>
 80161de:	2b03      	cmp	r3, #3
 80161e0:	d00b      	beq.n	80161fa <USBD_GetConfig+0x4a>
 80161e2:	e012      	b.n	801620a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2200      	movs	r2, #0
 80161e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	3308      	adds	r3, #8
 80161ee:	2201      	movs	r2, #1
 80161f0:	4619      	mov	r1, r3
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f000 f93c 	bl	8016470 <USBD_CtlSendData>
        break;
 80161f8:	e00c      	b.n	8016214 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	3304      	adds	r3, #4
 80161fe:	2201      	movs	r2, #1
 8016200:	4619      	mov	r1, r3
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 f934 	bl	8016470 <USBD_CtlSendData>
        break;
 8016208:	e004      	b.n	8016214 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801620a:	6839      	ldr	r1, [r7, #0]
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f000 f8be 	bl	801638e <USBD_CtlError>
        break;
 8016212:	bf00      	nop
}
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801622c:	b2db      	uxtb	r3, r3
 801622e:	3b01      	subs	r3, #1
 8016230:	2b02      	cmp	r3, #2
 8016232:	d81e      	bhi.n	8016272 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	88db      	ldrh	r3, [r3, #6]
 8016238:	2b02      	cmp	r3, #2
 801623a:	d004      	beq.n	8016246 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801623c:	6839      	ldr	r1, [r7, #0]
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 f8a5 	bl	801638e <USBD_CtlError>
        break;
 8016244:	e01a      	b.n	801627c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2201      	movs	r2, #1
 801624a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016252:	2b00      	cmp	r3, #0
 8016254:	d005      	beq.n	8016262 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	68db      	ldr	r3, [r3, #12]
 801625a:	f043 0202 	orr.w	r2, r3, #2
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	330c      	adds	r3, #12
 8016266:	2202      	movs	r2, #2
 8016268:	4619      	mov	r1, r3
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f000 f900 	bl	8016470 <USBD_CtlSendData>
      break;
 8016270:	e004      	b.n	801627c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016272:	6839      	ldr	r1, [r7, #0]
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f000 f88a 	bl	801638e <USBD_CtlError>
      break;
 801627a:	bf00      	nop
  }
}
 801627c:	bf00      	nop
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	885b      	ldrh	r3, [r3, #2]
 8016292:	2b01      	cmp	r3, #1
 8016294:	d107      	bne.n	80162a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2201      	movs	r2, #1
 801629a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 f940 	bl	8016524 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162a4:	e013      	b.n	80162ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	885b      	ldrh	r3, [r3, #2]
 80162aa:	2b02      	cmp	r3, #2
 80162ac:	d10b      	bne.n	80162c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	889b      	ldrh	r3, [r3, #4]
 80162b2:	0a1b      	lsrs	r3, r3, #8
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	b2da      	uxtb	r2, r3
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f000 f930 	bl	8016524 <USBD_CtlSendStatus>
}
 80162c4:	e003      	b.n	80162ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162c6:	6839      	ldr	r1, [r7, #0]
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	f000 f860 	bl	801638e <USBD_CtlError>
}
 80162ce:	bf00      	nop
 80162d0:	3708      	adds	r7, #8
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b082      	sub	sp, #8
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6078      	str	r0, [r7, #4]
 80162de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	3b01      	subs	r3, #1
 80162ea:	2b02      	cmp	r3, #2
 80162ec:	d80b      	bhi.n	8016306 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	885b      	ldrh	r3, [r3, #2]
 80162f2:	2b01      	cmp	r3, #1
 80162f4:	d10c      	bne.n	8016310 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2200      	movs	r2, #0
 80162fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 f910 	bl	8016524 <USBD_CtlSendStatus>
      }
      break;
 8016304:	e004      	b.n	8016310 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016306:	6839      	ldr	r1, [r7, #0]
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 f840 	bl	801638e <USBD_CtlError>
      break;
 801630e:	e000      	b.n	8016312 <USBD_ClrFeature+0x3c>
      break;
 8016310:	bf00      	nop
  }
}
 8016312:	bf00      	nop
 8016314:	3708      	adds	r7, #8
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}

0801631a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801631a:	b580      	push	{r7, lr}
 801631c:	b084      	sub	sp, #16
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
 8016322:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	781a      	ldrb	r2, [r3, #0]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	3301      	adds	r3, #1
 8016334:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	781a      	ldrb	r2, [r3, #0]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	3301      	adds	r3, #1
 8016342:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016344:	68f8      	ldr	r0, [r7, #12]
 8016346:	f7ff fa41 	bl	80157cc <SWAPBYTE>
 801634a:	4603      	mov	r3, r0
 801634c:	461a      	mov	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	3301      	adds	r3, #1
 8016356:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	3301      	adds	r3, #1
 801635c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801635e:	68f8      	ldr	r0, [r7, #12]
 8016360:	f7ff fa34 	bl	80157cc <SWAPBYTE>
 8016364:	4603      	mov	r3, r0
 8016366:	461a      	mov	r2, r3
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	3301      	adds	r3, #1
 8016370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	3301      	adds	r3, #1
 8016376:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f7ff fa27 	bl	80157cc <SWAPBYTE>
 801637e:	4603      	mov	r3, r0
 8016380:	461a      	mov	r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	80da      	strh	r2, [r3, #6]
}
 8016386:	bf00      	nop
 8016388:	3710      	adds	r7, #16
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}

0801638e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801638e:	b580      	push	{r7, lr}
 8016390:	b082      	sub	sp, #8
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
 8016396:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016398:	2180      	movs	r1, #128	; 0x80
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 fd4c 	bl	8016e38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163a0:	2100      	movs	r1, #0
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 fd48 	bl	8016e38 <USBD_LL_StallEP>
}
 80163a8:	bf00      	nop
 80163aa:	3708      	adds	r7, #8
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b086      	sub	sp, #24
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163bc:	2300      	movs	r3, #0
 80163be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d036      	beq.n	8016434 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163ca:	6938      	ldr	r0, [r7, #16]
 80163cc:	f000 f836 	bl	801643c <USBD_GetLen>
 80163d0:	4603      	mov	r3, r0
 80163d2:	3301      	adds	r3, #1
 80163d4:	b29b      	uxth	r3, r3
 80163d6:	005b      	lsls	r3, r3, #1
 80163d8:	b29a      	uxth	r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163de:	7dfb      	ldrb	r3, [r7, #23]
 80163e0:	68ba      	ldr	r2, [r7, #8]
 80163e2:	4413      	add	r3, r2
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	7812      	ldrb	r2, [r2, #0]
 80163e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80163ea:	7dfb      	ldrb	r3, [r7, #23]
 80163ec:	3301      	adds	r3, #1
 80163ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163f0:	7dfb      	ldrb	r3, [r7, #23]
 80163f2:	68ba      	ldr	r2, [r7, #8]
 80163f4:	4413      	add	r3, r2
 80163f6:	2203      	movs	r2, #3
 80163f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80163fa:	7dfb      	ldrb	r3, [r7, #23]
 80163fc:	3301      	adds	r3, #1
 80163fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016400:	e013      	b.n	801642a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016402:	7dfb      	ldrb	r3, [r7, #23]
 8016404:	68ba      	ldr	r2, [r7, #8]
 8016406:	4413      	add	r3, r2
 8016408:	693a      	ldr	r2, [r7, #16]
 801640a:	7812      	ldrb	r2, [r2, #0]
 801640c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	3301      	adds	r3, #1
 8016412:	613b      	str	r3, [r7, #16]
    idx++;
 8016414:	7dfb      	ldrb	r3, [r7, #23]
 8016416:	3301      	adds	r3, #1
 8016418:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801641a:	7dfb      	ldrb	r3, [r7, #23]
 801641c:	68ba      	ldr	r2, [r7, #8]
 801641e:	4413      	add	r3, r2
 8016420:	2200      	movs	r2, #0
 8016422:	701a      	strb	r2, [r3, #0]
    idx++;
 8016424:	7dfb      	ldrb	r3, [r7, #23]
 8016426:	3301      	adds	r3, #1
 8016428:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d1e7      	bne.n	8016402 <USBD_GetString+0x52>
 8016432:	e000      	b.n	8016436 <USBD_GetString+0x86>
    return;
 8016434:	bf00      	nop
  }
}
 8016436:	3718      	adds	r7, #24
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801643c:	b480      	push	{r7}
 801643e:	b085      	sub	sp, #20
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016444:	2300      	movs	r3, #0
 8016446:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801644c:	e005      	b.n	801645a <USBD_GetLen+0x1e>
  {
    len++;
 801644e:	7bfb      	ldrb	r3, [r7, #15]
 8016450:	3301      	adds	r3, #1
 8016452:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	3301      	adds	r3, #1
 8016458:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	781b      	ldrb	r3, [r3, #0]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1f5      	bne.n	801644e <USBD_GetLen+0x12>
  }

  return len;
 8016462:	7bfb      	ldrb	r3, [r7, #15]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3714      	adds	r7, #20
 8016468:	46bd      	mov	sp, r7
 801646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646e:	4770      	bx	lr

08016470 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2202      	movs	r2, #2
 8016480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	687a      	ldr	r2, [r7, #4]
 801648e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	68ba      	ldr	r2, [r7, #8]
 8016494:	2100      	movs	r1, #0
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f000 fd57 	bl	8016f4a <USBD_LL_Transmit>

  return USBD_OK;
 801649c:	2300      	movs	r3, #0
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}

080164a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164a6:	b580      	push	{r7, lr}
 80164a8:	b084      	sub	sp, #16
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	60f8      	str	r0, [r7, #12]
 80164ae:	60b9      	str	r1, [r7, #8]
 80164b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	68ba      	ldr	r2, [r7, #8]
 80164b6:	2100      	movs	r1, #0
 80164b8:	68f8      	ldr	r0, [r7, #12]
 80164ba:	f000 fd46 	bl	8016f4a <USBD_LL_Transmit>

  return USBD_OK;
 80164be:	2300      	movs	r3, #0
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2203      	movs	r2, #3
 80164d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	68ba      	ldr	r2, [r7, #8]
 80164f0:	2100      	movs	r1, #0
 80164f2:	68f8      	ldr	r0, [r7, #12]
 80164f4:	f000 fd4a 	bl	8016f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164f8:	2300      	movs	r3, #0
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b084      	sub	sp, #16
 8016506:	af00      	add	r7, sp, #0
 8016508:	60f8      	str	r0, [r7, #12]
 801650a:	60b9      	str	r1, [r7, #8]
 801650c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	68ba      	ldr	r2, [r7, #8]
 8016512:	2100      	movs	r1, #0
 8016514:	68f8      	ldr	r0, [r7, #12]
 8016516:	f000 fd39 	bl	8016f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3710      	adds	r7, #16
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2204      	movs	r2, #4
 8016530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016534:	2300      	movs	r3, #0
 8016536:	2200      	movs	r2, #0
 8016538:	2100      	movs	r1, #0
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 fd05 	bl	8016f4a <USBD_LL_Transmit>

  return USBD_OK;
 8016540:	2300      	movs	r3, #0
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b082      	sub	sp, #8
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2205      	movs	r2, #5
 8016556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801655a:	2300      	movs	r3, #0
 801655c:	2200      	movs	r2, #0
 801655e:	2100      	movs	r1, #0
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f000 fd13 	bl	8016f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016566:	2300      	movs	r3, #0
}
 8016568:	4618      	mov	r0, r3
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}

08016570 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016570:	b480      	push	{r7}
 8016572:	b087      	sub	sp, #28
 8016574:	af00      	add	r7, sp, #0
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	4613      	mov	r3, r2
 801657c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801657e:	2301      	movs	r3, #1
 8016580:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016582:	2300      	movs	r3, #0
 8016584:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016586:	4b1f      	ldr	r3, [pc, #124]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 8016588:	7a5b      	ldrb	r3, [r3, #9]
 801658a:	b2db      	uxtb	r3, r3
 801658c:	2b00      	cmp	r3, #0
 801658e:	d131      	bne.n	80165f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016590:	4b1c      	ldr	r3, [pc, #112]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 8016592:	7a5b      	ldrb	r3, [r3, #9]
 8016594:	b2db      	uxtb	r3, r3
 8016596:	461a      	mov	r2, r3
 8016598:	4b1a      	ldr	r3, [pc, #104]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 801659a:	2100      	movs	r1, #0
 801659c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801659e:	4b19      	ldr	r3, [pc, #100]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165a0:	7a5b      	ldrb	r3, [r3, #9]
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	4a17      	ldr	r2, [pc, #92]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165a6:	009b      	lsls	r3, r3, #2
 80165a8:	4413      	add	r3, r2
 80165aa:	68fa      	ldr	r2, [r7, #12]
 80165ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80165ae:	4b15      	ldr	r3, [pc, #84]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165b0:	7a5b      	ldrb	r3, [r3, #9]
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	461a      	mov	r2, r3
 80165b6:	4b13      	ldr	r3, [pc, #76]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165b8:	4413      	add	r3, r2
 80165ba:	79fa      	ldrb	r2, [r7, #7]
 80165bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80165be:	4b11      	ldr	r3, [pc, #68]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165c0:	7a5b      	ldrb	r3, [r3, #9]
 80165c2:	b2db      	uxtb	r3, r3
 80165c4:	1c5a      	adds	r2, r3, #1
 80165c6:	b2d1      	uxtb	r1, r2
 80165c8:	4a0e      	ldr	r2, [pc, #56]	; (8016604 <FATFS_LinkDriverEx+0x94>)
 80165ca:	7251      	strb	r1, [r2, #9]
 80165cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165ce:	7dbb      	ldrb	r3, [r7, #22]
 80165d0:	3330      	adds	r3, #48	; 0x30
 80165d2:	b2da      	uxtb	r2, r3
 80165d4:	68bb      	ldr	r3, [r7, #8]
 80165d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	3301      	adds	r3, #1
 80165dc:	223a      	movs	r2, #58	; 0x3a
 80165de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	3302      	adds	r3, #2
 80165e4:	222f      	movs	r2, #47	; 0x2f
 80165e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	3303      	adds	r3, #3
 80165ec:	2200      	movs	r2, #0
 80165ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	371c      	adds	r7, #28
 80165fa:	46bd      	mov	sp, r7
 80165fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016600:	4770      	bx	lr
 8016602:	bf00      	nop
 8016604:	240015e8 	.word	0x240015e8

08016608 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016612:	2200      	movs	r2, #0
 8016614:	6839      	ldr	r1, [r7, #0]
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f7ff ffaa 	bl	8016570 <FATFS_LinkDriverEx>
 801661c:	4603      	mov	r3, r0
}
 801661e:	4618      	mov	r0, r3
 8016620:	3708      	adds	r7, #8
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
	...

08016628 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801662c:	2201      	movs	r2, #1
 801662e:	4913      	ldr	r1, [pc, #76]	; (801667c <MX_USB_DEVICE_Init+0x54>)
 8016630:	4813      	ldr	r0, [pc, #76]	; (8016680 <MX_USB_DEVICE_Init+0x58>)
 8016632:	f7fe fca5 	bl	8014f80 <USBD_Init>
 8016636:	4603      	mov	r3, r0
 8016638:	2b00      	cmp	r3, #0
 801663a:	d001      	beq.n	8016640 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801663c:	f7ec f986 	bl	800294c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016640:	4910      	ldr	r1, [pc, #64]	; (8016684 <MX_USB_DEVICE_Init+0x5c>)
 8016642:	480f      	ldr	r0, [pc, #60]	; (8016680 <MX_USB_DEVICE_Init+0x58>)
 8016644:	f7fe fccc 	bl	8014fe0 <USBD_RegisterClass>
 8016648:	4603      	mov	r3, r0
 801664a:	2b00      	cmp	r3, #0
 801664c:	d001      	beq.n	8016652 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801664e:	f7ec f97d 	bl	800294c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016652:	490d      	ldr	r1, [pc, #52]	; (8016688 <MX_USB_DEVICE_Init+0x60>)
 8016654:	480a      	ldr	r0, [pc, #40]	; (8016680 <MX_USB_DEVICE_Init+0x58>)
 8016656:	f7fe fbc3 	bl	8014de0 <USBD_CDC_RegisterInterface>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016660:	f7ec f974 	bl	800294c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016664:	4806      	ldr	r0, [pc, #24]	; (8016680 <MX_USB_DEVICE_Init+0x58>)
 8016666:	f7fe fcf1 	bl	801504c <USBD_Start>
 801666a:	4603      	mov	r3, r0
 801666c:	2b00      	cmp	r3, #0
 801666e:	d001      	beq.n	8016674 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016670:	f7ec f96c 	bl	800294c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016674:	f7f3 f908 	bl	8009888 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016678:	bf00      	nop
 801667a:	bd80      	pop	{r7, pc}
 801667c:	240000b0 	.word	0x240000b0
 8016680:	240015f4 	.word	0x240015f4
 8016684:	2400001c 	.word	0x2400001c
 8016688:	2400009c 	.word	0x2400009c

0801668c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016690:	2200      	movs	r2, #0
 8016692:	4905      	ldr	r1, [pc, #20]	; (80166a8 <CDC_Init_HS+0x1c>)
 8016694:	4805      	ldr	r0, [pc, #20]	; (80166ac <CDC_Init_HS+0x20>)
 8016696:	f7fe fbbd 	bl	8014e14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801669a:	4905      	ldr	r1, [pc, #20]	; (80166b0 <CDC_Init_HS+0x24>)
 801669c:	4803      	ldr	r0, [pc, #12]	; (80166ac <CDC_Init_HS+0x20>)
 801669e:	f7fe fbdb 	bl	8014e58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166a2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	240020d0 	.word	0x240020d0
 80166ac:	240015f4 	.word	0x240015f4
 80166b0:	240018d0 	.word	0x240018d0

080166b4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80166b4:	b480      	push	{r7}
 80166b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80166b8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	46bd      	mov	sp, r7
 80166be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c2:	4770      	bx	lr

080166c4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b083      	sub	sp, #12
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	4603      	mov	r3, r0
 80166cc:	6039      	str	r1, [r7, #0]
 80166ce:	71fb      	strb	r3, [r7, #7]
 80166d0:	4613      	mov	r3, r2
 80166d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166d4:	79fb      	ldrb	r3, [r7, #7]
 80166d6:	2b23      	cmp	r3, #35	; 0x23
 80166d8:	d84a      	bhi.n	8016770 <CDC_Control_HS+0xac>
 80166da:	a201      	add	r2, pc, #4	; (adr r2, 80166e0 <CDC_Control_HS+0x1c>)
 80166dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166e0:	08016771 	.word	0x08016771
 80166e4:	08016771 	.word	0x08016771
 80166e8:	08016771 	.word	0x08016771
 80166ec:	08016771 	.word	0x08016771
 80166f0:	08016771 	.word	0x08016771
 80166f4:	08016771 	.word	0x08016771
 80166f8:	08016771 	.word	0x08016771
 80166fc:	08016771 	.word	0x08016771
 8016700:	08016771 	.word	0x08016771
 8016704:	08016771 	.word	0x08016771
 8016708:	08016771 	.word	0x08016771
 801670c:	08016771 	.word	0x08016771
 8016710:	08016771 	.word	0x08016771
 8016714:	08016771 	.word	0x08016771
 8016718:	08016771 	.word	0x08016771
 801671c:	08016771 	.word	0x08016771
 8016720:	08016771 	.word	0x08016771
 8016724:	08016771 	.word	0x08016771
 8016728:	08016771 	.word	0x08016771
 801672c:	08016771 	.word	0x08016771
 8016730:	08016771 	.word	0x08016771
 8016734:	08016771 	.word	0x08016771
 8016738:	08016771 	.word	0x08016771
 801673c:	08016771 	.word	0x08016771
 8016740:	08016771 	.word	0x08016771
 8016744:	08016771 	.word	0x08016771
 8016748:	08016771 	.word	0x08016771
 801674c:	08016771 	.word	0x08016771
 8016750:	08016771 	.word	0x08016771
 8016754:	08016771 	.word	0x08016771
 8016758:	08016771 	.word	0x08016771
 801675c:	08016771 	.word	0x08016771
 8016760:	08016771 	.word	0x08016771
 8016764:	08016771 	.word	0x08016771
 8016768:	08016771 	.word	0x08016771
 801676c:	08016771 	.word	0x08016771
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016770:	bf00      	nop
  }

  return (USBD_OK);
 8016772:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016774:	4618      	mov	r0, r3
 8016776:	370c      	adds	r7, #12
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr

08016780 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801678a:	6879      	ldr	r1, [r7, #4]
 801678c:	480e      	ldr	r0, [pc, #56]	; (80167c8 <CDC_Receive_HS+0x48>)
 801678e:	f7fe fb63 	bl	8014e58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016792:	480d      	ldr	r0, [pc, #52]	; (80167c8 <CDC_Receive_HS+0x48>)
 8016794:	f7fe fbbe 	bl	8014f14 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801679e:	4b0b      	ldr	r3, [pc, #44]	; (80167cc <CDC_Receive_HS+0x4c>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4a0b      	ldr	r2, [pc, #44]	; (80167d0 <CDC_Receive_HS+0x50>)
 80167a4:	4413      	add	r3, r2
 80167a6:	68fa      	ldr	r2, [r7, #12]
 80167a8:	6879      	ldr	r1, [r7, #4]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f000 fcf0 	bl	8017190 <memcpy>
  usbBytesReady += cpyLen;
 80167b0:	4b06      	ldr	r3, [pc, #24]	; (80167cc <CDC_Receive_HS+0x4c>)
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	4413      	add	r3, r2
 80167b8:	4a04      	ldr	r2, [pc, #16]	; (80167cc <CDC_Receive_HS+0x4c>)
 80167ba:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80167bc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	240015f4 	.word	0x240015f4
 80167cc:	2400026c 	.word	0x2400026c
 80167d0:	2400016c 	.word	0x2400016c

080167d4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	460b      	mov	r3, r1
 80167de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167e0:	2300      	movs	r3, #0
 80167e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80167e4:	4b0d      	ldr	r3, [pc, #52]	; (801681c <CDC_Transmit_HS+0x48>)
 80167e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d001      	beq.n	80167fa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80167f6:	2301      	movs	r3, #1
 80167f8:	e00b      	b.n	8016812 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80167fa:	887b      	ldrh	r3, [r7, #2]
 80167fc:	461a      	mov	r2, r3
 80167fe:	6879      	ldr	r1, [r7, #4]
 8016800:	4806      	ldr	r0, [pc, #24]	; (801681c <CDC_Transmit_HS+0x48>)
 8016802:	f7fe fb07 	bl	8014e14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016806:	4805      	ldr	r0, [pc, #20]	; (801681c <CDC_Transmit_HS+0x48>)
 8016808:	f7fe fb44 	bl	8014e94 <USBD_CDC_TransmitPacket>
 801680c:	4603      	mov	r3, r0
 801680e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016810:	7bfb      	ldrb	r3, [r7, #15]
}
 8016812:	4618      	mov	r0, r3
 8016814:	3710      	adds	r7, #16
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	240015f4 	.word	0x240015f4

08016820 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016820:	b480      	push	{r7}
 8016822:	b087      	sub	sp, #28
 8016824:	af00      	add	r7, sp, #0
 8016826:	60f8      	str	r0, [r7, #12]
 8016828:	60b9      	str	r1, [r7, #8]
 801682a:	4613      	mov	r3, r2
 801682c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801682e:	2300      	movs	r3, #0
 8016830:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016836:	4618      	mov	r0, r3
 8016838:	371c      	adds	r7, #28
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
	...

08016844 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016844:	b480      	push	{r7}
 8016846:	b083      	sub	sp, #12
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	6039      	str	r1, [r7, #0]
 801684e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	2212      	movs	r2, #18
 8016854:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016856:	4b03      	ldr	r3, [pc, #12]	; (8016864 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr
 8016864:	240000cc 	.word	0x240000cc

08016868 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016868:	b480      	push	{r7}
 801686a:	b083      	sub	sp, #12
 801686c:	af00      	add	r7, sp, #0
 801686e:	4603      	mov	r3, r0
 8016870:	6039      	str	r1, [r7, #0]
 8016872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	2204      	movs	r2, #4
 8016878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801687a:	4b03      	ldr	r3, [pc, #12]	; (8016888 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801687c:	4618      	mov	r0, r3
 801687e:	370c      	adds	r7, #12
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr
 8016888:	240000e0 	.word	0x240000e0

0801688c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	6039      	str	r1, [r7, #0]
 8016896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016898:	79fb      	ldrb	r3, [r7, #7]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d105      	bne.n	80168aa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801689e:	683a      	ldr	r2, [r7, #0]
 80168a0:	4907      	ldr	r1, [pc, #28]	; (80168c0 <USBD_HS_ProductStrDescriptor+0x34>)
 80168a2:	4808      	ldr	r0, [pc, #32]	; (80168c4 <USBD_HS_ProductStrDescriptor+0x38>)
 80168a4:	f7ff fd84 	bl	80163b0 <USBD_GetString>
 80168a8:	e004      	b.n	80168b4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168aa:	683a      	ldr	r2, [r7, #0]
 80168ac:	4904      	ldr	r1, [pc, #16]	; (80168c0 <USBD_HS_ProductStrDescriptor+0x34>)
 80168ae:	4805      	ldr	r0, [pc, #20]	; (80168c4 <USBD_HS_ProductStrDescriptor+0x38>)
 80168b0:	f7ff fd7e 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168b4:	4b02      	ldr	r3, [pc, #8]	; (80168c0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3708      	adds	r7, #8
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	240028d0 	.word	0x240028d0
 80168c4:	080184bc 	.word	0x080184bc

080168c8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	4603      	mov	r3, r0
 80168d0:	6039      	str	r1, [r7, #0]
 80168d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168d4:	683a      	ldr	r2, [r7, #0]
 80168d6:	4904      	ldr	r1, [pc, #16]	; (80168e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168d8:	4804      	ldr	r0, [pc, #16]	; (80168ec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168da:	f7ff fd69 	bl	80163b0 <USBD_GetString>
  return USBD_StrDesc;
 80168de:	4b02      	ldr	r3, [pc, #8]	; (80168e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	240028d0 	.word	0x240028d0
 80168ec:	080184d8 	.word	0x080184d8

080168f0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	4603      	mov	r3, r0
 80168f8:	6039      	str	r1, [r7, #0]
 80168fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	221a      	movs	r2, #26
 8016900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016902:	f000 f843 	bl	801698c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016906:	4b02      	ldr	r3, [pc, #8]	; (8016910 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016908:	4618      	mov	r0, r3
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	240000e4 	.word	0x240000e4

08016914 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	4603      	mov	r3, r0
 801691c:	6039      	str	r1, [r7, #0]
 801691e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016920:	79fb      	ldrb	r3, [r7, #7]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d105      	bne.n	8016932 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016926:	683a      	ldr	r2, [r7, #0]
 8016928:	4907      	ldr	r1, [pc, #28]	; (8016948 <USBD_HS_ConfigStrDescriptor+0x34>)
 801692a:	4808      	ldr	r0, [pc, #32]	; (801694c <USBD_HS_ConfigStrDescriptor+0x38>)
 801692c:	f7ff fd40 	bl	80163b0 <USBD_GetString>
 8016930:	e004      	b.n	801693c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016932:	683a      	ldr	r2, [r7, #0]
 8016934:	4904      	ldr	r1, [pc, #16]	; (8016948 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016936:	4805      	ldr	r0, [pc, #20]	; (801694c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016938:	f7ff fd3a 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801693c:	4b02      	ldr	r3, [pc, #8]	; (8016948 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801693e:	4618      	mov	r0, r3
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	240028d0 	.word	0x240028d0
 801694c:	080184dc 	.word	0x080184dc

08016950 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	4603      	mov	r3, r0
 8016958:	6039      	str	r1, [r7, #0]
 801695a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801695c:	79fb      	ldrb	r3, [r7, #7]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d105      	bne.n	801696e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016962:	683a      	ldr	r2, [r7, #0]
 8016964:	4907      	ldr	r1, [pc, #28]	; (8016984 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016966:	4808      	ldr	r0, [pc, #32]	; (8016988 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016968:	f7ff fd22 	bl	80163b0 <USBD_GetString>
 801696c:	e004      	b.n	8016978 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801696e:	683a      	ldr	r2, [r7, #0]
 8016970:	4904      	ldr	r1, [pc, #16]	; (8016984 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016972:	4805      	ldr	r0, [pc, #20]	; (8016988 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016974:	f7ff fd1c 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016978:	4b02      	ldr	r3, [pc, #8]	; (8016984 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801697a:	4618      	mov	r0, r3
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	240028d0 	.word	0x240028d0
 8016988:	080184e8 	.word	0x080184e8

0801698c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b084      	sub	sp, #16
 8016990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016992:	4b0f      	ldr	r3, [pc, #60]	; (80169d0 <Get_SerialNum+0x44>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016998:	4b0e      	ldr	r3, [pc, #56]	; (80169d4 <Get_SerialNum+0x48>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801699e:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <Get_SerialNum+0x4c>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169a4:	68fa      	ldr	r2, [r7, #12]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4413      	add	r3, r2
 80169aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d009      	beq.n	80169c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169b2:	2208      	movs	r2, #8
 80169b4:	4909      	ldr	r1, [pc, #36]	; (80169dc <Get_SerialNum+0x50>)
 80169b6:	68f8      	ldr	r0, [r7, #12]
 80169b8:	f000 f814 	bl	80169e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80169bc:	2204      	movs	r2, #4
 80169be:	4908      	ldr	r1, [pc, #32]	; (80169e0 <Get_SerialNum+0x54>)
 80169c0:	68b8      	ldr	r0, [r7, #8]
 80169c2:	f000 f80f 	bl	80169e4 <IntToUnicode>
  }
}
 80169c6:	bf00      	nop
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	1ff1e800 	.word	0x1ff1e800
 80169d4:	1ff1e804 	.word	0x1ff1e804
 80169d8:	1ff1e808 	.word	0x1ff1e808
 80169dc:	240000e6 	.word	0x240000e6
 80169e0:	240000f6 	.word	0x240000f6

080169e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b087      	sub	sp, #28
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	4613      	mov	r3, r2
 80169f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169f6:	2300      	movs	r3, #0
 80169f8:	75fb      	strb	r3, [r7, #23]
 80169fa:	e027      	b.n	8016a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	0f1b      	lsrs	r3, r3, #28
 8016a00:	2b09      	cmp	r3, #9
 8016a02:	d80b      	bhi.n	8016a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	0f1b      	lsrs	r3, r3, #28
 8016a08:	b2da      	uxtb	r2, r3
 8016a0a:	7dfb      	ldrb	r3, [r7, #23]
 8016a0c:	005b      	lsls	r3, r3, #1
 8016a0e:	4619      	mov	r1, r3
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	440b      	add	r3, r1
 8016a14:	3230      	adds	r2, #48	; 0x30
 8016a16:	b2d2      	uxtb	r2, r2
 8016a18:	701a      	strb	r2, [r3, #0]
 8016a1a:	e00a      	b.n	8016a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	0f1b      	lsrs	r3, r3, #28
 8016a20:	b2da      	uxtb	r2, r3
 8016a22:	7dfb      	ldrb	r3, [r7, #23]
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	4619      	mov	r1, r3
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	440b      	add	r3, r1
 8016a2c:	3237      	adds	r2, #55	; 0x37
 8016a2e:	b2d2      	uxtb	r2, r2
 8016a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	011b      	lsls	r3, r3, #4
 8016a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a38:	7dfb      	ldrb	r3, [r7, #23]
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	68ba      	ldr	r2, [r7, #8]
 8016a40:	4413      	add	r3, r2
 8016a42:	2200      	movs	r2, #0
 8016a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a46:	7dfb      	ldrb	r3, [r7, #23]
 8016a48:	3301      	adds	r3, #1
 8016a4a:	75fb      	strb	r3, [r7, #23]
 8016a4c:	7dfa      	ldrb	r2, [r7, #23]
 8016a4e:	79fb      	ldrb	r3, [r7, #7]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d3d3      	bcc.n	80169fc <IntToUnicode+0x18>
  }
}
 8016a54:	bf00      	nop
 8016a56:	bf00      	nop
 8016a58:	371c      	adds	r7, #28
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a60:	4770      	bx	lr
	...

08016a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b0b2      	sub	sp, #200	; 0xc8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a6c:	f107 0310 	add.w	r3, r7, #16
 8016a70:	22b8      	movs	r2, #184	; 0xb8
 8016a72:	2100      	movs	r1, #0
 8016a74:	4618      	mov	r0, r3
 8016a76:	f000 fb4f 	bl	8017118 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4a1a      	ldr	r2, [pc, #104]	; (8016ae8 <HAL_PCD_MspInit+0x84>)
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d12c      	bne.n	8016ade <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a88:	f04f 0300 	mov.w	r3, #0
 8016a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a90:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a98:	f107 0310 	add.w	r3, r7, #16
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7f3 fed3 	bl	800a848 <HAL_RCCEx_PeriphCLKConfig>
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d001      	beq.n	8016aac <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016aa8:	f7eb ff50 	bl	800294c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016aac:	f7f2 feec 	bl	8009888 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016ab0:	4b0e      	ldr	r3, [pc, #56]	; (8016aec <HAL_PCD_MspInit+0x88>)
 8016ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ab6:	4a0d      	ldr	r2, [pc, #52]	; (8016aec <HAL_PCD_MspInit+0x88>)
 8016ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016abc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016ac0:	4b0a      	ldr	r3, [pc, #40]	; (8016aec <HAL_PCD_MspInit+0x88>)
 8016ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016aca:	60fb      	str	r3, [r7, #12]
 8016acc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016ace:	2200      	movs	r2, #0
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	204d      	movs	r0, #77	; 0x4d
 8016ad4:	f7ee fc5d 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016ad8:	204d      	movs	r0, #77	; 0x4d
 8016ada:	f7ee fc74 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016ade:	bf00      	nop
 8016ae0:	37c8      	adds	r7, #200	; 0xc8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	40040000 	.word	0x40040000
 8016aec:	58024400 	.word	0x58024400

08016af0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b04:	4619      	mov	r1, r3
 8016b06:	4610      	mov	r0, r2
 8016b08:	f7fe faed 	bl	80150e6 <USBD_LL_SetupStage>
}
 8016b0c:	bf00      	nop
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b26:	78fa      	ldrb	r2, [r7, #3]
 8016b28:	6879      	ldr	r1, [r7, #4]
 8016b2a:	4613      	mov	r3, r2
 8016b2c:	00db      	lsls	r3, r3, #3
 8016b2e:	4413      	add	r3, r2
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	440b      	add	r3, r1
 8016b34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	78fb      	ldrb	r3, [r7, #3]
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	f7fe fb27 	bl	8015190 <USBD_LL_DataOutStage>
}
 8016b42:	bf00      	nop
 8016b44:	3708      	adds	r7, #8
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b4a:	b580      	push	{r7, lr}
 8016b4c:	b082      	sub	sp, #8
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
 8016b52:	460b      	mov	r3, r1
 8016b54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b5c:	78fa      	ldrb	r2, [r7, #3]
 8016b5e:	6879      	ldr	r1, [r7, #4]
 8016b60:	4613      	mov	r3, r2
 8016b62:	00db      	lsls	r3, r3, #3
 8016b64:	4413      	add	r3, r2
 8016b66:	009b      	lsls	r3, r3, #2
 8016b68:	440b      	add	r3, r1
 8016b6a:	3348      	adds	r3, #72	; 0x48
 8016b6c:	681a      	ldr	r2, [r3, #0]
 8016b6e:	78fb      	ldrb	r3, [r7, #3]
 8016b70:	4619      	mov	r1, r3
 8016b72:	f7fe fbc0 	bl	80152f6 <USBD_LL_DataInStage>
}
 8016b76:	bf00      	nop
 8016b78:	3708      	adds	r7, #8
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b082      	sub	sp, #8
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7fe fcfa 	bl	8015586 <USBD_LL_SOF>
}
 8016b92:	bf00      	nop
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b084      	sub	sp, #16
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	691b      	ldr	r3, [r3, #16]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d102      	bne.n	8016bb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	73fb      	strb	r3, [r7, #15]
 8016bb2:	e008      	b.n	8016bc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	691b      	ldr	r3, [r3, #16]
 8016bb8:	2b02      	cmp	r3, #2
 8016bba:	d102      	bne.n	8016bc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	73fb      	strb	r3, [r7, #15]
 8016bc0:	e001      	b.n	8016bc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016bc2:	f7eb fec3 	bl	800294c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bcc:	7bfa      	ldrb	r2, [r7, #15]
 8016bce:	4611      	mov	r1, r2
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f7fe fc94 	bl	80154fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7fe fc3c 	bl	801545a <USBD_LL_Reset>
}
 8016be2:	bf00      	nop
 8016be4:	3710      	adds	r7, #16
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
	...

08016bec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7fe fc8f 	bl	801551e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	687a      	ldr	r2, [r7, #4]
 8016c0c:	6812      	ldr	r2, [r2, #0]
 8016c0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c12:	f043 0301 	orr.w	r3, r3, #1
 8016c16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6a1b      	ldr	r3, [r3, #32]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d005      	beq.n	8016c2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c20:	4b04      	ldr	r3, [pc, #16]	; (8016c34 <HAL_PCD_SuspendCallback+0x48>)
 8016c22:	691b      	ldr	r3, [r3, #16]
 8016c24:	4a03      	ldr	r2, [pc, #12]	; (8016c34 <HAL_PCD_SuspendCallback+0x48>)
 8016c26:	f043 0306 	orr.w	r3, r3, #6
 8016c2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c2c:	bf00      	nop
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	e000ed00 	.word	0xe000ed00

08016c38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe fc85 	bl	8015556 <USBD_LL_Resume>
}
 8016c4c:	bf00      	nop
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c66:	78fa      	ldrb	r2, [r7, #3]
 8016c68:	4611      	mov	r1, r2
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fe fcdd 	bl	801562a <USBD_LL_IsoOUTIncomplete>
}
 8016c70:	bf00      	nop
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c8a:	78fa      	ldrb	r2, [r7, #3]
 8016c8c:	4611      	mov	r1, r2
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7fe fc99 	bl	80155c6 <USBD_LL_IsoINIncomplete>
}
 8016c94:	bf00      	nop
 8016c96:	3708      	adds	r7, #8
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7fe fcef 	bl	801568e <USBD_LL_DevConnected>
}
 8016cb0:	bf00      	nop
 8016cb2:	3708      	adds	r7, #8
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7fe fcec 	bl	80156a4 <USBD_LL_DevDisconnected>
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d140      	bne.n	8016d66 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016ce4:	4a22      	ldr	r2, [pc, #136]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	4a20      	ldr	r2, [pc, #128]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016cf0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016cf4:	4b1e      	ldr	r3, [pc, #120]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016cf6:	4a1f      	ldr	r2, [pc, #124]	; (8016d74 <USBD_LL_Init+0xa0>)
 8016cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016cfa:	4b1d      	ldr	r3, [pc, #116]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016cfc:	2209      	movs	r2, #9
 8016cfe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d00:	4b1b      	ldr	r3, [pc, #108]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d02:	2202      	movs	r2, #2
 8016d04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d06:	4b1a      	ldr	r3, [pc, #104]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d08:	2200      	movs	r2, #0
 8016d0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d0c:	4b18      	ldr	r3, [pc, #96]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d0e:	2202      	movs	r2, #2
 8016d10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d12:	4b17      	ldr	r3, [pc, #92]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d14:	2200      	movs	r2, #0
 8016d16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d18:	4b15      	ldr	r3, [pc, #84]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d1e:	4b14      	ldr	r3, [pc, #80]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d20:	2200      	movs	r2, #0
 8016d22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d24:	4b12      	ldr	r3, [pc, #72]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d26:	2200      	movs	r2, #0
 8016d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d2a:	4b11      	ldr	r3, [pc, #68]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d30:	4b0f      	ldr	r3, [pc, #60]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d32:	2200      	movs	r2, #0
 8016d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d36:	480e      	ldr	r0, [pc, #56]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d38:	f7f1 fab3 	bl	80082a2 <HAL_PCD_Init>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d001      	beq.n	8016d46 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d42:	f7eb fe03 	bl	800294c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d4a:	4809      	ldr	r0, [pc, #36]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d4c:	f7f2 fd21 	bl	8009792 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d50:	2280      	movs	r2, #128	; 0x80
 8016d52:	2100      	movs	r1, #0
 8016d54:	4806      	ldr	r0, [pc, #24]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d56:	f7f2 fcd5 	bl	8009704 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d5a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d5e:	2101      	movs	r1, #1
 8016d60:	4803      	ldr	r0, [pc, #12]	; (8016d70 <USBD_LL_Init+0x9c>)
 8016d62:	f7f2 fccf 	bl	8009704 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3708      	adds	r7, #8
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	24002ad0 	.word	0x24002ad0
 8016d74:	40040000 	.word	0x40040000

08016d78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d80:	2300      	movs	r3, #0
 8016d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f1 fbab 	bl	80084ea <HAL_PCD_Start>
 8016d94:	4603      	mov	r3, r0
 8016d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d98:	7bfb      	ldrb	r3, [r7, #15]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 f942 	bl	8017024 <USBD_Get_USB_Status>
 8016da0:	4603      	mov	r3, r0
 8016da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	3710      	adds	r7, #16
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}

08016dae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016dae:	b580      	push	{r7, lr}
 8016db0:	b084      	sub	sp, #16
 8016db2:	af00      	add	r7, sp, #0
 8016db4:	6078      	str	r0, [r7, #4]
 8016db6:	4608      	mov	r0, r1
 8016db8:	4611      	mov	r1, r2
 8016dba:	461a      	mov	r2, r3
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	70fb      	strb	r3, [r7, #3]
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	70bb      	strb	r3, [r7, #2]
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dd6:	78bb      	ldrb	r3, [r7, #2]
 8016dd8:	883a      	ldrh	r2, [r7, #0]
 8016dda:	78f9      	ldrb	r1, [r7, #3]
 8016ddc:	f7f2 f8ab 	bl	8008f36 <HAL_PCD_EP_Open>
 8016de0:	4603      	mov	r3, r0
 8016de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016de4:	7bfb      	ldrb	r3, [r7, #15]
 8016de6:	4618      	mov	r0, r3
 8016de8:	f000 f91c 	bl	8017024 <USBD_Get_USB_Status>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3710      	adds	r7, #16
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b084      	sub	sp, #16
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
 8016e02:	460b      	mov	r3, r1
 8016e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e06:	2300      	movs	r3, #0
 8016e08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e14:	78fa      	ldrb	r2, [r7, #3]
 8016e16:	4611      	mov	r1, r2
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7f2 f8f4 	bl	8009006 <HAL_PCD_EP_Close>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e22:	7bfb      	ldrb	r3, [r7, #15]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f000 f8fd 	bl	8017024 <USBD_Get_USB_Status>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3710      	adds	r7, #16
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	460b      	mov	r3, r1
 8016e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e44:	2300      	movs	r3, #0
 8016e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e52:	78fa      	ldrb	r2, [r7, #3]
 8016e54:	4611      	mov	r1, r2
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7f2 f9ae 	bl	80091b8 <HAL_PCD_EP_SetStall>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e60:	7bfb      	ldrb	r3, [r7, #15]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f000 f8de 	bl	8017024 <USBD_Get_USB_Status>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3710      	adds	r7, #16
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}

08016e76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e76:	b580      	push	{r7, lr}
 8016e78:	b084      	sub	sp, #16
 8016e7a:	af00      	add	r7, sp, #0
 8016e7c:	6078      	str	r0, [r7, #4]
 8016e7e:	460b      	mov	r3, r1
 8016e80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e82:	2300      	movs	r3, #0
 8016e84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e86:	2300      	movs	r3, #0
 8016e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e90:	78fa      	ldrb	r2, [r7, #3]
 8016e92:	4611      	mov	r1, r2
 8016e94:	4618      	mov	r0, r3
 8016e96:	f7f2 f9f3 	bl	8009280 <HAL_PCD_EP_ClrStall>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e9e:	7bfb      	ldrb	r3, [r7, #15]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f000 f8bf 	bl	8017024 <USBD_Get_USB_Status>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	3710      	adds	r7, #16
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016eb4:	b480      	push	{r7}
 8016eb6:	b085      	sub	sp, #20
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
 8016ebc:	460b      	mov	r3, r1
 8016ebe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ec6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	da0b      	bge.n	8016ee8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016ed0:	78fb      	ldrb	r3, [r7, #3]
 8016ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ed6:	68f9      	ldr	r1, [r7, #12]
 8016ed8:	4613      	mov	r3, r2
 8016eda:	00db      	lsls	r3, r3, #3
 8016edc:	4413      	add	r3, r2
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	440b      	add	r3, r1
 8016ee2:	333e      	adds	r3, #62	; 0x3e
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	e00b      	b.n	8016f00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ee8:	78fb      	ldrb	r3, [r7, #3]
 8016eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016eee:	68f9      	ldr	r1, [r7, #12]
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	00db      	lsls	r3, r3, #3
 8016ef4:	4413      	add	r3, r2
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	440b      	add	r3, r1
 8016efa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016efe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3714      	adds	r7, #20
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr

08016f0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	460b      	mov	r3, r1
 8016f16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f18:	2300      	movs	r3, #0
 8016f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f26:	78fa      	ldrb	r2, [r7, #3]
 8016f28:	4611      	mov	r1, r2
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7f1 ffde 	bl	8008eec <HAL_PCD_SetAddress>
 8016f30:	4603      	mov	r3, r0
 8016f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f34:	7bfb      	ldrb	r3, [r7, #15]
 8016f36:	4618      	mov	r0, r3
 8016f38:	f000 f874 	bl	8017024 <USBD_Get_USB_Status>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}

08016f4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f4a:	b580      	push	{r7, lr}
 8016f4c:	b086      	sub	sp, #24
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	60f8      	str	r0, [r7, #12]
 8016f52:	607a      	str	r2, [r7, #4]
 8016f54:	603b      	str	r3, [r7, #0]
 8016f56:	460b      	mov	r3, r1
 8016f58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f68:	7af9      	ldrb	r1, [r7, #11]
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	f7f2 f8e8 	bl	8009142 <HAL_PCD_EP_Transmit>
 8016f72:	4603      	mov	r3, r0
 8016f74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f76:	7dfb      	ldrb	r3, [r7, #23]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f000 f853 	bl	8017024 <USBD_Get_USB_Status>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f82:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	3718      	adds	r7, #24
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}

08016f8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b086      	sub	sp, #24
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	60f8      	str	r0, [r7, #12]
 8016f94:	607a      	str	r2, [r7, #4]
 8016f96:	603b      	str	r3, [r7, #0]
 8016f98:	460b      	mov	r3, r1
 8016f9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016faa:	7af9      	ldrb	r1, [r7, #11]
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	f7f2 f873 	bl	800909a <HAL_PCD_EP_Receive>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fb8:	7dfb      	ldrb	r3, [r7, #23]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f000 f832 	bl	8017024 <USBD_Get_USB_Status>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	3718      	adds	r7, #24
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd80      	pop	{r7, pc}

08016fce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fce:	b580      	push	{r7, lr}
 8016fd0:	b082      	sub	sp, #8
 8016fd2:	af00      	add	r7, sp, #0
 8016fd4:	6078      	str	r0, [r7, #4]
 8016fd6:	460b      	mov	r3, r1
 8016fd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fe0:	78fa      	ldrb	r2, [r7, #3]
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7f2 f894 	bl	8009112 <HAL_PCD_EP_GetRxCount>
 8016fea:	4603      	mov	r3, r0
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3708      	adds	r7, #8
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b083      	sub	sp, #12
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016ffc:	4b03      	ldr	r3, [pc, #12]	; (801700c <USBD_static_malloc+0x18>)
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	370c      	adds	r7, #12
 8017002:	46bd      	mov	sp, r7
 8017004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop
 801700c:	24002fdc 	.word	0x24002fdc

08017010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017018:	bf00      	nop
 801701a:	370c      	adds	r7, #12
 801701c:	46bd      	mov	sp, r7
 801701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017022:	4770      	bx	lr

08017024 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017024:	b480      	push	{r7}
 8017026:	b085      	sub	sp, #20
 8017028:	af00      	add	r7, sp, #0
 801702a:	4603      	mov	r3, r0
 801702c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801702e:	2300      	movs	r3, #0
 8017030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017032:	79fb      	ldrb	r3, [r7, #7]
 8017034:	2b03      	cmp	r3, #3
 8017036:	d817      	bhi.n	8017068 <USBD_Get_USB_Status+0x44>
 8017038:	a201      	add	r2, pc, #4	; (adr r2, 8017040 <USBD_Get_USB_Status+0x1c>)
 801703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801703e:	bf00      	nop
 8017040:	08017051 	.word	0x08017051
 8017044:	08017057 	.word	0x08017057
 8017048:	0801705d 	.word	0x0801705d
 801704c:	08017063 	.word	0x08017063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017050:	2300      	movs	r3, #0
 8017052:	73fb      	strb	r3, [r7, #15]
    break;
 8017054:	e00b      	b.n	801706e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017056:	2303      	movs	r3, #3
 8017058:	73fb      	strb	r3, [r7, #15]
    break;
 801705a:	e008      	b.n	801706e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801705c:	2301      	movs	r3, #1
 801705e:	73fb      	strb	r3, [r7, #15]
    break;
 8017060:	e005      	b.n	801706e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017062:	2303      	movs	r3, #3
 8017064:	73fb      	strb	r3, [r7, #15]
    break;
 8017066:	e002      	b.n	801706e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017068:	2303      	movs	r3, #3
 801706a:	73fb      	strb	r3, [r7, #15]
    break;
 801706c:	bf00      	nop
  }
  return usb_status;
 801706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017070:	4618      	mov	r0, r3
 8017072:	3714      	adds	r7, #20
 8017074:	46bd      	mov	sp, r7
 8017076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707a:	4770      	bx	lr

0801707c <siprintf>:
 801707c:	b40e      	push	{r1, r2, r3}
 801707e:	b500      	push	{lr}
 8017080:	b09c      	sub	sp, #112	; 0x70
 8017082:	ab1d      	add	r3, sp, #116	; 0x74
 8017084:	9002      	str	r0, [sp, #8]
 8017086:	9006      	str	r0, [sp, #24]
 8017088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801708c:	4809      	ldr	r0, [pc, #36]	; (80170b4 <siprintf+0x38>)
 801708e:	9107      	str	r1, [sp, #28]
 8017090:	9104      	str	r1, [sp, #16]
 8017092:	4909      	ldr	r1, [pc, #36]	; (80170b8 <siprintf+0x3c>)
 8017094:	f853 2b04 	ldr.w	r2, [r3], #4
 8017098:	9105      	str	r1, [sp, #20]
 801709a:	6800      	ldr	r0, [r0, #0]
 801709c:	9301      	str	r3, [sp, #4]
 801709e:	a902      	add	r1, sp, #8
 80170a0:	f000 f9d6 	bl	8017450 <_svfiprintf_r>
 80170a4:	9b02      	ldr	r3, [sp, #8]
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
 80170aa:	b01c      	add	sp, #112	; 0x70
 80170ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80170b0:	b003      	add	sp, #12
 80170b2:	4770      	bx	lr
 80170b4:	2400014c 	.word	0x2400014c
 80170b8:	ffff0208 	.word	0xffff0208

080170bc <siscanf>:
 80170bc:	b40e      	push	{r1, r2, r3}
 80170be:	b510      	push	{r4, lr}
 80170c0:	b09f      	sub	sp, #124	; 0x7c
 80170c2:	ac21      	add	r4, sp, #132	; 0x84
 80170c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80170c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80170cc:	9201      	str	r2, [sp, #4]
 80170ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80170d2:	9004      	str	r0, [sp, #16]
 80170d4:	9008      	str	r0, [sp, #32]
 80170d6:	f7e9 f925 	bl	8000324 <strlen>
 80170da:	4b0c      	ldr	r3, [pc, #48]	; (801710c <siscanf+0x50>)
 80170dc:	9005      	str	r0, [sp, #20]
 80170de:	9009      	str	r0, [sp, #36]	; 0x24
 80170e0:	930d      	str	r3, [sp, #52]	; 0x34
 80170e2:	480b      	ldr	r0, [pc, #44]	; (8017110 <siscanf+0x54>)
 80170e4:	9a01      	ldr	r2, [sp, #4]
 80170e6:	6800      	ldr	r0, [r0, #0]
 80170e8:	9403      	str	r4, [sp, #12]
 80170ea:	2300      	movs	r3, #0
 80170ec:	9311      	str	r3, [sp, #68]	; 0x44
 80170ee:	9316      	str	r3, [sp, #88]	; 0x58
 80170f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80170f8:	a904      	add	r1, sp, #16
 80170fa:	4623      	mov	r3, r4
 80170fc:	f000 fb00 	bl	8017700 <__ssvfiscanf_r>
 8017100:	b01f      	add	sp, #124	; 0x7c
 8017102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017106:	b003      	add	sp, #12
 8017108:	4770      	bx	lr
 801710a:	bf00      	nop
 801710c:	08017115 	.word	0x08017115
 8017110:	2400014c 	.word	0x2400014c

08017114 <__seofread>:
 8017114:	2000      	movs	r0, #0
 8017116:	4770      	bx	lr

08017118 <memset>:
 8017118:	4402      	add	r2, r0
 801711a:	4603      	mov	r3, r0
 801711c:	4293      	cmp	r3, r2
 801711e:	d100      	bne.n	8017122 <memset+0xa>
 8017120:	4770      	bx	lr
 8017122:	f803 1b01 	strb.w	r1, [r3], #1
 8017126:	e7f9      	b.n	801711c <memset+0x4>

08017128 <__errno>:
 8017128:	4b01      	ldr	r3, [pc, #4]	; (8017130 <__errno+0x8>)
 801712a:	6818      	ldr	r0, [r3, #0]
 801712c:	4770      	bx	lr
 801712e:	bf00      	nop
 8017130:	2400014c 	.word	0x2400014c

08017134 <__libc_init_array>:
 8017134:	b570      	push	{r4, r5, r6, lr}
 8017136:	4d0d      	ldr	r5, [pc, #52]	; (801716c <__libc_init_array+0x38>)
 8017138:	4c0d      	ldr	r4, [pc, #52]	; (8017170 <__libc_init_array+0x3c>)
 801713a:	1b64      	subs	r4, r4, r5
 801713c:	10a4      	asrs	r4, r4, #2
 801713e:	2600      	movs	r6, #0
 8017140:	42a6      	cmp	r6, r4
 8017142:	d109      	bne.n	8017158 <__libc_init_array+0x24>
 8017144:	4d0b      	ldr	r5, [pc, #44]	; (8017174 <__libc_init_array+0x40>)
 8017146:	4c0c      	ldr	r4, [pc, #48]	; (8017178 <__libc_init_array+0x44>)
 8017148:	f001 f8fe 	bl	8018348 <_init>
 801714c:	1b64      	subs	r4, r4, r5
 801714e:	10a4      	asrs	r4, r4, #2
 8017150:	2600      	movs	r6, #0
 8017152:	42a6      	cmp	r6, r4
 8017154:	d105      	bne.n	8017162 <__libc_init_array+0x2e>
 8017156:	bd70      	pop	{r4, r5, r6, pc}
 8017158:	f855 3b04 	ldr.w	r3, [r5], #4
 801715c:	4798      	blx	r3
 801715e:	3601      	adds	r6, #1
 8017160:	e7ee      	b.n	8017140 <__libc_init_array+0xc>
 8017162:	f855 3b04 	ldr.w	r3, [r5], #4
 8017166:	4798      	blx	r3
 8017168:	3601      	adds	r6, #1
 801716a:	e7f2      	b.n	8017152 <__libc_init_array+0x1e>
 801716c:	08018720 	.word	0x08018720
 8017170:	08018720 	.word	0x08018720
 8017174:	08018720 	.word	0x08018720
 8017178:	08018724 	.word	0x08018724

0801717c <__retarget_lock_acquire_recursive>:
 801717c:	4770      	bx	lr

0801717e <__retarget_lock_release_recursive>:
 801717e:	4770      	bx	lr

08017180 <strcpy>:
 8017180:	4603      	mov	r3, r0
 8017182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017186:	f803 2b01 	strb.w	r2, [r3], #1
 801718a:	2a00      	cmp	r2, #0
 801718c:	d1f9      	bne.n	8017182 <strcpy+0x2>
 801718e:	4770      	bx	lr

08017190 <memcpy>:
 8017190:	440a      	add	r2, r1
 8017192:	4291      	cmp	r1, r2
 8017194:	f100 33ff 	add.w	r3, r0, #4294967295
 8017198:	d100      	bne.n	801719c <memcpy+0xc>
 801719a:	4770      	bx	lr
 801719c:	b510      	push	{r4, lr}
 801719e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171a6:	4291      	cmp	r1, r2
 80171a8:	d1f9      	bne.n	801719e <memcpy+0xe>
 80171aa:	bd10      	pop	{r4, pc}

080171ac <_free_r>:
 80171ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171ae:	2900      	cmp	r1, #0
 80171b0:	d044      	beq.n	801723c <_free_r+0x90>
 80171b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171b6:	9001      	str	r0, [sp, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	f1a1 0404 	sub.w	r4, r1, #4
 80171be:	bfb8      	it	lt
 80171c0:	18e4      	addlt	r4, r4, r3
 80171c2:	f000 f8df 	bl	8017384 <__malloc_lock>
 80171c6:	4a1e      	ldr	r2, [pc, #120]	; (8017240 <_free_r+0x94>)
 80171c8:	9801      	ldr	r0, [sp, #4]
 80171ca:	6813      	ldr	r3, [r2, #0]
 80171cc:	b933      	cbnz	r3, 80171dc <_free_r+0x30>
 80171ce:	6063      	str	r3, [r4, #4]
 80171d0:	6014      	str	r4, [r2, #0]
 80171d2:	b003      	add	sp, #12
 80171d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171d8:	f000 b8da 	b.w	8017390 <__malloc_unlock>
 80171dc:	42a3      	cmp	r3, r4
 80171de:	d908      	bls.n	80171f2 <_free_r+0x46>
 80171e0:	6825      	ldr	r5, [r4, #0]
 80171e2:	1961      	adds	r1, r4, r5
 80171e4:	428b      	cmp	r3, r1
 80171e6:	bf01      	itttt	eq
 80171e8:	6819      	ldreq	r1, [r3, #0]
 80171ea:	685b      	ldreq	r3, [r3, #4]
 80171ec:	1949      	addeq	r1, r1, r5
 80171ee:	6021      	streq	r1, [r4, #0]
 80171f0:	e7ed      	b.n	80171ce <_free_r+0x22>
 80171f2:	461a      	mov	r2, r3
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	b10b      	cbz	r3, 80171fc <_free_r+0x50>
 80171f8:	42a3      	cmp	r3, r4
 80171fa:	d9fa      	bls.n	80171f2 <_free_r+0x46>
 80171fc:	6811      	ldr	r1, [r2, #0]
 80171fe:	1855      	adds	r5, r2, r1
 8017200:	42a5      	cmp	r5, r4
 8017202:	d10b      	bne.n	801721c <_free_r+0x70>
 8017204:	6824      	ldr	r4, [r4, #0]
 8017206:	4421      	add	r1, r4
 8017208:	1854      	adds	r4, r2, r1
 801720a:	42a3      	cmp	r3, r4
 801720c:	6011      	str	r1, [r2, #0]
 801720e:	d1e0      	bne.n	80171d2 <_free_r+0x26>
 8017210:	681c      	ldr	r4, [r3, #0]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	6053      	str	r3, [r2, #4]
 8017216:	440c      	add	r4, r1
 8017218:	6014      	str	r4, [r2, #0]
 801721a:	e7da      	b.n	80171d2 <_free_r+0x26>
 801721c:	d902      	bls.n	8017224 <_free_r+0x78>
 801721e:	230c      	movs	r3, #12
 8017220:	6003      	str	r3, [r0, #0]
 8017222:	e7d6      	b.n	80171d2 <_free_r+0x26>
 8017224:	6825      	ldr	r5, [r4, #0]
 8017226:	1961      	adds	r1, r4, r5
 8017228:	428b      	cmp	r3, r1
 801722a:	bf04      	itt	eq
 801722c:	6819      	ldreq	r1, [r3, #0]
 801722e:	685b      	ldreq	r3, [r3, #4]
 8017230:	6063      	str	r3, [r4, #4]
 8017232:	bf04      	itt	eq
 8017234:	1949      	addeq	r1, r1, r5
 8017236:	6021      	streq	r1, [r4, #0]
 8017238:	6054      	str	r4, [r2, #4]
 801723a:	e7ca      	b.n	80171d2 <_free_r+0x26>
 801723c:	b003      	add	sp, #12
 801723e:	bd30      	pop	{r4, r5, pc}
 8017240:	2400333c 	.word	0x2400333c

08017244 <sbrk_aligned>:
 8017244:	b570      	push	{r4, r5, r6, lr}
 8017246:	4e0e      	ldr	r6, [pc, #56]	; (8017280 <sbrk_aligned+0x3c>)
 8017248:	460c      	mov	r4, r1
 801724a:	6831      	ldr	r1, [r6, #0]
 801724c:	4605      	mov	r5, r0
 801724e:	b911      	cbnz	r1, 8017256 <sbrk_aligned+0x12>
 8017250:	f000 ff3a 	bl	80180c8 <_sbrk_r>
 8017254:	6030      	str	r0, [r6, #0]
 8017256:	4621      	mov	r1, r4
 8017258:	4628      	mov	r0, r5
 801725a:	f000 ff35 	bl	80180c8 <_sbrk_r>
 801725e:	1c43      	adds	r3, r0, #1
 8017260:	d00a      	beq.n	8017278 <sbrk_aligned+0x34>
 8017262:	1cc4      	adds	r4, r0, #3
 8017264:	f024 0403 	bic.w	r4, r4, #3
 8017268:	42a0      	cmp	r0, r4
 801726a:	d007      	beq.n	801727c <sbrk_aligned+0x38>
 801726c:	1a21      	subs	r1, r4, r0
 801726e:	4628      	mov	r0, r5
 8017270:	f000 ff2a 	bl	80180c8 <_sbrk_r>
 8017274:	3001      	adds	r0, #1
 8017276:	d101      	bne.n	801727c <sbrk_aligned+0x38>
 8017278:	f04f 34ff 	mov.w	r4, #4294967295
 801727c:	4620      	mov	r0, r4
 801727e:	bd70      	pop	{r4, r5, r6, pc}
 8017280:	24003340 	.word	0x24003340

08017284 <_malloc_r>:
 8017284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017288:	1ccd      	adds	r5, r1, #3
 801728a:	f025 0503 	bic.w	r5, r5, #3
 801728e:	3508      	adds	r5, #8
 8017290:	2d0c      	cmp	r5, #12
 8017292:	bf38      	it	cc
 8017294:	250c      	movcc	r5, #12
 8017296:	2d00      	cmp	r5, #0
 8017298:	4607      	mov	r7, r0
 801729a:	db01      	blt.n	80172a0 <_malloc_r+0x1c>
 801729c:	42a9      	cmp	r1, r5
 801729e:	d905      	bls.n	80172ac <_malloc_r+0x28>
 80172a0:	230c      	movs	r3, #12
 80172a2:	603b      	str	r3, [r7, #0]
 80172a4:	2600      	movs	r6, #0
 80172a6:	4630      	mov	r0, r6
 80172a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017380 <_malloc_r+0xfc>
 80172b0:	f000 f868 	bl	8017384 <__malloc_lock>
 80172b4:	f8d8 3000 	ldr.w	r3, [r8]
 80172b8:	461c      	mov	r4, r3
 80172ba:	bb5c      	cbnz	r4, 8017314 <_malloc_r+0x90>
 80172bc:	4629      	mov	r1, r5
 80172be:	4638      	mov	r0, r7
 80172c0:	f7ff ffc0 	bl	8017244 <sbrk_aligned>
 80172c4:	1c43      	adds	r3, r0, #1
 80172c6:	4604      	mov	r4, r0
 80172c8:	d155      	bne.n	8017376 <_malloc_r+0xf2>
 80172ca:	f8d8 4000 	ldr.w	r4, [r8]
 80172ce:	4626      	mov	r6, r4
 80172d0:	2e00      	cmp	r6, #0
 80172d2:	d145      	bne.n	8017360 <_malloc_r+0xdc>
 80172d4:	2c00      	cmp	r4, #0
 80172d6:	d048      	beq.n	801736a <_malloc_r+0xe6>
 80172d8:	6823      	ldr	r3, [r4, #0]
 80172da:	4631      	mov	r1, r6
 80172dc:	4638      	mov	r0, r7
 80172de:	eb04 0903 	add.w	r9, r4, r3
 80172e2:	f000 fef1 	bl	80180c8 <_sbrk_r>
 80172e6:	4581      	cmp	r9, r0
 80172e8:	d13f      	bne.n	801736a <_malloc_r+0xe6>
 80172ea:	6821      	ldr	r1, [r4, #0]
 80172ec:	1a6d      	subs	r5, r5, r1
 80172ee:	4629      	mov	r1, r5
 80172f0:	4638      	mov	r0, r7
 80172f2:	f7ff ffa7 	bl	8017244 <sbrk_aligned>
 80172f6:	3001      	adds	r0, #1
 80172f8:	d037      	beq.n	801736a <_malloc_r+0xe6>
 80172fa:	6823      	ldr	r3, [r4, #0]
 80172fc:	442b      	add	r3, r5
 80172fe:	6023      	str	r3, [r4, #0]
 8017300:	f8d8 3000 	ldr.w	r3, [r8]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d038      	beq.n	801737a <_malloc_r+0xf6>
 8017308:	685a      	ldr	r2, [r3, #4]
 801730a:	42a2      	cmp	r2, r4
 801730c:	d12b      	bne.n	8017366 <_malloc_r+0xe2>
 801730e:	2200      	movs	r2, #0
 8017310:	605a      	str	r2, [r3, #4]
 8017312:	e00f      	b.n	8017334 <_malloc_r+0xb0>
 8017314:	6822      	ldr	r2, [r4, #0]
 8017316:	1b52      	subs	r2, r2, r5
 8017318:	d41f      	bmi.n	801735a <_malloc_r+0xd6>
 801731a:	2a0b      	cmp	r2, #11
 801731c:	d917      	bls.n	801734e <_malloc_r+0xca>
 801731e:	1961      	adds	r1, r4, r5
 8017320:	42a3      	cmp	r3, r4
 8017322:	6025      	str	r5, [r4, #0]
 8017324:	bf18      	it	ne
 8017326:	6059      	strne	r1, [r3, #4]
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	bf08      	it	eq
 801732c:	f8c8 1000 	streq.w	r1, [r8]
 8017330:	5162      	str	r2, [r4, r5]
 8017332:	604b      	str	r3, [r1, #4]
 8017334:	4638      	mov	r0, r7
 8017336:	f104 060b 	add.w	r6, r4, #11
 801733a:	f000 f829 	bl	8017390 <__malloc_unlock>
 801733e:	f026 0607 	bic.w	r6, r6, #7
 8017342:	1d23      	adds	r3, r4, #4
 8017344:	1af2      	subs	r2, r6, r3
 8017346:	d0ae      	beq.n	80172a6 <_malloc_r+0x22>
 8017348:	1b9b      	subs	r3, r3, r6
 801734a:	50a3      	str	r3, [r4, r2]
 801734c:	e7ab      	b.n	80172a6 <_malloc_r+0x22>
 801734e:	42a3      	cmp	r3, r4
 8017350:	6862      	ldr	r2, [r4, #4]
 8017352:	d1dd      	bne.n	8017310 <_malloc_r+0x8c>
 8017354:	f8c8 2000 	str.w	r2, [r8]
 8017358:	e7ec      	b.n	8017334 <_malloc_r+0xb0>
 801735a:	4623      	mov	r3, r4
 801735c:	6864      	ldr	r4, [r4, #4]
 801735e:	e7ac      	b.n	80172ba <_malloc_r+0x36>
 8017360:	4634      	mov	r4, r6
 8017362:	6876      	ldr	r6, [r6, #4]
 8017364:	e7b4      	b.n	80172d0 <_malloc_r+0x4c>
 8017366:	4613      	mov	r3, r2
 8017368:	e7cc      	b.n	8017304 <_malloc_r+0x80>
 801736a:	230c      	movs	r3, #12
 801736c:	603b      	str	r3, [r7, #0]
 801736e:	4638      	mov	r0, r7
 8017370:	f000 f80e 	bl	8017390 <__malloc_unlock>
 8017374:	e797      	b.n	80172a6 <_malloc_r+0x22>
 8017376:	6025      	str	r5, [r4, #0]
 8017378:	e7dc      	b.n	8017334 <_malloc_r+0xb0>
 801737a:	605b      	str	r3, [r3, #4]
 801737c:	deff      	udf	#255	; 0xff
 801737e:	bf00      	nop
 8017380:	2400333c 	.word	0x2400333c

08017384 <__malloc_lock>:
 8017384:	4801      	ldr	r0, [pc, #4]	; (801738c <__malloc_lock+0x8>)
 8017386:	f7ff bef9 	b.w	801717c <__retarget_lock_acquire_recursive>
 801738a:	bf00      	nop
 801738c:	24003338 	.word	0x24003338

08017390 <__malloc_unlock>:
 8017390:	4801      	ldr	r0, [pc, #4]	; (8017398 <__malloc_unlock+0x8>)
 8017392:	f7ff bef4 	b.w	801717e <__retarget_lock_release_recursive>
 8017396:	bf00      	nop
 8017398:	24003338 	.word	0x24003338

0801739c <__ssputs_r>:
 801739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173a0:	688e      	ldr	r6, [r1, #8]
 80173a2:	461f      	mov	r7, r3
 80173a4:	42be      	cmp	r6, r7
 80173a6:	680b      	ldr	r3, [r1, #0]
 80173a8:	4682      	mov	sl, r0
 80173aa:	460c      	mov	r4, r1
 80173ac:	4690      	mov	r8, r2
 80173ae:	d82c      	bhi.n	801740a <__ssputs_r+0x6e>
 80173b0:	898a      	ldrh	r2, [r1, #12]
 80173b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173b6:	d026      	beq.n	8017406 <__ssputs_r+0x6a>
 80173b8:	6965      	ldr	r5, [r4, #20]
 80173ba:	6909      	ldr	r1, [r1, #16]
 80173bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173c0:	eba3 0901 	sub.w	r9, r3, r1
 80173c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173c8:	1c7b      	adds	r3, r7, #1
 80173ca:	444b      	add	r3, r9
 80173cc:	106d      	asrs	r5, r5, #1
 80173ce:	429d      	cmp	r5, r3
 80173d0:	bf38      	it	cc
 80173d2:	461d      	movcc	r5, r3
 80173d4:	0553      	lsls	r3, r2, #21
 80173d6:	d527      	bpl.n	8017428 <__ssputs_r+0x8c>
 80173d8:	4629      	mov	r1, r5
 80173da:	f7ff ff53 	bl	8017284 <_malloc_r>
 80173de:	4606      	mov	r6, r0
 80173e0:	b360      	cbz	r0, 801743c <__ssputs_r+0xa0>
 80173e2:	6921      	ldr	r1, [r4, #16]
 80173e4:	464a      	mov	r2, r9
 80173e6:	f7ff fed3 	bl	8017190 <memcpy>
 80173ea:	89a3      	ldrh	r3, [r4, #12]
 80173ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173f4:	81a3      	strh	r3, [r4, #12]
 80173f6:	6126      	str	r6, [r4, #16]
 80173f8:	6165      	str	r5, [r4, #20]
 80173fa:	444e      	add	r6, r9
 80173fc:	eba5 0509 	sub.w	r5, r5, r9
 8017400:	6026      	str	r6, [r4, #0]
 8017402:	60a5      	str	r5, [r4, #8]
 8017404:	463e      	mov	r6, r7
 8017406:	42be      	cmp	r6, r7
 8017408:	d900      	bls.n	801740c <__ssputs_r+0x70>
 801740a:	463e      	mov	r6, r7
 801740c:	6820      	ldr	r0, [r4, #0]
 801740e:	4632      	mov	r2, r6
 8017410:	4641      	mov	r1, r8
 8017412:	f000 fe3e 	bl	8018092 <memmove>
 8017416:	68a3      	ldr	r3, [r4, #8]
 8017418:	1b9b      	subs	r3, r3, r6
 801741a:	60a3      	str	r3, [r4, #8]
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	4433      	add	r3, r6
 8017420:	6023      	str	r3, [r4, #0]
 8017422:	2000      	movs	r0, #0
 8017424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017428:	462a      	mov	r2, r5
 801742a:	f000 fe5d 	bl	80180e8 <_realloc_r>
 801742e:	4606      	mov	r6, r0
 8017430:	2800      	cmp	r0, #0
 8017432:	d1e0      	bne.n	80173f6 <__ssputs_r+0x5a>
 8017434:	6921      	ldr	r1, [r4, #16]
 8017436:	4650      	mov	r0, sl
 8017438:	f7ff feb8 	bl	80171ac <_free_r>
 801743c:	230c      	movs	r3, #12
 801743e:	f8ca 3000 	str.w	r3, [sl]
 8017442:	89a3      	ldrh	r3, [r4, #12]
 8017444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017448:	81a3      	strh	r3, [r4, #12]
 801744a:	f04f 30ff 	mov.w	r0, #4294967295
 801744e:	e7e9      	b.n	8017424 <__ssputs_r+0x88>

08017450 <_svfiprintf_r>:
 8017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	4698      	mov	r8, r3
 8017456:	898b      	ldrh	r3, [r1, #12]
 8017458:	061b      	lsls	r3, r3, #24
 801745a:	b09d      	sub	sp, #116	; 0x74
 801745c:	4607      	mov	r7, r0
 801745e:	460d      	mov	r5, r1
 8017460:	4614      	mov	r4, r2
 8017462:	d50e      	bpl.n	8017482 <_svfiprintf_r+0x32>
 8017464:	690b      	ldr	r3, [r1, #16]
 8017466:	b963      	cbnz	r3, 8017482 <_svfiprintf_r+0x32>
 8017468:	2140      	movs	r1, #64	; 0x40
 801746a:	f7ff ff0b 	bl	8017284 <_malloc_r>
 801746e:	6028      	str	r0, [r5, #0]
 8017470:	6128      	str	r0, [r5, #16]
 8017472:	b920      	cbnz	r0, 801747e <_svfiprintf_r+0x2e>
 8017474:	230c      	movs	r3, #12
 8017476:	603b      	str	r3, [r7, #0]
 8017478:	f04f 30ff 	mov.w	r0, #4294967295
 801747c:	e0d0      	b.n	8017620 <_svfiprintf_r+0x1d0>
 801747e:	2340      	movs	r3, #64	; 0x40
 8017480:	616b      	str	r3, [r5, #20]
 8017482:	2300      	movs	r3, #0
 8017484:	9309      	str	r3, [sp, #36]	; 0x24
 8017486:	2320      	movs	r3, #32
 8017488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801748c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017490:	2330      	movs	r3, #48	; 0x30
 8017492:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017638 <_svfiprintf_r+0x1e8>
 8017496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801749a:	f04f 0901 	mov.w	r9, #1
 801749e:	4623      	mov	r3, r4
 80174a0:	469a      	mov	sl, r3
 80174a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174a6:	b10a      	cbz	r2, 80174ac <_svfiprintf_r+0x5c>
 80174a8:	2a25      	cmp	r2, #37	; 0x25
 80174aa:	d1f9      	bne.n	80174a0 <_svfiprintf_r+0x50>
 80174ac:	ebba 0b04 	subs.w	fp, sl, r4
 80174b0:	d00b      	beq.n	80174ca <_svfiprintf_r+0x7a>
 80174b2:	465b      	mov	r3, fp
 80174b4:	4622      	mov	r2, r4
 80174b6:	4629      	mov	r1, r5
 80174b8:	4638      	mov	r0, r7
 80174ba:	f7ff ff6f 	bl	801739c <__ssputs_r>
 80174be:	3001      	adds	r0, #1
 80174c0:	f000 80a9 	beq.w	8017616 <_svfiprintf_r+0x1c6>
 80174c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174c6:	445a      	add	r2, fp
 80174c8:	9209      	str	r2, [sp, #36]	; 0x24
 80174ca:	f89a 3000 	ldrb.w	r3, [sl]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 80a1 	beq.w	8017616 <_svfiprintf_r+0x1c6>
 80174d4:	2300      	movs	r3, #0
 80174d6:	f04f 32ff 	mov.w	r2, #4294967295
 80174da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174de:	f10a 0a01 	add.w	sl, sl, #1
 80174e2:	9304      	str	r3, [sp, #16]
 80174e4:	9307      	str	r3, [sp, #28]
 80174e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174ea:	931a      	str	r3, [sp, #104]	; 0x68
 80174ec:	4654      	mov	r4, sl
 80174ee:	2205      	movs	r2, #5
 80174f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174f4:	4850      	ldr	r0, [pc, #320]	; (8017638 <_svfiprintf_r+0x1e8>)
 80174f6:	f7e8 ff23 	bl	8000340 <memchr>
 80174fa:	9a04      	ldr	r2, [sp, #16]
 80174fc:	b9d8      	cbnz	r0, 8017536 <_svfiprintf_r+0xe6>
 80174fe:	06d0      	lsls	r0, r2, #27
 8017500:	bf44      	itt	mi
 8017502:	2320      	movmi	r3, #32
 8017504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017508:	0711      	lsls	r1, r2, #28
 801750a:	bf44      	itt	mi
 801750c:	232b      	movmi	r3, #43	; 0x2b
 801750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017512:	f89a 3000 	ldrb.w	r3, [sl]
 8017516:	2b2a      	cmp	r3, #42	; 0x2a
 8017518:	d015      	beq.n	8017546 <_svfiprintf_r+0xf6>
 801751a:	9a07      	ldr	r2, [sp, #28]
 801751c:	4654      	mov	r4, sl
 801751e:	2000      	movs	r0, #0
 8017520:	f04f 0c0a 	mov.w	ip, #10
 8017524:	4621      	mov	r1, r4
 8017526:	f811 3b01 	ldrb.w	r3, [r1], #1
 801752a:	3b30      	subs	r3, #48	; 0x30
 801752c:	2b09      	cmp	r3, #9
 801752e:	d94d      	bls.n	80175cc <_svfiprintf_r+0x17c>
 8017530:	b1b0      	cbz	r0, 8017560 <_svfiprintf_r+0x110>
 8017532:	9207      	str	r2, [sp, #28]
 8017534:	e014      	b.n	8017560 <_svfiprintf_r+0x110>
 8017536:	eba0 0308 	sub.w	r3, r0, r8
 801753a:	fa09 f303 	lsl.w	r3, r9, r3
 801753e:	4313      	orrs	r3, r2
 8017540:	9304      	str	r3, [sp, #16]
 8017542:	46a2      	mov	sl, r4
 8017544:	e7d2      	b.n	80174ec <_svfiprintf_r+0x9c>
 8017546:	9b03      	ldr	r3, [sp, #12]
 8017548:	1d19      	adds	r1, r3, #4
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	9103      	str	r1, [sp, #12]
 801754e:	2b00      	cmp	r3, #0
 8017550:	bfbb      	ittet	lt
 8017552:	425b      	neglt	r3, r3
 8017554:	f042 0202 	orrlt.w	r2, r2, #2
 8017558:	9307      	strge	r3, [sp, #28]
 801755a:	9307      	strlt	r3, [sp, #28]
 801755c:	bfb8      	it	lt
 801755e:	9204      	strlt	r2, [sp, #16]
 8017560:	7823      	ldrb	r3, [r4, #0]
 8017562:	2b2e      	cmp	r3, #46	; 0x2e
 8017564:	d10c      	bne.n	8017580 <_svfiprintf_r+0x130>
 8017566:	7863      	ldrb	r3, [r4, #1]
 8017568:	2b2a      	cmp	r3, #42	; 0x2a
 801756a:	d134      	bne.n	80175d6 <_svfiprintf_r+0x186>
 801756c:	9b03      	ldr	r3, [sp, #12]
 801756e:	1d1a      	adds	r2, r3, #4
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	9203      	str	r2, [sp, #12]
 8017574:	2b00      	cmp	r3, #0
 8017576:	bfb8      	it	lt
 8017578:	f04f 33ff 	movlt.w	r3, #4294967295
 801757c:	3402      	adds	r4, #2
 801757e:	9305      	str	r3, [sp, #20]
 8017580:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017648 <_svfiprintf_r+0x1f8>
 8017584:	7821      	ldrb	r1, [r4, #0]
 8017586:	2203      	movs	r2, #3
 8017588:	4650      	mov	r0, sl
 801758a:	f7e8 fed9 	bl	8000340 <memchr>
 801758e:	b138      	cbz	r0, 80175a0 <_svfiprintf_r+0x150>
 8017590:	9b04      	ldr	r3, [sp, #16]
 8017592:	eba0 000a 	sub.w	r0, r0, sl
 8017596:	2240      	movs	r2, #64	; 0x40
 8017598:	4082      	lsls	r2, r0
 801759a:	4313      	orrs	r3, r2
 801759c:	3401      	adds	r4, #1
 801759e:	9304      	str	r3, [sp, #16]
 80175a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a4:	4825      	ldr	r0, [pc, #148]	; (801763c <_svfiprintf_r+0x1ec>)
 80175a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175aa:	2206      	movs	r2, #6
 80175ac:	f7e8 fec8 	bl	8000340 <memchr>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d038      	beq.n	8017626 <_svfiprintf_r+0x1d6>
 80175b4:	4b22      	ldr	r3, [pc, #136]	; (8017640 <_svfiprintf_r+0x1f0>)
 80175b6:	bb1b      	cbnz	r3, 8017600 <_svfiprintf_r+0x1b0>
 80175b8:	9b03      	ldr	r3, [sp, #12]
 80175ba:	3307      	adds	r3, #7
 80175bc:	f023 0307 	bic.w	r3, r3, #7
 80175c0:	3308      	adds	r3, #8
 80175c2:	9303      	str	r3, [sp, #12]
 80175c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175c6:	4433      	add	r3, r6
 80175c8:	9309      	str	r3, [sp, #36]	; 0x24
 80175ca:	e768      	b.n	801749e <_svfiprintf_r+0x4e>
 80175cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80175d0:	460c      	mov	r4, r1
 80175d2:	2001      	movs	r0, #1
 80175d4:	e7a6      	b.n	8017524 <_svfiprintf_r+0xd4>
 80175d6:	2300      	movs	r3, #0
 80175d8:	3401      	adds	r4, #1
 80175da:	9305      	str	r3, [sp, #20]
 80175dc:	4619      	mov	r1, r3
 80175de:	f04f 0c0a 	mov.w	ip, #10
 80175e2:	4620      	mov	r0, r4
 80175e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175e8:	3a30      	subs	r2, #48	; 0x30
 80175ea:	2a09      	cmp	r2, #9
 80175ec:	d903      	bls.n	80175f6 <_svfiprintf_r+0x1a6>
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d0c6      	beq.n	8017580 <_svfiprintf_r+0x130>
 80175f2:	9105      	str	r1, [sp, #20]
 80175f4:	e7c4      	b.n	8017580 <_svfiprintf_r+0x130>
 80175f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80175fa:	4604      	mov	r4, r0
 80175fc:	2301      	movs	r3, #1
 80175fe:	e7f0      	b.n	80175e2 <_svfiprintf_r+0x192>
 8017600:	ab03      	add	r3, sp, #12
 8017602:	9300      	str	r3, [sp, #0]
 8017604:	462a      	mov	r2, r5
 8017606:	4b0f      	ldr	r3, [pc, #60]	; (8017644 <_svfiprintf_r+0x1f4>)
 8017608:	a904      	add	r1, sp, #16
 801760a:	4638      	mov	r0, r7
 801760c:	f3af 8000 	nop.w
 8017610:	1c42      	adds	r2, r0, #1
 8017612:	4606      	mov	r6, r0
 8017614:	d1d6      	bne.n	80175c4 <_svfiprintf_r+0x174>
 8017616:	89ab      	ldrh	r3, [r5, #12]
 8017618:	065b      	lsls	r3, r3, #25
 801761a:	f53f af2d 	bmi.w	8017478 <_svfiprintf_r+0x28>
 801761e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017620:	b01d      	add	sp, #116	; 0x74
 8017622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017626:	ab03      	add	r3, sp, #12
 8017628:	9300      	str	r3, [sp, #0]
 801762a:	462a      	mov	r2, r5
 801762c:	4b05      	ldr	r3, [pc, #20]	; (8017644 <_svfiprintf_r+0x1f4>)
 801762e:	a904      	add	r1, sp, #16
 8017630:	4638      	mov	r0, r7
 8017632:	f000 fa4b 	bl	8017acc <_printf_i>
 8017636:	e7eb      	b.n	8017610 <_svfiprintf_r+0x1c0>
 8017638:	080185c8 	.word	0x080185c8
 801763c:	080185d2 	.word	0x080185d2
 8017640:	00000000 	.word	0x00000000
 8017644:	0801739d 	.word	0x0801739d
 8017648:	080185ce 	.word	0x080185ce

0801764c <_sungetc_r>:
 801764c:	b538      	push	{r3, r4, r5, lr}
 801764e:	1c4b      	adds	r3, r1, #1
 8017650:	4614      	mov	r4, r2
 8017652:	d103      	bne.n	801765c <_sungetc_r+0x10>
 8017654:	f04f 35ff 	mov.w	r5, #4294967295
 8017658:	4628      	mov	r0, r5
 801765a:	bd38      	pop	{r3, r4, r5, pc}
 801765c:	8993      	ldrh	r3, [r2, #12]
 801765e:	f023 0320 	bic.w	r3, r3, #32
 8017662:	8193      	strh	r3, [r2, #12]
 8017664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017666:	6852      	ldr	r2, [r2, #4]
 8017668:	b2cd      	uxtb	r5, r1
 801766a:	b18b      	cbz	r3, 8017690 <_sungetc_r+0x44>
 801766c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801766e:	4293      	cmp	r3, r2
 8017670:	dd08      	ble.n	8017684 <_sungetc_r+0x38>
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	1e5a      	subs	r2, r3, #1
 8017676:	6022      	str	r2, [r4, #0]
 8017678:	f803 5c01 	strb.w	r5, [r3, #-1]
 801767c:	6863      	ldr	r3, [r4, #4]
 801767e:	3301      	adds	r3, #1
 8017680:	6063      	str	r3, [r4, #4]
 8017682:	e7e9      	b.n	8017658 <_sungetc_r+0xc>
 8017684:	4621      	mov	r1, r4
 8017686:	f000 fcca 	bl	801801e <__submore>
 801768a:	2800      	cmp	r0, #0
 801768c:	d0f1      	beq.n	8017672 <_sungetc_r+0x26>
 801768e:	e7e1      	b.n	8017654 <_sungetc_r+0x8>
 8017690:	6921      	ldr	r1, [r4, #16]
 8017692:	6823      	ldr	r3, [r4, #0]
 8017694:	b151      	cbz	r1, 80176ac <_sungetc_r+0x60>
 8017696:	4299      	cmp	r1, r3
 8017698:	d208      	bcs.n	80176ac <_sungetc_r+0x60>
 801769a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801769e:	42a9      	cmp	r1, r5
 80176a0:	d104      	bne.n	80176ac <_sungetc_r+0x60>
 80176a2:	3b01      	subs	r3, #1
 80176a4:	3201      	adds	r2, #1
 80176a6:	6023      	str	r3, [r4, #0]
 80176a8:	6062      	str	r2, [r4, #4]
 80176aa:	e7d5      	b.n	8017658 <_sungetc_r+0xc>
 80176ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80176b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176b4:	6363      	str	r3, [r4, #52]	; 0x34
 80176b6:	2303      	movs	r3, #3
 80176b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80176ba:	4623      	mov	r3, r4
 80176bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176c0:	6023      	str	r3, [r4, #0]
 80176c2:	2301      	movs	r3, #1
 80176c4:	e7dc      	b.n	8017680 <_sungetc_r+0x34>

080176c6 <__ssrefill_r>:
 80176c6:	b510      	push	{r4, lr}
 80176c8:	460c      	mov	r4, r1
 80176ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176cc:	b169      	cbz	r1, 80176ea <__ssrefill_r+0x24>
 80176ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176d2:	4299      	cmp	r1, r3
 80176d4:	d001      	beq.n	80176da <__ssrefill_r+0x14>
 80176d6:	f7ff fd69 	bl	80171ac <_free_r>
 80176da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176dc:	6063      	str	r3, [r4, #4]
 80176de:	2000      	movs	r0, #0
 80176e0:	6360      	str	r0, [r4, #52]	; 0x34
 80176e2:	b113      	cbz	r3, 80176ea <__ssrefill_r+0x24>
 80176e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80176e6:	6023      	str	r3, [r4, #0]
 80176e8:	bd10      	pop	{r4, pc}
 80176ea:	6923      	ldr	r3, [r4, #16]
 80176ec:	6023      	str	r3, [r4, #0]
 80176ee:	2300      	movs	r3, #0
 80176f0:	6063      	str	r3, [r4, #4]
 80176f2:	89a3      	ldrh	r3, [r4, #12]
 80176f4:	f043 0320 	orr.w	r3, r3, #32
 80176f8:	81a3      	strh	r3, [r4, #12]
 80176fa:	f04f 30ff 	mov.w	r0, #4294967295
 80176fe:	e7f3      	b.n	80176e8 <__ssrefill_r+0x22>

08017700 <__ssvfiscanf_r>:
 8017700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017704:	460c      	mov	r4, r1
 8017706:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801770a:	2100      	movs	r1, #0
 801770c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017710:	49a6      	ldr	r1, [pc, #664]	; (80179ac <__ssvfiscanf_r+0x2ac>)
 8017712:	91a0      	str	r1, [sp, #640]	; 0x280
 8017714:	f10d 0804 	add.w	r8, sp, #4
 8017718:	49a5      	ldr	r1, [pc, #660]	; (80179b0 <__ssvfiscanf_r+0x2b0>)
 801771a:	4fa6      	ldr	r7, [pc, #664]	; (80179b4 <__ssvfiscanf_r+0x2b4>)
 801771c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80179b8 <__ssvfiscanf_r+0x2b8>
 8017720:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017724:	4606      	mov	r6, r0
 8017726:	91a1      	str	r1, [sp, #644]	; 0x284
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	7813      	ldrb	r3, [r2, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 815a 	beq.w	80179e6 <__ssvfiscanf_r+0x2e6>
 8017732:	5cf9      	ldrb	r1, [r7, r3]
 8017734:	f011 0108 	ands.w	r1, r1, #8
 8017738:	f102 0501 	add.w	r5, r2, #1
 801773c:	d019      	beq.n	8017772 <__ssvfiscanf_r+0x72>
 801773e:	6863      	ldr	r3, [r4, #4]
 8017740:	2b00      	cmp	r3, #0
 8017742:	dd0f      	ble.n	8017764 <__ssvfiscanf_r+0x64>
 8017744:	6823      	ldr	r3, [r4, #0]
 8017746:	781a      	ldrb	r2, [r3, #0]
 8017748:	5cba      	ldrb	r2, [r7, r2]
 801774a:	0712      	lsls	r2, r2, #28
 801774c:	d401      	bmi.n	8017752 <__ssvfiscanf_r+0x52>
 801774e:	462a      	mov	r2, r5
 8017750:	e7eb      	b.n	801772a <__ssvfiscanf_r+0x2a>
 8017752:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017754:	3201      	adds	r2, #1
 8017756:	9245      	str	r2, [sp, #276]	; 0x114
 8017758:	6862      	ldr	r2, [r4, #4]
 801775a:	3301      	adds	r3, #1
 801775c:	3a01      	subs	r2, #1
 801775e:	6062      	str	r2, [r4, #4]
 8017760:	6023      	str	r3, [r4, #0]
 8017762:	e7ec      	b.n	801773e <__ssvfiscanf_r+0x3e>
 8017764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017766:	4621      	mov	r1, r4
 8017768:	4630      	mov	r0, r6
 801776a:	4798      	blx	r3
 801776c:	2800      	cmp	r0, #0
 801776e:	d0e9      	beq.n	8017744 <__ssvfiscanf_r+0x44>
 8017770:	e7ed      	b.n	801774e <__ssvfiscanf_r+0x4e>
 8017772:	2b25      	cmp	r3, #37	; 0x25
 8017774:	d012      	beq.n	801779c <__ssvfiscanf_r+0x9c>
 8017776:	469a      	mov	sl, r3
 8017778:	6863      	ldr	r3, [r4, #4]
 801777a:	2b00      	cmp	r3, #0
 801777c:	f340 8091 	ble.w	80178a2 <__ssvfiscanf_r+0x1a2>
 8017780:	6822      	ldr	r2, [r4, #0]
 8017782:	7813      	ldrb	r3, [r2, #0]
 8017784:	4553      	cmp	r3, sl
 8017786:	f040 812e 	bne.w	80179e6 <__ssvfiscanf_r+0x2e6>
 801778a:	6863      	ldr	r3, [r4, #4]
 801778c:	3b01      	subs	r3, #1
 801778e:	6063      	str	r3, [r4, #4]
 8017790:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017792:	3201      	adds	r2, #1
 8017794:	3301      	adds	r3, #1
 8017796:	6022      	str	r2, [r4, #0]
 8017798:	9345      	str	r3, [sp, #276]	; 0x114
 801779a:	e7d8      	b.n	801774e <__ssvfiscanf_r+0x4e>
 801779c:	9141      	str	r1, [sp, #260]	; 0x104
 801779e:	9143      	str	r1, [sp, #268]	; 0x10c
 80177a0:	7853      	ldrb	r3, [r2, #1]
 80177a2:	2b2a      	cmp	r3, #42	; 0x2a
 80177a4:	bf02      	ittt	eq
 80177a6:	2310      	moveq	r3, #16
 80177a8:	1c95      	addeq	r5, r2, #2
 80177aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80177ac:	220a      	movs	r2, #10
 80177ae:	46aa      	mov	sl, r5
 80177b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80177b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80177b8:	2b09      	cmp	r3, #9
 80177ba:	d91c      	bls.n	80177f6 <__ssvfiscanf_r+0xf6>
 80177bc:	487e      	ldr	r0, [pc, #504]	; (80179b8 <__ssvfiscanf_r+0x2b8>)
 80177be:	2203      	movs	r2, #3
 80177c0:	f7e8 fdbe 	bl	8000340 <memchr>
 80177c4:	b138      	cbz	r0, 80177d6 <__ssvfiscanf_r+0xd6>
 80177c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177c8:	eba0 0009 	sub.w	r0, r0, r9
 80177cc:	2301      	movs	r3, #1
 80177ce:	4083      	lsls	r3, r0
 80177d0:	4313      	orrs	r3, r2
 80177d2:	9341      	str	r3, [sp, #260]	; 0x104
 80177d4:	4655      	mov	r5, sl
 80177d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177da:	2b78      	cmp	r3, #120	; 0x78
 80177dc:	d806      	bhi.n	80177ec <__ssvfiscanf_r+0xec>
 80177de:	2b57      	cmp	r3, #87	; 0x57
 80177e0:	d810      	bhi.n	8017804 <__ssvfiscanf_r+0x104>
 80177e2:	2b25      	cmp	r3, #37	; 0x25
 80177e4:	d0c7      	beq.n	8017776 <__ssvfiscanf_r+0x76>
 80177e6:	d857      	bhi.n	8017898 <__ssvfiscanf_r+0x198>
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d065      	beq.n	80178b8 <__ssvfiscanf_r+0x1b8>
 80177ec:	2303      	movs	r3, #3
 80177ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80177f0:	230a      	movs	r3, #10
 80177f2:	9342      	str	r3, [sp, #264]	; 0x108
 80177f4:	e076      	b.n	80178e4 <__ssvfiscanf_r+0x1e4>
 80177f6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80177f8:	fb02 1103 	mla	r1, r2, r3, r1
 80177fc:	3930      	subs	r1, #48	; 0x30
 80177fe:	9143      	str	r1, [sp, #268]	; 0x10c
 8017800:	4655      	mov	r5, sl
 8017802:	e7d4      	b.n	80177ae <__ssvfiscanf_r+0xae>
 8017804:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017808:	2a20      	cmp	r2, #32
 801780a:	d8ef      	bhi.n	80177ec <__ssvfiscanf_r+0xec>
 801780c:	a101      	add	r1, pc, #4	; (adr r1, 8017814 <__ssvfiscanf_r+0x114>)
 801780e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017812:	bf00      	nop
 8017814:	080178c7 	.word	0x080178c7
 8017818:	080177ed 	.word	0x080177ed
 801781c:	080177ed 	.word	0x080177ed
 8017820:	08017925 	.word	0x08017925
 8017824:	080177ed 	.word	0x080177ed
 8017828:	080177ed 	.word	0x080177ed
 801782c:	080177ed 	.word	0x080177ed
 8017830:	080177ed 	.word	0x080177ed
 8017834:	080177ed 	.word	0x080177ed
 8017838:	080177ed 	.word	0x080177ed
 801783c:	080177ed 	.word	0x080177ed
 8017840:	0801793b 	.word	0x0801793b
 8017844:	08017921 	.word	0x08017921
 8017848:	0801789f 	.word	0x0801789f
 801784c:	0801789f 	.word	0x0801789f
 8017850:	0801789f 	.word	0x0801789f
 8017854:	080177ed 	.word	0x080177ed
 8017858:	080178dd 	.word	0x080178dd
 801785c:	080177ed 	.word	0x080177ed
 8017860:	080177ed 	.word	0x080177ed
 8017864:	080177ed 	.word	0x080177ed
 8017868:	080177ed 	.word	0x080177ed
 801786c:	0801794b 	.word	0x0801794b
 8017870:	08017919 	.word	0x08017919
 8017874:	080178bf 	.word	0x080178bf
 8017878:	080177ed 	.word	0x080177ed
 801787c:	080177ed 	.word	0x080177ed
 8017880:	08017947 	.word	0x08017947
 8017884:	080177ed 	.word	0x080177ed
 8017888:	08017921 	.word	0x08017921
 801788c:	080177ed 	.word	0x080177ed
 8017890:	080177ed 	.word	0x080177ed
 8017894:	080178c7 	.word	0x080178c7
 8017898:	3b45      	subs	r3, #69	; 0x45
 801789a:	2b02      	cmp	r3, #2
 801789c:	d8a6      	bhi.n	80177ec <__ssvfiscanf_r+0xec>
 801789e:	2305      	movs	r3, #5
 80178a0:	e01f      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 80178a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178a4:	4621      	mov	r1, r4
 80178a6:	4630      	mov	r0, r6
 80178a8:	4798      	blx	r3
 80178aa:	2800      	cmp	r0, #0
 80178ac:	f43f af68 	beq.w	8017780 <__ssvfiscanf_r+0x80>
 80178b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80178b2:	2800      	cmp	r0, #0
 80178b4:	f040 808d 	bne.w	80179d2 <__ssvfiscanf_r+0x2d2>
 80178b8:	f04f 30ff 	mov.w	r0, #4294967295
 80178bc:	e08f      	b.n	80179de <__ssvfiscanf_r+0x2de>
 80178be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178c0:	f042 0220 	orr.w	r2, r2, #32
 80178c4:	9241      	str	r2, [sp, #260]	; 0x104
 80178c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178cc:	9241      	str	r2, [sp, #260]	; 0x104
 80178ce:	2210      	movs	r2, #16
 80178d0:	2b6f      	cmp	r3, #111	; 0x6f
 80178d2:	9242      	str	r2, [sp, #264]	; 0x108
 80178d4:	bf34      	ite	cc
 80178d6:	2303      	movcc	r3, #3
 80178d8:	2304      	movcs	r3, #4
 80178da:	e002      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 80178dc:	2300      	movs	r3, #0
 80178de:	9342      	str	r3, [sp, #264]	; 0x108
 80178e0:	2303      	movs	r3, #3
 80178e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80178e4:	6863      	ldr	r3, [r4, #4]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	dd3d      	ble.n	8017966 <__ssvfiscanf_r+0x266>
 80178ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178ec:	0659      	lsls	r1, r3, #25
 80178ee:	d404      	bmi.n	80178fa <__ssvfiscanf_r+0x1fa>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	781a      	ldrb	r2, [r3, #0]
 80178f4:	5cba      	ldrb	r2, [r7, r2]
 80178f6:	0712      	lsls	r2, r2, #28
 80178f8:	d43c      	bmi.n	8017974 <__ssvfiscanf_r+0x274>
 80178fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80178fc:	2b02      	cmp	r3, #2
 80178fe:	dc4b      	bgt.n	8017998 <__ssvfiscanf_r+0x298>
 8017900:	466b      	mov	r3, sp
 8017902:	4622      	mov	r2, r4
 8017904:	a941      	add	r1, sp, #260	; 0x104
 8017906:	4630      	mov	r0, r6
 8017908:	f000 fa02 	bl	8017d10 <_scanf_chars>
 801790c:	2801      	cmp	r0, #1
 801790e:	d06a      	beq.n	80179e6 <__ssvfiscanf_r+0x2e6>
 8017910:	2802      	cmp	r0, #2
 8017912:	f47f af1c 	bne.w	801774e <__ssvfiscanf_r+0x4e>
 8017916:	e7cb      	b.n	80178b0 <__ssvfiscanf_r+0x1b0>
 8017918:	2308      	movs	r3, #8
 801791a:	9342      	str	r3, [sp, #264]	; 0x108
 801791c:	2304      	movs	r3, #4
 801791e:	e7e0      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 8017920:	220a      	movs	r2, #10
 8017922:	e7d5      	b.n	80178d0 <__ssvfiscanf_r+0x1d0>
 8017924:	4629      	mov	r1, r5
 8017926:	4640      	mov	r0, r8
 8017928:	f000 fb40 	bl	8017fac <__sccl>
 801792c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801792e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017932:	9341      	str	r3, [sp, #260]	; 0x104
 8017934:	4605      	mov	r5, r0
 8017936:	2301      	movs	r3, #1
 8017938:	e7d3      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 801793a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801793c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017940:	9341      	str	r3, [sp, #260]	; 0x104
 8017942:	2300      	movs	r3, #0
 8017944:	e7cd      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 8017946:	2302      	movs	r3, #2
 8017948:	e7cb      	b.n	80178e2 <__ssvfiscanf_r+0x1e2>
 801794a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801794c:	06c3      	lsls	r3, r0, #27
 801794e:	f53f aefe 	bmi.w	801774e <__ssvfiscanf_r+0x4e>
 8017952:	9b00      	ldr	r3, [sp, #0]
 8017954:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017956:	1d19      	adds	r1, r3, #4
 8017958:	9100      	str	r1, [sp, #0]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	07c0      	lsls	r0, r0, #31
 801795e:	bf4c      	ite	mi
 8017960:	801a      	strhmi	r2, [r3, #0]
 8017962:	601a      	strpl	r2, [r3, #0]
 8017964:	e6f3      	b.n	801774e <__ssvfiscanf_r+0x4e>
 8017966:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017968:	4621      	mov	r1, r4
 801796a:	4630      	mov	r0, r6
 801796c:	4798      	blx	r3
 801796e:	2800      	cmp	r0, #0
 8017970:	d0bb      	beq.n	80178ea <__ssvfiscanf_r+0x1ea>
 8017972:	e79d      	b.n	80178b0 <__ssvfiscanf_r+0x1b0>
 8017974:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017976:	3201      	adds	r2, #1
 8017978:	9245      	str	r2, [sp, #276]	; 0x114
 801797a:	6862      	ldr	r2, [r4, #4]
 801797c:	3a01      	subs	r2, #1
 801797e:	2a00      	cmp	r2, #0
 8017980:	6062      	str	r2, [r4, #4]
 8017982:	dd02      	ble.n	801798a <__ssvfiscanf_r+0x28a>
 8017984:	3301      	adds	r3, #1
 8017986:	6023      	str	r3, [r4, #0]
 8017988:	e7b2      	b.n	80178f0 <__ssvfiscanf_r+0x1f0>
 801798a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801798c:	4621      	mov	r1, r4
 801798e:	4630      	mov	r0, r6
 8017990:	4798      	blx	r3
 8017992:	2800      	cmp	r0, #0
 8017994:	d0ac      	beq.n	80178f0 <__ssvfiscanf_r+0x1f0>
 8017996:	e78b      	b.n	80178b0 <__ssvfiscanf_r+0x1b0>
 8017998:	2b04      	cmp	r3, #4
 801799a:	dc0f      	bgt.n	80179bc <__ssvfiscanf_r+0x2bc>
 801799c:	466b      	mov	r3, sp
 801799e:	4622      	mov	r2, r4
 80179a0:	a941      	add	r1, sp, #260	; 0x104
 80179a2:	4630      	mov	r0, r6
 80179a4:	f000 fa0e 	bl	8017dc4 <_scanf_i>
 80179a8:	e7b0      	b.n	801790c <__ssvfiscanf_r+0x20c>
 80179aa:	bf00      	nop
 80179ac:	0801764d 	.word	0x0801764d
 80179b0:	080176c7 	.word	0x080176c7
 80179b4:	08018617 	.word	0x08018617
 80179b8:	080185ce 	.word	0x080185ce
 80179bc:	4b0b      	ldr	r3, [pc, #44]	; (80179ec <__ssvfiscanf_r+0x2ec>)
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f43f aec5 	beq.w	801774e <__ssvfiscanf_r+0x4e>
 80179c4:	466b      	mov	r3, sp
 80179c6:	4622      	mov	r2, r4
 80179c8:	a941      	add	r1, sp, #260	; 0x104
 80179ca:	4630      	mov	r0, r6
 80179cc:	f3af 8000 	nop.w
 80179d0:	e79c      	b.n	801790c <__ssvfiscanf_r+0x20c>
 80179d2:	89a3      	ldrh	r3, [r4, #12]
 80179d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179d8:	bf18      	it	ne
 80179da:	f04f 30ff 	movne.w	r0, #4294967295
 80179de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80179e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179e8:	e7f9      	b.n	80179de <__ssvfiscanf_r+0x2de>
 80179ea:	bf00      	nop
 80179ec:	00000000 	.word	0x00000000

080179f0 <_printf_common>:
 80179f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179f4:	4616      	mov	r6, r2
 80179f6:	4699      	mov	r9, r3
 80179f8:	688a      	ldr	r2, [r1, #8]
 80179fa:	690b      	ldr	r3, [r1, #16]
 80179fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a00:	4293      	cmp	r3, r2
 8017a02:	bfb8      	it	lt
 8017a04:	4613      	movlt	r3, r2
 8017a06:	6033      	str	r3, [r6, #0]
 8017a08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a0c:	4607      	mov	r7, r0
 8017a0e:	460c      	mov	r4, r1
 8017a10:	b10a      	cbz	r2, 8017a16 <_printf_common+0x26>
 8017a12:	3301      	adds	r3, #1
 8017a14:	6033      	str	r3, [r6, #0]
 8017a16:	6823      	ldr	r3, [r4, #0]
 8017a18:	0699      	lsls	r1, r3, #26
 8017a1a:	bf42      	ittt	mi
 8017a1c:	6833      	ldrmi	r3, [r6, #0]
 8017a1e:	3302      	addmi	r3, #2
 8017a20:	6033      	strmi	r3, [r6, #0]
 8017a22:	6825      	ldr	r5, [r4, #0]
 8017a24:	f015 0506 	ands.w	r5, r5, #6
 8017a28:	d106      	bne.n	8017a38 <_printf_common+0x48>
 8017a2a:	f104 0a19 	add.w	sl, r4, #25
 8017a2e:	68e3      	ldr	r3, [r4, #12]
 8017a30:	6832      	ldr	r2, [r6, #0]
 8017a32:	1a9b      	subs	r3, r3, r2
 8017a34:	42ab      	cmp	r3, r5
 8017a36:	dc26      	bgt.n	8017a86 <_printf_common+0x96>
 8017a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a3c:	1e13      	subs	r3, r2, #0
 8017a3e:	6822      	ldr	r2, [r4, #0]
 8017a40:	bf18      	it	ne
 8017a42:	2301      	movne	r3, #1
 8017a44:	0692      	lsls	r2, r2, #26
 8017a46:	d42b      	bmi.n	8017aa0 <_printf_common+0xb0>
 8017a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a4c:	4649      	mov	r1, r9
 8017a4e:	4638      	mov	r0, r7
 8017a50:	47c0      	blx	r8
 8017a52:	3001      	adds	r0, #1
 8017a54:	d01e      	beq.n	8017a94 <_printf_common+0xa4>
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	6922      	ldr	r2, [r4, #16]
 8017a5a:	f003 0306 	and.w	r3, r3, #6
 8017a5e:	2b04      	cmp	r3, #4
 8017a60:	bf02      	ittt	eq
 8017a62:	68e5      	ldreq	r5, [r4, #12]
 8017a64:	6833      	ldreq	r3, [r6, #0]
 8017a66:	1aed      	subeq	r5, r5, r3
 8017a68:	68a3      	ldr	r3, [r4, #8]
 8017a6a:	bf0c      	ite	eq
 8017a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a70:	2500      	movne	r5, #0
 8017a72:	4293      	cmp	r3, r2
 8017a74:	bfc4      	itt	gt
 8017a76:	1a9b      	subgt	r3, r3, r2
 8017a78:	18ed      	addgt	r5, r5, r3
 8017a7a:	2600      	movs	r6, #0
 8017a7c:	341a      	adds	r4, #26
 8017a7e:	42b5      	cmp	r5, r6
 8017a80:	d11a      	bne.n	8017ab8 <_printf_common+0xc8>
 8017a82:	2000      	movs	r0, #0
 8017a84:	e008      	b.n	8017a98 <_printf_common+0xa8>
 8017a86:	2301      	movs	r3, #1
 8017a88:	4652      	mov	r2, sl
 8017a8a:	4649      	mov	r1, r9
 8017a8c:	4638      	mov	r0, r7
 8017a8e:	47c0      	blx	r8
 8017a90:	3001      	adds	r0, #1
 8017a92:	d103      	bne.n	8017a9c <_printf_common+0xac>
 8017a94:	f04f 30ff 	mov.w	r0, #4294967295
 8017a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a9c:	3501      	adds	r5, #1
 8017a9e:	e7c6      	b.n	8017a2e <_printf_common+0x3e>
 8017aa0:	18e1      	adds	r1, r4, r3
 8017aa2:	1c5a      	adds	r2, r3, #1
 8017aa4:	2030      	movs	r0, #48	; 0x30
 8017aa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017aaa:	4422      	add	r2, r4
 8017aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ab4:	3302      	adds	r3, #2
 8017ab6:	e7c7      	b.n	8017a48 <_printf_common+0x58>
 8017ab8:	2301      	movs	r3, #1
 8017aba:	4622      	mov	r2, r4
 8017abc:	4649      	mov	r1, r9
 8017abe:	4638      	mov	r0, r7
 8017ac0:	47c0      	blx	r8
 8017ac2:	3001      	adds	r0, #1
 8017ac4:	d0e6      	beq.n	8017a94 <_printf_common+0xa4>
 8017ac6:	3601      	adds	r6, #1
 8017ac8:	e7d9      	b.n	8017a7e <_printf_common+0x8e>
	...

08017acc <_printf_i>:
 8017acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad0:	7e0f      	ldrb	r7, [r1, #24]
 8017ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017ad4:	2f78      	cmp	r7, #120	; 0x78
 8017ad6:	4691      	mov	r9, r2
 8017ad8:	4680      	mov	r8, r0
 8017ada:	460c      	mov	r4, r1
 8017adc:	469a      	mov	sl, r3
 8017ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017ae2:	d807      	bhi.n	8017af4 <_printf_i+0x28>
 8017ae4:	2f62      	cmp	r7, #98	; 0x62
 8017ae6:	d80a      	bhi.n	8017afe <_printf_i+0x32>
 8017ae8:	2f00      	cmp	r7, #0
 8017aea:	f000 80d4 	beq.w	8017c96 <_printf_i+0x1ca>
 8017aee:	2f58      	cmp	r7, #88	; 0x58
 8017af0:	f000 80c0 	beq.w	8017c74 <_printf_i+0x1a8>
 8017af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017afc:	e03a      	b.n	8017b74 <_printf_i+0xa8>
 8017afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b02:	2b15      	cmp	r3, #21
 8017b04:	d8f6      	bhi.n	8017af4 <_printf_i+0x28>
 8017b06:	a101      	add	r1, pc, #4	; (adr r1, 8017b0c <_printf_i+0x40>)
 8017b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b0c:	08017b65 	.word	0x08017b65
 8017b10:	08017b79 	.word	0x08017b79
 8017b14:	08017af5 	.word	0x08017af5
 8017b18:	08017af5 	.word	0x08017af5
 8017b1c:	08017af5 	.word	0x08017af5
 8017b20:	08017af5 	.word	0x08017af5
 8017b24:	08017b79 	.word	0x08017b79
 8017b28:	08017af5 	.word	0x08017af5
 8017b2c:	08017af5 	.word	0x08017af5
 8017b30:	08017af5 	.word	0x08017af5
 8017b34:	08017af5 	.word	0x08017af5
 8017b38:	08017c7d 	.word	0x08017c7d
 8017b3c:	08017ba5 	.word	0x08017ba5
 8017b40:	08017c37 	.word	0x08017c37
 8017b44:	08017af5 	.word	0x08017af5
 8017b48:	08017af5 	.word	0x08017af5
 8017b4c:	08017c9f 	.word	0x08017c9f
 8017b50:	08017af5 	.word	0x08017af5
 8017b54:	08017ba5 	.word	0x08017ba5
 8017b58:	08017af5 	.word	0x08017af5
 8017b5c:	08017af5 	.word	0x08017af5
 8017b60:	08017c3f 	.word	0x08017c3f
 8017b64:	682b      	ldr	r3, [r5, #0]
 8017b66:	1d1a      	adds	r2, r3, #4
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	602a      	str	r2, [r5, #0]
 8017b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b74:	2301      	movs	r3, #1
 8017b76:	e09f      	b.n	8017cb8 <_printf_i+0x1ec>
 8017b78:	6820      	ldr	r0, [r4, #0]
 8017b7a:	682b      	ldr	r3, [r5, #0]
 8017b7c:	0607      	lsls	r7, r0, #24
 8017b7e:	f103 0104 	add.w	r1, r3, #4
 8017b82:	6029      	str	r1, [r5, #0]
 8017b84:	d501      	bpl.n	8017b8a <_printf_i+0xbe>
 8017b86:	681e      	ldr	r6, [r3, #0]
 8017b88:	e003      	b.n	8017b92 <_printf_i+0xc6>
 8017b8a:	0646      	lsls	r6, r0, #25
 8017b8c:	d5fb      	bpl.n	8017b86 <_printf_i+0xba>
 8017b8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017b92:	2e00      	cmp	r6, #0
 8017b94:	da03      	bge.n	8017b9e <_printf_i+0xd2>
 8017b96:	232d      	movs	r3, #45	; 0x2d
 8017b98:	4276      	negs	r6, r6
 8017b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b9e:	485a      	ldr	r0, [pc, #360]	; (8017d08 <_printf_i+0x23c>)
 8017ba0:	230a      	movs	r3, #10
 8017ba2:	e012      	b.n	8017bca <_printf_i+0xfe>
 8017ba4:	682b      	ldr	r3, [r5, #0]
 8017ba6:	6820      	ldr	r0, [r4, #0]
 8017ba8:	1d19      	adds	r1, r3, #4
 8017baa:	6029      	str	r1, [r5, #0]
 8017bac:	0605      	lsls	r5, r0, #24
 8017bae:	d501      	bpl.n	8017bb4 <_printf_i+0xe8>
 8017bb0:	681e      	ldr	r6, [r3, #0]
 8017bb2:	e002      	b.n	8017bba <_printf_i+0xee>
 8017bb4:	0641      	lsls	r1, r0, #25
 8017bb6:	d5fb      	bpl.n	8017bb0 <_printf_i+0xe4>
 8017bb8:	881e      	ldrh	r6, [r3, #0]
 8017bba:	4853      	ldr	r0, [pc, #332]	; (8017d08 <_printf_i+0x23c>)
 8017bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8017bbe:	bf0c      	ite	eq
 8017bc0:	2308      	moveq	r3, #8
 8017bc2:	230a      	movne	r3, #10
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017bca:	6865      	ldr	r5, [r4, #4]
 8017bcc:	60a5      	str	r5, [r4, #8]
 8017bce:	2d00      	cmp	r5, #0
 8017bd0:	bfa2      	ittt	ge
 8017bd2:	6821      	ldrge	r1, [r4, #0]
 8017bd4:	f021 0104 	bicge.w	r1, r1, #4
 8017bd8:	6021      	strge	r1, [r4, #0]
 8017bda:	b90e      	cbnz	r6, 8017be0 <_printf_i+0x114>
 8017bdc:	2d00      	cmp	r5, #0
 8017bde:	d04b      	beq.n	8017c78 <_printf_i+0x1ac>
 8017be0:	4615      	mov	r5, r2
 8017be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8017be6:	fb03 6711 	mls	r7, r3, r1, r6
 8017bea:	5dc7      	ldrb	r7, [r0, r7]
 8017bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017bf0:	4637      	mov	r7, r6
 8017bf2:	42bb      	cmp	r3, r7
 8017bf4:	460e      	mov	r6, r1
 8017bf6:	d9f4      	bls.n	8017be2 <_printf_i+0x116>
 8017bf8:	2b08      	cmp	r3, #8
 8017bfa:	d10b      	bne.n	8017c14 <_printf_i+0x148>
 8017bfc:	6823      	ldr	r3, [r4, #0]
 8017bfe:	07de      	lsls	r6, r3, #31
 8017c00:	d508      	bpl.n	8017c14 <_printf_i+0x148>
 8017c02:	6923      	ldr	r3, [r4, #16]
 8017c04:	6861      	ldr	r1, [r4, #4]
 8017c06:	4299      	cmp	r1, r3
 8017c08:	bfde      	ittt	le
 8017c0a:	2330      	movle	r3, #48	; 0x30
 8017c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c14:	1b52      	subs	r2, r2, r5
 8017c16:	6122      	str	r2, [r4, #16]
 8017c18:	f8cd a000 	str.w	sl, [sp]
 8017c1c:	464b      	mov	r3, r9
 8017c1e:	aa03      	add	r2, sp, #12
 8017c20:	4621      	mov	r1, r4
 8017c22:	4640      	mov	r0, r8
 8017c24:	f7ff fee4 	bl	80179f0 <_printf_common>
 8017c28:	3001      	adds	r0, #1
 8017c2a:	d14a      	bne.n	8017cc2 <_printf_i+0x1f6>
 8017c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c30:	b004      	add	sp, #16
 8017c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c36:	6823      	ldr	r3, [r4, #0]
 8017c38:	f043 0320 	orr.w	r3, r3, #32
 8017c3c:	6023      	str	r3, [r4, #0]
 8017c3e:	4833      	ldr	r0, [pc, #204]	; (8017d0c <_printf_i+0x240>)
 8017c40:	2778      	movs	r7, #120	; 0x78
 8017c42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c46:	6823      	ldr	r3, [r4, #0]
 8017c48:	6829      	ldr	r1, [r5, #0]
 8017c4a:	061f      	lsls	r7, r3, #24
 8017c4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c50:	d402      	bmi.n	8017c58 <_printf_i+0x18c>
 8017c52:	065f      	lsls	r7, r3, #25
 8017c54:	bf48      	it	mi
 8017c56:	b2b6      	uxthmi	r6, r6
 8017c58:	07df      	lsls	r7, r3, #31
 8017c5a:	bf48      	it	mi
 8017c5c:	f043 0320 	orrmi.w	r3, r3, #32
 8017c60:	6029      	str	r1, [r5, #0]
 8017c62:	bf48      	it	mi
 8017c64:	6023      	strmi	r3, [r4, #0]
 8017c66:	b91e      	cbnz	r6, 8017c70 <_printf_i+0x1a4>
 8017c68:	6823      	ldr	r3, [r4, #0]
 8017c6a:	f023 0320 	bic.w	r3, r3, #32
 8017c6e:	6023      	str	r3, [r4, #0]
 8017c70:	2310      	movs	r3, #16
 8017c72:	e7a7      	b.n	8017bc4 <_printf_i+0xf8>
 8017c74:	4824      	ldr	r0, [pc, #144]	; (8017d08 <_printf_i+0x23c>)
 8017c76:	e7e4      	b.n	8017c42 <_printf_i+0x176>
 8017c78:	4615      	mov	r5, r2
 8017c7a:	e7bd      	b.n	8017bf8 <_printf_i+0x12c>
 8017c7c:	682b      	ldr	r3, [r5, #0]
 8017c7e:	6826      	ldr	r6, [r4, #0]
 8017c80:	6961      	ldr	r1, [r4, #20]
 8017c82:	1d18      	adds	r0, r3, #4
 8017c84:	6028      	str	r0, [r5, #0]
 8017c86:	0635      	lsls	r5, r6, #24
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	d501      	bpl.n	8017c90 <_printf_i+0x1c4>
 8017c8c:	6019      	str	r1, [r3, #0]
 8017c8e:	e002      	b.n	8017c96 <_printf_i+0x1ca>
 8017c90:	0670      	lsls	r0, r6, #25
 8017c92:	d5fb      	bpl.n	8017c8c <_printf_i+0x1c0>
 8017c94:	8019      	strh	r1, [r3, #0]
 8017c96:	2300      	movs	r3, #0
 8017c98:	6123      	str	r3, [r4, #16]
 8017c9a:	4615      	mov	r5, r2
 8017c9c:	e7bc      	b.n	8017c18 <_printf_i+0x14c>
 8017c9e:	682b      	ldr	r3, [r5, #0]
 8017ca0:	1d1a      	adds	r2, r3, #4
 8017ca2:	602a      	str	r2, [r5, #0]
 8017ca4:	681d      	ldr	r5, [r3, #0]
 8017ca6:	6862      	ldr	r2, [r4, #4]
 8017ca8:	2100      	movs	r1, #0
 8017caa:	4628      	mov	r0, r5
 8017cac:	f7e8 fb48 	bl	8000340 <memchr>
 8017cb0:	b108      	cbz	r0, 8017cb6 <_printf_i+0x1ea>
 8017cb2:	1b40      	subs	r0, r0, r5
 8017cb4:	6060      	str	r0, [r4, #4]
 8017cb6:	6863      	ldr	r3, [r4, #4]
 8017cb8:	6123      	str	r3, [r4, #16]
 8017cba:	2300      	movs	r3, #0
 8017cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cc0:	e7aa      	b.n	8017c18 <_printf_i+0x14c>
 8017cc2:	6923      	ldr	r3, [r4, #16]
 8017cc4:	462a      	mov	r2, r5
 8017cc6:	4649      	mov	r1, r9
 8017cc8:	4640      	mov	r0, r8
 8017cca:	47d0      	blx	sl
 8017ccc:	3001      	adds	r0, #1
 8017cce:	d0ad      	beq.n	8017c2c <_printf_i+0x160>
 8017cd0:	6823      	ldr	r3, [r4, #0]
 8017cd2:	079b      	lsls	r3, r3, #30
 8017cd4:	d413      	bmi.n	8017cfe <_printf_i+0x232>
 8017cd6:	68e0      	ldr	r0, [r4, #12]
 8017cd8:	9b03      	ldr	r3, [sp, #12]
 8017cda:	4298      	cmp	r0, r3
 8017cdc:	bfb8      	it	lt
 8017cde:	4618      	movlt	r0, r3
 8017ce0:	e7a6      	b.n	8017c30 <_printf_i+0x164>
 8017ce2:	2301      	movs	r3, #1
 8017ce4:	4632      	mov	r2, r6
 8017ce6:	4649      	mov	r1, r9
 8017ce8:	4640      	mov	r0, r8
 8017cea:	47d0      	blx	sl
 8017cec:	3001      	adds	r0, #1
 8017cee:	d09d      	beq.n	8017c2c <_printf_i+0x160>
 8017cf0:	3501      	adds	r5, #1
 8017cf2:	68e3      	ldr	r3, [r4, #12]
 8017cf4:	9903      	ldr	r1, [sp, #12]
 8017cf6:	1a5b      	subs	r3, r3, r1
 8017cf8:	42ab      	cmp	r3, r5
 8017cfa:	dcf2      	bgt.n	8017ce2 <_printf_i+0x216>
 8017cfc:	e7eb      	b.n	8017cd6 <_printf_i+0x20a>
 8017cfe:	2500      	movs	r5, #0
 8017d00:	f104 0619 	add.w	r6, r4, #25
 8017d04:	e7f5      	b.n	8017cf2 <_printf_i+0x226>
 8017d06:	bf00      	nop
 8017d08:	080185d9 	.word	0x080185d9
 8017d0c:	080185ea 	.word	0x080185ea

08017d10 <_scanf_chars>:
 8017d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d14:	4615      	mov	r5, r2
 8017d16:	688a      	ldr	r2, [r1, #8]
 8017d18:	4680      	mov	r8, r0
 8017d1a:	460c      	mov	r4, r1
 8017d1c:	b932      	cbnz	r2, 8017d2c <_scanf_chars+0x1c>
 8017d1e:	698a      	ldr	r2, [r1, #24]
 8017d20:	2a00      	cmp	r2, #0
 8017d22:	bf0c      	ite	eq
 8017d24:	2201      	moveq	r2, #1
 8017d26:	f04f 32ff 	movne.w	r2, #4294967295
 8017d2a:	608a      	str	r2, [r1, #8]
 8017d2c:	6822      	ldr	r2, [r4, #0]
 8017d2e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017dc0 <_scanf_chars+0xb0>
 8017d32:	06d1      	lsls	r1, r2, #27
 8017d34:	bf5f      	itttt	pl
 8017d36:	681a      	ldrpl	r2, [r3, #0]
 8017d38:	1d11      	addpl	r1, r2, #4
 8017d3a:	6019      	strpl	r1, [r3, #0]
 8017d3c:	6816      	ldrpl	r6, [r2, #0]
 8017d3e:	2700      	movs	r7, #0
 8017d40:	69a0      	ldr	r0, [r4, #24]
 8017d42:	b188      	cbz	r0, 8017d68 <_scanf_chars+0x58>
 8017d44:	2801      	cmp	r0, #1
 8017d46:	d107      	bne.n	8017d58 <_scanf_chars+0x48>
 8017d48:	682a      	ldr	r2, [r5, #0]
 8017d4a:	7811      	ldrb	r1, [r2, #0]
 8017d4c:	6962      	ldr	r2, [r4, #20]
 8017d4e:	5c52      	ldrb	r2, [r2, r1]
 8017d50:	b952      	cbnz	r2, 8017d68 <_scanf_chars+0x58>
 8017d52:	2f00      	cmp	r7, #0
 8017d54:	d031      	beq.n	8017dba <_scanf_chars+0xaa>
 8017d56:	e022      	b.n	8017d9e <_scanf_chars+0x8e>
 8017d58:	2802      	cmp	r0, #2
 8017d5a:	d120      	bne.n	8017d9e <_scanf_chars+0x8e>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d64:	071b      	lsls	r3, r3, #28
 8017d66:	d41a      	bmi.n	8017d9e <_scanf_chars+0x8e>
 8017d68:	6823      	ldr	r3, [r4, #0]
 8017d6a:	06da      	lsls	r2, r3, #27
 8017d6c:	bf5e      	ittt	pl
 8017d6e:	682b      	ldrpl	r3, [r5, #0]
 8017d70:	781b      	ldrbpl	r3, [r3, #0]
 8017d72:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d76:	682a      	ldr	r2, [r5, #0]
 8017d78:	686b      	ldr	r3, [r5, #4]
 8017d7a:	3201      	adds	r2, #1
 8017d7c:	602a      	str	r2, [r5, #0]
 8017d7e:	68a2      	ldr	r2, [r4, #8]
 8017d80:	3b01      	subs	r3, #1
 8017d82:	3a01      	subs	r2, #1
 8017d84:	606b      	str	r3, [r5, #4]
 8017d86:	3701      	adds	r7, #1
 8017d88:	60a2      	str	r2, [r4, #8]
 8017d8a:	b142      	cbz	r2, 8017d9e <_scanf_chars+0x8e>
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	dcd7      	bgt.n	8017d40 <_scanf_chars+0x30>
 8017d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d94:	4629      	mov	r1, r5
 8017d96:	4640      	mov	r0, r8
 8017d98:	4798      	blx	r3
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	d0d0      	beq.n	8017d40 <_scanf_chars+0x30>
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	f013 0310 	ands.w	r3, r3, #16
 8017da4:	d105      	bne.n	8017db2 <_scanf_chars+0xa2>
 8017da6:	68e2      	ldr	r2, [r4, #12]
 8017da8:	3201      	adds	r2, #1
 8017daa:	60e2      	str	r2, [r4, #12]
 8017dac:	69a2      	ldr	r2, [r4, #24]
 8017dae:	b102      	cbz	r2, 8017db2 <_scanf_chars+0xa2>
 8017db0:	7033      	strb	r3, [r6, #0]
 8017db2:	6923      	ldr	r3, [r4, #16]
 8017db4:	443b      	add	r3, r7
 8017db6:	6123      	str	r3, [r4, #16]
 8017db8:	2000      	movs	r0, #0
 8017dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dbe:	bf00      	nop
 8017dc0:	08018617 	.word	0x08018617

08017dc4 <_scanf_i>:
 8017dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc8:	4698      	mov	r8, r3
 8017dca:	4b74      	ldr	r3, [pc, #464]	; (8017f9c <_scanf_i+0x1d8>)
 8017dcc:	460c      	mov	r4, r1
 8017dce:	4682      	mov	sl, r0
 8017dd0:	4616      	mov	r6, r2
 8017dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017dd6:	b087      	sub	sp, #28
 8017dd8:	ab03      	add	r3, sp, #12
 8017dda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017dde:	4b70      	ldr	r3, [pc, #448]	; (8017fa0 <_scanf_i+0x1dc>)
 8017de0:	69a1      	ldr	r1, [r4, #24]
 8017de2:	4a70      	ldr	r2, [pc, #448]	; (8017fa4 <_scanf_i+0x1e0>)
 8017de4:	2903      	cmp	r1, #3
 8017de6:	bf18      	it	ne
 8017de8:	461a      	movne	r2, r3
 8017dea:	68a3      	ldr	r3, [r4, #8]
 8017dec:	9201      	str	r2, [sp, #4]
 8017dee:	1e5a      	subs	r2, r3, #1
 8017df0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017df4:	bf88      	it	hi
 8017df6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017dfa:	4627      	mov	r7, r4
 8017dfc:	bf82      	ittt	hi
 8017dfe:	eb03 0905 	addhi.w	r9, r3, r5
 8017e02:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e06:	60a3      	strhi	r3, [r4, #8]
 8017e08:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e0c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017e10:	bf98      	it	ls
 8017e12:	f04f 0900 	movls.w	r9, #0
 8017e16:	6023      	str	r3, [r4, #0]
 8017e18:	463d      	mov	r5, r7
 8017e1a:	f04f 0b00 	mov.w	fp, #0
 8017e1e:	6831      	ldr	r1, [r6, #0]
 8017e20:	ab03      	add	r3, sp, #12
 8017e22:	7809      	ldrb	r1, [r1, #0]
 8017e24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e28:	2202      	movs	r2, #2
 8017e2a:	f7e8 fa89 	bl	8000340 <memchr>
 8017e2e:	b328      	cbz	r0, 8017e7c <_scanf_i+0xb8>
 8017e30:	f1bb 0f01 	cmp.w	fp, #1
 8017e34:	d159      	bne.n	8017eea <_scanf_i+0x126>
 8017e36:	6862      	ldr	r2, [r4, #4]
 8017e38:	b92a      	cbnz	r2, 8017e46 <_scanf_i+0x82>
 8017e3a:	6822      	ldr	r2, [r4, #0]
 8017e3c:	2308      	movs	r3, #8
 8017e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e42:	6063      	str	r3, [r4, #4]
 8017e44:	6022      	str	r2, [r4, #0]
 8017e46:	6822      	ldr	r2, [r4, #0]
 8017e48:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017e4c:	6022      	str	r2, [r4, #0]
 8017e4e:	68a2      	ldr	r2, [r4, #8]
 8017e50:	1e51      	subs	r1, r2, #1
 8017e52:	60a1      	str	r1, [r4, #8]
 8017e54:	b192      	cbz	r2, 8017e7c <_scanf_i+0xb8>
 8017e56:	6832      	ldr	r2, [r6, #0]
 8017e58:	1c51      	adds	r1, r2, #1
 8017e5a:	6031      	str	r1, [r6, #0]
 8017e5c:	7812      	ldrb	r2, [r2, #0]
 8017e5e:	f805 2b01 	strb.w	r2, [r5], #1
 8017e62:	6872      	ldr	r2, [r6, #4]
 8017e64:	3a01      	subs	r2, #1
 8017e66:	2a00      	cmp	r2, #0
 8017e68:	6072      	str	r2, [r6, #4]
 8017e6a:	dc07      	bgt.n	8017e7c <_scanf_i+0xb8>
 8017e6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017e70:	4631      	mov	r1, r6
 8017e72:	4650      	mov	r0, sl
 8017e74:	4790      	blx	r2
 8017e76:	2800      	cmp	r0, #0
 8017e78:	f040 8085 	bne.w	8017f86 <_scanf_i+0x1c2>
 8017e7c:	f10b 0b01 	add.w	fp, fp, #1
 8017e80:	f1bb 0f03 	cmp.w	fp, #3
 8017e84:	d1cb      	bne.n	8017e1e <_scanf_i+0x5a>
 8017e86:	6863      	ldr	r3, [r4, #4]
 8017e88:	b90b      	cbnz	r3, 8017e8e <_scanf_i+0xca>
 8017e8a:	230a      	movs	r3, #10
 8017e8c:	6063      	str	r3, [r4, #4]
 8017e8e:	6863      	ldr	r3, [r4, #4]
 8017e90:	4945      	ldr	r1, [pc, #276]	; (8017fa8 <_scanf_i+0x1e4>)
 8017e92:	6960      	ldr	r0, [r4, #20]
 8017e94:	1ac9      	subs	r1, r1, r3
 8017e96:	f000 f889 	bl	8017fac <__sccl>
 8017e9a:	f04f 0b00 	mov.w	fp, #0
 8017e9e:	68a3      	ldr	r3, [r4, #8]
 8017ea0:	6822      	ldr	r2, [r4, #0]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d03d      	beq.n	8017f22 <_scanf_i+0x15e>
 8017ea6:	6831      	ldr	r1, [r6, #0]
 8017ea8:	6960      	ldr	r0, [r4, #20]
 8017eaa:	f891 c000 	ldrb.w	ip, [r1]
 8017eae:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d035      	beq.n	8017f22 <_scanf_i+0x15e>
 8017eb6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017eba:	d124      	bne.n	8017f06 <_scanf_i+0x142>
 8017ebc:	0510      	lsls	r0, r2, #20
 8017ebe:	d522      	bpl.n	8017f06 <_scanf_i+0x142>
 8017ec0:	f10b 0b01 	add.w	fp, fp, #1
 8017ec4:	f1b9 0f00 	cmp.w	r9, #0
 8017ec8:	d003      	beq.n	8017ed2 <_scanf_i+0x10e>
 8017eca:	3301      	adds	r3, #1
 8017ecc:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ed0:	60a3      	str	r3, [r4, #8]
 8017ed2:	6873      	ldr	r3, [r6, #4]
 8017ed4:	3b01      	subs	r3, #1
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	6073      	str	r3, [r6, #4]
 8017eda:	dd1b      	ble.n	8017f14 <_scanf_i+0x150>
 8017edc:	6833      	ldr	r3, [r6, #0]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	6033      	str	r3, [r6, #0]
 8017ee2:	68a3      	ldr	r3, [r4, #8]
 8017ee4:	3b01      	subs	r3, #1
 8017ee6:	60a3      	str	r3, [r4, #8]
 8017ee8:	e7d9      	b.n	8017e9e <_scanf_i+0xda>
 8017eea:	f1bb 0f02 	cmp.w	fp, #2
 8017eee:	d1ae      	bne.n	8017e4e <_scanf_i+0x8a>
 8017ef0:	6822      	ldr	r2, [r4, #0]
 8017ef2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017ef6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017efa:	d1bf      	bne.n	8017e7c <_scanf_i+0xb8>
 8017efc:	2310      	movs	r3, #16
 8017efe:	6063      	str	r3, [r4, #4]
 8017f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f04:	e7a2      	b.n	8017e4c <_scanf_i+0x88>
 8017f06:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f0a:	6022      	str	r2, [r4, #0]
 8017f0c:	780b      	ldrb	r3, [r1, #0]
 8017f0e:	f805 3b01 	strb.w	r3, [r5], #1
 8017f12:	e7de      	b.n	8017ed2 <_scanf_i+0x10e>
 8017f14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f18:	4631      	mov	r1, r6
 8017f1a:	4650      	mov	r0, sl
 8017f1c:	4798      	blx	r3
 8017f1e:	2800      	cmp	r0, #0
 8017f20:	d0df      	beq.n	8017ee2 <_scanf_i+0x11e>
 8017f22:	6823      	ldr	r3, [r4, #0]
 8017f24:	05d9      	lsls	r1, r3, #23
 8017f26:	d50d      	bpl.n	8017f44 <_scanf_i+0x180>
 8017f28:	42bd      	cmp	r5, r7
 8017f2a:	d909      	bls.n	8017f40 <_scanf_i+0x17c>
 8017f2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f34:	4632      	mov	r2, r6
 8017f36:	4650      	mov	r0, sl
 8017f38:	4798      	blx	r3
 8017f3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f3e:	464d      	mov	r5, r9
 8017f40:	42bd      	cmp	r5, r7
 8017f42:	d028      	beq.n	8017f96 <_scanf_i+0x1d2>
 8017f44:	6822      	ldr	r2, [r4, #0]
 8017f46:	f012 0210 	ands.w	r2, r2, #16
 8017f4a:	d113      	bne.n	8017f74 <_scanf_i+0x1b0>
 8017f4c:	702a      	strb	r2, [r5, #0]
 8017f4e:	6863      	ldr	r3, [r4, #4]
 8017f50:	9e01      	ldr	r6, [sp, #4]
 8017f52:	4639      	mov	r1, r7
 8017f54:	4650      	mov	r0, sl
 8017f56:	47b0      	blx	r6
 8017f58:	f8d8 3000 	ldr.w	r3, [r8]
 8017f5c:	6821      	ldr	r1, [r4, #0]
 8017f5e:	1d1a      	adds	r2, r3, #4
 8017f60:	f8c8 2000 	str.w	r2, [r8]
 8017f64:	f011 0f20 	tst.w	r1, #32
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	d00f      	beq.n	8017f8c <_scanf_i+0x1c8>
 8017f6c:	6018      	str	r0, [r3, #0]
 8017f6e:	68e3      	ldr	r3, [r4, #12]
 8017f70:	3301      	adds	r3, #1
 8017f72:	60e3      	str	r3, [r4, #12]
 8017f74:	6923      	ldr	r3, [r4, #16]
 8017f76:	1bed      	subs	r5, r5, r7
 8017f78:	445d      	add	r5, fp
 8017f7a:	442b      	add	r3, r5
 8017f7c:	6123      	str	r3, [r4, #16]
 8017f7e:	2000      	movs	r0, #0
 8017f80:	b007      	add	sp, #28
 8017f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f86:	f04f 0b00 	mov.w	fp, #0
 8017f8a:	e7ca      	b.n	8017f22 <_scanf_i+0x15e>
 8017f8c:	07ca      	lsls	r2, r1, #31
 8017f8e:	bf4c      	ite	mi
 8017f90:	8018      	strhmi	r0, [r3, #0]
 8017f92:	6018      	strpl	r0, [r3, #0]
 8017f94:	e7eb      	b.n	8017f6e <_scanf_i+0x1aa>
 8017f96:	2001      	movs	r0, #1
 8017f98:	e7f2      	b.n	8017f80 <_scanf_i+0x1bc>
 8017f9a:	bf00      	nop
 8017f9c:	080184f8 	.word	0x080184f8
 8017fa0:	08018335 	.word	0x08018335
 8017fa4:	0801824d 	.word	0x0801824d
 8017fa8:	0801860b 	.word	0x0801860b

08017fac <__sccl>:
 8017fac:	b570      	push	{r4, r5, r6, lr}
 8017fae:	780b      	ldrb	r3, [r1, #0]
 8017fb0:	4604      	mov	r4, r0
 8017fb2:	2b5e      	cmp	r3, #94	; 0x5e
 8017fb4:	bf0b      	itete	eq
 8017fb6:	784b      	ldrbeq	r3, [r1, #1]
 8017fb8:	1c4a      	addne	r2, r1, #1
 8017fba:	1c8a      	addeq	r2, r1, #2
 8017fbc:	2100      	movne	r1, #0
 8017fbe:	bf08      	it	eq
 8017fc0:	2101      	moveq	r1, #1
 8017fc2:	3801      	subs	r0, #1
 8017fc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017fc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fcc:	42a8      	cmp	r0, r5
 8017fce:	d1fb      	bne.n	8017fc8 <__sccl+0x1c>
 8017fd0:	b90b      	cbnz	r3, 8017fd6 <__sccl+0x2a>
 8017fd2:	1e50      	subs	r0, r2, #1
 8017fd4:	bd70      	pop	{r4, r5, r6, pc}
 8017fd6:	f081 0101 	eor.w	r1, r1, #1
 8017fda:	54e1      	strb	r1, [r4, r3]
 8017fdc:	4610      	mov	r0, r2
 8017fde:	4602      	mov	r2, r0
 8017fe0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017fe4:	2d2d      	cmp	r5, #45	; 0x2d
 8017fe6:	d005      	beq.n	8017ff4 <__sccl+0x48>
 8017fe8:	2d5d      	cmp	r5, #93	; 0x5d
 8017fea:	d016      	beq.n	801801a <__sccl+0x6e>
 8017fec:	2d00      	cmp	r5, #0
 8017fee:	d0f1      	beq.n	8017fd4 <__sccl+0x28>
 8017ff0:	462b      	mov	r3, r5
 8017ff2:	e7f2      	b.n	8017fda <__sccl+0x2e>
 8017ff4:	7846      	ldrb	r6, [r0, #1]
 8017ff6:	2e5d      	cmp	r6, #93	; 0x5d
 8017ff8:	d0fa      	beq.n	8017ff0 <__sccl+0x44>
 8017ffa:	42b3      	cmp	r3, r6
 8017ffc:	dcf8      	bgt.n	8017ff0 <__sccl+0x44>
 8017ffe:	3002      	adds	r0, #2
 8018000:	461a      	mov	r2, r3
 8018002:	3201      	adds	r2, #1
 8018004:	4296      	cmp	r6, r2
 8018006:	54a1      	strb	r1, [r4, r2]
 8018008:	dcfb      	bgt.n	8018002 <__sccl+0x56>
 801800a:	1af2      	subs	r2, r6, r3
 801800c:	3a01      	subs	r2, #1
 801800e:	1c5d      	adds	r5, r3, #1
 8018010:	42b3      	cmp	r3, r6
 8018012:	bfa8      	it	ge
 8018014:	2200      	movge	r2, #0
 8018016:	18ab      	adds	r3, r5, r2
 8018018:	e7e1      	b.n	8017fde <__sccl+0x32>
 801801a:	4610      	mov	r0, r2
 801801c:	e7da      	b.n	8017fd4 <__sccl+0x28>

0801801e <__submore>:
 801801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018022:	460c      	mov	r4, r1
 8018024:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801802a:	4299      	cmp	r1, r3
 801802c:	d11d      	bne.n	801806a <__submore+0x4c>
 801802e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018032:	f7ff f927 	bl	8017284 <_malloc_r>
 8018036:	b918      	cbnz	r0, 8018040 <__submore+0x22>
 8018038:	f04f 30ff 	mov.w	r0, #4294967295
 801803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018044:	63a3      	str	r3, [r4, #56]	; 0x38
 8018046:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801804a:	6360      	str	r0, [r4, #52]	; 0x34
 801804c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018050:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018054:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018058:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801805c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018060:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018064:	6020      	str	r0, [r4, #0]
 8018066:	2000      	movs	r0, #0
 8018068:	e7e8      	b.n	801803c <__submore+0x1e>
 801806a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801806c:	0077      	lsls	r7, r6, #1
 801806e:	463a      	mov	r2, r7
 8018070:	f000 f83a 	bl	80180e8 <_realloc_r>
 8018074:	4605      	mov	r5, r0
 8018076:	2800      	cmp	r0, #0
 8018078:	d0de      	beq.n	8018038 <__submore+0x1a>
 801807a:	eb00 0806 	add.w	r8, r0, r6
 801807e:	4601      	mov	r1, r0
 8018080:	4632      	mov	r2, r6
 8018082:	4640      	mov	r0, r8
 8018084:	f7ff f884 	bl	8017190 <memcpy>
 8018088:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801808c:	f8c4 8000 	str.w	r8, [r4]
 8018090:	e7e9      	b.n	8018066 <__submore+0x48>

08018092 <memmove>:
 8018092:	4288      	cmp	r0, r1
 8018094:	b510      	push	{r4, lr}
 8018096:	eb01 0402 	add.w	r4, r1, r2
 801809a:	d902      	bls.n	80180a2 <memmove+0x10>
 801809c:	4284      	cmp	r4, r0
 801809e:	4623      	mov	r3, r4
 80180a0:	d807      	bhi.n	80180b2 <memmove+0x20>
 80180a2:	1e43      	subs	r3, r0, #1
 80180a4:	42a1      	cmp	r1, r4
 80180a6:	d008      	beq.n	80180ba <memmove+0x28>
 80180a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180b0:	e7f8      	b.n	80180a4 <memmove+0x12>
 80180b2:	4402      	add	r2, r0
 80180b4:	4601      	mov	r1, r0
 80180b6:	428a      	cmp	r2, r1
 80180b8:	d100      	bne.n	80180bc <memmove+0x2a>
 80180ba:	bd10      	pop	{r4, pc}
 80180bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180c4:	e7f7      	b.n	80180b6 <memmove+0x24>
	...

080180c8 <_sbrk_r>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	4d06      	ldr	r5, [pc, #24]	; (80180e4 <_sbrk_r+0x1c>)
 80180cc:	2300      	movs	r3, #0
 80180ce:	4604      	mov	r4, r0
 80180d0:	4608      	mov	r0, r1
 80180d2:	602b      	str	r3, [r5, #0]
 80180d4:	f7eb fb6e 	bl	80037b4 <_sbrk>
 80180d8:	1c43      	adds	r3, r0, #1
 80180da:	d102      	bne.n	80180e2 <_sbrk_r+0x1a>
 80180dc:	682b      	ldr	r3, [r5, #0]
 80180de:	b103      	cbz	r3, 80180e2 <_sbrk_r+0x1a>
 80180e0:	6023      	str	r3, [r4, #0]
 80180e2:	bd38      	pop	{r3, r4, r5, pc}
 80180e4:	24003334 	.word	0x24003334

080180e8 <_realloc_r>:
 80180e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ec:	4680      	mov	r8, r0
 80180ee:	4614      	mov	r4, r2
 80180f0:	460e      	mov	r6, r1
 80180f2:	b921      	cbnz	r1, 80180fe <_realloc_r+0x16>
 80180f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180f8:	4611      	mov	r1, r2
 80180fa:	f7ff b8c3 	b.w	8017284 <_malloc_r>
 80180fe:	b92a      	cbnz	r2, 801810c <_realloc_r+0x24>
 8018100:	f7ff f854 	bl	80171ac <_free_r>
 8018104:	4625      	mov	r5, r4
 8018106:	4628      	mov	r0, r5
 8018108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801810c:	f000 f914 	bl	8018338 <_malloc_usable_size_r>
 8018110:	4284      	cmp	r4, r0
 8018112:	4607      	mov	r7, r0
 8018114:	d802      	bhi.n	801811c <_realloc_r+0x34>
 8018116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801811a:	d812      	bhi.n	8018142 <_realloc_r+0x5a>
 801811c:	4621      	mov	r1, r4
 801811e:	4640      	mov	r0, r8
 8018120:	f7ff f8b0 	bl	8017284 <_malloc_r>
 8018124:	4605      	mov	r5, r0
 8018126:	2800      	cmp	r0, #0
 8018128:	d0ed      	beq.n	8018106 <_realloc_r+0x1e>
 801812a:	42bc      	cmp	r4, r7
 801812c:	4622      	mov	r2, r4
 801812e:	4631      	mov	r1, r6
 8018130:	bf28      	it	cs
 8018132:	463a      	movcs	r2, r7
 8018134:	f7ff f82c 	bl	8017190 <memcpy>
 8018138:	4631      	mov	r1, r6
 801813a:	4640      	mov	r0, r8
 801813c:	f7ff f836 	bl	80171ac <_free_r>
 8018140:	e7e1      	b.n	8018106 <_realloc_r+0x1e>
 8018142:	4635      	mov	r5, r6
 8018144:	e7df      	b.n	8018106 <_realloc_r+0x1e>
	...

08018148 <_strtol_l.constprop.0>:
 8018148:	2b01      	cmp	r3, #1
 801814a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801814e:	d001      	beq.n	8018154 <_strtol_l.constprop.0+0xc>
 8018150:	2b24      	cmp	r3, #36	; 0x24
 8018152:	d906      	bls.n	8018162 <_strtol_l.constprop.0+0x1a>
 8018154:	f7fe ffe8 	bl	8017128 <__errno>
 8018158:	2316      	movs	r3, #22
 801815a:	6003      	str	r3, [r0, #0]
 801815c:	2000      	movs	r0, #0
 801815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018162:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018248 <_strtol_l.constprop.0+0x100>
 8018166:	460d      	mov	r5, r1
 8018168:	462e      	mov	r6, r5
 801816a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801816e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018172:	f017 0708 	ands.w	r7, r7, #8
 8018176:	d1f7      	bne.n	8018168 <_strtol_l.constprop.0+0x20>
 8018178:	2c2d      	cmp	r4, #45	; 0x2d
 801817a:	d132      	bne.n	80181e2 <_strtol_l.constprop.0+0x9a>
 801817c:	782c      	ldrb	r4, [r5, #0]
 801817e:	2701      	movs	r7, #1
 8018180:	1cb5      	adds	r5, r6, #2
 8018182:	2b00      	cmp	r3, #0
 8018184:	d05b      	beq.n	801823e <_strtol_l.constprop.0+0xf6>
 8018186:	2b10      	cmp	r3, #16
 8018188:	d109      	bne.n	801819e <_strtol_l.constprop.0+0x56>
 801818a:	2c30      	cmp	r4, #48	; 0x30
 801818c:	d107      	bne.n	801819e <_strtol_l.constprop.0+0x56>
 801818e:	782c      	ldrb	r4, [r5, #0]
 8018190:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018194:	2c58      	cmp	r4, #88	; 0x58
 8018196:	d14d      	bne.n	8018234 <_strtol_l.constprop.0+0xec>
 8018198:	786c      	ldrb	r4, [r5, #1]
 801819a:	2310      	movs	r3, #16
 801819c:	3502      	adds	r5, #2
 801819e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80181a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80181a6:	f04f 0e00 	mov.w	lr, #0
 80181aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80181ae:	4676      	mov	r6, lr
 80181b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80181b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80181b8:	f1bc 0f09 	cmp.w	ip, #9
 80181bc:	d816      	bhi.n	80181ec <_strtol_l.constprop.0+0xa4>
 80181be:	4664      	mov	r4, ip
 80181c0:	42a3      	cmp	r3, r4
 80181c2:	dd24      	ble.n	801820e <_strtol_l.constprop.0+0xc6>
 80181c4:	f1be 3fff 	cmp.w	lr, #4294967295
 80181c8:	d008      	beq.n	80181dc <_strtol_l.constprop.0+0x94>
 80181ca:	45b1      	cmp	r9, r6
 80181cc:	d31c      	bcc.n	8018208 <_strtol_l.constprop.0+0xc0>
 80181ce:	d101      	bne.n	80181d4 <_strtol_l.constprop.0+0x8c>
 80181d0:	45a2      	cmp	sl, r4
 80181d2:	db19      	blt.n	8018208 <_strtol_l.constprop.0+0xc0>
 80181d4:	fb06 4603 	mla	r6, r6, r3, r4
 80181d8:	f04f 0e01 	mov.w	lr, #1
 80181dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181e0:	e7e8      	b.n	80181b4 <_strtol_l.constprop.0+0x6c>
 80181e2:	2c2b      	cmp	r4, #43	; 0x2b
 80181e4:	bf04      	itt	eq
 80181e6:	782c      	ldrbeq	r4, [r5, #0]
 80181e8:	1cb5      	addeq	r5, r6, #2
 80181ea:	e7ca      	b.n	8018182 <_strtol_l.constprop.0+0x3a>
 80181ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80181f0:	f1bc 0f19 	cmp.w	ip, #25
 80181f4:	d801      	bhi.n	80181fa <_strtol_l.constprop.0+0xb2>
 80181f6:	3c37      	subs	r4, #55	; 0x37
 80181f8:	e7e2      	b.n	80181c0 <_strtol_l.constprop.0+0x78>
 80181fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80181fe:	f1bc 0f19 	cmp.w	ip, #25
 8018202:	d804      	bhi.n	801820e <_strtol_l.constprop.0+0xc6>
 8018204:	3c57      	subs	r4, #87	; 0x57
 8018206:	e7db      	b.n	80181c0 <_strtol_l.constprop.0+0x78>
 8018208:	f04f 3eff 	mov.w	lr, #4294967295
 801820c:	e7e6      	b.n	80181dc <_strtol_l.constprop.0+0x94>
 801820e:	f1be 3fff 	cmp.w	lr, #4294967295
 8018212:	d105      	bne.n	8018220 <_strtol_l.constprop.0+0xd8>
 8018214:	2322      	movs	r3, #34	; 0x22
 8018216:	6003      	str	r3, [r0, #0]
 8018218:	4646      	mov	r6, r8
 801821a:	b942      	cbnz	r2, 801822e <_strtol_l.constprop.0+0xe6>
 801821c:	4630      	mov	r0, r6
 801821e:	e79e      	b.n	801815e <_strtol_l.constprop.0+0x16>
 8018220:	b107      	cbz	r7, 8018224 <_strtol_l.constprop.0+0xdc>
 8018222:	4276      	negs	r6, r6
 8018224:	2a00      	cmp	r2, #0
 8018226:	d0f9      	beq.n	801821c <_strtol_l.constprop.0+0xd4>
 8018228:	f1be 0f00 	cmp.w	lr, #0
 801822c:	d000      	beq.n	8018230 <_strtol_l.constprop.0+0xe8>
 801822e:	1e69      	subs	r1, r5, #1
 8018230:	6011      	str	r1, [r2, #0]
 8018232:	e7f3      	b.n	801821c <_strtol_l.constprop.0+0xd4>
 8018234:	2430      	movs	r4, #48	; 0x30
 8018236:	2b00      	cmp	r3, #0
 8018238:	d1b1      	bne.n	801819e <_strtol_l.constprop.0+0x56>
 801823a:	2308      	movs	r3, #8
 801823c:	e7af      	b.n	801819e <_strtol_l.constprop.0+0x56>
 801823e:	2c30      	cmp	r4, #48	; 0x30
 8018240:	d0a5      	beq.n	801818e <_strtol_l.constprop.0+0x46>
 8018242:	230a      	movs	r3, #10
 8018244:	e7ab      	b.n	801819e <_strtol_l.constprop.0+0x56>
 8018246:	bf00      	nop
 8018248:	08018617 	.word	0x08018617

0801824c <_strtol_r>:
 801824c:	f7ff bf7c 	b.w	8018148 <_strtol_l.constprop.0>

08018250 <_strtoul_l.constprop.0>:
 8018250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018254:	4f36      	ldr	r7, [pc, #216]	; (8018330 <_strtoul_l.constprop.0+0xe0>)
 8018256:	4686      	mov	lr, r0
 8018258:	460d      	mov	r5, r1
 801825a:	4628      	mov	r0, r5
 801825c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018260:	5d3e      	ldrb	r6, [r7, r4]
 8018262:	f016 0608 	ands.w	r6, r6, #8
 8018266:	d1f8      	bne.n	801825a <_strtoul_l.constprop.0+0xa>
 8018268:	2c2d      	cmp	r4, #45	; 0x2d
 801826a:	d130      	bne.n	80182ce <_strtoul_l.constprop.0+0x7e>
 801826c:	782c      	ldrb	r4, [r5, #0]
 801826e:	2601      	movs	r6, #1
 8018270:	1c85      	adds	r5, r0, #2
 8018272:	2b00      	cmp	r3, #0
 8018274:	d057      	beq.n	8018326 <_strtoul_l.constprop.0+0xd6>
 8018276:	2b10      	cmp	r3, #16
 8018278:	d109      	bne.n	801828e <_strtoul_l.constprop.0+0x3e>
 801827a:	2c30      	cmp	r4, #48	; 0x30
 801827c:	d107      	bne.n	801828e <_strtoul_l.constprop.0+0x3e>
 801827e:	7828      	ldrb	r0, [r5, #0]
 8018280:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018284:	2858      	cmp	r0, #88	; 0x58
 8018286:	d149      	bne.n	801831c <_strtoul_l.constprop.0+0xcc>
 8018288:	786c      	ldrb	r4, [r5, #1]
 801828a:	2310      	movs	r3, #16
 801828c:	3502      	adds	r5, #2
 801828e:	f04f 38ff 	mov.w	r8, #4294967295
 8018292:	2700      	movs	r7, #0
 8018294:	fbb8 f8f3 	udiv	r8, r8, r3
 8018298:	fb03 f908 	mul.w	r9, r3, r8
 801829c:	ea6f 0909 	mvn.w	r9, r9
 80182a0:	4638      	mov	r0, r7
 80182a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80182a6:	f1bc 0f09 	cmp.w	ip, #9
 80182aa:	d815      	bhi.n	80182d8 <_strtoul_l.constprop.0+0x88>
 80182ac:	4664      	mov	r4, ip
 80182ae:	42a3      	cmp	r3, r4
 80182b0:	dd23      	ble.n	80182fa <_strtoul_l.constprop.0+0xaa>
 80182b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80182b6:	d007      	beq.n	80182c8 <_strtoul_l.constprop.0+0x78>
 80182b8:	4580      	cmp	r8, r0
 80182ba:	d31b      	bcc.n	80182f4 <_strtoul_l.constprop.0+0xa4>
 80182bc:	d101      	bne.n	80182c2 <_strtoul_l.constprop.0+0x72>
 80182be:	45a1      	cmp	r9, r4
 80182c0:	db18      	blt.n	80182f4 <_strtoul_l.constprop.0+0xa4>
 80182c2:	fb00 4003 	mla	r0, r0, r3, r4
 80182c6:	2701      	movs	r7, #1
 80182c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182cc:	e7e9      	b.n	80182a2 <_strtoul_l.constprop.0+0x52>
 80182ce:	2c2b      	cmp	r4, #43	; 0x2b
 80182d0:	bf04      	itt	eq
 80182d2:	782c      	ldrbeq	r4, [r5, #0]
 80182d4:	1c85      	addeq	r5, r0, #2
 80182d6:	e7cc      	b.n	8018272 <_strtoul_l.constprop.0+0x22>
 80182d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80182dc:	f1bc 0f19 	cmp.w	ip, #25
 80182e0:	d801      	bhi.n	80182e6 <_strtoul_l.constprop.0+0x96>
 80182e2:	3c37      	subs	r4, #55	; 0x37
 80182e4:	e7e3      	b.n	80182ae <_strtoul_l.constprop.0+0x5e>
 80182e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80182ea:	f1bc 0f19 	cmp.w	ip, #25
 80182ee:	d804      	bhi.n	80182fa <_strtoul_l.constprop.0+0xaa>
 80182f0:	3c57      	subs	r4, #87	; 0x57
 80182f2:	e7dc      	b.n	80182ae <_strtoul_l.constprop.0+0x5e>
 80182f4:	f04f 37ff 	mov.w	r7, #4294967295
 80182f8:	e7e6      	b.n	80182c8 <_strtoul_l.constprop.0+0x78>
 80182fa:	1c7b      	adds	r3, r7, #1
 80182fc:	d106      	bne.n	801830c <_strtoul_l.constprop.0+0xbc>
 80182fe:	2322      	movs	r3, #34	; 0x22
 8018300:	f8ce 3000 	str.w	r3, [lr]
 8018304:	4638      	mov	r0, r7
 8018306:	b932      	cbnz	r2, 8018316 <_strtoul_l.constprop.0+0xc6>
 8018308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801830c:	b106      	cbz	r6, 8018310 <_strtoul_l.constprop.0+0xc0>
 801830e:	4240      	negs	r0, r0
 8018310:	2a00      	cmp	r2, #0
 8018312:	d0f9      	beq.n	8018308 <_strtoul_l.constprop.0+0xb8>
 8018314:	b107      	cbz	r7, 8018318 <_strtoul_l.constprop.0+0xc8>
 8018316:	1e69      	subs	r1, r5, #1
 8018318:	6011      	str	r1, [r2, #0]
 801831a:	e7f5      	b.n	8018308 <_strtoul_l.constprop.0+0xb8>
 801831c:	2430      	movs	r4, #48	; 0x30
 801831e:	2b00      	cmp	r3, #0
 8018320:	d1b5      	bne.n	801828e <_strtoul_l.constprop.0+0x3e>
 8018322:	2308      	movs	r3, #8
 8018324:	e7b3      	b.n	801828e <_strtoul_l.constprop.0+0x3e>
 8018326:	2c30      	cmp	r4, #48	; 0x30
 8018328:	d0a9      	beq.n	801827e <_strtoul_l.constprop.0+0x2e>
 801832a:	230a      	movs	r3, #10
 801832c:	e7af      	b.n	801828e <_strtoul_l.constprop.0+0x3e>
 801832e:	bf00      	nop
 8018330:	08018617 	.word	0x08018617

08018334 <_strtoul_r>:
 8018334:	f7ff bf8c 	b.w	8018250 <_strtoul_l.constprop.0>

08018338 <_malloc_usable_size_r>:
 8018338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801833c:	1f18      	subs	r0, r3, #4
 801833e:	2b00      	cmp	r3, #0
 8018340:	bfbc      	itt	lt
 8018342:	580b      	ldrlt	r3, [r1, r0]
 8018344:	18c0      	addlt	r0, r0, r3
 8018346:	4770      	bx	lr

08018348 <_init>:
 8018348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834a:	bf00      	nop
 801834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801834e:	bc08      	pop	{r3}
 8018350:	469e      	mov	lr, r3
 8018352:	4770      	bx	lr

08018354 <_fini>:
 8018354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018356:	bf00      	nop
 8018358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801835a:	bc08      	pop	{r3}
 801835c:	469e      	mov	lr, r3
 801835e:	4770      	bx	lr
